
CustomBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d17c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800d2bc  0800d2bc  0001d2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d43c  0800d43c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d444  0800d444  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800d450  0800d450  0001d450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d45c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032a0  200001fc  0800d658  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000349c  0800d658  0002349c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004841b  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007912  00000000  00000000  00068640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  0006ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  000726f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e591  00000000  00000000  00074c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a3ad  00000000  00000000  000931f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad84f  00000000  00000000  000bd5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016adf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0cc  00000000  00000000  0016ae48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d2a4 	.word	0x0800d2a4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	0800d2a4 	.word	0x0800d2a4

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000194:	f000 b96e 	b.w	8000474 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	468e      	mov	lr, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	f040 8083 	bne.w	80002c8 <__udivmoddi4+0x118>
 80001c2:	428a      	cmp	r2, r1
 80001c4:	4617      	mov	r7, r2
 80001c6:	d947      	bls.n	8000258 <__udivmoddi4+0xa8>
 80001c8:	fab2 f382 	clz	r3, r2
 80001cc:	b14b      	cbz	r3, 80001e2 <__udivmoddi4+0x32>
 80001ce:	f1c3 0120 	rsb	r1, r3, #32
 80001d2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d6:	fa20 f101 	lsr.w	r1, r0, r1
 80001da:	409f      	lsls	r7, r3
 80001dc:	ea41 0e0e 	orr.w	lr, r1, lr
 80001e0:	409c      	lsls	r4, r3
 80001e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e6:	fbbe fcf8 	udiv	ip, lr, r8
 80001ea:	fa1f f987 	uxth.w	r9, r7
 80001ee:	fb08 e21c 	mls	r2, r8, ip, lr
 80001f2:	fb0c f009 	mul.w	r0, ip, r9
 80001f6:	0c21      	lsrs	r1, r4, #16
 80001f8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001fc:	4290      	cmp	r0, r2
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	18ba      	adds	r2, r7, r2
 8000202:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000206:	f080 8118 	bcs.w	800043a <__udivmoddi4+0x28a>
 800020a:	4290      	cmp	r0, r2
 800020c:	f240 8115 	bls.w	800043a <__udivmoddi4+0x28a>
 8000210:	f1ac 0c02 	sub.w	ip, ip, #2
 8000214:	443a      	add	r2, r7
 8000216:	1a12      	subs	r2, r2, r0
 8000218:	fbb2 f0f8 	udiv	r0, r2, r8
 800021c:	fb08 2210 	mls	r2, r8, r0, r2
 8000220:	fb00 f109 	mul.w	r1, r0, r9
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	42a1      	cmp	r1, r4
 800022c:	d909      	bls.n	8000242 <__udivmoddi4+0x92>
 800022e:	193c      	adds	r4, r7, r4
 8000230:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000234:	f080 8103 	bcs.w	800043e <__udivmoddi4+0x28e>
 8000238:	42a1      	cmp	r1, r4
 800023a:	f240 8100 	bls.w	800043e <__udivmoddi4+0x28e>
 800023e:	3802      	subs	r0, #2
 8000240:	443c      	add	r4, r7
 8000242:	1a64      	subs	r4, r4, r1
 8000244:	2100      	movs	r1, #0
 8000246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa4>
 800024c:	2200      	movs	r2, #0
 800024e:	40dc      	lsrs	r4, r3
 8000250:	e9c6 4200 	strd	r4, r2, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	b902      	cbnz	r2, 800025c <__udivmoddi4+0xac>
 800025a:	deff      	udf	#255	; 0xff
 800025c:	fab2 f382 	clz	r3, r2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14f      	bne.n	8000304 <__udivmoddi4+0x154>
 8000264:	1a8d      	subs	r5, r1, r2
 8000266:	2101      	movs	r1, #1
 8000268:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800026c:	fa1f f882 	uxth.w	r8, r2
 8000270:	fbb5 fcfe 	udiv	ip, r5, lr
 8000274:	fb0e 551c 	mls	r5, lr, ip, r5
 8000278:	fb08 f00c 	mul.w	r0, r8, ip
 800027c:	0c22      	lsrs	r2, r4, #16
 800027e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000282:	42a8      	cmp	r0, r5
 8000284:	d907      	bls.n	8000296 <__udivmoddi4+0xe6>
 8000286:	197d      	adds	r5, r7, r5
 8000288:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800028c:	d202      	bcs.n	8000294 <__udivmoddi4+0xe4>
 800028e:	42a8      	cmp	r0, r5
 8000290:	f200 80e9 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 8000294:	4694      	mov	ip, r2
 8000296:	1a2d      	subs	r5, r5, r0
 8000298:	fbb5 f0fe 	udiv	r0, r5, lr
 800029c:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002aa:	45a0      	cmp	r8, r4
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0x10e>
 80002ae:	193c      	adds	r4, r7, r4
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b4:	d202      	bcs.n	80002bc <__udivmoddi4+0x10c>
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	f200 80d9 	bhi.w	800046e <__udivmoddi4+0x2be>
 80002bc:	4610      	mov	r0, r2
 80002be:	eba4 0408 	sub.w	r4, r4, r8
 80002c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c6:	e7c0      	b.n	800024a <__udivmoddi4+0x9a>
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d908      	bls.n	80002de <__udivmoddi4+0x12e>
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	f000 80b1 	beq.w	8000434 <__udivmoddi4+0x284>
 80002d2:	2100      	movs	r1, #0
 80002d4:	e9c6 0500 	strd	r0, r5, [r6]
 80002d8:	4608      	mov	r0, r1
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d14b      	bne.n	800037e <__udivmoddi4+0x1ce>
 80002e6:	42ab      	cmp	r3, r5
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0x140>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80b9 	bhi.w	8000462 <__udivmoddi4+0x2b2>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb65 0303 	sbc.w	r3, r5, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0aa      	beq.n	8000254 <__udivmoddi4+0xa4>
 80002fe:	e9c6 4e00 	strd	r4, lr, [r6]
 8000302:	e7a7      	b.n	8000254 <__udivmoddi4+0xa4>
 8000304:	409f      	lsls	r7, r3
 8000306:	f1c3 0220 	rsb	r2, r3, #32
 800030a:	40d1      	lsrs	r1, r2
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	fbb1 f0fe 	udiv	r0, r1, lr
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	fa24 f202 	lsr.w	r2, r4, r2
 8000320:	409d      	lsls	r5, r3
 8000322:	fb00 fc08 	mul.w	ip, r0, r8
 8000326:	432a      	orrs	r2, r5
 8000328:	0c15      	lsrs	r5, r2, #16
 800032a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032e:	45ac      	cmp	ip, r5
 8000330:	fa04 f403 	lsl.w	r4, r4, r3
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x19a>
 8000336:	197d      	adds	r5, r7, r5
 8000338:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800033c:	f080 808f 	bcs.w	800045e <__udivmoddi4+0x2ae>
 8000340:	45ac      	cmp	ip, r5
 8000342:	f240 808c 	bls.w	800045e <__udivmoddi4+0x2ae>
 8000346:	3802      	subs	r0, #2
 8000348:	443d      	add	r5, r7
 800034a:	eba5 050c 	sub.w	r5, r5, ip
 800034e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000352:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000356:	fb01 f908 	mul.w	r9, r1, r8
 800035a:	b295      	uxth	r5, r2
 800035c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000360:	45a9      	cmp	r9, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x1c4>
 8000364:	197d      	adds	r5, r7, r5
 8000366:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800036a:	d274      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 800036c:	45a9      	cmp	r9, r5
 800036e:	d972      	bls.n	8000456 <__udivmoddi4+0x2a6>
 8000370:	3902      	subs	r1, #2
 8000372:	443d      	add	r5, r7
 8000374:	eba5 0509 	sub.w	r5, r5, r9
 8000378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800037c:	e778      	b.n	8000270 <__udivmoddi4+0xc0>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	408b      	lsls	r3, r1
 8000384:	fa22 fc07 	lsr.w	ip, r2, r7
 8000388:	ea4c 0c03 	orr.w	ip, ip, r3
 800038c:	fa25 f407 	lsr.w	r4, r5, r7
 8000390:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000394:	fbb4 f9fe 	udiv	r9, r4, lr
 8000398:	fa1f f88c 	uxth.w	r8, ip
 800039c:	fb0e 4419 	mls	r4, lr, r9, r4
 80003a0:	fa20 f307 	lsr.w	r3, r0, r7
 80003a4:	fb09 fa08 	mul.w	sl, r9, r8
 80003a8:	408d      	lsls	r5, r1
 80003aa:	431d      	orrs	r5, r3
 80003ac:	0c2b      	lsrs	r3, r5, #16
 80003ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b2:	45a2      	cmp	sl, r4
 80003b4:	fa02 f201 	lsl.w	r2, r2, r1
 80003b8:	fa00 f301 	lsl.w	r3, r0, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x222>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c6:	d248      	bcs.n	800045a <__udivmoddi4+0x2aa>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d946      	bls.n	800045a <__udivmoddi4+0x2aa>
 80003cc:	f1a9 0902 	sub.w	r9, r9, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	eba4 040a 	sub.w	r4, r4, sl
 80003d6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003da:	fb0e 4410 	mls	r4, lr, r0, r4
 80003de:	fb00 fa08 	mul.w	sl, r0, r8
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x24e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003f4:	d22d      	bcs.n	8000452 <__udivmoddi4+0x2a2>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d92b      	bls.n	8000452 <__udivmoddi4+0x2a2>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c6      	mov	lr, r8
 800040e:	464d      	mov	r5, r9
 8000410:	d319      	bcc.n	8000446 <__udivmoddi4+0x296>
 8000412:	d016      	beq.n	8000442 <__udivmoddi4+0x292>
 8000414:	b15e      	cbz	r6, 800042e <__udivmoddi4+0x27e>
 8000416:	ebb3 020e 	subs.w	r2, r3, lr
 800041a:	eb64 0405 	sbc.w	r4, r4, r5
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431f      	orrs	r7, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c6 7400 	strd	r7, r4, [r6]
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70c      	b.n	8000254 <__udivmoddi4+0xa4>
 800043a:	468c      	mov	ip, r1
 800043c:	e6eb      	b.n	8000216 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6ff      	b.n	8000242 <__udivmoddi4+0x92>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e6      	bcs.n	8000414 <__udivmoddi4+0x264>
 8000446:	ebb8 0e02 	subs.w	lr, r8, r2
 800044a:	eb69 050c 	sbc.w	r5, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7e0      	b.n	8000414 <__udivmoddi4+0x264>
 8000452:	4628      	mov	r0, r5
 8000454:	e7d3      	b.n	80003fe <__udivmoddi4+0x24e>
 8000456:	4611      	mov	r1, r2
 8000458:	e78c      	b.n	8000374 <__udivmoddi4+0x1c4>
 800045a:	4681      	mov	r9, r0
 800045c:	e7b9      	b.n	80003d2 <__udivmoddi4+0x222>
 800045e:	4608      	mov	r0, r1
 8000460:	e773      	b.n	800034a <__udivmoddi4+0x19a>
 8000462:	4608      	mov	r0, r1
 8000464:	e749      	b.n	80002fa <__udivmoddi4+0x14a>
 8000466:	f1ac 0c02 	sub.w	ip, ip, #2
 800046a:	443d      	add	r5, r7
 800046c:	e713      	b.n	8000296 <__udivmoddi4+0xe6>
 800046e:	3802      	subs	r0, #2
 8000470:	443c      	add	r4, r7
 8000472:	e724      	b.n	80002be <__udivmoddi4+0x10e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 f805 	bl	80004ac <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
    }
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f904 	bl	80006ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f8e2 	bl	80006c2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ffeb 	bl	80004ee <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f8e9 	bl	8000704 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f902 	bl	800074e <_ZNSaIhED1Ev>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f8e5 	bl	800072e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ffeb 	bl	8000554 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>:


std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <_ZN4UARTC1EP20__UART_HandleTypeDef+0x30>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3308      	adds	r3, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffe6 	bl	800056e <_ZNSt6vectorIhSaIhEEC1Ev>
	this->handle = handle;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
	uartBuff = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
}
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800d38c 	.word	0x0800d38c

080005bc <_ZN4UARTD1Ev>:

UART::~UART() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <_ZN4UARTD1Ev+0x80>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
	if (uartBuff != NULL) free(uartBuff);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <_ZN4UARTD1Ev+0x20>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00c fcbc 	bl	800cf54 <free>

	HAL_UART_AbortReceive_IT(handle);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fa5f 	bl	8005aa4 <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f8ee 	bl	80007cc <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle->Instance);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 80005f8:	f000 f8f5 	bl	80007e6 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 8000602:	f000 f8ff 	bl	8000804 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8000606:	4603      	mov	r3, r0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f902 	bl	800081e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <_ZN4UARTD1Ev+0x6c>
		objectMap.erase(it);
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 8000624:	f000 f90e 	bl	8000844 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
UART::~UART() {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3308      	adds	r3, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f8b2 	bl	8000796 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800d38c 	.word	0x0800d38c
 8000640:	20000218 	.word	0x20000218

08000644 <_ZN4UARTD0Ev>:
UART::~UART() {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
}
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffb5 	bl	80005bc <_ZN4UARTD1Ev>
 8000652:	2120      	movs	r1, #32
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f00c fb0b 	bl	800cc70 <_ZdlPvj>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <_ZN4UART7hasDataEv>:
	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
	return 0;
}

bool UART::hasData() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(handle);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fa17 	bl	8005aa4 <HAL_UART_AbortReceive_IT>
	bool tmp = dataReady;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7f1b      	ldrb	r3, [r3, #28]
 800067a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6858      	ldr	r0, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6959      	ldr	r1, [r3, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	b29b      	uxth	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	f005 f9da 	bl	8005a44 <HAL_UART_Receive_IT>
	return tmp;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN4UART8sendDataEPhii>:

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return len;
}

short UART::sendData(uint8_t *data, int numBytes, int timeout) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(handle, data, numBytes, timeout);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6858      	ldr	r0, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	f005 f934 	bl	8005920 <HAL_UART_Transmit>

	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f92b 	bl	8000926 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f933 	bl	800093e <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3304      	adds	r3, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fed6 	bl	800048e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f92c 	bl	8000952 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f949 	bl	80009a4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000712:	4603      	mov	r3, r0
 8000714:	4619      	mov	r1, r3
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f925 	bl	8000966 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fed9 	bl	80004d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f93f 	bl	80009ba <_ZNSaIhEC1Ev>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f947 	bl	80009d2 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_ZNSaIhED1Ev>:
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f94e 	bl	80009f8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800077c:	461a      	mov	r2, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f944 	bl	8000a0c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fed8 	bl	800053c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000796:	b5b0      	push	{r4, r5, r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681c      	ldr	r4, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f942 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80007ae:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80007b0:	461a      	mov	r2, r3
 80007b2:	4629      	mov	r1, r5
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 f946 	bl	8000a46 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ffd2 	bl	8000766 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}

080007cc <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f934 	bl	8000a62 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f966 	bl	8000ae0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000814:	4603      	mov	r3, r0
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6839      	ldr	r1, [r7, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f955 	bl	8000b02 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 8000858:	4603      	mov	r3, r0
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f953 	bl	8000b3a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1d1a      	adds	r2, r3, #4
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f942 	bl	8000b3a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZNSt6vectorIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f942 	bl	8000b58 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d00c      	beq.n	800090c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 f94c 	bl	8000b98 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	605a      	str	r2, [r3, #4]
      }
 800090a:	e008      	b.n	800091e <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ffc6 	bl	800089e <_ZNSt6vectorIhSaIhEE3endEv>
 8000912:	4603      	mov	r3, r0
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f965 	bl	8000be8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 fa12 	bl	8000d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
      { }
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d012      	beq.n	800099c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f000 f9f8 	bl	8000d6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fff0 	bl	8000966 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f000 f9fb 	bl	8000d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800098c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fa01 	bl	8000d98 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800099a:	e7e9      	b.n	8000970 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <_ZNSaIhEC1Ev>:
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f9f9 	bl	8000dba <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
	{ }
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	if (__p)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d005      	beq.n	8000a2a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f9d2 	bl	8000dce <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f9c9 	bl	8000dec <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000a62:	b5b0      	push	{r4, r5, r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff99 	bl	80009a4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000a72:	4604      	mov	r4, r0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f9c6 	bl	8000e06 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	4621      	mov	r1, r4
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f9cb 	bl	8000e1c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8000a86:	4603      	mov	r3, r0
 8000a88:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f828 	bl	8000ae0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000a90:	4603      	mov	r3, r0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	f107 020c 	add.w	r2, r7, #12
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f9ef 	bl	8000e82 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8000aa4:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d110      	bne.n	8000acc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f9f8 	bl	8000ea8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000ab8:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f000 f9fd 	bl	8000ec0 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d004      	beq.n	8000ad6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f807 	bl	8000ae0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e000      	b.n	8000ad8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    }
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bdb0      	pop	{r4, r5, r7, pc}

08000ae0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1d1a      	adds	r2, r3, #4
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f9f6 	bl	8000ee4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	60bb      	str	r3, [r7, #8]
	++__result;
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f9f3 	bl	8000f00 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 8000b1a:	463a      	mov	r2, r7
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f9fd 	bl	8000f22 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8000b28:	68f9      	ldr	r1, [r7, #12]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fa08 	bl	8000f40 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 8000b30:	68bb      	ldr	r3, [r7, #8]
      }
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00e      	beq.n	8000b90 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5a 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000b7e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000b80:	461a      	mov	r2, r3
 8000b82:	4621      	mov	r1, r4
 8000b84:	6838      	ldr	r0, [r7, #0]
 8000b86:	f7ff ff5e 	bl	8000a46 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}

08000b98 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fa0d 	bl	8000fc4 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 fa11 	bl	8000fd8 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f805 	bl	8000bd4 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000bca:	4603      	mov	r3, r0
      }
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000bdc:	2301      	movs	r3, #1
      }
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000bf4:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f000 fa04 	bl	8001006 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000bfe:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fe36 	bl	800087e <_ZNSt6vectorIhSaIhEE5beginEv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	f107 0214 	add.w	r2, r7, #20
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa37 	bl	8001094 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8000c26:	4603      	mov	r3, r0
 8000c28:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa44 	bl	80010bc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000c34:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000c3a:	68fc      	ldr	r4, [r7, #12]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	18d5      	adds	r5, r2, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f9be 	bl	8000fc4 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff ffa2 	bl	8000b98 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000c58:	f7ff ffb1 	bl	8000bbe <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d027      	beq.n	8000cb2 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fa50 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fedd 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c78:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c80:	f000 fa30 	bl	80010e4 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000c84:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	3301      	adds	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fa3b 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fec8 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000ca2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca6:	6a39      	ldr	r1, [r7, #32]
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f000 fa1b 	bl	80010e4 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000cae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000cb0:	e026      	b.n	8000d00 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fa28 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff feb5 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000cc8:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4621      	mov	r1, r4
 8000cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cd0:	f000 fa26 	bl	8001120 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000cd4:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	3301      	adds	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fa13 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fea0 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000cf2:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cf6:	6a39      	ldr	r1, [r7, #32]
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 fa11 	bl	8001120 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000d00:	f7ff ff5d 	bl	8000bbe <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f083 0301 	eor.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d009      	beq.n	8000d24 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fe8d 	bl	8000a32 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	6a39      	ldr	r1, [r7, #32]
 8000d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d20:	f7ff fe91 	bl	8000a46 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000d24:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8000d2e:	461a      	mov	r2, r3
 8000d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d32:	f7ff fe6b 	bl	8000a0c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d40:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	441a      	add	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	609a      	str	r2, [r3, #8]
    }
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bdb0      	pop	{r4, r5, r7, pc}
 8000d54:	0800d2bc 	.word	0x0800d2bc

08000d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f9d4 	bl	8001152 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f9e5 	bl	800117c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f000 f9de 	bl	80011a0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f9de 	bl	80011ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3304      	adds	r3, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d01d      	beq.n	8000e6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8000e30:	68fc      	ldr	r4, [r7, #12]
 8000e32:	68b8      	ldr	r0, [r7, #8]
 8000e34:	f000 f89e 	bl	8000f74 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f83c 	bl	8000ec0 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	68b8      	ldr	r0, [r7, #8]
 8000e5a:	f7ff ff92 	bl	8000d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000e5e:	60b8      	str	r0, [r7, #8]
 8000e60:	e7e3      	b.n	8000e2a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f7ff ff82 	bl	8000d6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000e68:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8000e6a:	e7de      	b.n	8000e2a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f836 	bl	8000ee4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8000e78:	697b      	ldr	r3, [r7, #20]
    }
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}

08000e82 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f85f 	bl	8000f74 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	bf34      	ite	cc
 8000ed4:	2301      	movcc	r3, #1
 8000ed6:	2300      	movcs	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
      }
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00b feec 	bl	800ccea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
	return *this;
 8000f18:	687b      	ldr	r3, [r7, #4]
      }
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 8000f4a:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f00b fedc 	bl	800cd10 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 8000f58:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 8000f5a:	68f9      	ldr	r1, [r7, #12]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff1b 	bl	8000d98 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	615a      	str	r2, [r3, #20]
    }
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f926 	bl	80011ce <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f92d 	bl	80011ea <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 8000f90:	4603      	mov	r3, r0
      }
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZSt12__niter_baseIPhET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    { return __from + (__res - std::__niter_base(__from)); }

  // No need to wrap, iterator already has the right type.
  template<typename _Iterator>
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffed 	bl	8000fc4 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000fea:	4603      	mov	r3, r0
 8000fec:	781c      	ldrb	r4, [r3, #0]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff fa40 	bl	8000478 <_ZnwjPv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}

08001006 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b087      	sub	sp, #28
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f8f4 	bl	8001200 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8001018:	4604      	mov	r4, r0
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fc21 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001020:	4603      	mov	r3, r0
 8001022:	1ae2      	subs	r2, r4, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	bf34      	ite	cc
 800102a:	2301      	movcc	r3, #1
 800102c:	2300      	movcs	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f00b ff48 	bl	800ceca <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fc11 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001040:	4604      	mov	r4, r0
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff fc0d 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001048:	4603      	mov	r3, r0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	f107 0208 	add.w	r2, r7, #8
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8e3 	bl	8001222 <_ZSt3maxIjERKT_S2_S2_>
 800105c:	4603      	mov	r3, r0
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4423      	add	r3, r4
 8001062:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fbfc 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800106a:	4602      	mov	r2, r0
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	4293      	cmp	r3, r2
 8001070:	d306      	bcc.n	8001080 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f8c4 	bl	8001200 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8001078:	4602      	mov	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	4293      	cmp	r3, r2
 800107e:	d904      	bls.n	800108a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f8bd 	bl	8001200 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8001086:	4603      	mov	r3, r0
 8001088:	e000      	b.n	800108c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 800108a:	697b      	ldr	r3, [r7, #20]
      }
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f834 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	681c      	ldr	r4, [r3, #0]
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f000 f82f 	bl	800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80010ae:	4603      	mov	r3, r0
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1ae3      	subs	r3, r4, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8b9 	bl	8001248 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e000      	b.n	80010dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80010da:	2300      	movs	r3, #0
      }
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80010f2:	f88d 4000 	strb.w	r4, [sp]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f8b2 	bl	8001266 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8001102:	4603      	mov	r3, r0
      }
 8001104:	4618      	mov	r0, r3
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}

0800110c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f8ab 	bl	800128a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8001134:	4604      	mov	r4, r0
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f000 f8a7 	bl	800128a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800113c:	4601      	mov	r1, r0
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4620      	mov	r0, r4
 8001144:	f000 f8b0 	bl	80012a8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8001148:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}

08001152 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8b4 	bl	80012ca <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001162:	4604      	mov	r4, r0
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f000 f8ba 	bl	80012de <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	4620      	mov	r0, r4
 8001170:	f000 f8c3 	bl	80012fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}

0800117c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f89f 	bl	80012ca <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800118c:	4603      	mov	r3, r0
 800118e:	2201      	movs	r2, #1
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f8be 	bl	8001314 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f00b fd5d 	bl	800cc6c <_ZdlPv>
      }
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3310      	adds	r3, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f8a9 	bl	8001332 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f8b7 	bl	800137e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f899 	bl	800134a <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d201      	bcs.n	800123c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	e000      	b.n	800123e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800123c:	687b      	ldr	r3, [r7, #4]
    }
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001252:	2200      	movs	r2, #0
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f89b 	bl	8001392 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f8a5 	bl	80013ca <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8001280:	4603      	mov	r3, r0
      }
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f8b3 	bl	8001404 <_ZNSt13move_iteratorIPhEC1ES0_>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 f8b0 	bl	8001420 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3310      	adds	r3, #16
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f8aa 	bl	8001444 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8a8 	bl	800145c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f8a3 	bl	8001470 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8a5 	bl	800148a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8001340:	4603      	mov	r3, r0
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001352:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001356:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8a0 	bl	800149e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 800135e:	4603      	mov	r3, r0
 8001360:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f8a2 	bl	80014b6 <_ZSt3minIjERKT_S2_S2_>
 8001372:	4603      	mov	r3, r0
 8001374:	681b      	ldr	r3, [r3, #0]
      }
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 f89c 	bl	80014dc <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf8c      	ite	hi
 80013ac:	2301      	movhi	r3, #1
 80013ae:	2300      	movls	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80013b6:	f00b fd85 	bl	800cec4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f00b fc5a 	bl	800cc74 <_Znwj>
 80013c0:	4603      	mov	r3, r0
      }
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80013ca:	b5b0      	push	{r4, r5, r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fdde 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80013de:	4604      	mov	r4, r0
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f7ff fdda 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80013e6:	4605      	mov	r5, r0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fdd6 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80013ee:	4602      	mov	r2, r0
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4629      	mov	r1, r5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f000 f87c 	bl	80014f2 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80013fa:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}

08001404 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f877 	bl	8001528 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 800143a:	4603      	mov	r3, r0
    }
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f87b 	bl	8001548 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f00b fbf5 	bl	800cc6c <_ZdlPv>
      }
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f818 	bl	80014dc <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d201      	bcs.n	80014d0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	e000      	b.n	80014d2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80014d0:	687b      	ldr	r3, [r7, #4]
    }
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80014e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dd05      	ble.n	800151a <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	461a      	mov	r2, r3
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f00b fd33 	bl	800cf80 <memmove>
      return __result + __count;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
    }
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f80f 	bl	800155c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f80f 	bl	800158c <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800156e:	4604      	mov	r4, r0
 8001570:	68b8      	ldr	r0, [r7, #8]
 8001572:	f000 f80b 	bl	800158c <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001576:	4603      	mov	r3, r0
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4619      	mov	r1, r3
 800157c:	4620      	mov	r0, r4
 800157e:	f000 f816 	bl	80015ae <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8001582:	4603      	mov	r3, r0
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}

0800158c <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f82c 	bl	80015f4 <_ZNKSt13move_iteratorIPhE4baseEv>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f833 	bl	800160a <_ZSt12__miter_baseIPhET_S1_>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80015ae:	b5b0      	push	{r4, r5, r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fced 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80015c0:	4604      	mov	r4, r0
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f7ff fce9 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80015c8:	4605      	mov	r5, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fce4 	bl	8000f9a <_ZSt12__niter_baseIPhET_S1_>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4629      	mov	r1, r5
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 f820 	bl	800161e <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80015de:	4602      	mov	r2, r0
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fce2 	bl	8000fae <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80015ea:	4603      	mov	r3, r0
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}

080015f4 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <_ZSt12__miter_baseIPhET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f805 	bl	8001642 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001638:	4603      	mov	r3, r0
    }
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	461a      	mov	r2, r3
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f00b fc8c 	bl	800cf80 <memmove>
	  return __result + _Num;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
	}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <_Z41__static_initialization_and_destruction_0ii>:
	for (int i=0; i<packetSize_Bytes; ++i) {
		msgBuff.push_back(uartBuff[i]);
	}

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
}
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d110      	bne.n	80016aa <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d10b      	bne.n	80016aa <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001694:	461a      	mov	r2, r3
 8001696:	2300      	movs	r3, #0
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	6053      	str	r3, [r2, #4]
 800169c:	6093      	str	r3, [r2, #8]
 800169e:	60d3      	str	r3, [r2, #12]
 80016a0:	6113      	str	r3, [r2, #16]
 80016a2:	6153      	str	r3, [r2, #20]
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016a6:	f7fe ff2f 	bl	8000508 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d102      	bne.n	80016c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016bc:	f7fe ff31 	bl	8000522 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000218 	.word	0x20000218

080016cc <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff ffcf 	bl	8001678 <_Z41__static_initialization_and_destruction_0ii>
 80016da:	bd80      	pop	{r7, pc}

080016dc <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
 80016e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff ffc7 	bl	8001678 <_Z41__static_initialization_and_destruction_0ii>
 80016ea:	bd80      	pop	{r7, pc}

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f000 fdc5 	bl	800227e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f824 	bl	8001740 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f000 f94e 	bl	8001998 <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 80016fc:	f000 f87a 	bl	80017f4 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 8001700:	f000 f8da 	bl	80018b8 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8001704:	f000 f90c 	bl	8001920 <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 8001708:	f006 fd34 	bl	8008174 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800170c:	f00a fdee 	bl	800c2ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  buffer[0] = '\0';
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <main+0x44>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001716:	f008 f8e3 	bl	80098e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <main+0x48>)
 800171c:	2100      	movs	r1, #0
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <main+0x4c>)
 8001720:	f008 f944 	bl	80099ac <osThreadNew>
 8001724:	4603      	mov	r3, r0
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <main+0x50>)
 8001728:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800172a:	f008 f90b 	bl	8009944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172e:	e7fe      	b.n	800172e <main+0x42>
 8001730:	20000230 	.word	0x20000230
 8001734:	0800d394 	.word	0x0800d394
 8001738:	08001ad9 	.word	0x08001ad9
 800173c:	20000438 	.word	0x20000438

08001740 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b092      	sub	sp, #72	; 0x48
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	2234      	movs	r2, #52	; 0x34
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00b fc30 	bl	800cfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <_Z18SystemClock_Configv+0xb0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <_Z18SystemClock_Configv+0xb0>)
 800176c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001770:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001772:	2303      	movs	r3, #3
 8001774:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177a:	2301      	movs	r3, #1
 800177c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177e:	2310      	movs	r3, #16
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800178c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4618      	mov	r0, r3
 800179e:	f003 f87b 	bl	8004898 <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 80017b2:	f000 fa69 	bl	8001c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	230f      	movs	r3, #15
 80017b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ba:	2301      	movs	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fb92 	bl	8004ef8 <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80017e4:	f000 fa50 	bl	8001c88 <Error_Handler>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3748      	adds	r7, #72	; 0x48
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40007000 	.word	0x40007000

080017f4 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001806:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <_ZL11MX_ADC_Initv+0xc0>)
 8001808:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001844:	2201      	movs	r2, #1
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001852:	2210      	movs	r2, #16
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001864:	4812      	ldr	r0, [pc, #72]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001866:	f000 fd3f 	bl	80022e8 <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 800187a:	f000 fa05 	bl	8001c88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800187e:	2309      	movs	r3, #9
 8001880:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001882:	2301      	movs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <_ZL11MX_ADC_Initv+0xbc>)
 8001890:	f000 fe70 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 80018a4:	f000 f9f0 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000270 	.word	0x20000270
 80018b4:	40012400 	.word	0x40012400

080018b8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <_ZL12MX_I2C1_Initv+0x60>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <_ZL12MX_I2C1_Initv+0x64>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <_ZL12MX_I2C1_Initv+0x5c>)
 80018f6:	f001 fa5f 	bl	8002db8 <HAL_I2C_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800190a:	f000 f9bd 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002c4 	.word	0x200002c4
 8001918:	40005400 	.word	0x40005400
 800191c:	000186a0 	.word	0x000186a0

08001920 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001926:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <_ZL12MX_SPI1_Initv+0x74>)
 8001928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 800192c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001966:	2200      	movs	r2, #0
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 800196c:	220a      	movs	r2, #10
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <_ZL12MX_SPI1_Initv+0x70>)
 8001972:	f003 fd5d 	bl	8005430 <HAL_SPI_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001986:	f000 f97f 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000318 	.word	0x20000318
 8001994:	40013000 	.word	0x40013000

08001998 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019cc:	f043 0320 	orr.w	r3, r3, #32
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a33      	ldr	r2, [pc, #204]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <_ZL12MX_GPIO_Initv+0x130>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001a14:	482d      	ldr	r0, [pc, #180]	; (8001acc <_ZL12MX_GPIO_Initv+0x134>)
 8001a16:	f001 f99d 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f240 1103 	movw	r1, #259	; 0x103
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <_ZL12MX_GPIO_Initv+0x138>)
 8001a22:	f001 f997 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8001a26:	2200      	movs	r2, #0
 8001a28:	f64d 2101 	movw	r1, #55809	; 0xda01
 8001a2c:	4829      	ldr	r0, [pc, #164]	; (8001ad4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001a2e:	f001 f991 	bl	8002d54 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin|PWR_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 8001a32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4820      	ldr	r0, [pc, #128]	; (8001acc <_ZL12MX_GPIO_Initv+0x134>)
 8001a4c:	f001 f802 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_G_Pin PWR_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin;
 8001a50:	f240 1303 	movw	r3, #259	; 0x103
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <_ZL12MX_GPIO_Initv+0x138>)
 8001a6a:	f000 fff3 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BAT_P_Pin */
  GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <_ZL12MX_GPIO_Initv+0x138>)
 8001a82:	f000 ffe7 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SD_CS_Pin MLX_TRIG_Pin SD_LED_G_Pin BLE_STATUS_Pin
                           BLE_EN_Pin PWR_LED_B_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8001a86:	f64d 2301 	movw	r3, #55809	; 0xda01
 8001a8a:	617b      	str	r3, [r7, #20]
                          |BLE_EN_Pin|PWR_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001aa0:	f000 ffd8 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MLX_RDY_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MLX_RDY_Pin|BLE_INT_Pin;
 8001aa4:	f242 4304 	movw	r3, #9220	; 0x2404
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001aba:	f000 ffcb 	bl	8002a54 <HAL_GPIO_Init>

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09a      	sub	sp, #104	; 0x68
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001ae0:	f00a fc04 	bl	800c2ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  std::vector<uint8_t> msgBuff;
 8001ae4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd40 	bl	800056e <_ZNSt6vectorIhSaIhEEC1Ev>
  uint8_t buff[10] = "Hello!\r\n";//{0};
 8001aee:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <_Z16StartDefaultTaskPv+0x16c>)
 8001af0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001af6:	c303      	stmia	r3!, {r0, r1}
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

  HAL_GPIO_WritePin(BLE_EN_GPIO_Port, BLE_EN_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b06:	4850      	ldr	r0, [pc, #320]	; (8001c48 <_Z16StartDefaultTaskPv+0x170>)
 8001b08:	f001 f924 	bl	8002d54 <HAL_GPIO_WritePin>
  uint8_t tmp[64] = "+++";
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <_Z16StartDefaultTaskPv+0x174>)
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	223c      	movs	r2, #60	; 0x3c
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00b fa4b 	bl	800cfb4 <memset>
  uint8_t *msg = msgBuff.data();
 8001b1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f8b5 	bl	8001c92 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001b28:	6638      	str	r0, [r7, #96]	; 0x60

  ble.sendData(tmp, sizeof(tmp));
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	230a      	movs	r3, #10
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	4847      	ldr	r0, [pc, #284]	; (8001c50 <_Z16StartDefaultTaskPv+0x178>)
 8001b34:	f7fe fdb1 	bl	800069a <_ZN4UART8sendDataEPhii>

  memcpy(tmp, "AT\r\n", sizeof(tmp));
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	4945      	ldr	r1, [pc, #276]	; (8001c54 <_Z16StartDefaultTaskPv+0x17c>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00b fa0f 	bl	800cf64 <memcpy>
  /* Infinite loop */
  for(;;)
  {
	  //CDC_Transmit_FS(buff, sizeof(buff));
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8001b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4a:	4843      	ldr	r0, [pc, #268]	; (8001c58 <_Z16StartDefaultTaskPv+0x180>)
 8001b4c:	f001 f91a 	bl	8002d84 <HAL_GPIO_TogglePin>

	  if(buffer[0] != '\0') {
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <_Z16StartDefaultTaskPv+0x184>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d064      	beq.n	8001c22 <_Z16StartDefaultTaskPv+0x14a>
		  //int len = usb.getData(buff);
		  CDC_Transmit_FS(buffer, sizeof(buffer));
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	4840      	ldr	r0, [pc, #256]	; (8001c5c <_Z16StartDefaultTaskPv+0x184>)
 8001b5c:	f00a fc94 	bl	800c488 <CDC_Transmit_FS>

		  msg = msgBuff.data();
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f894 	bl	8001c92 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001b6a:	6638      	str	r0, [r7, #96]	; 0x60
		  CDC_Transmit_FS(msg, msgBuff.size());
 8001b6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fe76 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001b7e:	f00a fc83 	bl	800c488 <CDC_Transmit_FS>

		  //usb.sendData(buff, len, 2);
		  for(int i=0; buffer[i] != '\0' && i<64; ++i) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	667b      	str	r3, [r7, #100]	; 0x64
 8001b86:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <_Z16StartDefaultTaskPv+0x184>)
 8001b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00f      	beq.n	8001bb2 <_Z16StartDefaultTaskPv+0xda>
 8001b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b94:	2b3f      	cmp	r3, #63	; 0x3f
 8001b96:	dc0c      	bgt.n	8001bb2 <_Z16StartDefaultTaskPv+0xda>
			  msgBuff.push_back(buffer[i]);
 8001b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <_Z16StartDefaultTaskPv+0x184>)
 8001b9c:	441a      	add	r2, r3
 8001b9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fe99 	bl	80008dc <_ZNSt6vectorIhSaIhEE9push_backERKh>
		  for(int i=0; buffer[i] != '\0' && i<64; ++i) {
 8001baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bac:	3301      	adds	r3, #1
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
 8001bb0:	e7e9      	b.n	8001b86 <_Z16StartDefaultTaskPv+0xae>
		  }

		  msg = msgBuff.data();
 8001bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f86b 	bl	8001c92 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001bbc:	6638      	str	r0, [r7, #96]	; 0x60
		  if(msg[msgBuff.size()-1] == '\n') {
 8001bbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fe4d 	bl	8000862 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b0a      	cmp	r3, #10
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <_Z16StartDefaultTaskPv+0x140>

			  memcpy(tmp, "Transmitted: ", 13);
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	220d      	movs	r2, #13
 8001be6:	491e      	ldr	r1, [pc, #120]	; (8001c60 <_Z16StartDefaultTaskPv+0x188>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00b f9bb 	bl	800cf64 <memcpy>
			  CDC_Transmit_FS(tmp, sizeof(tmp));
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	2140      	movs	r1, #64	; 0x40
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00a fc47 	bl	800c488 <CDC_Transmit_FS>

			  CDC_Transmit_FS(msg, sizeof(msg));
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001bfe:	f00a fc43 	bl	800c488 <CDC_Transmit_FS>
			  ble.sendData(msg, sizeof(msg), 2);
 8001c02:	2302      	movs	r3, #2
 8001c04:	2204      	movs	r2, #4
 8001c06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <_Z16StartDefaultTaskPv+0x178>)
 8001c0a:	f7fe fd46 	bl	800069a <_ZN4UART8sendDataEPhii>
			  msgBuff.clear();
 8001c0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fe54 	bl	80008c0 <_ZNSt6vectorIhSaIhEE5clearEv>
		  }
		  memset(buffer, '\0', 64);
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <_Z16StartDefaultTaskPv+0x184>)
 8001c1e:	f00b f9c9 	bl	800cfb4 <memset>
	  }
	  if(ble.hasData()) {
 8001c22:	480b      	ldr	r0, [pc, #44]	; (8001c50 <_Z16StartDefaultTaskPv+0x178>)
 8001c24:	f7fe fd1e 	bl	8000664 <_ZN4UART7hasDataEv>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <_Z16StartDefaultTaskPv+0x162>
		  //int len = ble.getData(buff);
		  CDC_Transmit_FS(buff, sizeof(buff));
 8001c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c32:	210a      	movs	r1, #10
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00a fc27 	bl	800c488 <CDC_Transmit_FS>
		  //usb.sendData(buff, len, 2);
	  }
	  osDelay(100);
 8001c3a:	2064      	movs	r0, #100	; 0x64
 8001c3c:	f007 ff60 	bl	8009b00 <osDelay>
  }
 8001c40:	e781      	b.n	8001b46 <_Z16StartDefaultTaskPv+0x6e>
 8001c42:	bf00      	nop
 8001c44:	0800d2fc 	.word	0x0800d2fc
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	002b2b2b 	.word	0x002b2b2b
 8001c50:	20000418 	.word	0x20000418
 8001c54:	0800d2e4 	.word	0x0800d2e4
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	20000230 	.word	0x20000230
 8001c60:	0800d2ec 	.word	0x0800d2ec

08001c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c76:	f000 fb1b 	bl	80022b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40011000 	.word	0x40011000

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>

08001c92 <_ZNSt6vectorIhSaIhEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f805 	bl	8001cb0 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d107      	bne.n	8001cf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
UART usb(&huart1), ble(&huart2);
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001ce6:	f7fe fc4f 	bl	8000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8001cea:	490d      	ldr	r1, [pc, #52]	; (8001d20 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001cee:	f7fe fc4b 	bl	8000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d105      	bne.n	8001d0e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001d02:	4808      	ldr	r0, [pc, #32]	; (8001d24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001d04:	f7fe fc5a 	bl	80005bc <_ZN4UARTD1Ev>
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001d0a:	f7fe fc57 	bl	80005bc <_ZN4UARTD1Ev>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000370 	.word	0x20000370
 8001d1c:	200003f8 	.word	0x200003f8
 8001d20:	200003b4 	.word	0x200003b4
 8001d24:	20000418 	.word	0x20000418

08001d28 <_GLOBAL__sub_I_buffer>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff ffc9 	bl	8001cc8 <_Z41__static_initialization_and_destruction_0ii>
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_GLOBAL__sub_D_buffer>:
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff ffc1 	bl	8001cc8 <_Z41__static_initialization_and_destruction_0ii>
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_MspInit+0x64>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_MspInit+0x64>)
 8001d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d58:	6253      	str	r3, [r2, #36]	; 0x24
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_MspInit+0x64>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_MspInit+0x64>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_MspInit+0x64>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_MspInit+0x64>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_MspInit+0x64>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_MspInit+0x64>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6253      	str	r3, [r2, #36]	; 0x24
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_MspInit+0x64>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	210f      	movs	r1, #15
 8001d9a:	f06f 0001 	mvn.w	r0, #1
 8001d9e:	f000 fdee 	bl	800297e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d13b      	bne.n	8001e4a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_ADC_MspInit+0xa8>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_ADC_MspInit+0xac>)
 8001e2e:	f000 fe11 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 8001e32:	2302      	movs	r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HAL_ADC_MspInit+0xb0>)
 8001e46:	f000 fe05 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012400 	.word	0x40012400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_I2C_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d127      	bne.n	8001ed6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <HAL_I2C_MspInit+0x84>)
 8001eba:	f000 fdcb 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_SPI_MspInit+0x7c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d127      	bne.n	8001f5e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23e0      	movs	r3, #224	; 0xe0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_SPI_MspInit+0x84>)
 8001f5a:	f000 fd7b 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	201b      	movs	r0, #27
 8001f8a:	f000 fcf8 	bl	800297e <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8001f8e:	201b      	movs	r0, #27
 8001f90:	f000 fd11 	bl	80029b6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_InitTick+0x9c>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_InitTick+0x9c>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_InitTick+0x9c>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fac:	f107 0210 	add.w	r2, r7, #16
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 f9aa 	bl	8005310 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f003 f994 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <HAL_InitTick+0xa0>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_InitTick+0xa4>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_InitTick+0xa8>)
 8001fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_InitTick+0xa4>)
 8001fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fdc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_InitTick+0xa4>)
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_InitTick+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_InitTick+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <HAL_InitTick+0xa4>)
 8001ff2:	f003 fa99 	bl	8005528 <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <HAL_InitTick+0xa4>)
 8001ffe:	f003 fadb 	bl	80055b8 <HAL_TIM_Base_Start_IT>
 8002002:	4603      	mov	r3, r0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3730      	adds	r7, #48	; 0x30
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	431bde83 	.word	0x431bde83
 8002018:	20002050 	.word	0x20002050
 800201c:	40011000 	.word	0x40011000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
	...

0800204c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <USB_LP_IRQHandler+0x10>)
 8002052:	f001 f8f9 	bl	8003248 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200031ac 	.word	0x200031ac

08002060 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <TIM11_IRQHandler+0x10>)
 8002066:	f003 faf9 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20002050 	.word	0x20002050

08002074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <_kill>:

int _kill(int pid, int sig)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208c:	f00a ff30 	bl	800cef0 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	2216      	movs	r2, #22
 8002094:	601a      	str	r2, [r3, #0]
	return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_exit>:

void _exit (int status)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffe7 	bl	8002082 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b4:	e7fe      	b.n	80020b4 <_exit+0x12>
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f00a ff02 	bl	800cef0 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20004000 	.word	0x20004000
 8002118:	00000400 	.word	0x00000400
 800211c:	2000043c 	.word	0x2000043c
 8002120:	200034a0 	.word	0x200034a0

08002124 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	; (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	; (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002156:	f7ff ffe5 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215a:	f00a fecf 	bl	800cefc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215e:	f7ff fac5 	bl	80016ec <main>
  bx lr
 8002162:	4770      	bx	lr
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800216c:	0800d45c 	.word	0x0800d45c
  ldr r2, =_sbss
 8002170:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002174:	2000349c 	.word	0x2000349c

08002178 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC1_IRQHandler>

0800217a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
 800218c:	f7ff fd7c 	bl	8001c88 <Error_Handler>
 8002190:	e7fe      	b.n	8002190 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7a1b      	ldrb	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d904      	bls.n	80021a4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
}
 800219c:	bf00      	nop
 800219e:	f7ff fd73 	bl	8001c88 <Error_Handler>
 80021a2:	e7fe      	b.n	80021a2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7a1b      	ldrb	r3, [r3, #8]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	b2d1      	uxtb	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	7211      	strb	r1, [r2, #8]
 80021b0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021b2:	f3ef 8211 	mrs	r2, BASEPRI
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
 80021ec:	f7ff fd4c 	bl	8001c88 <Error_Handler>
 80021f0:	e7fe      	b.n	80021f0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7a1b      	ldrb	r3, [r3, #8]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7a1b      	ldrb	r3, [r3, #8]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d904      	bls.n	8002210 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002206:	b672      	cpsid	i
}
 8002208:	bf00      	nop
 800220a:	f7ff fd3d 	bl	8001c88 <Error_Handler>
 800220e:	e7fe      	b.n	800220e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002224:	bf00      	nop
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
 8002240:	f7ff fd22 	bl	8001c88 <Error_Handler>
 8002244:	e7fe      	b.n	8002244 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff96 	bl	800217a <stm32_lock_acquire>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
}
 8002266:	bf00      	nop
 8002268:	f7ff fd0e 	bl	8001c88 <Error_Handler>
 800226c:	e7fe      	b.n	800226c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ffb2 	bl	80021da <stm32_lock_release>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f000 fb6d 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228e:	200f      	movs	r0, #15
 8002290:	f7ff fe70 	bl	8001f74 <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	e001      	b.n	80022a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a0:	f7ff fd52 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a4:	79fb      	ldrb	r3, [r7, #7]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_IncTick+0x1c>)
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20002090 	.word	0x20002090
 80022d0:	20000008 	.word	0x20000008

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_GetTick+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20002090 	.word	0x20002090

080022e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e127      	b.n	8002558 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002324:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_ADC_Init+0x278>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a8d      	ldr	r2, [pc, #564]	; (8002560 <HAL_ADC_Init+0x278>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_ADC_Init+0x278>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fd37 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80ff 	bne.w	800254e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	f043 0202 	orr.w	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002364:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <HAL_ADC_Init+0x27c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	497c      	ldr	r1, [pc, #496]	; (8002564 <HAL_ADC_Init+0x27c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800237e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002386:	4619      	mov	r1, r3
 8002388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80023a2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80023ca:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80023cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ce:	4313      	orrs	r3, r2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d007      	beq.n	80023ea <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80023e2:	4313      	orrs	r3, r2
 80023e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e6:	4313      	orrs	r3, r2
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d04f      	beq.n	8002498 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	4313      	orrs	r3, r2
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800240a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6912      	ldr	r2, [r2, #16]
 8002410:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002414:	d003      	beq.n	800241e <HAL_ADC_Init+0x136>
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6912      	ldr	r2, [r2, #16]
 800241a:	2a01      	cmp	r2, #1
 800241c:	d102      	bne.n	8002424 <HAL_ADC_Init+0x13c>
 800241e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002422:	e000      	b.n	8002426 <HAL_ADC_Init+0x13e>
 8002424:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002426:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	4313      	orrs	r3, r2
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d125      	bne.n	8002484 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d114      	bne.n	800246c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	3b01      	subs	r3, #1
 8002448:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800244c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	617a      	str	r2, [r7, #20]
  return result;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	4093      	lsls	r3, r2
 8002460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002466:	4313      	orrs	r3, r2
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
 800246a:	e00b      	b.n	8002484 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_ADC_Init+0x280>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002494:	430b      	orrs	r3, r1
 8002496:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_ADC_Init+0x284>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b4:	d003      	beq.n	80024be <HAL_ADC_Init+0x1d6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d119      	bne.n	80024f2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80024d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	60fa      	str	r2, [r7, #12]
  return result;
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	fab2 f282 	clz	r2, r2
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	fa03 f202 	lsl.w	r2, r3, r2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
 80024f0:	e007      	b.n	8002502 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_ADC_Init+0x288>)
 800250a:	4013      	ands	r3, r2
 800250c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250e:	429a      	cmp	r2, r3
 8002510:	d10b      	bne.n	800252a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f023 0303 	bic.w	r3, r3, #3
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	64da      	str	r2, [r3, #76]	; 0x4c
 8002528:	e014      	b.n	8002554 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	f023 0312 	bic.w	r3, r3, #18
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800254c:	e002      	b.n	8002554 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002558:	4618      	mov	r0, r3
 800255a:	3738      	adds	r7, #56	; 0x38
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	40012700 	.word	0x40012700
 8002568:	fcfc16ff 	.word	0xfcfc16ff
 800256c:	c0fff18d 	.word	0xc0fff18d
 8002570:	bf80fffe 	.word	0xbf80fffe

08002574 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x20>
 8002590:	2302      	movs	r3, #2
 8002592:	e134      	b.n	80027fe <HAL_ADC_ConfigChannel+0x28a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d81c      	bhi.n	80025de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b05      	subs	r3, #5
 80025b6:	221f      	movs	r2, #31
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b05      	subs	r3, #5
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
 80025dc:	e07e      	b.n	80026dc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d81c      	bhi.n	8002620 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b23      	subs	r3, #35	; 0x23
 80025f8:	221f      	movs	r2, #31
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	4019      	ands	r1, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b23      	subs	r3, #35	; 0x23
 8002612:	fa00 f203 	lsl.w	r2, r0, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c
 800261e:	e05d      	b.n	80026dc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b12      	cmp	r3, #18
 8002626:	d81c      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b41      	subs	r3, #65	; 0x41
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	4019      	ands	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b41      	subs	r3, #65	; 0x41
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
 8002660:	e03c      	b.n	80026dc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b18      	cmp	r3, #24
 8002668:	d81c      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b5f      	subs	r3, #95	; 0x5f
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	4019      	ands	r1, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b5f      	subs	r3, #95	; 0x5f
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	e01b      	b.n	80026dc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b7d      	subs	r3, #125	; 0x7d
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b7d      	subs	r3, #125	; 0x7d
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d81a      	bhi.n	800271a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6959      	ldr	r1, [r3, #20]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	4019      	ands	r1, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6898      	ldr	r0, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	e042      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b13      	cmp	r3, #19
 8002720:	d81c      	bhi.n	800275c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6919      	ldr	r1, [r3, #16]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	2207      	movs	r2, #7
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	4019      	ands	r1, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6898      	ldr	r0, [r3, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	3b1e      	subs	r3, #30
 800274e:	fa00 f203 	lsl.w	r2, r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	e021      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b1a      	cmp	r3, #26
 8002762:	d81c      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b3c      	subs	r3, #60	; 0x3c
 8002776:	2207      	movs	r2, #7
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	3b3c      	subs	r3, #60	; 0x3c
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	e000      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800279e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d003      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ac:	2b11      	cmp	r3, #17
 80027ae:	d121      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_ADC_ConfigChannel+0x294>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11b      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_ADC_ConfigChannel+0x294>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_ConfigChannel+0x294>)
 80027c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d111      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_ADC_ConfigChannel+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_ADC_ConfigChannel+0x29c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9a      	lsrs	r2, r3, #18
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80027e6:	e002      	b.n	80027ee <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	40012700 	.word	0x40012700
 800280c:	20000000 	.word	0x20000000
 8002810:	431bde83 	.word	0x431bde83

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4906      	ldr	r1, [pc, #24]	; (80028ac <__NVIC_EnableIRQ+0x34>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff4f 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff64 	bl	800285c <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ffb2 	bl	8002904 <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff81 	bl	80028b0 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff57 	bl	8002878 <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d005      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e029      	b.n	8002a4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 020e 	bic.w	r2, r2, #14
 8002a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 021c 	and.w	r2, r3, #28
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
    }
  }
  return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6a:	e154      	b.n	8002d16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8146 	beq.w	8002d10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d005      	beq.n	8002a9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d130      	bne.n	8002afe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0201 	and.w	r2, r3, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d017      	beq.n	8002b3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d123      	bne.n	8002b8e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	6939      	ldr	r1, [r7, #16]
 8002b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80a0 	beq.w	8002d10 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002be8:	4a53      	ldr	r2, [pc, #332]	; (8002d38 <HAL_GPIO_Init+0x2e4>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d019      	beq.n	8002c48 <HAL_GPIO_Init+0x1f4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_GPIO_Init+0x1f0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00d      	beq.n	8002c40 <HAL_GPIO_Init+0x1ec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2f4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <HAL_GPIO_Init+0x1e8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_GPIO_Init+0x2f8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_GPIO_Init+0x1e4>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e008      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c38:	2305      	movs	r3, #5
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e004      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	4093      	lsls	r3, r2
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c5a:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_GPIO_Init+0x2e4>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f aea3 	bne.w	8002a6c <HAL_GPIO_Init+0x18>
  }
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43d9      	mvns	r1, r3
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	400b      	ands	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e12b      	b.n	8003022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff f840 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f002 fa50 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a81      	ldr	r2, [pc, #516]	; (800302c <HAL_I2C_Init+0x274>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d807      	bhi.n	8002e3c <HAL_I2C_Init+0x84>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a80      	ldr	r2, [pc, #512]	; (8003030 <HAL_I2C_Init+0x278>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e006      	b.n	8002e4a <HAL_I2C_Init+0x92>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a7d      	ldr	r2, [pc, #500]	; (8003034 <HAL_I2C_Init+0x27c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0e7      	b.n	8003022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a78      	ldr	r2, [pc, #480]	; (8003038 <HAL_I2C_Init+0x280>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	; (800302c <HAL_I2C_Init+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d802      	bhi.n	8002e8c <HAL_I2C_Init+0xd4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e009      	b.n	8002ea0 <HAL_I2C_Init+0xe8>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a69      	ldr	r2, [pc, #420]	; (800303c <HAL_I2C_Init+0x284>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	495c      	ldr	r1, [pc, #368]	; (800302c <HAL_I2C_Init+0x274>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d819      	bhi.n	8002ef4 <HAL_I2C_Init+0x13c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e59      	subs	r1, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_I2C_Init+0x138>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e59      	subs	r1, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	e051      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	e04f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_I2C_Init+0x168>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_I2C_Init+0x18e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x196>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_I2C_Init+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e58      	subs	r0, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6809      	ldr	r1, [r1, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6911      	ldr	r1, [r2, #16]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	000186a0 	.word	0x000186a0
 8003030:	001e847f 	.word	0x001e847f
 8003034:	003d08ff 	.word	0x003d08ff
 8003038:	431bde83 	.word	0x431bde83
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b08b      	sub	sp, #44	; 0x2c
 8003044:	af06      	add	r7, sp, #24
 8003046:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0d0      	b.n	80031f4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f009 fb60 	bl	800c72c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fe37 	bl	8005cec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e04c      	b.n	800311e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3301      	adds	r3, #1
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	b298      	uxth	r0, r3
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	3336      	adds	r3, #54	; 0x36
 80030c2:	4602      	mov	r2, r0
 80030c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3303      	adds	r3, #3
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3338      	adds	r3, #56	; 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	333c      	adds	r3, #60	; 0x3c
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3340      	adds	r3, #64	; 0x40
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	3301      	adds	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d3ad      	bcc.n	8003084 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e044      	b.n	80031b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	3301      	adds	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d3b5      	bcc.n	800312e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	687e      	ldr	r6, [r7, #4]
 80031ca:	466d      	mov	r5, sp
 80031cc:	f106 0410 	add.w	r4, r6, #16
 80031d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	1d33      	adds	r3, r6, #4
 80031da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	f002 fd9f 	bl	8005d20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_Start+0x16>
 800320e:	2302      	movs	r3, #2
 8003210:	e016      	b.n	8003240 <HAL_PCD_Start+0x44>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f002 fd4e 	bl	8005cc0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003224:	2101      	movs	r1, #1
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f009 fa62 	bl	800c6f0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fef2 	bl	800801a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f004 feea 	bl	800802e <USB_ReadInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003264:	d102      	bne.n	800326c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 faf5 	bl	8003856 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 fedc 	bl	800802e <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d112      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	b292      	uxth	r2, r2
 8003296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f009 fac1 	bl	800c822 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032a0:	2100      	movs	r1, #0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8c7 	bl	8003436 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f004 febe 	bl	800802e <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d10b      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d0:	b292      	uxth	r2, r2
 80032d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fea7 	bl	800802e <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d10b      	bne.n	8003304 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 fe90 	bl	800802e <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d126      	bne.n	8003368 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0204 	bic.w	r2, r2, #4
 800332c:	b292      	uxth	r2, r2
 800332e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0208 	bic.w	r2, r2, #8
 8003344:	b292      	uxth	r2, r2
 8003346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f009 faa2 	bl	800c894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	b292      	uxth	r2, r2
 8003364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 fe5e 	bl	800802e <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	d126      	bne.n	80033cc <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0208 	orr.w	r2, r2, #8
 8003390:	b292      	uxth	r2, r2
 8003392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a8:	b292      	uxth	r2, r2
 80033aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0204 	orr.w	r2, r2, #4
 80033c0:	b292      	uxth	r2, r2
 80033c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f009 fa4a 	bl	800c860 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fe2c 	bl	800802e <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d10e      	bne.n	8003400 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033f4:	b292      	uxth	r2, r2
 80033f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f009 fa03 	bl	800c806 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fe12 	bl	800802e <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003414:	d10b      	bne.n	800342e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_PCD_SetAddress+0x1a>
 800344c:	2302      	movs	r3, #2
 800344e:	e013      	b.n	8003478 <HAL_PCD_SetAddress+0x42>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f004 fdc3 	bl	8007ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	70fb      	strb	r3, [r7, #3]
 8003492:	460b      	mov	r3, r1
 8003494:	803b      	strh	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da0e      	bge.n	80034c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00e      	b.n	80034e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 0207 	and.w	r2, r3, #7
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034ee:	883a      	ldrh	r2, [r7, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	78ba      	ldrb	r2, [r7, #2]
 80034f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800350c:	78bb      	ldrb	r3, [r7, #2]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d102      	bne.n	8003518 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_PCD_EP_Open+0xa6>
 8003522:	2302      	movs	r3, #2
 8003524:	e00e      	b.n	8003544 <HAL_PCD_EP_Open+0xc4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fc13 	bl	8005d60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003542:	7afb      	ldrb	r3, [r7, #11]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355c:	2b00      	cmp	r3, #0
 800355e:	da0e      	bge.n	800357e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	705a      	strb	r2, [r3, #1]
 800357c:	e00e      	b.n	800359c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 0207 	and.w	r2, r3, #7
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Close+0x6a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_Close+0x88>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 ff35 	bl	8006434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 0207 	and.w	r2, r3, #7
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	b2da      	uxtb	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	4618      	mov	r0, r3
 800363a:	f003 f8e7 	bl	800680c <USB_EPStartXfer>
 800363e:	e005      	b.n	800364c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 f8e0 	bl	800680c <USB_EPStartXfer>
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 0207 	and.w	r2, r3, #7
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003678:	681b      	ldr	r3, [r3, #0]
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	460b      	mov	r3, r1
 8003692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2201      	movs	r2, #1
 80036ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 f88d 	bl	800680c <USB_EPStartXfer>
 80036f2:	e005      	b.n	8003700 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 f886 	bl	800680c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 0207 	and.w	r2, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d901      	bls.n	8003728 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e03e      	b.n	80037a6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372c:	2b00      	cmp	r3, #0
 800372e:	da0e      	bge.n	800374e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	705a      	strb	r2, [r3, #1]
 800374c:	e00c      	b.n	8003768 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_PCD_EP_SetStall+0x7e>
 8003784:	2302      	movs	r3, #2
 8003786:	e00e      	b.n	80037a6 <HAL_PCD_EP_SetStall+0x9c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fb2f 	bl	8007dfa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d901      	bls.n	80037cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e040      	b.n	800384e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0e      	bge.n	80037f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
 80037f0:	e00e      	b.n	8003810 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0207 	and.w	r2, r3, #7
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_ClrStall+0x82>
 800382c:	2302      	movs	r3, #2
 800382e:	e00e      	b.n	800384e <HAL_PCD_EP_ClrStall+0xa0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f004 fb2b 	bl	8007e9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08e      	sub	sp, #56	; 0x38
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800385e:	e2ec      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003868:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800386a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003876:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8161 	bne.w	8003b42 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003880:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d152      	bne.n	8003930 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	81fb      	strh	r3, [r7, #14]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3328      	adds	r3, #40	; 0x28
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	3302      	adds	r3, #2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	441a      	add	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038ee:	2100      	movs	r1, #0
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f008 ff6e 	bl	800c7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 829b 	beq.w	8003e3a <PCD_EP_ISR_Handler+0x5e4>
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 8296 	bne.w	8003e3a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800391a:	b2da      	uxtb	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	b292      	uxth	r2, r2
 8003922:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800392e:	e284      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003940:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003946:	2b00      	cmp	r3, #0
 8003948:	d034      	beq.n	80039b4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	3306      	adds	r3, #6
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003988:	b29b      	uxth	r3, r3
 800398a:	f004 fba4 	bl	80080d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	f640 738f 	movw	r3, #3983	; 0xf8f
 800399a:	4013      	ands	r3, r2
 800399c:	823b      	strh	r3, [r7, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	8a3a      	ldrh	r2, [r7, #16]
 80039a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039a8:	b292      	uxth	r2, r2
 80039aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f008 fee3 	bl	800c778 <HAL_PCD_SetupStageCallback>
 80039b2:	e242      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f280 823e 	bge.w	8003e3a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039ca:	4013      	ands	r3, r2
 80039cc:	83bb      	strh	r3, [r7, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	8bba      	ldrh	r2, [r7, #28]
 80039d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039d8:	b292      	uxth	r2, r2
 80039da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	3306      	adds	r3, #6
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <PCD_EP_ISR_Handler+0x1ee>
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d015      	beq.n	8003a44 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	6959      	ldr	r1, [r3, #20]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f004 fb54 	bl	80080d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	441a      	add	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f008 feac 	bl	800c79c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 81f2 	bne.w	8003e3a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d112      	bne.n	8003aa4 <PCD_EP_ISR_Handler+0x24e>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	e02f      	b.n	8003b04 <PCD_EP_ISR_Handler+0x2ae>
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8003aaa:	d813      	bhi.n	8003ad4 <PCD_EP_ISR_Handler+0x27e>
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <PCD_EP_ISR_Handler+0x270>
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	e017      	b.n	8003b04 <PCD_EP_ISR_Handler+0x2ae>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <PCD_EP_ISR_Handler+0x298>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	3b01      	subs	r3, #1
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	827b      	strh	r3, [r7, #18]
 8003b16:	8a7b      	ldrh	r3, [r7, #18]
 8003b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b1c:	827b      	strh	r3, [r7, #18]
 8003b1e:	8a7b      	ldrh	r3, [r7, #18]
 8003b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b24:	827b      	strh	r3, [r7, #18]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	8a7b      	ldrh	r3, [r7, #18]
 8003b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]
 8003b40:	e17b      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f280 80ea 	bge.w	8003d32 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b74:	4013      	ands	r3, r2
 8003b76:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	7b1b      	ldrb	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d122      	bne.n	8003bf4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3306      	adds	r3, #6
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003bd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8087 	beq.w	8003cee <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	6959      	ldr	r1, [r3, #20]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	88da      	ldrh	r2, [r3, #6]
 8003bec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bee:	f004 fa72 	bl	80080d6 <USB_ReadPMA>
 8003bf2:	e07c      	b.n	8003cee <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	78db      	ldrb	r3, [r3, #3]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d108      	bne.n	8003c0e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f927 	bl	8003e56 <HAL_PCD_EP_DB_Receive>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c0c:	e06f      	b.n	8003cee <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d021      	beq.n	8003cac <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c90:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02a      	beq.n	8003cee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	6959      	ldr	r1, [r3, #20]
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	891a      	ldrh	r2, [r3, #8]
 8003ca4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ca6:	f004 fa16 	bl	80080d6 <USB_ReadPMA>
 8003caa:	e020      	b.n	8003cee <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3306      	adds	r3, #6
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	6959      	ldr	r1, [r3, #20]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	895a      	ldrh	r2, [r3, #10]
 8003ce8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cea:	f004 f9f4 	bl	80080d6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf4:	441a      	add	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d00:	441a      	add	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <PCD_EP_ISR_Handler+0x4c2>
 8003d0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d206      	bcs.n	8003d26 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f008 fd3c 	bl	800c79c <HAL_PCD_DataOutStageCallback>
 8003d24:	e005      	b.n	8003d32 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fd6d 	bl	800680c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d07e      	beq.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	843b      	strh	r3, [r7, #32]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	8c3b      	ldrh	r3, [r7, #32]
 8003d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	78db      	ldrb	r3, [r3, #3]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d00c      	beq.n	8003daa <PCD_EP_ISR_Handler+0x554>
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	78db      	ldrb	r3, [r3, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d146      	bne.n	8003e2e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003da0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d141      	bne.n	8003e2e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d906      	bls.n	8003dec <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	8bfb      	ldrh	r3, [r7, #30]
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	619a      	str	r2, [r3, #24]
 8003dea:	e002      	b.n	8003df2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	2200      	movs	r2, #0
 8003df0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f008 fce6 	bl	800c7d2 <HAL_PCD_DataInStageCallback>
 8003e06:	e018      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	8bfb      	ldrh	r3, [r7, #30]
 8003e0e:	441a      	add	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	441a      	add	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fcf0 	bl	800680c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e2c:	e005      	b.n	8003e3a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e30:	461a      	mov	r2, r3
 8003e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f91b 	bl	8004070 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f6ff ad0a 	blt.w	8003860 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3738      	adds	r7, #56	; 0x38
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d07e      	beq.n	8003f6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	3302      	adds	r3, #2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	8b7b      	ldrh	r3, [r7, #26]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d306      	bcc.n	8003eb0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	8b7b      	ldrh	r3, [r7, #26]
 8003ea8:	1ad2      	subs	r2, r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	619a      	str	r2, [r3, #24]
 8003eae:	e002      	b.n	8003eb6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d123      	bne.n	8003f06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	833b      	strh	r3, [r7, #24]
 8003eda:	8b3b      	ldrh	r3, [r7, #24]
 8003edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ee0:	833b      	strh	r3, [r7, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	8b3b      	ldrh	r3, [r7, #24]
 8003ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01f      	beq.n	8003f50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	82fb      	strh	r3, [r7, #22]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f50:	8b7b      	ldrh	r3, [r7, #26]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8087 	beq.w	8004066 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6959      	ldr	r1, [r3, #20]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	891a      	ldrh	r2, [r3, #8]
 8003f64:	8b7b      	ldrh	r3, [r7, #26]
 8003f66:	f004 f8b6 	bl	80080d6 <USB_ReadPMA>
 8003f6a:	e07c      	b.n	8004066 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3306      	adds	r3, #6
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	8b7b      	ldrh	r3, [r7, #26]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d306      	bcc.n	8003fae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	8b7b      	ldrh	r3, [r7, #26]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	e002      	b.n	8003fb4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d123      	bne.n	8004004 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	83fb      	strh	r3, [r7, #30]
 8003fd8:	8bfb      	ldrh	r3, [r7, #30]
 8003fda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fde:	83fb      	strh	r3, [r7, #30]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	8bfb      	ldrh	r3, [r7, #30]
 8003ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004000:	b29b      	uxth	r3, r3
 8004002:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11f      	bne.n	800404e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	83bb      	strh	r3, [r7, #28]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	8bbb      	ldrh	r3, [r7, #28]
 800403a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800404a:	b29b      	uxth	r3, r3
 800404c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800404e:	8b7b      	ldrh	r3, [r7, #26]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6959      	ldr	r1, [r3, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	895a      	ldrh	r2, [r3, #10]
 8004060:	8b7b      	ldrh	r3, [r7, #26]
 8004062:	f004 f838 	bl	80080d6 <USB_ReadPMA>
    }
  }

  return count;
 8004066:	8b7b      	ldrh	r3, [r7, #26]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b0a2      	sub	sp, #136	; 0x88
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 81c7 	beq.w	8004418 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	3302      	adds	r3, #2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040be:	429a      	cmp	r2, r3
 80040c0:	d907      	bls.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ca:	1ad2      	subs	r2, r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	619a      	str	r2, [r3, #24]
 80040d0:	e002      	b.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 80b9 	bne.w	8004254 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	785b      	ldrb	r3, [r3, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d126      	bne.n	8004138 <HAL_PCD_EP_DB_Transmit+0xc8>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	4413      	add	r3, r2
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	011a      	lsls	r2, r3, #4
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	4413      	add	r3, r2
 800410c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800411c:	b29a      	uxth	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e01a      	b.n	800416e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d116      	bne.n	800416e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	4413      	add	r3, r2
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	4413      	add	r3, r2
 8004162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	2200      	movs	r2, #0
 800416c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d126      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0x15a>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	011a      	lsls	r2, r3, #4
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e017      	b.n	80041fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d113      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	4413      	add	r3, r2
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	011a      	lsls	r2, r3, #4
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	4413      	add	r3, r2
 80041ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2200      	movs	r2, #0
 80041f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f008 fae6 	bl	800c7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 82d4 	beq.w	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	827b      	strh	r3, [r7, #18]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8a7b      	ldrh	r3, [r7, #18]
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
 8004252:	e2b2      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d021      	beq.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f040 8286 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042b6:	441a      	add	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042c4:	441a      	add	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d309      	bcc.n	80042ea <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e2:	1ad2      	subs	r2, r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	621a      	str	r2, [r3, #32]
 80042e8:	e015      	b.n	8004316 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80042f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004300:	e009      	b.n	8004316 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d155      	bne.n	80043ca <HAL_PCD_EP_DB_Transmit+0x35a>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	4413      	add	r3, r2
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	4413      	add	r3, r2
 8004340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	2b00      	cmp	r3, #0
 800434a:	d112      	bne.n	8004372 <HAL_PCD_EP_DB_Transmit+0x302>
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004356:	b29a      	uxth	r2, r3
 8004358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436a:	b29a      	uxth	r2, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	e047      	b.n	8004402 <HAL_PCD_EP_DB_Transmit+0x392>
 8004372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004374:	2b3e      	cmp	r3, #62	; 0x3e
 8004376:	d811      	bhi.n	800439c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	64bb      	str	r3, [r7, #72]	; 0x48
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	3301      	adds	r3, #1
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	b29b      	uxth	r3, r3
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	b29a      	uxth	r2, r3
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e032      	b.n	8004402 <HAL_PCD_EP_DB_Transmit+0x392>
 800439c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x342>
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	3b01      	subs	r3, #1
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e01b      	b.n	8004402 <HAL_PCD_EP_DB_Transmit+0x392>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d117      	bne.n	8004402 <HAL_PCD_EP_DB_Transmit+0x392>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e6:	4413      	add	r3, r2
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	011a      	lsls	r2, r3, #4
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	4413      	add	r3, r2
 80043f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	891a      	ldrh	r2, [r3, #8]
 800440e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 fe1b 	bl	800804c <USB_WritePMA>
 8004416:	e1d0      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	3306      	adds	r3, #6
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004440:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800444c:	429a      	cmp	r2, r3
 800444e:	d307      	bcc.n	8004460 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	e002      	b.n	8004466 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 80c4 	bne.w	80045f8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d126      	bne.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448c:	4413      	add	r3, r2
 800448e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	011a      	lsls	r2, r3, #4
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	4413      	add	r3, r2
 800449a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800449e:	66bb      	str	r3, [r7, #104]	; 0x68
 80044a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e01a      	b.n	80044fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d116      	bne.n	80044fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	677b      	str	r3, [r7, #116]	; 0x74
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e2:	4413      	add	r3, r2
 80044e4:	677b      	str	r3, [r7, #116]	; 0x74
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	011a      	lsls	r2, r3, #4
 80044ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ee:	4413      	add	r3, r2
 80044f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044f4:	673b      	str	r3, [r7, #112]	; 0x70
 80044f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f8:	2200      	movs	r2, #0
 80044fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	67bb      	str	r3, [r7, #120]	; 0x78
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d12f      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004522:	4413      	add	r3, r2
 8004524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004532:	4413      	add	r3, r2
 8004534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800453c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004548:	b29a      	uxth	r2, r3
 800454a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004560:	b29a      	uxth	r2, r3
 8004562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e017      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x52a>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d113      	bne.n	800459a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004580:	4413      	add	r3, r2
 8004582:	67bb      	str	r3, [r7, #120]	; 0x78
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458c:	4413      	add	r3, r2
 800458e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004592:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004596:	2200      	movs	r2, #0
 8004598:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f008 f916 	bl	800c7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8104 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]
 80045f6:	e0e0      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 80b4 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800465a:	441a      	add	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004668:	441a      	add	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d309      	bcc.n	800468e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	621a      	str	r2, [r3, #32]
 800468c:	e015      	b.n	80046ba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800469a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046a4:	e009      	b.n	80046ba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	667b      	str	r3, [r7, #100]	; 0x64
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d155      	bne.n	8004774 <HAL_PCD_EP_DB_Transmit+0x704>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	4413      	add	r3, r2
 80046de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e8:	4413      	add	r3, r2
 80046ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80046f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d112      	bne.n	800471c <HAL_PCD_EP_DB_Transmit+0x6ac>
 80046f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004700:	b29a      	uxth	r2, r3
 8004702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004714:	b29a      	uxth	r2, r3
 8004716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e044      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x736>
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	2b3e      	cmp	r3, #62	; 0x3e
 8004720:	d811      	bhi.n	8004746 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	657b      	str	r3, [r7, #84]	; 0x54
 8004728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004734:	3301      	adds	r3, #1
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
 8004738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473a:	b29b      	uxth	r3, r3
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	b29a      	uxth	r2, r3
 8004740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	e02f      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	657b      	str	r3, [r7, #84]	; 0x54
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004758:	3b01      	subs	r3, #1
 800475a:	657b      	str	r3, [r7, #84]	; 0x54
 800475c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475e:	b29b      	uxth	r3, r3
 8004760:	029b      	lsls	r3, r3, #10
 8004762:	b29b      	uxth	r3, r3
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29a      	uxth	r2, r3
 800476e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e018      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d114      	bne.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x736>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800478a:	4413      	add	r3, r2
 800478c:	667b      	str	r3, [r7, #100]	; 0x64
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	011a      	lsls	r2, r3, #4
 8004794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004796:	4413      	add	r3, r2
 8004798:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479c:	663b      	str	r3, [r7, #96]	; 0x60
 800479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6959      	ldr	r1, [r3, #20]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	895a      	ldrh	r2, [r3, #10]
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f003 fc49 	bl	800804c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d4:	823b      	strh	r3, [r7, #16]
 80047d6:	8a3b      	ldrh	r3, [r7, #16]
 80047d8:	f083 0310 	eor.w	r3, r3, #16
 80047dc:	823b      	strh	r3, [r7, #16]
 80047de:	8a3b      	ldrh	r3, [r7, #16]
 80047e0:	f083 0320 	eor.w	r3, r3, #32
 80047e4:	823b      	strh	r3, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	8a3b      	ldrh	r3, [r7, #16]
 80047f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3788      	adds	r7, #136	; 0x88
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	4613      	mov	r3, r2
 8004824:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e009      	b.n	800485e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800484a:	897a      	ldrh	r2, [r7, #10]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	80da      	strh	r2, [r3, #6]
 8004872:	e00b      	b.n	800488c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2201      	movs	r2, #1
 8004878:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b29a      	uxth	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b29a      	uxth	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e31d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048aa:	4b94      	ldr	r3, [pc, #592]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b4:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d07b      	beq.n	80049c2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d006      	beq.n	80048de <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d10f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b87      	ldr	r3, [pc, #540]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06a      	beq.n	80049c0 <HAL_RCC_OscConfig+0x128>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d166      	bne.n	80049c0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e2f7      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b7f      	ldr	r3, [pc, #508]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7e      	ldr	r2, [pc, #504]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e02d      	b.n	8004968 <HAL_RCC_OscConfig+0xd0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x96>
 8004914:	4b79      	ldr	r3, [pc, #484]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a78      	ldr	r2, [pc, #480]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a75      	ldr	r2, [pc, #468]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e01c      	b.n	8004968 <HAL_RCC_OscConfig+0xd0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0xb8>
 8004936:	4b71      	ldr	r3, [pc, #452]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a70      	ldr	r2, [pc, #448]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 800493c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6d      	ldr	r2, [pc, #436]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0xd0>
 8004950:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a69      	ldr	r2, [pc, #420]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	4b67      	ldr	r3, [pc, #412]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a66      	ldr	r2, [pc, #408]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d013      	beq.n	8004998 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fd fcb0 	bl	80022d4 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004978:	f7fd fcac 	bl	80022d4 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e2ad      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800498a:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fd fc9c 	bl	80022d4 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fd fc98 	bl	80022d4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e299      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049b2:	4b52      	ldr	r3, [pc, #328]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d05a      	beq.n	8004a84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d119      	bne.n	8004a0e <HAL_RCC_OscConfig+0x176>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_OscConfig+0x160>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e276      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b40      	ldr	r3, [pc, #256]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	493d      	ldr	r1, [pc, #244]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0c:	e03a      	b.n	8004a84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a16:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_RCC_OscConfig+0x268>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fc5a 	bl	80022d4 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fd fc56 	bl	80022d4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e257      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a42:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	492a      	ldr	r1, [pc, #168]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
 8004a56:	e015      	b.n	8004a84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a58:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_RCC_OscConfig+0x268>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7fd fc39 	bl	80022d4 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fd fc35 	bl	80022d4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e236      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80b8 	beq.w	8004c02 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d170      	bne.n	8004b7a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x218>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e21a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d921      	bls.n	8004b04 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fc53 	bl	8005370 <RCC_SetFlashLatencyFromMSIRange>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e208      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	4906      	ldr	r1, [pc, #24]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	4901      	ldr	r1, [pc, #4]	; (8004afc <HAL_RCC_OscConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
 8004afa:	e020      	b.n	8004b3e <HAL_RCC_OscConfig+0x2a6>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b04:	4ba4      	ldr	r3, [pc, #656]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	49a1      	ldr	r1, [pc, #644]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b16:	4ba0      	ldr	r3, [pc, #640]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	499c      	ldr	r1, [pc, #624]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fc1e 	bl	8005370 <RCC_SetFlashLatencyFromMSIRange>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1d3      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	0b5b      	lsrs	r3, r3, #13
 8004b44:	3301      	adds	r3, #1
 8004b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b4e:	4a92      	ldr	r2, [pc, #584]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	0912      	lsrs	r2, r2, #4
 8004b54:	f002 020f 	and.w	r2, r2, #15
 8004b58:	4990      	ldr	r1, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x504>)
 8004b5a:	5c8a      	ldrb	r2, [r1, r2]
 8004b5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b5e:	4a90      	ldr	r2, [pc, #576]	; (8004da0 <HAL_RCC_OscConfig+0x508>)
 8004b60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b62:	4b90      	ldr	r3, [pc, #576]	; (8004da4 <HAL_RCC_OscConfig+0x50c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fa04 	bl	8001f74 <HAL_InitTick>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d045      	beq.n	8004c02 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	e1b5      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d029      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCC_OscConfig+0x510>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fd fba4 	bl	80022d4 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b90:	f7fd fba0 	bl	80022d4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e1a1      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ba2:	4b7d      	ldr	r3, [pc, #500]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bae:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4977      	ldr	r1, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc0:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	4972      	ldr	r1, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	e015      	b.n	8004c02 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <HAL_RCC_OscConfig+0x510>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fb7a 	bl	80022d4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004be4:	f7fd fb76 	bl	80022d4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e177      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bf6:	4b68      	ldr	r3, [pc, #416]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d030      	beq.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_RCC_OscConfig+0x514>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1c:	f7fd fb5a 	bl	80022d4 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fd fb56 	bl	80022d4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e157      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c36:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x38c>
 8004c42:	e015      	b.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c44:	4b59      	ldr	r3, [pc, #356]	; (8004dac <HAL_RCC_OscConfig+0x514>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fb43 	bl	80022d4 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c52:	f7fd fb3f 	bl	80022d4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e140      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c64:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80b5 	beq.w	8004de8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c82:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	4a41      	ldr	r2, [pc, #260]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6253      	str	r3, [r2, #36]	; 0x24
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <HAL_RCC_OscConfig+0x518>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCC_OscConfig+0x518>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x518>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fb07 	bl	80022d4 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd fb03 	bl	80022d4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e104      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCC_OscConfig+0x518>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x466>
 8004cf0:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8004cfc:	e02d      	b.n	8004d5a <HAL_RCC_OscConfig+0x4c2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x488>
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	4a23      	ldr	r2, [pc, #140]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	6353      	str	r3, [r2, #52]	; 0x34
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1c:	6353      	str	r3, [r2, #52]	; 0x34
 8004d1e:	e01c      	b.n	8004d5a <HAL_RCC_OscConfig+0x4c2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d10c      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4aa>
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d32:	6353      	str	r3, [r2, #52]	; 0x34
 8004d34:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8004d40:	e00b      	b.n	8004d5a <HAL_RCC_OscConfig+0x4c2>
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d4c:	6353      	str	r3, [r2, #52]	; 0x34
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d58:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fd fab7 	bl	80022d4 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fd fab3 	bl	80022d4 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0b2      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ee      	beq.n	8004d6a <HAL_RCC_OscConfig+0x4d2>
 8004d8c:	e023      	b.n	8004dd6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd faa1 	bl	80022d4 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d94:	e019      	b.n	8004dca <HAL_RCC_OscConfig+0x532>
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	0800d3c4 	.word	0x0800d3c4
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000004 	.word	0x20000004
 8004da8:	42470020 	.word	0x42470020
 8004dac:	42470680 	.word	0x42470680
 8004db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fd fa8e 	bl	80022d4 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e08d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b44      	ldr	r3, [pc, #272]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	4a43      	ldr	r2, [pc, #268]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d079      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d056      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d13b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <HAL_RCC_OscConfig+0x65c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fd fa66 	bl	80022d4 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fd fa62 	bl	80022d4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e063      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e1e:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4319      	orrs	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	430b      	orrs	r3, r1
 8004e42:	492b      	ldr	r1, [pc, #172]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <HAL_RCC_OscConfig+0x65c>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fa41 	bl	80022d4 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd fa3d 	bl	80022d4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e03e      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x5be>
 8004e74:	e036      	b.n	8004ee4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_RCC_OscConfig+0x65c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fa2a 	bl	80022d4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd fa26 	bl	80022d4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e027      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x5ec>
 8004ea2:	e01f      	b.n	8004ee4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e01a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_RCC_OscConfig+0x658>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	42470060 	.word	0x42470060

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e11a      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b8f      	ldr	r3, [pc, #572]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d919      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x34>
 8004f20:	4b8a      	ldr	r3, [pc, #552]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a89      	ldr	r2, [pc, #548]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b87      	ldr	r3, [pc, #540]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	4985      	ldr	r1, [pc, #532]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3c:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0f9      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	497a      	ldr	r1, [pc, #488]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 808e 	beq.w	8005096 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f82:	4b73      	ldr	r3, [pc, #460]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d121      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0d7      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d115      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0cb      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb2:	4b67      	ldr	r3, [pc, #412]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0bf      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fc2:	4b63      	ldr	r3, [pc, #396]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0b7      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	495c      	ldr	r1, [pc, #368]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fd f976 	bl	80022d4 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d112      	bne.n	8005018 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fd f96e 	bl	80022d4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e09b      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b08      	cmp	r3, #8
 8005014:	d1ee      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xfc>
 8005016:	e03e      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d112      	bne.n	8005046 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005022:	f7fd f957 	bl	80022d4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e084      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d1ee      	bne.n	8005022 <HAL_RCC_ClockConfig+0x12a>
 8005044:	e027      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d11d      	bne.n	800508a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fd f940 	bl	80022d4 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e06d      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005066:	4b3a      	ldr	r3, [pc, #232]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b04      	cmp	r3, #4
 8005070:	d1ee      	bne.n	8005050 <HAL_RCC_ClockConfig+0x158>
 8005072:	e010      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fd f92e 	bl	80022d4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e05b      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800508a:	4b31      	ldr	r3, [pc, #196]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ee      	bne.n	8005074 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d219      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x1be>
 80050aa:	4b28      	ldr	r3, [pc, #160]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	4923      	ldr	r1, [pc, #140]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b21      	ldr	r3, [pc, #132]	; (800514c <HAL_RCC_ClockConfig+0x254>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e034      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4917      	ldr	r1, [pc, #92]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	490f      	ldr	r1, [pc, #60]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005116:	f000 f823 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800511a:	4602      	mov	r2, r0
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCC_ClockConfig+0x258>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	490b      	ldr	r1, [pc, #44]	; (8005154 <HAL_RCC_ClockConfig+0x25c>)
 8005128:	5ccb      	ldrb	r3, [r1, r3]
 800512a:	fa22 f303 	lsr.w	r3, r2, r3
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <HAL_RCC_ClockConfig+0x260>)
 8005130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_ClockConfig+0x264>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc ff1c 	bl	8001f74 <HAL_InitTick>
 800513c:	4603      	mov	r3, r0
 800513e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005140:	7afb      	ldrb	r3, [r7, #11]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023c00 	.word	0x40023c00
 8005150:	40023800 	.word	0x40023800
 8005154:	0800d3c4 	.word	0x0800d3c4
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005166:	4b4d      	ldr	r3, [pc, #308]	; (800529c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d00c      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x30>
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d87c      	bhi.n	8005274 <HAL_RCC_GetSysClockFreq+0x114>
 800517a:	2b04      	cmp	r3, #4
 800517c:	d002      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x24>
 800517e:	2b08      	cmp	r3, #8
 8005180:	d003      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x2a>
 8005182:	e077      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005186:	613b      	str	r3, [r7, #16]
      break;
 8005188:	e082      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800518a:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800518c:	613b      	str	r3, [r7, #16]
      break;
 800518e:	e07f      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	0c9b      	lsrs	r3, r3, #18
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	4a43      	ldr	r2, [pc, #268]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x148>)
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	0d9b      	lsrs	r3, r3, #22
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051aa:	4b3c      	ldr	r3, [pc, #240]	; (800529c <HAL_RCC_GetSysClockFreq+0x13c>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01a      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	4939      	ldr	r1, [pc, #228]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80051c0:	fb01 f003 	mul.w	r0, r1, r3
 80051c4:	2100      	movs	r1, #0
 80051c6:	fb01 f102 	mul.w	r1, r1, r2
 80051ca:	1844      	adds	r4, r0, r1
 80051cc:	4935      	ldr	r1, [pc, #212]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80051ce:	fba2 0101 	umull	r0, r1, r2, r1
 80051d2:	1863      	adds	r3, r4, r1
 80051d4:	4619      	mov	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	461a      	mov	r2, r3
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	f7fa ffcf 	bl	8000180 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4613      	mov	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e040      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	461c      	mov	r4, r3
 80051f0:	f04f 0500 	mov.w	r5, #0
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	014b      	lsls	r3, r1, #5
 8005202:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005206:	0142      	lsls	r2, r0, #5
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	1b00      	subs	r0, r0, r4
 800520e:	eb61 0105 	sbc.w	r1, r1, r5
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	018b      	lsls	r3, r1, #6
 800521c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005220:	0182      	lsls	r2, r0, #6
 8005222:	1a12      	subs	r2, r2, r0
 8005224:	eb63 0301 	sbc.w	r3, r3, r1
 8005228:	f04f 0000 	mov.w	r0, #0
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	00d9      	lsls	r1, r3, #3
 8005232:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005236:	00d0      	lsls	r0, r2, #3
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	1912      	adds	r2, r2, r4
 800523e:	eb45 0303 	adc.w	r3, r5, r3
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	0299      	lsls	r1, r3, #10
 800524c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005250:	0290      	lsls	r0, r2, #10
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	f7fa ff8d 	bl	8000180 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4613      	mov	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	613b      	str	r3, [r7, #16]
      break;
 8005272:	e00d      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0b5b      	lsrs	r3, r3, #13
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	613b      	str	r3, [r7, #16]
      break;
 800528e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005290:	693b      	ldr	r3, [r7, #16]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bdb0      	pop	{r4, r5, r7, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	016e3600 	.word	0x016e3600
 80052a8:	0800d3b8 	.word	0x0800d3b8

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <HAL_RCC_GetHCLKFreq+0x10>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	20000000 	.word	0x20000000

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff2 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	0800d3d4 	.word	0x0800d3d4

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052ec:	f7ff ffde 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0adb      	lsrs	r3, r3, #11
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	; (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	0800d3d4 	.word	0x0800d3d4

08005310 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	220f      	movs	r2, #15
 800531e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <HAL_RCC_GetClockConfig+0x58>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0203 	and.w	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <HAL_RCC_GetClockConfig+0x58>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCC_GetClockConfig+0x58>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_RCC_GetClockConfig+0x58>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetClockConfig+0x5c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0201 	and.w	r2, r3, #1
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	601a      	str	r2, [r3, #0]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	40023800 	.word	0x40023800
 800536c:	40023c00 	.word	0x40023c00

08005370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d12c      	bne.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005388:	4b26      	ldr	r3, [pc, #152]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e016      	b.n	80053ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a0:	4b20      	ldr	r3, [pc, #128]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6253      	str	r3, [r2, #36]	; 0x24
 80053ac:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053b8:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80053c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	4a17      	ldr	r2, [pc, #92]	; (8005424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80053d4:	d105      	bne.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053dc:	d101      	bne.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80053de:	2301      	movs	r3, #1
 80053e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ee:	f043 0304 	orr.w	r3, r3, #4
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 0201 	bic.w	r2, r3, #1
 80053fc:	490b      	ldr	r1, [pc, #44]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d001      	beq.n	8005416 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	40007000 	.word	0x40007000
 800542c:	40023c00 	.word	0x40023c00

08005430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06e      	b.n	8005520 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005452:	d009      	beq.n	8005468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
 800545a:	e005      	b.n	8005468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc fd32 	bl	8001eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	ea42 0103 	orr.w	r1, r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	0c1a      	lsrs	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f002 0204 	and.w	r2, r2, #4
 800550e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e031      	b.n	800559e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f829 	bl	80055a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f000 f978 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e03a      	b.n	8005646 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d00e      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x58>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <HAL_TIM_Base_Start_IT+0x98>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x58>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a14      	ldr	r2, [pc, #80]	; (8005654 <HAL_TIM_Base_Start_IT+0x9c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x58>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a13      	ldr	r2, [pc, #76]	; (8005658 <HAL_TIM_Base_Start_IT+0xa0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d111      	bne.n	8005634 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b06      	cmp	r3, #6
 8005620:	d010      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	e007      	b.n	8005644 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40010800 	.word	0x40010800

0800565c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0202 	mvn.w	r2, #2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8c1 	bl	8005826 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8b4 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8c3 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0204 	mvn.w	r2, #4
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f897 	bl	8005826 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f88a 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f899 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0208 	mvn.w	r2, #8
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2204      	movs	r2, #4
 8005736:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f86d 	bl	8005826 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f860 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f86f 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0210 	mvn.w	r2, #16
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2208      	movs	r2, #8
 800578a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f843 	bl	8005826 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f836 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f845 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fa42 	bl	8001c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d10e      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d107      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f81f 	bl	800584a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x28>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a25      	ldr	r2, [pc, #148]	; (800590c <TIM_Base_SetConfig+0xb0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x28>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a24      	ldr	r2, [pc, #144]	; (8005910 <TIM_Base_SetConfig+0xb4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589c:	d013      	beq.n	80058c6 <TIM_Base_SetConfig+0x6a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1a      	ldr	r2, [pc, #104]	; (800590c <TIM_Base_SetConfig+0xb0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_Base_SetConfig+0x6a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <TIM_Base_SetConfig+0xb4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0x6a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a18      	ldr	r2, [pc, #96]	; (8005914 <TIM_Base_SetConfig+0xb8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0x6a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_Base_SetConfig+0xbc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0x6a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_Base_SetConfig+0xc0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	615a      	str	r2, [r3, #20]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40010800 	.word	0x40010800
 8005918:	40010c00 	.word	0x40010c00
 800591c:	40011000 	.word	0x40011000

08005920 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b20      	cmp	r3, #32
 800593e:	d17c      	bne.n	8005a3a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_UART_Transmit+0x2c>
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e075      	b.n	8005a3c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_UART_Transmit+0x3e>
 800595a:	2302      	movs	r3, #2
 800595c:	e06e      	b.n	8005a3c <HAL_UART_Transmit+0x11c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2221      	movs	r2, #33	; 0x21
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005974:	f7fc fcae 	bl	80022d4 <HAL_GetTick>
 8005978:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598e:	d108      	bne.n	80059a2 <HAL_UART_Transmit+0x82>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e003      	b.n	80059aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059b2:	e02a      	b.n	8005a0a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f8e3 	bl	8005b8a <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e036      	b.n	8005a3c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	3302      	adds	r3, #2
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e007      	b.n	80059fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1cf      	bne.n	80059b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2140      	movs	r1, #64	; 0x40
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f8b3 	bl	8005b8a <UART_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d11d      	bne.n	8005a9a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_Receive_IT+0x26>
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e016      	b.n	8005a9c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Receive_IT+0x38>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e00f      	b.n	8005a9c <HAL_UART_Receive_IT+0x58>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f8c4 	bl	8005c1e <UART_Start_Receive_IT>
 8005a96:	4603      	mov	r3, r0
 8005a98:	e000      	b.n	8005a9c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d107      	bne.n	8005ae4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0210 	bic.w	r2, r2, #16
 8005ae2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d12d      	bne.n	8005b4e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b00:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <HAL_UART_AbortReceive_IT+0xd0>)
 8005b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc ff5b 	bl	80029d2 <HAL_DMA_Abort_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d022      	beq.n	8005b68 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
 8005b30:	e01a      	b.n	8005b68 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f816 	bl	8005b78 <HAL_UART_AbortReceiveCpltCallback>
 8005b4c:	e00c      	b.n	8005b68 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f808 	bl	8005b78 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	08005c91 	.word	0x08005c91

08005b78 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9a:	e02c      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba2:	d028      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0x30>
 8005baa:	f7fc fb93 	bl	80022d4 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d21d      	bcs.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e00f      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d0c3      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0220 	orr.w	r2, r2, #32
 8005c82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ff60 	bl	8005b78 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cd0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005cd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cf4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005cf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d20:	b084      	sub	sp, #16
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	f107 0014 	add.w	r0, r7, #20
 8005d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	b004      	add	sp, #16
 8005d5e:	4770      	bx	lr

08005d60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b09b      	sub	sp, #108	; 0x6c
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d81f      	bhi.n	8005dd2 <USB_ActivateEndpoint+0x72>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <USB_ActivateEndpoint+0x38>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005ddb 	.word	0x08005ddb
 8005da4:	08005db7 	.word	0x08005db7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005da8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005db0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005db4:	e012      	b.n	8005ddc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005db6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005dba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005dbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005dc2:	e00b      	b.n	8005ddc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005dc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dcc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005dd0:	e004      	b.n	8005ddc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005dd8:	e000      	b.n	8005ddc <USB_ActivateEndpoint+0x7c>
      break;
 8005dda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	7b1b      	ldrb	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 8149 	bne.w	80060e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8084 	beq.w	8005f60 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	011a      	lsls	r2, r3, #4
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	88db      	ldrh	r3, [r3, #6]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	81fb      	strh	r3, [r7, #14]
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01b      	beq.n	8005edc <USB_ActivateEndpoint+0x17c>
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	81bb      	strh	r3, [r7, #12]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	89bb      	ldrh	r3, [r7, #12]
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	78db      	ldrb	r3, [r3, #3]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d020      	beq.n	8005f26 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	813b      	strh	r3, [r7, #8]
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	f083 0320 	eor.w	r3, r3, #32
 8005f02:	813b      	strh	r3, [r7, #8]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	893b      	ldrh	r3, [r7, #8]
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
 8005f24:	e27f      	b.n	8006426 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	897b      	ldrh	r3, [r7, #10]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
 8005f5e:	e262      	b.n	8006426 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	4413      	add	r3, r2
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	88db      	ldrh	r3, [r3, #6]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	4413      	add	r3, r2
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d112      	bne.n	8005fe6 <USB_ActivateEndpoint+0x286>
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e02f      	b.n	8006046 <USB_ActivateEndpoint+0x2e6>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b3e      	cmp	r3, #62	; 0x3e
 8005fec:	d813      	bhi.n	8006016 <USB_ActivateEndpoint+0x2b6>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <USB_ActivateEndpoint+0x2a8>
 8006002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006004:	3301      	adds	r3, #1
 8006006:	663b      	str	r3, [r7, #96]	; 0x60
 8006008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29a      	uxth	r2, r3
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e017      	b.n	8006046 <USB_ActivateEndpoint+0x2e6>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	663b      	str	r3, [r7, #96]	; 0x60
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <USB_ActivateEndpoint+0x2d0>
 800602a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602c:	3b01      	subs	r3, #1
 800602e:	663b      	str	r3, [r7, #96]	; 0x60
 8006030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	83fb      	strh	r3, [r7, #30]
 8006054:	8bfb      	ldrh	r3, [r7, #30]
 8006056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01b      	beq.n	8006096 <USB_ActivateEndpoint+0x336>
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	83bb      	strh	r3, [r7, #28]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	8bbb      	ldrh	r3, [r7, #28]
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	837b      	strh	r3, [r7, #26]
 80060ae:	8b7b      	ldrh	r3, [r7, #26]
 80060b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b4:	837b      	strh	r3, [r7, #26]
 80060b6:	8b7b      	ldrh	r3, [r7, #26]
 80060b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060bc:	837b      	strh	r3, [r7, #26]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	8b7b      	ldrh	r3, [r7, #26]
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]
 80060de:	e1a2      	b.n	8006426 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612c:	4413      	add	r3, r2
 800612e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	011a      	lsls	r2, r3, #4
 8006136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006138:	4413      	add	r3, r2
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	653b      	str	r3, [r7, #80]	; 0x50
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006160:	4413      	add	r3, r2
 8006162:	653b      	str	r3, [r7, #80]	; 0x50
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	4413      	add	r3, r2
 800616e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	895b      	ldrh	r3, [r3, #10]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 8091 	bne.w	80062b0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800619c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800619e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <USB_ActivateEndpoint+0x47e>
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80061ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01b      	beq.n	800622e <USB_ActivateEndpoint+0x4ce>
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006246:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006248:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800624c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800624e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006254:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628c:	867b      	strh	r3, [r7, #50]	; 0x32
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800629a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	8013      	strh	r3, [r2, #0]
 80062ae:	e0ba      	b.n	8006426 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80062c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01d      	beq.n	8006308 <USB_ActivateEndpoint+0x5a8>
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01d      	beq.n	8006360 <USB_ActivateEndpoint+0x600>
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d024      	beq.n	80063b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006386:	f083 0320 	eor.w	r3, r3, #32
 800638a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
 80063b0:	e01d      	b.n	80063ee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006404:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800642a:	4618      	mov	r0, r3
 800642c:	376c      	adds	r7, #108	; 0x6c
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b08d      	sub	sp, #52	; 0x34
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	7b1b      	ldrb	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 808e 	bne.w	8006564 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d044      	beq.n	80064da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	81bb      	strh	r3, [r7, #12]
 800645e:	89bb      	ldrh	r3, [r7, #12]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <USB_DeactivateEndpoint+0x6c>
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	817b      	strh	r3, [r7, #10]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	897b      	ldrh	r3, [r7, #10]
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b6:	813b      	strh	r3, [r7, #8]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]
 80064d8:	e192      	b.n	8006800 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	827b      	strh	r3, [r7, #18]
 80064e8:	8a7b      	ldrh	r3, [r7, #18]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01b      	beq.n	800652a <USB_DeactivateEndpoint+0xf6>
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	823b      	strh	r3, [r7, #16]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8a3b      	ldrh	r3, [r7, #16]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	81fb      	strh	r3, [r7, #14]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	89fb      	ldrh	r3, [r7, #14]
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
 8006562:	e14d      	b.n	8006800 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f040 80a5 	bne.w	80066b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	843b      	strh	r3, [r7, #32]
 800657c:	8c3b      	ldrh	r3, [r7, #32]
 800657e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <USB_DeactivateEndpoint+0x18a>
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	83fb      	strh	r3, [r7, #30]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8bfb      	ldrh	r3, [r7, #30]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	83bb      	strh	r3, [r7, #28]
 80065cc:	8bbb      	ldrh	r3, [r7, #28]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01b      	beq.n	800660e <USB_DeactivateEndpoint+0x1da>
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	837b      	strh	r3, [r7, #26]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	8b7b      	ldrh	r3, [r7, #26]
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	833b      	strh	r3, [r7, #24]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	8b3b      	ldrh	r3, [r7, #24]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	82fb      	strh	r3, [r7, #22]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	8afb      	ldrh	r3, [r7, #22]
 800666a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	b29b      	uxth	r3, r3
 800667c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006694:	82bb      	strh	r3, [r7, #20]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8abb      	ldrh	r3, [r7, #20]
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]
 80066b6:	e0a3      	b.n	8006800 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <USB_DeactivateEndpoint+0x2d4>
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <USB_DeactivateEndpoint+0x324>
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	853b      	strh	r3, [r7, #40]	; 0x28
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	847b      	strh	r3, [r7, #34]	; 0x22
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3734      	adds	r7, #52	; 0x34
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b0cc      	sub	sp, #304	; 0x130
 8006810:	af00      	add	r7, sp, #0
 8006812:	1d3b      	adds	r3, r7, #4
 8006814:	6018      	str	r0, [r3, #0]
 8006816:	463b      	mov	r3, r7
 8006818:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	2b01      	cmp	r3, #1
 8006822:	f040 872e 	bne.w	8007682 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d905      	bls.n	8006842 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006840:	e004      	b.n	800684c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006842:	463b      	mov	r3, r7
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	7b1b      	ldrb	r3, [r3, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d134      	bne.n	80068c0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006856:	463b      	mov	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6959      	ldr	r1, [r3, #20]
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	88da      	ldrh	r2, [r3, #6]
 8006862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006866:	b29b      	uxth	r3, r3
 8006868:	1d38      	adds	r0, r7, #4
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	f001 fbee 	bl	800804c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006870:	f107 0310 	add.w	r3, r7, #16
 8006874:	1d3a      	adds	r2, r7, #4
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006882:	b29b      	uxth	r3, r3
 8006884:	4619      	mov	r1, r3
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	f107 0210 	add.w	r2, r7, #16
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	440a      	add	r2, r1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	011a      	lsls	r2, r3, #4
 800689c:	f107 0310 	add.w	r3, r7, #16
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4413      	add	r3, r2
 80068a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	f000 beac 	b.w	8007618 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	f040 838c 	bne.w	8006fe4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068cc:	463b      	mov	r3, r7
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	463b      	mov	r3, r7
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	f240 8330 	bls.w	8006f3e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	463b      	mov	r3, r7
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006916:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800691a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006922:	463b      	mov	r3, r7
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	1ad2      	subs	r2, r2, r3
 800692e:	463b      	mov	r3, r7
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	463b      	mov	r3, r7
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 819e 	beq.w	8006c8c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006954:	1d3a      	adds	r2, r7, #4
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	463b      	mov	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d17a      	bne.n	8006a5a <USB_EPStartXfer+0x24e>
 8006964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006968:	1d3a      	adds	r2, r7, #4
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	1d3b      	adds	r3, r7, #4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	4619      	mov	r1, r3
 800697a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800697e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	440a      	add	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	011a      	lsls	r2, r3, #4
 8006990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4413      	add	r3, r2
 8006998:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800699c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d11a      	bne.n	80069e0 <USB_EPStartXfer+0x1d4>
 80069aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e062      	b.n	8006aa6 <USB_EPStartXfer+0x29a>
 80069e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e4:	2b3e      	cmp	r3, #62	; 0x3e
 80069e6:	d819      	bhi.n	8006a1c <USB_EPStartXfer+0x210>
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <USB_EPStartXfer+0x1fc>
 80069fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a02:	3301      	adds	r3, #1
 8006a04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e044      	b.n	8006aa6 <USB_EPStartXfer+0x29a>
 8006a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d104      	bne.n	8006a3c <USB_EPStartXfer+0x230>
 8006a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e025      	b.n	8006aa6 <USB_EPStartXfer+0x29a>
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d120      	bne.n	8006aa6 <USB_EPStartXfer+0x29a>
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	895b      	ldrh	r3, [r3, #10]
 8006aac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6959      	ldr	r1, [r3, #20]
 8006ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ac0:	1d38      	adds	r0, r7, #4
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	f001 fac2 	bl	800804c <USB_WritePMA>
            ep->xfer_buff += len;
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad2:	441a      	add	r2, r3
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d909      	bls.n	8006afe <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	621a      	str	r2, [r3, #32]
 8006afc:	e008      	b.n	8006b10 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d17a      	bne.n	8006c10 <USB_EPStartXfer+0x404>
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	1d3a      	adds	r2, r7, #4
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f107 0318 	add.w	r3, r7, #24
 8006b34:	f107 0218 	add.w	r2, r7, #24
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	011a      	lsls	r2, r3, #4
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <USB_EPStartXfer+0x38a>
 8006b60:	f107 0314 	add.w	r3, r7, #20
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	e067      	b.n	8006c66 <USB_EPStartXfer+0x45a>
 8006b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b9c:	d819      	bhi.n	8006bd2 <USB_EPStartXfer+0x3c6>
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USB_EPStartXfer+0x3b2>
 8006bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bbe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f107 0314 	add.w	r3, r7, #20
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e049      	b.n	8006c66 <USB_EPStartXfer+0x45a>
 8006bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <USB_EPStartXfer+0x3e6>
 8006be8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bec:	3b01      	subs	r3, #1
 8006bee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bf2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f107 0314 	add.w	r3, r7, #20
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	e02a      	b.n	8006c66 <USB_EPStartXfer+0x45a>
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d125      	bne.n	8006c66 <USB_EPStartXfer+0x45a>
 8006c1a:	f107 0320 	add.w	r3, r7, #32
 8006c1e:	1d3a      	adds	r2, r7, #4
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	1d3b      	adds	r3, r7, #4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f107 0320 	add.w	r3, r7, #32
 8006c34:	f107 0220 	add.w	r2, r7, #32
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	440a      	add	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	463b      	mov	r3, r7
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	011a      	lsls	r2, r3, #4
 8006c46:	f107 0320 	add.w	r3, r7, #32
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	f107 031c 	add.w	r3, r7, #28
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c66:	463b      	mov	r3, r7
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	891b      	ldrh	r3, [r3, #8]
 8006c6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c80:	1d38      	adds	r0, r7, #4
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	f001 f9e2 	bl	800804c <USB_WritePMA>
 8006c88:	f000 bcc6 	b.w	8007618 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d164      	bne.n	8006d60 <USB_EPStartXfer+0x554>
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006caa:	4413      	add	r3, r2
 8006cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	011a      	lsls	r2, r3, #4
 8006cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb8:	4413      	add	r3, r2
 8006cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d112      	bne.n	8006cee <USB_EPStartXfer+0x4e2>
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	e057      	b.n	8006d9e <USB_EPStartXfer+0x592>
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf4:	d817      	bhi.n	8006d26 <USB_EPStartXfer+0x51a>
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d004      	beq.n	8006d16 <USB_EPStartXfer+0x50a>
 8006d0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d10:	3301      	adds	r3, #1
 8006d12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e03b      	b.n	8006d9e <USB_EPStartXfer+0x592>
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USB_EPStartXfer+0x53a>
 8006d3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d40:	3b01      	subs	r3, #1
 8006d42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e01e      	b.n	8006d9e <USB_EPStartXfer+0x592>
 8006d60:	463b      	mov	r3, r7
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d119      	bne.n	8006d9e <USB_EPStartXfer+0x592>
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7e:	4413      	add	r3, r2
 8006d80:	653b      	str	r3, [r7, #80]	; 0x50
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	011a      	lsls	r2, r3, #4
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	891b      	ldrh	r3, [r3, #8]
 8006da4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6959      	ldr	r1, [r3, #20]
 8006dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006db8:	1d38      	adds	r0, r7, #4
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	f001 f946 	bl	800804c <USB_WritePMA>
            ep->xfer_buff += len;
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dca:	441a      	add	r2, r3
 8006dcc:	463b      	mov	r3, r7
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d909      	bls.n	8006df6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	463b      	mov	r3, r7
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	621a      	str	r2, [r3, #32]
 8006df4:	e008      	b.n	8006e08 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d164      	bne.n	8006ee2 <USB_EPStartXfer+0x6d6>
 8006e18:	1d3b      	adds	r3, r7, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	4413      	add	r3, r2
 8006e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e30:	463b      	mov	r3, r7
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
 8006e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d112      	bne.n	8006e70 <USB_EPStartXfer+0x664>
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	e054      	b.n	8006f1a <USB_EPStartXfer+0x70e>
 8006e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e74:	2b3e      	cmp	r3, #62	; 0x3e
 8006e76:	d817      	bhi.n	8006ea8 <USB_EPStartXfer+0x69c>
 8006e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <USB_EPStartXfer+0x68c>
 8006e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e92:	3301      	adds	r3, #1
 8006e94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	e038      	b.n	8006f1a <USB_EPStartXfer+0x70e>
 8006ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <USB_EPStartXfer+0x6bc>
 8006ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e01b      	b.n	8006f1a <USB_EPStartXfer+0x70e>
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d116      	bne.n	8006f1a <USB_EPStartXfer+0x70e>
 8006eec:	1d3b      	adds	r3, r7, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efa:	4413      	add	r3, r2
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	011a      	lsls	r2, r3, #4
 8006f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	895b      	ldrh	r3, [r3, #10]
 8006f20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6959      	ldr	r1, [r3, #20]
 8006f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f34:	1d38      	adds	r0, r7, #4
 8006f36:	6800      	ldr	r0, [r0, #0]
 8006f38:	f001 f888 	bl	800804c <USB_WritePMA>
 8006f3c:	e36c      	b.n	8007618 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f8c:	1d3b      	adds	r3, r7, #4
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	4413      	add	r3, r2
 8006fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	011a      	lsls	r2, r3, #4
 8006fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	891b      	ldrh	r3, [r3, #8]
 8006fc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6959      	ldr	r1, [r3, #20]
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fda:	1d38      	adds	r0, r7, #4
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f001 f835 	bl	800804c <USB_WritePMA>
 8006fe2:	e319      	b.n	8007618 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006fe4:	1d3b      	adds	r3, r7, #4
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	463b      	mov	r3, r7
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	463b      	mov	r3, r7
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	463b      	mov	r3, r7
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 8162 	beq.w	800731a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007056:	1d3b      	adds	r3, r7, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800705e:	463b      	mov	r3, r7
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d164      	bne.n	8007132 <USB_EPStartXfer+0x926>
 8007068:	1d3b      	adds	r3, r7, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	67bb      	str	r3, [r7, #120]	; 0x78
 800706e:	1d3b      	adds	r3, r7, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007076:	b29b      	uxth	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800707c:	4413      	add	r3, r2
 800707e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	011a      	lsls	r2, r3, #4
 8007088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708a:	4413      	add	r3, r2
 800708c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007090:	677b      	str	r3, [r7, #116]	; 0x74
 8007092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d112      	bne.n	80070c0 <USB_EPStartXfer+0x8b4>
 800709a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e057      	b.n	8007170 <USB_EPStartXfer+0x964>
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	2b3e      	cmp	r3, #62	; 0x3e
 80070c6:	d817      	bhi.n	80070f8 <USB_EPStartXfer+0x8ec>
 80070c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <USB_EPStartXfer+0x8dc>
 80070de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070e2:	3301      	adds	r3, #1
 80070e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	801a      	strh	r2, [r3, #0]
 80070f6:	e03b      	b.n	8007170 <USB_EPStartXfer+0x964>
 80070f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <USB_EPStartXfer+0x90c>
 800710e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007112:	3b01      	subs	r3, #1
 8007114:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007118:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800711c:	b29b      	uxth	r3, r3
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e01e      	b.n	8007170 <USB_EPStartXfer+0x964>
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d119      	bne.n	8007170 <USB_EPStartXfer+0x964>
 800713c:	1d3b      	adds	r3, r7, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007144:	b29b      	uxth	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800714c:	4413      	add	r3, r2
 800714e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	011a      	lsls	r2, r3, #4
 800715a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800715e:	4413      	add	r3, r2
 8007160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716a:	b29a      	uxth	r2, r3
 800716c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800716e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	895b      	ldrh	r3, [r3, #10]
 8007176:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6959      	ldr	r1, [r3, #20]
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	b29b      	uxth	r3, r3
 8007186:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800718a:	1d38      	adds	r0, r7, #4
 800718c:	6800      	ldr	r0, [r0, #0]
 800718e:	f000 ff5d 	bl	800804c <USB_WritePMA>
          ep->xfer_buff += len;
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719c:	441a      	add	r2, r3
 800719e:	463b      	mov	r3, r7
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d909      	bls.n	80071c8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	463b      	mov	r3, r7
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	621a      	str	r2, [r3, #32]
 80071c6:	e008      	b.n	80071da <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2200      	movs	r2, #0
 80071d8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 821a 	beq.w	8007618 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d164      	bne.n	80072b8 <USB_EPStartXfer+0xaac>
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	1d3b      	adds	r3, r7, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007202:	4413      	add	r3, r2
 8007204:	66bb      	str	r3, [r7, #104]	; 0x68
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	011a      	lsls	r2, r3, #4
 800720e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007210:	4413      	add	r3, r2
 8007212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007216:	667b      	str	r3, [r7, #100]	; 0x64
 8007218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d112      	bne.n	8007246 <USB_EPStartXfer+0xa3a>
 8007220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800722a:	b29a      	uxth	r2, r3
 800722c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	e057      	b.n	80072f6 <USB_EPStartXfer+0xaea>
 8007246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724a:	2b3e      	cmp	r3, #62	; 0x3e
 800724c:	d817      	bhi.n	800727e <USB_EPStartXfer+0xa72>
 800724e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USB_EPStartXfer+0xa62>
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007268:	3301      	adds	r3, #1
 800726a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007272:	b29b      	uxth	r3, r3
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	b29a      	uxth	r2, r3
 8007278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e03b      	b.n	80072f6 <USB_EPStartXfer+0xaea>
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <USB_EPStartXfer+0xa92>
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007298:	3b01      	subs	r3, #1
 800729a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	e01e      	b.n	80072f6 <USB_EPStartXfer+0xaea>
 80072b8:	463b      	mov	r3, r7
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d119      	bne.n	80072f6 <USB_EPStartXfer+0xaea>
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	673b      	str	r3, [r7, #112]	; 0x70
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072d6:	4413      	add	r3, r2
 80072d8:	673b      	str	r3, [r7, #112]	; 0x70
 80072da:	463b      	mov	r3, r7
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	891b      	ldrh	r3, [r3, #8]
 80072fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007300:	463b      	mov	r3, r7
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6959      	ldr	r1, [r3, #20]
 8007306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730a:	b29b      	uxth	r3, r3
 800730c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007310:	1d38      	adds	r0, r7, #4
 8007312:	6800      	ldr	r0, [r0, #0]
 8007314:	f000 fe9a 	bl	800804c <USB_WritePMA>
 8007318:	e17e      	b.n	8007618 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800731a:	463b      	mov	r3, r7
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d16f      	bne.n	8007404 <USB_EPStartXfer+0xbf8>
 8007324:	1d3b      	adds	r3, r7, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800733c:	4413      	add	r3, r2
 800733e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007342:	463b      	mov	r3, r7
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	011a      	lsls	r2, r3, #4
 800734a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800734e:	4413      	add	r3, r2
 8007350:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d116      	bne.n	800738e <USB_EPStartXfer+0xb82>
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	e05f      	b.n	800744e <USB_EPStartXfer+0xc42>
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	2b3e      	cmp	r3, #62	; 0x3e
 8007394:	d818      	bhi.n	80073c8 <USB_EPStartXfer+0xbbc>
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <USB_EPStartXfer+0xbaa>
 80073ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073b0:	3301      	adds	r3, #1
 80073b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	029b      	lsls	r3, r3, #10
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e042      	b.n	800744e <USB_EPStartXfer+0xc42>
 80073c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <USB_EPStartXfer+0xbdc>
 80073de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	029b      	lsls	r3, r3, #10
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e024      	b.n	800744e <USB_EPStartXfer+0xc42>
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d11f      	bne.n	800744e <USB_EPStartXfer+0xc42>
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800741e:	b29b      	uxth	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007426:	4413      	add	r3, r2
 8007428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007438:	4413      	add	r3, r2
 800743a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800744c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800744e:	463b      	mov	r3, r7
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	891b      	ldrh	r3, [r3, #8]
 8007454:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007458:	463b      	mov	r3, r7
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6959      	ldr	r1, [r3, #20]
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	b29b      	uxth	r3, r3
 8007464:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007468:	1d38      	adds	r0, r7, #4
 800746a:	6800      	ldr	r0, [r0, #0]
 800746c:	f000 fdee 	bl	800804c <USB_WritePMA>
          ep->xfer_buff += len;
 8007470:	463b      	mov	r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	441a      	add	r2, r3
 800747c:	463b      	mov	r3, r7
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007482:	463b      	mov	r3, r7
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d909      	bls.n	80074a6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	463b      	mov	r3, r7
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	621a      	str	r2, [r3, #32]
 80074a4:	e008      	b.n	80074b8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80074a6:	463b      	mov	r3, r7
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074b0:	463b      	mov	r3, r7
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80ab 	beq.w	8007618 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074c2:	1d3b      	adds	r3, r7, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074ca:	463b      	mov	r3, r7
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d16f      	bne.n	80075b4 <USB_EPStartXfer+0xda8>
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ec:	4413      	add	r3, r2
 80074ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074f2:	463b      	mov	r3, r7
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	011a      	lsls	r2, r3, #4
 80074fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074fe:	4413      	add	r3, r2
 8007500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d116      	bne.n	800753e <USB_EPStartXfer+0xd32>
 8007510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800751c:	b29a      	uxth	r2, r3
 800751e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e05b      	b.n	80075f6 <USB_EPStartXfer+0xdea>
 800753e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007542:	2b3e      	cmp	r3, #62	; 0x3e
 8007544:	d818      	bhi.n	8007578 <USB_EPStartXfer+0xd6c>
 8007546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <USB_EPStartXfer+0xd5a>
 800755c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007560:	3301      	adds	r3, #1
 8007562:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e03e      	b.n	80075f6 <USB_EPStartXfer+0xdea>
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USB_EPStartXfer+0xd8c>
 800758e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007592:	3b01      	subs	r3, #1
 8007594:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759c:	b29b      	uxth	r3, r3
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e020      	b.n	80075f6 <USB_EPStartXfer+0xdea>
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d11b      	bne.n	80075f6 <USB_EPStartXfer+0xdea>
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075ce:	4413      	add	r3, r2
 80075d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075d4:	463b      	mov	r3, r7
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	011a      	lsls	r2, r3, #4
 80075dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075e0:	4413      	add	r3, r2
 80075e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075f6:	463b      	mov	r3, r7
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6959      	ldr	r1, [r3, #20]
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	b29b      	uxth	r3, r3
 800760c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007610:	1d38      	adds	r0, r7, #4
 8007612:	6800      	ldr	r0, [r0, #0]
 8007614:	f000 fd1a 	bl	800804c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f107 020a 	add.w	r2, r7, #10
 800762e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007636:	8013      	strh	r3, [r2, #0]
 8007638:	f107 030a 	add.w	r3, r7, #10
 800763c:	f107 020a 	add.w	r2, r7, #10
 8007640:	8812      	ldrh	r2, [r2, #0]
 8007642:	f082 0210 	eor.w	r2, r2, #16
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	f107 030a 	add.w	r3, r7, #10
 800764c:	f107 020a 	add.w	r2, r7, #10
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	f082 0220 	eor.w	r2, r2, #32
 8007656:	801a      	strh	r2, [r3, #0]
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	463b      	mov	r3, r7
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	f107 030a 	add.w	r3, r7, #10
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
 8007680:	e3b5      	b.n	8007dee <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007682:	463b      	mov	r3, r7
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	7b1b      	ldrb	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f040 8090 	bne.w	80077ae <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	463b      	mov	r3, r7
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d90e      	bls.n	80076bc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80076a8:	463b      	mov	r3, r7
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b2:	1ad2      	subs	r2, r2, r3
 80076b4:	463b      	mov	r3, r7
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	619a      	str	r2, [r3, #24]
 80076ba:	e008      	b.n	80076ce <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80076bc:	463b      	mov	r3, r7
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076ce:	1d3b      	adds	r3, r7, #4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076d6:	1d3b      	adds	r3, r7, #4
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076de:	b29b      	uxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076e6:	4413      	add	r3, r2
 80076e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	011a      	lsls	r2, r3, #4
 80076f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d116      	bne.n	8007738 <USB_EPStartXfer+0xf2c>
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007716:	b29a      	uxth	r2, r3
 8007718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800771c:	801a      	strh	r2, [r3, #0]
 800771e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e32c      	b.n	8007d92 <USB_EPStartXfer+0x1586>
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	2b3e      	cmp	r3, #62	; 0x3e
 800773e:	d818      	bhi.n	8007772 <USB_EPStartXfer+0xf66>
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800774a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <USB_EPStartXfer+0xf54>
 8007756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800775a:	3301      	adds	r3, #1
 800775c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007760:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007764:	b29b      	uxth	r3, r3
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e30f      	b.n	8007d92 <USB_EPStartXfer+0x1586>
 8007772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800777c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <USB_EPStartXfer+0xf86>
 8007788:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800778c:	3b01      	subs	r3, #1
 800778e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007792:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007796:	b29b      	uxth	r3, r3
 8007798:	029b      	lsls	r3, r3, #10
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e2f1      	b.n	8007d92 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80077ae:	463b      	mov	r3, r7
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	78db      	ldrb	r3, [r3, #3]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	f040 818f 	bne.w	8007ad8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80077ba:	463b      	mov	r3, r7
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d175      	bne.n	80078b0 <USB_EPStartXfer+0x10a4>
 80077c4:	1d3b      	adds	r3, r7, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077cc:	1d3b      	adds	r3, r7, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	461a      	mov	r2, r3
 80077d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077dc:	4413      	add	r3, r2
 80077de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077e2:	463b      	mov	r3, r7
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	011a      	lsls	r2, r3, #4
 80077ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077ee:	4413      	add	r3, r2
 80077f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d116      	bne.n	8007830 <USB_EPStartXfer+0x1024>
 8007802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780e:	b29a      	uxth	r2, r3
 8007810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e065      	b.n	80078fc <USB_EPStartXfer+0x10f0>
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b3e      	cmp	r3, #62	; 0x3e
 8007838:	d81a      	bhi.n	8007870 <USB_EPStartXfer+0x1064>
 800783a:	463b      	mov	r3, r7
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <USB_EPStartXfer+0x1052>
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007862:	b29b      	uxth	r3, r3
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e045      	b.n	80078fc <USB_EPStartXfer+0x10f0>
 8007870:	463b      	mov	r3, r7
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800787c:	463b      	mov	r3, r7
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <USB_EPStartXfer+0x1088>
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	3b01      	subs	r3, #1
 8007890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007898:	b29b      	uxth	r3, r3
 800789a:	029b      	lsls	r3, r3, #10
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e025      	b.n	80078fc <USB_EPStartXfer+0x10f0>
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d120      	bne.n	80078fc <USB_EPStartXfer+0x10f0>
 80078ba:	1d3b      	adds	r3, r7, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078c2:	1d3b      	adds	r3, r7, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078d2:	4413      	add	r3, r2
 80078d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078d8:	463b      	mov	r3, r7
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	011a      	lsls	r2, r3, #4
 80078e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078ee:	463b      	mov	r3, r7
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	1d3b      	adds	r3, r7, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007904:	463b      	mov	r3, r7
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d175      	bne.n	80079fa <USB_EPStartXfer+0x11ee>
 800790e:	1d3b      	adds	r3, r7, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007926:	4413      	add	r3, r2
 8007928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	011a      	lsls	r2, r3, #4
 8007934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007938:	4413      	add	r3, r2
 800793a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800793e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d116      	bne.n	800797a <USB_EPStartXfer+0x116e>
 800794c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007970:	b29a      	uxth	r2, r3
 8007972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	e061      	b.n	8007a3e <USB_EPStartXfer+0x1232>
 800797a:	463b      	mov	r3, r7
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b3e      	cmp	r3, #62	; 0x3e
 8007982:	d81a      	bhi.n	80079ba <USB_EPStartXfer+0x11ae>
 8007984:	463b      	mov	r3, r7
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <USB_EPStartXfer+0x119c>
 800799e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079a2:	3301      	adds	r3, #1
 80079a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	029b      	lsls	r3, r3, #10
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e041      	b.n	8007a3e <USB_EPStartXfer+0x1232>
 80079ba:	463b      	mov	r3, r7
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079c6:	463b      	mov	r3, r7
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <USB_EPStartXfer+0x11d2>
 80079d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079d8:	3b01      	subs	r3, #1
 80079da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	029b      	lsls	r3, r3, #10
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	e021      	b.n	8007a3e <USB_EPStartXfer+0x1232>
 80079fa:	463b      	mov	r3, r7
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d11c      	bne.n	8007a3e <USB_EPStartXfer+0x1232>
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a14:	4413      	add	r3, r2
 8007a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	011a      	lsls	r2, r3, #4
 8007a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a26:	4413      	add	r3, r2
 8007a28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a30:	463b      	mov	r3, r7
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a3e:	463b      	mov	r3, r7
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 81a4 	beq.w	8007d92 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a5e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <USB_EPStartXfer+0x126a>
 8007a6a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 8187 	bne.w	8007d92 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8180 	bne.w	8007d92 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007a92:	1d3b      	adds	r3, r7, #4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	463b      	mov	r3, r7
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aac:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ace:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]
 8007ad6:	e15c      	b.n	8007d92 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ad8:	463b      	mov	r3, r7
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	78db      	ldrb	r3, [r3, #3]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	f040 8155 	bne.w	8007d8e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	463b      	mov	r3, r7
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d90e      	bls.n	8007b12 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007af4:	463b      	mov	r3, r7
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007afe:	463b      	mov	r3, r7
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	619a      	str	r2, [r3, #24]
 8007b10:	e008      	b.n	8007b24 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007b12:	463b      	mov	r3, r7
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d16f      	bne.n	8007c0e <USB_EPStartXfer+0x1402>
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b36:	1d3b      	adds	r3, r7, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b46:	4413      	add	r3, r2
 8007b48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	011a      	lsls	r2, r3, #4
 8007b54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d116      	bne.n	8007b98 <USB_EPStartXfer+0x138c>
 8007b6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e05f      	b.n	8007c58 <USB_EPStartXfer+0x144c>
 8007b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9e:	d818      	bhi.n	8007bd2 <USB_EPStartXfer+0x13c6>
 8007ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <USB_EPStartXfer+0x13b4>
 8007bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e042      	b.n	8007c58 <USB_EPStartXfer+0x144c>
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <USB_EPStartXfer+0x13e6>
 8007be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	029b      	lsls	r3, r3, #10
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	e024      	b.n	8007c58 <USB_EPStartXfer+0x144c>
 8007c0e:	463b      	mov	r3, r7
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d11f      	bne.n	8007c58 <USB_EPStartXfer+0x144c>
 8007c18:	1d3b      	adds	r3, r7, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c20:	1d3b      	adds	r3, r7, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c30:	4413      	add	r3, r2
 8007c32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c36:	463b      	mov	r3, r7
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	011a      	lsls	r2, r3, #4
 8007c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c42:	4413      	add	r3, r2
 8007c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c60:	463b      	mov	r3, r7
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d16f      	bne.n	8007d4a <USB_EPStartXfer+0x153e>
 8007c6a:	1d3b      	adds	r3, r7, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c82:	4413      	add	r3, r2
 8007c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c88:	463b      	mov	r3, r7
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	011a      	lsls	r2, r3, #4
 8007c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c94:	4413      	add	r3, r2
 8007c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d116      	bne.n	8007cd4 <USB_EPStartXfer+0x14c8>
 8007ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e05e      	b.n	8007d92 <USB_EPStartXfer+0x1586>
 8007cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cda:	d818      	bhi.n	8007d0e <USB_EPStartXfer+0x1502>
 8007cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <USB_EPStartXfer+0x14f0>
 8007cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	029b      	lsls	r3, r3, #10
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	e041      	b.n	8007d92 <USB_EPStartXfer+0x1586>
 8007d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <USB_EPStartXfer+0x1522>
 8007d24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	029b      	lsls	r3, r3, #10
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e023      	b.n	8007d92 <USB_EPStartXfer+0x1586>
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d11e      	bne.n	8007d92 <USB_EPStartXfer+0x1586>
 8007d54:	1d3b      	adds	r3, r7, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d64:	4413      	add	r3, r2
 8007d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	011a      	lsls	r2, r3, #4
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	4413      	add	r3, r2
 8007d78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e001      	b.n	8007d92 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e02e      	b.n	8007df0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d92:	1d3b      	adds	r3, r7, #4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	463b      	mov	r3, r7
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007db0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007db4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007db8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007dbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dc4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007dc8:	1d3b      	adds	r3, r7, #4
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	463b      	mov	r3, r7
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d020      	beq.n	8007e4e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e22:	81bb      	strh	r3, [r7, #12]
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	f083 0310 	eor.w	r3, r3, #16
 8007e2a:	81bb      	strh	r3, [r7, #12]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	441a      	add	r2, r3
 8007e36:	89bb      	ldrh	r3, [r7, #12]
 8007e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	8013      	strh	r3, [r2, #0]
 8007e4c:	e01f      	b.n	8007e8e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e64:	81fb      	strh	r3, [r7, #14]
 8007e66:	89fb      	ldrh	r3, [r7, #14]
 8007e68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e6c:	81fb      	strh	r3, [r7, #14]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc80      	pop	{r7}
 8007e98:	4770      	bx	lr

08007e9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	7b1b      	ldrb	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f040 809d 	bne.w	8007fe8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d04c      	beq.n	8007f50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	823b      	strh	r3, [r7, #16]
 8007ec4:	8a3b      	ldrh	r3, [r7, #16]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01b      	beq.n	8007f06 <USB_EPClearStall+0x6c>
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee4:	81fb      	strh	r3, [r7, #14]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	78db      	ldrb	r3, [r3, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d06c      	beq.n	8007fe8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f24:	81bb      	strh	r3, [r7, #12]
 8007f26:	89bb      	ldrh	r3, [r7, #12]
 8007f28:	f083 0320 	eor.w	r3, r3, #32
 8007f2c:	81bb      	strh	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	89bb      	ldrh	r3, [r7, #12]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
 8007f4e:	e04b      	b.n	8007fe8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	82fb      	strh	r3, [r7, #22]
 8007f5e:	8afb      	ldrh	r3, [r7, #22]
 8007f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01b      	beq.n	8007fa0 <USB_EPClearStall+0x106>
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7e:	82bb      	strh	r3, [r7, #20]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	8abb      	ldrh	r3, [r7, #20]
 8007f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	827b      	strh	r3, [r7, #18]
 8007fb8:	8a7b      	ldrh	r3, [r7, #18]
 8007fba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fbe:	827b      	strh	r3, [r7, #18]
 8007fc0:	8a7b      	ldrh	r3, [r7, #18]
 8007fc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fc6:	827b      	strh	r3, [r7, #18]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	441a      	add	r2, r3
 8007fd2:	8a7b      	ldrh	r3, [r7, #18]
 8007fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr

0800802e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800803c:	b29b      	uxth	r3, r3
 800803e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008040:	68fb      	ldr	r3, [r7, #12]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800804c:	b480      	push	{r7}
 800804e:	b08d      	sub	sp, #52	; 0x34
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	460b      	mov	r3, r1
 800805c:	80fb      	strh	r3, [r7, #6]
 800805e:	4613      	mov	r3, r2
 8008060:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008062:	88bb      	ldrh	r3, [r7, #4]
 8008064:	3301      	adds	r3, #1
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	005a      	lsls	r2, r3, #1
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008084:	e01e      	b.n	80080c4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	3301      	adds	r3, #1
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	3302      	adds	r3, #2
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	3302      	adds	r3, #2
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	3b01      	subs	r3, #1
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1dd      	bne.n	8008086 <USB_WritePMA+0x3a>
  }
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	3734      	adds	r7, #52	; 0x34
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b08b      	sub	sp, #44	; 0x2c
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	4611      	mov	r1, r2
 80080e2:	461a      	mov	r2, r3
 80080e4:	460b      	mov	r3, r1
 80080e6:	80fb      	strh	r3, [r7, #6]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080ec:	88bb      	ldrh	r3, [r7, #4]
 80080ee:	085b      	lsrs	r3, r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	005a      	lsls	r2, r3, #1
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008108:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	e01b      	b.n	8008148 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	3302      	adds	r3, #2
 800811c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3301      	adds	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	0a1b      	lsrs	r3, r3, #8
 8008130:	b2da      	uxtb	r2, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3301      	adds	r3, #1
 800813a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	3302      	adds	r3, #2
 8008140:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	3b01      	subs	r3, #1
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e0      	bne.n	8008110 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800814e:	88bb      	ldrh	r3, [r7, #4]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	701a      	strb	r2, [r3, #0]
  }
}
 800816a:	bf00      	nop
 800816c:	372c      	adds	r7, #44	; 0x2c
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <MX_FATFS_Init+0x18>)
 800817a:	4805      	ldr	r0, [pc, #20]	; (8008190 <MX_FATFS_Init+0x1c>)
 800817c:	f001 fba0 	bl	80098c0 <FATFS_LinkDriver>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	4b03      	ldr	r3, [pc, #12]	; (8008194 <MX_FATFS_Init+0x20>)
 8008186:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008188:	bf00      	nop
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20002094 	.word	0x20002094
 8008190:	20000010 	.word	0x20000010
 8008194:	20002098 	.word	0x20002098

08008198 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <USER_initialize+0x20>)
 80081a4:	2201      	movs	r2, #1
 80081a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80081a8:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USER_initialize+0x20>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr
 80081b8:	2000000c 	.word	0x2000000c

080081bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <USER_status+0x20>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <USER_status+0x20>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr
 80081dc:	2000000c 	.word	0x2000000c

080081e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80081f0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800820c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	603a      	str	r2, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
 8008224:	460b      	mov	r3, r1
 8008226:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
    return res;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7c1b      	ldrb	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d115      	bne.n	800827c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008254:	2202      	movs	r2, #2
 8008256:	2181      	movs	r1, #129	; 0x81
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f004 fb9e 	bl	800c99a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008268:	2202      	movs	r2, #2
 800826a:	2101      	movs	r1, #1
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f004 fb94 	bl	800c99a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800827a:	e012      	b.n	80082a2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2202      	movs	r2, #2
 8008280:	2181      	movs	r1, #129	; 0x81
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f004 fb89 	bl	800c99a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800828e:	2340      	movs	r3, #64	; 0x40
 8008290:	2202      	movs	r2, #2
 8008292:	2101      	movs	r1, #1
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f004 fb80 	bl	800c99a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082a2:	2308      	movs	r3, #8
 80082a4:	2203      	movs	r2, #3
 80082a6:	2182      	movs	r1, #130	; 0x82
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f004 fb76 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80082b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082b8:	f004 fc96 	bl	800cbe8 <USBD_static_malloc>
 80082bc:	4602      	mov	r2, r0
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]
 80082d2:	e026      	b.n	8008322 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082da:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7c1b      	ldrb	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008308:	2101      	movs	r1, #1
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f004 fc36 	bl	800cb7c <USBD_LL_PrepareReceive>
 8008310:	e007      	b.n	8008322 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	2101      	movs	r1, #1
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f004 fc2d 	bl	800cb7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800833c:	2181      	movs	r1, #129	; 0x81
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f004 fb51 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800834a:	2101      	movs	r1, #1
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f004 fb4a 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800835a:	2182      	movs	r1, #130	; 0x82
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f004 fb42 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008382:	4618      	mov	r0, r3
 8008384:	f004 fc3c 	bl	800cc00 <USBD_static_free>
    pdev->pClassData = NULL;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b086      	sub	sp, #24
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083aa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d039      	beq.n	8008438 <USBD_CDC_Setup+0x9e>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d17f      	bne.n	80084c8 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	88db      	ldrh	r3, [r3, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d029      	beq.n	8008424 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da11      	bge.n	80083fe <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80083e6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	88d2      	ldrh	r2, [r2, #6]
 80083ec:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80083ee:	6939      	ldr	r1, [r7, #16]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	88db      	ldrh	r3, [r3, #6]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 f993 	bl	8009722 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80083fc:	e06b      	b.n	80084d6 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	785a      	ldrb	r2, [r3, #1]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	b2da      	uxtb	r2, r3
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008414:	6939      	ldr	r1, [r7, #16]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	88db      	ldrh	r3, [r3, #6]
 800841a:	461a      	mov	r2, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 f9ae 	bl	800977e <USBD_CtlPrepareRx>
    break;
 8008422:	e058      	b.n	80084d6 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	7850      	ldrb	r0, [r2, #1]
 8008430:	2200      	movs	r2, #0
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	4798      	blx	r3
    break;
 8008436:	e04e      	b.n	80084d6 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b0b      	cmp	r3, #11
 800843e:	d02e      	beq.n	800849e <USBD_CDC_Setup+0x104>
 8008440:	2b0b      	cmp	r3, #11
 8008442:	dc38      	bgt.n	80084b6 <USBD_CDC_Setup+0x11c>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <USBD_CDC_Setup+0xb4>
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d014      	beq.n	8008476 <USBD_CDC_Setup+0xdc>
 800844c:	e033      	b.n	80084b6 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008454:	2b03      	cmp	r3, #3
 8008456:	d107      	bne.n	8008468 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008458:	f107 030c 	add.w	r3, r7, #12
 800845c:	2202      	movs	r2, #2
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f95e 	bl	8009722 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008466:	e02e      	b.n	80084c6 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f8ef 	bl	800964e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008470:	2302      	movs	r3, #2
 8008472:	75fb      	strb	r3, [r7, #23]
      break;
 8008474:	e027      	b.n	80084c6 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800847c:	2b03      	cmp	r3, #3
 800847e:	d107      	bne.n	8008490 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008480:	f107 030f 	add.w	r3, r7, #15
 8008484:	2201      	movs	r2, #1
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f94a 	bl	8009722 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800848e:	e01a      	b.n	80084c6 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f8db 	bl	800964e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008498:	2302      	movs	r3, #2
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	e013      	b.n	80084c6 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d00d      	beq.n	80084c4 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f8cf 	bl	800964e <USBD_CtlError>
			  ret = USBD_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80084b4:	e006      	b.n	80084c4 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f8c8 	bl	800964e <USBD_CtlError>
      ret = USBD_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	75fb      	strb	r3, [r7, #23]
      break;
 80084c2:	e000      	b.n	80084c6 <USBD_CDC_Setup+0x12c>
      break;
 80084c4:	bf00      	nop
    }
    break;
 80084c6:	e006      	b.n	80084d6 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 f8bf 	bl	800964e <USBD_CtlError>
    ret = USBD_FAIL;
 80084d0:	2302      	movs	r3, #2
 80084d2:	75fb      	strb	r3, [r7, #23]
    break;
 80084d4:	bf00      	nop
  }

  return ret;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084fa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008502:	2b00      	cmp	r3, #0
 8008504:	d03a      	beq.n	800857c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	331c      	adds	r3, #28
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d029      	beq.n	8008570 <USBD_CDC_DataIn+0x90>
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	331c      	adds	r3, #28
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	78f9      	ldrb	r1, [r7, #3]
 8008530:	68b8      	ldr	r0, [r7, #8]
 8008532:	460b      	mov	r3, r1
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	4403      	add	r3, r0
 800853c:	3338      	adds	r3, #56	; 0x38
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	fbb2 f1f3 	udiv	r1, r2, r3
 8008544:	fb03 f301 	mul.w	r3, r3, r1
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d110      	bne.n	8008570 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	331c      	adds	r3, #28
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008562:	78f9      	ldrb	r1, [r7, #3]
 8008564:	2300      	movs	r3, #0
 8008566:	2200      	movs	r2, #0
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 fae4 	bl	800cb36 <USBD_LL_Transmit>
 800856e:	e003      	b.n	8008578 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	e000      	b.n	800857e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800857c:	2302      	movs	r3, #2
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008598:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f004 fb0f 	bl	800cbc2 <USBD_LL_GetRxDataSize>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085ca:	4611      	mov	r1, r2
 80085cc:	4798      	blx	r3

    return USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e000      	b.n	80085d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80085d2:	2302      	movs	r3, #2
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085ea:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d015      	beq.n	8008622 <USBD_CDC_EP0_RxReady+0x46>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085fc:	2bff      	cmp	r3, #255	; 0xff
 80085fe:	d010      	beq.n	8008622 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800860e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008616:	b292      	uxth	r2, r2
 8008618:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	22ff      	movs	r2, #255	; 0xff
 800861e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2243      	movs	r2, #67	; 0x43
 8008638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800863a:	4b03      	ldr	r3, [pc, #12]	; (8008648 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	200000ac 	.word	0x200000ac

0800864c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2243      	movs	r2, #67	; 0x43
 8008658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800865a:	4b03      	ldr	r3, [pc, #12]	; (8008668 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000068 	.word	0x20000068

0800866c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2243      	movs	r2, #67	; 0x43
 8008678:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	200000f0 	.word	0x200000f0

0800868c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	220a      	movs	r2, #10
 8008698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800869a:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000024 	.word	0x20000024

080086ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80086b6:	2302      	movs	r3, #2
 80086b8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	371c      	adds	r7, #28
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr

0800870a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800871a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800873e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01c      	beq.n	8008784 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008750:	2b00      	cmp	r3, #0
 8008752:	d115      	bne.n	8008780 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008772:	b29b      	uxth	r3, r3
 8008774:	2181      	movs	r1, #129	; 0x81
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f004 f9dd 	bl	800cb36 <USBD_LL_Transmit>

      return USBD_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	e002      	b.n	8008786 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008784:	2302      	movs	r3, #2
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800879c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d017      	beq.n	80087d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7c1b      	ldrb	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ba:	2101      	movs	r1, #1
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f004 f9dd 	bl	800cb7c <USBD_LL_PrepareReceive>
 80087c2:	e007      	b.n	80087d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	2101      	movs	r1, #1
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f004 f9d4 	bl	800cb7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e000      	b.n	80087da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80087d8:	2302      	movs	r3, #2
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087f6:	2302      	movs	r3, #2
 80087f8:	e01a      	b.n	8008830 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f004 f841 	bl	800c8b0 <USBD_LL_Init>

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d006      	beq.n	800885a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
 8008858:	e001      	b.n	800885e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800885a:	2302      	movs	r3, #2
 800885c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr

0800886a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f004 f876 	bl	800c964 <USBD_LL_Start>

  return USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr

08008896 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00c      	beq.n	80088ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	78fa      	ldrb	r2, [r7, #3]
 80088ba:	4611      	mov	r1, r2
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	4611      	mov	r1, r2
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fe62 	bl	80095d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800892e:	f003 031f 	and.w	r3, r3, #31
 8008932:	2b02      	cmp	r3, #2
 8008934:	d016      	beq.n	8008964 <USBD_LL_SetupStage+0x6a>
 8008936:	2b02      	cmp	r3, #2
 8008938:	d81c      	bhi.n	8008974 <USBD_LL_SetupStage+0x7a>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <USBD_LL_SetupStage+0x4a>
 800893e:	2b01      	cmp	r3, #1
 8008940:	d008      	beq.n	8008954 <USBD_LL_SetupStage+0x5a>
 8008942:	e017      	b.n	8008974 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f9c5 	bl	8008cdc <USBD_StdDevReq>
    break;
 8008952:	e01a      	b.n	800898a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fa27 	bl	8008db0 <USBD_StdItfReq>
    break;
 8008962:	e012      	b.n	800898a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa67 	bl	8008e40 <USBD_StdEPReq>
    break;
 8008972:	e00a      	b.n	800898a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800897a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f004 f84e 	bl	800ca24 <USBD_LL_StallEP>
    break;
 8008988:	bf00      	nop
  }

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	460b      	mov	r3, r1
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d14b      	bne.n	8008a40 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80089ae:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d134      	bne.n	8008a24 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d919      	bls.n	80089fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80089dc:	429a      	cmp	r2, r3
 80089de:	d203      	bcs.n	80089e8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	e002      	b.n	80089ee <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fee1 	bl	80097ba <USBD_CtlContinueRx>
 80089f8:	e038      	b.n	8008a6c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d105      	bne.n	8008a1c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fede 	bl	80097de <USBD_CtlSendStatus>
 8008a22:	e023      	b.n	8008a6c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	d11e      	bne.n	8008a6c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008a36:	2100      	movs	r1, #0
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f003 fff3 	bl	800ca24 <USBD_LL_StallEP>
 8008a3e:	e015      	b.n	8008a6c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00d      	beq.n	8008a68 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d108      	bne.n	8008a68 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	7afa      	ldrb	r2, [r7, #11]
 8008a60:	4611      	mov	r1, r2
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	4798      	blx	r3
 8008a66:	e001      	b.n	8008a6c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e000      	b.n	8008a6e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d17f      	bne.n	8008b8a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3314      	adds	r3, #20
 8008a8e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d15c      	bne.n	8008b54 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d915      	bls.n	8008ad2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fe4b 	bl	800975a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2100      	movs	r1, #0
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f004 f856 	bl	800cb7c <USBD_LL_PrepareReceive>
 8008ad0:	e04e      	b.n	8008b70 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	6912      	ldr	r2, [r2, #16]
 8008ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ade:	fb02 f201 	mul.w	r2, r2, r1
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11c      	bne.n	8008b22 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d316      	bcc.n	8008b22 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d20f      	bcs.n	8008b22 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fe27 	bl	800975a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f004 f82e 	bl	800cb7c <USBD_LL_PrepareReceive>
 8008b20:	e026      	b.n	8008b70 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d105      	bne.n	8008b44 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b44:	2180      	movs	r1, #128	; 0x80
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f003 ff6c 	bl	800ca24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fe59 	bl	8009804 <USBD_CtlReceiveStatus>
 8008b52:	e00d      	b.n	8008b70 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d004      	beq.n	8008b68 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b68:	2180      	movs	r1, #128	; 0x80
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f003 ff5a 	bl	800ca24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d11d      	bne.n	8008bb6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fe81 	bl	8008882 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008b88:	e015      	b.n	8008bb6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d108      	bne.n	8008bb2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	7afa      	ldrb	r2, [r7, #11]
 8008baa:	4611      	mov	r1, r2
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	4798      	blx	r3
 8008bb0:	e001      	b.n	8008bb6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e000      	b.n	8008bb8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bc8:	2340      	movs	r3, #64	; 0x40
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f003 fee3 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2240      	movs	r2, #64	; 0x40
 8008be0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	2200      	movs	r2, #0
 8008be8:	2180      	movs	r1, #128	; 0x80
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f003 fed5 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2240      	movs	r2, #64	; 0x40
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6852      	ldr	r2, [r2, #4]
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	4611      	mov	r1, r2
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
  }

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2204      	movs	r2, #4
 8008c78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bc80      	pop	{r7}
 8008c86:	4770      	bx	lr

08008c88 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d10b      	bne.n	8008cd2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d005      	beq.n	8008d02 <USBD_StdDevReq+0x26>
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d84f      	bhi.n	8008d9a <USBD_StdDevReq+0xbe>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <USBD_StdDevReq+0x36>
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d14b      	bne.n	8008d9a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
    break;
 8008d10:	e048      	b.n	8008da4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	785b      	ldrb	r3, [r3, #1]
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d839      	bhi.n	8008d8e <USBD_StdDevReq+0xb2>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <USBD_StdDevReq+0x44>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d71 	.word	0x08008d71
 8008d24:	08008d85 	.word	0x08008d85
 8008d28:	08008d8f 	.word	0x08008d8f
 8008d2c:	08008d7b 	.word	0x08008d7b
 8008d30:	08008d8f 	.word	0x08008d8f
 8008d34:	08008d53 	.word	0x08008d53
 8008d38:	08008d49 	.word	0x08008d49
 8008d3c:	08008d8f 	.word	0x08008d8f
 8008d40:	08008d67 	.word	0x08008d67
 8008d44:	08008d5d 	.word	0x08008d5d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f9da 	bl	8009104 <USBD_GetDescriptor>
      break;
 8008d50:	e022      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 facf 	bl	80092f8 <USBD_SetAddress>
      break;
 8008d5a:	e01d      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fb0e 	bl	8009380 <USBD_SetConfig>
      break;
 8008d64:	e018      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb97 	bl	800949c <USBD_GetConfig>
      break;
 8008d6e:	e013      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fbc7 	bl	8009506 <USBD_GetStatus>
      break;
 8008d78:	e00e      	b.n	8008d98 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fbf5 	bl	800956c <USBD_SetFeature>
      break;
 8008d82:	e009      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc04 	bl	8009594 <USBD_ClrFeature>
      break;
 8008d8c:	e004      	b.n	8008d98 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fc5c 	bl	800964e <USBD_CtlError>
      break;
 8008d96:	bf00      	nop
    }
    break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc56 	bl	800964e <USBD_CtlError>
    break;
 8008da2:	bf00      	nop
  }

  return ret;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop

08008db0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dc6:	2b40      	cmp	r3, #64	; 0x40
 8008dc8:	d005      	beq.n	8008dd6 <USBD_StdItfReq+0x26>
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d82e      	bhi.n	8008e2c <USBD_StdItfReq+0x7c>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <USBD_StdItfReq+0x26>
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d12a      	bne.n	8008e2c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d81d      	bhi.n	8008e1e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	889b      	ldrh	r3, [r3, #4]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d813      	bhi.n	8008e14 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <USBD_StdItfReq+0x78>
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fce6 	bl	80097de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008e12:	e009      	b.n	8008e28 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fc19 	bl	800964e <USBD_CtlError>
      break;
 8008e1c:	e004      	b.n	8008e28 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fc14 	bl	800964e <USBD_CtlError>
      break;
 8008e26:	e000      	b.n	8008e2a <USBD_StdItfReq+0x7a>
      break;
 8008e28:	bf00      	nop
    }
    break;
 8008e2a:	e004      	b.n	8008e36 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc0d 	bl	800964e <USBD_CtlError>
    break;
 8008e34:	bf00      	nop
  }

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	889b      	ldrh	r3, [r3, #4]
 8008e52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d007      	beq.n	8008e70 <USBD_StdEPReq+0x30>
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	f200 8144 	bhi.w	80090ee <USBD_StdEPReq+0x2ae>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <USBD_StdEPReq+0x40>
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	f040 813f 	bne.w	80090ee <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
    break;
 8008e7e:	e13b      	b.n	80090f8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d10a      	bne.n	8008ea2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	e12b      	b.n	80090fa <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d007      	beq.n	8008eba <USBD_StdEPReq+0x7a>
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	f300 8119 	bgt.w	80090e2 <USBD_StdEPReq+0x2a2>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d072      	beq.n	8008f9a <USBD_StdEPReq+0x15a>
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d03a      	beq.n	8008f2e <USBD_StdEPReq+0xee>
 8008eb8:	e113      	b.n	80090e2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d002      	beq.n	8008eca <USBD_StdEPReq+0x8a>
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d015      	beq.n	8008ef4 <USBD_StdEPReq+0xb4>
 8008ec8:	e02b      	b.n	8008f22 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00c      	beq.n	8008eea <USBD_StdEPReq+0xaa>
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	2b80      	cmp	r3, #128	; 0x80
 8008ed4:	d009      	beq.n	8008eea <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f003 fda2 	bl	800ca24 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008ee0:	2180      	movs	r1, #128	; 0x80
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f003 fd9e 	bl	800ca24 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ee8:	e020      	b.n	8008f2c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fbae 	bl	800964e <USBD_CtlError>
        break;
 8008ef2:	e01b      	b.n	8008f2c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10e      	bne.n	8008f1a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <USBD_StdEPReq+0xda>
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d008      	beq.n	8008f1a <USBD_StdEPReq+0xda>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	88db      	ldrh	r3, [r3, #6]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f003 fd85 	bl	800ca24 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc5f 	bl	80097de <USBD_CtlSendStatus>

        break;
 8008f20:	e004      	b.n	8008f2c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb92 	bl	800964e <USBD_CtlError>
        break;
 8008f2a:	bf00      	nop
      }
      break;
 8008f2c:	e0de      	b.n	80090ec <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d002      	beq.n	8008f3e <USBD_StdEPReq+0xfe>
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d015      	beq.n	8008f68 <USBD_StdEPReq+0x128>
 8008f3c:	e026      	b.n	8008f8c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00c      	beq.n	8008f5e <USBD_StdEPReq+0x11e>
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b80      	cmp	r3, #128	; 0x80
 8008f48:	d009      	beq.n	8008f5e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f003 fd68 	bl	800ca24 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f54:	2180      	movs	r1, #128	; 0x80
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f003 fd64 	bl	800ca24 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f5c:	e01c      	b.n	8008f98 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fb74 	bl	800964e <USBD_CtlError>
        break;
 8008f66:	e017      	b.n	8008f98 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	885b      	ldrh	r3, [r3, #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d112      	bne.n	8008f96 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d004      	beq.n	8008f84 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f003 fd6f 	bl	800ca62 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc2a 	bl	80097de <USBD_CtlSendStatus>
        }
        break;
 8008f8a:	e004      	b.n	8008f96 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fb5d 	bl	800964e <USBD_CtlError>
        break;
 8008f94:	e000      	b.n	8008f98 <USBD_StdEPReq+0x158>
        break;
 8008f96:	bf00      	nop
      }
      break;
 8008f98:	e0a8      	b.n	80090ec <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d002      	beq.n	8008faa <USBD_StdEPReq+0x16a>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d031      	beq.n	800900c <USBD_StdEPReq+0x1cc>
 8008fa8:	e095      	b.n	80090d6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <USBD_StdEPReq+0x180>
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d004      	beq.n	8008fc0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb48 	bl	800964e <USBD_CtlError>
          break;
 8008fbe:	e08f      	b.n	80090e0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da0b      	bge.n	8008fe0 <USBD_StdEPReq+0x1a0>
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	3310      	adds	r3, #16
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3304      	adds	r3, #4
 8008fde:	e00a      	b.n	8008ff6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2202      	movs	r2, #2
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fb8c 	bl	8009722 <USBD_CtlSendData>
          break;
 800900a:	e069      	b.n	80090e0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800900c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009010:	2b00      	cmp	r3, #0
 8009012:	da11      	bge.n	8009038 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	f003 020f 	and.w	r2, r3, #15
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	3318      	adds	r3, #24
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d117      	bne.n	800905e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb0c 	bl	800964e <USBD_CtlError>
            break;
 8009036:	e053      	b.n	80090e0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 faf9 	bl	800964e <USBD_CtlError>
            break;
 800905c:	e040      	b.n	80090e0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800905e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009062:	2b00      	cmp	r3, #0
 8009064:	da0b      	bge.n	800907e <USBD_StdEPReq+0x23e>
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	3310      	adds	r3, #16
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	e00a      	b.n	8009094 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4413      	add	r3, r2
 8009094:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <USBD_StdEPReq+0x262>
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b80      	cmp	r3, #128	; 0x80
 80090a0:	d103      	bne.n	80090aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e00e      	b.n	80090c8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f003 fcf6 	bl	800caa0 <USBD_LL_IsStallEP>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2201      	movs	r2, #1
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e002      	b.n	80090c8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2202      	movs	r2, #2
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fb27 	bl	8009722 <USBD_CtlSendData>
          break;
 80090d4:	e004      	b.n	80090e0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fab8 	bl	800964e <USBD_CtlError>
        break;
 80090de:	bf00      	nop
      }
      break;
 80090e0:	e004      	b.n	80090ec <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fab2 	bl	800964e <USBD_CtlError>
      break;
 80090ea:	bf00      	nop
    }
    break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 faac 	bl	800964e <USBD_CtlError>
    break;
 80090f6:	bf00      	nop
  }

  return ret;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	885b      	ldrh	r3, [r3, #2]
 8009112:	0a1b      	lsrs	r3, r3, #8
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	2b06      	cmp	r3, #6
 800911a:	f200 80c9 	bhi.w	80092b0 <USBD_GetDescriptor+0x1ac>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <USBD_GetDescriptor+0x20>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009141 	.word	0x08009141
 8009128:	08009159 	.word	0x08009159
 800912c:	08009199 	.word	0x08009199
 8009130:	080092b1 	.word	0x080092b1
 8009134:	080092b1 	.word	0x080092b1
 8009138:	0800925d 	.word	0x0800925d
 800913c:	08009283 	.word	0x08009283
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	7c12      	ldrb	r2, [r2, #16]
 800914c:	f107 010a 	add.w	r1, r7, #10
 8009150:	4610      	mov	r0, r2
 8009152:	4798      	blx	r3
 8009154:	60f8      	str	r0, [r7, #12]
    break;
 8009156:	e0b0      	b.n	80092ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7c1b      	ldrb	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10d      	bne.n	800917c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	f107 020a 	add.w	r2, r7, #10
 800916c:	4610      	mov	r0, r2
 800916e:	4798      	blx	r3
 8009170:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	2202      	movs	r2, #2
 8009178:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800917a:	e09e      	b.n	80092ba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	f107 020a 	add.w	r2, r7, #10
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	2202      	movs	r2, #2
 8009194:	701a      	strb	r2, [r3, #0]
    break;
 8009196:	e090      	b.n	80092ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	885b      	ldrh	r3, [r3, #2]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d856      	bhi.n	8009250 <USBD_GetDescriptor+0x14c>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBD_GetDescriptor+0xa4>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091d9 	.word	0x080091d9
 80091b0:	080091f1 	.word	0x080091f1
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009221 	.word	0x08009221
 80091bc:	08009239 	.word	0x08009239
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	7c12      	ldrb	r2, [r2, #16]
 80091cc:	f107 010a 	add.w	r1, r7, #10
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	60f8      	str	r0, [r7, #12]
      break;
 80091d6:	e040      	b.n	800925a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 010a 	add.w	r1, r7, #10
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
      break;
 80091ee:	e034      	b.n	800925a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 010a 	add.w	r1, r7, #10
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
      break;
 8009206:	e028      	b.n	800925a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 010a 	add.w	r1, r7, #10
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
      break;
 800921e:	e01c      	b.n	800925a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	7c12      	ldrb	r2, [r2, #16]
 800922c:	f107 010a 	add.w	r1, r7, #10
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
 8009234:	60f8      	str	r0, [r7, #12]
      break;
 8009236:	e010      	b.n	800925a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7c12      	ldrb	r2, [r2, #16]
 8009244:	f107 010a 	add.w	r1, r7, #10
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
      break;
 800924e:	e004      	b.n	800925a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9fb 	bl	800964e <USBD_CtlError>
      return;
 8009258:	e04b      	b.n	80092f2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800925a:	e02e      	b.n	80092ba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f107 020a 	add.w	r2, r7, #10
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
      break;
 8009276:	e020      	b.n	80092ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9e7 	bl	800964e <USBD_CtlError>
      return;
 8009280:	e037      	b.n	80092f2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7c1b      	ldrb	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10d      	bne.n	80092a6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	f107 020a 	add.w	r2, r7, #10
 8009296:	4610      	mov	r0, r2
 8009298:	4798      	blx	r3
 800929a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	2207      	movs	r2, #7
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e009      	b.n	80092ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f9d0 	bl	800964e <USBD_CtlError>
      return;
 80092ae:	e020      	b.n	80092f2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f9cb 	bl	800964e <USBD_CtlError>
    return;
 80092b8:	e01b      	b.n	80092f2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80092ba:	897b      	ldrh	r3, [r7, #10]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d011      	beq.n	80092e4 <USBD_GetDescriptor+0x1e0>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	88db      	ldrh	r3, [r3, #6]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	88da      	ldrh	r2, [r3, #6]
 80092cc:	897b      	ldrh	r3, [r7, #10]
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf28      	it	cs
 80092d2:	4613      	movcs	r3, r2
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80092d8:	897b      	ldrh	r3, [r7, #10]
 80092da:	461a      	mov	r2, r3
 80092dc:	68f9      	ldr	r1, [r7, #12]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa1f 	bl	8009722 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	88db      	ldrh	r3, [r3, #6]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa76 	bl	80097de <USBD_CtlSendStatus>
  }
}
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	889b      	ldrh	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d130      	bne.n	800936c <USBD_SetAddress+0x74>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	88db      	ldrh	r3, [r3, #6]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d12c      	bne.n	800936c <USBD_SetAddress+0x74>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	2b7f      	cmp	r3, #127	; 0x7f
 8009318:	d828      	bhi.n	800936c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009324:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800932c:	2b03      	cmp	r3, #3
 800932e:	d104      	bne.n	800933a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f98b 	bl	800964e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009338:	e01d      	b.n	8009376 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f003 fbd6 	bl	800caf8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa46 	bl	80097de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009360:	e009      	b.n	8009376 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	e004      	b.n	8009376 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f96d 	bl	800964e <USBD_CtlError>
  }
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	b2da      	uxtb	r2, r3
 8009390:	4b41      	ldr	r3, [pc, #260]	; (8009498 <USBD_SetConfig+0x118>)
 8009392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009394:	4b40      	ldr	r3, [pc, #256]	; (8009498 <USBD_SetConfig+0x118>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d904      	bls.n	80093a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f955 	bl	800964e <USBD_CtlError>
 80093a4:	e075      	b.n	8009492 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d002      	beq.n	80093b6 <USBD_SetConfig+0x36>
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d023      	beq.n	80093fc <USBD_SetConfig+0x7c>
 80093b4:	e062      	b.n	800947c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80093b6:	4b38      	ldr	r3, [pc, #224]	; (8009498 <USBD_SetConfig+0x118>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d01a      	beq.n	80093f4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80093be:	4b36      	ldr	r3, [pc, #216]	; (8009498 <USBD_SetConfig+0x118>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2203      	movs	r2, #3
 80093cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093d0:	4b31      	ldr	r3, [pc, #196]	; (8009498 <USBD_SetConfig+0x118>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fa5d 	bl	8008896 <USBD_SetClassConfig>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d104      	bne.n	80093ec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f932 	bl	800964e <USBD_CtlError>
          return;
 80093ea:	e052      	b.n	8009492 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9f6 	bl	80097de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80093f2:	e04e      	b.n	8009492 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9f2 	bl	80097de <USBD_CtlSendStatus>
      break;
 80093fa:	e04a      	b.n	8009492 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093fc:	4b26      	ldr	r3, [pc, #152]	; (8009498 <USBD_SetConfig+0x118>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d112      	bne.n	800942a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800940c:	4b22      	ldr	r3, [pc, #136]	; (8009498 <USBD_SetConfig+0x118>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009416:	4b20      	ldr	r3, [pc, #128]	; (8009498 <USBD_SetConfig+0x118>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fa59 	bl	80088d4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9db 	bl	80097de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009428:	e033      	b.n	8009492 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800942a:	4b1b      	ldr	r3, [pc, #108]	; (8009498 <USBD_SetConfig+0x118>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d01d      	beq.n	8009474 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff fa47 	bl	80088d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009446:	4b14      	ldr	r3, [pc, #80]	; (8009498 <USBD_SetConfig+0x118>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009450:	4b11      	ldr	r3, [pc, #68]	; (8009498 <USBD_SetConfig+0x118>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fa1d 	bl	8008896 <USBD_SetClassConfig>
 800945c:	4603      	mov	r3, r0
 800945e:	2b02      	cmp	r3, #2
 8009460:	d104      	bne.n	800946c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8f2 	bl	800964e <USBD_CtlError>
          return;
 800946a:	e012      	b.n	8009492 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f9b6 	bl	80097de <USBD_CtlSendStatus>
      break;
 8009472:	e00e      	b.n	8009492 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f9b2 	bl	80097de <USBD_CtlSendStatus>
      break;
 800947a:	e00a      	b.n	8009492 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8e5 	bl	800964e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <USBD_SetConfig+0x118>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fa22 	bl	80088d4 <USBD_ClrClassConfig>
      break;
 8009490:	bf00      	nop
    }
  }
}
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	2000044c 	.word	0x2000044c

0800949c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d004      	beq.n	80094b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f8cc 	bl	800964e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80094b6:	e022      	b.n	80094fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dc02      	bgt.n	80094c8 <USBD_GetConfig+0x2c>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc03      	bgt.n	80094ce <USBD_GetConfig+0x32>
 80094c6:	e015      	b.n	80094f4 <USBD_GetConfig+0x58>
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d00b      	beq.n	80094e4 <USBD_GetConfig+0x48>
 80094cc:	e012      	b.n	80094f4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3308      	adds	r3, #8
 80094d8:	2201      	movs	r2, #1
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f920 	bl	8009722 <USBD_CtlSendData>
      break;
 80094e2:	e00c      	b.n	80094fe <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3304      	adds	r3, #4
 80094e8:	2201      	movs	r2, #1
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f918 	bl	8009722 <USBD_CtlSendData>
      break;
 80094f2:	e004      	b.n	80094fe <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f8a9 	bl	800964e <USBD_CtlError>
      break;
 80094fc:	bf00      	nop
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009516:	3b01      	subs	r3, #1
 8009518:	2b02      	cmp	r3, #2
 800951a:	d81e      	bhi.n	800955a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	88db      	ldrh	r3, [r3, #6]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d004      	beq.n	800952e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f891 	bl	800964e <USBD_CtlError>
      break;
 800952c:	e01a      	b.n	8009564 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f043 0202 	orr.w	r2, r3, #2
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	330c      	adds	r3, #12
 800954e:	2202      	movs	r2, #2
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f8e5 	bl	8009722 <USBD_CtlSendData>
    break;
 8009558:	e004      	b.n	8009564 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f876 	bl	800964e <USBD_CtlError>
    break;
 8009562:	bf00      	nop
  }
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	885b      	ldrh	r3, [r3, #2]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d106      	bne.n	800958c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f929 	bl	80097de <USBD_CtlSendStatus>
  }

}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095a4:	3b01      	subs	r3, #1
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d80b      	bhi.n	80095c2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	885b      	ldrh	r3, [r3, #2]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d10c      	bne.n	80095cc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f90f 	bl	80097de <USBD_CtlSendStatus>
    }
    break;
 80095c0:	e004      	b.n	80095cc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f842 	bl	800964e <USBD_CtlError>
    break;
 80095ca:	e000      	b.n	80095ce <USBD_ClrFeature+0x3a>
    break;
 80095cc:	bf00      	nop
  }
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785a      	ldrb	r2, [r3, #1]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	3302      	adds	r3, #2
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	3303      	adds	r3, #3
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	b29b      	uxth	r3, r3
 8009604:	4413      	add	r3, r2
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	3304      	adds	r3, #4
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b29a      	uxth	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	3305      	adds	r3, #5
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	b29b      	uxth	r3, r3
 8009620:	4413      	add	r3, r2
 8009622:	b29a      	uxth	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	3306      	adds	r3, #6
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	b29a      	uxth	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	3307      	adds	r3, #7
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	b29b      	uxth	r3, r3
 800963c:	4413      	add	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	80da      	strh	r2, [r3, #6]

}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009658:	2180      	movs	r1, #128	; 0x80
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f003 f9e2 	bl	800ca24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009660:	2100      	movs	r1, #0
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 f9de 	bl	800ca24 <USBD_LL_StallEP>
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d032      	beq.n	80096ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f834 	bl	80096f4 <USBD_GetLen>
 800968c:	4603      	mov	r3, r0
 800968e:	3301      	adds	r3, #1
 8009690:	b29b      	uxth	r3, r3
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	75fa      	strb	r2, [r7, #23]
 80096a0:	461a      	mov	r2, r3
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4413      	add	r3, r2
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	7812      	ldrb	r2, [r2, #0]
 80096aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	75fa      	strb	r2, [r7, #23]
 80096b2:	461a      	mov	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	4413      	add	r3, r2
 80096b8:	2203      	movs	r2, #3
 80096ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096bc:	e012      	b.n	80096e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	60fa      	str	r2, [r7, #12]
 80096c4:	7dfa      	ldrb	r2, [r7, #23]
 80096c6:	1c51      	adds	r1, r2, #1
 80096c8:	75f9      	strb	r1, [r7, #23]
 80096ca:	4611      	mov	r1, r2
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	440a      	add	r2, r1
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	75fa      	strb	r2, [r7, #23]
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4413      	add	r3, r2
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e8      	bne.n	80096be <USBD_GetString+0x4e>
    }
  }
}
 80096ec:	bf00      	nop
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009700:	e005      	b.n	800970e <USBD_GetLen+0x1a>
    {
        len++;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	3301      	adds	r3, #1
 8009706:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3301      	adds	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1f5      	bne.n	8009702 <USBD_GetLen+0xe>
    }

    return len;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr

08009722 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	4613      	mov	r3, r2
 800972e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2202      	movs	r2, #2
 8009734:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009738:	88fa      	ldrh	r2, [r7, #6]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800973e:	88fa      	ldrh	r2, [r7, #6]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009744:	88fb      	ldrh	r3, [r7, #6]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f003 f9f3 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	4613      	mov	r3, r2
 8009766:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	2100      	movs	r1, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f003 f9e1 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	4613      	mov	r3, r2
 800978a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2203      	movs	r2, #3
 8009790:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	2100      	movs	r1, #0
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f003 f9e6 	bl	800cb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	4613      	mov	r3, r2
 80097c6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f003 f9d4 	bl	800cb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2204      	movs	r2, #4
 80097ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097ee:	2300      	movs	r3, #0
 80097f0:	2200      	movs	r2, #0
 80097f2:	2100      	movs	r1, #0
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f003 f99e 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2205      	movs	r2, #5
 8009810:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009814:	2300      	movs	r3, #0
 8009816:	2200      	movs	r2, #0
 8009818:	2100      	movs	r1, #0
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f003 f9ae 	bl	800cb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4613      	mov	r3, r2
 8009838:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800983a:	2301      	movs	r3, #1
 800983c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009842:	4b1e      	ldr	r3, [pc, #120]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 8009844:	7a5b      	ldrb	r3, [r3, #9]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d131      	bne.n	80098b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800984c:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 800984e:	7a5b      	ldrb	r3, [r3, #9]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	461a      	mov	r2, r3
 8009854:	4b19      	ldr	r3, [pc, #100]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 8009856:	2100      	movs	r1, #0
 8009858:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800985a:	4b18      	ldr	r3, [pc, #96]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 800985c:	7a5b      	ldrb	r3, [r3, #9]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	4a16      	ldr	r2, [pc, #88]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 800986c:	7a5b      	ldrb	r3, [r3, #9]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 8009874:	4413      	add	r3, r2
 8009876:	79fa      	ldrb	r2, [r7, #7]
 8009878:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 800987c:	7a5b      	ldrb	r3, [r3, #9]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	b2d1      	uxtb	r1, r2
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <FATFS_LinkDriverEx+0x90>)
 8009886:	7251      	strb	r1, [r2, #9]
 8009888:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800988a:	7dbb      	ldrb	r3, [r7, #22]
 800988c:	3330      	adds	r3, #48	; 0x30
 800988e:	b2da      	uxtb	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	3301      	adds	r3, #1
 8009898:	223a      	movs	r2, #58	; 0x3a
 800989a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	3302      	adds	r3, #2
 80098a0:	222f      	movs	r2, #47	; 0x2f
 80098a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	3303      	adds	r3, #3
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bc80      	pop	{r7}
 80098ba:	4770      	bx	lr
 80098bc:	20000450 	.word	0x20000450

080098c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80098ca:	2200      	movs	r2, #0
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff ffac 	bl	800982c <FATFS_LinkDriverEx>
 80098d4:	4603      	mov	r3, r0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e6:	f3ef 8305 	mrs	r3, IPSR
 80098ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80098ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10f      	bne.n	8009912 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f2:	f3ef 8310 	mrs	r3, PRIMASK
 80098f6:	607b      	str	r3, [r7, #4]
  return(result);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <osKernelInitialize+0x32>
 80098fe:	4b10      	ldr	r3, [pc, #64]	; (8009940 <osKernelInitialize+0x60>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d109      	bne.n	800991a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009906:	f3ef 8311 	mrs	r3, BASEPRI
 800990a:	603b      	str	r3, [r7, #0]
  return(result);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009912:	f06f 0305 	mvn.w	r3, #5
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e00c      	b.n	8009934 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800991a:	4b09      	ldr	r3, [pc, #36]	; (8009940 <osKernelInitialize+0x60>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <osKernelInitialize+0x60>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e002      	b.n	8009934 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800992e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009934:	68fb      	ldr	r3, [r7, #12]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr
 8009940:	2000045c 	.word	0x2000045c

08009944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800994a:	f3ef 8305 	mrs	r3, IPSR
 800994e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10f      	bne.n	8009976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009956:	f3ef 8310 	mrs	r3, PRIMASK
 800995a:	607b      	str	r3, [r7, #4]
  return(result);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <osKernelStart+0x32>
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <osKernelStart+0x64>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d109      	bne.n	800997e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800996a:	f3ef 8311 	mrs	r3, BASEPRI
 800996e:	603b      	str	r3, [r7, #0]
  return(result);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009976:	f06f 0305 	mvn.w	r3, #5
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e00e      	b.n	800999c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <osKernelStart+0x64>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d107      	bne.n	8009996 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009986:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <osKernelStart+0x64>)
 8009988:	2202      	movs	r2, #2
 800998a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800998c:	f001 f890 	bl	800aab0 <vTaskStartScheduler>
      stat = osOK;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e002      	b.n	800999c <osKernelStart+0x58>
    } else {
      stat = osError;
 8009996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800999a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800999c:	68fb      	ldr	r3, [r7, #12]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2000045c 	.word	0x2000045c

080099ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b092      	sub	sp, #72	; 0x48
 80099b0:	af04      	add	r7, sp, #16
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099bc:	f3ef 8305 	mrs	r3, IPSR
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 8094 	bne.w	8009af2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ca:	f3ef 8310 	mrs	r3, PRIMASK
 80099ce:	623b      	str	r3, [r7, #32]
  return(result);
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 808d 	bne.w	8009af2 <osThreadNew+0x146>
 80099d8:	4b48      	ldr	r3, [pc, #288]	; (8009afc <osThreadNew+0x150>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d106      	bne.n	80099ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099e0:	f3ef 8311 	mrs	r3, BASEPRI
 80099e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 8082 	bne.w	8009af2 <osThreadNew+0x146>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d07e      	beq.n	8009af2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80099f4:	2380      	movs	r3, #128	; 0x80
 80099f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80099f8:	2318      	movs	r3, #24
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80099fc:	2300      	movs	r3, #0
 80099fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009a00:	f107 031b 	add.w	r3, r7, #27
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a0a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d045      	beq.n	8009a9e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <osThreadNew+0x74>
        name = attr->name;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <osThreadNew+0x9a>
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	2b38      	cmp	r3, #56	; 0x38
 8009a38:	d805      	bhi.n	8009a46 <osThreadNew+0x9a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <osThreadNew+0x9e>
        return (NULL);
 8009a46:	2300      	movs	r3, #0
 8009a48:	e054      	b.n	8009af4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00e      	beq.n	8009a80 <osThreadNew+0xd4>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	2bbb      	cmp	r3, #187	; 0xbb
 8009a68:	d90a      	bls.n	8009a80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d006      	beq.n	8009a80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <osThreadNew+0xd4>
        mem = 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a7e:	e010      	b.n	8009aa2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10c      	bne.n	8009aa2 <osThreadNew+0xf6>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d108      	bne.n	8009aa2 <osThreadNew+0xf6>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <osThreadNew+0xf6>
          mem = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9c:	e001      	b.n	8009aa2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d110      	bne.n	8009aca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ab0:	9202      	str	r2, [sp, #8]
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fe12 	bl	800a6e8 <xTaskCreateStatic>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e013      	b.n	8009af2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d110      	bne.n	8009af2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f107 0314 	add.w	r3, r7, #20
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fe5c 	bl	800a7a0 <xTaskCreate>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d001      	beq.n	8009af2 <osThreadNew+0x146>
          hTask = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3738      	adds	r7, #56	; 0x38
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	2000045c 	.word	0x2000045c

08009b00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b08:	f3ef 8305 	mrs	r3, IPSR
 8009b0c:	613b      	str	r3, [r7, #16]
  return(result);
 8009b0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10f      	bne.n	8009b34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b14:	f3ef 8310 	mrs	r3, PRIMASK
 8009b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <osDelay+0x34>
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <osDelay+0x58>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d109      	bne.n	8009b3c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b28:	f3ef 8311 	mrs	r3, BASEPRI
 8009b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <osDelay+0x3c>
    stat = osErrorISR;
 8009b34:	f06f 0305 	mvn.w	r3, #5
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e007      	b.n	8009b4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 ff7e 	bl	800aa48 <vTaskDelay>
    }
  }

  return (stat);
 8009b4c:	697b      	ldr	r3, [r7, #20]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	2000045c 	.word	0x2000045c

08009b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4a06      	ldr	r2, [pc, #24]	; (8009b84 <vApplicationGetIdleTaskMemory+0x28>)
 8009b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	4a05      	ldr	r2, [pc, #20]	; (8009b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2280      	movs	r2, #128	; 0x80
 8009b78:	601a      	str	r2, [r3, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bc80      	pop	{r7}
 8009b82:	4770      	bx	lr
 8009b84:	20000460 	.word	0x20000460
 8009b88:	2000051c 	.word	0x2000051c

08009b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a06      	ldr	r2, [pc, #24]	; (8009bbc <vApplicationGetTimerTaskMemory+0x30>)
 8009ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009baa:	601a      	str	r2, [r3, #0]
}
 8009bac:	bf00      	nop
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	2000071c 	.word	0x2000071c
 8009bbc:	200007d8 	.word	0x200007d8

08009bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f103 0208 	add.w	r2, r3, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f103 0208 	add.w	r2, r3, #8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f103 0208 	add.w	r2, r3, #8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr

08009bfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bc80      	pop	{r7}
 8009c14:	4770      	bx	lr

08009c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bc80      	pop	{r7}
 8009c5a:	4770      	bx	lr

08009c5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c72:	d103      	bne.n	8009c7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	e00c      	b.n	8009c96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e002      	b.n	8009c8a <vListInsert+0x2e>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d2f6      	bcs.n	8009c84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	601a      	str	r2, [r3, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bc80      	pop	{r7}
 8009cca:	4770      	bx	lr

08009ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6892      	ldr	r2, [r2, #8]
 8009ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6852      	ldr	r2, [r2, #4]
 8009cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d103      	bne.n	8009d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	1e5a      	subs	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr
	...

08009d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueGenericReset+0x2a>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60bb      	str	r3, [r7, #8]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d4a:	f001 fff7 	bl	800bd3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d5a:	fb01 f303 	mul.w	r3, r1, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d80:	fb01 f303 	mul.w	r3, r1, r3
 8009d84:	441a      	add	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d114      	bne.n	8009dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01a      	beq.n	8009dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3310      	adds	r3, #16
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 f91b 	bl	800afe8 <xTaskRemoveFromEventList>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d012      	beq.n	8009dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <xQueueGenericReset+0xcc>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	e009      	b.n	8009dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3310      	adds	r3, #16
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fef6 	bl	8009bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3324      	adds	r3, #36	; 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fef1 	bl	8009bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dde:	f001 ffdd 	bl	800bd9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009de2:	2301      	movs	r3, #1
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08e      	sub	sp, #56	; 0x38
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <xQueueGenericCreateStatic+0x52>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <xQueueGenericCreateStatic+0x56>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <xQueueGenericCreateStatic+0x58>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	623b      	str	r3, [r7, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <xQueueGenericCreateStatic+0x7e>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <xQueueGenericCreateStatic+0x82>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <xQueueGenericCreateStatic+0x84>
 8009e72:	2300      	movs	r3, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	61fb      	str	r3, [r7, #28]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e8e:	2350      	movs	r3, #80	; 0x50
 8009e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b50      	cmp	r3, #80	; 0x50
 8009e96:	d00a      	beq.n	8009eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61bb      	str	r3, [r7, #24]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ec0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f805 	bl	8009ede <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3730      	adds	r7, #48	; 0x30
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	607a      	str	r2, [r7, #4]
 8009eea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e002      	b.n	8009f00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	69b8      	ldr	r0, [r7, #24]
 8009f10:	f7ff ff06 	bl	8009d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08e      	sub	sp, #56	; 0x38
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f32:	2300      	movs	r3, #0
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueGenericSend+0x32>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <xQueueGenericSend+0x40>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <xQueueGenericSend+0x44>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <xQueueGenericSend+0x46>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <xQueueGenericSend+0x60>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d103      	bne.n	8009f92 <xQueueGenericSend+0x6e>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <xQueueGenericSend+0x72>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <xQueueGenericSend+0x74>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	623b      	str	r3, [r7, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fb2:	f001 f9df 	bl	800b374 <xTaskGetSchedulerState>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <xQueueGenericSend+0x9e>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <xQueueGenericSend+0xa2>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <xQueueGenericSend+0xa4>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	61fb      	str	r3, [r7, #28]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fe2:	f001 feab 	bl	800bd3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <xQueueGenericSend+0xd4>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d129      	bne.n	800a04c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ffe:	f000 fa07 	bl	800a410 <prvCopyDataToQueue>
 800a002:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d010      	beq.n	800a02e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	3324      	adds	r3, #36	; 0x24
 800a010:	4618      	mov	r0, r3
 800a012:	f000 ffe9 	bl	800afe8 <xTaskRemoveFromEventList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d013      	beq.n	800a044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a01c:	4b3f      	ldr	r3, [pc, #252]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	e00a      	b.n	800a044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d007      	beq.n	800a044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a034:	4b39      	ldr	r3, [pc, #228]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a044:	f001 feaa 	bl	800bd9c <vPortExitCritical>
				return pdPASS;
 800a048:	2301      	movs	r3, #1
 800a04a:	e063      	b.n	800a114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d103      	bne.n	800a05a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a052:	f001 fea3 	bl	800bd9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a056:	2300      	movs	r3, #0
 800a058:	e05c      	b.n	800a114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d106      	bne.n	800a06e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4618      	mov	r0, r3
 800a066:	f001 f823 	bl	800b0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a06e:	f001 fe95 	bl	800bd9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a072:	f000 fd8d 	bl	800ab90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a076:	f001 fe61 	bl	800bd3c <vPortEnterCritical>
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a080:	b25b      	sxtb	r3, r3
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a086:	d103      	bne.n	800a090 <xQueueGenericSend+0x16c>
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a096:	b25b      	sxtb	r3, r3
 800a098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a09c:	d103      	bne.n	800a0a6 <xQueueGenericSend+0x182>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0a6:	f001 fe79 	bl	800bd9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0aa:	1d3a      	adds	r2, r7, #4
 800a0ac:	f107 0314 	add.w	r3, r7, #20
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 f812 	bl	800b0dc <xTaskCheckForTimeOut>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d124      	bne.n	800a108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c0:	f000 fa9e 	bl	800a600 <prvIsQueueFull>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d018      	beq.n	800a0fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	3310      	adds	r3, #16
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 ff38 	bl	800af48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0da:	f000 fa29 	bl	800a530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0de:	f000 fd65 	bl	800abac <xTaskResumeAll>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f47f af7c 	bne.w	8009fe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <xQueueGenericSend+0x1f8>)
 800a0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	e772      	b.n	8009fe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fe:	f000 fa17 	bl	800a530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a102:	f000 fd53 	bl	800abac <xTaskResumeAll>
 800a106:	e76c      	b.n	8009fe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a10a:	f000 fa11 	bl	800a530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a10e:	f000 fd4d 	bl	800abac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a112:	2300      	movs	r3, #0
		}
	}
}
 800a114:	4618      	mov	r0, r3
 800a116:	3738      	adds	r7, #56	; 0x38
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	e000ed04 	.word	0xe000ed04

0800a120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <xQueueGenericSendFromISR+0x3c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <xQueueGenericSendFromISR+0x40>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e000      	b.n	800a162 <xQueueGenericSendFromISR+0x42>
 800a160:	2300      	movs	r3, #0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	623b      	str	r3, [r7, #32]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d103      	bne.n	800a18a <xQueueGenericSendFromISR+0x6a>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <xQueueGenericSendFromISR+0x6e>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueGenericSendFromISR+0x70>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61fb      	str	r3, [r7, #28]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1aa:	f001 fe89 	bl	800bec0 <vPortValidateInterruptPriority>
	__asm volatile
 800a1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	61ba      	str	r2, [r7, #24]
 800a1c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <xQueueGenericSendFromISR+0xbc>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d12c      	bne.n	800a236 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ec:	f000 f910 	bl	800a410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f8:	d112      	bne.n	800a220 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	3324      	adds	r3, #36	; 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f000 feee 	bl	800afe8 <xTaskRemoveFromEventList>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00e      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e007      	b.n	800a230 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a224:	3301      	adds	r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	b25a      	sxtb	r2, r3
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a230:	2301      	movs	r3, #1
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a234:	e001      	b.n	800a23a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a236:	2300      	movs	r3, #0
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f383 8811 	msr	BASEPRI, r3
}
 800a244:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3738      	adds	r7, #56	; 0x38
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08c      	sub	sp, #48	; 0x30
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xQueueReceive+0x30>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	623b      	str	r3, [r7, #32]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <xQueueReceive+0x3e>
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueReceive+0x42>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueReceive+0x44>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueReceive+0x5e>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61fb      	str	r3, [r7, #28]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ae:	f001 f861 	bl	800b374 <xTaskGetSchedulerState>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <xQueueReceive+0x6e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <xQueueReceive+0x72>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e000      	b.n	800a2c4 <xQueueReceive+0x74>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xQueueReceive+0x8e>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	61bb      	str	r3, [r7, #24]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2de:	f001 fd2d 	bl	800bd3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d01f      	beq.n	800a32e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f2:	f000 f8f7 	bl	800a4e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	1e5a      	subs	r2, r3, #1
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	3310      	adds	r3, #16
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fe6c 	bl	800afe8 <xTaskRemoveFromEventList>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a316:	4b3d      	ldr	r3, [pc, #244]	; (800a40c <xQueueReceive+0x1bc>)
 800a318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a326:	f001 fd39 	bl	800bd9c <vPortExitCritical>
				return pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e069      	b.n	800a402 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a334:	f001 fd32 	bl	800bd9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a338:	2300      	movs	r3, #0
 800a33a:	e062      	b.n	800a402 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a342:	f107 0310 	add.w	r3, r7, #16
 800a346:	4618      	mov	r0, r3
 800a348:	f000 feb2 	bl	800b0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a350:	f001 fd24 	bl	800bd9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a354:	f000 fc1c 	bl	800ab90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a358:	f001 fcf0 	bl	800bd3c <vPortEnterCritical>
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a368:	d103      	bne.n	800a372 <xQueueReceive+0x122>
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a37e:	d103      	bne.n	800a388 <xQueueReceive+0x138>
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a388:	f001 fd08 	bl	800bd9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a38c:	1d3a      	adds	r2, r7, #4
 800a38e:	f107 0310 	add.w	r3, r7, #16
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fea1 	bl	800b0dc <xTaskCheckForTimeOut>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d123      	bne.n	800a3e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a2:	f000 f917 	bl	800a5d4 <prvIsQueueEmpty>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d017      	beq.n	800a3dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	3324      	adds	r3, #36	; 0x24
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fdc7 	bl	800af48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3bc:	f000 f8b8 	bl	800a530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3c0:	f000 fbf4 	bl	800abac <xTaskResumeAll>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d189      	bne.n	800a2de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <xQueueReceive+0x1bc>)
 800a3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	e780      	b.n	800a2de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3de:	f000 f8a7 	bl	800a530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3e2:	f000 fbe3 	bl	800abac <xTaskResumeAll>
 800a3e6:	e77a      	b.n	800a2de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ea:	f000 f8a1 	bl	800a530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ee:	f000 fbdd 	bl	800abac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f4:	f000 f8ee 	bl	800a5d4 <prvIsQueueEmpty>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f43f af6f 	beq.w	800a2de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a402:	4618      	mov	r0, r3
 800a404:	3730      	adds	r7, #48	; 0x30
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d14d      	bne.n	800a4d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 ffb8 	bl	800b3b0 <xTaskPriorityDisinherit>
 800a440:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	605a      	str	r2, [r3, #4]
 800a448:	e043      	b.n	800a4d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d119      	bne.n	800a484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6898      	ldr	r0, [r3, #8]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	461a      	mov	r2, r3
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	f002 fd82 	bl	800cf64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d32b      	bcc.n	800a4d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	609a      	str	r2, [r3, #8]
 800a482:	e026      	b.n	800a4d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	68d8      	ldr	r0, [r3, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	461a      	mov	r2, r3
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	f002 fd68 	bl	800cf64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68da      	ldr	r2, [r3, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	425b      	negs	r3, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d207      	bcs.n	800a4c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b8:	425b      	negs	r3, r3
 800a4ba:	441a      	add	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d105      	bne.n	800a4d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a4da:	697b      	ldr	r3, [r7, #20]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d018      	beq.n	800a528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fe:	441a      	add	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d303      	bcc.n	800a518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68d9      	ldr	r1, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a520:	461a      	mov	r2, r3
 800a522:	6838      	ldr	r0, [r7, #0]
 800a524:	f002 fd1e 	bl	800cf64 <memcpy>
	}
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a538:	f001 fc00 	bl	800bd3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a544:	e011      	b.n	800a56a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d012      	beq.n	800a574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fd48 	bl	800afe8 <xTaskRemoveFromEventList>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a55e:	f000 fe1f 	bl	800b1a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	3b01      	subs	r3, #1
 800a566:	b2db      	uxtb	r3, r3
 800a568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	dce9      	bgt.n	800a546 <prvUnlockQueue+0x16>
 800a572:	e000      	b.n	800a576 <prvUnlockQueue+0x46>
					break;
 800a574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	22ff      	movs	r2, #255	; 0xff
 800a57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a57e:	f001 fc0d 	bl	800bd9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a582:	f001 fbdb 	bl	800bd3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a58c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a58e:	e011      	b.n	800a5b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d012      	beq.n	800a5be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3310      	adds	r3, #16
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fd23 	bl	800afe8 <xTaskRemoveFromEventList>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5a8:	f000 fdfa 	bl	800b1a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dce9      	bgt.n	800a590 <prvUnlockQueue+0x60>
 800a5bc:	e000      	b.n	800a5c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a5be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	22ff      	movs	r2, #255	; 0xff
 800a5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a5c8:	f001 fbe8 	bl	800bd9c <vPortExitCritical>
}
 800a5cc:	bf00      	nop
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5dc:	f001 fbae 	bl	800bd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e001      	b.n	800a5f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5f2:	f001 fbd3 	bl	800bd9c <vPortExitCritical>

	return xReturn;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a608:	f001 fb98 	bl	800bd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a614:	429a      	cmp	r2, r3
 800a616:	d102      	bne.n	800a61e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e001      	b.n	800a622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a622:	f001 fbbb 	bl	800bd9c <vPortExitCritical>

	return xReturn;
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	e014      	b.n	800a66a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a640:	4a0e      	ldr	r2, [pc, #56]	; (800a67c <vQueueAddToRegistry+0x4c>)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10b      	bne.n	800a664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a64c:	490b      	ldr	r1, [pc, #44]	; (800a67c <vQueueAddToRegistry+0x4c>)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a656:	4a09      	ldr	r2, [pc, #36]	; (800a67c <vQueueAddToRegistry+0x4c>)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	4413      	add	r3, r2
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a662:	e006      	b.n	800a672 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3301      	adds	r3, #1
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b07      	cmp	r3, #7
 800a66e:	d9e7      	bls.n	800a640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	bc80      	pop	{r7}
 800a67a:	4770      	bx	lr
 800a67c:	20002500 	.word	0x20002500

0800a680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a690:	f001 fb54 	bl	800bd3c <vPortEnterCritical>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a0:	d103      	bne.n	800a6aa <vQueueWaitForMessageRestricted+0x2a>
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b6:	d103      	bne.n	800a6c0 <vQueueWaitForMessageRestricted+0x40>
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c0:	f001 fb6c 	bl	800bd9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3324      	adds	r3, #36	; 0x24
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fc5b 	bl	800af90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6da:	6978      	ldr	r0, [r7, #20]
 800a6dc:	f7ff ff28 	bl	800a530 <prvUnlockQueue>
	}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08e      	sub	sp, #56	; 0x38
 800a6ec:	af04      	add	r7, sp, #16
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	623b      	str	r3, [r7, #32]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <xTaskCreateStatic+0x46>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	61fb      	str	r3, [r7, #28]
}
 800a72a:	bf00      	nop
 800a72c:	e7fe      	b.n	800a72c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a72e:	23bc      	movs	r3, #188	; 0xbc
 800a730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2bbc      	cmp	r3, #188	; 0xbc
 800a736:	d00a      	beq.n	800a74e <xTaskCreateStatic+0x66>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	61bb      	str	r3, [r7, #24]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01e      	beq.n	800a792 <xTaskCreateStatic+0xaa>
 800a754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a756:	2b00      	cmp	r3, #0
 800a758:	d01b      	beq.n	800a792 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a762:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	2202      	movs	r2, #2
 800a768:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a76c:	2300      	movs	r3, #0
 800a76e:	9303      	str	r3, [sp, #12]
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	f107 0314 	add.w	r3, r7, #20
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f851 	bl	800a82c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a78a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a78c:	f000 f8ec 	bl	800a968 <prvAddNewTaskToReadyList>
 800a790:	e001      	b.n	800a796 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a796:	697b      	ldr	r3, [r7, #20]
	}
 800a798:	4618      	mov	r0, r3
 800a79a:	3728      	adds	r7, #40	; 0x28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08c      	sub	sp, #48	; 0x30
 800a7a4:	af04      	add	r7, sp, #16
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 fbc1 	bl	800bf3c <pvPortMalloc>
 800a7ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00e      	beq.n	800a7e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a7c2:	20bc      	movs	r0, #188	; 0xbc
 800a7c4:	f001 fbba 	bl	800bf3c <pvPortMalloc>
 800a7c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30
 800a7d6:	e005      	b.n	800a7e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	f001 fc73 	bl	800c0c4 <vPortFree>
 800a7de:	e001      	b.n	800a7e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d017      	beq.n	800a81a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7f2:	88fa      	ldrh	r2, [r7, #6]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9303      	str	r3, [sp, #12]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	9302      	str	r3, [sp, #8]
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68b9      	ldr	r1, [r7, #8]
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f80f 	bl	800a82c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a80e:	69f8      	ldr	r0, [r7, #28]
 800a810:	f000 f8aa 	bl	800a968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a814:	2301      	movs	r3, #1
 800a816:	61bb      	str	r3, [r7, #24]
 800a818:	e002      	b.n	800a820 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a81e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a820:	69bb      	ldr	r3, [r7, #24]
	}
 800a822:	4618      	mov	r0, r3
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	461a      	mov	r2, r3
 800a844:	21a5      	movs	r1, #165	; 0xa5
 800a846:	f002 fbb5 	bl	800cfb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a854:	3b01      	subs	r3, #1
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f023 0307 	bic.w	r3, r3, #7
 800a862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	617b      	str	r3, [r7, #20]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a884:	2300      	movs	r3, #0
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e012      	b.n	800a8b0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	4413      	add	r3, r2
 800a890:	7819      	ldrb	r1, [r3, #0]
 800a892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	4413      	add	r3, r2
 800a898:	3334      	adds	r3, #52	; 0x34
 800a89a:	460a      	mov	r2, r1
 800a89c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d006      	beq.n	800a8b8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	d9e9      	bls.n	800a88a <prvInitialiseNewTask+0x5e>
 800a8b6:	e000      	b.n	800a8ba <prvInitialiseNewTask+0x8e>
		{
			break;
 800a8b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	2b37      	cmp	r3, #55	; 0x37
 800a8c6:	d901      	bls.n	800a8cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8c8:	2337      	movs	r3, #55	; 0x37
 800a8ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	2200      	movs	r2, #0
 800a8dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff f98b 	bl	8009bfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	3318      	adds	r3, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff f986 	bl	8009bfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a906:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	2200      	movs	r2, #0
 800a914:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	3354      	adds	r3, #84	; 0x54
 800a91c:	2260      	movs	r2, #96	; 0x60
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f002 fb47 	bl	800cfb4 <memset>
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	4a0c      	ldr	r2, [pc, #48]	; (800a95c <prvInitialiseNewTask+0x130>)
 800a92a:	659a      	str	r2, [r3, #88]	; 0x58
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <prvInitialiseNewTask+0x134>)
 800a930:	65da      	str	r2, [r3, #92]	; 0x5c
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	4a0b      	ldr	r2, [pc, #44]	; (800a964 <prvInitialiseNewTask+0x138>)
 800a936:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	69b8      	ldr	r0, [r7, #24]
 800a93e:	f001 f90b 	bl	800bb58 <pxPortInitialiseStack>
 800a942:	4602      	mov	r2, r0
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a952:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a954:	bf00      	nop
 800a956:	3720      	adds	r7, #32
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	0800d3fc 	.word	0x0800d3fc
 800a960:	0800d41c 	.word	0x0800d41c
 800a964:	0800d3dc 	.word	0x0800d3dc

0800a968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a970:	f001 f9e4 	bl	800bd3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a974:	4b2d      	ldr	r3, [pc, #180]	; (800aa2c <prvAddNewTaskToReadyList+0xc4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	4a2c      	ldr	r2, [pc, #176]	; (800aa2c <prvAddNewTaskToReadyList+0xc4>)
 800a97c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a97e:	4b2c      	ldr	r3, [pc, #176]	; (800aa30 <prvAddNewTaskToReadyList+0xc8>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d109      	bne.n	800a99a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a986:	4a2a      	ldr	r2, [pc, #168]	; (800aa30 <prvAddNewTaskToReadyList+0xc8>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a98c:	4b27      	ldr	r3, [pc, #156]	; (800aa2c <prvAddNewTaskToReadyList+0xc4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d110      	bne.n	800a9b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a994:	f000 fc28 	bl	800b1e8 <prvInitialiseTaskLists>
 800a998:	e00d      	b.n	800a9b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a99a:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <prvAddNewTaskToReadyList+0xcc>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d109      	bne.n	800a9b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9a2:	4b23      	ldr	r3, [pc, #140]	; (800aa30 <prvAddNewTaskToReadyList+0xc8>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d802      	bhi.n	800a9b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9b0:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <prvAddNewTaskToReadyList+0xc8>)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9b6:	4b20      	ldr	r3, [pc, #128]	; (800aa38 <prvAddNewTaskToReadyList+0xd0>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	4a1e      	ldr	r2, [pc, #120]	; (800aa38 <prvAddNewTaskToReadyList+0xd0>)
 800a9be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9c0:	4b1d      	ldr	r3, [pc, #116]	; (800aa38 <prvAddNewTaskToReadyList+0xd0>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9cc:	4b1b      	ldr	r3, [pc, #108]	; (800aa3c <prvAddNewTaskToReadyList+0xd4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d903      	bls.n	800a9dc <prvAddNewTaskToReadyList+0x74>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	4a18      	ldr	r2, [pc, #96]	; (800aa3c <prvAddNewTaskToReadyList+0xd4>)
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4a15      	ldr	r2, [pc, #84]	; (800aa40 <prvAddNewTaskToReadyList+0xd8>)
 800a9ea:	441a      	add	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f7ff f90f 	bl	8009c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9f8:	f001 f9d0 	bl	800bd9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9fc:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <prvAddNewTaskToReadyList+0xcc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00e      	beq.n	800aa22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <prvAddNewTaskToReadyList+0xc8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d207      	bcs.n	800aa22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa12:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <prvAddNewTaskToReadyList+0xdc>)
 800aa14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200010ac 	.word	0x200010ac
 800aa30:	20000bd8 	.word	0x20000bd8
 800aa34:	200010b8 	.word	0x200010b8
 800aa38:	200010c8 	.word	0x200010c8
 800aa3c:	200010b4 	.word	0x200010b4
 800aa40:	20000bdc 	.word	0x20000bdc
 800aa44:	e000ed04 	.word	0xe000ed04

0800aa48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d017      	beq.n	800aa8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa5a:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <vTaskDelay+0x60>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <vTaskDelay+0x30>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60bb      	str	r3, [r7, #8]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa78:	f000 f88a 	bl	800ab90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fd04 	bl	800b48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa84:	f000 f892 	bl	800abac <xTaskResumeAll>
 800aa88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d107      	bne.n	800aaa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aa90:	4b06      	ldr	r3, [pc, #24]	; (800aaac <vTaskDelay+0x64>)
 800aa92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	200010d4 	.word	0x200010d4
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	; 0x28
 800aab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aabe:	463a      	mov	r2, r7
 800aac0:	1d39      	adds	r1, r7, #4
 800aac2:	f107 0308 	add.w	r3, r7, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff f848 	bl	8009b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	9202      	str	r2, [sp, #8]
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	2300      	movs	r3, #0
 800aadc:	460a      	mov	r2, r1
 800aade:	4924      	ldr	r1, [pc, #144]	; (800ab70 <vTaskStartScheduler+0xc0>)
 800aae0:	4824      	ldr	r0, [pc, #144]	; (800ab74 <vTaskStartScheduler+0xc4>)
 800aae2:	f7ff fe01 	bl	800a6e8 <xTaskCreateStatic>
 800aae6:	4603      	mov	r3, r0
 800aae8:	4a23      	ldr	r2, [pc, #140]	; (800ab78 <vTaskStartScheduler+0xc8>)
 800aaea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aaec:	4b22      	ldr	r3, [pc, #136]	; (800ab78 <vTaskStartScheduler+0xc8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e001      	b.n	800aafe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d102      	bne.n	800ab0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab04:	f000 fd16 	bl	800b534 <xTimerCreateTimerTask>
 800ab08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d11b      	bne.n	800ab48 <vTaskStartScheduler+0x98>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	613b      	str	r3, [r7, #16]
}
 800ab22:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab24:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <vTaskStartScheduler+0xcc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3354      	adds	r3, #84	; 0x54
 800ab2a:	4a15      	ldr	r2, [pc, #84]	; (800ab80 <vTaskStartScheduler+0xd0>)
 800ab2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab2e:	4b15      	ldr	r3, [pc, #84]	; (800ab84 <vTaskStartScheduler+0xd4>)
 800ab30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <vTaskStartScheduler+0xd8>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <vTaskStartScheduler+0xdc>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab42:	f001 f889 	bl	800bc58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab46:	e00e      	b.n	800ab66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab4e:	d10a      	bne.n	800ab66 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <vTaskStartScheduler+0xb4>
}
 800ab66:	bf00      	nop
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800d324 	.word	0x0800d324
 800ab74:	0800b1b9 	.word	0x0800b1b9
 800ab78:	200010d0 	.word	0x200010d0
 800ab7c:	20000bd8 	.word	0x20000bd8
 800ab80:	20000198 	.word	0x20000198
 800ab84:	200010cc 	.word	0x200010cc
 800ab88:	200010b8 	.word	0x200010b8
 800ab8c:	200010b0 	.word	0x200010b0

0800ab90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <vTaskSuspendAll+0x18>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	4a03      	ldr	r2, [pc, #12]	; (800aba8 <vTaskSuspendAll+0x18>)
 800ab9c:	6013      	str	r3, [r2, #0]
}
 800ab9e:	bf00      	nop
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bc80      	pop	{r7}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	200010d4 	.word	0x200010d4

0800abac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abba:	4b42      	ldr	r3, [pc, #264]	; (800acc4 <xTaskResumeAll+0x118>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xTaskResumeAll+0x2c>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	603b      	str	r3, [r7, #0]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abd8:	f001 f8b0 	bl	800bd3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abdc:	4b39      	ldr	r3, [pc, #228]	; (800acc4 <xTaskResumeAll+0x118>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	4a38      	ldr	r2, [pc, #224]	; (800acc4 <xTaskResumeAll+0x118>)
 800abe4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe6:	4b37      	ldr	r3, [pc, #220]	; (800acc4 <xTaskResumeAll+0x118>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d162      	bne.n	800acb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abee:	4b36      	ldr	r3, [pc, #216]	; (800acc8 <xTaskResumeAll+0x11c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d05e      	beq.n	800acb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abf6:	e02f      	b.n	800ac58 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800abf8:	4b34      	ldr	r3, [pc, #208]	; (800accc <xTaskResumeAll+0x120>)
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3318      	adds	r3, #24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff f861 	bl	8009ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff f85c 	bl	8009ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac18:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <xTaskResumeAll+0x124>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d903      	bls.n	800ac28 <xTaskResumeAll+0x7c>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	4a2a      	ldr	r2, [pc, #168]	; (800acd0 <xTaskResumeAll+0x124>)
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4a27      	ldr	r2, [pc, #156]	; (800acd4 <xTaskResumeAll+0x128>)
 800ac36:	441a      	add	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4610      	mov	r0, r2
 800ac40:	f7fe ffe9 	bl	8009c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4b23      	ldr	r3, [pc, #140]	; (800acd8 <xTaskResumeAll+0x12c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d302      	bcc.n	800ac58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac52:	4b22      	ldr	r3, [pc, #136]	; (800acdc <xTaskResumeAll+0x130>)
 800ac54:	2201      	movs	r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac58:	4b1c      	ldr	r3, [pc, #112]	; (800accc <xTaskResumeAll+0x120>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1cb      	bne.n	800abf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac66:	f000 fb61 	bl	800b32c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac6a:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <xTaskResumeAll+0x134>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d010      	beq.n	800ac98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac76:	f000 f845 	bl	800ad04 <xTaskIncrementTick>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac80:	4b16      	ldr	r3, [pc, #88]	; (800acdc <xTaskResumeAll+0x130>)
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f1      	bne.n	800ac76 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ac92:	4b13      	ldr	r3, [pc, #76]	; (800ace0 <xTaskResumeAll+0x134>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <xTaskResumeAll+0x130>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d009      	beq.n	800acb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aca0:	2301      	movs	r3, #1
 800aca2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <xTaskResumeAll+0x138>)
 800aca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acb4:	f001 f872 	bl	800bd9c <vPortExitCritical>

	return xAlreadyYielded;
 800acb8:	68bb      	ldr	r3, [r7, #8]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	200010d4 	.word	0x200010d4
 800acc8:	200010ac 	.word	0x200010ac
 800accc:	2000106c 	.word	0x2000106c
 800acd0:	200010b4 	.word	0x200010b4
 800acd4:	20000bdc 	.word	0x20000bdc
 800acd8:	20000bd8 	.word	0x20000bd8
 800acdc:	200010c0 	.word	0x200010c0
 800ace0:	200010bc 	.word	0x200010bc
 800ace4:	e000ed04 	.word	0xe000ed04

0800ace8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800acee:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <xTaskGetTickCount+0x18>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800acf4:	687b      	ldr	r3, [r7, #4]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bc80      	pop	{r7}
 800acfe:	4770      	bx	lr
 800ad00:	200010b0 	.word	0x200010b0

0800ad04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad0e:	4b51      	ldr	r3, [pc, #324]	; (800ae54 <xTaskIncrementTick+0x150>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 808e 	bne.w	800ae34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad18:	4b4f      	ldr	r3, [pc, #316]	; (800ae58 <xTaskIncrementTick+0x154>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad20:	4a4d      	ldr	r2, [pc, #308]	; (800ae58 <xTaskIncrementTick+0x154>)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d120      	bne.n	800ad6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad2c:	4b4b      	ldr	r3, [pc, #300]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <xTaskIncrementTick+0x48>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	603b      	str	r3, [r7, #0]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xTaskIncrementTick+0x46>
 800ad4c:	4b43      	ldr	r3, [pc, #268]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	4b43      	ldr	r3, [pc, #268]	; (800ae60 <xTaskIncrementTick+0x15c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a41      	ldr	r2, [pc, #260]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	4a41      	ldr	r2, [pc, #260]	; (800ae60 <xTaskIncrementTick+0x15c>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	4b40      	ldr	r3, [pc, #256]	; (800ae64 <xTaskIncrementTick+0x160>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a3f      	ldr	r2, [pc, #252]	; (800ae64 <xTaskIncrementTick+0x160>)
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	f000 fadf 	bl	800b32c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad6e:	4b3e      	ldr	r3, [pc, #248]	; (800ae68 <xTaskIncrementTick+0x164>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d34e      	bcc.n	800ae16 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad78:	4b38      	ldr	r3, [pc, #224]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <xTaskIncrementTick+0x82>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <xTaskIncrementTick+0x84>
 800ad86:	2300      	movs	r3, #0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad8c:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <xTaskIncrementTick+0x164>)
 800ad8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad92:	601a      	str	r2, [r3, #0]
					break;
 800ad94:	e03f      	b.n	800ae16 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ad96:	4b31      	ldr	r3, [pc, #196]	; (800ae5c <xTaskIncrementTick+0x158>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d203      	bcs.n	800adb6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adae:	4a2e      	ldr	r2, [pc, #184]	; (800ae68 <xTaskIncrementTick+0x164>)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6013      	str	r3, [r2, #0]
						break;
 800adb4:	e02f      	b.n	800ae16 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	3304      	adds	r3, #4
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe ff86 	bl	8009ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d004      	beq.n	800add2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	3318      	adds	r3, #24
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe ff7d 	bl	8009ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add6:	4b25      	ldr	r3, [pc, #148]	; (800ae6c <xTaskIncrementTick+0x168>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d903      	bls.n	800ade6 <xTaskIncrementTick+0xe2>
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	4a22      	ldr	r2, [pc, #136]	; (800ae6c <xTaskIncrementTick+0x168>)
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <xTaskIncrementTick+0x16c>)
 800adf4:	441a      	add	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7fe ff0a 	bl	8009c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	4b1b      	ldr	r3, [pc, #108]	; (800ae74 <xTaskIncrementTick+0x170>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d3b3      	bcc.n	800ad78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae14:	e7b0      	b.n	800ad78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae16:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <xTaskIncrementTick+0x170>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	4914      	ldr	r1, [pc, #80]	; (800ae70 <xTaskIncrementTick+0x16c>)
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d907      	bls.n	800ae3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	e004      	b.n	800ae3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae34:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <xTaskIncrementTick+0x174>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a0f      	ldr	r2, [pc, #60]	; (800ae78 <xTaskIncrementTick+0x174>)
 800ae3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <xTaskIncrementTick+0x178>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ae46:	2301      	movs	r3, #1
 800ae48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae4a:	697b      	ldr	r3, [r7, #20]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	200010d4 	.word	0x200010d4
 800ae58:	200010b0 	.word	0x200010b0
 800ae5c:	20001064 	.word	0x20001064
 800ae60:	20001068 	.word	0x20001068
 800ae64:	200010c4 	.word	0x200010c4
 800ae68:	200010cc 	.word	0x200010cc
 800ae6c:	200010b4 	.word	0x200010b4
 800ae70:	20000bdc 	.word	0x20000bdc
 800ae74:	20000bd8 	.word	0x20000bd8
 800ae78:	200010bc 	.word	0x200010bc
 800ae7c:	200010c0 	.word	0x200010c0

0800ae80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae86:	4b2a      	ldr	r3, [pc, #168]	; (800af30 <vTaskSwitchContext+0xb0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae8e:	4b29      	ldr	r3, [pc, #164]	; (800af34 <vTaskSwitchContext+0xb4>)
 800ae90:	2201      	movs	r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae94:	e046      	b.n	800af24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ae96:	4b27      	ldr	r3, [pc, #156]	; (800af34 <vTaskSwitchContext+0xb4>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ae9c:	4b26      	ldr	r3, [pc, #152]	; (800af38 <vTaskSwitchContext+0xb8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e010      	b.n	800aec6 <vTaskSwitchContext+0x46>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <vTaskSwitchContext+0x40>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	607b      	str	r3, [r7, #4]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vTaskSwitchContext+0x3e>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	491d      	ldr	r1, [pc, #116]	; (800af3c <vTaskSwitchContext+0xbc>)
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0e4      	beq.n	800aea4 <vTaskSwitchContext+0x24>
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4a15      	ldr	r2, [pc, #84]	; (800af3c <vTaskSwitchContext+0xbc>)
 800aee6:	4413      	add	r3, r2
 800aee8:	60bb      	str	r3, [r7, #8]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	605a      	str	r2, [r3, #4]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	3308      	adds	r3, #8
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d104      	bne.n	800af0a <vTaskSwitchContext+0x8a>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	605a      	str	r2, [r3, #4]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	4a0b      	ldr	r2, [pc, #44]	; (800af40 <vTaskSwitchContext+0xc0>)
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	4a08      	ldr	r2, [pc, #32]	; (800af38 <vTaskSwitchContext+0xb8>)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <vTaskSwitchContext+0xc0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3354      	adds	r3, #84	; 0x54
 800af20:	4a08      	ldr	r2, [pc, #32]	; (800af44 <vTaskSwitchContext+0xc4>)
 800af22:	6013      	str	r3, [r2, #0]
}
 800af24:	bf00      	nop
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	bc80      	pop	{r7}
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	200010d4 	.word	0x200010d4
 800af34:	200010c0 	.word	0x200010c0
 800af38:	200010b4 	.word	0x200010b4
 800af3c:	20000bdc 	.word	0x20000bdc
 800af40:	20000bd8 	.word	0x20000bd8
 800af44:	20000198 	.word	0x20000198

0800af48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af6e:	4b07      	ldr	r3, [pc, #28]	; (800af8c <vTaskPlaceOnEventList+0x44>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3318      	adds	r3, #24
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7fe fe70 	bl	8009c5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af7c:	2101      	movs	r1, #1
 800af7e:	6838      	ldr	r0, [r7, #0]
 800af80:	f000 fa84 	bl	800b48c <prvAddCurrentTaskToDelayedList>
}
 800af84:	bf00      	nop
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20000bd8 	.word	0x20000bd8

0800af90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	617b      	str	r3, [r7, #20]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afb8:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <vTaskPlaceOnEventListRestricted+0x54>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3318      	adds	r3, #24
 800afbe:	4619      	mov	r1, r3
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7fe fe28 	bl	8009c16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afd2:	6879      	ldr	r1, [r7, #4]
 800afd4:	68b8      	ldr	r0, [r7, #8]
 800afd6:	f000 fa59 	bl	800b48c <prvAddCurrentTaskToDelayedList>
	}
 800afda:	bf00      	nop
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000bd8 	.word	0x20000bd8

0800afe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60fb      	str	r3, [r7, #12]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	3318      	adds	r3, #24
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe fe57 	bl	8009ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b01e:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <xTaskRemoveFromEventList+0xb0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d11d      	bne.n	800b062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3304      	adds	r3, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fe4e 	bl	8009ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b034:	4b19      	ldr	r3, [pc, #100]	; (800b09c <xTaskRemoveFromEventList+0xb4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d903      	bls.n	800b044 <xTaskRemoveFromEventList+0x5c>
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	4a16      	ldr	r2, [pc, #88]	; (800b09c <xTaskRemoveFromEventList+0xb4>)
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4a13      	ldr	r2, [pc, #76]	; (800b0a0 <xTaskRemoveFromEventList+0xb8>)
 800b052:	441a      	add	r2, r3
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	3304      	adds	r3, #4
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f7fe fddb 	bl	8009c16 <vListInsertEnd>
 800b060:	e005      	b.n	800b06e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	3318      	adds	r3, #24
 800b066:	4619      	mov	r1, r3
 800b068:	480e      	ldr	r0, [pc, #56]	; (800b0a4 <xTaskRemoveFromEventList+0xbc>)
 800b06a:	f7fe fdd4 	bl	8009c16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	4b0d      	ldr	r3, [pc, #52]	; (800b0a8 <xTaskRemoveFromEventList+0xc0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d905      	bls.n	800b088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <xTaskRemoveFromEventList+0xc4>)
 800b082:	2201      	movs	r2, #1
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	e001      	b.n	800b08c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b088:	2300      	movs	r3, #0
 800b08a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b08c:	697b      	ldr	r3, [r7, #20]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	200010d4 	.word	0x200010d4
 800b09c:	200010b4 	.word	0x200010b4
 800b0a0:	20000bdc 	.word	0x20000bdc
 800b0a4:	2000106c 	.word	0x2000106c
 800b0a8:	20000bd8 	.word	0x20000bd8
 800b0ac:	200010c0 	.word	0x200010c0

0800b0b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0b8:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <vTaskInternalSetTimeOutState+0x24>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0c0:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <vTaskInternalSetTimeOutState+0x28>)
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	605a      	str	r2, [r3, #4]
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bc80      	pop	{r7}
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	200010c4 	.word	0x200010c4
 800b0d8:	200010b0 	.word	0x200010b0

0800b0dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	613b      	str	r3, [r7, #16]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	60fb      	str	r3, [r7, #12]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b11e:	f000 fe0d 	bl	800bd3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b122:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <xTaskCheckForTimeOut+0xbc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b13a:	d102      	bne.n	800b142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61fb      	str	r3, [r7, #28]
 800b140:	e023      	b.n	800b18a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	4b15      	ldr	r3, [pc, #84]	; (800b19c <xTaskCheckForTimeOut+0xc0>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d007      	beq.n	800b15e <xTaskCheckForTimeOut+0x82>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	429a      	cmp	r2, r3
 800b156:	d302      	bcc.n	800b15e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	e015      	b.n	800b18a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	429a      	cmp	r2, r3
 800b166:	d20b      	bcs.n	800b180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff ff9b 	bl	800b0b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61fb      	str	r3, [r7, #28]
 800b17e:	e004      	b.n	800b18a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b186:	2301      	movs	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b18a:	f000 fe07 	bl	800bd9c <vPortExitCritical>

	return xReturn;
 800b18e:	69fb      	ldr	r3, [r7, #28]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	200010b0 	.word	0x200010b0
 800b19c:	200010c4 	.word	0x200010c4

0800b1a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1a4:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <vTaskMissedYield+0x14>)
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	200010c0 	.word	0x200010c0

0800b1b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1c0:	f000 f852 	bl	800b268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1c4:	4b06      	ldr	r3, [pc, #24]	; (800b1e0 <prvIdleTask+0x28>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d9f9      	bls.n	800b1c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1cc:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <prvIdleTask+0x2c>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1dc:	e7f0      	b.n	800b1c0 <prvIdleTask+0x8>
 800b1de:	bf00      	nop
 800b1e0:	20000bdc 	.word	0x20000bdc
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]
 800b1f2:	e00c      	b.n	800b20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4a12      	ldr	r2, [pc, #72]	; (800b248 <prvInitialiseTaskLists+0x60>)
 800b200:	4413      	add	r3, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fcdc 	bl	8009bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3301      	adds	r3, #1
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b37      	cmp	r3, #55	; 0x37
 800b212:	d9ef      	bls.n	800b1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b214:	480d      	ldr	r0, [pc, #52]	; (800b24c <prvInitialiseTaskLists+0x64>)
 800b216:	f7fe fcd3 	bl	8009bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b21a:	480d      	ldr	r0, [pc, #52]	; (800b250 <prvInitialiseTaskLists+0x68>)
 800b21c:	f7fe fcd0 	bl	8009bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b220:	480c      	ldr	r0, [pc, #48]	; (800b254 <prvInitialiseTaskLists+0x6c>)
 800b222:	f7fe fccd 	bl	8009bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b226:	480c      	ldr	r0, [pc, #48]	; (800b258 <prvInitialiseTaskLists+0x70>)
 800b228:	f7fe fcca 	bl	8009bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b22c:	480b      	ldr	r0, [pc, #44]	; (800b25c <prvInitialiseTaskLists+0x74>)
 800b22e:	f7fe fcc7 	bl	8009bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b232:	4b0b      	ldr	r3, [pc, #44]	; (800b260 <prvInitialiseTaskLists+0x78>)
 800b234:	4a05      	ldr	r2, [pc, #20]	; (800b24c <prvInitialiseTaskLists+0x64>)
 800b236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <prvInitialiseTaskLists+0x7c>)
 800b23a:	4a05      	ldr	r2, [pc, #20]	; (800b250 <prvInitialiseTaskLists+0x68>)
 800b23c:	601a      	str	r2, [r3, #0]
}
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	20000bdc 	.word	0x20000bdc
 800b24c:	2000103c 	.word	0x2000103c
 800b250:	20001050 	.word	0x20001050
 800b254:	2000106c 	.word	0x2000106c
 800b258:	20001080 	.word	0x20001080
 800b25c:	20001098 	.word	0x20001098
 800b260:	20001064 	.word	0x20001064
 800b264:	20001068 	.word	0x20001068

0800b268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b26e:	e019      	b.n	800b2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b270:	f000 fd64 	bl	800bd3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b274:	4b10      	ldr	r3, [pc, #64]	; (800b2b8 <prvCheckTasksWaitingTermination+0x50>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fd23 	bl	8009ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b286:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <prvCheckTasksWaitingTermination+0x54>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	4a0b      	ldr	r2, [pc, #44]	; (800b2bc <prvCheckTasksWaitingTermination+0x54>)
 800b28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3b01      	subs	r3, #1
 800b296:	4a0a      	ldr	r2, [pc, #40]	; (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b29a:	f000 fd7f 	bl	800bd9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f810 	bl	800b2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2a4:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e1      	bne.n	800b270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20001080 	.word	0x20001080
 800b2bc:	200010ac 	.word	0x200010ac
 800b2c0:	20001094 	.word	0x20001094

0800b2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3354      	adds	r3, #84	; 0x54
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 ff2b 	bl	800d12c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d108      	bne.n	800b2f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 feed 	bl	800c0c4 <vPortFree>
				vPortFree( pxTCB );
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 feea 	bl	800c0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2f0:	e018      	b.n	800b324 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d103      	bne.n	800b304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fee1 	bl	800c0c4 <vPortFree>
	}
 800b302:	e00f      	b.n	800b324 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d00a      	beq.n	800b324 <prvDeleteTCB+0x60>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	60fb      	str	r3, [r7, #12]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <prvDeleteTCB+0x5e>
	}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b332:	4b0e      	ldr	r3, [pc, #56]	; (800b36c <prvResetNextTaskUnblockTime+0x40>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <prvResetNextTaskUnblockTime+0x14>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <prvResetNextTaskUnblockTime+0x16>
 800b340:	2300      	movs	r3, #0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d004      	beq.n	800b350 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b346:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <prvResetNextTaskUnblockTime+0x44>)
 800b348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b34c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b34e:	e008      	b.n	800b362 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b350:	4b06      	ldr	r3, [pc, #24]	; (800b36c <prvResetNextTaskUnblockTime+0x40>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4a04      	ldr	r2, [pc, #16]	; (800b370 <prvResetNextTaskUnblockTime+0x44>)
 800b360:	6013      	str	r3, [r2, #0]
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	bc80      	pop	{r7}
 800b36a:	4770      	bx	lr
 800b36c:	20001064 	.word	0x20001064
 800b370:	200010cc 	.word	0x200010cc

0800b374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <xTaskGetSchedulerState+0x34>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b382:	2301      	movs	r3, #1
 800b384:	607b      	str	r3, [r7, #4]
 800b386:	e008      	b.n	800b39a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <xTaskGetSchedulerState+0x38>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b390:	2302      	movs	r3, #2
 800b392:	607b      	str	r3, [r7, #4]
 800b394:	e001      	b.n	800b39a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b396:	2300      	movs	r3, #0
 800b398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b39a:	687b      	ldr	r3, [r7, #4]
	}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bc80      	pop	{r7}
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	200010b8 	.word	0x200010b8
 800b3ac:	200010d4 	.word	0x200010d4

0800b3b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d056      	beq.n	800b474 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3c6:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <xTaskPriorityDisinherit+0xd0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d00a      	beq.n	800b3e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	60bb      	str	r3, [r7, #8]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	1e5a      	subs	r2, r3, #1
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b416:	429a      	cmp	r2, r3
 800b418:	d02c      	beq.n	800b474 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d128      	bne.n	800b474 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3304      	adds	r3, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fc50 	bl	8009ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <xTaskPriorityDisinherit+0xd4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d903      	bls.n	800b454 <xTaskPriorityDisinherit+0xa4>
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <xTaskPriorityDisinherit+0xd4>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <xTaskPriorityDisinherit+0xd8>)
 800b462:	441a      	add	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fe fbd3 	bl	8009c16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b474:	697b      	ldr	r3, [r7, #20]
	}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000bd8 	.word	0x20000bd8
 800b484:	200010b4 	.word	0x200010b4
 800b488:	20000bdc 	.word	0x20000bdc

0800b48c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b496:	4b21      	ldr	r3, [pc, #132]	; (800b51c <prvAddCurrentTaskToDelayedList+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b49c:	4b20      	ldr	r3, [pc, #128]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fc12 	bl	8009ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ae:	d10a      	bne.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4819      	ldr	r0, [pc, #100]	; (800b524 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4c0:	f7fe fba9 	bl	8009c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4c4:	e026      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4ce:	4b14      	ldr	r3, [pc, #80]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d209      	bcs.n	800b4f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f7fe fbb6 	bl	8009c5c <vListInsert>
}
 800b4f0:	e010      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe fbac 	bl	8009c5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d202      	bcs.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b50e:	4a08      	ldr	r2, [pc, #32]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6013      	str	r3, [r2, #0]
}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200010b0 	.word	0x200010b0
 800b520:	20000bd8 	.word	0x20000bd8
 800b524:	20001098 	.word	0x20001098
 800b528:	20001068 	.word	0x20001068
 800b52c:	20001064 	.word	0x20001064
 800b530:	200010cc 	.word	0x200010cc

0800b534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b53e:	f000 facb 	bl	800bad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b542:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <xTimerCreateTimerTask+0x80>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d021      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b552:	1d3a      	adds	r2, r7, #4
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fb15 	bl	8009b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	9202      	str	r2, [sp, #8]
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	2302      	movs	r3, #2
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	2300      	movs	r3, #0
 800b572:	460a      	mov	r2, r1
 800b574:	4910      	ldr	r1, [pc, #64]	; (800b5b8 <xTimerCreateTimerTask+0x84>)
 800b576:	4811      	ldr	r0, [pc, #68]	; (800b5bc <xTimerCreateTimerTask+0x88>)
 800b578:	f7ff f8b6 	bl	800a6e8 <xTaskCreateStatic>
 800b57c:	4603      	mov	r3, r0
 800b57e:	4a10      	ldr	r2, [pc, #64]	; (800b5c0 <xTimerCreateTimerTask+0x8c>)
 800b580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <xTimerCreateTimerTask+0x8c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b58a:	2301      	movs	r3, #1
 800b58c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5aa:	697b      	ldr	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20001108 	.word	0x20001108
 800b5b8:	0800d32c 	.word	0x0800d32c
 800b5bc:	0800b6e1 	.word	0x0800b6e1
 800b5c0:	2000110c 	.word	0x2000110c

0800b5c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08a      	sub	sp, #40	; 0x28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	623b      	str	r3, [r7, #32]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5f2:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <xTimerGenericCommand+0x98>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d02a      	beq.n	800b650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	dc18      	bgt.n	800b63e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b60c:	f7ff feb2 	bl	800b374 <xTaskGetSchedulerState>
 800b610:	4603      	mov	r3, r0
 800b612:	2b02      	cmp	r3, #2
 800b614:	d109      	bne.n	800b62a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <xTimerGenericCommand+0x98>)
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	f107 0110 	add.w	r1, r7, #16
 800b61e:	2300      	movs	r3, #0
 800b620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b622:	f7fe fc7f 	bl	8009f24 <xQueueGenericSend>
 800b626:	6278      	str	r0, [r7, #36]	; 0x24
 800b628:	e012      	b.n	800b650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b62a:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <xTimerGenericCommand+0x98>)
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f107 0110 	add.w	r1, r7, #16
 800b632:	2300      	movs	r3, #0
 800b634:	2200      	movs	r2, #0
 800b636:	f7fe fc75 	bl	8009f24 <xQueueGenericSend>
 800b63a:	6278      	str	r0, [r7, #36]	; 0x24
 800b63c:	e008      	b.n	800b650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b63e:	4b07      	ldr	r3, [pc, #28]	; (800b65c <xTimerGenericCommand+0x98>)
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	f107 0110 	add.w	r1, r7, #16
 800b646:	2300      	movs	r3, #0
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	f7fe fd69 	bl	800a120 <xQueueGenericSendFromISR>
 800b64e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b652:	4618      	mov	r0, r3
 800b654:	3728      	adds	r7, #40	; 0x28
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20001108 	.word	0x20001108

0800b660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b66a:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <prvProcessExpiredTimer+0x7c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	3304      	adds	r3, #4
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fe fb27 	bl	8009ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d122      	bne.n	800b6cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	699a      	ldr	r2, [r3, #24]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	18d1      	adds	r1, r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	6978      	ldr	r0, [r7, #20]
 800b694:	f000 f8c8 	bl	800b828 <prvInsertTimerInActiveList>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d016      	beq.n	800b6cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	6978      	ldr	r0, [r7, #20]
 800b6aa:	f7ff ff8b 	bl	800b5c4 <xTimerGenericCommand>
 800b6ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10a      	bne.n	800b6cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60fb      	str	r3, [r7, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	6978      	ldr	r0, [r7, #20]
 800b6d2:	4798      	blx	r3
}
 800b6d4:	bf00      	nop
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20001100 	.word	0x20001100

0800b6e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6e8:	f107 0308 	add.w	r3, r7, #8
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f857 	bl	800b7a0 <prvGetNextExpireTime>
 800b6f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f803 	bl	800b704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6fe:	f000 f8d5 	bl	800b8ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b702:	e7f1      	b.n	800b6e8 <prvTimerTask+0x8>

0800b704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b70e:	f7ff fa3f 	bl	800ab90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f866 	bl	800b7e8 <prvSampleTimeNow>
 800b71c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d130      	bne.n	800b786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <prvProcessTimerOrBlockTask+0x3c>
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d806      	bhi.n	800b740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b732:	f7ff fa3b 	bl	800abac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ff91 	bl	800b660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b73e:	e024      	b.n	800b78a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <prvProcessTimerOrBlockTask+0x90>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bf0c      	ite	eq
 800b750:	2301      	moveq	r3, #1
 800b752:	2300      	movne	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <prvProcessTimerOrBlockTask+0x94>)
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	f7fe ff8b 	bl	800a680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b76a:	f7ff fa1f 	bl	800abac <xTaskResumeAll>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b774:	4b09      	ldr	r3, [pc, #36]	; (800b79c <prvProcessTimerOrBlockTask+0x98>)
 800b776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
}
 800b784:	e001      	b.n	800b78a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b786:	f7ff fa11 	bl	800abac <xTaskResumeAll>
}
 800b78a:	bf00      	nop
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20001104 	.word	0x20001104
 800b798:	20001108 	.word	0x20001108
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7a8:	4b0e      	ldr	r3, [pc, #56]	; (800b7e4 <prvGetNextExpireTime+0x44>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2301      	moveq	r3, #1
 800b7b4:	2300      	movne	r3, #0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d105      	bne.n	800b7d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <prvGetNextExpireTime+0x44>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	e001      	b.n	800b7d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bc80      	pop	{r7}
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20001100 	.word	0x20001100

0800b7e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7f0:	f7ff fa7a 	bl	800ace8 <xTaskGetTickCount>
 800b7f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <prvSampleTimeNow+0x3c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d205      	bcs.n	800b80c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b800:	f000 f908 	bl	800ba14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e002      	b.n	800b812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b812:	4a04      	ldr	r2, [pc, #16]	; (800b824 <prvSampleTimeNow+0x3c>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b818:	68fb      	ldr	r3, [r7, #12]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001110 	.word	0x20001110

0800b828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d812      	bhi.n	800b874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	1ad2      	subs	r2, r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d302      	bcc.n	800b862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b85c:	2301      	movs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e01b      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b862:	4b10      	ldr	r3, [pc, #64]	; (800b8a4 <prvInsertTimerInActiveList+0x7c>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7fe f9f5 	bl	8009c5c <vListInsert>
 800b872:	e012      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d206      	bcs.n	800b88a <prvInsertTimerInActiveList+0x62>
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d302      	bcc.n	800b88a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e007      	b.n	800b89a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <prvInsertTimerInActiveList+0x80>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3304      	adds	r3, #4
 800b892:	4619      	mov	r1, r3
 800b894:	4610      	mov	r0, r2
 800b896:	f7fe f9e1 	bl	8009c5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b89a:	697b      	ldr	r3, [r7, #20]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20001104 	.word	0x20001104
 800b8a8:	20001100 	.word	0x20001100

0800b8ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08e      	sub	sp, #56	; 0x38
 800b8b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8b2:	e09d      	b.n	800b9f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	da18      	bge.n	800b8ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8ba:	1d3b      	adds	r3, r7, #4
 800b8bc:	3304      	adds	r3, #4
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	61fb      	str	r3, [r7, #28]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e2:	6850      	ldr	r0, [r2, #4]
 800b8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e6:	6892      	ldr	r2, [r2, #8]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	db7d      	blt.n	800b9ee <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	3304      	adds	r3, #4
 800b902:	4618      	mov	r0, r3
 800b904:	f7fe f9e2 	bl	8009ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b908:	463b      	mov	r3, r7
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7ff ff6c 	bl	800b7e8 <prvSampleTimeNow>
 800b910:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b09      	cmp	r3, #9
 800b916:	d86b      	bhi.n	800b9f0 <prvProcessReceivedCommands+0x144>
 800b918:	a201      	add	r2, pc, #4	; (adr r2, 800b920 <prvProcessReceivedCommands+0x74>)
 800b91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91e:	bf00      	nop
 800b920:	0800b949 	.word	0x0800b949
 800b924:	0800b949 	.word	0x0800b949
 800b928:	0800b949 	.word	0x0800b949
 800b92c:	0800b9f1 	.word	0x0800b9f1
 800b930:	0800b9a5 	.word	0x0800b9a5
 800b934:	0800b9dd 	.word	0x0800b9dd
 800b938:	0800b949 	.word	0x0800b949
 800b93c:	0800b949 	.word	0x0800b949
 800b940:	0800b9f1 	.word	0x0800b9f1
 800b944:	0800b9a5 	.word	0x0800b9a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	18d1      	adds	r1, r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b956:	f7ff ff67 	bl	800b828 <prvInsertTimerInActiveList>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d047      	beq.n	800b9f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b966:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	69db      	ldr	r3, [r3, #28]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d13f      	bne.n	800b9f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	441a      	add	r2, r3
 800b978:	2300      	movs	r3, #0
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	2300      	movs	r3, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b982:	f7ff fe1f 	bl	800b5c4 <xTimerGenericCommand>
 800b986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d130      	bne.n	800b9f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	61bb      	str	r3, [r7, #24]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	617b      	str	r3, [r7, #20]
}
 800b9c4:	bf00      	nop
 800b9c6:	e7fe      	b.n	800b9c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	699a      	ldr	r2, [r3, #24]
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	18d1      	adds	r1, r2, r3
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9d6:	f7ff ff27 	bl	800b828 <prvInsertTimerInActiveList>
					break;
 800b9da:	e009      	b.n	800b9f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e8:	f000 fb6c 	bl	800c0c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9ec:	e000      	b.n	800b9f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9f0:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <prvProcessReceivedCommands+0x164>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	1d39      	adds	r1, r7, #4
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe fc29 	bl	800a250 <xQueueReceive>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f47f af57 	bne.w	800b8b4 <prvProcessReceivedCommands+0x8>
	}
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3730      	adds	r7, #48	; 0x30
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20001108 	.word	0x20001108

0800ba14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba1a:	e045      	b.n	800baa8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba1c:	4b2c      	ldr	r3, [pc, #176]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba26:	4b2a      	ldr	r3, [pc, #168]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe f949 	bl	8009ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	69db      	ldr	r3, [r3, #28]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d12e      	bne.n	800baa8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	4413      	add	r3, r2
 800ba52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d90e      	bls.n	800ba7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba68:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f7fe f8f2 	bl	8009c5c <vListInsert>
 800ba78:	e016      	b.n	800baa8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	2100      	movs	r1, #0
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7ff fd9d 	bl	800b5c4 <xTimerGenericCommand>
 800ba8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	603b      	str	r3, [r7, #0]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baa8:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1b4      	bne.n	800ba1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bab2:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bab8:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <prvSwitchTimerLists+0xc0>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a04      	ldr	r2, [pc, #16]	; (800bad0 <prvSwitchTimerLists+0xbc>)
 800babe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bac0:	4a04      	ldr	r2, [pc, #16]	; (800bad4 <prvSwitchTimerLists+0xc0>)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	6013      	str	r3, [r2, #0]
}
 800bac6:	bf00      	nop
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20001100 	.word	0x20001100
 800bad4:	20001104 	.word	0x20001104

0800bad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bade:	f000 f92d 	bl	800bd3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <prvCheckForValidListAndQueue+0x60>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d120      	bne.n	800bb2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800baea:	4814      	ldr	r0, [pc, #80]	; (800bb3c <prvCheckForValidListAndQueue+0x64>)
 800baec:	f7fe f868 	bl	8009bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800baf0:	4813      	ldr	r0, [pc, #76]	; (800bb40 <prvCheckForValidListAndQueue+0x68>)
 800baf2:	f7fe f865 	bl	8009bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800baf6:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <prvCheckForValidListAndQueue+0x6c>)
 800baf8:	4a10      	ldr	r2, [pc, #64]	; (800bb3c <prvCheckForValidListAndQueue+0x64>)
 800bafa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bafc:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <prvCheckForValidListAndQueue+0x70>)
 800bafe:	4a10      	ldr	r2, [pc, #64]	; (800bb40 <prvCheckForValidListAndQueue+0x68>)
 800bb00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb02:	2300      	movs	r3, #0
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <prvCheckForValidListAndQueue+0x74>)
 800bb08:	4a11      	ldr	r2, [pc, #68]	; (800bb50 <prvCheckForValidListAndQueue+0x78>)
 800bb0a:	2110      	movs	r1, #16
 800bb0c:	200a      	movs	r0, #10
 800bb0e:	f7fe f96f 	bl	8009df0 <xQueueGenericCreateStatic>
 800bb12:	4603      	mov	r3, r0
 800bb14:	4a08      	ldr	r2, [pc, #32]	; (800bb38 <prvCheckForValidListAndQueue+0x60>)
 800bb16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb18:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <prvCheckForValidListAndQueue+0x60>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb20:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <prvCheckForValidListAndQueue+0x60>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	490b      	ldr	r1, [pc, #44]	; (800bb54 <prvCheckForValidListAndQueue+0x7c>)
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fd82 	bl	800a630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb2c:	f000 f936 	bl	800bd9c <vPortExitCritical>
}
 800bb30:	bf00      	nop
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20001108 	.word	0x20001108
 800bb3c:	200010d8 	.word	0x200010d8
 800bb40:	200010ec 	.word	0x200010ec
 800bb44:	20001100 	.word	0x20001100
 800bb48:	20001104 	.word	0x20001104
 800bb4c:	200011b4 	.word	0x200011b4
 800bb50:	20001114 	.word	0x20001114
 800bb54:	0800d334 	.word	0x0800d334

0800bb58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3b04      	subs	r3, #4
 800bb68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3b04      	subs	r3, #4
 800bb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f023 0201 	bic.w	r2, r3, #1
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3b04      	subs	r3, #4
 800bb86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb88:	4a08      	ldr	r2, [pc, #32]	; (800bbac <pxPortInitialiseStack+0x54>)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3b14      	subs	r3, #20
 800bb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3b20      	subs	r3, #32
 800bb9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bba0:	68fb      	ldr	r3, [r7, #12]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bc80      	pop	{r7}
 800bbaa:	4770      	bx	lr
 800bbac:	0800bbb1 	.word	0x0800bbb1

0800bbb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbba:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <prvTaskExitError+0x54>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbc2:	d00a      	beq.n	800bbda <prvTaskExitError+0x2a>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	60fb      	str	r3, [r7, #12]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <prvTaskExitError+0x28>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	60bb      	str	r3, [r7, #8]
}
 800bbec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbee:	bf00      	nop
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0fc      	beq.n	800bbf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bc80      	pop	{r7}
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	20000134 	.word	0x20000134
	...

0800bc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <pxCurrentTCBConst2>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bc1a:	f380 8809 	msr	PSP, r0
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bc2e:	4770      	bx	lr

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	20000bd8 	.word	0x20000bd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bc38:	4806      	ldr	r0, [pc, #24]	; (800bc54 <prvPortStartFirstTask+0x1c>)
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f380 8808 	msr	MSP, r0
 800bc42:	b662      	cpsie	i
 800bc44:	b661      	cpsie	f
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	df00      	svc	0
 800bc50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc52:	bf00      	nop
 800bc54:	e000ed08 	.word	0xe000ed08

0800bc58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc5e:	4b32      	ldr	r3, [pc, #200]	; (800bd28 <xPortStartScheduler+0xd0>)
 800bc60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	22ff      	movs	r2, #255	; 0xff
 800bc6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc78:	78fb      	ldrb	r3, [r7, #3]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	4b2a      	ldr	r3, [pc, #168]	; (800bd2c <xPortStartScheduler+0xd4>)
 800bc84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc86:	4b2a      	ldr	r3, [pc, #168]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bc88:	2207      	movs	r2, #7
 800bc8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc8c:	e009      	b.n	800bca2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bc8e:	4b28      	ldr	r3, [pc, #160]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	4a26      	ldr	r2, [pc, #152]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bc96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	005b      	lsls	r3, r3, #1
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bca2:	78fb      	ldrb	r3, [r7, #3]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcaa:	2b80      	cmp	r3, #128	; 0x80
 800bcac:	d0ef      	beq.n	800bc8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcae:	4b20      	ldr	r3, [pc, #128]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1c3 0307 	rsb	r3, r3, #7
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d00a      	beq.n	800bcd0 <xPortStartScheduler+0x78>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	60bb      	str	r3, [r7, #8]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcd0:	4b17      	ldr	r3, [pc, #92]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	4a16      	ldr	r2, [pc, #88]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bcd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcda:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bce2:	4a13      	ldr	r2, [pc, #76]	; (800bd30 <xPortStartScheduler+0xd8>)
 800bce4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcee:	4b11      	ldr	r3, [pc, #68]	; (800bd34 <xPortStartScheduler+0xdc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a10      	ldr	r2, [pc, #64]	; (800bd34 <xPortStartScheduler+0xdc>)
 800bcf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcfa:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <xPortStartScheduler+0xdc>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a0d      	ldr	r2, [pc, #52]	; (800bd34 <xPortStartScheduler+0xdc>)
 800bd00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd06:	f000 f8b9 	bl	800be7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <xPortStartScheduler+0xe0>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd10:	f7ff ff92 	bl	800bc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd14:	f7ff f8b4 	bl	800ae80 <vTaskSwitchContext>
	prvTaskExitError();
 800bd18:	f7ff ff4a 	bl	800bbb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	e000e400 	.word	0xe000e400
 800bd2c:	20001204 	.word	0x20001204
 800bd30:	20001208 	.word	0x20001208
 800bd34:	e000ed20 	.word	0xe000ed20
 800bd38:	20000134 	.word	0x20000134

0800bd3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	607b      	str	r3, [r7, #4]
}
 800bd54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd56:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <vPortEnterCritical+0x58>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	4a0d      	ldr	r2, [pc, #52]	; (800bd94 <vPortEnterCritical+0x58>)
 800bd5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd60:	4b0c      	ldr	r3, [pc, #48]	; (800bd94 <vPortEnterCritical+0x58>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d10f      	bne.n	800bd88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd68:	4b0b      	ldr	r3, [pc, #44]	; (800bd98 <vPortEnterCritical+0x5c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00a      	beq.n	800bd88 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	603b      	str	r3, [r7, #0]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <vPortEnterCritical+0x4a>
	}
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	20000134 	.word	0x20000134
 800bd98:	e000ed04 	.word	0xe000ed04

0800bd9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bda2:	4b11      	ldr	r3, [pc, #68]	; (800bde8 <vPortExitCritical+0x4c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <vPortExitCritical+0x24>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	607b      	str	r3, [r7, #4]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdc0:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <vPortExitCritical+0x4c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <vPortExitCritical+0x4c>)
 800bdc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdca:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <vPortExitCritical+0x4c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d105      	bne.n	800bdde <vPortExitCritical+0x42>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	f383 8811 	msr	BASEPRI, r3
}
 800bddc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdde:	bf00      	nop
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bc80      	pop	{r7}
 800bde6:	4770      	bx	lr
 800bde8:	20000134 	.word	0x20000134
 800bdec:	00000000 	.word	0x00000000

0800bdf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdf0:	f3ef 8009 	mrs	r0, PSP
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <pxCurrentTCBConst>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be00:	6010      	str	r0, [r2, #0]
 800be02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800be06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be0a:	f380 8811 	msr	BASEPRI, r0
 800be0e:	f7ff f837 	bl	800ae80 <vTaskSwitchContext>
 800be12:	f04f 0000 	mov.w	r0, #0
 800be16:	f380 8811 	msr	BASEPRI, r0
 800be1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be1e:	6819      	ldr	r1, [r3, #0]
 800be20:	6808      	ldr	r0, [r1, #0]
 800be22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be26:	f380 8809 	msr	PSP, r0
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	4770      	bx	lr

0800be30 <pxCurrentTCBConst>:
 800be30:	20000bd8 	.word	0x20000bd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop

0800be38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	607b      	str	r3, [r7, #4]
}
 800be50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be52:	f7fe ff57 	bl	800ad04 <xTaskIncrementTick>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <SysTick_Handler+0x40>)
 800be5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f383 8811 	msr	BASEPRI, r3
}
 800be6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	e000ed04 	.word	0xe000ed04

0800be7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <vPortSetupTimerInterrupt+0x30>)
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be86:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <vPortSetupTimerInterrupt+0x34>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <vPortSetupTimerInterrupt+0x38>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a09      	ldr	r2, [pc, #36]	; (800beb8 <vPortSetupTimerInterrupt+0x3c>)
 800be92:	fba2 2303 	umull	r2, r3, r2, r3
 800be96:	099b      	lsrs	r3, r3, #6
 800be98:	4a08      	ldr	r2, [pc, #32]	; (800bebc <vPortSetupTimerInterrupt+0x40>)
 800be9a:	3b01      	subs	r3, #1
 800be9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be9e:	4b03      	ldr	r3, [pc, #12]	; (800beac <vPortSetupTimerInterrupt+0x30>)
 800bea0:	2207      	movs	r2, #7
 800bea2:	601a      	str	r2, [r3, #0]
}
 800bea4:	bf00      	nop
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr
 800beac:	e000e010 	.word	0xe000e010
 800beb0:	e000e018 	.word	0xe000e018
 800beb4:	20000000 	.word	0x20000000
 800beb8:	10624dd3 	.word	0x10624dd3
 800bebc:	e000e014 	.word	0xe000e014

0800bec0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bec6:	f3ef 8305 	mrs	r3, IPSR
 800beca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b0f      	cmp	r3, #15
 800bed0:	d914      	bls.n	800befc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bed2:	4a16      	ldr	r2, [pc, #88]	; (800bf2c <vPortValidateInterruptPriority+0x6c>)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bedc:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <vPortValidateInterruptPriority+0x70>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	7afa      	ldrb	r2, [r7, #11]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d20a      	bcs.n	800befc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	607b      	str	r3, [r7, #4]
}
 800bef8:	bf00      	nop
 800befa:	e7fe      	b.n	800befa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <vPortValidateInterruptPriority+0x74>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf04:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <vPortValidateInterruptPriority+0x78>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d90a      	bls.n	800bf22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	603b      	str	r3, [r7, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <vPortValidateInterruptPriority+0x60>
	}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bc80      	pop	{r7}
 800bf2a:	4770      	bx	lr
 800bf2c:	e000e3f0 	.word	0xe000e3f0
 800bf30:	20001204 	.word	0x20001204
 800bf34:	e000ed0c 	.word	0xe000ed0c
 800bf38:	20001208 	.word	0x20001208

0800bf3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08a      	sub	sp, #40	; 0x28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf48:	f7fe fe22 	bl	800ab90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf4c:	4b58      	ldr	r3, [pc, #352]	; (800c0b0 <pvPortMalloc+0x174>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf54:	f000 f910 	bl	800c178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf58:	4b56      	ldr	r3, [pc, #344]	; (800c0b4 <pvPortMalloc+0x178>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f040 808e 	bne.w	800c082 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01d      	beq.n	800bfa8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf6c:	2208      	movs	r2, #8
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d014      	beq.n	800bfa8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f023 0307 	bic.w	r3, r3, #7
 800bf84:	3308      	adds	r3, #8
 800bf86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f003 0307 	and.w	r3, r3, #7
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <pvPortMalloc+0x6c>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d069      	beq.n	800c082 <pvPortMalloc+0x146>
 800bfae:	4b42      	ldr	r3, [pc, #264]	; (800c0b8 <pvPortMalloc+0x17c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d864      	bhi.n	800c082 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfb8:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <pvPortMalloc+0x180>)
 800bfba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfbc:	4b3f      	ldr	r3, [pc, #252]	; (800c0bc <pvPortMalloc+0x180>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfc2:	e004      	b.n	800bfce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d903      	bls.n	800bfe0 <pvPortMalloc+0xa4>
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1f1      	bne.n	800bfc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfe0:	4b33      	ldr	r3, [pc, #204]	; (800c0b0 <pvPortMalloc+0x174>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d04b      	beq.n	800c082 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2208      	movs	r2, #8
 800bff0:	4413      	add	r3, r2
 800bff2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	1ad2      	subs	r2, r2, r3
 800c004:	2308      	movs	r3, #8
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	429a      	cmp	r2, r3
 800c00a:	d91f      	bls.n	800c04c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <pvPortMalloc+0xf8>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	613b      	str	r3, [r7, #16]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	1ad2      	subs	r2, r2, r3
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c046:	69b8      	ldr	r0, [r7, #24]
 800c048:	f000 f8f8 	bl	800c23c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c04c:	4b1a      	ldr	r3, [pc, #104]	; (800c0b8 <pvPortMalloc+0x17c>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	4a18      	ldr	r2, [pc, #96]	; (800c0b8 <pvPortMalloc+0x17c>)
 800c058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c05a:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <pvPortMalloc+0x17c>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b18      	ldr	r3, [pc, #96]	; (800c0c0 <pvPortMalloc+0x184>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d203      	bcs.n	800c06e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <pvPortMalloc+0x17c>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a15      	ldr	r2, [pc, #84]	; (800c0c0 <pvPortMalloc+0x184>)
 800c06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	4b10      	ldr	r3, [pc, #64]	; (800c0b4 <pvPortMalloc+0x178>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	431a      	orrs	r2, r3
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c082:	f7fe fd93 	bl	800abac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f003 0307 	and.w	r3, r3, #7
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00a      	beq.n	800c0a6 <pvPortMalloc+0x16a>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	60fb      	str	r3, [r7, #12]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <pvPortMalloc+0x168>
	return pvReturn;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3728      	adds	r7, #40	; 0x28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20001e14 	.word	0x20001e14
 800c0b4:	20001e20 	.word	0x20001e20
 800c0b8:	20001e18 	.word	0x20001e18
 800c0bc:	20001e0c 	.word	0x20001e0c
 800c0c0:	20001e1c 	.word	0x20001e1c

0800c0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d048      	beq.n	800c168 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0d6:	2308      	movs	r3, #8
 800c0d8:	425b      	negs	r3, r3
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	4413      	add	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	4b21      	ldr	r3, [pc, #132]	; (800c170 <vPortFree+0xac>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10a      	bne.n	800c108 <vPortFree+0x44>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	60fb      	str	r3, [r7, #12]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00a      	beq.n	800c126 <vPortFree+0x62>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60bb      	str	r3, [r7, #8]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	4b11      	ldr	r3, [pc, #68]	; (800c170 <vPortFree+0xac>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4013      	ands	r3, r2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d019      	beq.n	800c168 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d115      	bne.n	800c168 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <vPortFree+0xac>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	43db      	mvns	r3, r3
 800c146:	401a      	ands	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c14c:	f7fe fd20 	bl	800ab90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	4b07      	ldr	r3, [pc, #28]	; (800c174 <vPortFree+0xb0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4413      	add	r3, r2
 800c15a:	4a06      	ldr	r2, [pc, #24]	; (800c174 <vPortFree+0xb0>)
 800c15c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c15e:	6938      	ldr	r0, [r7, #16]
 800c160:	f000 f86c 	bl	800c23c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c164:	f7fe fd22 	bl	800abac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c168:	bf00      	nop
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20001e20 	.word	0x20001e20
 800c174:	20001e18 	.word	0x20001e18

0800c178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c17e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c184:	4b27      	ldr	r3, [pc, #156]	; (800c224 <prvHeapInit+0xac>)
 800c186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f003 0307 	and.w	r3, r3, #7
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00c      	beq.n	800c1ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3307      	adds	r3, #7
 800c196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f023 0307 	bic.w	r3, r3, #7
 800c19e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	4a1f      	ldr	r2, [pc, #124]	; (800c224 <prvHeapInit+0xac>)
 800c1a8:	4413      	add	r3, r2
 800c1aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1b0:	4a1d      	ldr	r2, [pc, #116]	; (800c228 <prvHeapInit+0xb0>)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1b6:	4b1c      	ldr	r3, [pc, #112]	; (800c228 <prvHeapInit+0xb0>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	1a9b      	subs	r3, r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f023 0307 	bic.w	r3, r3, #7
 800c1d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4a15      	ldr	r2, [pc, #84]	; (800c22c <prvHeapInit+0xb4>)
 800c1d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1da:	4b14      	ldr	r3, [pc, #80]	; (800c22c <prvHeapInit+0xb4>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1e2:	4b12      	ldr	r3, [pc, #72]	; (800c22c <prvHeapInit+0xb4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <prvHeapInit+0xb4>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	4a0a      	ldr	r2, [pc, #40]	; (800c230 <prvHeapInit+0xb8>)
 800c206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	4a09      	ldr	r2, [pc, #36]	; (800c234 <prvHeapInit+0xbc>)
 800c20e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c210:	4b09      	ldr	r3, [pc, #36]	; (800c238 <prvHeapInit+0xc0>)
 800c212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c216:	601a      	str	r2, [r3, #0]
}
 800c218:	bf00      	nop
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	2000120c 	.word	0x2000120c
 800c228:	20001e0c 	.word	0x20001e0c
 800c22c:	20001e14 	.word	0x20001e14
 800c230:	20001e1c 	.word	0x20001e1c
 800c234:	20001e18 	.word	0x20001e18
 800c238:	20001e20 	.word	0x20001e20

0800c23c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c244:	4b27      	ldr	r3, [pc, #156]	; (800c2e4 <prvInsertBlockIntoFreeList+0xa8>)
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	e002      	b.n	800c250 <prvInsertBlockIntoFreeList+0x14>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	429a      	cmp	r2, r3
 800c258:	d8f7      	bhi.n	800c24a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4413      	add	r3, r2
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d108      	bne.n	800c27e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	441a      	add	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	441a      	add	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d118      	bne.n	800c2c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <prvInsertBlockIntoFreeList+0xac>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d00d      	beq.n	800c2ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	441a      	add	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	e008      	b.n	800c2cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2ba:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <prvInsertBlockIntoFreeList+0xac>)
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	e003      	b.n	800c2cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d002      	beq.n	800c2da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bc80      	pop	{r7}
 800c2e2:	4770      	bx	lr
 800c2e4:	20001e0c 	.word	0x20001e0c
 800c2e8:	20001e14 	.word	0x20001e14

0800c2ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4912      	ldr	r1, [pc, #72]	; (800c33c <MX_USB_DEVICE_Init+0x50>)
 800c2f4:	4812      	ldr	r0, [pc, #72]	; (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c2f6:	f7fc fa74 	bl	80087e2 <USBD_Init>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c300:	f7f5 fcc2 	bl	8001c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c304:	490f      	ldr	r1, [pc, #60]	; (800c344 <MX_USB_DEVICE_Init+0x58>)
 800c306:	480e      	ldr	r0, [pc, #56]	; (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c308:	f7fc fa96 	bl	8008838 <USBD_RegisterClass>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c312:	f7f5 fcb9 	bl	8001c88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c316:	490c      	ldr	r1, [pc, #48]	; (800c348 <MX_USB_DEVICE_Init+0x5c>)
 800c318:	4809      	ldr	r0, [pc, #36]	; (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c31a:	f7fc f9c7 	bl	80086ac <USBD_CDC_RegisterInterface>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c324:	f7f5 fcb0 	bl	8001c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c328:	4805      	ldr	r0, [pc, #20]	; (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c32a:	f7fc fa9e 	bl	800886a <USBD_Start>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c334:	f7f5 fca8 	bl	8001c88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000148 	.word	0x20000148
 800c340:	20002540 	.word	0x20002540
 800c344:	20000030 	.word	0x20000030
 800c348:	20000138 	.word	0x20000138

0800c34c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c350:	2200      	movs	r2, #0
 800c352:	4905      	ldr	r1, [pc, #20]	; (800c368 <CDC_Init_FS+0x1c>)
 800c354:	4805      	ldr	r0, [pc, #20]	; (800c36c <CDC_Init_FS+0x20>)
 800c356:	f7fc f9bf 	bl	80086d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c35a:	4905      	ldr	r1, [pc, #20]	; (800c370 <CDC_Init_FS+0x24>)
 800c35c:	4803      	ldr	r0, [pc, #12]	; (800c36c <CDC_Init_FS+0x20>)
 800c35e:	f7fc f9d4 	bl	800870a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c364:	4618      	mov	r0, r3
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20002bc4 	.word	0x20002bc4
 800c36c:	20002540 	.word	0x20002540
 800c370:	200027dc 	.word	0x200027dc

0800c374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr
	...

0800c384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	6039      	str	r1, [r7, #0]
 800c38e:	71fb      	strb	r3, [r7, #7]
 800c390:	4613      	mov	r3, r2
 800c392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	2b23      	cmp	r3, #35	; 0x23
 800c398:	d84a      	bhi.n	800c430 <CDC_Control_FS+0xac>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <CDC_Control_FS+0x1c>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c431 	.word	0x0800c431
 800c3a4:	0800c431 	.word	0x0800c431
 800c3a8:	0800c431 	.word	0x0800c431
 800c3ac:	0800c431 	.word	0x0800c431
 800c3b0:	0800c431 	.word	0x0800c431
 800c3b4:	0800c431 	.word	0x0800c431
 800c3b8:	0800c431 	.word	0x0800c431
 800c3bc:	0800c431 	.word	0x0800c431
 800c3c0:	0800c431 	.word	0x0800c431
 800c3c4:	0800c431 	.word	0x0800c431
 800c3c8:	0800c431 	.word	0x0800c431
 800c3cc:	0800c431 	.word	0x0800c431
 800c3d0:	0800c431 	.word	0x0800c431
 800c3d4:	0800c431 	.word	0x0800c431
 800c3d8:	0800c431 	.word	0x0800c431
 800c3dc:	0800c431 	.word	0x0800c431
 800c3e0:	0800c431 	.word	0x0800c431
 800c3e4:	0800c431 	.word	0x0800c431
 800c3e8:	0800c431 	.word	0x0800c431
 800c3ec:	0800c431 	.word	0x0800c431
 800c3f0:	0800c431 	.word	0x0800c431
 800c3f4:	0800c431 	.word	0x0800c431
 800c3f8:	0800c431 	.word	0x0800c431
 800c3fc:	0800c431 	.word	0x0800c431
 800c400:	0800c431 	.word	0x0800c431
 800c404:	0800c431 	.word	0x0800c431
 800c408:	0800c431 	.word	0x0800c431
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c431 	.word	0x0800c431
 800c414:	0800c431 	.word	0x0800c431
 800c418:	0800c431 	.word	0x0800c431
 800c41c:	0800c431 	.word	0x0800c431
 800c420:	0800c431 	.word	0x0800c431
 800c424:	0800c431 	.word	0x0800c431
 800c428:	0800c431 	.word	0x0800c431
 800c42c:	0800c431 	.word	0x0800c431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c430:	bf00      	nop
  }

  return (USBD_OK);
 800c432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c434:	4618      	mov	r0, r3
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	bc80      	pop	{r7}
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop

0800c440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	480c      	ldr	r0, [pc, #48]	; (800c480 <CDC_Receive_FS+0x40>)
 800c44e:	f7fc f95c 	bl	800870a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c452:	480b      	ldr	r0, [pc, #44]	; (800c480 <CDC_Receive_FS+0x40>)
 800c454:	f7fc f99b 	bl	800878e <USBD_CDC_ReceivePacket>

  memset(buffer, '\0', 0);
  uint8_t len = (uint8_t) *Len;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	73fb      	strb	r3, [r7, #15]

  memcpy(buffer, Buf, len);
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	461a      	mov	r2, r3
 800c462:	6879      	ldr	r1, [r7, #4]
 800c464:	4807      	ldr	r0, [pc, #28]	; (800c484 <CDC_Receive_FS+0x44>)
 800c466:	f000 fd7d 	bl	800cf64 <memcpy>
  memset(Buf, '\0', 64);
 800c46a:	2240      	movs	r2, #64	; 0x40
 800c46c:	2100      	movs	r1, #0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fda0 	bl	800cfb4 <memset>
  return (USBD_OK);
 800c474:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20002540 	.word	0x20002540
 800c484:	20000230 	.word	0x20000230

0800c488 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c498:	4b0d      	ldr	r3, [pc, #52]	; (800c4d0 <CDC_Transmit_FS+0x48>)
 800c49a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c49e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e00b      	b.n	800c4c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4ae:	887b      	ldrh	r3, [r7, #2]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	4806      	ldr	r0, [pc, #24]	; (800c4d0 <CDC_Transmit_FS+0x48>)
 800c4b6:	f7fc f90f 	bl	80086d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <CDC_Transmit_FS+0x48>)
 800c4bc:	f7fc f938 	bl	8008730 <USBD_CDC_TransmitPacket>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20002540 	.word	0x20002540

0800c4d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	2212      	movs	r2, #18
 800c4e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4e6:	4b03      	ldr	r3, [pc, #12]	; (800c4f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bc80      	pop	{r7}
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000164 	.word	0x20000164

0800c4f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	6039      	str	r1, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2204      	movs	r2, #4
 800c508:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c50a:	4b03      	ldr	r3, [pc, #12]	; (800c518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	bc80      	pop	{r7}
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	20000178 	.word	0x20000178

0800c51c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d105      	bne.n	800c53a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	4907      	ldr	r1, [pc, #28]	; (800c550 <USBD_FS_ProductStrDescriptor+0x34>)
 800c532:	4808      	ldr	r0, [pc, #32]	; (800c554 <USBD_FS_ProductStrDescriptor+0x38>)
 800c534:	f7fd f89c 	bl	8009670 <USBD_GetString>
 800c538:	e004      	b.n	800c544 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4904      	ldr	r1, [pc, #16]	; (800c550 <USBD_FS_ProductStrDescriptor+0x34>)
 800c53e:	4805      	ldr	r0, [pc, #20]	; (800c554 <USBD_FS_ProductStrDescriptor+0x38>)
 800c540:	f7fd f896 	bl	8009670 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20002fac 	.word	0x20002fac
 800c554:	0800d33c 	.word	0x0800d33c

0800c558 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	4904      	ldr	r1, [pc, #16]	; (800c578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c568:	4804      	ldr	r0, [pc, #16]	; (800c57c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c56a:	f7fd f881 	bl	8009670 <USBD_GetString>
  return USBD_StrDesc;
 800c56e:	4b02      	ldr	r3, [pc, #8]	; (800c578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	20002fac 	.word	0x20002fac
 800c57c:	0800d354 	.word	0x0800d354

0800c580 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	221a      	movs	r2, #26
 800c590:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c592:	f000 f843 	bl	800c61c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c596:	4b02      	ldr	r3, [pc, #8]	; (800c5a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	2000017c 	.word	0x2000017c

0800c5a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	6039      	str	r1, [r7, #0]
 800c5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d105      	bne.n	800c5c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	4907      	ldr	r1, [pc, #28]	; (800c5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5ba:	4808      	ldr	r0, [pc, #32]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5bc:	f7fd f858 	bl	8009670 <USBD_GetString>
 800c5c0:	e004      	b.n	800c5cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	4904      	ldr	r1, [pc, #16]	; (800c5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5c6:	4805      	ldr	r0, [pc, #20]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c8:	f7fd f852 	bl	8009670 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5cc:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20002fac 	.word	0x20002fac
 800c5dc:	0800d368 	.word	0x0800d368

0800c5e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	4907      	ldr	r1, [pc, #28]	; (800c614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5f6:	4808      	ldr	r0, [pc, #32]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5f8:	f7fd f83a 	bl	8009670 <USBD_GetString>
 800c5fc:	e004      	b.n	800c608 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	4904      	ldr	r1, [pc, #16]	; (800c614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c602:	4805      	ldr	r0, [pc, #20]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c604:	f7fd f834 	bl	8009670 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20002fac 	.word	0x20002fac
 800c618:	0800d374 	.word	0x0800d374

0800c61c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c622:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <Get_SerialNum+0x44>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c628:	4b0e      	ldr	r3, [pc, #56]	; (800c664 <Get_SerialNum+0x48>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c62e:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <Get_SerialNum+0x4c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4413      	add	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d009      	beq.n	800c656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c642:	2208      	movs	r2, #8
 800c644:	4909      	ldr	r1, [pc, #36]	; (800c66c <Get_SerialNum+0x50>)
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 f814 	bl	800c674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c64c:	2204      	movs	r2, #4
 800c64e:	4908      	ldr	r1, [pc, #32]	; (800c670 <Get_SerialNum+0x54>)
 800c650:	68b8      	ldr	r0, [r7, #8]
 800c652:	f000 f80f 	bl	800c674 <IntToUnicode>
  }
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	1ff80050 	.word	0x1ff80050
 800c664:	1ff80054 	.word	0x1ff80054
 800c668:	1ff80058 	.word	0x1ff80058
 800c66c:	2000017e 	.word	0x2000017e
 800c670:	2000018e 	.word	0x2000018e

0800c674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c686:	2300      	movs	r3, #0
 800c688:	75fb      	strb	r3, [r7, #23]
 800c68a:	e027      	b.n	800c6dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	0f1b      	lsrs	r3, r3, #28
 800c690:	2b09      	cmp	r3, #9
 800c692:	d80b      	bhi.n	800c6ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	0f1b      	lsrs	r3, r3, #28
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	4619      	mov	r1, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	440b      	add	r3, r1
 800c6a4:	3230      	adds	r2, #48	; 0x30
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	e00a      	b.n	800c6c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	0f1b      	lsrs	r3, r3, #28
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	440b      	add	r3, r1
 800c6bc:	3237      	adds	r2, #55	; 0x37
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	011b      	lsls	r3, r3, #4
 800c6c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	75fb      	strb	r3, [r7, #23]
 800c6dc:	7dfa      	ldrb	r2, [r7, #23]
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d3d3      	bcc.n	800c68c <IntToUnicode+0x18>
  }
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bc80      	pop	{r7}
 800c6ee:	4770      	bx	lr

0800c6f0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800c6fc:	78fb      	ldrb	r3, [r7, #3]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d106      	bne.n	800c710 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800c702:	4b09      	ldr	r3, [pc, #36]	; (800c728 <HAL_PCDEx_SetConnectionState+0x38>)
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	4a08      	ldr	r2, [pc, #32]	; (800c728 <HAL_PCDEx_SetConnectionState+0x38>)
 800c708:	f043 0301 	orr.w	r3, r3, #1
 800c70c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800c70e:	e005      	b.n	800c71c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800c710:	4b05      	ldr	r3, [pc, #20]	; (800c728 <HAL_PCDEx_SetConnectionState+0x38>)
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4a04      	ldr	r2, [pc, #16]	; (800c728 <HAL_PCDEx_SetConnectionState+0x38>)
 800c716:	f023 0301 	bic.w	r3, r3, #1
 800c71a:	6053      	str	r3, [r2, #4]
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	bc80      	pop	{r7}
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	40010000 	.word	0x40010000

0800c72c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a0d      	ldr	r2, [pc, #52]	; (800c770 <HAL_PCD_MspInit+0x44>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d113      	bne.n	800c766 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c73e:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <HAL_PCD_MspInit+0x48>)
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	4a0c      	ldr	r2, [pc, #48]	; (800c774 <HAL_PCD_MspInit+0x48>)
 800c744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c748:	6253      	str	r3, [r2, #36]	; 0x24
 800c74a:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <HAL_PCD_MspInit+0x48>)
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c756:	2200      	movs	r2, #0
 800c758:	2105      	movs	r1, #5
 800c75a:	2014      	movs	r0, #20
 800c75c:	f7f6 f90f 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c760:	2014      	movs	r0, #20
 800c762:	f7f6 f928 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c766:	bf00      	nop
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	40005c00 	.word	0x40005c00
 800c774:	40023800 	.word	0x40023800

0800c778 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f7fc f8b3 	bl	80088fa <USBD_LL_SetupStage>
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c7ae:	78fa      	ldrb	r2, [r7, #3]
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	440b      	add	r3, r1
 800c7bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	78fb      	ldrb	r3, [r7, #3]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	f7fc f8e5 	bl	8008994 <USBD_LL_DataOutStage>
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c7e4:	78fa      	ldrb	r2, [r7, #3]
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	440b      	add	r3, r1
 800c7f2:	333c      	adds	r3, #60	; 0x3c
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	78fb      	ldrb	r3, [r7, #3]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f7fc f93c 	bl	8008a76 <USBD_LL_DataInStage>
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c814:	4618      	mov	r0, r3
 800c816:	f7fc fa47 	bl	8008ca8 <USBD_LL_SOF>
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c82a:	2301      	movs	r3, #1
 800c82c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d001      	beq.n	800c83a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c836:	f7f5 fa27 	bl	8001c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c840:	7bfa      	ldrb	r2, [r7, #15]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f7fc f9fc 	bl	8008c42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c850:	4618      	mov	r0, r3
 800c852:	f7fc f9b5 	bl	8008bc0 <USBD_LL_Reset>
}
 800c856:	bf00      	nop
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
	...

0800c860 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fc f9f6 	bl	8008c60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c87c:	4b04      	ldr	r3, [pc, #16]	; (800c890 <HAL_PCD_SuspendCallback+0x30>)
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	4a03      	ldr	r2, [pc, #12]	; (800c890 <HAL_PCD_SuspendCallback+0x30>)
 800c882:	f043 0306 	orr.w	r3, r3, #6
 800c886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	e000ed00 	.word	0xe000ed00

0800c894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fc f9f0 	bl	8008c88 <USBD_LL_Resume>
}
 800c8a8:	bf00      	nop
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c8b8:	4a28      	ldr	r2, [pc, #160]	; (800c95c <USBD_LL_Init+0xac>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a26      	ldr	r2, [pc, #152]	; (800c95c <USBD_LL_Init+0xac>)
 800c8c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800c8c8:	4b24      	ldr	r3, [pc, #144]	; (800c95c <USBD_LL_Init+0xac>)
 800c8ca:	4a25      	ldr	r2, [pc, #148]	; (800c960 <USBD_LL_Init+0xb0>)
 800c8cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c8ce:	4b23      	ldr	r3, [pc, #140]	; (800c95c <USBD_LL_Init+0xac>)
 800c8d0:	2208      	movs	r2, #8
 800c8d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c8d4:	4b21      	ldr	r3, [pc, #132]	; (800c95c <USBD_LL_Init+0xac>)
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c8da:	4b20      	ldr	r3, [pc, #128]	; (800c95c <USBD_LL_Init+0xac>)
 800c8dc:	2202      	movs	r2, #2
 800c8de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c8e0:	4b1e      	ldr	r3, [pc, #120]	; (800c95c <USBD_LL_Init+0xac>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c8e6:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <USBD_LL_Init+0xac>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c8ec:	481b      	ldr	r0, [pc, #108]	; (800c95c <USBD_LL_Init+0xac>)
 800c8ee:	f7f6 fba7 	bl	8003040 <HAL_PCD_Init>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c8f8:	f7f5 f9c6 	bl	8001c88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c902:	2318      	movs	r3, #24
 800c904:	2200      	movs	r2, #0
 800c906:	2100      	movs	r1, #0
 800c908:	f7f7 ff84 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c912:	2358      	movs	r3, #88	; 0x58
 800c914:	2200      	movs	r2, #0
 800c916:	2180      	movs	r1, #128	; 0x80
 800c918:	f7f7 ff7c 	bl	8004814 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c922:	23c0      	movs	r3, #192	; 0xc0
 800c924:	2200      	movs	r2, #0
 800c926:	2181      	movs	r1, #129	; 0x81
 800c928:	f7f7 ff74 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c932:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c936:	2200      	movs	r2, #0
 800c938:	2101      	movs	r1, #1
 800c93a:	f7f7 ff6b 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c944:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c948:	2200      	movs	r2, #0
 800c94a:	2182      	movs	r1, #130	; 0x82
 800c94c:	f7f7 ff62 	bl	8004814 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200031ac 	.word	0x200031ac
 800c960:	40005c00 	.word	0x40005c00

0800c964 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f6 fc3e 	bl	80031fc <HAL_PCD_Start>
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f944 	bl	800cc14 <USBD_Get_USB_Status>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c990:	7bbb      	ldrb	r3, [r7, #14]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	70fb      	strb	r3, [r7, #3]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70bb      	strb	r3, [r7, #2]
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c9c2:	78bb      	ldrb	r3, [r7, #2]
 800c9c4:	883a      	ldrh	r2, [r7, #0]
 800c9c6:	78f9      	ldrb	r1, [r7, #3]
 800c9c8:	f7f6 fd5a 	bl	8003480 <HAL_PCD_EP_Open>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 f91e 	bl	800cc14 <USBD_Get_USB_Status>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ca00:	78fa      	ldrb	r2, [r7, #3]
 800ca02:	4611      	mov	r1, r2
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7f6 fda1 	bl	800354c <HAL_PCD_EP_Close>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f8ff 	bl	800cc14 <USBD_Get_USB_Status>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	4611      	mov	r1, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7f6 fe61 	bl	800370a <HAL_PCD_EP_SetStall>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f8e0 	bl	800cc14 <USBD_Get_USB_Status>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ca7c:	78fa      	ldrb	r2, [r7, #3]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7f6 fe94 	bl	80037ae <HAL_PCD_EP_ClrStall>
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 f8c1 	bl	800cc14 <USBD_Get_USB_Status>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	460b      	mov	r3, r1
 800caaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cab2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da0c      	bge.n	800cad6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac2:	68f9      	ldr	r1, [r7, #12]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	4613      	mov	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	440b      	add	r3, r1
 800cad0:	3302      	adds	r3, #2
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	e00b      	b.n	800caee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cadc:	68f9      	ldr	r1, [r7, #12]
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	440b      	add	r3, r1
 800cae8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800caec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bc80      	pop	{r7}
 800caf6:	4770      	bx	lr

0800caf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f6 fc8d 	bl	8003436 <HAL_PCD_SetAddress>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f876 	bl	800cc14 <USBD_Get_USB_Status>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b086      	sub	sp, #24
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	461a      	mov	r2, r3
 800cb42:	460b      	mov	r3, r1
 800cb44:	72fb      	strb	r3, [r7, #11]
 800cb46:	4613      	mov	r3, r2
 800cb48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cb58:	893b      	ldrh	r3, [r7, #8]
 800cb5a:	7af9      	ldrb	r1, [r7, #11]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	f7f6 fd91 	bl	8003684 <HAL_PCD_EP_Transmit>
 800cb62:	4603      	mov	r3, r0
 800cb64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb66:	7dfb      	ldrb	r3, [r7, #23]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f853 	bl	800cc14 <USBD_Get_USB_Status>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb72:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	607a      	str	r2, [r7, #4]
 800cb86:	461a      	mov	r2, r3
 800cb88:	460b      	mov	r3, r1
 800cb8a:	72fb      	strb	r3, [r7, #11]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cb9e:	893b      	ldrh	r3, [r7, #8]
 800cba0:	7af9      	ldrb	r1, [r7, #11]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	f7f6 fd1a 	bl	80035dc <HAL_PCD_EP_Receive>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f830 	bl	800cc14 <USBD_Get_USB_Status>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cbd4:	78fa      	ldrb	r2, [r7, #3]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7f6 fd3c 	bl	8003656 <HAL_PCD_EP_GetRxCount>
 800cbde:	4603      	mov	r3, r0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbf0:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <USBD_static_malloc+0x14>)
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bc80      	pop	{r7}
 800cbfa:	4770      	bx	lr
 800cbfc:	20001e24 	.word	0x20001e24

0800cc00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]

}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bc80      	pop	{r7}
 800cc10:	4770      	bx	lr
	...

0800cc14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc22:	79fb      	ldrb	r3, [r7, #7]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d817      	bhi.n	800cc58 <USBD_Get_USB_Status+0x44>
 800cc28:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <USBD_Get_USB_Status+0x1c>)
 800cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2e:	bf00      	nop
 800cc30:	0800cc41 	.word	0x0800cc41
 800cc34:	0800cc47 	.word	0x0800cc47
 800cc38:	0800cc4d 	.word	0x0800cc4d
 800cc3c:	0800cc53 	.word	0x0800cc53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
    break;
 800cc44:	e00b      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc46:	2302      	movs	r3, #2
 800cc48:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4a:	e008      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc50:	e005      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc52:	2302      	movs	r3, #2
 800cc54:	73fb      	strb	r3, [r7, #15]
    break;
 800cc56:	e002      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5c:	bf00      	nop
  }
  return usb_status;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bc80      	pop	{r7}
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop

0800cc6c <_ZdlPv>:
 800cc6c:	f000 b972 	b.w	800cf54 <free>

0800cc70 <_ZdlPvj>:
 800cc70:	f7ff bffc 	b.w	800cc6c <_ZdlPv>

0800cc74 <_Znwj>:
 800cc74:	2801      	cmp	r0, #1
 800cc76:	bf38      	it	cc
 800cc78:	2001      	movcc	r0, #1
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 f960 	bl	800cf44 <malloc>
 800cc84:	b930      	cbnz	r0, 800cc94 <_Znwj+0x20>
 800cc86:	f000 f923 	bl	800ced0 <_ZSt15get_new_handlerv>
 800cc8a:	b908      	cbnz	r0, 800cc90 <_Znwj+0x1c>
 800cc8c:	f000 f928 	bl	800cee0 <abort>
 800cc90:	4780      	blx	r0
 800cc92:	e7f4      	b.n	800cc7e <_Znwj+0xa>
 800cc94:	bd10      	pop	{r4, pc}

0800cc96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800cc96:	68c3      	ldr	r3, [r0, #12]
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	689a      	ldr	r2, [r3, #8]
 800cc9c:	60c2      	str	r2, [r0, #12]
 800cc9e:	b102      	cbz	r2, 800cca2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800cca0:	6050      	str	r0, [r2, #4]
 800cca2:	6842      	ldr	r2, [r0, #4]
 800cca4:	605a      	str	r2, [r3, #4]
 800cca6:	680c      	ldr	r4, [r1, #0]
 800cca8:	4284      	cmp	r4, r0
 800ccaa:	d103      	bne.n	800ccb4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800ccac:	600b      	str	r3, [r1, #0]
 800ccae:	6098      	str	r0, [r3, #8]
 800ccb0:	6043      	str	r3, [r0, #4]
 800ccb2:	bd10      	pop	{r4, pc}
 800ccb4:	6891      	ldr	r1, [r2, #8]
 800ccb6:	4281      	cmp	r1, r0
 800ccb8:	bf0c      	ite	eq
 800ccba:	6093      	streq	r3, [r2, #8]
 800ccbc:	60d3      	strne	r3, [r2, #12]
 800ccbe:	e7f6      	b.n	800ccae <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800ccc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800ccc0:	6883      	ldr	r3, [r0, #8]
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	6082      	str	r2, [r0, #8]
 800ccc8:	b102      	cbz	r2, 800cccc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800ccca:	6050      	str	r0, [r2, #4]
 800cccc:	6842      	ldr	r2, [r0, #4]
 800ccce:	605a      	str	r2, [r3, #4]
 800ccd0:	680c      	ldr	r4, [r1, #0]
 800ccd2:	4284      	cmp	r4, r0
 800ccd4:	d103      	bne.n	800ccde <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800ccd6:	600b      	str	r3, [r1, #0]
 800ccd8:	60d8      	str	r0, [r3, #12]
 800ccda:	6043      	str	r3, [r0, #4]
 800ccdc:	bd10      	pop	{r4, pc}
 800ccde:	68d1      	ldr	r1, [r2, #12]
 800cce0:	4281      	cmp	r1, r0
 800cce2:	bf0c      	ite	eq
 800cce4:	60d3      	streq	r3, [r2, #12]
 800cce6:	6093      	strne	r3, [r2, #8]
 800cce8:	e7f6      	b.n	800ccd8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800ccea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800ccea:	68c3      	ldr	r3, [r0, #12]
 800ccec:	b123      	cbz	r3, 800ccf8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800ccee:	4618      	mov	r0, r3
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1fb      	bne.n	800ccee <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800ccf6:	4770      	bx	lr
 800ccf8:	6843      	ldr	r3, [r0, #4]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	4282      	cmp	r2, r0
 800ccfe:	d102      	bne.n	800cd06 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800cd00:	4618      	mov	r0, r3
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	e7f9      	b.n	800ccfa <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800cd06:	68c2      	ldr	r2, [r0, #12]
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	bf18      	it	ne
 800cd0c:	4618      	movne	r0, r3
 800cd0e:	4770      	bx	lr

0800cd10 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 800cd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	460f      	mov	r7, r1
 800cd16:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	d03e      	beq.n	800cd9e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 800cd20:	2900      	cmp	r1, #0
 800cd22:	d03d      	beq.n	800cda0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800cd24:	460a      	mov	r2, r1
 800cd26:	4613      	mov	r3, r2
 800cd28:	6892      	ldr	r2, [r2, #8]
 800cd2a:	2a00      	cmp	r2, #0
 800cd2c:	d1fb      	bne.n	800cd26 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	68da      	ldr	r2, [r3, #12]
 800cd32:	d04b      	beq.n	800cdcc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 800cd34:	4299      	cmp	r1, r3
 800cd36:	6073      	str	r3, [r6, #4]
 800cd38:	609e      	str	r6, [r3, #8]
 800cd3a:	d027      	beq.n	800cd8c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 800cd3c:	685d      	ldr	r5, [r3, #4]
 800cd3e:	b102      	cbz	r2, 800cd42 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 800cd40:	6055      	str	r5, [r2, #4]
 800cd42:	6858      	ldr	r0, [r3, #4]
 800cd44:	6082      	str	r2, [r0, #8]
 800cd46:	60d9      	str	r1, [r3, #12]
 800cd48:	68e1      	ldr	r1, [r4, #12]
 800cd4a:	604b      	str	r3, [r1, #4]
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	42a1      	cmp	r1, r4
 800cd50:	d11e      	bne.n	800cd90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 800cd52:	607b      	str	r3, [r7, #4]
 800cd54:	4616      	mov	r6, r2
 800cd56:	6861      	ldr	r1, [r4, #4]
 800cd58:	7820      	ldrb	r0, [r4, #0]
 800cd5a:	6059      	str	r1, [r3, #4]
 800cd5c:	7819      	ldrb	r1, [r3, #0]
 800cd5e:	7018      	strb	r0, [r3, #0]
 800cd60:	7021      	strb	r1, [r4, #0]
 800cd62:	7823      	ldrb	r3, [r4, #0]
 800cd64:	b17b      	cbz	r3, 800cd86 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800cd66:	f04f 0800 	mov.w	r8, #0
 800cd6a:	f04f 0901 	mov.w	r9, #1
 800cd6e:	f107 0a04 	add.w	sl, r7, #4
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	42b3      	cmp	r3, r6
 800cd76:	d075      	beq.n	800ce64 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>
 800cd78:	2e00      	cmp	r6, #0
 800cd7a:	d03e      	beq.n	800cdfa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800cd7c:	7833      	ldrb	r3, [r6, #0]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d03b      	beq.n	800cdfa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800cd82:	2301      	movs	r3, #1
 800cd84:	7033      	strb	r3, [r6, #0]
 800cd86:	4620      	mov	r0, r4
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	461d      	mov	r5, r3
 800cd8e:	e7dd      	b.n	800cd4c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 800cd90:	6861      	ldr	r1, [r4, #4]
 800cd92:	6888      	ldr	r0, [r1, #8]
 800cd94:	42a0      	cmp	r0, r4
 800cd96:	bf0c      	ite	eq
 800cd98:	608b      	streq	r3, [r1, #8]
 800cd9a:	60cb      	strne	r3, [r1, #12]
 800cd9c:	e7da      	b.n	800cd54 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 800cd9e:	460e      	mov	r6, r1
 800cda0:	6865      	ldr	r5, [r4, #4]
 800cda2:	b106      	cbz	r6, 800cda6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 800cda4:	6075      	str	r5, [r6, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d111      	bne.n	800cdd0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 800cdac:	607e      	str	r6, [r7, #4]
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	d103      	bne.n	800cdbc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800cdb4:	68e3      	ldr	r3, [r4, #12]
 800cdb6:	b993      	cbnz	r3, 800cdde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	60bb      	str	r3, [r7, #8]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	d1cf      	bne.n	800cd62 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800cdc2:	68a3      	ldr	r3, [r4, #8]
 800cdc4:	b993      	cbnz	r3, 800cdec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 800cdc6:	6863      	ldr	r3, [r4, #4]
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	e7ca      	b.n	800cd62 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800cdcc:	4616      	mov	r6, r2
 800cdce:	e7e7      	b.n	800cda0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800cdd0:	6863      	ldr	r3, [r4, #4]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	42a2      	cmp	r2, r4
 800cdd6:	bf0c      	ite	eq
 800cdd8:	609e      	streq	r6, [r3, #8]
 800cdda:	60de      	strne	r6, [r3, #12]
 800cddc:	e7e7      	b.n	800cdae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 800cdde:	4633      	mov	r3, r6
 800cde0:	461a      	mov	r2, r3
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1fb      	bne.n	800cde0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 800cde8:	60ba      	str	r2, [r7, #8]
 800cdea:	e7e7      	b.n	800cdbc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800cdec:	4633      	mov	r3, r6
 800cdee:	461a      	mov	r2, r3
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1fb      	bne.n	800cdee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 800cdf6:	60fa      	str	r2, [r7, #12]
 800cdf8:	e7b3      	b.n	800cd62 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800cdfa:	68a8      	ldr	r0, [r5, #8]
 800cdfc:	42b0      	cmp	r0, r6
 800cdfe:	d134      	bne.n	800ce6a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15a>
 800ce00:	68e8      	ldr	r0, [r5, #12]
 800ce02:	7803      	ldrb	r3, [r0, #0]
 800ce04:	b93b      	cbnz	r3, 800ce16 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x106>
 800ce06:	f880 9000 	strb.w	r9, [r0]
 800ce0a:	4651      	mov	r1, sl
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	702b      	strb	r3, [r5, #0]
 800ce10:	f7ff ff41 	bl	800cc96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800ce14:	68e8      	ldr	r0, [r5, #12]
 800ce16:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ce1a:	b112      	cbz	r2, 800ce22 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x112>
 800ce1c:	7811      	ldrb	r1, [r2, #0]
 800ce1e:	2901      	cmp	r1, #1
 800ce20:	d109      	bne.n	800ce36 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800ce22:	b113      	cbz	r3, 800ce2a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800ce24:	7819      	ldrb	r1, [r3, #0]
 800ce26:	2901      	cmp	r1, #1
 800ce28:	d105      	bne.n	800ce36 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800ce2a:	686b      	ldr	r3, [r5, #4]
 800ce2c:	462e      	mov	r6, r5
 800ce2e:	f880 8000 	strb.w	r8, [r0]
 800ce32:	461d      	mov	r5, r3
 800ce34:	e79d      	b.n	800cd72 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x62>
 800ce36:	b113      	cbz	r3, 800ce3e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12e>
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d107      	bne.n	800ce4e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13e>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	7013      	strb	r3, [r2, #0]
 800ce42:	2300      	movs	r3, #0
 800ce44:	4651      	mov	r1, sl
 800ce46:	7003      	strb	r3, [r0, #0]
 800ce48:	f7ff ff3a 	bl	800ccc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800ce4c:	68e8      	ldr	r0, [r5, #12]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	782b      	ldrb	r3, [r5, #0]
 800ce52:	7003      	strb	r3, [r0, #0]
 800ce54:	68c3      	ldr	r3, [r0, #12]
 800ce56:	702a      	strb	r2, [r5, #0]
 800ce58:	b103      	cbz	r3, 800ce5c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14c>
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	4651      	mov	r1, sl
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f7ff ff19 	bl	800cc96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	d18c      	bne.n	800cd82 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x72>
 800ce68:	e78d      	b.n	800cd86 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800ce6a:	7803      	ldrb	r3, [r0, #0]
 800ce6c:	b93b      	cbnz	r3, 800ce7e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16e>
 800ce6e:	f880 9000 	strb.w	r9, [r0]
 800ce72:	4651      	mov	r1, sl
 800ce74:	4628      	mov	r0, r5
 800ce76:	702b      	strb	r3, [r5, #0]
 800ce78:	f7ff ff22 	bl	800ccc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800ce7c:	68a8      	ldr	r0, [r5, #8]
 800ce7e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ce82:	b112      	cbz	r2, 800ce8a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 800ce84:	7811      	ldrb	r1, [r2, #0]
 800ce86:	2901      	cmp	r1, #1
 800ce88:	d104      	bne.n	800ce94 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x184>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0cd      	beq.n	800ce2a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800ce8e:	7819      	ldrb	r1, [r3, #0]
 800ce90:	2901      	cmp	r1, #1
 800ce92:	d0ca      	beq.n	800ce2a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800ce94:	b113      	cbz	r3, 800ce9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18c>
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d107      	bne.n	800ceac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19c>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	7013      	strb	r3, [r2, #0]
 800cea0:	2300      	movs	r3, #0
 800cea2:	4651      	mov	r1, sl
 800cea4:	7003      	strb	r3, [r0, #0]
 800cea6:	f7ff fef6 	bl	800cc96 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800ceaa:	68a8      	ldr	r0, [r5, #8]
 800ceac:	2201      	movs	r2, #1
 800ceae:	782b      	ldrb	r3, [r5, #0]
 800ceb0:	7003      	strb	r3, [r0, #0]
 800ceb2:	6883      	ldr	r3, [r0, #8]
 800ceb4:	702a      	strb	r2, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
 800ceb8:	701a      	strb	r2, [r3, #0]
 800ceba:	4651      	mov	r1, sl
 800cebc:	4628      	mov	r0, r5
 800cebe:	f7ff feff 	bl	800ccc0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800cec2:	e7cf      	b.n	800ce64 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>

0800cec4 <_ZSt17__throw_bad_allocv>:
 800cec4:	b508      	push	{r3, lr}
 800cec6:	f000 f80b 	bl	800cee0 <abort>

0800ceca <_ZSt20__throw_length_errorPKc>:
 800ceca:	b508      	push	{r3, lr}
 800cecc:	f000 f808 	bl	800cee0 <abort>

0800ced0 <_ZSt15get_new_handlerv>:
 800ced0:	4b02      	ldr	r3, [pc, #8]	; (800cedc <_ZSt15get_new_handlerv+0xc>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	f3bf 8f5b 	dmb	ish
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	20002044 	.word	0x20002044

0800cee0 <abort>:
 800cee0:	2006      	movs	r0, #6
 800cee2:	b508      	push	{r3, lr}
 800cee4:	f000 f9b6 	bl	800d254 <raise>
 800cee8:	2001      	movs	r0, #1
 800ceea:	f7f5 f8da 	bl	80020a2 <_exit>
	...

0800cef0 <__errno>:
 800cef0:	4b01      	ldr	r3, [pc, #4]	; (800cef8 <__errno+0x8>)
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	20000198 	.word	0x20000198

0800cefc <__libc_init_array>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	2600      	movs	r6, #0
 800cf00:	4d0c      	ldr	r5, [pc, #48]	; (800cf34 <__libc_init_array+0x38>)
 800cf02:	4c0d      	ldr	r4, [pc, #52]	; (800cf38 <__libc_init_array+0x3c>)
 800cf04:	1b64      	subs	r4, r4, r5
 800cf06:	10a4      	asrs	r4, r4, #2
 800cf08:	42a6      	cmp	r6, r4
 800cf0a:	d109      	bne.n	800cf20 <__libc_init_array+0x24>
 800cf0c:	f000 f9ca 	bl	800d2a4 <_init>
 800cf10:	2600      	movs	r6, #0
 800cf12:	4d0a      	ldr	r5, [pc, #40]	; (800cf3c <__libc_init_array+0x40>)
 800cf14:	4c0a      	ldr	r4, [pc, #40]	; (800cf40 <__libc_init_array+0x44>)
 800cf16:	1b64      	subs	r4, r4, r5
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	42a6      	cmp	r6, r4
 800cf1c:	d105      	bne.n	800cf2a <__libc_init_array+0x2e>
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf24:	4798      	blx	r3
 800cf26:	3601      	adds	r6, #1
 800cf28:	e7ee      	b.n	800cf08 <__libc_init_array+0xc>
 800cf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2e:	4798      	blx	r3
 800cf30:	3601      	adds	r6, #1
 800cf32:	e7f2      	b.n	800cf1a <__libc_init_array+0x1e>
 800cf34:	0800d444 	.word	0x0800d444
 800cf38:	0800d444 	.word	0x0800d444
 800cf3c:	0800d444 	.word	0x0800d444
 800cf40:	0800d450 	.word	0x0800d450

0800cf44 <malloc>:
 800cf44:	4b02      	ldr	r3, [pc, #8]	; (800cf50 <malloc+0xc>)
 800cf46:	4601      	mov	r1, r0
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	f000 b887 	b.w	800d05c <_malloc_r>
 800cf4e:	bf00      	nop
 800cf50:	20000198 	.word	0x20000198

0800cf54 <free>:
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <free+0xc>)
 800cf56:	4601      	mov	r1, r0
 800cf58:	6818      	ldr	r0, [r3, #0]
 800cf5a:	f000 b833 	b.w	800cfc4 <_free_r>
 800cf5e:	bf00      	nop
 800cf60:	20000198 	.word	0x20000198

0800cf64 <memcpy>:
 800cf64:	440a      	add	r2, r1
 800cf66:	4291      	cmp	r1, r2
 800cf68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf6c:	d100      	bne.n	800cf70 <memcpy+0xc>
 800cf6e:	4770      	bx	lr
 800cf70:	b510      	push	{r4, lr}
 800cf72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf76:	4291      	cmp	r1, r2
 800cf78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf7c:	d1f9      	bne.n	800cf72 <memcpy+0xe>
 800cf7e:	bd10      	pop	{r4, pc}

0800cf80 <memmove>:
 800cf80:	4288      	cmp	r0, r1
 800cf82:	b510      	push	{r4, lr}
 800cf84:	eb01 0402 	add.w	r4, r1, r2
 800cf88:	d902      	bls.n	800cf90 <memmove+0x10>
 800cf8a:	4284      	cmp	r4, r0
 800cf8c:	4623      	mov	r3, r4
 800cf8e:	d807      	bhi.n	800cfa0 <memmove+0x20>
 800cf90:	1e43      	subs	r3, r0, #1
 800cf92:	42a1      	cmp	r1, r4
 800cf94:	d008      	beq.n	800cfa8 <memmove+0x28>
 800cf96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf9e:	e7f8      	b.n	800cf92 <memmove+0x12>
 800cfa0:	4601      	mov	r1, r0
 800cfa2:	4402      	add	r2, r0
 800cfa4:	428a      	cmp	r2, r1
 800cfa6:	d100      	bne.n	800cfaa <memmove+0x2a>
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfb2:	e7f7      	b.n	800cfa4 <memmove+0x24>

0800cfb4 <memset>:
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	4402      	add	r2, r0
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d100      	bne.n	800cfbe <memset+0xa>
 800cfbc:	4770      	bx	lr
 800cfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800cfc2:	e7f9      	b.n	800cfb8 <memset+0x4>

0800cfc4 <_free_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	d043      	beq.n	800d054 <_free_r+0x90>
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f0c      	subs	r4, r1, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfb8      	it	lt
 800cfd6:	18e4      	addlt	r4, r4, r3
 800cfd8:	f000 f958 	bl	800d28c <__malloc_lock>
 800cfdc:	4a1e      	ldr	r2, [pc, #120]	; (800d058 <_free_r+0x94>)
 800cfde:	6813      	ldr	r3, [r2, #0]
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	b933      	cbnz	r3, 800cff2 <_free_r+0x2e>
 800cfe4:	6063      	str	r3, [r4, #4]
 800cfe6:	6014      	str	r4, [r2, #0]
 800cfe8:	4628      	mov	r0, r5
 800cfea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfee:	f000 b953 	b.w	800d298 <__malloc_unlock>
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	d90a      	bls.n	800d00c <_free_r+0x48>
 800cff6:	6821      	ldr	r1, [r4, #0]
 800cff8:	1862      	adds	r2, r4, r1
 800cffa:	4293      	cmp	r3, r2
 800cffc:	bf01      	itttt	eq
 800cffe:	681a      	ldreq	r2, [r3, #0]
 800d000:	685b      	ldreq	r3, [r3, #4]
 800d002:	1852      	addeq	r2, r2, r1
 800d004:	6022      	streq	r2, [r4, #0]
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	6004      	str	r4, [r0, #0]
 800d00a:	e7ed      	b.n	800cfe8 <_free_r+0x24>
 800d00c:	461a      	mov	r2, r3
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	b10b      	cbz	r3, 800d016 <_free_r+0x52>
 800d012:	42a3      	cmp	r3, r4
 800d014:	d9fa      	bls.n	800d00c <_free_r+0x48>
 800d016:	6811      	ldr	r1, [r2, #0]
 800d018:	1850      	adds	r0, r2, r1
 800d01a:	42a0      	cmp	r0, r4
 800d01c:	d10b      	bne.n	800d036 <_free_r+0x72>
 800d01e:	6820      	ldr	r0, [r4, #0]
 800d020:	4401      	add	r1, r0
 800d022:	1850      	adds	r0, r2, r1
 800d024:	4283      	cmp	r3, r0
 800d026:	6011      	str	r1, [r2, #0]
 800d028:	d1de      	bne.n	800cfe8 <_free_r+0x24>
 800d02a:	6818      	ldr	r0, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	4401      	add	r1, r0
 800d030:	6011      	str	r1, [r2, #0]
 800d032:	6053      	str	r3, [r2, #4]
 800d034:	e7d8      	b.n	800cfe8 <_free_r+0x24>
 800d036:	d902      	bls.n	800d03e <_free_r+0x7a>
 800d038:	230c      	movs	r3, #12
 800d03a:	602b      	str	r3, [r5, #0]
 800d03c:	e7d4      	b.n	800cfe8 <_free_r+0x24>
 800d03e:	6820      	ldr	r0, [r4, #0]
 800d040:	1821      	adds	r1, r4, r0
 800d042:	428b      	cmp	r3, r1
 800d044:	bf01      	itttt	eq
 800d046:	6819      	ldreq	r1, [r3, #0]
 800d048:	685b      	ldreq	r3, [r3, #4]
 800d04a:	1809      	addeq	r1, r1, r0
 800d04c:	6021      	streq	r1, [r4, #0]
 800d04e:	6063      	str	r3, [r4, #4]
 800d050:	6054      	str	r4, [r2, #4]
 800d052:	e7c9      	b.n	800cfe8 <_free_r+0x24>
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	bf00      	nop
 800d058:	20002048 	.word	0x20002048

0800d05c <_malloc_r>:
 800d05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05e:	1ccd      	adds	r5, r1, #3
 800d060:	f025 0503 	bic.w	r5, r5, #3
 800d064:	3508      	adds	r5, #8
 800d066:	2d0c      	cmp	r5, #12
 800d068:	bf38      	it	cc
 800d06a:	250c      	movcc	r5, #12
 800d06c:	2d00      	cmp	r5, #0
 800d06e:	4606      	mov	r6, r0
 800d070:	db01      	blt.n	800d076 <_malloc_r+0x1a>
 800d072:	42a9      	cmp	r1, r5
 800d074:	d903      	bls.n	800d07e <_malloc_r+0x22>
 800d076:	230c      	movs	r3, #12
 800d078:	6033      	str	r3, [r6, #0]
 800d07a:	2000      	movs	r0, #0
 800d07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d07e:	f000 f905 	bl	800d28c <__malloc_lock>
 800d082:	4921      	ldr	r1, [pc, #132]	; (800d108 <_malloc_r+0xac>)
 800d084:	680a      	ldr	r2, [r1, #0]
 800d086:	4614      	mov	r4, r2
 800d088:	b99c      	cbnz	r4, 800d0b2 <_malloc_r+0x56>
 800d08a:	4f20      	ldr	r7, [pc, #128]	; (800d10c <_malloc_r+0xb0>)
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	b923      	cbnz	r3, 800d09a <_malloc_r+0x3e>
 800d090:	4621      	mov	r1, r4
 800d092:	4630      	mov	r0, r6
 800d094:	f000 f8a6 	bl	800d1e4 <_sbrk_r>
 800d098:	6038      	str	r0, [r7, #0]
 800d09a:	4629      	mov	r1, r5
 800d09c:	4630      	mov	r0, r6
 800d09e:	f000 f8a1 	bl	800d1e4 <_sbrk_r>
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	d123      	bne.n	800d0ee <_malloc_r+0x92>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	6033      	str	r3, [r6, #0]
 800d0ac:	f000 f8f4 	bl	800d298 <__malloc_unlock>
 800d0b0:	e7e3      	b.n	800d07a <_malloc_r+0x1e>
 800d0b2:	6823      	ldr	r3, [r4, #0]
 800d0b4:	1b5b      	subs	r3, r3, r5
 800d0b6:	d417      	bmi.n	800d0e8 <_malloc_r+0x8c>
 800d0b8:	2b0b      	cmp	r3, #11
 800d0ba:	d903      	bls.n	800d0c4 <_malloc_r+0x68>
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	441c      	add	r4, r3
 800d0c0:	6025      	str	r5, [r4, #0]
 800d0c2:	e004      	b.n	800d0ce <_malloc_r+0x72>
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	42a2      	cmp	r2, r4
 800d0c8:	bf0c      	ite	eq
 800d0ca:	600b      	streq	r3, [r1, #0]
 800d0cc:	6053      	strne	r3, [r2, #4]
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f000 f8e2 	bl	800d298 <__malloc_unlock>
 800d0d4:	f104 000b 	add.w	r0, r4, #11
 800d0d8:	1d23      	adds	r3, r4, #4
 800d0da:	f020 0007 	bic.w	r0, r0, #7
 800d0de:	1ac2      	subs	r2, r0, r3
 800d0e0:	d0cc      	beq.n	800d07c <_malloc_r+0x20>
 800d0e2:	1a1b      	subs	r3, r3, r0
 800d0e4:	50a3      	str	r3, [r4, r2]
 800d0e6:	e7c9      	b.n	800d07c <_malloc_r+0x20>
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	6864      	ldr	r4, [r4, #4]
 800d0ec:	e7cc      	b.n	800d088 <_malloc_r+0x2c>
 800d0ee:	1cc4      	adds	r4, r0, #3
 800d0f0:	f024 0403 	bic.w	r4, r4, #3
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	d0e3      	beq.n	800d0c0 <_malloc_r+0x64>
 800d0f8:	1a21      	subs	r1, r4, r0
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 f872 	bl	800d1e4 <_sbrk_r>
 800d100:	3001      	adds	r0, #1
 800d102:	d1dd      	bne.n	800d0c0 <_malloc_r+0x64>
 800d104:	e7cf      	b.n	800d0a6 <_malloc_r+0x4a>
 800d106:	bf00      	nop
 800d108:	20002048 	.word	0x20002048
 800d10c:	2000204c 	.word	0x2000204c

0800d110 <cleanup_glue>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	460c      	mov	r4, r1
 800d114:	6809      	ldr	r1, [r1, #0]
 800d116:	4605      	mov	r5, r0
 800d118:	b109      	cbz	r1, 800d11e <cleanup_glue+0xe>
 800d11a:	f7ff fff9 	bl	800d110 <cleanup_glue>
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d126:	f7ff bf4d 	b.w	800cfc4 <_free_r>
	...

0800d12c <_reclaim_reent>:
 800d12c:	4b2c      	ldr	r3, [pc, #176]	; (800d1e0 <_reclaim_reent+0xb4>)
 800d12e:	b570      	push	{r4, r5, r6, lr}
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4604      	mov	r4, r0
 800d134:	4283      	cmp	r3, r0
 800d136:	d051      	beq.n	800d1dc <_reclaim_reent+0xb0>
 800d138:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d13a:	b143      	cbz	r3, 800d14e <_reclaim_reent+0x22>
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d14a      	bne.n	800d1d8 <_reclaim_reent+0xac>
 800d142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d144:	6819      	ldr	r1, [r3, #0]
 800d146:	b111      	cbz	r1, 800d14e <_reclaim_reent+0x22>
 800d148:	4620      	mov	r0, r4
 800d14a:	f7ff ff3b 	bl	800cfc4 <_free_r>
 800d14e:	6961      	ldr	r1, [r4, #20]
 800d150:	b111      	cbz	r1, 800d158 <_reclaim_reent+0x2c>
 800d152:	4620      	mov	r0, r4
 800d154:	f7ff ff36 	bl	800cfc4 <_free_r>
 800d158:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d15a:	b111      	cbz	r1, 800d162 <_reclaim_reent+0x36>
 800d15c:	4620      	mov	r0, r4
 800d15e:	f7ff ff31 	bl	800cfc4 <_free_r>
 800d162:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d164:	b111      	cbz	r1, 800d16c <_reclaim_reent+0x40>
 800d166:	4620      	mov	r0, r4
 800d168:	f7ff ff2c 	bl	800cfc4 <_free_r>
 800d16c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d16e:	b111      	cbz	r1, 800d176 <_reclaim_reent+0x4a>
 800d170:	4620      	mov	r0, r4
 800d172:	f7ff ff27 	bl	800cfc4 <_free_r>
 800d176:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d178:	b111      	cbz	r1, 800d180 <_reclaim_reent+0x54>
 800d17a:	4620      	mov	r0, r4
 800d17c:	f7ff ff22 	bl	800cfc4 <_free_r>
 800d180:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d182:	b111      	cbz	r1, 800d18a <_reclaim_reent+0x5e>
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff ff1d 	bl	800cfc4 <_free_r>
 800d18a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d18c:	b111      	cbz	r1, 800d194 <_reclaim_reent+0x68>
 800d18e:	4620      	mov	r0, r4
 800d190:	f7ff ff18 	bl	800cfc4 <_free_r>
 800d194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d196:	b111      	cbz	r1, 800d19e <_reclaim_reent+0x72>
 800d198:	4620      	mov	r0, r4
 800d19a:	f7ff ff13 	bl	800cfc4 <_free_r>
 800d19e:	69a3      	ldr	r3, [r4, #24]
 800d1a0:	b1e3      	cbz	r3, 800d1dc <_reclaim_reent+0xb0>
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d1a6:	4798      	blx	r3
 800d1a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d1aa:	b1b9      	cbz	r1, 800d1dc <_reclaim_reent+0xb0>
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1b2:	f7ff bfad 	b.w	800d110 <cleanup_glue>
 800d1b6:	5949      	ldr	r1, [r1, r5]
 800d1b8:	b941      	cbnz	r1, 800d1cc <_reclaim_reent+0xa0>
 800d1ba:	3504      	adds	r5, #4
 800d1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1be:	2d80      	cmp	r5, #128	; 0x80
 800d1c0:	68d9      	ldr	r1, [r3, #12]
 800d1c2:	d1f8      	bne.n	800d1b6 <_reclaim_reent+0x8a>
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7ff fefd 	bl	800cfc4 <_free_r>
 800d1ca:	e7ba      	b.n	800d142 <_reclaim_reent+0x16>
 800d1cc:	680e      	ldr	r6, [r1, #0]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7ff fef8 	bl	800cfc4 <_free_r>
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	e7ef      	b.n	800d1b8 <_reclaim_reent+0x8c>
 800d1d8:	2500      	movs	r5, #0
 800d1da:	e7ef      	b.n	800d1bc <_reclaim_reent+0x90>
 800d1dc:	bd70      	pop	{r4, r5, r6, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000198 	.word	0x20000198

0800d1e4 <_sbrk_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4d05      	ldr	r5, [pc, #20]	; (800d200 <_sbrk_r+0x1c>)
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	f7f4 ff62 	bl	80020b8 <_sbrk>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_sbrk_r+0x1a>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_sbrk_r+0x1a>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	20003498 	.word	0x20003498

0800d204 <_raise_r>:
 800d204:	291f      	cmp	r1, #31
 800d206:	b538      	push	{r3, r4, r5, lr}
 800d208:	4604      	mov	r4, r0
 800d20a:	460d      	mov	r5, r1
 800d20c:	d904      	bls.n	800d218 <_raise_r+0x14>
 800d20e:	2316      	movs	r3, #22
 800d210:	6003      	str	r3, [r0, #0]
 800d212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d21a:	b112      	cbz	r2, 800d222 <_raise_r+0x1e>
 800d21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d220:	b94b      	cbnz	r3, 800d236 <_raise_r+0x32>
 800d222:	4620      	mov	r0, r4
 800d224:	f000 f830 	bl	800d288 <_getpid_r>
 800d228:	462a      	mov	r2, r5
 800d22a:	4601      	mov	r1, r0
 800d22c:	4620      	mov	r0, r4
 800d22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d232:	f000 b817 	b.w	800d264 <_kill_r>
 800d236:	2b01      	cmp	r3, #1
 800d238:	d00a      	beq.n	800d250 <_raise_r+0x4c>
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	d103      	bne.n	800d246 <_raise_r+0x42>
 800d23e:	2316      	movs	r3, #22
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	2001      	movs	r0, #1
 800d244:	e7e7      	b.n	800d216 <_raise_r+0x12>
 800d246:	2400      	movs	r4, #0
 800d248:	4628      	mov	r0, r5
 800d24a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d24e:	4798      	blx	r3
 800d250:	2000      	movs	r0, #0
 800d252:	e7e0      	b.n	800d216 <_raise_r+0x12>

0800d254 <raise>:
 800d254:	4b02      	ldr	r3, [pc, #8]	; (800d260 <raise+0xc>)
 800d256:	4601      	mov	r1, r0
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	f7ff bfd3 	b.w	800d204 <_raise_r>
 800d25e:	bf00      	nop
 800d260:	20000198 	.word	0x20000198

0800d264 <_kill_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	2300      	movs	r3, #0
 800d268:	4d06      	ldr	r5, [pc, #24]	; (800d284 <_kill_r+0x20>)
 800d26a:	4604      	mov	r4, r0
 800d26c:	4608      	mov	r0, r1
 800d26e:	4611      	mov	r1, r2
 800d270:	602b      	str	r3, [r5, #0]
 800d272:	f7f4 ff06 	bl	8002082 <_kill>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d102      	bne.n	800d280 <_kill_r+0x1c>
 800d27a:	682b      	ldr	r3, [r5, #0]
 800d27c:	b103      	cbz	r3, 800d280 <_kill_r+0x1c>
 800d27e:	6023      	str	r3, [r4, #0]
 800d280:	bd38      	pop	{r3, r4, r5, pc}
 800d282:	bf00      	nop
 800d284:	20003498 	.word	0x20003498

0800d288 <_getpid_r>:
 800d288:	f7f4 bef4 	b.w	8002074 <_getpid>

0800d28c <__malloc_lock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	; (800d294 <__malloc_lock+0x8>)
 800d28e:	f7f4 bfce 	b.w	800222e <__retarget_lock_acquire_recursive>
 800d292:	bf00      	nop
 800d294:	20000440 	.word	0x20000440

0800d298 <__malloc_unlock>:
 800d298:	4801      	ldr	r0, [pc, #4]	; (800d2a0 <__malloc_unlock+0x8>)
 800d29a:	f7f4 bfdc 	b.w	8002256 <__retarget_lock_release_recursive>
 800d29e:	bf00      	nop
 800d2a0:	20000440 	.word	0x20000440

0800d2a4 <_init>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr

0800d2b0 <_fini>:
 800d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b2:	bf00      	nop
 800d2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2b6:	bc08      	pop	{r3}
 800d2b8:	469e      	mov	lr, r3
 800d2ba:	4770      	bx	lr
