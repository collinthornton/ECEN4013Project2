
CustomBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017258  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000095c  08017398  08017398  00027398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cf4  08017cf4  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  08017cf4  08017cf4  00027cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cfc  08017cfc  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017cfc  08017cfc  00027cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08017d08  08017d08  00027d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  08017d14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001968  200003f8  0801810c  000303f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d60  0801810c  00031d60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000428ec  00000000  00000000  00030421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dcd  00000000  00000000  00072d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002000  00000000  00000000  00079ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  0007bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205d2  00000000  00000000  0007d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000271b8  00000000  00000000  0009deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9c3a  00000000  00000000  000c506a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016eca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5fc  00000000  00000000  0016ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003f8 	.word	0x200003f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08017380 	.word	0x08017380

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003fc 	.word	0x200003fc
 800017c:	08017380 	.word	0x08017380

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010b4:	f000 b9a6 	b.w	8001404 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f83e 	bl	8001140 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_d2lz>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	460c      	mov	r4, r1
 80010d4:	4605      	mov	r5, r0
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff fc85 	bl	80009ec <__aeabi_dcmplt>
 80010e2:	b928      	cbnz	r0, 80010f0 <__aeabi_d2lz+0x20>
 80010e4:	4628      	mov	r0, r5
 80010e6:	4621      	mov	r1, r4
 80010e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ec:	f000 b80a 	b.w	8001104 <__aeabi_d2ulz>
 80010f0:	4628      	mov	r0, r5
 80010f2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010f6:	f000 f805 	bl	8001104 <__aeabi_d2ulz>
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	bd38      	pop	{r3, r4, r5, pc}
 8001102:	bf00      	nop

08001104 <__aeabi_d2ulz>:
 8001104:	b5d0      	push	{r4, r6, r7, lr}
 8001106:	2200      	movs	r2, #0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__aeabi_d2ulz+0x34>)
 800110a:	4606      	mov	r6, r0
 800110c:	460f      	mov	r7, r1
 800110e:	f7ff f9fb 	bl	8000508 <__aeabi_dmul>
 8001112:	f7ff fcd1 	bl	8000ab8 <__aeabi_d2uiz>
 8001116:	4604      	mov	r4, r0
 8001118:	f7ff f97c 	bl	8000414 <__aeabi_ui2d>
 800111c:	2200      	movs	r2, #0
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <__aeabi_d2ulz+0x38>)
 8001120:	f7ff f9f2 	bl	8000508 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4630      	mov	r0, r6
 800112a:	4639      	mov	r1, r7
 800112c:	f7ff f834 	bl	8000198 <__aeabi_dsub>
 8001130:	f7ff fcc2 	bl	8000ab8 <__aeabi_d2uiz>
 8001134:	4621      	mov	r1, r4
 8001136:	bdd0      	pop	{r4, r6, r7, pc}
 8001138:	3df00000 	.word	0x3df00000
 800113c:	41f00000 	.word	0x41f00000

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	9e08      	ldr	r6, [sp, #32]
 8001146:	460d      	mov	r5, r1
 8001148:	4604      	mov	r4, r0
 800114a:	468e      	mov	lr, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8083 	bne.w	8001258 <__udivmoddi4+0x118>
 8001152:	428a      	cmp	r2, r1
 8001154:	4617      	mov	r7, r2
 8001156:	d947      	bls.n	80011e8 <__udivmoddi4+0xa8>
 8001158:	fab2 f382 	clz	r3, r2
 800115c:	b14b      	cbz	r3, 8001172 <__udivmoddi4+0x32>
 800115e:	f1c3 0120 	rsb	r1, r3, #32
 8001162:	fa05 fe03 	lsl.w	lr, r5, r3
 8001166:	fa20 f101 	lsr.w	r1, r0, r1
 800116a:	409f      	lsls	r7, r3
 800116c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001176:	fbbe fcf8 	udiv	ip, lr, r8
 800117a:	fa1f f987 	uxth.w	r9, r7
 800117e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001182:	fb0c f009 	mul.w	r0, ip, r9
 8001186:	0c21      	lsrs	r1, r4, #16
 8001188:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x66>
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001196:	f080 8118 	bcs.w	80013ca <__udivmoddi4+0x28a>
 800119a:	4290      	cmp	r0, r2
 800119c:	f240 8115 	bls.w	80013ca <__udivmoddi4+0x28a>
 80011a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a4:	443a      	add	r2, r7
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011ac:	fb08 2210 	mls	r2, r8, r0, r2
 80011b0:	fb00 f109 	mul.w	r1, r0, r9
 80011b4:	b2a4      	uxth	r4, r4
 80011b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x92>
 80011be:	193c      	adds	r4, r7, r4
 80011c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c4:	f080 8103 	bcs.w	80013ce <__udivmoddi4+0x28e>
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	f240 8100 	bls.w	80013ce <__udivmoddi4+0x28e>
 80011ce:	3802      	subs	r0, #2
 80011d0:	443c      	add	r4, r7
 80011d2:	1a64      	subs	r4, r4, r1
 80011d4:	2100      	movs	r1, #0
 80011d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011da:	b11e      	cbz	r6, 80011e4 <__udivmoddi4+0xa4>
 80011dc:	2200      	movs	r2, #0
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	e9c6 4200 	strd	r4, r2, [r6]
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	b902      	cbnz	r2, 80011ec <__udivmoddi4+0xac>
 80011ea:	deff      	udf	#255	; 0xff
 80011ec:	fab2 f382 	clz	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <__udivmoddi4+0x154>
 80011f4:	1a8d      	subs	r5, r1, r2
 80011f6:	2101      	movs	r1, #1
 80011f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011fc:	fa1f f882 	uxth.w	r8, r2
 8001200:	fbb5 fcfe 	udiv	ip, r5, lr
 8001204:	fb0e 551c 	mls	r5, lr, ip, r5
 8001208:	fb08 f00c 	mul.w	r0, r8, ip
 800120c:	0c22      	lsrs	r2, r4, #16
 800120e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001212:	42a8      	cmp	r0, r5
 8001214:	d907      	bls.n	8001226 <__udivmoddi4+0xe6>
 8001216:	197d      	adds	r5, r7, r5
 8001218:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0xe4>
 800121e:	42a8      	cmp	r0, r5
 8001220:	f200 80e9 	bhi.w	80013f6 <__udivmoddi4+0x2b6>
 8001224:	4694      	mov	ip, r2
 8001226:	1a2d      	subs	r5, r5, r0
 8001228:	fbb5 f0fe 	udiv	r0, r5, lr
 800122c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001230:	fb08 f800 	mul.w	r8, r8, r0
 8001234:	b2a4      	uxth	r4, r4
 8001236:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800123a:	45a0      	cmp	r8, r4
 800123c:	d907      	bls.n	800124e <__udivmoddi4+0x10e>
 800123e:	193c      	adds	r4, r7, r4
 8001240:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001244:	d202      	bcs.n	800124c <__udivmoddi4+0x10c>
 8001246:	45a0      	cmp	r8, r4
 8001248:	f200 80d9 	bhi.w	80013fe <__udivmoddi4+0x2be>
 800124c:	4610      	mov	r0, r2
 800124e:	eba4 0408 	sub.w	r4, r4, r8
 8001252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001256:	e7c0      	b.n	80011da <__udivmoddi4+0x9a>
 8001258:	428b      	cmp	r3, r1
 800125a:	d908      	bls.n	800126e <__udivmoddi4+0x12e>
 800125c:	2e00      	cmp	r6, #0
 800125e:	f000 80b1 	beq.w	80013c4 <__udivmoddi4+0x284>
 8001262:	2100      	movs	r1, #0
 8001264:	e9c6 0500 	strd	r0, r5, [r6]
 8001268:	4608      	mov	r0, r1
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f183 	clz	r1, r3
 8001272:	2900      	cmp	r1, #0
 8001274:	d14b      	bne.n	800130e <__udivmoddi4+0x1ce>
 8001276:	42ab      	cmp	r3, r5
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0x140>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80b9 	bhi.w	80013f2 <__udivmoddi4+0x2b2>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb65 0303 	sbc.w	r3, r5, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469e      	mov	lr, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0aa      	beq.n	80011e4 <__udivmoddi4+0xa4>
 800128e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001292:	e7a7      	b.n	80011e4 <__udivmoddi4+0xa4>
 8001294:	409f      	lsls	r7, r3
 8001296:	f1c3 0220 	rsb	r2, r3, #32
 800129a:	40d1      	lsrs	r1, r2
 800129c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012a4:	fa1f f887 	uxth.w	r8, r7
 80012a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012ac:	fa24 f202 	lsr.w	r2, r4, r2
 80012b0:	409d      	lsls	r5, r3
 80012b2:	fb00 fc08 	mul.w	ip, r0, r8
 80012b6:	432a      	orrs	r2, r5
 80012b8:	0c15      	lsrs	r5, r2, #16
 80012ba:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012be:	45ac      	cmp	ip, r5
 80012c0:	fa04 f403 	lsl.w	r4, r4, r3
 80012c4:	d909      	bls.n	80012da <__udivmoddi4+0x19a>
 80012c6:	197d      	adds	r5, r7, r5
 80012c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80012cc:	f080 808f 	bcs.w	80013ee <__udivmoddi4+0x2ae>
 80012d0:	45ac      	cmp	ip, r5
 80012d2:	f240 808c 	bls.w	80013ee <__udivmoddi4+0x2ae>
 80012d6:	3802      	subs	r0, #2
 80012d8:	443d      	add	r5, r7
 80012da:	eba5 050c 	sub.w	r5, r5, ip
 80012de:	fbb5 f1fe 	udiv	r1, r5, lr
 80012e2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012e6:	fb01 f908 	mul.w	r9, r1, r8
 80012ea:	b295      	uxth	r5, r2
 80012ec:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d907      	bls.n	8001304 <__udivmoddi4+0x1c4>
 80012f4:	197d      	adds	r5, r7, r5
 80012f6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80012fa:	d274      	bcs.n	80013e6 <__udivmoddi4+0x2a6>
 80012fc:	45a9      	cmp	r9, r5
 80012fe:	d972      	bls.n	80013e6 <__udivmoddi4+0x2a6>
 8001300:	3902      	subs	r1, #2
 8001302:	443d      	add	r5, r7
 8001304:	eba5 0509 	sub.w	r5, r5, r9
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	e778      	b.n	8001200 <__udivmoddi4+0xc0>
 800130e:	f1c1 0720 	rsb	r7, r1, #32
 8001312:	408b      	lsls	r3, r1
 8001314:	fa22 fc07 	lsr.w	ip, r2, r7
 8001318:	ea4c 0c03 	orr.w	ip, ip, r3
 800131c:	fa25 f407 	lsr.w	r4, r5, r7
 8001320:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001324:	fbb4 f9fe 	udiv	r9, r4, lr
 8001328:	fa1f f88c 	uxth.w	r8, ip
 800132c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001330:	fa20 f307 	lsr.w	r3, r0, r7
 8001334:	fb09 fa08 	mul.w	sl, r9, r8
 8001338:	408d      	lsls	r5, r1
 800133a:	431d      	orrs	r5, r3
 800133c:	0c2b      	lsrs	r3, r5, #16
 800133e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001342:	45a2      	cmp	sl, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	fa00 f301 	lsl.w	r3, r0, r1
 800134c:	d909      	bls.n	8001362 <__udivmoddi4+0x222>
 800134e:	eb1c 0404 	adds.w	r4, ip, r4
 8001352:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001356:	d248      	bcs.n	80013ea <__udivmoddi4+0x2aa>
 8001358:	45a2      	cmp	sl, r4
 800135a:	d946      	bls.n	80013ea <__udivmoddi4+0x2aa>
 800135c:	f1a9 0902 	sub.w	r9, r9, #2
 8001360:	4464      	add	r4, ip
 8001362:	eba4 040a 	sub.w	r4, r4, sl
 8001366:	fbb4 f0fe 	udiv	r0, r4, lr
 800136a:	fb0e 4410 	mls	r4, lr, r0, r4
 800136e:	fb00 fa08 	mul.w	sl, r0, r8
 8001372:	b2ad      	uxth	r5, r5
 8001374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001378:	45a2      	cmp	sl, r4
 800137a:	d908      	bls.n	800138e <__udivmoddi4+0x24e>
 800137c:	eb1c 0404 	adds.w	r4, ip, r4
 8001380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001384:	d22d      	bcs.n	80013e2 <__udivmoddi4+0x2a2>
 8001386:	45a2      	cmp	sl, r4
 8001388:	d92b      	bls.n	80013e2 <__udivmoddi4+0x2a2>
 800138a:	3802      	subs	r0, #2
 800138c:	4464      	add	r4, ip
 800138e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001392:	fba0 8902 	umull	r8, r9, r0, r2
 8001396:	eba4 040a 	sub.w	r4, r4, sl
 800139a:	454c      	cmp	r4, r9
 800139c:	46c6      	mov	lr, r8
 800139e:	464d      	mov	r5, r9
 80013a0:	d319      	bcc.n	80013d6 <__udivmoddi4+0x296>
 80013a2:	d016      	beq.n	80013d2 <__udivmoddi4+0x292>
 80013a4:	b15e      	cbz	r6, 80013be <__udivmoddi4+0x27e>
 80013a6:	ebb3 020e 	subs.w	r2, r3, lr
 80013aa:	eb64 0405 	sbc.w	r4, r4, r5
 80013ae:	fa04 f707 	lsl.w	r7, r4, r7
 80013b2:	fa22 f301 	lsr.w	r3, r2, r1
 80013b6:	431f      	orrs	r7, r3
 80013b8:	40cc      	lsrs	r4, r1
 80013ba:	e9c6 7400 	strd	r7, r4, [r6]
 80013be:	2100      	movs	r1, #0
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	4631      	mov	r1, r6
 80013c6:	4630      	mov	r0, r6
 80013c8:	e70c      	b.n	80011e4 <__udivmoddi4+0xa4>
 80013ca:	468c      	mov	ip, r1
 80013cc:	e6eb      	b.n	80011a6 <__udivmoddi4+0x66>
 80013ce:	4610      	mov	r0, r2
 80013d0:	e6ff      	b.n	80011d2 <__udivmoddi4+0x92>
 80013d2:	4543      	cmp	r3, r8
 80013d4:	d2e6      	bcs.n	80013a4 <__udivmoddi4+0x264>
 80013d6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013da:	eb69 050c 	sbc.w	r5, r9, ip
 80013de:	3801      	subs	r0, #1
 80013e0:	e7e0      	b.n	80013a4 <__udivmoddi4+0x264>
 80013e2:	4628      	mov	r0, r5
 80013e4:	e7d3      	b.n	800138e <__udivmoddi4+0x24e>
 80013e6:	4611      	mov	r1, r2
 80013e8:	e78c      	b.n	8001304 <__udivmoddi4+0x1c4>
 80013ea:	4681      	mov	r9, r0
 80013ec:	e7b9      	b.n	8001362 <__udivmoddi4+0x222>
 80013ee:	4608      	mov	r0, r1
 80013f0:	e773      	b.n	80012da <__udivmoddi4+0x19a>
 80013f2:	4608      	mov	r0, r1
 80013f4:	e749      	b.n	800128a <__udivmoddi4+0x14a>
 80013f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80013fa:	443d      	add	r5, r7
 80013fc:	e713      	b.n	8001226 <__udivmoddi4+0xe6>
 80013fe:	3802      	subs	r0, #2
 8001400:	443c      	add	r4, r7
 8001402:	e724      	b.n	800124e <__udivmoddi4+0x10e>

08001404 <__aeabi_idiv0>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f805 	bl	800143c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
    }
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa02 	bl	8001878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f9e0 	bl	800184e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffeb 	bl	800147e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f9e7 	bl	8001890 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>:


std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <_ZN4UARTC1EP20__UART_HandleTypeDef+0x38>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f010 f941 	bl	8011768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	this->handle = handle;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	605a      	str	r2, [r3, #4]
	lastTime = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
	uartBuff = NULL;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
}
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	080175b0 	.word	0x080175b0

08001508 <_ZN4UARTD1Ev>:

UART::~UART() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <_ZN4UARTD1Ev+0x80>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
	if (uartBuff != NULL) free(uartBuff);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <_ZN4UARTD1Ev+0x20>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4618      	mov	r0, r3
 8001524:	f010 fece 	bl	80122c4 <free>

	HAL_UART_AbortReceive_IT(handle);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	f007 fee9 	bl	8009304 <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f9bf 	bl	80018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <_ZN4UARTD1Ev+0x84>)
 8001544:	f000 f9c6 	bl	80018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8001548:	4603      	mov	r3, r0
 800154a:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <_ZN4UARTD1Ev+0x84>)
 800154e:	f000 f9d0 	bl	80018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8001552:	4603      	mov	r3, r0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f9d3 	bl	800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <_ZN4UARTD1Ev+0x6c>
		objectMap.erase(it);
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <_ZN4UARTD1Ev+0x84>)
 8001570:	f000 f9df 	bl	8001932 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
UART::~UART() {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f010 f8fc 	bl	8011776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	080175b0 	.word	0x080175b0
 800158c:	20000414 	.word	0x20000414

08001590 <_ZN4UARTD0Ev>:
UART::~UART() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
}
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffb5 	bl	8001508 <_ZN4UARTD1Ev>
 800159e:	2130      	movs	r1, #48	; 0x30
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f00f fdcf 	bl	8011144 <_ZdlPvj>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN4UART4initEP13USART_TypeDefii>:

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

	uartBuff = (uint8_t*)calloc(this->packetSize_Bytes+1, sizeof(uint8_t));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	3301      	adds	r3, #1
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f010 fe3f 	bl	8012250 <calloc>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	621a      	str	r2, [r3, #32]

	handle->Instance = port;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	601a      	str	r2, [r3, #0]
	handle->Init.BaudRate = baud;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	605a      	str	r2, [r3, #4]
	handle->Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
	handle->Init.StopBits = UART_STOPBITS_1;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
	handle->Init.Parity = UART_PARITY_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
	handle->Init.Mode = UART_MODE_TX_RX;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
	handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
	handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(handle) != HAL_OK)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f007 fd60 	bl	80090e4 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <_ZN4UART4initEP13USART_TypeDefii+0x8a>
	{
		return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001638:	e01e      	b.n	8001678 <_ZN4UART4initEP13USART_TypeDefii+0xc8>
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4619      	mov	r1, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f97f 	bl	8001950 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	f107 021c 	add.w	r2, r7, #28
 800165a:	4909      	ldr	r1, [pc, #36]	; (8001680 <_ZN4UART4initEP13USART_TypeDefii+0xd0>)
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f990 	bl	8001982 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6858      	ldr	r0, [r3, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a19      	ldr	r1, [r3, #32]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	f007 fe16 	bl	80092a2 <HAL_UART_Receive_IT>
	return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000414 	.word	0x20000414

08001684 <_ZN4UART8readLineEPhim>:

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return len;
}

int UART::readLine(uint8_t *buff, int length, uint32_t minDelay) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
	if(HAL_UART_AbortReceive_IT(handle) != HAL_OK) {
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fe34 	bl	8009304 <HAL_UART_AbortReceive_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d000      	beq.n	80016ae <_ZN4UART8readLineEPhim+0x2a>
		__NOP();
 80016ac:	bf00      	nop
	}
	memset(buff, '\0', length);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f010 fe43 	bl	8012340 <memset>

	std::size_t pos = msgBuff.find('\n');
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3308      	adds	r3, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	210a      	movs	r1, #10
 80016c2:	4618      	mov	r0, r3
 80016c4:	f010 f8be 	bl	8011844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80016c8:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(pos != std::string::npos) {
 80016ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d0:	d04e      	beq.n	8001770 <_ZN4UART8readLineEPhim+0xec>
		const char* tmp = msgBuff.substr(0,pos+1).c_str();
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0108 	add.w	r1, r3, #8
 80016d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016da:	3301      	adds	r3, #1
 80016dc:	f107 0014 	add.w	r0, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	f010 f90b 	bl	80118fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f010 f8a8 	bl	8011840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80016f0:	64b8      	str	r0, [r7, #72]	; 0x48
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4618      	mov	r0, r3
 80016f8:	f010 f83d 	bl	8011776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		const char* tmp1 = msgBuff.c_str();
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f010 f89d 	bl	8011840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001706:	6478      	str	r0, [r7, #68]	; 0x44
		strcpy((char*)buff, msgBuff.substr(0, pos+1).c_str());
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f103 0108 	add.w	r1, r3, #8
 800170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001710:	3301      	adds	r3, #1
 8001712:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001716:	2200      	movs	r2, #0
 8001718:	f010 f8f0 	bl	80118fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	4618      	mov	r0, r3
 8001722:	f010 f88d 	bl	8011840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f011 fe1d 	bl	801336a <strcpy>
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4618      	mov	r0, r3
 8001736:	f010 f81e 	bl	8011776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		msgBuff.clear();
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3308      	adds	r3, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f010 f821 	bl	8011786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes) != HAL_OK) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6858      	ldr	r0, [r3, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	b29b      	uxth	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	f007 fda5 	bl	80092a2 <HAL_UART_Receive_IT>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	bf14      	ite	ne
 800175e:	2301      	movne	r3, #1
 8001760:	2300      	moveq	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d000      	beq.n	800176a <_ZN4UART8readLineEPhim+0xe6>
			__NOP();
 8001768:	bf00      	nop
		}
		return pos+1;
 800176a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176c:	3301      	adds	r3, #1
 800176e:	e013      	b.n	8001798 <_ZN4UART8readLineEPhim+0x114>
	}
	if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes) != HAL_OK) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6858      	ldr	r0, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a19      	ldr	r1, [r3, #32]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	f007 fd8f 	bl	80092a2 <HAL_UART_Receive_IT>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d000      	beq.n	8001796 <_ZN4UART8readLineEPhim+0x112>
		__NOP();
 8001794:	bf00      	nop
	}
	return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN4UART8sendDataEPhii>:
		__NOP();
	}
	return len;
}
*/
short UART::sendData(uint8_t *data, int numBytes, int timeout) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(handle, data, numBytes, timeout);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6858      	ldr	r0, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	f007 fce0 	bl	800917e <HAL_UART_Transmit>

	return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN4UART9memberIRQEv>:

void UART::memberIRQ() {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	dataReady = true;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	msgBuff += (char*)uartBuff;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f103 0208 	add.w	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f010 f827 	bl	8011838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	while(msgBuff.size() > 1024) msgBuff.erase(0, msgBuff.size()-1024);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3308      	adds	r3, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00f ffc7 	bl	8011782 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	bf8c      	ite	hi
 80017fc:	2301      	movhi	r3, #1
 80017fe:	2300      	movls	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <_ZN4UART9memberIRQEv+0x60>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f103 0408 	add.w	r4, r3, #8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3308      	adds	r3, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f00f ffb6 	bl	8011782 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001816:	4603      	mov	r3, r0
 8001818:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800181c:	461a      	mov	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	4620      	mov	r0, r4
 8001822:	f00f ffb5 	bl	8011790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
 8001826:	e7e0      	b.n	80017ea <_ZN4UART9memberIRQEv+0x22>

	lastTime = HAL_GetTick();
 8001828:	f002 fcc2 	bl	80041b0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a19      	ldr	r1, [r3, #32]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f007 fd2e 	bl	80092a2 <HAL_UART_Receive_IT>
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}

0800184e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8a7 	bl	80019aa <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8af 	bl	80019c2 <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fdd8 	bl	800141e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f8a8 	bl	80019d6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f8c5 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800189e:	4603      	mov	r3, r0
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8a1 	bl	80019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fddb 	bl	8001466 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f8ab 	bl	8001a3e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8dd 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8cc 	bl	8001ade <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f000 f8da 	bl	8001b16 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8001962:	4603      	mov	r3, r0
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8dd 	bl	8001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 8001970:	4603      	mov	r3, r0
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>:
	insert(_Pair&& __x)
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 800198e:	68bc      	ldr	r4, [r7, #8]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8d4 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4621      	mov	r1, r4
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f8d8 	bl	8001b52 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}

080019aa <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f917 	bl	8001be6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
      { }
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f000 f8fd 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fff0 	bl	80019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f000 f900 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001a10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f906 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001a1e:	e7e9      	b.n	80019f4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001a3e:	b5b0      	push	{r4, r5, r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffed 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8f9 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8fe 	bl	8001c5e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8001a62:	4603      	mov	r3, r0
 8001a64:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f828 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f922 	bl	8001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001a80:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d110      	bne.n	8001aa8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001a86:	687c      	ldr	r4, [r7, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f92b 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a94:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f000 f930 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f807 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e000      	b.n	8001ab4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    }
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdb0      	pop	{r4, r5, r7, pc}

08001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f929 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	60bb      	str	r3, [r7, #8]
	++__result;
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f926 	bl	8001d42 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 8001af6:	463a      	mov	r2, r7
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f930 	bl	8001d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f93b 	bl	8001d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      }
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08c      	sub	sp, #48	; 0x30
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffed 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f924 	bl	8001db6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8001b6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 8001b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b72:	f000 f9c1 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f930 	bl	8001de4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	    if (__res.second)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d013      	beq.n	8001bb2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8001b8a:	6979      	ldr	r1, [r7, #20]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f000 f9c4 	bl	8001f1e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8001b96:	4603      	mov	r3, r0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ba0:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f9f6 	bl	8001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
 8001bb0:	e015      	b.n	8001bde <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8001bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f000 f836 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return _Res(iterator(__res.first), false);
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8af 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bce:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f9df 	bl	8001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	3730      	adds	r7, #48	; 0x30
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f9cb 	bl	8001fce <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f9dc 	bl	8001ff8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01d      	beq.n	8001cae <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c72:	68fc      	ldr	r4, [r7, #12]
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f000 f93f 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f000 f83c 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f7ff ffb8 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001ca0:	60b8      	str	r0, [r7, #8]
 8001ca2:	e7e3      	b.n	8001c6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f7ff ffa8 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001caa:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001cac:	e7de      	b.n	8001c6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 f836 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001cba:	697b      	ldr	r3, [r7, #20]
    }
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	bf0c      	ite	eq
 8001cda:	2301      	moveq	r3, #1
 8001cdc:	2300      	movne	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f900 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	bf34      	ite	cc
 8001d16:	2301      	movcc	r3, #1
 8001d18:	2300      	movcs	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
      }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00f fa4d 	bl	80111ee <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
	return *this;
 8001d5a:	687b      	ldr	r3, [r7, #4]
      }
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 8001d8c:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f00f fa9b 	bl	80112d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 8001d9a:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ff41 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]
    }
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f92b 	bl	800201c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8001dc6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff feb8 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f932 	bl	800203e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001dda:	68fb      	ldr	r3, [r7, #12]
	}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001df0:	68b8      	ldr	r0, [r7, #8]
 8001df2:	f7ff fe19 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f7ff ff24 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001e14:	68bc      	ldr	r4, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681d      	ldr	r5, [r3, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f86b 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001e22:	4603      	mov	r3, r0
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff ff69 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fee5 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001e46:	4603      	mov	r3, r0
 8001e48:	e004      	b.n	8001e54 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fed4 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e52:	4603      	mov	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001e56:	e7d8      	b.n	8001e0a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff60 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01d      	beq.n	8001eaa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001e6e:	68b8      	ldr	r0, [r7, #8]
 8001e70:	f000 f905 	bl	800207e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	f107 021c 	add.w	r2, r7, #28
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff1e 	bl	8001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001e8e:	f107 0214 	add.w	r2, r7, #20
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f901 	bl	80020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001e9e:	e027      	b.n	8001ef0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f914 	bl	80020d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001eaa:	68bc      	ldr	r4, [r7, #8]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff1b 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff ff1f 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001eca:	f107 0214 	add.w	r2, r7, #20
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f8e3 	bl	80020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001eda:	e009      	b.n	8001ef0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	f107 0220 	add.w	r2, r7, #32
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f902 	bl	80020f4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}

08001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f90d 	bl	8002120 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f914 	bl	800213c <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 8001f14:	4603      	mov	r3, r0
      }
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f1e:	b5b0      	push	{r4, r5, r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d119      	bne.n	8001f66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fe88 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d012      	beq.n	8001f66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f40:	68fc      	ldr	r4, [r7, #12]
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f7ff ffd8 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fecc 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001f52:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fed1 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001f6a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001f6c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001f72:	7df8      	ldrb	r0, [r7, #23]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	f00f f94e 	bl	8011218 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff feca 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001f92:	693b      	ldr	r3, [r7, #16]
    }
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}

08001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f000 f8d2 	bl	8002152 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8d5 	bl	8002166 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	711a      	strb	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001fce:	b590      	push	{r4, r7, lr}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8ce 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f000 f8d4 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 f8dd 	bl	80021aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8b9 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002008:	4603      	mov	r3, r0
 800200a:	2201      	movs	r2, #1
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f8d8 	bl	80021c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8a8 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800202a:	4603      	mov	r3, r0
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f8d7 	bl	80021e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800203e:	b5b0      	push	{r4, r5, r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4619      	mov	r1, r3
 800204e:	2018      	movs	r0, #24
 8002050:	f7ff f9da 	bl	8001408 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f890 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800205a:	4604      	mov	r4, r0
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f000 f896 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8002062:	4605      	mov	r5, r0
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fd6a 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4629      	mov	r1, r5
 8002070:	4620      	mov	r0, r4
 8002072:	f000 f8c5 	bl	8002200 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>
	}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bdb0      	pop	{r4, r5, r7, pc}

0800207e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fe48 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f000 f8ba 	bl	8002226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>
 80020b2:	4603      	mov	r3, r0
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8bd 	bl	800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80020c0:	4603      	mov	r3, r0
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f00f f898 	bl	8011214 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
	return *this;
 80020ea:	687b      	ldr	r3, [r7, #4]
      }
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f000 f89a 	bl	800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002106:	4603      	mov	r3, r0
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f88e 	bl	800224e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3310      	adds	r3, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f863 	bl	8002266 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f861 	bl	800227e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f85c 	bl	8002292 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80021ec:	2200      	movs	r2, #0
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f85b 	bl	80022ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fc96 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f868 	bl	80022ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f861 	bl	800231e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f85f 	bl	8002332 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f00e ff4e 	bl	8011140 <_ZdlPv>
      }
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f845 	bl	8002348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>
 80022be:	4602      	mov	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4293      	cmp	r3, r2
 80022c4:	bf8c      	ite	hi
 80022c6:	2301      	movhi	r3, #1
 80022c8:	2300      	movls	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80022d0:	f00f f8d8 	bl	8011484 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f00e ff32 	bl	8011148 <_Znwj>
 80022e4:	4603      	mov	r3, r0
      }
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fc1f 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002300:	4604      	mov	r4, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	2008      	movs	r0, #8
 8002308:	f7ff f87e 	bl	8001408 <_ZnwjPv>
 800230c:	4603      	mov	r3, r0
 800230e:	4621      	mov	r1, r4
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f825 	bl	8002360 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv+0x14>)
      }
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	05555555 	.word	0x05555555

08002360 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f812 	bl	8002396 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002372:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fbd3 	bl	8001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 8002384:	4603      	mov	r3, r0
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <_Z41__static_initialization_and_destruction_0ii>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <_Z41__static_initialization_and_destruction_0ii+0x32>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10b      	bne.n	80023de <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023c8:	461a      	mov	r2, r3
 80023ca:	2300      	movs	r3, #0
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	6053      	str	r3, [r2, #4]
 80023d0:	6093      	str	r3, [r2, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	6113      	str	r3, [r2, #16]
 80023d6:	6153      	str	r3, [r2, #20]
 80023d8:	4808      	ldr	r0, [pc, #32]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023da:	f7ff f85d 	bl	8001498 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d102      	bne.n	80023f4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023f0:	f7ff f85f 	bl	80014b2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000414 	.word	0x20000414

08002400 <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
 8002404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff ffcf 	bl	80023ac <_Z41__static_initialization_and_destruction_0ii>
 800240e:	bd80      	pop	{r7, pc}

08002410 <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
 8002414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ffc7 	bl	80023ac <_Z41__static_initialization_and_destruction_0ii>
 800241e:	bd80      	pop	{r7, pc}

08002420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002424:	f6ad 1dec 	subw	sp, sp, #2540	; 0x9ec
 8002428:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242a:	f001 fe96 	bl	800415a <HAL_Init>
  /* USER CODE BEGIN Init */
  GPGGA gpsData;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242e:	f000 fbc7 	bl	8002bc0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002432:	f000 fd23 	bl	8002e7c <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 8002436:	f000 fc1d 	bl	8002c74 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 800243a:	f000 fc91 	bl	8002d60 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 800243e:	f000 fcc3 	bl	8002dc8 <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 8002442:	f009 fec3 	bl	800c1cc <MX_FATFS_Init>
  MX_DMA_Init();
 8002446:	f000 fcfb 	bl	8002e40 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 800244a:	f00e f961 	bl	8010710 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adcValue, 2);
 800244e:	2202      	movs	r2, #2
 8002450:	49c4      	ldr	r1, [pc, #784]	; (8002764 <main+0x344>)
 8002452:	48c5      	ldr	r0, [pc, #788]	; (8002768 <main+0x348>)
 8002454:	f002 f81e 	bl	8004494 <HAL_ADC_Start_DMA>

  ble.init(USART2, 9600, 1);
 8002458:	2301      	movs	r3, #1
 800245a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800245e:	49c3      	ldr	r1, [pc, #780]	; (800276c <main+0x34c>)
 8002460:	48c3      	ldr	r0, [pc, #780]	; (8002770 <main+0x350>)
 8002462:	f7ff f8a5 	bl	80015b0 <_ZN4UART4initEP13USART_TypeDefii>
  gps.init(USART1, 9600, 1);
 8002466:	2301      	movs	r3, #1
 8002468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800246c:	49c1      	ldr	r1, [pc, #772]	; (8002774 <main+0x354>)
 800246e:	48c2      	ldr	r0, [pc, #776]	; (8002778 <main+0x358>)
 8002470:	f7ff f89e 	bl	80015b0 <_ZN4UART4initEP13USART_TypeDefii>

  MPU6050_Init(&hi2c1);
 8002474:	48c1      	ldr	r0, [pc, #772]	; (800277c <main+0x35c>)
 8002476:	f000 fe83 	bl	8003180 <_Z12MPU6050_InitP17I2C_HandleTypeDef>

  memset(&gpsData,0,sizeof(gpsData));
 800247a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800247e:	2250      	movs	r2, #80	; 0x50
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f00f ff5c 	bl	8012340 <memset>
  gpsData.LatitudeDecimal = 0.0;
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8002494:	e9c1 2300 	strd	r2, r3, [r1]
  gpsData.LongitudeDecimal = 0.0;
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80024a4:	e9c1 2300 	strd	r2, r3, [r1]
  if(gpsData.NS_Indicator==0)
 80024a8:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <main+0x96>
	  gpsData.NS_Indicator='-';
 80024b0:	232d      	movs	r3, #45	; 0x2d
 80024b2:	f887 3928 	strb.w	r3, [r7, #2344]	; 0x928
  if(gpsData.EW_Indicator==0)
 80024b6:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <main+0xa4>
	  gpsData.EW_Indicator='-';
 80024be:	232d      	movs	r3, #45	; 0x2d
 80024c0:	f887 3938 	strb.w	r3, [r7, #2360]	; 0x938
  if(gpsData.Geoid_Units==0)
 80024c4:	f897 3950 	ldrb.w	r3, [r7, #2384]	; 0x950
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <main+0xb2>
	  gpsData.Geoid_Units='-';
 80024cc:	232d      	movs	r3, #45	; 0x2d
 80024ce:	f887 3950 	strb.w	r3, [r7, #2384]	; 0x950
  if(gpsData.MSL_Units==0)
 80024d2:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <main+0xc0>
	  gpsData.MSL_Units='-';
 80024da:	232d      	movs	r3, #45	; 0x2d
 80024dc:	f887 3948 	strb.w	r3, [r7, #2376]	; 0x948
  //while (MPU6050_Init(&hi2c1) == 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buff[1024] = {0};
 80024e0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	3304      	adds	r3, #4
 80024ea:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f00f ff25 	bl	8012340 <memset>
  char msg[100] = {0};
 80024f6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	3304      	adds	r3, #4
 8002500:	2260      	movs	r2, #96	; 0x60
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f00f ff1b 	bl	8012340 <memset>

  uint32_t elapsedTime = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  uint32_t prevTime = HAL_GetTick();
 8002510:	f001 fe4e 	bl	80041b0 <HAL_GetTick>
 8002514:	f8c7 0978 	str.w	r0, [r7, #2424]	; 0x978

  HAL_GPIO_WritePin(BLE_EN_GPIO_Port, BLE_EN_Pin, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251e:	4898      	ldr	r0, [pc, #608]	; (8002780 <main+0x360>)
 8002520:	f002 ff15 	bl	800534e <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8002524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002528:	f001 fe4c 	bl	80041c4 <HAL_Delay>

  FATFS FatFS;
  FIL fil;
  FRESULT fres;

  fres = f_mount(&FatFS, "", 1);
 800252c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002530:	2201      	movs	r2, #1
 8002532:	4994      	ldr	r1, [pc, #592]	; (8002784 <main+0x364>)
 8002534:	4618      	mov	r0, r3
 8002536:	f00d fbbb 	bl	800fcb0 <f_mount>
 800253a:	4603      	mov	r3, r0
 800253c:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
  if(fres != FR_OK) {
 8002540:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <main+0x16e>
	  sprintf((char*)buff, "f_mount error (%i)\r\n", fres);
 8002548:	f897 296f 	ldrb.w	r2, [r7, #2415]	; 0x96f
 800254c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002550:	498d      	ldr	r1, [pc, #564]	; (8002788 <main+0x368>)
 8002552:	4618      	mov	r0, r3
 8002554:	f010 fe7a 	bl	801324c <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002558:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe0f 	bl	8000180 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f00e f9b5 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff));
 8002572:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd fe02 	bl	8000180 <strlen>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002584:	230a      	movs	r3, #10
 8002586:	487a      	ldr	r0, [pc, #488]	; (8002770 <main+0x350>)
 8002588:	f7ff f90a 	bl	80017a0 <_ZN4UART8sendDataEPhii>
	  while(1);
 800258c:	e7fe      	b.n	800258c <main+0x16c>
  }

  DWORD free_clusters, free_sectors, total_sectors;
  FATFS *getFreeFS;

  fres = f_getfree("", &free_clusters, &getFreeFS);
 800258e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002592:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002596:	4619      	mov	r1, r3
 8002598:	487a      	ldr	r0, [pc, #488]	; (8002784 <main+0x364>)
 800259a:	f00d ffaa 	bl	80104f2 <f_getfree>
 800259e:	4603      	mov	r3, r0
 80025a0:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
  if(fres != FR_OK) {
 80025a4:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d022      	beq.n	80025f2 <main+0x1d2>
	  sprintf((char*)buff, "f_getfree error (%i)\r\n", fres);
 80025ac:	f897 296f 	ldrb.w	r2, [r7, #2415]	; 0x96f
 80025b0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025b4:	4975      	ldr	r1, [pc, #468]	; (800278c <main+0x36c>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f010 fe48 	bl	801324c <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 80025bc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd fddd 	bl	8000180 <strlen>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00e f983 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff));
 80025d6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd fdd0 	bl	8000180 <strlen>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80025e8:	230a      	movs	r3, #10
 80025ea:	4861      	ldr	r0, [pc, #388]	; (8002770 <main+0x350>)
 80025ec:	f7ff f8d8 	bl	80017a0 <_ZN4UART8sendDataEPhii>
	  while(1);
 80025f0:	e7fe      	b.n	80025f0 <main+0x1d0>
  }

  total_sectors = (getFreeFS->n_fatent -2)*getFreeFS->csize;
 80025f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	3b02      	subs	r3, #2
 80025fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	8952      	ldrh	r2, [r2, #10]
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
  free_sectors = free_clusters*getFreeFS->csize;
 800260c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	895b      	ldrh	r3, [r3, #10]
 8002614:	461a      	mov	r2, r3
 8002616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fb03 f302 	mul.w	r3, r3, r2
 8002620:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964

  sprintf((char*)buff, "SD card stats: (%10lu / %10lu) KiB (avail./total)", free_sectors/2, total_sectors/2);
 8002624:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8002628:	085a      	lsrs	r2, r3, #1
 800262a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	f507 60a2 	add.w	r0, r7, #1296	; 0x510
 8002634:	4956      	ldr	r1, [pc, #344]	; (8002790 <main+0x370>)
 8002636:	f010 fe09 	bl	801324c <siprintf>
  CDC_Transmit_FS(buff, strlen((char*)buff));
 800263a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd fd9e 	bl	8000180 <strlen>
 8002644:	4603      	mov	r3, r0
 8002646:	b29a      	uxth	r2, r3
 8002648:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f00e f944 	bl	80108dc <CDC_Transmit_FS>
  ble.sendData(buff, strlen((char*)buff));
 8002654:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fd91 	bl	8000180 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002666:	230a      	movs	r3, #10
 8002668:	4841      	ldr	r0, [pc, #260]	; (8002770 <main+0x350>)
 800266a:	f7ff f899 	bl	80017a0 <_ZN4UART8sendDataEPhii>

  fres = f_open(&fil, "log.csv", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800266e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002672:	221a      	movs	r2, #26
 8002674:	4947      	ldr	r1, [pc, #284]	; (8002794 <main+0x374>)
 8002676:	4618      	mov	r0, r3
 8002678:	f00d fb60 	bl	800fd3c <f_open>
 800267c:	4603      	mov	r3, r0
 800267e:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
  fres = f_getfree("", &free_clusters, &getFreeFS);
 8002682:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800268a:	4619      	mov	r1, r3
 800268c:	483d      	ldr	r0, [pc, #244]	; (8002784 <main+0x364>)
 800268e:	f00d ff30 	bl	80104f2 <f_getfree>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
  if(fres != FR_OK) {
 8002698:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 800269c:	2b00      	cmp	r3, #0
 800269e:	d022      	beq.n	80026e6 <main+0x2c6>
	  sprintf((char*)buff, "f_open error (%i)\r\n", fres);
 80026a0:	f897 296f 	ldrb.w	r2, [r7, #2415]	; 0x96f
 80026a4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026a8:	493b      	ldr	r1, [pc, #236]	; (8002798 <main+0x378>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f010 fdce 	bl	801324c <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 80026b0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fd63 	bl	8000180 <strlen>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00e f909 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff));
 80026ca:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fd56 	bl	8000180 <strlen>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80026dc:	230a      	movs	r3, #10
 80026de:	4824      	ldr	r0, [pc, #144]	; (8002770 <main+0x350>)
 80026e0:	f7ff f85e 	bl	80017a0 <_ZN4UART8sendDataEPhii>
	  while(1);
 80026e4:	e7fe      	b.n	80026e4 <main+0x2c4>
  }

  sprintf((char*)buff, "This is a test\r\n");
 80026e6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026ea:	492c      	ldr	r1, [pc, #176]	; (800279c <main+0x37c>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f010 fdad 	bl	801324c <siprintf>

  UINT bytesWrote;
  fres = f_write(&fil, buff, strlen((char*)buff), &bytesWrote);
 80026f2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd42 	bl	8000180 <strlen>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002702:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002706:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800270a:	f00d fcd5 	bl	80100b8 <f_write>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
  if(fres != FR_OK) {
 8002714:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8002718:	2b00      	cmp	r3, #0
 800271a:	d043      	beq.n	80027a4 <main+0x384>
	  sprintf((char*)buff, "f_write error (%i)\r\n", fres);
 800271c:	f897 296f 	ldrb.w	r2, [r7, #2415]	; 0x96f
 8002720:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002724:	491e      	ldr	r1, [pc, #120]	; (80027a0 <main+0x380>)
 8002726:	4618      	mov	r0, r3
 8002728:	f010 fd90 	bl	801324c <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 800272c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fd25 	bl	8000180 <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	b29a      	uxth	r2, r3
 800273a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f00e f8cb 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff));
 8002746:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fd18 	bl	8000180 <strlen>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002758:	230a      	movs	r3, #10
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <main+0x350>)
 800275c:	f7ff f820 	bl	80017a0 <_ZN4UART8sendDataEPhii>
 8002760:	e043      	b.n	80027ea <main+0x3ca>
 8002762:	bf00      	nop
 8002764:	200006c0 	.word	0x200006c0
 8002768:	2000043c 	.word	0x2000043c
 800276c:	40004400 	.word	0x40004400
 8002770:	20000638 	.word	0x20000638
 8002774:	40013800 	.word	0x40013800
 8002778:	20000608 	.word	0x20000608
 800277c:	200004d4 	.word	0x200004d4
 8002780:	40020400 	.word	0x40020400
 8002784:	08017398 	.word	0x08017398
 8002788:	0801739c 	.word	0x0801739c
 800278c:	080173b4 	.word	0x080173b4
 8002790:	080173cc 	.word	0x080173cc
 8002794:	08017400 	.word	0x08017400
 8002798:	08017408 	.word	0x08017408
 800279c:	0801741c 	.word	0x0801741c
 80027a0:	08017430 	.word	0x08017430
  } else {
	  sprintf((char*)buff, "f_write wrote (%i) bytes\r\n", bytesWrote);
 80027a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80027ae:	49a7      	ldr	r1, [pc, #668]	; (8002a4c <main+0x62c>)
 80027b0:	4618      	mov	r0, r3
 80027b2:	f010 fd4b 	bl	801324c <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 80027b6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fce0 	bl	8000180 <strlen>
 80027c0:	4603      	mov	r3, r0
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00e f886 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff));
 80027d0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fcd3 	bl	8000180 <strlen>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80027e2:	230a      	movs	r3, #10
 80027e4:	489a      	ldr	r0, [pc, #616]	; (8002a50 <main+0x630>)
 80027e6:	f7fe ffdb 	bl	80017a0 <_ZN4UART8sendDataEPhii>
  }
  f_close(&fil);
 80027ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00d fe55 	bl	801049e <f_close>
  f_mount(NULL, "", 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	4997      	ldr	r1, [pc, #604]	; (8002a54 <main+0x634>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f00d fa59 	bl	800fcb0 <f_mount>



  int count = 0, overlap = 10;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8002804:	230a      	movs	r3, #10
 8002806:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970

  while (1)
  {

	  if(CDC_ReadLine(usbBuffer)) {
 800280a:	4893      	ldr	r0, [pc, #588]	; (8002a58 <main+0x638>)
 800280c:	f00e f892 	bl	8010934 <CDC_ReadLine>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <main+0x418>
		  CDC_Transmit_FS(usbBuffer, sizeof(usbBuffer));
 8002820:	2110      	movs	r1, #16
 8002822:	488d      	ldr	r0, [pc, #564]	; (8002a58 <main+0x638>)
 8002824:	f00e f85a 	bl	80108dc <CDC_Transmit_FS>
		  ble.sendData(usbBuffer, sizeof(usbBuffer), 100);
 8002828:	2364      	movs	r3, #100	; 0x64
 800282a:	2210      	movs	r2, #16
 800282c:	498a      	ldr	r1, [pc, #552]	; (8002a58 <main+0x638>)
 800282e:	4888      	ldr	r0, [pc, #544]	; (8002a50 <main+0x630>)
 8002830:	f7fe ffb6 	bl	80017a0 <_ZN4UART8sendDataEPhii>

		  CDC_ClearBuffer();
 8002834:	f00e f8a6 	bl	8010984 <CDC_ClearBuffer>
	  }
	  if(gps.readLine(buff, sizeof(buff))) {
 8002838:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 800283c:	2300      	movs	r3, #0
 800283e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002842:	4886      	ldr	r0, [pc, #536]	; (8002a5c <main+0x63c>)
 8002844:	f7fe ff1e 	bl	8001684 <_ZN4UART8readLineEPhim>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a2 	beq.w	800299e <main+0x57e>

		  char *str = strstr((char*)buff, "$GNGGA,");
 800285a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800285e:	4980      	ldr	r1, [pc, #512]	; (8002a60 <main+0x640>)
 8002860:	4618      	mov	r0, r3
 8002862:	f010 fd8a 	bl	801337a <strstr>
 8002866:	f8c7 0960 	str.w	r0, [r7, #2400]	; 0x960
		  if(str!=NULL)
 800286a:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8095 	beq.w	800299e <main+0x57e>
		  {
			  memset(&gpsData,0,sizeof(gpsData));
 8002874:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002878:	2250      	movs	r2, #80	; 0x50
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00f fd5f 	bl	8012340 <memset>
			  sscanf(str,"$GNGGA,%2hu%2hu%2hu.%3hu,%f,%c,%f,%c,%hu,%hu,%f,%f,%c,%f,%c,,*%2s",
 8002882:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002886:	1c99      	adds	r1, r3, #2
 8002888:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 800288c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002890:	3348      	adds	r3, #72	; 0x48
 8002892:	930d      	str	r3, [sp, #52]	; 0x34
 8002894:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002898:	3340      	adds	r3, #64	; 0x40
 800289a:	930c      	str	r3, [sp, #48]	; 0x30
 800289c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028a0:	333c      	adds	r3, #60	; 0x3c
 80028a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80028a4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028a8:	3338      	adds	r3, #56	; 0x38
 80028aa:	930a      	str	r3, [sp, #40]	; 0x28
 80028ac:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028b0:	3334      	adds	r3, #52	; 0x34
 80028b2:	9309      	str	r3, [sp, #36]	; 0x24
 80028b4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028b8:	3330      	adds	r3, #48	; 0x30
 80028ba:	9308      	str	r3, [sp, #32]
 80028bc:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028c0:	332c      	adds	r3, #44	; 0x2c
 80028c2:	9307      	str	r3, [sp, #28]
 80028c4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028c8:	332a      	adds	r3, #42	; 0x2a
 80028ca:	9306      	str	r3, [sp, #24]
 80028cc:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028d0:	3328      	adds	r3, #40	; 0x28
 80028d2:	9305      	str	r3, [sp, #20]
 80028d4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028d8:	331c      	adds	r3, #28
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028e0:	3318      	adds	r3, #24
 80028e2:	9303      	str	r3, [sp, #12]
 80028e4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028e8:	3308      	adds	r3, #8
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028f0:	3306      	adds	r3, #6
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80028f8:	3304      	adds	r3, #4
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	4959      	ldr	r1, [pc, #356]	; (8002a64 <main+0x644>)
 8002900:	f8d7 0960 	ldr.w	r0, [r7, #2400]	; 0x960
 8002904:	f010 fcc2 	bl	801328c <siscanf>
					  &gpsData.UTC_Hour,&gpsData.UTC_Min,&gpsData.UTC_Sec,&gpsData.UTC_MicroSec,&gpsData.Latitude,
					  &gpsData.NS_Indicator,&gpsData.Longitude,&gpsData.EW_Indicator,&gpsData.PositionFixIndicator,
					  &gpsData.SatellitesUsed,&gpsData.HDOP,&gpsData.MSL_Altitude,&gpsData.MSL_Units,&gpsData.Geoid_Separation,
					  &gpsData.Geoid_Units,gpsData.CheckSum);

			  if(gpsData.NS_Indicator==0)
 8002908:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <main+0x4f6>
				  gpsData.NS_Indicator='-';
 8002910:	232d      	movs	r3, #45	; 0x2d
 8002912:	f887 3928 	strb.w	r3, [r7, #2344]	; 0x928
			  if(gpsData.EW_Indicator==0)
 8002916:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <main+0x504>
				  gpsData.EW_Indicator='-';
 800291e:	232d      	movs	r3, #45	; 0x2d
 8002920:	f887 3938 	strb.w	r3, [r7, #2360]	; 0x938
			  if(gpsData.Geoid_Units==0)
 8002924:	f897 3950 	ldrb.w	r3, [r7, #2384]	; 0x950
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <main+0x512>
				  gpsData.Geoid_Units='-';
 800292c:	232d      	movs	r3, #45	; 0x2d
 800292e:	f887 3950 	strb.w	r3, [r7, #2384]	; 0x950
			  if(gpsData.MSL_Units==0)
 8002932:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <main+0x520>
				  gpsData.MSL_Units='-';
 800293a:	232d      	movs	r3, #45	; 0x2d
 800293c:	f887 3948 	strb.w	r3, [r7, #2376]	; 0x948

			  gpsData.LatitudeDecimal=convertDegMinToDecDeg(gpsData.Latitude);
 8002940:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fb69 	bl	800301c <_Z21convertDegMinToDecDegf>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8002952:	e9c1 2300 	strd	r2, r3, [r1]
			  gpsData.LongitudeDecimal=convertDegMinToDecDeg(gpsData.Longitude);
 8002956:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fb5e 	bl	800301c <_Z21convertDegMinToDecDegf>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8002968:	e9c1 2300 	strd	r2, r3, [r1]

			  if(gpsData.SatellitesUsed > 3) HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_SET);
 800296c:	f8b7 393c 	ldrh.w	r3, [r7, #2364]	; 0x93c
 8002970:	2b03      	cmp	r3, #3
 8002972:	d906      	bls.n	8002982 <main+0x562>
 8002974:	2201      	movs	r2, #1
 8002976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800297a:	483b      	ldr	r0, [pc, #236]	; (8002a68 <main+0x648>)
 800297c:	f002 fce7 	bl	800534e <HAL_GPIO_WritePin>
 8002980:	e005      	b.n	800298e <main+0x56e>
			  else HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002988:	4837      	ldr	r0, [pc, #220]	; (8002a68 <main+0x648>)
 800298a:	f002 fce0 	bl	800534e <HAL_GPIO_WritePin>

			  memset(buff, '\0', sizeof(buff));
 800298e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f00f fcd1 	bl	8012340 <memset>
		  }
	  }
	  if(ble.readLine(buff, sizeof(buff))) {
 800299e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80029a2:	2300      	movs	r3, #0
 80029a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a8:	4829      	ldr	r0, [pc, #164]	; (8002a50 <main+0x630>)
 80029aa:	f7fe fe6b 	bl	8001684 <_ZN4UART8readLineEPhim>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01c      	beq.n	80029f8 <main+0x5d8>
		  //ble.getData(buff, sizeof(buff));
		  strcpy(msg, (char*)buff);
 80029be:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80029c2:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f010 fcce 	bl	801336a <strcpy>
		  sprintf((char*)buff, "\r\n\r\nBLE MSG: %s\r\n\r\n",msg);
 80029ce:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 80029d2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <main+0x64c>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f010 fc37 	bl	801324c <siprintf>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
 80029de:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fbcc 	bl	8000180 <strlen>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f00d ff72 	bl	80108dc <CDC_Transmit_FS>
	  }


	  if(++count >= overlap) {
 80029f8:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8002a02:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8002a06:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bfac      	ite	ge
 8002a0e:	2301      	movge	r3, #1
 8002a10:	2300      	movlt	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <main+0x608>
		  HAL_GPIO_TogglePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin);
 8002a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1c:	4814      	ldr	r0, [pc, #80]	; (8002a70 <main+0x650>)
 8002a1e:	f002 fcae 	bl	800537e <HAL_GPIO_TogglePin>
		  //strcpy((char*)buff, "AT+getAddr\r\n");
		  //ble.sendData(buff, strlen((char*)buff), 100);

		  //strcpy((char*)buff, "AT+getInfo\r\n");
		  //ble.sendData(buff, strlen((char*)buff), 100);
		  count = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
	  }

	  if(HAL_GPIO_ReadPin(BLE_STATUS_GPIO_Port, BLE_STATUS_Pin) == GPIO_PIN_SET) {
 8002a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a2c:	4811      	ldr	r0, [pc, #68]	; (8002a74 <main+0x654>)
 8002a2e:	f002 fc77 	bl	8005320 <HAL_GPIO_ReadPin>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <main+0x658>
		  overlap = 2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8002a48:	e019      	b.n	8002a7e <main+0x65e>
 8002a4a:	bf00      	nop
 8002a4c:	08017448 	.word	0x08017448
 8002a50:	20000638 	.word	0x20000638
 8002a54:	08017398 	.word	0x08017398
 8002a58:	2000042c 	.word	0x2000042c
 8002a5c:	20000608 	.word	0x20000608
 8002a60:	08017464 	.word	0x08017464
 8002a64:	0801746c 	.word	0x0801746c
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	080174b0 	.word	0x080174b0
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020400 	.word	0x40020400
	  }
	  else {
		  overlap = 5;
 8002a78:	2305      	movs	r3, #5
 8002a7a:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
	  }

	  MPU6050_Read_All(&hi2c1, &mpu6050);
 8002a7e:	494c      	ldr	r1, [pc, #304]	; (8002bb0 <main+0x790>)
 8002a80:	484c      	ldr	r0, [pc, #304]	; (8002bb4 <main+0x794>)
 8002a82:	f000 fc2d 	bl	80032e0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>

	#if CSV_OUTPUT == 1
	sprintf((char*)buff,
	  "%hu:%hu:%hu,%ld,%.5f,%c,%.5f,%c,%.1f,%c,%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",

	  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a86:	f8b7 3910 	ldrh.w	r3, [r7, #2320]	; 0x910
	sprintf((char*)buff,
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a8c:	f8b7 3912 	ldrh.w	r3, [r7, #2322]	; 0x912
	sprintf((char*)buff,
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
	  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a92:	f8b7 3914 	ldrh.w	r3, [r7, #2324]	; 0x914
	sprintf((char*)buff,
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
 8002a98:	f507 6012 	add.w	r0, r7, #2336	; 0x920
 8002a9c:	c803      	ldmia	r0, {r0, r1}
 8002a9e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	  gpsData.LatitudeDecimal, gpsData.NS_Indicator, gpsData.LongitudeDecimal, gpsData.EW_Indicator,
 8002aa2:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
	sprintf((char*)buff,
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa8:	f507 6413 	add.w	r4, r7, #2352	; 0x930
 8002aac:	cc30      	ldmia	r4, {r4, r5}
 8002aae:	e9c7 4508 	strd	r4, r5, [r7, #32]
	  gpsData.LatitudeDecimal, gpsData.NS_Indicator, gpsData.LongitudeDecimal, gpsData.EW_Indicator,
 8002ab2:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
	sprintf((char*)buff,
 8002ab6:	61fb      	str	r3, [r7, #28]
	  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002ab8:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
	sprintf((char*)buff,
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fccb 	bl	8000458 <__aeabi_f2d>
 8002ac2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002ac6:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
	sprintf((char*)buff,
 8002aca:	61bb      	str	r3, [r7, #24]
	  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002acc:	f8b7 393c 	ldrh.w	r3, [r7, #2364]	; 0x93c
	sprintf((char*)buff,
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <main+0x790>)
 8002ad4:	e9d3 5602 	ldrd	r5, r6, [r3, #8]
 8002ad8:	e9c7 5600 	strd	r5, r6, [r7]
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <main+0x790>)
 8002ade:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <main+0x790>)
 8002ae4:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <main+0x790>)
 8002aea:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <main+0x790>)
 8002af0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <main+0x790>)
 8002af6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002afa:	f507 66a2 	add.w	r6, r7, #1296	; 0x510
 8002afe:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002b02:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8002b06:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002b0a:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8002b0e:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8002b12:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002b16:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002b1a:	68f9      	ldr	r1, [r7, #12]
 8002b1c:	910d      	str	r1, [sp, #52]	; 0x34
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	910c      	str	r1, [sp, #48]	; 0x30
 8002b22:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002b26:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	9108      	str	r1, [sp, #32]
 8002b2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b38:	9104      	str	r1, [sp, #16]
 8002b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b42:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b4a:	9100      	str	r1, [sp, #0]
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b50:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <main+0x798>)
 8002b52:	4630      	mov	r0, r6
 8002b54:	f010 fb7a 	bl	801324c <siprintf>
			  gpsData.SatellitesUsed, elapsedTime);
	#endif



	  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002b58:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fb0f 	bl	8000180 <strlen>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00d feb5 	bl	80108dc <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff), 50000);
 8002b72:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fb02 	bl	8000180 <strlen>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002b84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <main+0x79c>)
 8002b8a:	f7fe fe09 	bl	80017a0 <_ZN4UART8sendDataEPhii>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
		  ble.sendData(buff, strlen((char*)buff));
	  }*/


	  elapsedTime = HAL_GetTick() - prevTime;
 8002b8e:	f001 fb0f 	bl	80041b0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
	  prevTime = HAL_GetTick();
 8002b9e:	f001 fb07 	bl	80041b0 <HAL_GetTick>
 8002ba2:	f8c7 0978 	str.w	r0, [r7, #2424]	; 0x978

	  HAL_Delay(100);
 8002ba6:	2064      	movs	r0, #100	; 0x64
 8002ba8:	f001 fb0c 	bl	80041c4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002bac:	e62d      	b.n	800280a <main+0x3ea>
 8002bae:	bf00      	nop
 8002bb0:	20000668 	.word	0x20000668
 8002bb4:	200004d4 	.word	0x200004d4
 8002bb8:	080174c4 	.word	0x080174c4
 8002bbc:	20000638 	.word	0x20000638

08002bc0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b092      	sub	sp, #72	; 0x48
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	2234      	movs	r2, #52	; 0x34
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00f fbb6 	bl	8012340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <_Z18SystemClock_Configv+0xb0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <_Z18SystemClock_Configv+0xb0>)
 8002bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	2302      	movs	r3, #2
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002c0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 ffb1 	bl	8007b84 <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002c32:	f000 fa51 	bl	80030d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c36:	230f      	movs	r3, #15
 8002c38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f005 fac8 	bl	80081e4 <HAL_RCC_ClockConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002c64:	f000 fa38 	bl	80030d8 <Error_Handler>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3748      	adds	r7, #72	; 0x48
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40007000 	.word	0x40007000

08002c74 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002c86:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <_ZL11MX_ADC_Initv+0xe8>)
 8002c88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002cae:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002cb4:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ce4:	481c      	ldr	r0, [pc, #112]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002ce6:	f001 fa8f 	bl	8004208 <HAL_ADC_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 8002cfa:	f000 f9ed 	bl	80030d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002cfe:	2309      	movs	r3, #9
 8002d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002d10:	f001 fc6a 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 8002d24:	f000 f9d8 	bl	80030d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4808      	ldr	r0, [pc, #32]	; (8002d58 <_ZL11MX_ADC_Initv+0xe4>)
 8002d36:	f001 fc57 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <_ZL11MX_ADC_Initv+0xda>
  {
    Error_Handler();
 8002d4a:	f000 f9c5 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000043c 	.word	0x2000043c
 8002d5c:	40012400 	.word	0x40012400

08002d60 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <_ZL12MX_I2C1_Initv+0x60>)
 8002d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <_ZL12MX_I2C1_Initv+0x64>)
 8002d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d9c:	4807      	ldr	r0, [pc, #28]	; (8002dbc <_ZL12MX_I2C1_Initv+0x5c>)
 8002d9e:	f002 fb07 	bl	80053b0 <HAL_I2C_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002db2:	f000 f991 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200004d4 	.word	0x200004d4
 8002dc0:	40005400 	.word	0x40005400
 8002dc4:	00061a80 	.word	0x00061a80

08002dc8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <_ZL12MX_SPI1_Initv+0x74>)
 8002dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002e14:	220a      	movs	r2, #10
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e18:	4807      	ldr	r0, [pc, #28]	; (8002e38 <_ZL12MX_SPI1_Initv+0x70>)
 8002e1a:	f005 fc7f 	bl	800871c <HAL_SPI_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002e2e:	f000 f953 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000528 	.word	0x20000528
 8002e3c:	40013000 	.word	0x40013000

08002e40 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <_ZL11MX_DMA_Initv+0x38>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <_ZL11MX_DMA_Initv+0x38>)
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e50:	61d3      	str	r3, [r2, #28]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <_ZL11MX_DMA_Initv+0x38>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	200b      	movs	r0, #11
 8002e64:	f001 fe9d 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e68:	200b      	movs	r0, #11
 8002e6a:	f001 feb6 	bl	8004bda <HAL_NVIC_EnableIRQ>

}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	4b46      	ldr	r3, [pc, #280]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4a45      	ldr	r2, [pc, #276]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	61d3      	str	r3, [r2, #28]
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	61d3      	str	r3, [r2, #28]
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a39      	ldr	r2, [pc, #228]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a33      	ldr	r2, [pc, #204]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	61d3      	str	r3, [r2, #28]
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <_ZL12MX_GPIO_Initv+0x130>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002ef8:	482d      	ldr	r0, [pc, #180]	; (8002fb0 <_ZL12MX_GPIO_Initv+0x134>)
 8002efa:	f002 fa28 	bl	800534e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 8002efe:	2200      	movs	r2, #0
 8002f00:	f240 1103 	movw	r1, #259	; 0x103
 8002f04:	482b      	ldr	r0, [pc, #172]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x138>)
 8002f06:	f002 fa22 	bl	800534e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f64d 2101 	movw	r1, #55809	; 0xda01
 8002f10:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x13c>)
 8002f12:	f002 fa1c 	bl	800534e <HAL_GPIO_WritePin>
                          |BLE_EN_Pin|PWR_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 8002f16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4820      	ldr	r0, [pc, #128]	; (8002fb0 <_ZL12MX_GPIO_Initv+0x134>)
 8002f30:	f002 f876 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_G_Pin PWR_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin;
 8002f34:	f240 1303 	movw	r3, #259	; 0x103
 8002f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x138>)
 8002f4e:	f002 f867 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BAT_P_Pin */
  GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8002f52:	2310      	movs	r3, #16
 8002f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f56:	2303      	movs	r3, #3
 8002f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4813      	ldr	r0, [pc, #76]	; (8002fb4 <_ZL12MX_GPIO_Initv+0x138>)
 8002f66:	f002 f85b 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SD_CS_Pin MLX_TRIG_Pin SD_LED_G_Pin BLE_STATUS_Pin
                           BLE_EN_Pin PWR_LED_B_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8002f6a:	f64d 2301 	movw	r3, #55809	; 0xda01
 8002f6e:	617b      	str	r3, [r7, #20]
                          |BLE_EN_Pin|PWR_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x13c>)
 8002f84:	f002 f84c 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MLX_RDY_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MLX_RDY_Pin|BLE_INT_Pin;
 8002f88:	f242 4304 	movw	r3, #9220	; 0x2404
 8002f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <_ZL12MX_GPIO_Initv+0x13c>)
 8002f9e:	f002 f83f 	bl	8005020 <HAL_GPIO_Init>

}
 8002fa2:	bf00      	nop
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400

08002fbc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	std::map<USART_TypeDef*, UART*>::iterator it;
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fc76 	bl	80018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = UART::objectMap.find(huart->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4811      	ldr	r0, [pc, #68]	; (8003018 <HAL_UART_RxCpltCallback+0x5c>)
 8002fd4:	f7fe fc7e 	bl	80018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60bb      	str	r3, [r7, #8]
	if(it != UART::objectMap.end())
 8002fdc:	480e      	ldr	r0, [pc, #56]	; (8003018 <HAL_UART_RxCpltCallback+0x5c>)
 8002fde:	f7fe fc88 	bl	80018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	f107 020c 	add.w	r2, r7, #12
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fc8b 	bl	800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_UART_RxCpltCallback+0x54>
		it->second->memberIRQ();
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f86e 	bl	80030e2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>
 8003006:	4603      	mov	r3, r0
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fbdc 	bl	80017c8 <_ZN4UART9memberIRQEv>
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000414 	.word	0x20000414

0800301c <_Z21convertDegMinToDecDegf>:

double convertDegMinToDecDeg (float degMin)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  double min = 0.0;
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd fa0b 	bl	8000458 <__aeabi_f2d>
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <_Z21convertDegMinToDecDegf+0x8c>)
 8003048:	f00e fe06 	bl	8011c58 <fmod>
 800304c:	e9c7 0104 	strd	r0, r1, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <_Z21convertDegMinToDecDegf+0x90>)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd ff62 	bl	8000f1c <__aeabi_fdiv>
 8003058:	4603      	mov	r3, r0
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fffa 	bl	8001054 <__aeabi_f2iz>
 8003060:	4603      	mov	r3, r0
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fe52 	bl	8000d0c <__aeabi_i2f>
 8003068:	4603      	mov	r3, r0
 800306a:	607b      	str	r3, [r7, #4]
  decDeg = degMin + ( min / 60 );
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd f9f3 	bl	8000458 <__aeabi_f2d>
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <_Z21convertDegMinToDecDegf+0x94>)
 800307c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003080:	f7fd fb6c 	bl	800075c <__aeabi_ddiv>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f886 	bl	800019c <__adddf3>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 8003098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40590000 	.word	0x40590000
 80030ac:	42c80000 	.word	0x42c80000
 80030b0:	404e0000 	.word	0x404e0000

080030b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030c6:	f001 f861 	bl	800418c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40011000 	.word	0x40011000

080030d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030dc:	b672      	cpsid	i
}
 80030de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <Error_Handler+0x8>

080030e2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f84d 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10c      	bne.n	800312a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003116:	4293      	cmp	r3, r2
 8003118:	d107      	bne.n	800312a <_Z41__static_initialization_and_destruction_0ii+0x2a>
UART gps(&huart1), ble(&huart2);
 800311a:	490d      	ldr	r1, [pc, #52]	; (8003150 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800311e:	f7fe f9d5 	bl	80014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8003122:	490d      	ldr	r1, [pc, #52]	; (8003158 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003124:	480d      	ldr	r0, [pc, #52]	; (800315c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003126:	f7fe f9d1 	bl	80014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003136:	4293      	cmp	r3, r2
 8003138:	d105      	bne.n	8003146 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800313a:	4808      	ldr	r0, [pc, #32]	; (800315c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800313c:	f7fe f9e4 	bl	8001508 <_ZN4UARTD1Ev>
 8003140:	4804      	ldr	r0, [pc, #16]	; (8003154 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003142:	f7fe f9e1 	bl	8001508 <_ZN4UARTD1Ev>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000580 	.word	0x20000580
 8003154:	20000608 	.word	0x20000608
 8003158:	200005c4 	.word	0x200005c4
 800315c:	20000638 	.word	0x20000638

08003160 <_GLOBAL__sub_I_usbBuffer>:
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
 8003164:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff ffc9 	bl	8003100 <_Z41__static_initialization_and_destruction_0ii>
 800316e:	bd80      	pop	{r7, pc}

08003170 <_GLOBAL__sub_D_usbBuffer>:
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
 8003174:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003178:	2000      	movs	r0, #0
 800317a:	f7ff ffc1 	bl	8003100 <_Z41__static_initialization_and_destruction_0ii>
 800317e:	bd80      	pop	{r7, pc}

08003180 <_Z12MPU6050_InitP17I2C_HandleTypeDef>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af04      	add	r7, sp, #16
 8003186:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318c:	9302      	str	r3, [sp, #8]
 800318e:	2301      	movs	r3, #1
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	f107 030f 	add.w	r3, r7, #15
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2301      	movs	r3, #1
 800319a:	2275      	movs	r2, #117	; 0x75
 800319c:	21d0      	movs	r1, #208	; 0xd0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f002 fb44 	bl	800582c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b68      	cmp	r3, #104	; 0x68
 80031a8:	d161      	bne.n	800326e <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xee>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	9302      	str	r3, [sp, #8]
 80031b4:	2301      	movs	r3, #1
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	f107 030e 	add.w	r3, r7, #14
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2301      	movs	r3, #1
 80031c0:	226b      	movs	r2, #107	; 0x6b
 80031c2:	21d0      	movs	r1, #208	; 0xd0
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f002 fa37 	bl	8005638 <HAL_I2C_Mem_Write>

        // Disable LPF
        Data = 0x00;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG_REG,1, &Data, 1, i2c_timeout);
 80031ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2301      	movs	r3, #1
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	f107 030e 	add.w	r3, r7, #14
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2301      	movs	r3, #1
 80031e0:	221a      	movs	r2, #26
 80031e2:	21d0      	movs	r1, #208	; 0xd0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f002 fa27 	bl	8005638 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80031ea:	2307      	movs	r3, #7
 80031ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	9302      	str	r3, [sp, #8]
 80031f4:	2301      	movs	r3, #1
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	f107 030e 	add.w	r3, r7, #14
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2301      	movs	r3, #1
 8003200:	2219      	movs	r2, #25
 8003202:	21d0      	movs	r1, #208	; 0xd0
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f002 fa17 	bl	8005638 <HAL_I2C_Mem_Write>

        // Disable FIFO buffer
        Data = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, i2c_timeout);
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	2301      	movs	r3, #1
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	f107 030e 	add.w	r3, r7, #14
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2301      	movs	r3, #1
 8003220:	2223      	movs	r2, #35	; 0x23
 8003222:	21d0      	movs	r1, #208	; 0xd0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f002 fa07 	bl	8005638 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	2301      	movs	r3, #1
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f107 030e 	add.w	r3, r7, #14
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2301      	movs	r3, #1
 8003240:	221c      	movs	r2, #28
 8003242:	21d0      	movs	r1, #208	; 0xd0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f002 f9f7 	bl	8005638 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800324a:	2300      	movs	r3, #0
 800324c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	2301      	movs	r3, #1
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	f107 030e 	add.w	r3, r7, #14
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	221b      	movs	r2, #27
 8003262:	21d0      	movs	r1, #208	; 0xd0
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f002 f9e7 	bl	8005638 <HAL_I2C_Mem_Write>
        return 0;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xf0>
    }
    return 1;
 800326e:	2301      	movs	r3, #1
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd f8d7 	bl	8000434 <__aeabi_i2d>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	f00e fd19 	bl	8011cc4 <sqrt>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fd f8c1 	bl	8000434 <__aeabi_i2d>
 80032b2:	4604      	mov	r4, r0
 80032b4:	460d      	mov	r5, r1
 80032b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f8ba 	bl	8000434 <__aeabi_i2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f00e fcc3 	bl	8011c52 <atan2>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
    }
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}
 80032da:	0000      	movs	r0, r0
 80032dc:	0000      	movs	r0, r0
	...

080032e0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b094      	sub	sp, #80	; 0x50
 80032e6:	af04      	add	r7, sp, #16
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80032ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f0:	9302      	str	r3, [sp, #8]
 80032f2:	230e      	movs	r3, #14
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2301      	movs	r3, #1
 80032fe:	223b      	movs	r2, #59	; 0x3b
 8003300:	21d0      	movs	r1, #208	; 0xd0
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f002 fa92 	bl	800582c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003308:	7a3b      	ldrb	r3, [r7, #8]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	b21a      	sxth	r2, r3
 800330e:	7a7b      	ldrb	r3, [r7, #9]
 8003310:	b21b      	sxth	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b21a      	sxth	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800331a:	7abb      	ldrb	r3, [r7, #10]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b21a      	sxth	r2, r3
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	b21b      	sxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b21a      	sxth	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800332c:	7b3b      	ldrb	r3, [r7, #12]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	7b7b      	ldrb	r3, [r7, #13]
 8003334:	b21b      	sxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b21a      	sxth	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	b21a      	sxth	r2, r3
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	b21b      	sxth	r3, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800334c:	7c3b      	ldrb	r3, [r7, #16]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b21a      	sxth	r2, r3
 8003352:	7c7b      	ldrb	r3, [r7, #17]
 8003354:	b21b      	sxth	r3, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	b21a      	sxth	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800335e:	7cbb      	ldrb	r3, [r7, #18]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b21a      	sxth	r2, r3
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	b21b      	sxth	r3, r3
 8003368:	4313      	orrs	r3, r2
 800336a:	b21a      	sxth	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003370:	7d3b      	ldrb	r3, [r7, #20]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	b21a      	sxth	r2, r3
 8003376:	7d7b      	ldrb	r3, [r7, #21]
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21a      	sxth	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f853 	bl	8000434 <__aeabi_i2d>
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	4baf      	ldr	r3, [pc, #700]	; (8003650 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8003394:	f7fd f9e2 	bl	800075c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f843 	bl	8000434 <__aeabi_i2d>
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4ba7      	ldr	r3, [pc, #668]	; (8003650 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 80033b4:	f7fd f9d2 	bl	800075c <__aeabi_ddiv>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f833 	bl	8000434 <__aeabi_i2d>
 80033ce:	a39a      	add	r3, pc, #616	; (adr r3, 8003638 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x358>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd f9c2 	bl	800075c <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80033e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fc90 	bl	8000d0c <__aeabi_i2f>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4999      	ldr	r1, [pc, #612]	; (8003654 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x374>)
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fd93 	bl	8000f1c <__aeabi_fdiv>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4997      	ldr	r1, [pc, #604]	; (8003658 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x378>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fbd2 	bl	8000ba4 <__addsf3>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f810 	bl	8000434 <__aeabi_i2d>
 8003414:	a38a      	add	r3, pc, #552	; (adr r3, 8003640 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f99f 	bl	800075c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f800 	bl	8000434 <__aeabi_i2d>
 8003434:	a382      	add	r3, pc, #520	; (adr r3, 8003640 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f98f 	bl	800075c <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	6839      	ldr	r1, [r7, #0]
 8003444:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f7fc fff0 	bl	8000434 <__aeabi_i2d>
 8003454:	a37a      	add	r3, pc, #488	; (adr r3, 8003640 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f97f 	bl	800075c <__aeabi_ddiv>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003468:	f000 fea2 	bl	80041b0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	4618      	mov	r0, r3
 8003476:	f7fc ffcd 	bl	8000414 <__aeabi_ui2d>
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b78      	ldr	r3, [pc, #480]	; (8003660 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x380>)
 8003480:	f7fd f96c 	bl	800075c <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800348c:	f000 fe90 	bl	80041b0 <HAL_GetTick>
 8003490:	4603      	mov	r3, r0
 8003492:	4a72      	ldr	r2, [pc, #456]	; (800365c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 8003494:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349c:	461a      	mov	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a4:	fb03 f202 	mul.w	r2, r3, r2
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034ae:	4619      	mov	r1, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034b6:	fb03 f301 	mul.w	r3, r3, r1
    double roll_sqrt = sqrt(
 80034ba:	4413      	add	r3, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fedb 	bl	8003278 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80034c2:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034d2:	f7fd fa81 	bl	80009d8 <__aeabi_dcmpeq>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d119      	bne.n	8003510 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x230>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc ffa6 	bl	8000434 <__aeabi_i2d>
 80034e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ec:	f7fd f936 	bl	800075c <__aeabi_ddiv>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f00e fa1e 	bl	8011938 <atan>
 80034fc:	a352      	add	r3, pc, #328	; (adr r3, 8003648 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd f801 	bl	8000508 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800350e:	e005      	b.n	800351c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x23c>
    }
    else
    {
        roll = 0.0;
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003522:	425a      	negs	r2, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7ff feb7 	bl	80032a0 <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003532:	a345      	add	r3, pc, #276	; (adr r3, 8003648 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc ffe6 	bl	8000508 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b46      	ldr	r3, [pc, #280]	; (8003664 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 800354a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800354e:	f7fd fa4d 	bl	80009ec <__aeabi_dcmplt>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x28e>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8003564:	f7fd fa60 	bl	8000a28 <__aeabi_dcmpgt>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2b8>
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8003574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003578:	f7fd fa56 	bl	8000a28 <__aeabi_dcmpgt>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d015      	beq.n	80035ae <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2ce>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 800358e:	f7fd fa2d 	bl	80009ec <__aeabi_dcmplt>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2ce>
    {
        KalmanY.angle = pitch;
 8003598:	4934      	ldr	r1, [pc, #208]	; (800366c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 800359a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80035ac:	e012      	b.n	80035d4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2f4>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035bc:	e9cd 2300 	strd	r2, r3, [sp]
 80035c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c4:	4829      	ldr	r0, [pc, #164]	; (800366c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 80035c6:	f000 f855 	bl	8003674 <_Z15Kalman_getAngleP8Kalman_tddd>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80035da:	4690      	mov	r8, r2
 80035dc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 80035e6:	4640      	mov	r0, r8
 80035e8:	4649      	mov	r1, r9
 80035ea:	f7fd fa1d 	bl	8000a28 <__aeabi_dcmpgt>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x326>
        DataStruct->Gx = -DataStruct->Gx;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80035fa:	4614      	mov	r4, r2
 80035fc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800360c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003614:	e9cd 2300 	strd	r2, r3, [sp]
 8003618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800361c:	4814      	ldr	r0, [pc, #80]	; (8003670 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x390>)
 800361e:	f000 f829 	bl	8003674 <_Z15Kalman_getAngleP8Kalman_tddd>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800362c:	bf00      	nop
 800362e:	3740      	adds	r7, #64	; 0x40
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003636:	bf00      	nop
 8003638:	00000000 	.word	0x00000000
 800363c:	40cc2900 	.word	0x40cc2900
 8003640:	00000000 	.word	0x00000000
 8003644:	40606000 	.word	0x40606000
 8003648:	1a63c1f8 	.word	0x1a63c1f8
 800364c:	404ca5dc 	.word	0x404ca5dc
 8003650:	40d00000 	.word	0x40d00000
 8003654:	43aa0000 	.word	0x43aa0000
 8003658:	42121eb8 	.word	0x42121eb8
 800365c:	200006c8 	.word	0x200006c8
 8003660:	408f4000 	.word	0x408f4000
 8003664:	c0568000 	.word	0xc0568000
 8003668:	40568000 	.word	0x40568000
 800366c:	20000048 	.word	0x20000048
 8003670:	20000000 	.word	0x20000000

08003674 <_Z15Kalman_getAngleP8Kalman_tddd>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b092      	sub	sp, #72	; 0x48
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003686:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800368a:	f7fc fd85 	bl	8000198 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800369c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036a4:	f7fc ff30 	bl	8000508 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4620      	mov	r0, r4
 80036ae:	4629      	mov	r1, r5
 80036b0:	f7fc fd74 	bl	800019c <__adddf3>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80036ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80036ce:	f7fc ff1b 	bl	8000508 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80036e0:	f7fc fd5a 	bl	8000198 <__aeabi_dsub>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80036f2:	f7fc fd51 	bl	8000198 <__aeabi_dsub>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fc fd4a 	bl	800019c <__adddf3>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003714:	f7fc fef8 	bl	8000508 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4620      	mov	r0, r4
 800371e:	4629      	mov	r1, r5
 8003720:	f7fc fd3c 	bl	800019c <__adddf3>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800373a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800373e:	f7fc fee3 	bl	8000508 <__aeabi_dmul>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f7fc fd25 	bl	8000198 <__aeabi_dsub>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	68f9      	ldr	r1, [r7, #12]
 8003754:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003764:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003768:	f7fc fece 	bl	8000508 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc fd10 	bl	8000198 <__aeabi_dsub>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800378e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003792:	f7fc feb9 	bl	8000508 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc fcfd 	bl	800019c <__adddf3>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037b8:	f7fc fcf0 	bl	800019c <__adddf3>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037ce:	f7fc ffc5 	bl	800075c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e4:	f7fc ffba 	bl	800075c <__aeabi_ddiv>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80037f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037fa:	f7fc fccd 	bl	8000198 <__aeabi_dsub>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800380c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003810:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003814:	f7fc fe78 	bl	8000508 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4620      	mov	r0, r4
 800381e:	4629      	mov	r1, r5
 8003820:	f7fc fcbc 	bl	800019c <__adddf3>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003834:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003838:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800383c:	f7fc fe64 	bl	8000508 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4620      	mov	r0, r4
 8003846:	4629      	mov	r1, r5
 8003848:	f7fc fca8 	bl	800019c <__adddf3>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800385c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003866:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003870:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003878:	f7fc fe46 	bl	8000508 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4620      	mov	r0, r4
 8003882:	4629      	mov	r1, r5
 8003884:	f7fc fc88 	bl	8000198 <__aeabi_dsub>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003898:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800389c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038a0:	f7fc fe32 	bl	8000508 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7fc fc74 	bl	8000198 <__aeabi_dsub>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	68f9      	ldr	r1, [r7, #12]
 80038b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80038c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c8:	f7fc fe1e 	bl	8000508 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc fc60 	bl	8000198 <__aeabi_dsub>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	68f9      	ldr	r1, [r7, #12]
 80038de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80038e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038f0:	f7fc fe0a 	bl	8000508 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4620      	mov	r0, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	f7fc fc4c 	bl	8000198 <__aeabi_dsub>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	3748      	adds	r7, #72	; 0x48
 8003916:	46bd      	mov	sp, r7
 8003918:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800391c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <HAL_MspInit+0x58>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <HAL_MspInit+0x58>)
 8003928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800392c:	6253      	str	r3, [r2, #36]	; 0x24
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_MspInit+0x58>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_MspInit+0x58>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_MspInit+0x58>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6213      	str	r3, [r2, #32]
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_MspInit+0x58>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_MspInit+0x58>)
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_MspInit+0x58>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6253      	str	r3, [r2, #36]	; 0x24
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_MspInit+0x58>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <HAL_ADC_MspInit+0xf4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d163      	bne.n	8003a62 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	61d3      	str	r3, [r2, #28]
 80039be:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	61d3      	str	r3, [r2, #28]
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <HAL_ADC_MspInit+0xf8>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 80039e2:	2310      	movs	r3, #16
 80039e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e6:	2303      	movs	r3, #3
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	481f      	ldr	r0, [pc, #124]	; (8003a74 <HAL_ADC_MspInit+0xfc>)
 80039f6:	f001 fb13 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 80039fa:	2302      	movs	r3, #2
 80039fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fe:	2303      	movs	r3, #3
 8003a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	481a      	ldr	r0, [pc, #104]	; (8003a78 <HAL_ADC_MspInit+0x100>)
 8003a0e:	f001 fb07 	bl	8005020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <HAL_ADC_MspInit+0x108>)
 8003a16:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a30:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003a46:	480d      	ldr	r0, [pc, #52]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a48:	f001 f8d6 	bl	8004bf8 <HAL_DMA_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8003a52:	f7ff fb41 	bl	80030d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_ADC_MspInit+0x104>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	; 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40012400 	.word	0x40012400
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020000 	.word	0x40020000
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	20000490 	.word	0x20000490
 8003a80:	40026008 	.word	0x40026008

08003a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_I2C_MspInit+0x7c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d127      	bne.n	8003af6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	61d3      	str	r3, [r2, #28]
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003abe:	23c0      	movs	r3, #192	; 0xc0
 8003ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ac2:	2312      	movs	r3, #18
 8003ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aca:	2303      	movs	r3, #3
 8003acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ace:	2304      	movs	r3, #4
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	f107 0314 	add.w	r3, r7, #20
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <HAL_I2C_MspInit+0x84>)
 8003ada:	f001 faa1 	bl	8005020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ae8:	6253      	str	r3, [r2, #36]	; 0x24
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_I2C_MspInit+0x80>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3728      	adds	r7, #40	; 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40005400 	.word	0x40005400
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020400 	.word	0x40020400

08003b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_SPI_MspInit+0x7c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d127      	bne.n	8003b7e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	61d3      	str	r3, [r2, #28]
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_SPI_MspInit+0x80>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b5e:	23e0      	movs	r3, #224	; 0xe0
 8003b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b6e:	2305      	movs	r3, #5
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4619      	mov	r1, r3
 8003b78:	4805      	ldr	r0, [pc, #20]	; (8003b90 <HAL_SPI_MspInit+0x84>)
 8003b7a:	f001 fa51 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b7e:	bf00      	nop
 8003b80:	3728      	adds	r7, #40	; 0x28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40013000 	.word	0x40013000
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40020000 	.word	0x40020000

08003b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	; (8003c8c <HAL_UART_MspInit+0xf8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d131      	bne.n	8003c1a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6213      	str	r3, [r2, #32]
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bf8:	2307      	movs	r3, #7
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	4824      	ldr	r0, [pc, #144]	; (8003c94 <HAL_UART_MspInit+0x100>)
 8003c04:	f001 fa0c 	bl	8005020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2025      	movs	r0, #37	; 0x25
 8003c0e:	f000 ffc8 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c12:	2025      	movs	r0, #37	; 0x25
 8003c14:	f000 ffe1 	bl	8004bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c18:	e034      	b.n	8003c84 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_UART_MspInit+0x104>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d12f      	bne.n	8003c84 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2e:	6253      	str	r3, [r2, #36]	; 0x24
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	61d3      	str	r3, [r2, #28]
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_UART_MspInit+0xfc>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c54:	230c      	movs	r3, #12
 8003c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c64:	2307      	movs	r3, #7
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4809      	ldr	r0, [pc, #36]	; (8003c94 <HAL_UART_MspInit+0x100>)
 8003c70:	f001 f9d6 	bl	8005020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c74:	2200      	movs	r2, #0
 8003c76:	2100      	movs	r1, #0
 8003c78:	2026      	movs	r0, #38	; 0x26
 8003c7a:	f000 ff92 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c7e:	2026      	movs	r0, #38	; 0x26
 8003c80:	f000 ffab 	bl	8004bda <HAL_NVIC_EnableIRQ>
}
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40004400 	.word	0x40004400

08003c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 8003cac:	2200      	movs	r2, #0
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	201b      	movs	r0, #27
 8003cb2:	f000 ff76 	bl	8004ba2 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8003cb6:	201b      	movs	r0, #27
 8003cb8:	f000 ff8f 	bl	8004bda <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_InitTick+0x9c>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_InitTick+0x9c>)
 8003cc2:	f043 0310 	orr.w	r3, r3, #16
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_InitTick+0x9c>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cd4:	f107 0210 	add.w	r2, r7, #16
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 fc8c 	bl	80085fc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f004 fc76 	bl	80085d4 <HAL_RCC_GetPCLK2Freq>
 8003ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_InitTick+0xa0>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_InitTick+0xa4>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <HAL_InitTick+0xa8>)
 8003cfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d04:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003d18:	4809      	ldr	r0, [pc, #36]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d1a:	f004 ffe7 	bl	8008cec <HAL_TIM_Base_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003d24:	4806      	ldr	r0, [pc, #24]	; (8003d40 <HAL_InitTick+0xa4>)
 8003d26:	f005 f829 	bl	8008d7c <HAL_TIM_Base_Start_IT>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	e000      	b.n	8003d30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3730      	adds	r7, #48	; 0x30
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	20000940 	.word	0x20000940
 8003d44:	40011000 	.word	0x40011000

08003d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d4c:	e7fe      	b.n	8003d4c <NMI_Handler+0x4>

08003d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d52:	e7fe      	b.n	8003d52 <HardFault_Handler+0x4>

08003d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <MemManage_Handler+0x4>

08003d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d5e:	e7fe      	b.n	8003d5e <BusFault_Handler+0x4>

08003d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d64:	e7fe      	b.n	8003d64 <UsageFault_Handler+0x4>

08003d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d72:	b480      	push	{r7}
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <DMA1_Channel1_IRQHandler+0x10>)
 8003d9e:	f001 f861 	bl	8004e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000490 	.word	0x20000490

08003dac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <USB_LP_IRQHandler+0x10>)
 8003db2:	f002 fbbf 	bl	8006534 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20001a70 	.word	0x20001a70

08003dc0 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <TIM11_IRQHandler+0x10>)
 8003dc6:	f005 f82b 	bl	8008e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000940 	.word	0x20000940

08003dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <USART1_IRQHandler+0x10>)
 8003dda:	f005 fafd 	bl	80093d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000580 	.word	0x20000580

08003de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <USART2_IRQHandler+0x10>)
 8003dee:	f005 faf3 	bl	80093d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200005c4 	.word	0x200005c4

08003dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <_kill>:

int _kill(int pid, int sig)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e14:	f00e fa24 	bl	8012260 <__errno>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2216      	movs	r2, #22
 8003e1c:	601a      	str	r2, [r3, #0]
	return -1;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_exit>:

void _exit (int status)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffe7 	bl	8003e0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e3c:	e7fe      	b.n	8003e3c <_exit+0x12>

08003e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e00a      	b.n	8003e66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e50:	f3af 8000 	nop.w
 8003e54:	4601      	mov	r1, r0
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	60ba      	str	r2, [r7, #8]
 8003e5c:	b2ca      	uxtb	r2, r1
 8003e5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	dbf0      	blt.n	8003e50 <_read+0x12>
	}

return len;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e009      	b.n	8003e9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	60ba      	str	r2, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	dbf1      	blt.n	8003e8a <_write+0x12>
	}
	return len;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_close>:

int _close(int file)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	return -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ed6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <_isatty>:

int _isatty(int file)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	return 1;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <_sbrk+0x5c>)
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <_sbrk+0x60>)
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <_sbrk+0x64>)
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <_sbrk+0x68>)
 8003f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <_sbrk+0x64>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f40:	f00e f98e 	bl	8012260 <__errno>
 8003f44:	4603      	mov	r3, r0
 8003f46:	220c      	movs	r2, #12
 8003f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4e:	e009      	b.n	8003f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <_sbrk+0x64>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <_sbrk+0x64>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <_sbrk+0x64>)
 8003f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20004000 	.word	0x20004000
 8003f70:	00000400 	.word	0x00000400
 8003f74:	200006cc 	.word	0x200006cc
 8003f78:	20001d60 	.word	0x20001d60

08003f7c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f8a:	490d      	ldr	r1, [pc, #52]	; (8003fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f90:	e002      	b.n	8003f98 <LoopCopyDataInit>

08003f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f96:	3304      	adds	r3, #4

08003f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f9c:	d3f9      	bcc.n	8003f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	; (8003fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fa4:	e001      	b.n	8003faa <LoopFillZerobss>

08003fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa8:	3204      	adds	r2, #4

08003faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fac:	d3fb      	bcc.n	8003fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fae:	f7ff ffe5 	bl	8003f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fb2:	f00e f95b 	bl	801226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fb6:	f7fe fa33 	bl	8002420 <main>
  bx lr
 8003fba:	4770      	bx	lr
  ldr r0, =_sdata
 8003fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fc0:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 8003fc4:	08017d14 	.word	0x08017d14
  ldr r2, =_sbss
 8003fc8:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8003fcc:	20001d60 	.word	0x20001d60

08003fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fd0:	e7fe      	b.n	8003fd0 <ADC1_IRQHandler>

08003fd2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe0:	b672      	cpsid	i
}
 8003fe2:	bf00      	nop
 8003fe4:	f7ff f878 	bl	80030d8 <Error_Handler>
 8003fe8:	e7fe      	b.n	8003fe8 <stm32_lock_init+0x16>
  lock->flag = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004006:	f3ef 8310 	mrs	r3, PRIMASK
 800400a:	60bb      	str	r3, [r7, #8]
  return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004016:	b672      	cpsid	i
}
 8004018:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800401a:	f3bf 8f4f 	dsb	sy
}
 800401e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004020:	f3bf 8f6f 	isb	sy
}
 8004024:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800402c:	b672      	cpsid	i
}
 800402e:	bf00      	nop
 8004030:	f7ff f852 	bl	80030d8 <Error_Handler>
 8004034:	e7fe      	b.n	8004034 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e008      	b.n	8004058 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	d104      	bne.n	8004058 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800404e:	b672      	cpsid	i
}
 8004050:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8004052:	f7ff f841 	bl	80030d8 <Error_Handler>
 8004056:	e7fe      	b.n	8004056 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	3301      	adds	r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	705a      	strb	r2, [r3, #1]
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800407a:	b672      	cpsid	i
}
 800407c:	bf00      	nop
 800407e:	f7ff f82b 	bl	80030d8 <Error_Handler>
 8004082:	e7fe      	b.n	8004082 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800408c:	b672      	cpsid	i
}
 800408e:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8004090:	f7ff f822 	bl	80030d8 <Error_Handler>
 8004094:	e7fe      	b.n	8004094 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	3b01      	subs	r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <stm32_lock_release+0x4a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80040b2:	b662      	cpsie	i
}
 80040b4:	bf00      	nop
  {
    __enable_irq();
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80040cc:	f00e f8c8 	bl	8012260 <__errno>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2216      	movs	r2, #22
 80040d4:	601a      	str	r2, [r3, #0]
    return;
 80040d6:	e015      	b.n	8004104 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80040d8:	2002      	movs	r0, #2
 80040da:	f00e f8eb 	bl	80122b4 <malloc>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff6d 	bl	8003fd2 <stm32_lock_init>
    return;
 80040f8:	e004      	b.n	8004104 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80040fa:	b672      	cpsid	i
}
 80040fc:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80040fe:	f7fe ffeb 	bl	80030d8 <Error_Handler>
 8004102:	e7fe      	b.n	8004102 <__retarget_lock_init_recursive+0x44>
}
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
 800411c:	f7fe ffdc 	bl	80030d8 <Error_Handler>
 8004120:	e7fe      	b.n	8004120 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff6a 	bl	8003ffe <stm32_lock_acquire>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004140:	b672      	cpsid	i
}
 8004142:	bf00      	nop
 8004144:	f7fe ffc8 	bl	80030d8 <Error_Handler>
 8004148:	e7fe      	b.n	8004148 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff8d 	bl	800406c <stm32_lock_release>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004164:	2003      	movs	r0, #3
 8004166:	f000 fd11 	bl	8004b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800416a:	200f      	movs	r0, #15
 800416c:	f7ff fd96 	bl	8003c9c <HAL_InitTick>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	e001      	b.n	8004180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800417c:	f7ff fbce 	bl	800391c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004180:	79fb      	ldrb	r3, [r7, #7]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_IncTick+0x1c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_IncTick+0x20>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4413      	add	r3, r2
 800419a:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <HAL_IncTick+0x1c>)
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000980 	.word	0x20000980
 80041ac:	20000098 	.word	0x20000098

080041b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return uwTick;
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <HAL_GetTick+0x10>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	20000980 	.word	0x20000980

080041c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041dc:	d004      	beq.n	80041e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_Delay+0x40>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041e8:	bf00      	nop
 80041ea:	f7ff ffe1 	bl	80041b0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d8f7      	bhi.n	80041ea <HAL_Delay+0x26>
  {
  }
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000098 	.word	0x20000098

08004208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	; 0x38
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e127      	b.n	8004478 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d115      	bne.n	8004262 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004244:	4b8e      	ldr	r3, [pc, #568]	; (8004480 <HAL_ADC_Init+0x278>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a8d      	ldr	r2, [pc, #564]	; (8004480 <HAL_ADC_Init+0x278>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	4b8b      	ldr	r3, [pc, #556]	; (8004480 <HAL_ADC_Init+0x278>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fb8b 	bl	8003978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80ff 	bne.w	800446e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004278:	f023 0302 	bic.w	r3, r3, #2
 800427c:	f043 0202 	orr.w	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004284:	4b7f      	ldr	r3, [pc, #508]	; (8004484 <HAL_ADC_Init+0x27c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	497c      	ldr	r1, [pc, #496]	; (8004484 <HAL_ADC_Init+0x27c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800429e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	4619      	mov	r1, r3
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80042c2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80042c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d0:	4619      	mov	r1, r3
 80042d2:	2302      	movs	r3, #2
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80042ea:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80042ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ee:	4313      	orrs	r3, r2
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d007      	beq.n	800430a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8004302:	4313      	orrs	r3, r2
 8004304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004306:	4313      	orrs	r3, r2
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d04f      	beq.n	80043b8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431e:	4313      	orrs	r3, r2
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800432a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6912      	ldr	r2, [r2, #16]
 8004330:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004334:	d003      	beq.n	800433e <HAL_ADC_Init+0x136>
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6912      	ldr	r2, [r2, #16]
 800433a:	2a01      	cmp	r2, #1
 800433c:	d102      	bne.n	8004344 <HAL_ADC_Init+0x13c>
 800433e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004342:	e000      	b.n	8004346 <HAL_ADC_Init+0x13e>
 8004344:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004346:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	4313      	orrs	r3, r2
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d125      	bne.n	80043a4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d114      	bne.n	800438c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	3b01      	subs	r3, #1
 8004368:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800436c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	fa92 f2a2 	rbit	r2, r2
 8004374:	617a      	str	r2, [r7, #20]
  return result;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	fab2 f282 	clz	r2, r2
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	4093      	lsls	r3, r2
 8004380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	4313      	orrs	r3, r2
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
 800438a:	e00b      	b.n	80043a4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_ADC_Init+0x280>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_ADC_Init+0x284>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d4:	d003      	beq.n	80043de <HAL_ADC_Init+0x1d6>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d119      	bne.n	8004412 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80043f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	fa92 f2a2 	rbit	r2, r2
 80043fa:	60fa      	str	r2, [r7, #12]
  return result;
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fab2 f282 	clz	r2, r2
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	fa03 f202 	lsl.w	r2, r3, r2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
 8004410:	e007      	b.n	8004422 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_ADC_Init+0x288>)
 800442a:	4013      	ands	r3, r2
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	429a      	cmp	r2, r3
 8004430:	d10b      	bne.n	800444a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	f023 0303 	bic.w	r3, r3, #3
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	64da      	str	r2, [r3, #76]	; 0x4c
 8004448:	e014      	b.n	8004474 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	f023 0312 	bic.w	r3, r3, #18
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800446c:	e002      	b.n	8004474 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004478:	4618      	mov	r0, r3
 800447a:	3738      	adds	r7, #56	; 0x38
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	40012700 	.word	0x40012700
 8004488:	fcfc16ff 	.word	0xfcfc16ff
 800448c:	c0fff18d 	.word	0xc0fff18d
 8004490:	bf80fffe 	.word	0xbf80fffe

08004494 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x1e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e074      	b.n	800459c <HAL_ADC_Start_DMA+0x108>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f9e4 	bl	8004888 <ADC_Enable>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d167      	bne.n	800459a <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d106      	bne.n	8004518 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	f023 0206 	bic.w	r2, r3, #6
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
 8004516:	e002      	b.n	800451e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_ADC_Start_DMA+0x110>)
 800452c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_ADC_Start_DMA+0x114>)
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_ADC_Start_DMA+0x118>)
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004546:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004556:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004566:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3358      	adds	r3, #88	; 0x58
 8004572:	4619      	mov	r1, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f000 fb96 	bl	8004ca8 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004598:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	08004941 	.word	0x08004941
 80045a8:	080049e9 	.word	0x080049e9
 80045ac:	08004a05 	.word	0x08004a05

080045b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x20>
 8004604:	2302      	movs	r3, #2
 8004606:	e134      	b.n	8004872 <HAL_ADC_ConfigChannel+0x28a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d81c      	bhi.n	8004652 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	3b05      	subs	r3, #5
 800462a:	221f      	movs	r2, #31
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	4019      	ands	r1, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	3b05      	subs	r3, #5
 8004644:	fa00 f203 	lsl.w	r2, r0, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
 8004650:	e07e      	b.n	8004750 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d81c      	bhi.n	8004694 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	3b23      	subs	r3, #35	; 0x23
 800466c:	221f      	movs	r2, #31
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	4019      	ands	r1, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	3b23      	subs	r3, #35	; 0x23
 8004686:	fa00 f203 	lsl.w	r2, r0, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c
 8004692:	e05d      	b.n	8004750 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b12      	cmp	r3, #18
 800469a:	d81c      	bhi.n	80046d6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	3b41      	subs	r3, #65	; 0x41
 80046ae:	221f      	movs	r2, #31
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	4019      	ands	r1, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	3b41      	subs	r3, #65	; 0x41
 80046c8:	fa00 f203 	lsl.w	r2, r0, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
 80046d4:	e03c      	b.n	8004750 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b18      	cmp	r3, #24
 80046dc:	d81c      	bhi.n	8004718 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	3b5f      	subs	r3, #95	; 0x5f
 80046f0:	221f      	movs	r2, #31
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4019      	ands	r1, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	3b5f      	subs	r3, #95	; 0x5f
 800470a:	fa00 f203 	lsl.w	r2, r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
 8004716:	e01b      	b.n	8004750 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	3b7d      	subs	r3, #125	; 0x7d
 800472a:	221f      	movs	r2, #31
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	4019      	ands	r1, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	3b7d      	subs	r3, #125	; 0x7d
 8004744:	fa00 f203 	lsl.w	r2, r0, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b09      	cmp	r3, #9
 8004756:	d81a      	bhi.n	800478e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6959      	ldr	r1, [r3, #20]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	2207      	movs	r2, #7
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	4019      	ands	r1, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6898      	ldr	r0, [r3, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	fa00 f203 	lsl.w	r2, r0, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	615a      	str	r2, [r3, #20]
 800478c:	e042      	b.n	8004814 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b13      	cmp	r3, #19
 8004794:	d81c      	bhi.n	80047d0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6919      	ldr	r1, [r3, #16]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	3b1e      	subs	r3, #30
 80047a8:	2207      	movs	r2, #7
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	4019      	ands	r1, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6898      	ldr	r0, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	3b1e      	subs	r3, #30
 80047c2:	fa00 f203 	lsl.w	r2, r0, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]
 80047ce:	e021      	b.n	8004814 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b1a      	cmp	r3, #26
 80047d6:	d81c      	bhi.n	8004812 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	3b3c      	subs	r3, #60	; 0x3c
 80047ea:	2207      	movs	r2, #7
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	4019      	ands	r1, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6898      	ldr	r0, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	3b3c      	subs	r3, #60	; 0x3c
 8004804:	fa00 f203 	lsl.w	r2, r0, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e000      	b.n	8004814 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8004812:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d003      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004820:	2b11      	cmp	r3, #17
 8004822:	d121      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_ADC_ConfigChannel+0x294>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11b      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_ADC_ConfigChannel+0x294>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_ADC_ConfigChannel+0x294>)
 8004836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800483a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d111      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_ADC_ConfigChannel+0x298>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <HAL_ADC_ConfigChannel+0x29c>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0c9a      	lsrs	r2, r3, #18
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800485a:	e002      	b.n	8004862 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f9      	bne.n	800485c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	40012700 	.word	0x40012700
 8004880:	20000090 	.word	0x20000090
 8004884:	431bde83 	.word	0x431bde83

08004888 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d043      	beq.n	800492e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <ADC_Enable+0xb0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a20      	ldr	r2, [pc, #128]	; (800493c <ADC_Enable+0xb4>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	0c9a      	lsrs	r2, r3, #18
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80048ca:	e002      	b.n	80048d2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f9      	bne.n	80048cc <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80048d8:	f7ff fc6a 	bl	80041b0 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048de:	e01f      	b.n	8004920 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80048e0:	f7ff fc66 	bl	80041b0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d918      	bls.n	8004920 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d011      	beq.n	8004920 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	f043 0210 	orr.w	r2, r3, #16
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	f043 0201 	orr.w	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d1d8      	bne.n	80048e0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000090 	.word	0x20000090
 800493c:	431bde83 	.word	0x431bde83

08004940 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004956:	2b00      	cmp	r3, #0
 8004958:	d13d      	bne.n	80049d6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d12c      	bne.n	80049ce <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800497a:	2b00      	cmp	r3, #0
 800497c:	d127      	bne.n	80049ce <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004988:	2b00      	cmp	r3, #0
 800498a:	d006      	beq.n	800499a <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004996:	2b00      	cmp	r3, #0
 8004998:	d119      	bne.n	80049ce <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0220 	bic.w	r2, r2, #32
 80049a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7ff fdee 	bl	80045b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80049d4:	e004      	b.n	80049e0 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fde3 	bl	80045c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f7ff fdd2 	bl	80045d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60d3      	str	r3, [r2, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <__NVIC_GetPriorityGrouping+0x18>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0307 	and.w	r3, r3, #7
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db0b      	blt.n	8004ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <__NVIC_EnableIRQ+0x34>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2001      	movs	r0, #1
 8004abe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	490c      	ldr	r1, [pc, #48]	; (8004b20 <__NVIC_SetPriority+0x4c>)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004afc:	e00a      	b.n	8004b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4908      	ldr	r1, [pc, #32]	; (8004b24 <__NVIC_SetPriority+0x50>)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	761a      	strb	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf28      	it	cs
 8004b46:	2304      	movcs	r3, #4
 8004b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d902      	bls.n	8004b58 <NVIC_EncodePriority+0x30>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3b03      	subs	r3, #3
 8004b56:	e000      	b.n	8004b5a <NVIC_EncodePriority+0x32>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43d9      	mvns	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	4313      	orrs	r3, r2
         );
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff4f 	bl	8004a38 <__NVIC_SetPriorityGrouping>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb4:	f7ff ff64 	bl	8004a80 <__NVIC_GetPriorityGrouping>
 8004bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7ff ffb2 	bl	8004b28 <NVIC_EncodePriority>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff ff81 	bl	8004ad4 <__NVIC_SetPriority>
}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff57 	bl	8004a9c <__NVIC_EnableIRQ>
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e043      	b.n	8004c92 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_DMA_Init+0xa4>)
 8004c12:	4413      	add	r3, r2
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_DMA_Init+0xa8>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	009a      	lsls	r2, r3, #2
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_DMA_Init+0xac>)
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	bffd9ff8 	.word	0xbffd9ff8
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	40026000 	.word	0x40026000

08004ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_DMA_Start_IT+0x20>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e04b      	b.n	8004d60 <HAL_DMA_Start_IT+0xb8>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d13a      	bne.n	8004d52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f95e 	bl	8004fc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 020e 	orr.w	r2, r2, #14
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e00f      	b.n	8004d40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0204 	bic.w	r2, r2, #4
 8004d2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 020a 	orr.w	r2, r2, #10
 8004d3e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e005      	b.n	8004d5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d008      	beq.n	8004d92 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2204      	movs	r2, #4
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e022      	b.n	8004dd8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 020e 	bic.w	r2, r2, #14
 8004da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 021c 	and.w	r2, r3, #28
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d005      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e029      	b.n	8004e5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 020e 	bic.w	r2, r2, #14
 8004e14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 021c 	and.w	r2, r3, #28
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f202 	lsl.w	r2, r1, r2
 8004e38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
    }
  }
  return status;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f003 031c 	and.w	r3, r3, #28
 8004e84:	2204      	movs	r2, #4
 8004e86:	409a      	lsls	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d026      	beq.n	8004ede <HAL_DMA_IRQHandler+0x7a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d021      	beq.n	8004ede <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d107      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f003 021c 	and.w	r2, r3, #28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d071      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	e06c      	b.n	8004fb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f003 031c 	and.w	r3, r3, #28
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02e      	beq.n	8004f50 <HAL_DMA_IRQHandler+0xec>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d029      	beq.n	8004f50 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 020a 	bic.w	r2, r2, #10
 8004f18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f003 021c 	and.w	r2, r3, #28
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2102      	movs	r1, #2
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d038      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f4e:	e033      	b.n	8004fb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f003 031c 	and.w	r3, r3, #28
 8004f58:	2208      	movs	r2, #8
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02a      	beq.n	8004fba <HAL_DMA_IRQHandler+0x156>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d025      	beq.n	8004fba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 020e 	bic.w	r2, r2, #14
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 021c 	and.w	r2, r3, #28
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
}
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f003 021c 	and.w	r2, r3, #28
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fdc:	2101      	movs	r1, #1
 8004fde:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d108      	bne.n	8005006 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005004:	e007      	b.n	8005016 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005036:	e154      	b.n	80052e2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2101      	movs	r1, #1
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8146 	beq.w	80052dc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d005      	beq.n	8005068 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005064:	2b02      	cmp	r3, #2
 8005066:	d130      	bne.n	80050ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800509e:	2201      	movs	r2, #1
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 0201 	and.w	r2, r3, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d017      	beq.n	8005106 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	2203      	movs	r2, #3
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d123      	bne.n	800515a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	08da      	lsrs	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3208      	adds	r2, #8
 800511a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	08da      	lsrs	r2, r3, #3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3208      	adds	r2, #8
 8005154:	6939      	ldr	r1, [r7, #16]
 8005156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	2203      	movs	r2, #3
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 0203 	and.w	r2, r3, #3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80a0 	beq.w	80052dc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519c:	4b58      	ldr	r3, [pc, #352]	; (8005300 <HAL_GPIO_Init+0x2e0>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_GPIO_Init+0x2e0>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6213      	str	r3, [r2, #32]
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <HAL_GPIO_Init+0x2e0>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80051b4:	4a53      	ldr	r2, [pc, #332]	; (8005304 <HAL_GPIO_Init+0x2e4>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	3302      	adds	r3, #2
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	220f      	movs	r2, #15
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a4b      	ldr	r2, [pc, #300]	; (8005308 <HAL_GPIO_Init+0x2e8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d019      	beq.n	8005214 <HAL_GPIO_Init+0x1f4>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a4a      	ldr	r2, [pc, #296]	; (800530c <HAL_GPIO_Init+0x2ec>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_GPIO_Init+0x1f0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a49      	ldr	r2, [pc, #292]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00d      	beq.n	800520c <HAL_GPIO_Init+0x1ec>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a48      	ldr	r2, [pc, #288]	; (8005314 <HAL_GPIO_Init+0x2f4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <HAL_GPIO_Init+0x1e8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a47      	ldr	r2, [pc, #284]	; (8005318 <HAL_GPIO_Init+0x2f8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <HAL_GPIO_Init+0x1e4>
 8005200:	2304      	movs	r3, #4
 8005202:	e008      	b.n	8005216 <HAL_GPIO_Init+0x1f6>
 8005204:	2305      	movs	r3, #5
 8005206:	e006      	b.n	8005216 <HAL_GPIO_Init+0x1f6>
 8005208:	2303      	movs	r3, #3
 800520a:	e004      	b.n	8005216 <HAL_GPIO_Init+0x1f6>
 800520c:	2302      	movs	r3, #2
 800520e:	e002      	b.n	8005216 <HAL_GPIO_Init+0x1f6>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_GPIO_Init+0x1f6>
 8005214:	2300      	movs	r3, #0
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	f002 0203 	and.w	r2, r2, #3
 800521c:	0092      	lsls	r2, r2, #2
 800521e:	4093      	lsls	r3, r2
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005226:	4937      	ldr	r1, [pc, #220]	; (8005304 <HAL_GPIO_Init+0x2e4>)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	3302      	adds	r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005234:	4b39      	ldr	r3, [pc, #228]	; (800531c <HAL_GPIO_Init+0x2fc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	43db      	mvns	r3, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005258:	4a30      	ldr	r2, [pc, #192]	; (800531c <HAL_GPIO_Init+0x2fc>)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <HAL_GPIO_Init+0x2fc>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005282:	4a26      	ldr	r2, [pc, #152]	; (800531c <HAL_GPIO_Init+0x2fc>)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_GPIO_Init+0x2fc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052ac:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_GPIO_Init+0x2fc>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <HAL_GPIO_Init+0x2fc>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <HAL_GPIO_Init+0x2fc>)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f aea3 	bne.w	8005038 <HAL_GPIO_Init+0x18>
  }
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	40010000 	.word	0x40010000
 8005308:	40020000 	.word	0x40020000
 800530c:	40020400 	.word	0x40020400
 8005310:	40020800 	.word	0x40020800
 8005314:	40020c00 	.word	0x40020c00
 8005318:	40021000 	.word	0x40021000
 800531c:	40010400 	.word	0x40010400

08005320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e001      	b.n	8005342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	807b      	strh	r3, [r7, #2]
 800535a:	4613      	mov	r3, r2
 800535c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800535e:	787b      	ldrb	r3, [r7, #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800536a:	e003      	b.n	8005374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	041a      	lsls	r2, r3, #16
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	619a      	str	r2, [r3, #24]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005390:	887a      	ldrh	r2, [r7, #2]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4013      	ands	r3, r2
 8005396:	041a      	lsls	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	43d9      	mvns	r1, r3
 800539c:	887b      	ldrh	r3, [r7, #2]
 800539e:	400b      	ands	r3, r1
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	619a      	str	r2, [r3, #24]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e12b      	b.n	800561a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fe fb54 	bl	8003a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2224      	movs	r2, #36	; 0x24
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005414:	f003 f8ca 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
 8005418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a81      	ldr	r2, [pc, #516]	; (8005624 <HAL_I2C_Init+0x274>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d807      	bhi.n	8005434 <HAL_I2C_Init+0x84>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4a80      	ldr	r2, [pc, #512]	; (8005628 <HAL_I2C_Init+0x278>)
 8005428:	4293      	cmp	r3, r2
 800542a:	bf94      	ite	ls
 800542c:	2301      	movls	r3, #1
 800542e:	2300      	movhi	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e006      	b.n	8005442 <HAL_I2C_Init+0x92>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a7d      	ldr	r2, [pc, #500]	; (800562c <HAL_I2C_Init+0x27c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	bf94      	ite	ls
 800543c:	2301      	movls	r3, #1
 800543e:	2300      	movhi	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e0e7      	b.n	800561a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a78      	ldr	r2, [pc, #480]	; (8005630 <HAL_I2C_Init+0x280>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0c9b      	lsrs	r3, r3, #18
 8005454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a6a      	ldr	r2, [pc, #424]	; (8005624 <HAL_I2C_Init+0x274>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d802      	bhi.n	8005484 <HAL_I2C_Init+0xd4>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3301      	adds	r3, #1
 8005482:	e009      	b.n	8005498 <HAL_I2C_Init+0xe8>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	4a69      	ldr	r2, [pc, #420]	; (8005634 <HAL_I2C_Init+0x284>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	3301      	adds	r3, #1
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	430b      	orrs	r3, r1
 800549e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	495c      	ldr	r1, [pc, #368]	; (8005624 <HAL_I2C_Init+0x274>)
 80054b4:	428b      	cmp	r3, r1
 80054b6:	d819      	bhi.n	80054ec <HAL_I2C_Init+0x13c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1e59      	subs	r1, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054cc:	400b      	ands	r3, r1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_I2C_Init+0x138>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1e59      	subs	r1, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e0:	3301      	adds	r3, #1
 80054e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e6:	e051      	b.n	800558c <HAL_I2C_Init+0x1dc>
 80054e8:	2304      	movs	r3, #4
 80054ea:	e04f      	b.n	800558c <HAL_I2C_Init+0x1dc>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d111      	bne.n	8005518 <HAL_I2C_Init+0x168>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e58      	subs	r0, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	440b      	add	r3, r1
 8005502:	fbb0 f3f3 	udiv	r3, r0, r3
 8005506:	3301      	adds	r3, #1
 8005508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e012      	b.n	800553e <HAL_I2C_Init+0x18e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1e58      	subs	r0, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	0099      	lsls	r1, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	3301      	adds	r3, #1
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Init+0x196>
 8005542:	2301      	movs	r3, #1
 8005544:	e022      	b.n	800558c <HAL_I2C_Init+0x1dc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10e      	bne.n	800556c <HAL_I2C_Init+0x1bc>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1e58      	subs	r0, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005560:	3301      	adds	r3, #1
 8005562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	e00f      	b.n	800558c <HAL_I2C_Init+0x1dc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1e58      	subs	r0, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	0099      	lsls	r1, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	6809      	ldr	r1, [r1, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6911      	ldr	r1, [r2, #16]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68d2      	ldr	r2, [r2, #12]
 80055c6:	4311      	orrs	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	000186a0 	.word	0x000186a0
 8005628:	001e847f 	.word	0x001e847f
 800562c:	003d08ff 	.word	0x003d08ff
 8005630:	431bde83 	.word	0x431bde83
 8005634:	10624dd3 	.word	0x10624dd3

08005638 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4603      	mov	r3, r0
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	460b      	mov	r3, r1
 800564c:	813b      	strh	r3, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005652:	f7fe fdad 	bl	80041b0 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b20      	cmp	r3, #32
 8005662:	f040 80d9 	bne.w	8005818 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	2319      	movs	r3, #25
 800566c:	2201      	movs	r2, #1
 800566e:	496d      	ldr	r1, [pc, #436]	; (8005824 <HAL_I2C_Mem_Write+0x1ec>)
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fc7f 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
 800567e:	e0cc      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_I2C_Mem_Write+0x56>
 800568a:	2302      	movs	r3, #2
 800568c:	e0c5      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d007      	beq.n	80056b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2221      	movs	r2, #33	; 0x21
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a4d      	ldr	r2, [pc, #308]	; (8005828 <HAL_I2C_Mem_Write+0x1f0>)
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056f6:	88f8      	ldrh	r0, [r7, #6]
 80056f8:	893a      	ldrh	r2, [r7, #8]
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	4603      	mov	r3, r0
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fab6 	bl	8005c78 <I2C_RequestMemoryWrite>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d052      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e081      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 fd00 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b04      	cmp	r3, #4
 800572c:	d107      	bne.n	800573e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06b      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d11b      	bne.n	80057b8 <HAL_I2C_Mem_Write+0x180>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d017      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1aa      	bne.n	8005716 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fcec 	bl	80061a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e016      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	00100002 	.word	0x00100002
 8005828:	ffff0000 	.word	0xffff0000

0800582c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	; 0x30
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4603      	mov	r3, r0
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	460b      	mov	r3, r1
 8005840:	813b      	strh	r3, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005846:	f7fe fcb3 	bl	80041b0 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b20      	cmp	r3, #32
 8005856:	f040 8208 	bne.w	8005c6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2319      	movs	r3, #25
 8005860:	2201      	movs	r2, #1
 8005862:	497b      	ldr	r1, [pc, #492]	; (8005a50 <HAL_I2C_Mem_Read+0x224>)
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fb85 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	e1fb      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_I2C_Mem_Read+0x56>
 800587e:	2302      	movs	r3, #2
 8005880:	e1f4      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d007      	beq.n	80058a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2222      	movs	r2, #34	; 0x22
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a5b      	ldr	r2, [pc, #364]	; (8005a54 <HAL_I2C_Mem_Read+0x228>)
 80058e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ea:	88f8      	ldrh	r0, [r7, #6]
 80058ec:	893a      	ldrh	r2, [r7, #8]
 80058ee:	8979      	ldrh	r1, [r7, #10]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fa52 	bl	8005da4 <I2C_RequestMemoryRead>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e1b0      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d113      	bne.n	800593a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2300      	movs	r3, #0
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	623b      	str	r3, [r7, #32]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	623b      	str	r3, [r7, #32]
 8005926:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e184      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11b      	bne.n	800597a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e164      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597e:	2b02      	cmp	r3, #2
 8005980:	d11b      	bne.n	80059ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	e144      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059d0:	e138      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	f200 80f1 	bhi.w	8005bbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d123      	bne.n	8005a2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fc1b 	bl	8006224 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e139      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a2a:	e10b      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d14e      	bne.n	8005ad2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4906      	ldr	r1, [pc, #24]	; (8005a58 <HAL_I2C_Mem_Read+0x22c>)
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa98 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e10e      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
 8005a4e:	bf00      	nop
 8005a50:	00100002 	.word	0x00100002
 8005a54:	ffff0000 	.word	0xffff0000
 8005a58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ad0:	e0b8      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4966      	ldr	r1, [pc, #408]	; (8005c74 <HAL_I2C_Mem_Read+0x448>)
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fa49 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0bf      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2200      	movs	r2, #0
 8005b36:	494f      	ldr	r1, [pc, #316]	; (8005c74 <HAL_I2C_Mem_Read+0x448>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fa1b 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e091      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bbc:	e042      	b.n	8005c44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fb2e 	bl	8006224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e04c      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d118      	bne.n	8005c44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f47f aec2 	bne.w	80059d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	00010004 	.word	0x00010004

08005c78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	4608      	mov	r0, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	461a      	mov	r2, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	817b      	strh	r3, [r7, #10]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	813b      	strh	r3, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f960 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc8:	d103      	bne.n	8005cd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e05f      	b.n	8005d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd6:	897b      	ldrh	r3, [r7, #10]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	492d      	ldr	r1, [pc, #180]	; (8005da0 <I2C_RequestMemoryWrite+0x128>)
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f998 	bl	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e04c      	b.n	8005d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fa02 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d107      	bne.n	8005d3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e02b      	b.n	8005d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d44:	893b      	ldrh	r3, [r7, #8]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	e021      	b.n	8005d94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d50:	893b      	ldrh	r3, [r7, #8]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f9dc 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d107      	bne.n	8005d86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e005      	b.n	8005d96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	00010002 	.word	0x00010002

08005da4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	817b      	strh	r3, [r7, #10]
 8005db6:	460b      	mov	r3, r1
 8005db8:	813b      	strh	r3, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f8c2 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e04:	d103      	bne.n	8005e0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e0aa      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	4952      	ldr	r1, [pc, #328]	; (8005f70 <I2C_RequestMemoryRead+0x1cc>)
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f8fa 	bl	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e097      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e50:	6a39      	ldr	r1, [r7, #32]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f964 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00d      	beq.n	8005e7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d107      	bne.n	8005e76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e076      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	611a      	str	r2, [r3, #16]
 8005e8a:	e021      	b.n	8005ed0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e8c:	893b      	ldrh	r3, [r7, #8]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9c:	6a39      	ldr	r1, [r7, #32]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f93e 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d107      	bne.n	8005ec2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e050      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec6:	893b      	ldrh	r3, [r7, #8]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	6a39      	ldr	r1, [r7, #32]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f923 	bl	8006120 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00d      	beq.n	8005efc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d107      	bne.n	8005ef8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e035      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f82b 	bl	8005f74 <I2C_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00d      	beq.n	8005f40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f32:	d103      	bne.n	8005f3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e013      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f40:	897b      	ldrh	r3, [r7, #10]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	4906      	ldr	r1, [pc, #24]	; (8005f70 <I2C_RequestMemoryRead+0x1cc>)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f863 	bl	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	00010002 	.word	0x00010002

08005f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f84:	e025      	b.n	8005fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d021      	beq.n	8005fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fe f90f 	bl	80041b0 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e023      	b.n	800601a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10d      	bne.n	8005ff8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf0c      	ite	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	e00c      	b.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	43da      	mvns	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	429a      	cmp	r2, r3
 8006016:	d0b6      	beq.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006030:	e051      	b.n	80060d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006040:	d123      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006050:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800605a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0204 	orr.w	r2, r3, #4
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e046      	b.n	8006118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006090:	d021      	beq.n	80060d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f7fe f88d 	bl	80041b0 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d116      	bne.n	80060d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e020      	b.n	8006118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10c      	bne.n	80060fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	43da      	mvns	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bf14      	ite	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	2300      	moveq	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	e00b      	b.n	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	43da      	mvns	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d18d      	bne.n	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800612c:	e02d      	b.n	800618a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f8ce 	bl	80062d0 <I2C_IsAcknowledgeFailed>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e02d      	b.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006144:	d021      	beq.n	800618a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fe f833 	bl	80041b0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e007      	b.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d1ca      	bne.n	800612e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ae:	e02d      	b.n	800620c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f88d 	bl	80062d0 <I2C_IsAcknowledgeFailed>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e02d      	b.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c6:	d021      	beq.n	800620c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c8:	f7fd fff2 	bl	80041b0 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d302      	bcc.n	80061de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d116      	bne.n	800620c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e007      	b.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d1ca      	bne.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006230:	e042      	b.n	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b10      	cmp	r3, #16
 800623e:	d119      	bne.n	8006274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0210 	mvn.w	r2, #16
 8006248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e029      	b.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fd ff9c 	bl	80041b0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d116      	bne.n	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e007      	b.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d1b5      	bne.n	8006232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e6:	d11b      	bne.n	8006320 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f043 0204 	orr.w	r2, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800632c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632e:	b08b      	sub	sp, #44	; 0x2c
 8006330:	af06      	add	r7, sp, #24
 8006332:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e0d0      	b.n	80064e0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f00a fc54 	bl	8010c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2203      	movs	r2, #3
 800635c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f003 fced 	bl	8009d44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
 800636e:	e04c      	b.n	800640a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	440b      	add	r3, r1
 8006380:	3301      	adds	r3, #1
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	440b      	add	r3, r1
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	b298      	uxth	r0, r3
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	440b      	add	r3, r1
 80063ac:	3336      	adds	r3, #54	; 0x36
 80063ae:	4602      	mov	r2, r0
 80063b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	3303      	adds	r3, #3
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063c8:	7bfa      	ldrb	r2, [r7, #15]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	440b      	add	r3, r1
 80063d6:	3338      	adds	r3, #56	; 0x38
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	440b      	add	r3, r1
 80063ea:	333c      	adds	r3, #60	; 0x3c
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	440b      	add	r3, r1
 80063fe:	3340      	adds	r3, #64	; 0x40
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	3301      	adds	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	7bfa      	ldrb	r2, [r7, #15]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d3ad      	bcc.n	8006370 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e044      	b.n	80064a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	440b      	add	r3, r1
 8006428:	f203 1369 	addw	r3, r3, #361	; 0x169
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	440b      	add	r3, r1
 800643e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006442:	7bfa      	ldrb	r2, [r7, #15]
 8006444:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006446:	7bfa      	ldrb	r2, [r7, #15]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	440b      	add	r3, r1
 8006454:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	440b      	add	r3, r1
 800646a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006472:	7bfa      	ldrb	r2, [r7, #15]
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	440b      	add	r3, r1
 8006480:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006488:	7bfa      	ldrb	r2, [r7, #15]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	440b      	add	r3, r1
 8006496:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	3301      	adds	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	7bfa      	ldrb	r2, [r7, #15]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3b5      	bcc.n	800641a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	687e      	ldr	r6, [r7, #4]
 80064b6:	466d      	mov	r5, sp
 80064b8:	f106 0410 	add.w	r4, r6, #16
 80064bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	1d33      	adds	r3, r6, #4
 80064c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c8:	6838      	ldr	r0, [r7, #0]
 80064ca:	f003 fc55 	bl	8009d78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_PCD_Start+0x16>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e016      	b.n	800652c <HAL_PCD_Start+0x44>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f003 fc04 	bl	8009d18 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006510:	2101      	movs	r1, #1
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f00a fb56 	bl	8010bc4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f005 fda8 	bl	800c072 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f005 fda0 	bl	800c086 <USB_ReadInterrupts>
 8006546:	4603      	mov	r3, r0
 8006548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	d102      	bne.n	8006558 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 faf5 	bl	8006b42 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f005 fd92 	bl	800c086 <USB_ReadInterrupts>
 8006562:	4603      	mov	r3, r0
 8006564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d112      	bne.n	8006594 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006580:	b292      	uxth	r2, r2
 8006582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f00a fbb5 	bl	8010cf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800658c:	2100      	movs	r1, #0
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f8c7 	bl	8006722 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f005 fd74 	bl	800c086 <USB_ReadInterrupts>
 800659e:	4603      	mov	r3, r0
 80065a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a8:	d10b      	bne.n	80065c2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065bc:	b292      	uxth	r2, r2
 80065be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f005 fd5d 	bl	800c086 <USB_ReadInterrupts>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	d10b      	bne.n	80065f0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ea:	b292      	uxth	r2, r2
 80065ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f005 fd46 	bl	800c086 <USB_ReadInterrupts>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d126      	bne.n	8006654 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0204 	bic.w	r2, r2, #4
 8006618:	b292      	uxth	r2, r2
 800661a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0208 	bic.w	r2, r2, #8
 8006630:	b292      	uxth	r2, r2
 8006632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f00a fb96 	bl	8010d68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800664e:	b292      	uxth	r2, r2
 8006650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f005 fd14 	bl	800c086 <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d126      	bne.n	80066b8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0208 	orr.w	r2, r2, #8
 800667c:	b292      	uxth	r2, r2
 800667e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006694:	b292      	uxth	r2, r2
 8006696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0204 	orr.w	r2, r2, #4
 80066ac:	b292      	uxth	r2, r2
 80066ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f00a fb3e 	bl	8010d34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f005 fce2 	bl	800c086 <USB_ReadInterrupts>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066cc:	d10e      	bne.n	80066ec <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066e0:	b292      	uxth	r2, r2
 80066e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f00a faf7 	bl	8010cda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 fcc8 	bl	800c086 <USB_ReadInterrupts>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006700:	d10b      	bne.n	800671a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006714:	b292      	uxth	r2, r2
 8006716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_PCD_SetAddress+0x1a>
 8006738:	2302      	movs	r3, #2
 800673a:	e013      	b.n	8006764 <HAL_PCD_SetAddress+0x42>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f005 fc79 	bl	800c04c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4603      	mov	r3, r0
 800677c:	70fb      	strb	r3, [r7, #3]
 800677e:	460b      	mov	r3, r1
 8006780:	803b      	strh	r3, [r7, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800678a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da0e      	bge.n	80067b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	705a      	strb	r2, [r3, #1]
 80067ae:	e00e      	b.n	80067ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	f003 0207 	and.w	r2, r3, #7
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067da:	883a      	ldrh	r2, [r7, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	78ba      	ldrb	r2, [r7, #2]
 80067e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067f8:	78bb      	ldrb	r3, [r7, #2]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d102      	bne.n	8006804 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_PCD_EP_Open+0xa6>
 800680e:	2302      	movs	r3, #2
 8006810:	e00e      	b.n	8006830 <HAL_PCD_EP_Open+0xc4>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	4618      	mov	r0, r3
 8006822:	f003 fac9 	bl	8009db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800682e:	7afb      	ldrb	r3, [r7, #11]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	da0e      	bge.n	800686a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	705a      	strb	r2, [r3, #1]
 8006868:	e00e      	b.n	8006888 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 0207 	and.w	r2, r3, #7
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_PCD_EP_Close+0x6a>
 800689e:	2302      	movs	r3, #2
 80068a0:	e00e      	b.n	80068c0 <HAL_PCD_EP_Close+0x88>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f003 fdeb 	bl	800a48c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	460b      	mov	r3, r1
 80068d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068d8:	7afb      	ldrb	r3, [r7, #11]
 80068da:	f003 0207 	and.w	r2, r3, #7
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2200      	movs	r2, #0
 8006906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	b2da      	uxtb	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6979      	ldr	r1, [r7, #20]
 8006924:	4618      	mov	r0, r3
 8006926:	f003 ff9d 	bl	800a864 <USB_EPStartXfer>
 800692a:	e005      	b.n	8006938 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	4618      	mov	r0, r3
 8006934:	f003 ff96 	bl	800a864 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	f003 0207 	and.w	r2, r3, #7
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	440b      	add	r3, r1
 8006960:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006964:	681b      	ldr	r3, [r3, #0]
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	460b      	mov	r3, r1
 800697e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2200      	movs	r2, #0
 80069b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2201      	movs	r2, #1
 80069ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6979      	ldr	r1, [r7, #20]
 80069d8:	4618      	mov	r0, r3
 80069da:	f003 ff43 	bl	800a864 <USB_EPStartXfer>
 80069de:	e005      	b.n	80069ec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6979      	ldr	r1, [r7, #20]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f003 ff3c 	bl	800a864 <USB_EPStartXfer>
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	f003 0207 	and.w	r2, r3, #7
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d901      	bls.n	8006a14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e03e      	b.n	8006a92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da0e      	bge.n	8006a3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	705a      	strb	r2, [r3, #1]
 8006a38:	e00c      	b.n	8006a54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_PCD_EP_SetStall+0x7e>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e00e      	b.n	8006a92 <HAL_PCD_EP_SetStall+0x9c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68f9      	ldr	r1, [r7, #12]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f005 f9e5 	bl	800be52 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d901      	bls.n	8006ab8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e040      	b.n	8006b3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	da0e      	bge.n	8006ade <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	705a      	strb	r2, [r3, #1]
 8006adc:	e00e      	b.n	8006afc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	f003 0207 	and.w	r2, r3, #7
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_PCD_EP_ClrStall+0x82>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e00e      	b.n	8006b3a <HAL_PCD_EP_ClrStall+0xa0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f005 f9e1 	bl	800bef2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b08e      	sub	sp, #56	; 0x38
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b4a:	e2ec      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b54:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006b62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 8161 	bne.w	8006e2e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d152      	bne.n	8006c1c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	81fb      	strh	r3, [r7, #14]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3328      	adds	r3, #40	; 0x28
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	461a      	mov	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f00a f862 	bl	8010ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 829b 	beq.w	8007126 <PCD_EP_ISR_Handler+0x5e4>
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8296 	bne.w	8007126 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	b292      	uxth	r2, r2
 8006c0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c1a:	e284      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d034      	beq.n	8006ca0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4413      	add	r3, r2
 8006c4a:	3306      	adds	r3, #6
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f005 fa5a 	bl	800c12e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c86:	4013      	ands	r3, r2
 8006c88:	823b      	strh	r3, [r7, #16]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	8a3a      	ldrh	r2, [r7, #16]
 8006c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c94:	b292      	uxth	r2, r2
 8006c96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f009 ffd7 	bl	8010c4c <HAL_PCD_SetupStageCallback>
 8006c9e:	e242      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ca0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f280 823e 	bge.w	8007126 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	83bb      	strh	r3, [r7, #28]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	8bba      	ldrh	r2, [r7, #28]
 8006cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cc4:	b292      	uxth	r2, r2
 8006cc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4413      	add	r3, r2
 8006cdc:	3306      	adds	r3, #6
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d019      	beq.n	8006d30 <PCD_EP_ISR_Handler+0x1ee>
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d015      	beq.n	8006d30 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	6959      	ldr	r1, [r3, #20]
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f005 fa0a 	bl	800c12e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	441a      	add	r2, r3
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f009 ffa0 	bl	8010c70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 81f2 	bne.w	8007126 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	4413      	add	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d112      	bne.n	8006d90 <PCD_EP_ISR_Handler+0x24e>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e02f      	b.n	8006df0 <PCD_EP_ISR_Handler+0x2ae>
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b3e      	cmp	r3, #62	; 0x3e
 8006d96:	d813      	bhi.n	8006dc0 <PCD_EP_ISR_Handler+0x27e>
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <PCD_EP_ISR_Handler+0x270>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	3301      	adds	r3, #1
 8006db0:	633b      	str	r3, [r7, #48]	; 0x30
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e017      	b.n	8006df0 <PCD_EP_ISR_Handler+0x2ae>
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <PCD_EP_ISR_Handler+0x298>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	827b      	strh	r3, [r7, #18]
 8006e02:	8a7b      	ldrh	r3, [r7, #18]
 8006e04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e08:	827b      	strh	r3, [r7, #18]
 8006e0a:	8a7b      	ldrh	r3, [r7, #18]
 8006e0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e10:	827b      	strh	r3, [r7, #18]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	8a7b      	ldrh	r3, [r7, #18]
 8006e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]
 8006e2c:	e17b      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f280 80ea 	bge.w	800701e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e60:	4013      	ands	r3, r2
 8006e62:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006e7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	4413      	add	r3, r2
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	7b1b      	ldrb	r3, [r3, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d122      	bne.n	8006ee0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4413      	add	r3, r2
 8006eae:	3306      	adds	r3, #6
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006ec4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8087 	beq.w	8006fda <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	6959      	ldr	r1, [r3, #20]
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	88da      	ldrh	r2, [r3, #6]
 8006ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006eda:	f005 f928 	bl	800c12e <USB_ReadPMA>
 8006ede:	e07c      	b.n	8006fda <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	78db      	ldrb	r3, [r3, #3]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d108      	bne.n	8006efa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006ee8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006eea:	461a      	mov	r2, r3
 8006eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f927 	bl	8007142 <HAL_PCD_EP_DB_Receive>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006ef8:	e06f      	b.n	8006fda <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d021      	beq.n	8006f98 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4413      	add	r3, r2
 8006f68:	3302      	adds	r3, #2
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006f7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02a      	beq.n	8006fda <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	6959      	ldr	r1, [r3, #20]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	891a      	ldrh	r2, [r3, #8]
 8006f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f92:	f005 f8cc 	bl	800c12e <USB_ReadPMA>
 8006f96:	e020      	b.n	8006fda <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4413      	add	r3, r2
 8006fac:	3306      	adds	r3, #6
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	6959      	ldr	r1, [r3, #20]
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	895a      	ldrh	r2, [r3, #10]
 8006fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fd6:	f005 f8aa 	bl	800c12e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fe0:	441a      	add	r2, r3
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fec:	441a      	add	r2, r3
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <PCD_EP_ISR_Handler+0x4c2>
 8006ffa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d206      	bcs.n	8007012 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f009 fe30 	bl	8010c70 <HAL_PCD_DataOutStageCallback>
 8007010:	e005      	b.n	800701e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007018:	4618      	mov	r0, r3
 800701a:	f003 fc23 	bl	800a864 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800701e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d07e      	beq.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8007028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	843b      	strh	r3, [r7, #32]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	8c3b      	ldrh	r3, [r7, #32]
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29b      	uxth	r3, r3
 8007072:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	2b03      	cmp	r3, #3
 800707a:	d00c      	beq.n	8007096 <PCD_EP_ISR_Handler+0x554>
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007088:	2b02      	cmp	r3, #2
 800708a:	d146      	bne.n	800711a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800708c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d141      	bne.n	800711a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	3302      	adds	r3, #2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070be:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	8bfb      	ldrh	r3, [r7, #30]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d906      	bls.n	80070d8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	8bfb      	ldrh	r3, [r7, #30]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	619a      	str	r2, [r3, #24]
 80070d6:	e002      	b.n	80070de <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	2200      	movs	r2, #0
 80070dc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f009 fdda 	bl	8010ca6 <HAL_PCD_DataInStageCallback>
 80070f2:	e018      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	8bfb      	ldrh	r3, [r7, #30]
 80070fa:	441a      	add	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	8bfb      	ldrh	r3, [r7, #30]
 8007106:	441a      	add	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f003 fba6 	bl	800a864 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007118:	e005      	b.n	8007126 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800711a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800711c:	461a      	mov	r2, r3
 800711e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f91b 	bl	800735c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800712e:	b29b      	uxth	r3, r3
 8007130:	b21b      	sxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	f6ff ad0a 	blt.w	8006b4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3738      	adds	r7, #56	; 0x38
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b088      	sub	sp, #32
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	4613      	mov	r3, r2
 800714e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d07e      	beq.n	8007258 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	3302      	adds	r3, #2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007182:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	8b7b      	ldrh	r3, [r7, #26]
 800718a:	429a      	cmp	r2, r3
 800718c:	d306      	bcc.n	800719c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	8b7b      	ldrh	r3, [r7, #26]
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	619a      	str	r2, [r3, #24]
 800719a:	e002      	b.n	80071a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d123      	bne.n	80071f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	833b      	strh	r3, [r7, #24]
 80071c6:	8b3b      	ldrh	r3, [r7, #24]
 80071c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071cc:	833b      	strh	r3, [r7, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	441a      	add	r2, r3
 80071dc:	8b3b      	ldrh	r3, [r7, #24]
 80071de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01f      	beq.n	800723c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	82fb      	strh	r3, [r7, #22]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	8afb      	ldrh	r3, [r7, #22]
 8007228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800722c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007238:	b29b      	uxth	r3, r3
 800723a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800723c:	8b7b      	ldrh	r3, [r7, #26]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8087 	beq.w	8007352 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6959      	ldr	r1, [r3, #20]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	891a      	ldrh	r2, [r3, #8]
 8007250:	8b7b      	ldrh	r3, [r7, #26]
 8007252:	f004 ff6c 	bl	800c12e <USB_ReadPMA>
 8007256:	e07c      	b.n	8007352 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	3306      	adds	r3, #6
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007280:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	8b7b      	ldrh	r3, [r7, #26]
 8007288:	429a      	cmp	r2, r3
 800728a:	d306      	bcc.n	800729a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	1ad2      	subs	r2, r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	619a      	str	r2, [r3, #24]
 8007298:	e002      	b.n	80072a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d123      	bne.n	80072f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	83fb      	strh	r3, [r7, #30]
 80072c4:	8bfb      	ldrh	r3, [r7, #30]
 80072c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072ca:	83fb      	strh	r3, [r7, #30]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	8bfb      	ldrh	r3, [r7, #30]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11f      	bne.n	800733a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007314:	83bb      	strh	r3, [r7, #28]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	8bbb      	ldrh	r3, [r7, #28]
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800733a:	8b7b      	ldrh	r3, [r7, #26]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6959      	ldr	r1, [r3, #20]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	895a      	ldrh	r2, [r3, #10]
 800734c:	8b7b      	ldrh	r3, [r7, #26]
 800734e:	f004 feee 	bl	800c12e <USB_ReadPMA>
    }
  }

  return count;
 8007352:	8b7b      	ldrh	r3, [r7, #26]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3720      	adds	r7, #32
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b0a2      	sub	sp, #136	; 0x88
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 81c7 	beq.w	8007704 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	4413      	add	r3, r2
 800738a:	3302      	adds	r3, #2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d907      	bls.n	80073be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	619a      	str	r2, [r3, #24]
 80073bc:	e002      	b.n	80073c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 80b9 	bne.w	8007540 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d126      	bne.n	8007424 <HAL_PCD_EP_DB_Transmit+0xc8>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	4413      	add	r3, r2
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	011a      	lsls	r2, r3, #4
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007408:	b29a      	uxth	r2, r3
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741c:	b29a      	uxth	r2, r3
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	e01a      	b.n	800745a <HAL_PCD_EP_DB_Transmit+0xfe>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d116      	bne.n	800745a <HAL_PCD_EP_DB_Transmit+0xfe>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	633b      	str	r3, [r7, #48]	; 0x30
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	4413      	add	r3, r2
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	011a      	lsls	r2, r3, #4
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	4413      	add	r3, r2
 800744e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2200      	movs	r2, #0
 8007458:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d126      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	4413      	add	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	011a      	lsls	r2, r3, #4
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	4413      	add	r3, r2
 800748a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800749a:	b29a      	uxth	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e017      	b.n	80074e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d113      	bne.n	80074e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	4413      	add	r3, r2
 80074ce:	623b      	str	r3, [r7, #32]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	011a      	lsls	r2, r3, #4
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	4413      	add	r3, r2
 80074da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2200      	movs	r2, #0
 80074e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f009 fbda 	bl	8010ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 82d4 	beq.w	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	827b      	strh	r3, [r7, #18]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	8a7b      	ldrh	r3, [r7, #18]
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]
 800753e:	e2b2      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d021      	beq.n	800758e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800757a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758a:	b29b      	uxth	r3, r3
 800758c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007594:	2b01      	cmp	r3, #1
 8007596:	f040 8286 	bne.w	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075a2:	441a      	add	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075b0:	441a      	add	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6a1a      	ldr	r2, [r3, #32]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d309      	bcc.n	80075d6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	621a      	str	r2, [r3, #32]
 80075d4:	e015      	b.n	8007602 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80075de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075ec:	e009      	b.n	8007602 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d155      	bne.n	80076b6 <HAL_PCD_EP_DB_Transmit+0x35a>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	4413      	add	r3, r2
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	011a      	lsls	r2, r3, #4
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	4413      	add	r3, r2
 800762c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
 8007632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007634:	2b00      	cmp	r3, #0
 8007636:	d112      	bne.n	800765e <HAL_PCD_EP_DB_Transmit+0x302>
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007642:	b29a      	uxth	r2, r3
 8007644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e047      	b.n	80076ee <HAL_PCD_EP_DB_Transmit+0x392>
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	2b3e      	cmp	r3, #62	; 0x3e
 8007662:	d811      	bhi.n	8007688 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
 800766a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_PCD_EP_DB_Transmit+0x31e>
 8007674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007676:	3301      	adds	r3, #1
 8007678:	64bb      	str	r3, [r7, #72]	; 0x48
 800767a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767c:	b29b      	uxth	r3, r3
 800767e:	029b      	lsls	r3, r3, #10
 8007680:	b29a      	uxth	r2, r3
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e032      	b.n	80076ee <HAL_PCD_EP_DB_Transmit+0x392>
 8007688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	64bb      	str	r3, [r7, #72]	; 0x48
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <HAL_PCD_EP_DB_Transmit+0x342>
 8007698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800769a:	3b01      	subs	r3, #1
 800769c:	64bb      	str	r3, [r7, #72]	; 0x48
 800769e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	029b      	lsls	r3, r3, #10
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e01b      	b.n	80076ee <HAL_PCD_EP_DB_Transmit+0x392>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d117      	bne.n	80076ee <HAL_PCD_EP_DB_Transmit+0x392>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	643b      	str	r3, [r7, #64]	; 0x40
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d2:	4413      	add	r3, r2
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	011a      	lsls	r2, r3, #4
 80076dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076de:	4413      	add	r3, r2
 80076e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6959      	ldr	r1, [r3, #20]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	891a      	ldrh	r2, [r3, #8]
 80076fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f004 fcd1 	bl	800c0a4 <USB_WritePMA>
 8007702:	e1d0      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770c:	b29b      	uxth	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4413      	add	r3, r2
 8007718:	3306      	adds	r3, #6
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800772c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007738:	429a      	cmp	r2, r3
 800773a:	d307      	bcc.n	800774c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	699a      	ldr	r2, [r3, #24]
 8007740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	619a      	str	r2, [r3, #24]
 800774a:	e002      	b.n	8007752 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2200      	movs	r2, #0
 8007750:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 80c4 	bne.w	80078e4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d126      	bne.n	80077b2 <HAL_PCD_EP_DB_Transmit+0x456>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007772:	b29b      	uxth	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007778:	4413      	add	r3, r2
 800777a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	011a      	lsls	r2, r3, #4
 8007782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007784:	4413      	add	r3, r2
 8007786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800778a:	66bb      	str	r3, [r7, #104]	; 0x68
 800778c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007796:	b29a      	uxth	r2, r3
 8007798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e01a      	b.n	80077e8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d116      	bne.n	80077e8 <HAL_PCD_EP_DB_Transmit+0x48c>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	677b      	str	r3, [r7, #116]	; 0x74
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ce:	4413      	add	r3, r2
 80077d0:	677b      	str	r3, [r7, #116]	; 0x74
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	011a      	lsls	r2, r3, #4
 80077d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077da:	4413      	add	r3, r2
 80077dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077e0:	673b      	str	r3, [r7, #112]	; 0x70
 80077e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e4:	2200      	movs	r2, #0
 80077e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d12f      	bne.n	8007856 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800780e:	4413      	add	r3, r2
 8007810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	011a      	lsls	r2, r3, #4
 800781a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800781e:	4413      	add	r3, r2
 8007820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e017      	b.n	8007886 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d113      	bne.n	8007886 <HAL_PCD_EP_DB_Transmit+0x52a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007866:	b29b      	uxth	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786c:	4413      	add	r3, r2
 800786e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	011a      	lsls	r2, r3, #4
 8007876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007878:	4413      	add	r3, r2
 800787a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800787e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007882:	2200      	movs	r2, #0
 8007884:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f009 fa0a 	bl	8010ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 8104 	bne.w	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]
 80078e2:	e0e0      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d121      	bne.n	8007932 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800791e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	b29b      	uxth	r3, r3
 8007930:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007938:	2b01      	cmp	r3, #1
 800793a:	f040 80b4 	bne.w	8007aa6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007946:	441a      	add	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007954:	441a      	add	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6a1a      	ldr	r2, [r3, #32]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	429a      	cmp	r2, r3
 8007964:	d309      	bcc.n	800797a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007972:	1ad2      	subs	r2, r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	621a      	str	r2, [r3, #32]
 8007978:	e015      	b.n	80079a6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007986:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007990:	e009      	b.n	80079a6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d155      	bne.n	8007a60 <HAL_PCD_EP_DB_Transmit+0x704>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c8:	4413      	add	r3, r2
 80079ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	011a      	lsls	r2, r3, #4
 80079d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d4:	4413      	add	r3, r2
 80079d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
 80079dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d112      	bne.n	8007a08 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80079e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	e044      	b.n	8007a92 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a0c:	d811      	bhi.n	8007a32 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	657b      	str	r3, [r7, #84]	; 0x54
 8007a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a20:	3301      	adds	r3, #1
 8007a22:	657b      	str	r3, [r7, #84]	; 0x54
 8007a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	029b      	lsls	r3, r3, #10
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e02f      	b.n	8007a92 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	657b      	str	r3, [r7, #84]	; 0x54
 8007a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a44:	3b01      	subs	r3, #1
 8007a46:	657b      	str	r3, [r7, #84]	; 0x54
 8007a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	029b      	lsls	r3, r3, #10
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e018      	b.n	8007a92 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d114      	bne.n	8007a92 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a76:	4413      	add	r3, r2
 8007a78:	667b      	str	r3, [r7, #100]	; 0x64
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	011a      	lsls	r2, r3, #4
 8007a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a82:	4413      	add	r3, r2
 8007a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a88:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6959      	ldr	r1, [r3, #20]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	895a      	ldrh	r2, [r3, #10]
 8007a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f004 faff 	bl	800c0a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac0:	823b      	strh	r3, [r7, #16]
 8007ac2:	8a3b      	ldrh	r3, [r7, #16]
 8007ac4:	f083 0310 	eor.w	r3, r3, #16
 8007ac8:	823b      	strh	r3, [r7, #16]
 8007aca:	8a3b      	ldrh	r3, [r7, #16]
 8007acc:	f083 0320 	eor.w	r3, r3, #32
 8007ad0:	823b      	strh	r3, [r7, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	8a3b      	ldrh	r3, [r7, #16]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3788      	adds	r7, #136	; 0x88
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	607b      	str	r3, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	817b      	strh	r3, [r7, #10]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b1e:	897b      	ldrh	r3, [r7, #10]
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	e009      	b.n	8007b4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b36:	897a      	ldrh	r2, [r7, #10]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2200      	movs	r2, #0
 8007b54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	80da      	strh	r2, [r3, #6]
 8007b5e:	e00b      	b.n	8007b78 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2201      	movs	r2, #1
 8007b64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr

08007b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e31d      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b96:	4b94      	ldr	r3, [pc, #592]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ba0:	4b91      	ldr	r3, [pc, #580]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d07b      	beq.n	8007cae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d006      	beq.n	8007bca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d10f      	bne.n	8007be2 <HAL_RCC_OscConfig+0x5e>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc8:	d10b      	bne.n	8007be2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bca:	4b87      	ldr	r3, [pc, #540]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d06a      	beq.n	8007cac <HAL_RCC_OscConfig+0x128>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d166      	bne.n	8007cac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e2f7      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d106      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x74>
 8007bea:	4b7f      	ldr	r3, [pc, #508]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a7e      	ldr	r2, [pc, #504]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e02d      	b.n	8007c54 <HAL_RCC_OscConfig+0xd0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <HAL_RCC_OscConfig+0x96>
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a78      	ldr	r2, [pc, #480]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b76      	ldr	r3, [pc, #472]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a75      	ldr	r2, [pc, #468]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e01c      	b.n	8007c54 <HAL_RCC_OscConfig+0xd0>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d10c      	bne.n	8007c3c <HAL_RCC_OscConfig+0xb8>
 8007c22:	4b71      	ldr	r3, [pc, #452]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a70      	ldr	r2, [pc, #448]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	4b6e      	ldr	r3, [pc, #440]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a6d      	ldr	r2, [pc, #436]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e00b      	b.n	8007c54 <HAL_RCC_OscConfig+0xd0>
 8007c3c:	4b6a      	ldr	r3, [pc, #424]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a69      	ldr	r2, [pc, #420]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	4b67      	ldr	r3, [pc, #412]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a66      	ldr	r2, [pc, #408]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5c:	f7fc faa8 	bl	80041b0 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c64:	f7fc faa4 	bl	80041b0 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b64      	cmp	r3, #100	; 0x64
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e2ad      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c76:	4b5c      	ldr	r3, [pc, #368]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0xe0>
 8007c82:	e014      	b.n	8007cae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c84:	f7fc fa94 	bl	80041b0 <HAL_GetTick>
 8007c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c8c:	f7fc fa90 	bl	80041b0 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b64      	cmp	r3, #100	; 0x64
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e299      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c9e:	4b52      	ldr	r3, [pc, #328]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f0      	bne.n	8007c8c <HAL_RCC_OscConfig+0x108>
 8007caa:	e000      	b.n	8007cae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d05a      	beq.n	8007d70 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d119      	bne.n	8007cfa <HAL_RCC_OscConfig+0x176>
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d116      	bne.n	8007cfa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ccc:	4b46      	ldr	r3, [pc, #280]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x160>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e276      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce4:	4b40      	ldr	r3, [pc, #256]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	493d      	ldr	r1, [pc, #244]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cf8:	e03a      	b.n	8007d70 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d020      	beq.n	8007d44 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d02:	4b3a      	ldr	r3, [pc, #232]	; (8007dec <HAL_RCC_OscConfig+0x268>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d08:	f7fc fa52 	bl	80041b0 <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d10:	f7fc fa4e 	bl	80041b0 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e257      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d22:	4b31      	ldr	r3, [pc, #196]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0f0      	beq.n	8007d10 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d2e:	4b2e      	ldr	r3, [pc, #184]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	492a      	ldr	r1, [pc, #168]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	604b      	str	r3, [r1, #4]
 8007d42:	e015      	b.n	8007d70 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d44:	4b29      	ldr	r3, [pc, #164]	; (8007dec <HAL_RCC_OscConfig+0x268>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4a:	f7fc fa31 	bl	80041b0 <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d50:	e008      	b.n	8007d64 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d52:	f7fc fa2d 	bl	80041b0 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e236      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d64:	4b20      	ldr	r3, [pc, #128]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f0      	bne.n	8007d52 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 80b8 	beq.w	8007eee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d170      	bne.n	8007e66 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d84:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <HAL_RCC_OscConfig+0x218>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e21a      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d921      	bls.n	8007df0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fc53 	bl	800865c <RCC_SetFlashLatencyFromMSIRange>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e208      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dc0:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	4906      	ldr	r1, [pc, #24]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	4901      	ldr	r1, [pc, #4]	; (8007de8 <HAL_RCC_OscConfig+0x264>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	604b      	str	r3, [r1, #4]
 8007de6:	e020      	b.n	8007e2a <HAL_RCC_OscConfig+0x2a6>
 8007de8:	40023800 	.word	0x40023800
 8007dec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007df0:	4ba4      	ldr	r3, [pc, #656]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	49a1      	ldr	r1, [pc, #644]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e02:	4ba0      	ldr	r3, [pc, #640]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	061b      	lsls	r3, r3, #24
 8007e10:	499c      	ldr	r1, [pc, #624]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fc1e 	bl	800865c <RCC_SetFlashLatencyFromMSIRange>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e1d3      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	0b5b      	lsrs	r3, r3, #13
 8007e30:	3301      	adds	r3, #1
 8007e32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007e3a:	4a92      	ldr	r2, [pc, #584]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007e3c:	6892      	ldr	r2, [r2, #8]
 8007e3e:	0912      	lsrs	r2, r2, #4
 8007e40:	f002 020f 	and.w	r2, r2, #15
 8007e44:	4990      	ldr	r1, [pc, #576]	; (8008088 <HAL_RCC_OscConfig+0x504>)
 8007e46:	5c8a      	ldrb	r2, [r1, r2]
 8007e48:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007e4a:	4a90      	ldr	r2, [pc, #576]	; (800808c <HAL_RCC_OscConfig+0x508>)
 8007e4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007e4e:	4b90      	ldr	r3, [pc, #576]	; (8008090 <HAL_RCC_OscConfig+0x50c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fb ff22 	bl	8003c9c <HAL_InitTick>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d045      	beq.n	8007eee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	e1b5      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d029      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e6e:	4b89      	ldr	r3, [pc, #548]	; (8008094 <HAL_RCC_OscConfig+0x510>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e74:	f7fc f99c 	bl	80041b0 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e7c:	f7fc f998 	bl	80041b0 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e1a1      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e8e:	4b7d      	ldr	r3, [pc, #500]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e9a:	4b7a      	ldr	r3, [pc, #488]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	4977      	ldr	r1, [pc, #476]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007eac:	4b75      	ldr	r3, [pc, #468]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	061b      	lsls	r3, r3, #24
 8007eba:	4972      	ldr	r1, [pc, #456]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	604b      	str	r3, [r1, #4]
 8007ec0:	e015      	b.n	8007eee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ec2:	4b74      	ldr	r3, [pc, #464]	; (8008094 <HAL_RCC_OscConfig+0x510>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec8:	f7fc f972 	bl	80041b0 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ed0:	f7fc f96e 	bl	80041b0 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e177      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007ee2:	4b68      	ldr	r3, [pc, #416]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d030      	beq.n	8007f5c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f02:	4b65      	ldr	r3, [pc, #404]	; (8008098 <HAL_RCC_OscConfig+0x514>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f08:	f7fc f952 	bl	80041b0 <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f10:	f7fc f94e 	bl	80041b0 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e157      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f22:	4b58      	ldr	r3, [pc, #352]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCC_OscConfig+0x38c>
 8007f2e:	e015      	b.n	8007f5c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f30:	4b59      	ldr	r3, [pc, #356]	; (8008098 <HAL_RCC_OscConfig+0x514>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f36:	f7fc f93b 	bl	80041b0 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f3c:	e008      	b.n	8007f50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f3e:	f7fc f937 	bl	80041b0 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e140      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f50:	4b4c      	ldr	r3, [pc, #304]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f0      	bne.n	8007f3e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 80b5 	beq.w	80080d4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f6e:	4b45      	ldr	r3, [pc, #276]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10d      	bne.n	8007f96 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f7a:	4b42      	ldr	r3, [pc, #264]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	4a41      	ldr	r2, [pc, #260]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f84:	6253      	str	r3, [r2, #36]	; 0x24
 8007f86:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	60bb      	str	r3, [r7, #8]
 8007f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f92:	2301      	movs	r3, #1
 8007f94:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f96:	4b41      	ldr	r3, [pc, #260]	; (800809c <HAL_RCC_OscConfig+0x518>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d118      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fa2:	4b3e      	ldr	r3, [pc, #248]	; (800809c <HAL_RCC_OscConfig+0x518>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a3d      	ldr	r2, [pc, #244]	; (800809c <HAL_RCC_OscConfig+0x518>)
 8007fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fae:	f7fc f8ff 	bl	80041b0 <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb6:	f7fc f8fb 	bl	80041b0 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b64      	cmp	r3, #100	; 0x64
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e104      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fc8:	4b34      	ldr	r3, [pc, #208]	; (800809c <HAL_RCC_OscConfig+0x518>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0f0      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d106      	bne.n	8007fea <HAL_RCC_OscConfig+0x466>
 8007fdc:	4b29      	ldr	r3, [pc, #164]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8007fe8:	e02d      	b.n	8008046 <HAL_RCC_OscConfig+0x4c2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10c      	bne.n	800800c <HAL_RCC_OscConfig+0x488>
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff6:	4a23      	ldr	r2, [pc, #140]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8007ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffc:	6353      	str	r3, [r2, #52]	; 0x34
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	4a20      	ldr	r2, [pc, #128]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008008:	6353      	str	r3, [r2, #52]	; 0x34
 800800a:	e01c      	b.n	8008046 <HAL_RCC_OscConfig+0x4c2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b05      	cmp	r3, #5
 8008012:	d10c      	bne.n	800802e <HAL_RCC_OscConfig+0x4aa>
 8008014:	4b1b      	ldr	r3, [pc, #108]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008018:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 800801a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800801e:	6353      	str	r3, [r2, #52]	; 0x34
 8008020:	4b18      	ldr	r3, [pc, #96]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008024:	4a17      	ldr	r2, [pc, #92]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802a:	6353      	str	r3, [r2, #52]	; 0x34
 800802c:	e00b      	b.n	8008046 <HAL_RCC_OscConfig+0x4c2>
 800802e:	4b15      	ldr	r3, [pc, #84]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	4a14      	ldr	r2, [pc, #80]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008038:	6353      	str	r3, [r2, #52]	; 0x34
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 800803c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 8008040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008044:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d015      	beq.n	800807a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800804e:	f7fc f8af 	bl	80041b0 <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008054:	e00a      	b.n	800806c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008056:	f7fc f8ab 	bl	80041b0 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	f241 3288 	movw	r2, #5000	; 0x1388
 8008064:	4293      	cmp	r3, r2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e0b2      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806c:	4b05      	ldr	r3, [pc, #20]	; (8008084 <HAL_RCC_OscConfig+0x500>)
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0ee      	beq.n	8008056 <HAL_RCC_OscConfig+0x4d2>
 8008078:	e023      	b.n	80080c2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800807a:	f7fc f899 	bl	80041b0 <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008080:	e019      	b.n	80080b6 <HAL_RCC_OscConfig+0x532>
 8008082:	bf00      	nop
 8008084:	40023800 	.word	0x40023800
 8008088:	080175c4 	.word	0x080175c4
 800808c:	20000090 	.word	0x20000090
 8008090:	20000094 	.word	0x20000094
 8008094:	42470020 	.word	0x42470020
 8008098:	42470680 	.word	0x42470680
 800809c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080a0:	f7fc f886 	bl	80041b0 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e08d      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080b6:	4b49      	ldr	r3, [pc, #292]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1ee      	bne.n	80080a0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80080c2:	7ffb      	ldrb	r3, [r7, #31]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d105      	bne.n	80080d4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080c8:	4b44      	ldr	r3, [pc, #272]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	4a43      	ldr	r2, [pc, #268]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 80080ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080d2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d079      	beq.n	80081d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b0c      	cmp	r3, #12
 80080e0:	d056      	beq.n	8008190 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d13b      	bne.n	8008162 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ea:	4b3d      	ldr	r3, [pc, #244]	; (80081e0 <HAL_RCC_OscConfig+0x65c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f0:	f7fc f85e 	bl	80041b0 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f8:	f7fc f85a 	bl	80041b0 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e063      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800810a:	4b34      	ldr	r3, [pc, #208]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008116:	4b31      	ldr	r3, [pc, #196]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4319      	orrs	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	430b      	orrs	r3, r1
 800812e:	492b      	ldr	r1, [pc, #172]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008134:	4b2a      	ldr	r3, [pc, #168]	; (80081e0 <HAL_RCC_OscConfig+0x65c>)
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813a:	f7fc f839 	bl	80041b0 <HAL_GetTick>
 800813e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008140:	e008      	b.n	8008154 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008142:	f7fc f835 	bl	80041b0 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d901      	bls.n	8008154 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e03e      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008154:	4b21      	ldr	r3, [pc, #132]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0f0      	beq.n	8008142 <HAL_RCC_OscConfig+0x5be>
 8008160:	e036      	b.n	80081d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008162:	4b1f      	ldr	r3, [pc, #124]	; (80081e0 <HAL_RCC_OscConfig+0x65c>)
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008168:	f7fc f822 	bl	80041b0 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008170:	f7fc f81e 	bl	80041b0 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e027      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008182:	4b16      	ldr	r3, [pc, #88]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f0      	bne.n	8008170 <HAL_RCC_OscConfig+0x5ec>
 800818e:	e01f      	b.n	80081d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e01a      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <HAL_RCC_OscConfig+0x658>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d10d      	bne.n	80081cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d106      	bne.n	80081cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d001      	beq.n	80081d0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800
 80081e0:	42470060 	.word	0x42470060

080081e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e11a      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081f8:	4b8f      	ldr	r3, [pc, #572]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d919      	bls.n	800823a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d105      	bne.n	8008218 <HAL_RCC_ClockConfig+0x34>
 800820c:	4b8a      	ldr	r3, [pc, #552]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a89      	ldr	r2, [pc, #548]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	4b87      	ldr	r3, [pc, #540]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f023 0201 	bic.w	r2, r3, #1
 8008220:	4985      	ldr	r1, [pc, #532]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	4313      	orrs	r3, r2
 8008226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008228:	4b83      	ldr	r3, [pc, #524]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d001      	beq.n	800823a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e0f9      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008246:	4b7d      	ldr	r3, [pc, #500]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	497a      	ldr	r1, [pc, #488]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008254:	4313      	orrs	r3, r2
 8008256:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 808e 	beq.w	8008382 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d107      	bne.n	800827e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800826e:	4b73      	ldr	r3, [pc, #460]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d121      	bne.n	80082be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e0d7      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d107      	bne.n	8008296 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008286:	4b6d      	ldr	r3, [pc, #436]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d115      	bne.n	80082be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e0cb      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d107      	bne.n	80082ae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800829e:	4b67      	ldr	r3, [pc, #412]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e0bf      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80082ae:	4b63      	ldr	r3, [pc, #396]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e0b7      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082be:	4b5f      	ldr	r3, [pc, #380]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f023 0203 	bic.w	r2, r3, #3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	495c      	ldr	r1, [pc, #368]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082d0:	f7fb ff6e 	bl	80041b0 <HAL_GetTick>
 80082d4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d112      	bne.n	8008304 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80082de:	e00a      	b.n	80082f6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082e0:	f7fb ff66 	bl	80041b0 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e09b      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80082f6:	4b51      	ldr	r3, [pc, #324]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d1ee      	bne.n	80082e0 <HAL_RCC_ClockConfig+0xfc>
 8008302:	e03e      	b.n	8008382 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d112      	bne.n	8008332 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800830c:	e00a      	b.n	8008324 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830e:	f7fb ff4f 	bl	80041b0 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f241 3288 	movw	r2, #5000	; 0x1388
 800831c:	4293      	cmp	r3, r2
 800831e:	d901      	bls.n	8008324 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e084      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008324:	4b45      	ldr	r3, [pc, #276]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 030c 	and.w	r3, r3, #12
 800832c:	2b0c      	cmp	r3, #12
 800832e:	d1ee      	bne.n	800830e <HAL_RCC_ClockConfig+0x12a>
 8008330:	e027      	b.n	8008382 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d11d      	bne.n	8008376 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800833a:	e00a      	b.n	8008352 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800833c:	f7fb ff38 	bl	80041b0 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	4293      	cmp	r3, r2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e06d      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008352:	4b3a      	ldr	r3, [pc, #232]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 030c 	and.w	r3, r3, #12
 800835a:	2b04      	cmp	r3, #4
 800835c:	d1ee      	bne.n	800833c <HAL_RCC_ClockConfig+0x158>
 800835e:	e010      	b.n	8008382 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008360:	f7fb ff26 	bl	80041b0 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	f241 3288 	movw	r2, #5000	; 0x1388
 800836e:	4293      	cmp	r3, r2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e05b      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008376:	4b31      	ldr	r3, [pc, #196]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f003 030c 	and.w	r3, r3, #12
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ee      	bne.n	8008360 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008382:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d219      	bcs.n	80083c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d105      	bne.n	80083a2 <HAL_RCC_ClockConfig+0x1be>
 8008396:	4b28      	ldr	r3, [pc, #160]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a27      	ldr	r2, [pc, #156]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 800839c:	f043 0304 	orr.w	r3, r3, #4
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	4b25      	ldr	r3, [pc, #148]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f023 0201 	bic.w	r2, r3, #1
 80083aa:	4923      	ldr	r1, [pc, #140]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b2:	4b21      	ldr	r3, [pc, #132]	; (8008438 <HAL_RCC_ClockConfig+0x254>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e034      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083d0:	4b1a      	ldr	r3, [pc, #104]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	4917      	ldr	r1, [pc, #92]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	490f      	ldr	r1, [pc, #60]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008402:	f000 f823 	bl	800844c <HAL_RCC_GetSysClockFreq>
 8008406:	4602      	mov	r2, r0
 8008408:	4b0c      	ldr	r3, [pc, #48]	; (800843c <HAL_RCC_ClockConfig+0x258>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	490b      	ldr	r1, [pc, #44]	; (8008440 <HAL_RCC_ClockConfig+0x25c>)
 8008414:	5ccb      	ldrb	r3, [r1, r3]
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <HAL_RCC_ClockConfig+0x260>)
 800841c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800841e:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_RCC_ClockConfig+0x264>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7fb fc3a 	bl	8003c9c <HAL_InitTick>
 8008428:	4603      	mov	r3, r0
 800842a:	72fb      	strb	r3, [r7, #11]

  return status;
 800842c:	7afb      	ldrb	r3, [r7, #11]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	40023c00 	.word	0x40023c00
 800843c:	40023800 	.word	0x40023800
 8008440:	080175c4 	.word	0x080175c4
 8008444:	20000090 	.word	0x20000090
 8008448:	20000094 	.word	0x20000094

0800844c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800844c:	b5b0      	push	{r4, r5, r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008452:	4b4d      	ldr	r3, [pc, #308]	; (8008588 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 030c 	and.w	r3, r3, #12
 800845e:	2b0c      	cmp	r3, #12
 8008460:	d00c      	beq.n	800847c <HAL_RCC_GetSysClockFreq+0x30>
 8008462:	2b0c      	cmp	r3, #12
 8008464:	d87c      	bhi.n	8008560 <HAL_RCC_GetSysClockFreq+0x114>
 8008466:	2b04      	cmp	r3, #4
 8008468:	d002      	beq.n	8008470 <HAL_RCC_GetSysClockFreq+0x24>
 800846a:	2b08      	cmp	r3, #8
 800846c:	d003      	beq.n	8008476 <HAL_RCC_GetSysClockFreq+0x2a>
 800846e:	e077      	b.n	8008560 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008470:	4b46      	ldr	r3, [pc, #280]	; (800858c <HAL_RCC_GetSysClockFreq+0x140>)
 8008472:	613b      	str	r3, [r7, #16]
      break;
 8008474:	e082      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008476:	4b46      	ldr	r3, [pc, #280]	; (8008590 <HAL_RCC_GetSysClockFreq+0x144>)
 8008478:	613b      	str	r3, [r7, #16]
      break;
 800847a:	e07f      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0c9b      	lsrs	r3, r3, #18
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	4a43      	ldr	r2, [pc, #268]	; (8008594 <HAL_RCC_GetSysClockFreq+0x148>)
 8008486:	5cd3      	ldrb	r3, [r2, r3]
 8008488:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	0d9b      	lsrs	r3, r3, #22
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	3301      	adds	r3, #1
 8008494:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008496:	4b3c      	ldr	r3, [pc, #240]	; (8008588 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	4939      	ldr	r1, [pc, #228]	; (8008590 <HAL_RCC_GetSysClockFreq+0x144>)
 80084ac:	fb01 f003 	mul.w	r0, r1, r3
 80084b0:	2100      	movs	r1, #0
 80084b2:	fb01 f102 	mul.w	r1, r1, r2
 80084b6:	1844      	adds	r4, r0, r1
 80084b8:	4935      	ldr	r1, [pc, #212]	; (8008590 <HAL_RCC_GetSysClockFreq+0x144>)
 80084ba:	fba2 0101 	umull	r0, r1, r2, r1
 80084be:	1863      	adds	r3, r4, r1
 80084c0:	4619      	mov	r1, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	461a      	mov	r2, r3
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	f7f8 fde9 	bl	80010a0 <__aeabi_uldivmod>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4613      	mov	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e040      	b.n	800855a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	461c      	mov	r4, r3
 80084dc:	f04f 0500 	mov.w	r5, #0
 80084e0:	4620      	mov	r0, r4
 80084e2:	4629      	mov	r1, r5
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	014b      	lsls	r3, r1, #5
 80084ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084f2:	0142      	lsls	r2, r0, #5
 80084f4:	4610      	mov	r0, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	1b00      	subs	r0, r0, r4
 80084fa:	eb61 0105 	sbc.w	r1, r1, r5
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	018b      	lsls	r3, r1, #6
 8008508:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800850c:	0182      	lsls	r2, r0, #6
 800850e:	1a12      	subs	r2, r2, r0
 8008510:	eb63 0301 	sbc.w	r3, r3, r1
 8008514:	f04f 0000 	mov.w	r0, #0
 8008518:	f04f 0100 	mov.w	r1, #0
 800851c:	00d9      	lsls	r1, r3, #3
 800851e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008522:	00d0      	lsls	r0, r2, #3
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	1912      	adds	r2, r2, r4
 800852a:	eb45 0303 	adc.w	r3, r5, r3
 800852e:	f04f 0000 	mov.w	r0, #0
 8008532:	f04f 0100 	mov.w	r1, #0
 8008536:	0299      	lsls	r1, r3, #10
 8008538:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800853c:	0290      	lsls	r0, r2, #10
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	461a      	mov	r2, r3
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	f7f8 fda7 	bl	80010a0 <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4613      	mov	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	613b      	str	r3, [r7, #16]
      break;
 800855e:	e00d      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	0b5b      	lsrs	r3, r3, #13
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	613b      	str	r3, [r7, #16]
      break;
 800857a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800857c:	693b      	ldr	r3, [r7, #16]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bdb0      	pop	{r4, r5, r7, pc}
 8008586:	bf00      	nop
 8008588:	40023800 	.word	0x40023800
 800858c:	00f42400 	.word	0x00f42400
 8008590:	016e3600 	.word	0x016e3600
 8008594:	080175b8 	.word	0x080175b8

08008598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800859e:	681b      	ldr	r3, [r3, #0]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	20000090 	.word	0x20000090

080085ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085b0:	f7ff fff2 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085b4:	4602      	mov	r2, r0
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	4903      	ldr	r1, [pc, #12]	; (80085d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085c2:	5ccb      	ldrb	r3, [r1, r3]
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40023800 	.word	0x40023800
 80085d0:	080175d4 	.word	0x080175d4

080085d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085d8:	f7ff ffde 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085dc:	4602      	mov	r2, r0
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	0adb      	lsrs	r3, r3, #11
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	4903      	ldr	r1, [pc, #12]	; (80085f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ea:	5ccb      	ldrb	r3, [r1, r3]
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40023800 	.word	0x40023800
 80085f8:	080175d4 	.word	0x080175d4

080085fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220f      	movs	r2, #15
 800860a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800860c:	4b11      	ldr	r3, [pc, #68]	; (8008654 <HAL_RCC_GetClockConfig+0x58>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0203 	and.w	r2, r3, #3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008618:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <HAL_RCC_GetClockConfig+0x58>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008624:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <HAL_RCC_GetClockConfig+0x58>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008630:	4b08      	ldr	r3, [pc, #32]	; (8008654 <HAL_RCC_GetClockConfig+0x58>)
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	08db      	lsrs	r3, r3, #3
 8008636:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800863e:	4b06      	ldr	r3, [pc, #24]	; (8008658 <HAL_RCC_GetClockConfig+0x5c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0201 	and.w	r2, r3, #1
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	601a      	str	r2, [r3, #0]
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	40023800 	.word	0x40023800
 8008658:	40023c00 	.word	0x40023c00

0800865c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008668:	4b29      	ldr	r3, [pc, #164]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d12c      	bne.n	80086ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008674:	4b26      	ldr	r3, [pc, #152]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008680:	4b24      	ldr	r3, [pc, #144]	; (8008714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	e016      	b.n	80086ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008696:	6253      	str	r3, [r2, #36]	; 0x24
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80086a4:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80086ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ae:	4b18      	ldr	r3, [pc, #96]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80086b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80086c0:	d105      	bne.n	80086ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086c8:	d101      	bne.n	80086ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80086ca:	2301      	movs	r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d105      	bne.n	80086e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80086d4:	4b10      	ldr	r3, [pc, #64]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a0f      	ldr	r2, [pc, #60]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086da:	f043 0304 	orr.w	r3, r3, #4
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f023 0201 	bic.w	r2, r3, #1
 80086e8:	490b      	ldr	r1, [pc, #44]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80086f0:	4b09      	ldr	r3, [pc, #36]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d001      	beq.n	8008702 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40023800 	.word	0x40023800
 8008714:	40007000 	.word	0x40007000
 8008718:	40023c00 	.word	0x40023c00

0800871c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e06e      	b.n	800880c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	2b00      	cmp	r3, #0
 8008734:	d108      	bne.n	8008748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800873e:	d009      	beq.n	8008754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	61da      	str	r2, [r3, #28]
 8008746:	e005      	b.n	8008754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fb f9cc 	bl	8003b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d8:	ea42 0103 	orr.w	r1, r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	0c1a      	lsrs	r2, r3, #16
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f002 0204 	and.w	r2, r2, #4
 80087fa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08c      	sub	sp, #48	; 0x30
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008822:	2301      	movs	r3, #1
 8008824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_SPI_TransmitReceive+0x26>
 8008836:	2302      	movs	r3, #2
 8008838:	e18a      	b.n	8008b50 <HAL_SPI_TransmitReceive+0x33c>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008842:	f7fb fcb5 	bl	80041b0 <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008858:	887b      	ldrh	r3, [r7, #2]
 800885a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800885c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008860:	2b01      	cmp	r3, #1
 8008862:	d00f      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x70>
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800886a:	d107      	bne.n	800887c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <HAL_SPI_TransmitReceive+0x68>
 8008874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008878:	2b04      	cmp	r3, #4
 800887a:	d003      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008882:	e15b      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <HAL_SPI_TransmitReceive+0x82>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <HAL_SPI_TransmitReceive+0x82>
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d103      	bne.n	800889e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800889c:	e14e      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d003      	beq.n	80088b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2205      	movs	r2, #5
 80088ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	887a      	ldrh	r2, [r7, #2]
 80088c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	887a      	ldrh	r2, [r7, #2]
 80088c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	887a      	ldrh	r2, [r7, #2]
 80088da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d007      	beq.n	8008906 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890e:	d178      	bne.n	8008a02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_SPI_TransmitReceive+0x10a>
 8008918:	8b7b      	ldrh	r3, [r7, #26]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d166      	bne.n	80089ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	881a      	ldrh	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	1c9a      	adds	r2, r3, #2
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008942:	e053      	b.n	80089ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d11b      	bne.n	800898a <HAL_SPI_TransmitReceive+0x176>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008956:	b29b      	uxth	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d016      	beq.n	800898a <HAL_SPI_TransmitReceive+0x176>
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d113      	bne.n	800898a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	881a      	ldrh	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b01      	cmp	r3, #1
 8008996:	d119      	bne.n	80089cc <HAL_SPI_TransmitReceive+0x1b8>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d014      	beq.n	80089cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	b292      	uxth	r2, r2
 80089ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	1c9a      	adds	r2, r3, #2
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089c8:	2301      	movs	r3, #1
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089cc:	f7fb fbf0 	bl	80041b0 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089d8:	429a      	cmp	r2, r3
 80089da:	d807      	bhi.n	80089ec <HAL_SPI_TransmitReceive+0x1d8>
 80089dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089e2:	d003      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089ea:	e0a7      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1a6      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x130>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1a1      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x130>
 8008a00:	e07c      	b.n	8008afc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <HAL_SPI_TransmitReceive+0x1fc>
 8008a0a:	8b7b      	ldrh	r3, [r7, #26]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d16b      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a36:	e057      	b.n	8008ae8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d11c      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x26c>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x26c>
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d114      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	7812      	ldrb	r2, [r2, #0]
 8008a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d119      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x2ae>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d014      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ac2:	f7fb fb75 	bl	80041b0 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d803      	bhi.n	8008ada <HAL_SPI_TransmitReceive+0x2c6>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad8:	d102      	bne.n	8008ae0 <HAL_SPI_TransmitReceive+0x2cc>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ae6:	e029      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1a2      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x224>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d19d      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f8b1 	bl	8008c68 <SPI_EndRxTxTransaction>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d006      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b18:	e010      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e000      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	; 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4613      	mov	r3, r2
 8008b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b68:	f7fb fb22 	bl	80041b0 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	1a9b      	subs	r3, r3, r2
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b78:	f7fb fb1a 	bl	80041b0 <HAL_GetTick>
 8008b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b7e:	4b39      	ldr	r3, [pc, #228]	; (8008c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	015b      	lsls	r3, r3, #5
 8008b84:	0d1b      	lsrs	r3, r3, #20
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	fb02 f303 	mul.w	r3, r2, r3
 8008b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b8e:	e054      	b.n	8008c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b96:	d050      	beq.n	8008c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b98:	f7fb fb0a 	bl	80041b0 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d902      	bls.n	8008bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d13d      	bne.n	8008c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bc6:	d111      	bne.n	8008bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd0:	d004      	beq.n	8008bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bda:	d107      	bne.n	8008bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf4:	d10f      	bne.n	8008c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e017      	b.n	8008c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4013      	ands	r3, r2
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d19b      	bne.n	8008b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000090 	.word	0x20000090

08008c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c74:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <SPI_EndRxTxTransaction+0x7c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <SPI_EndRxTxTransaction+0x80>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	0d5b      	lsrs	r3, r3, #21
 8008c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c84:	fb02 f303 	mul.w	r3, r2, r3
 8008c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c92:	d112      	bne.n	8008cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff ff5a 	bl	8008b58 <SPI_WaitFlagStateUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d016      	beq.n	8008cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cae:	f043 0220 	orr.w	r2, r3, #32
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e00f      	b.n	8008cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d0f2      	beq.n	8008cba <SPI_EndRxTxTransaction+0x52>
 8008cd4:	e000      	b.n	8008cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008cd6:	bf00      	nop
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000090 	.word	0x20000090
 8008ce8:	165e9f81 	.word	0x165e9f81

08008cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e031      	b.n	8008d62 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f829 	bl	8008d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f000 f978 	bl	8009020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d001      	beq.n	8008d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e03a      	b.n	8008e0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d00e      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x58>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a16      	ldr	r2, [pc, #88]	; (8008e14 <HAL_TIM_Base_Start_IT+0x98>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d009      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x58>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x58>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d111      	bne.n	8008df8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f003 0307 	and.w	r3, r3, #7
 8008dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d010      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0201 	orr.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df6:	e007      	b.n	8008e08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40000800 	.word	0x40000800
 8008e1c:	40010800 	.word	0x40010800

08008e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d122      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d11b      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0202 	mvn.w	r2, #2
 8008e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f8c1 	bl	8008fea <HAL_TIM_IC_CaptureCallback>
 8008e68:	e005      	b.n	8008e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f8b4 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f8c3 	bl	8008ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d122      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d11b      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0204 	mvn.w	r2, #4
 8008ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f897 	bl	8008fea <HAL_TIM_IC_CaptureCallback>
 8008ebc:	e005      	b.n	8008eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f88a 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f899 	bl	8008ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d122      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d11b      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f06f 0208 	mvn.w	r2, #8
 8008ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2204      	movs	r2, #4
 8008efa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f86d 	bl	8008fea <HAL_TIM_IC_CaptureCallback>
 8008f10:	e005      	b.n	8008f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f860 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f86f 	bl	8008ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d122      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b10      	cmp	r3, #16
 8008f3e:	d11b      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0210 	mvn.w	r2, #16
 8008f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f843 	bl	8008fea <HAL_TIM_IC_CaptureCallback>
 8008f64:	e005      	b.n	8008f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f836 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f845 	bl	8008ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d10e      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d107      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0201 	mvn.w	r2, #1
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fa f888 	bl	80030b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d10e      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d107      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f81f 	bl	800900e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr

08008fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009036:	d007      	beq.n	8009048 <TIM_Base_SetConfig+0x28>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a25      	ldr	r2, [pc, #148]	; (80090d0 <TIM_Base_SetConfig+0xb0>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_Base_SetConfig+0x28>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a24      	ldr	r2, [pc, #144]	; (80090d4 <TIM_Base_SetConfig+0xb4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d108      	bne.n	800905a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009060:	d013      	beq.n	800908a <TIM_Base_SetConfig+0x6a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1a      	ldr	r2, [pc, #104]	; (80090d0 <TIM_Base_SetConfig+0xb0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00f      	beq.n	800908a <TIM_Base_SetConfig+0x6a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a19      	ldr	r2, [pc, #100]	; (80090d4 <TIM_Base_SetConfig+0xb4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00b      	beq.n	800908a <TIM_Base_SetConfig+0x6a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <TIM_Base_SetConfig+0xb8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d007      	beq.n	800908a <TIM_Base_SetConfig+0x6a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a17      	ldr	r2, [pc, #92]	; (80090dc <TIM_Base_SetConfig+0xbc>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_Base_SetConfig+0x6a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a16      	ldr	r2, [pc, #88]	; (80090e0 <TIM_Base_SetConfig+0xc0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d108      	bne.n	800909c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	615a      	str	r2, [r3, #20]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	40000400 	.word	0x40000400
 80090d4:	40000800 	.word	0x40000800
 80090d8:	40010800 	.word	0x40010800
 80090dc:	40010c00 	.word	0x40010c00
 80090e0:	40011000 	.word	0x40011000

080090e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e03f      	b.n	8009176 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fa fd42 	bl	8003b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2224      	movs	r2, #36	; 0x24
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd11 	bl	8009b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800913c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800914c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800915c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b08a      	sub	sp, #40	; 0x28
 8009182:	af02      	add	r7, sp, #8
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b20      	cmp	r3, #32
 800919c:	d17c      	bne.n	8009298 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_UART_Transmit+0x2c>
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e075      	b.n	800929a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_UART_Transmit+0x3e>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e06e      	b.n	800929a <HAL_UART_Transmit+0x11c>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2221      	movs	r2, #33	; 0x21
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091d2:	f7fa ffed 	bl	80041b0 <HAL_GetTick>
 80091d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	88fa      	ldrh	r2, [r7, #6]
 80091dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	88fa      	ldrh	r2, [r7, #6]
 80091e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ec:	d108      	bne.n	8009200 <HAL_UART_Transmit+0x82>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	e003      	b.n	8009208 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009210:	e02a      	b.n	8009268 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2200      	movs	r2, #0
 800921a:	2180      	movs	r1, #128	; 0x80
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 faab 	bl	8009778 <UART_WaitOnFlagUntilTimeout>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e036      	b.n	800929a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10b      	bne.n	800924a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	3302      	adds	r3, #2
 8009246:	61bb      	str	r3, [r7, #24]
 8009248:	e007      	b.n	800925a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	781a      	ldrb	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	3301      	adds	r3, #1
 8009258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1cf      	bne.n	8009212 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	2140      	movs	r1, #64	; 0x40
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa7b 	bl	8009778 <UART_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e006      	b.n	800929a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2220      	movs	r2, #32
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	e000      	b.n	800929a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009298:	2302      	movs	r3, #2
  }
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d11d      	bne.n	80092f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HAL_UART_Receive_IT+0x26>
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e016      	b.n	80092fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UART_Receive_IT+0x38>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e00f      	b.n	80092fa <HAL_UART_Receive_IT+0x58>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fa8c 	bl	800980c <UART_Start_Receive_IT>
 80092f4:	4603      	mov	r3, r0
 80092f6:	e000      	b.n	80092fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092f8:	2302      	movs	r3, #2
  }
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800931a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	695a      	ldr	r2, [r3, #20]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0201 	bic.w	r2, r2, #1
 800932a:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	2b01      	cmp	r3, #1
 8009332:	d107      	bne.n	8009344 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0210 	bic.w	r2, r2, #16
 8009342:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d12d      	bne.n	80093ae <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009360:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	2b00      	cmp	r3, #0
 8009368:	d013      	beq.n	8009392 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936e:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <HAL_UART_AbortReceive_IT+0xd0>)
 8009370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	4618      	mov	r0, r3
 8009378:	f7fb fd33 	bl	8004de2 <HAL_DMA_Abort_IT>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d022      	beq.n	80093c8 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	e01a      	b.n	80093c8 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9d2 	bl	8009750 <HAL_UART_AbortReceiveCpltCallback>
 80093ac:	e00c      	b.n	80093c8 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9c4 	bl	8009750 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	080098ff 	.word	0x080098ff

080093d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	; 0x28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10d      	bne.n	800942a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <HAL_UART_IRQHandler+0x52>
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 faea 	bl	80099fc <UART_Receive_IT>
      return;
 8009428:	e17b      	b.n	8009722 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80b1 	beq.w	8009594 <HAL_UART_IRQHandler+0x1bc>
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <HAL_UART_IRQHandler+0x70>
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 80a6 	beq.w	8009594 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_UART_IRQHandler+0x90>
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	f043 0201 	orr.w	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_UART_IRQHandler+0xb0>
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	f043 0202 	orr.w	r2, r3, #2
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <HAL_UART_IRQHandler+0xd0>
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	f043 0204 	orr.w	r2, r3, #4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00f      	beq.n	80094d2 <HAL_UART_IRQHandler+0xfa>
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <HAL_UART_IRQHandler+0xee>
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f043 0208 	orr.w	r2, r3, #8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 811e 	beq.w	8009718 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_UART_IRQHandler+0x11e>
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa83 	bl	80099fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	bf0c      	ite	eq
 8009504:	2301      	moveq	r3, #1
 8009506:	2300      	movne	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <HAL_UART_IRQHandler+0x146>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d031      	beq.n	8009582 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f9ad 	bl	800987e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952e:	2b40      	cmp	r3, #64	; 0x40
 8009530:	d123      	bne.n	800957a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	695a      	ldr	r2, [r3, #20]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009540:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	2b00      	cmp	r3, #0
 8009548:	d013      	beq.n	8009572 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	4a76      	ldr	r2, [pc, #472]	; (8009728 <HAL_UART_IRQHandler+0x350>)
 8009550:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	4618      	mov	r0, r3
 8009558:	f7fb fc43 	bl	8004de2 <HAL_DMA_Abort_IT>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d016      	beq.n	8009590 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800956c:	4610      	mov	r0, r2
 800956e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009570:	e00e      	b.n	8009590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8e3 	bl	800973e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009578:	e00a      	b.n	8009590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f8df 	bl	800973e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009580:	e006      	b.n	8009590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f8db 	bl	800973e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800958e:	e0c3      	b.n	8009718 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009590:	bf00      	nop
    return;
 8009592:	e0c1      	b.n	8009718 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	2b01      	cmp	r3, #1
 800959a:	f040 80a1 	bne.w	80096e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 809b 	beq.w	80096e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8095 	beq.w	80096e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b40      	cmp	r3, #64	; 0x40
 80095d8:	d14e      	bne.n	8009678 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80095e4:	8a3b      	ldrh	r3, [r7, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 8098 	beq.w	800971c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095f0:	8a3a      	ldrh	r2, [r7, #16]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	f080 8092 	bcs.w	800971c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8a3a      	ldrh	r2, [r7, #16]
 80095fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	2b20      	cmp	r3, #32
 8009606:	d02b      	beq.n	8009660 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009616:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0201 	bic.w	r2, r2, #1
 8009626:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009636:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0210 	bic.w	r2, r2, #16
 8009654:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	4618      	mov	r0, r3
 800965c:	f7fb fb84 	bl	8004d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009668:	b29b      	uxth	r3, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f876 	bl	8009762 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009676:	e051      	b.n	800971c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009680:	b29b      	uxth	r3, r3
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800968a:	b29b      	uxth	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d047      	beq.n	8009720 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009690:	8a7b      	ldrh	r3, [r7, #18]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d044      	beq.n	8009720 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695a      	ldr	r2, [r3, #20]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0210 	bic.w	r2, r2, #16
 80096d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096d4:	8a7b      	ldrh	r3, [r7, #18]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f842 	bl	8009762 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80096de:	e01f      	b.n	8009720 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d008      	beq.n	80096fc <HAL_UART_IRQHandler+0x324>
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f91a 	bl	800992e <UART_Transmit_IT>
    return;
 80096fa:	e012      	b.n	8009722 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00d      	beq.n	8009722 <HAL_UART_IRQHandler+0x34a>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f95b 	bl	80099cc <UART_EndTransmit_IT>
    return;
 8009716:	e004      	b.n	8009722 <HAL_UART_IRQHandler+0x34a>
    return;
 8009718:	bf00      	nop
 800971a:	e002      	b.n	8009722 <HAL_UART_IRQHandler+0x34a>
      return;
 800971c:	bf00      	nop
 800971e:	e000      	b.n	8009722 <HAL_UART_IRQHandler+0x34a>
      return;
 8009720:	bf00      	nop
  }
}
 8009722:	3728      	adds	r7, #40	; 0x28
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	080098d7 	.word	0x080098d7

0800972c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr

0800973e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr

08009750 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr

08009762 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	bc80      	pop	{r7}
 8009776:	4770      	bx	lr

08009778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	4613      	mov	r3, r2
 8009786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009788:	e02c      	b.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009790:	d028      	beq.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009798:	f7fa fd0a 	bl	80041b0 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d21d      	bcs.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0201 	bic.w	r2, r2, #1
 80097c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e00f      	b.n	8009804 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4013      	ands	r3, r2
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bf0c      	ite	eq
 80097f4:	2301      	moveq	r3, #1
 80097f6:	2300      	movne	r3, #0
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d0c3      	beq.n	800978a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2222      	movs	r2, #34	; 0x22
 8009836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009850:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695a      	ldr	r2, [r3, #20]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0201 	orr.w	r2, r2, #1
 8009860:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 0220 	orr.w	r2, r2, #32
 8009870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr

0800987e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009894:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695a      	ldr	r2, [r3, #20]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0201 	bic.w	r2, r2, #1
 80098a4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0210 	bic.w	r2, r2, #16
 80098bc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr

080098d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff ff24 	bl	800973e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7ff ff15 	bl	8009750 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b21      	cmp	r3, #33	; 0x21
 8009940:	d13e      	bne.n	80099c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800994a:	d114      	bne.n	8009976 <UART_Transmit_IT+0x48>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d110      	bne.n	8009976 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009968:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	1c9a      	adds	r2, r3, #2
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	621a      	str	r2, [r3, #32]
 8009974:	e008      	b.n	8009988 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	1c59      	adds	r1, r3, #1
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6211      	str	r1, [r2, #32]
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29b      	uxth	r3, r3
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	4619      	mov	r1, r3
 8009996:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10f      	bne.n	80099bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e000      	b.n	80099c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
  }
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr

080099cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fe9d 	bl	800972c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b22      	cmp	r3, #34	; 0x22
 8009a0e:	f040 8099 	bne.w	8009b44 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a1a:	d117      	bne.n	8009a4c <UART_Receive_IT+0x50>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d113      	bne.n	8009a4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	1c9a      	adds	r2, r3, #2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	629a      	str	r2, [r3, #40]	; 0x28
 8009a4a:	e026      	b.n	8009a9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5e:	d007      	beq.n	8009a70 <UART_Receive_IT+0x74>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <UART_Receive_IT+0x82>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d106      	bne.n	8009a7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	e008      	b.n	8009a90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d148      	bne.n	8009b40 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0220 	bic.w	r2, r2, #32
 8009abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695a      	ldr	r2, [r3, #20]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 0201 	bic.w	r2, r2, #1
 8009adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d123      	bne.n	8009b36 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0210 	bic.w	r2, r2, #16
 8009b02:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0310 	and.w	r3, r3, #16
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d10a      	bne.n	8009b28 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fe17 	bl	8009762 <HAL_UARTEx_RxEventCallback>
 8009b34:	e002      	b.n	8009b3c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f9 fa40 	bl	8002fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e002      	b.n	8009b46 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e000      	b.n	8009b46 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009b44:	2302      	movs	r3, #2
  }
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	431a      	orrs	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b90:	f023 030c 	bic.w	r3, r3, #12
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	699a      	ldr	r2, [r3, #24]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a55      	ldr	r2, [pc, #340]	; (8009d10 <UART_SetConfig+0x1c0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d103      	bne.n	8009bc6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009bbe:	f7fe fd09 	bl	80085d4 <HAL_RCC_GetPCLK2Freq>
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	e002      	b.n	8009bcc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009bc6:	f7fe fcf1 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
 8009bca:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd4:	d14c      	bne.n	8009c70 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009a      	lsls	r2, r3, #2
 8009be0:	441a      	add	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bec:	4a49      	ldr	r2, [pc, #292]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	0119      	lsls	r1, r3, #4
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009a      	lsls	r2, r3, #2
 8009c00:	441a      	add	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c0c:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	2064      	movs	r0, #100	; 0x64
 8009c16:	fb00 f303 	mul.w	r3, r0, r3
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	3332      	adds	r3, #50	; 0x32
 8009c20:	4a3c      	ldr	r2, [pc, #240]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009c22:	fba2 2303 	umull	r2, r3, r2, r3
 8009c26:	095b      	lsrs	r3, r3, #5
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c2e:	4419      	add	r1, r3
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009a      	lsls	r2, r3, #2
 8009c3a:	441a      	add	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c46:	4b33      	ldr	r3, [pc, #204]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009c48:	fba3 0302 	umull	r0, r3, r3, r2
 8009c4c:	095b      	lsrs	r3, r3, #5
 8009c4e:	2064      	movs	r0, #100	; 0x64
 8009c50:	fb00 f303 	mul.w	r3, r0, r3
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	3332      	adds	r3, #50	; 0x32
 8009c5a:	4a2e      	ldr	r2, [pc, #184]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f003 0207 	and.w	r2, r3, #7
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	440a      	add	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c6e:	e04a      	b.n	8009d06 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009a      	lsls	r2, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c86:	4a23      	ldr	r2, [pc, #140]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009c88:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8c:	095b      	lsrs	r3, r3, #5
 8009c8e:	0119      	lsls	r1, r3, #4
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009a      	lsls	r2, r3, #2
 8009c9a:	441a      	add	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ca6:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009ca8:	fba3 0302 	umull	r0, r3, r3, r2
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	2064      	movs	r0, #100	; 0x64
 8009cb0:	fb00 f303 	mul.w	r3, r0, r3
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	3332      	adds	r3, #50	; 0x32
 8009cba:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc0:	095b      	lsrs	r3, r3, #5
 8009cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cc6:	4419      	add	r1, r3
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009a      	lsls	r2, r3, #2
 8009cd2:	441a      	add	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009ce0:	fba3 0302 	umull	r0, r3, r3, r2
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	2064      	movs	r0, #100	; 0x64
 8009ce8:	fb00 f303 	mul.w	r3, r0, r3
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	3332      	adds	r3, #50	; 0x32
 8009cf2:	4a08      	ldr	r2, [pc, #32]	; (8009d14 <UART_SetConfig+0x1c4>)
 8009cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf8:	095b      	lsrs	r3, r3, #5
 8009cfa:	f003 020f 	and.w	r2, r3, #15
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	440a      	add	r2, r1
 8009d04:	609a      	str	r2, [r3, #8]
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40013800 	.word	0x40013800
 8009d14:	51eb851f 	.word	0x51eb851f

08009d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009d2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bc80      	pop	{r7}
 8009d42:	4770      	bx	lr

08009d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009d50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4013      	ands	r3, r2
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr

08009d78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009d78:	b084      	sub	sp, #16
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	f107 0014 	add.w	r0, r7, #20
 8009d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bc80      	pop	{r7}
 8009db4:	b004      	add	sp, #16
 8009db6:	4770      	bx	lr

08009db8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b09b      	sub	sp, #108	; 0x6c
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	78db      	ldrb	r3, [r3, #3]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d81f      	bhi.n	8009e2a <USB_ActivateEndpoint+0x72>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USB_ActivateEndpoint+0x38>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e1d 	.word	0x08009e1d
 8009df8:	08009e33 	.word	0x08009e33
 8009dfc:	08009e0f 	.word	0x08009e0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009e00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e0c:	e012      	b.n	8009e34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009e0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009e16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e1a:	e00b      	b.n	8009e34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009e1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e28:	e004      	b.n	8009e34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009e30:	e000      	b.n	8009e34 <USB_ActivateEndpoint+0x7c>
      break;
 8009e32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	441a      	add	r2, r3
 8009e3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4313      	orrs	r3, r2
 8009e76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	441a      	add	r2, r3
 8009e84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	7b1b      	ldrb	r3, [r3, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8149 	bne.w	800a138 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 8084 	beq.w	8009fb8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	011a      	lsls	r2, r3, #4
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ed2:	613b      	str	r3, [r7, #16]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	88db      	ldrh	r3, [r3, #6]
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	81fb      	strh	r3, [r7, #14]
 8009ef2:	89fb      	ldrh	r3, [r7, #14]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01b      	beq.n	8009f34 <USB_ActivateEndpoint+0x17c>
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	81bb      	strh	r3, [r7, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	441a      	add	r2, r3
 8009f1e:	89bb      	ldrh	r3, [r7, #12]
 8009f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	78db      	ldrb	r3, [r3, #3]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d020      	beq.n	8009f7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f52:	813b      	strh	r3, [r7, #8]
 8009f54:	893b      	ldrh	r3, [r7, #8]
 8009f56:	f083 0320 	eor.w	r3, r3, #32
 8009f5a:	813b      	strh	r3, [r7, #8]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	441a      	add	r2, r3
 8009f66:	893b      	ldrh	r3, [r7, #8]
 8009f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	8013      	strh	r3, [r2, #0]
 8009f7c:	e27f      	b.n	800a47e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f94:	817b      	strh	r3, [r7, #10]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	897b      	ldrh	r3, [r7, #10]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]
 8009fb6:	e262      	b.n	800a47e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	4413      	add	r3, r2
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	011a      	lsls	r2, r3, #4
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	88db      	ldrh	r3, [r3, #6]
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	4413      	add	r3, r2
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	011a      	lsls	r2, r3, #4
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	4413      	add	r3, r2
 800a00a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a00e:	623b      	str	r3, [r7, #32]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d112      	bne.n	800a03e <USB_ActivateEndpoint+0x286>
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a022:	b29a      	uxth	r2, r3
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a036:	b29a      	uxth	r2, r3
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e02f      	b.n	800a09e <USB_ActivateEndpoint+0x2e6>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b3e      	cmp	r3, #62	; 0x3e
 800a044:	d813      	bhi.n	800a06e <USB_ActivateEndpoint+0x2b6>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	663b      	str	r3, [r7, #96]	; 0x60
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <USB_ActivateEndpoint+0x2a8>
 800a05a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a05c:	3301      	adds	r3, #1
 800a05e:	663b      	str	r3, [r7, #96]	; 0x60
 800a060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a062:	b29b      	uxth	r3, r3
 800a064:	029b      	lsls	r3, r3, #10
 800a066:	b29a      	uxth	r2, r3
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	e017      	b.n	800a09e <USB_ActivateEndpoint+0x2e6>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	663b      	str	r3, [r7, #96]	; 0x60
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d102      	bne.n	800a088 <USB_ActivateEndpoint+0x2d0>
 800a082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a084:	3b01      	subs	r3, #1
 800a086:	663b      	str	r3, [r7, #96]	; 0x60
 800a088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	029b      	lsls	r3, r3, #10
 800a08e:	b29b      	uxth	r3, r3
 800a090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a098:	b29a      	uxth	r2, r3
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	83fb      	strh	r3, [r7, #30]
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01b      	beq.n	800a0ee <USB_ActivateEndpoint+0x336>
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0cc:	83bb      	strh	r3, [r7, #28]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	441a      	add	r2, r3
 800a0d8:	8bbb      	ldrh	r3, [r7, #28]
 800a0da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a104:	837b      	strh	r3, [r7, #26]
 800a106:	8b7b      	ldrh	r3, [r7, #26]
 800a108:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a10c:	837b      	strh	r3, [r7, #26]
 800a10e:	8b7b      	ldrh	r3, [r7, #26]
 800a110:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a114:	837b      	strh	r3, [r7, #26]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	441a      	add	r2, r3
 800a120:	8b7b      	ldrh	r3, [r7, #26]
 800a122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	b29b      	uxth	r3, r3
 800a134:	8013      	strh	r3, [r2, #0]
 800a136:	e1a2      	b.n	800a47e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	441a      	add	r2, r3
 800a15c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a168:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	b29b      	uxth	r3, r3
 800a172:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	65bb      	str	r3, [r7, #88]	; 0x58
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a17e:	b29b      	uxth	r3, r3
 800a180:	461a      	mov	r2, r3
 800a182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a184:	4413      	add	r3, r2
 800a186:	65bb      	str	r3, [r7, #88]	; 0x58
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	011a      	lsls	r2, r3, #4
 800a18e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a190:	4413      	add	r3, r2
 800a192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a196:	657b      	str	r3, [r7, #84]	; 0x54
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	891b      	ldrh	r3, [r3, #8]
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a6:	801a      	strh	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	653b      	str	r3, [r7, #80]	; 0x50
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b8:	4413      	add	r3, r2
 800a1ba:	653b      	str	r3, [r7, #80]	; 0x50
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	011a      	lsls	r2, r3, #4
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	895b      	ldrh	r3, [r3, #10]
 800a1d0:	085b      	lsrs	r3, r3, #1
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f040 8091 	bne.w	800a308 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a1f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01b      	beq.n	800a236 <USB_ActivateEndpoint+0x47e>
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a214:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	441a      	add	r2, r3
 800a220:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a22a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a232:	b29b      	uxth	r3, r3
 800a234:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	873b      	strh	r3, [r7, #56]	; 0x38
 800a244:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01b      	beq.n	800a286 <USB_ActivateEndpoint+0x4ce>
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a264:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	441a      	add	r2, r3
 800a270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a282:	b29b      	uxth	r3, r3
 800a284:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a29e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a2a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a2a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a2a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a2a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	441a      	add	r2, r3
 800a2b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e4:	867b      	strh	r3, [r7, #50]	; 0x32
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	441a      	add	r2, r3
 800a2f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a302:	b29b      	uxth	r3, r3
 800a304:	8013      	strh	r3, [r2, #0]
 800a306:	e0ba      	b.n	800a47e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a318:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d01d      	beq.n	800a360 <USB_ActivateEndpoint+0x5a8>
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	441a      	add	r2, r3
 800a348:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a34c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a370:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01d      	beq.n	800a3b8 <USB_ActivateEndpoint+0x600>
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	441a      	add	r2, r3
 800a3a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a3a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	78db      	ldrb	r3, [r3, #3]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d024      	beq.n	800a40a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a3da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a3de:	f083 0320 	eor.w	r3, r3, #32
 800a3e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	441a      	add	r2, r3
 800a3f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a3f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a404:	b29b      	uxth	r3, r3
 800a406:	8013      	strh	r3, [r2, #0]
 800a408:	e01d      	b.n	800a446 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a420:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	441a      	add	r2, r3
 800a42e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a442:	b29b      	uxth	r3, r3
 800a444:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	441a      	add	r2, r3
 800a468:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a46a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a46e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a47e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a482:	4618      	mov	r0, r3
 800a484:	376c      	adds	r7, #108	; 0x6c
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b08d      	sub	sp, #52	; 0x34
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	7b1b      	ldrb	r3, [r3, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f040 808e 	bne.w	800a5bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d044      	beq.n	800a532 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	81bb      	strh	r3, [r7, #12]
 800a4b6:	89bb      	ldrh	r3, [r7, #12]
 800a4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01b      	beq.n	800a4f8 <USB_DeactivateEndpoint+0x6c>
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d6:	817b      	strh	r3, [r7, #10]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	441a      	add	r2, r3
 800a4e2:	897b      	ldrh	r3, [r7, #10]
 800a4e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	b29b      	uxth	r3, r3
 800a506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a50e:	813b      	strh	r3, [r7, #8]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	441a      	add	r2, r3
 800a51a:	893b      	ldrh	r3, [r7, #8]
 800a51c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	8013      	strh	r3, [r2, #0]
 800a530:	e192      	b.n	800a858 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	827b      	strh	r3, [r7, #18]
 800a540:	8a7b      	ldrh	r3, [r7, #18]
 800a542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01b      	beq.n	800a582 <USB_DeactivateEndpoint+0xf6>
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a55c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a560:	823b      	strh	r3, [r7, #16]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	441a      	add	r2, r3
 800a56c:	8a3b      	ldrh	r3, [r7, #16]
 800a56e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	b29b      	uxth	r3, r3
 800a580:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4413      	add	r3, r2
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a598:	81fb      	strh	r3, [r7, #14]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	441a      	add	r2, r3
 800a5a4:	89fb      	ldrh	r3, [r7, #14]
 800a5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	8013      	strh	r3, [r2, #0]
 800a5ba:	e14d      	b.n	800a858 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f040 80a5 	bne.w	800a710 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	843b      	strh	r3, [r7, #32]
 800a5d4:	8c3b      	ldrh	r3, [r7, #32]
 800a5d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01b      	beq.n	800a616 <USB_DeactivateEndpoint+0x18a>
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f4:	83fb      	strh	r3, [r7, #30]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	441a      	add	r2, r3
 800a600:	8bfb      	ldrh	r3, [r7, #30]
 800a602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a60a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a612:	b29b      	uxth	r3, r3
 800a614:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	83bb      	strh	r3, [r7, #28]
 800a624:	8bbb      	ldrh	r3, [r7, #28]
 800a626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01b      	beq.n	800a666 <USB_DeactivateEndpoint+0x1da>
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a644:	837b      	strh	r3, [r7, #26]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	441a      	add	r2, r3
 800a650:	8b7b      	ldrh	r3, [r7, #26]
 800a652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a65a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a65e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a662:	b29b      	uxth	r3, r3
 800a664:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a67c:	833b      	strh	r3, [r7, #24]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	441a      	add	r2, r3
 800a688:	8b3b      	ldrh	r3, [r7, #24]
 800a68a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a68e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a696:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b4:	82fb      	strh	r3, [r7, #22]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	441a      	add	r2, r3
 800a6c0:	8afb      	ldrh	r3, [r7, #22]
 800a6c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ec:	82bb      	strh	r3, [r7, #20]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	8abb      	ldrh	r3, [r7, #20]
 800a6fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	8013      	strh	r3, [r2, #0]
 800a70e:	e0a3      	b.n	800a858 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a71e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01b      	beq.n	800a760 <USB_DeactivateEndpoint+0x2d4>
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29b      	uxth	r3, r3
 800a736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	441a      	add	r2, r3
 800a74a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a76e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d01b      	beq.n	800a7b0 <USB_DeactivateEndpoint+0x324>
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	b29b      	uxth	r3, r3
 800a786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	441a      	add	r2, r3
 800a79a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a79c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	441a      	add	r2, r3
 800a7d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	441a      	add	r2, r3
 800a80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a80c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a836:	847b      	strh	r3, [r7, #34]	; 0x22
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	441a      	add	r2, r3
 800a842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a84c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a854:	b29b      	uxth	r3, r3
 800a856:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3734      	adds	r7, #52	; 0x34
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr

0800a864 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b0cc      	sub	sp, #304	; 0x130
 800a868:	af00      	add	r7, sp, #0
 800a86a:	1d3b      	adds	r3, r7, #4
 800a86c:	6018      	str	r0, [r3, #0]
 800a86e:	463b      	mov	r3, r7
 800a870:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a872:	463b      	mov	r3, r7
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f040 872e 	bne.w	800b6da <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a87e:	463b      	mov	r3, r7
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	463b      	mov	r3, r7
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d905      	bls.n	800a89a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a88e:	463b      	mov	r3, r7
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a898:	e004      	b.n	800a8a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a89a:	463b      	mov	r3, r7
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a8a4:	463b      	mov	r3, r7
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	7b1b      	ldrb	r3, [r3, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d134      	bne.n	800a918 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6959      	ldr	r1, [r3, #20]
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	88da      	ldrh	r2, [r3, #6]
 800a8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	1d38      	adds	r0, r7, #4
 800a8c2:	6800      	ldr	r0, [r0, #0]
 800a8c4:	f001 fbee 	bl	800c0a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a8c8:	f107 0310 	add.w	r3, r7, #16
 800a8cc:	1d3a      	adds	r2, r7, #4
 800a8ce:	6812      	ldr	r2, [r2, #0]
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	1d3b      	adds	r3, r7, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f107 0310 	add.w	r3, r7, #16
 800a8e2:	f107 0210 	add.w	r2, r7, #16
 800a8e6:	6812      	ldr	r2, [r2, #0]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	011a      	lsls	r2, r3, #4
 800a8f4:	f107 0310 	add.w	r3, r7, #16
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a900:	f107 030c 	add.w	r3, r7, #12
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	f000 beac 	b.w	800b670 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a918:	463b      	mov	r3, r7
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	78db      	ldrb	r3, [r3, #3]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	f040 838c 	bne.w	800b03c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a924:	463b      	mov	r3, r7
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6a1a      	ldr	r2, [r3, #32]
 800a92a:	463b      	mov	r3, r7
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	429a      	cmp	r2, r3
 800a932:	f240 8330 	bls.w	800af96 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	463b      	mov	r3, r7
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a94c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a950:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a954:	1d3b      	adds	r3, r7, #4
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	463b      	mov	r3, r7
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	441a      	add	r2, r3
 800a962:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a96a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a96e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a976:	b29b      	uxth	r3, r3
 800a978:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a97a:	463b      	mov	r3, r7
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a1a      	ldr	r2, [r3, #32]
 800a980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	463b      	mov	r3, r7
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a98c:	1d3b      	adds	r3, r7, #4
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	463b      	mov	r3, r7
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 819e 	beq.w	800ace4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9ac:	1d3a      	adds	r2, r7, #4
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	463b      	mov	r3, r7
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d17a      	bne.n	800aab2 <USB_EPStartXfer+0x24e>
 800a9bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9c0:	1d3a      	adds	r2, r7, #4
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	1d3b      	adds	r3, r7, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a9da:	6812      	ldr	r2, [r2, #0]
 800a9dc:	440a      	add	r2, r1
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	011a      	lsls	r2, r3, #4
 800a9e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d11a      	bne.n	800aa38 <USB_EPStartXfer+0x1d4>
 800aa02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	801a      	strh	r2, [r3, #0]
 800aa36:	e062      	b.n	800aafe <USB_EPStartXfer+0x29a>
 800aa38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa3c:	2b3e      	cmp	r3, #62	; 0x3e
 800aa3e:	d819      	bhi.n	800aa74 <USB_EPStartXfer+0x210>
 800aa40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa44:	085b      	lsrs	r3, r3, #1
 800aa46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <USB_EPStartXfer+0x1fc>
 800aa56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	029b      	lsls	r3, r3, #10
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	801a      	strh	r2, [r3, #0]
 800aa72:	e044      	b.n	800aafe <USB_EPStartXfer+0x29a>
 800aa74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa82:	f003 031f 	and.w	r3, r3, #31
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d104      	bne.n	800aa94 <USB_EPStartXfer+0x230>
 800aa8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	029b      	lsls	r3, r3, #10
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	e025      	b.n	800aafe <USB_EPStartXfer+0x29a>
 800aab2:	463b      	mov	r3, r7
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d120      	bne.n	800aafe <USB_EPStartXfer+0x29a>
 800aabc:	1d3b      	adds	r3, r7, #4
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aacc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	440a      	add	r2, r1
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	463b      	mov	r3, r7
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	011a      	lsls	r2, r3, #4
 800aade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4413      	add	r3, r2
 800aae6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800aaea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aafe:	463b      	mov	r3, r7
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	895b      	ldrh	r3, [r3, #10]
 800ab04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab08:	463b      	mov	r3, r7
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6959      	ldr	r1, [r3, #20]
 800ab0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ab18:	1d38      	adds	r0, r7, #4
 800ab1a:	6800      	ldr	r0, [r0, #0]
 800ab1c:	f001 fac2 	bl	800c0a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab20:	463b      	mov	r3, r7
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695a      	ldr	r2, [r3, #20]
 800ab26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab2a:	441a      	add	r2, r3
 800ab2c:	463b      	mov	r3, r7
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab32:	463b      	mov	r3, r7
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6a1a      	ldr	r2, [r3, #32]
 800ab38:	463b      	mov	r3, r7
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d909      	bls.n	800ab56 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800ab42:	463b      	mov	r3, r7
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab4c:	1ad2      	subs	r2, r2, r3
 800ab4e:	463b      	mov	r3, r7
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	621a      	str	r2, [r3, #32]
 800ab54:	e008      	b.n	800ab68 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab56:	463b      	mov	r3, r7
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ab60:	463b      	mov	r3, r7
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab68:	463b      	mov	r3, r7
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d17a      	bne.n	800ac68 <USB_EPStartXfer+0x404>
 800ab72:	f107 0318 	add.w	r3, r7, #24
 800ab76:	1d3a      	adds	r2, r7, #4
 800ab78:	6812      	ldr	r2, [r2, #0]
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	1d3b      	adds	r3, r7, #4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	4619      	mov	r1, r3
 800ab88:	f107 0318 	add.w	r3, r7, #24
 800ab8c:	f107 0218 	add.w	r2, r7, #24
 800ab90:	6812      	ldr	r2, [r2, #0]
 800ab92:	440a      	add	r2, r1
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	463b      	mov	r3, r7
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	011a      	lsls	r2, r3, #4
 800ab9e:	f107 0318 	add.w	r3, r7, #24
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4413      	add	r3, r2
 800aba6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800abaa:	f107 0314 	add.w	r3, r7, #20
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d11a      	bne.n	800abee <USB_EPStartXfer+0x38a>
 800abb8:	f107 0314 	add.w	r3, r7, #20
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	f107 0314 	add.w	r3, r7, #20
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	f107 0314 	add.w	r3, r7, #20
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e067      	b.n	800acbe <USB_EPStartXfer+0x45a>
 800abee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abf2:	2b3e      	cmp	r3, #62	; 0x3e
 800abf4:	d819      	bhi.n	800ac2a <USB_EPStartXfer+0x3c6>
 800abf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <USB_EPStartXfer+0x3b2>
 800ac0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac10:	3301      	adds	r3, #1
 800ac12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	029b      	lsls	r3, r3, #10
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	801a      	strh	r2, [r3, #0]
 800ac28:	e049      	b.n	800acbe <USB_EPStartXfer+0x45a>
 800ac2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac38:	f003 031f 	and.w	r3, r3, #31
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <USB_EPStartXfer+0x3e6>
 800ac40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac44:	3b01      	subs	r3, #1
 800ac46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	029b      	lsls	r3, r3, #10
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	f107 0314 	add.w	r3, r7, #20
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	e02a      	b.n	800acbe <USB_EPStartXfer+0x45a>
 800ac68:	463b      	mov	r3, r7
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d125      	bne.n	800acbe <USB_EPStartXfer+0x45a>
 800ac72:	f107 0320 	add.w	r3, r7, #32
 800ac76:	1d3a      	adds	r2, r7, #4
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	4619      	mov	r1, r3
 800ac88:	f107 0320 	add.w	r3, r7, #32
 800ac8c:	f107 0220 	add.w	r2, r7, #32
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	440a      	add	r2, r1
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	463b      	mov	r3, r7
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	011a      	lsls	r2, r3, #4
 800ac9e:	f107 0320 	add.w	r3, r7, #32
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4413      	add	r3, r2
 800aca6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800acaa:	f107 031c 	add.w	r3, r7, #28
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	f107 031c 	add.w	r3, r7, #28
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800acbe:	463b      	mov	r3, r7
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	891b      	ldrh	r3, [r3, #8]
 800acc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acc8:	463b      	mov	r3, r7
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6959      	ldr	r1, [r3, #20]
 800acce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800acd8:	1d38      	adds	r0, r7, #4
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	f001 f9e2 	bl	800c0a4 <USB_WritePMA>
 800ace0:	f000 bcc6 	b.w	800b670 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ace4:	463b      	mov	r3, r7
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d164      	bne.n	800adb8 <USB_EPStartXfer+0x554>
 800acee:	1d3b      	adds	r3, r7, #4
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	64bb      	str	r3, [r7, #72]	; 0x48
 800acf4:	1d3b      	adds	r3, r7, #4
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad02:	4413      	add	r3, r2
 800ad04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad06:	463b      	mov	r3, r7
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	011a      	lsls	r2, r3, #4
 800ad0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad10:	4413      	add	r3, r2
 800ad12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad16:	647b      	str	r3, [r7, #68]	; 0x44
 800ad18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d112      	bne.n	800ad46 <USB_EPStartXfer+0x4e2>
 800ad20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2e:	801a      	strh	r2, [r3, #0]
 800ad30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad42:	801a      	strh	r2, [r3, #0]
 800ad44:	e057      	b.n	800adf6 <USB_EPStartXfer+0x592>
 800ad46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad4a:	2b3e      	cmp	r3, #62	; 0x3e
 800ad4c:	d817      	bhi.n	800ad7e <USB_EPStartXfer+0x51a>
 800ad4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <USB_EPStartXfer+0x50a>
 800ad64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad68:	3301      	adds	r3, #1
 800ad6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	029b      	lsls	r3, r3, #10
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7a:	801a      	strh	r2, [r3, #0]
 800ad7c:	e03b      	b.n	800adf6 <USB_EPStartXfer+0x592>
 800ad7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad82:	095b      	lsrs	r3, r3, #5
 800ad84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad8c:	f003 031f 	and.w	r3, r3, #31
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d104      	bne.n	800ad9e <USB_EPStartXfer+0x53a>
 800ad94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ad9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	029b      	lsls	r3, r3, #10
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e01e      	b.n	800adf6 <USB_EPStartXfer+0x592>
 800adb8:	463b      	mov	r3, r7
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d119      	bne.n	800adf6 <USB_EPStartXfer+0x592>
 800adc2:	1d3b      	adds	r3, r7, #4
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	653b      	str	r3, [r7, #80]	; 0x50
 800adc8:	1d3b      	adds	r3, r7, #4
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800add0:	b29b      	uxth	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add6:	4413      	add	r3, r2
 800add8:	653b      	str	r3, [r7, #80]	; 0x50
 800adda:	463b      	mov	r3, r7
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	011a      	lsls	r2, r3, #4
 800ade2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade4:	4413      	add	r3, r2
 800ade6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800adf6:	463b      	mov	r3, r7
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	891b      	ldrh	r3, [r3, #8]
 800adfc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae00:	463b      	mov	r3, r7
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6959      	ldr	r1, [r3, #20]
 800ae06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ae10:	1d38      	adds	r0, r7, #4
 800ae12:	6800      	ldr	r0, [r0, #0]
 800ae14:	f001 f946 	bl	800c0a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800ae18:	463b      	mov	r3, r7
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695a      	ldr	r2, [r3, #20]
 800ae1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae22:	441a      	add	r2, r3
 800ae24:	463b      	mov	r3, r7
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6a1a      	ldr	r2, [r3, #32]
 800ae30:	463b      	mov	r3, r7
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d909      	bls.n	800ae4e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae44:	1ad2      	subs	r2, r2, r3
 800ae46:	463b      	mov	r3, r7
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	621a      	str	r2, [r3, #32]
 800ae4c:	e008      	b.n	800ae60 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800ae4e:	463b      	mov	r3, r7
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ae58:	463b      	mov	r3, r7
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae60:	1d3b      	adds	r3, r7, #4
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	643b      	str	r3, [r7, #64]	; 0x40
 800ae66:	463b      	mov	r3, r7
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	785b      	ldrb	r3, [r3, #1]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d164      	bne.n	800af3a <USB_EPStartXfer+0x6d6>
 800ae70:	1d3b      	adds	r3, r7, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae76:	1d3b      	adds	r3, r7, #4
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	461a      	mov	r2, r3
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	4413      	add	r3, r2
 800ae86:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae88:	463b      	mov	r3, r7
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	011a      	lsls	r2, r3, #4
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	4413      	add	r3, r2
 800ae94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae98:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d112      	bne.n	800aec8 <USB_EPStartXfer+0x664>
 800aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec4:	801a      	strh	r2, [r3, #0]
 800aec6:	e054      	b.n	800af72 <USB_EPStartXfer+0x70e>
 800aec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aecc:	2b3e      	cmp	r3, #62	; 0x3e
 800aece:	d817      	bhi.n	800af00 <USB_EPStartXfer+0x69c>
 800aed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed4:	085b      	lsrs	r3, r3, #1
 800aed6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aeda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <USB_EPStartXfer+0x68c>
 800aee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aeea:	3301      	adds	r3, #1
 800aeec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	029b      	lsls	r3, r3, #10
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	e038      	b.n	800af72 <USB_EPStartXfer+0x70e>
 800af00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af04:	095b      	lsrs	r3, r3, #5
 800af06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af0e:	f003 031f 	and.w	r3, r3, #31
 800af12:	2b00      	cmp	r3, #0
 800af14:	d104      	bne.n	800af20 <USB_EPStartXfer+0x6bc>
 800af16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af1a:	3b01      	subs	r3, #1
 800af1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af24:	b29b      	uxth	r3, r3
 800af26:	029b      	lsls	r3, r3, #10
 800af28:	b29b      	uxth	r3, r3
 800af2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af32:	b29a      	uxth	r2, r3
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	e01b      	b.n	800af72 <USB_EPStartXfer+0x70e>
 800af3a:	463b      	mov	r3, r7
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	785b      	ldrb	r3, [r3, #1]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d116      	bne.n	800af72 <USB_EPStartXfer+0x70e>
 800af44:	1d3b      	adds	r3, r7, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af52:	4413      	add	r3, r2
 800af54:	643b      	str	r3, [r7, #64]	; 0x40
 800af56:	463b      	mov	r3, r7
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	011a      	lsls	r2, r3, #4
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	4413      	add	r3, r2
 800af62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af72:	463b      	mov	r3, r7
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	895b      	ldrh	r3, [r3, #10]
 800af78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af7c:	463b      	mov	r3, r7
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6959      	ldr	r1, [r3, #20]
 800af82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af86:	b29b      	uxth	r3, r3
 800af88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800af8c:	1d38      	adds	r0, r7, #4
 800af8e:	6800      	ldr	r0, [r0, #0]
 800af90:	f001 f888 	bl	800c0a4 <USB_WritePMA>
 800af94:	e36c      	b.n	800b670 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800af96:	463b      	mov	r3, r7
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800afa0:	1d3b      	adds	r3, r7, #4
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	463b      	mov	r3, r7
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800afb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800afbe:	1d3b      	adds	r3, r7, #4
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	463b      	mov	r3, r7
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	441a      	add	r2, r3
 800afcc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800afd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800afe4:	1d3b      	adds	r3, r7, #4
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afea:	1d3b      	adds	r3, r7, #4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aff8:	4413      	add	r3, r2
 800affa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800affc:	463b      	mov	r3, r7
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	011a      	lsls	r2, r3, #4
 800b004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b006:	4413      	add	r3, r2
 800b008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b00c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b00e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b012:	b29a      	uxth	r2, r3
 800b014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b018:	463b      	mov	r3, r7
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	891b      	ldrh	r3, [r3, #8]
 800b01e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b022:	463b      	mov	r3, r7
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6959      	ldr	r1, [r3, #20]
 800b028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b032:	1d38      	adds	r0, r7, #4
 800b034:	6800      	ldr	r0, [r0, #0]
 800b036:	f001 f835 	bl	800c0a4 <USB_WritePMA>
 800b03a:	e319      	b.n	800b670 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b03c:	1d3b      	adds	r3, r7, #4
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	463b      	mov	r3, r7
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b056:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800b05a:	1d3b      	adds	r3, r7, #4
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	463b      	mov	r3, r7
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	441a      	add	r2, r3
 800b068:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800b06c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b074:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b080:	463b      	mov	r3, r7
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6a1a      	ldr	r2, [r3, #32]
 800b086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b08a:	1ad2      	subs	r2, r2, r3
 800b08c:	463b      	mov	r3, r7
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b092:	1d3b      	adds	r3, r7, #4
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	463b      	mov	r3, r7
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8162 	beq.w	800b372 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d164      	bne.n	800b18a <USB_EPStartXfer+0x926>
 800b0c0:	1d3b      	adds	r3, r7, #4
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0c6:	1d3b      	adds	r3, r7, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0d4:	4413      	add	r3, r2
 800b0d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0d8:	463b      	mov	r3, r7
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	011a      	lsls	r2, r3, #4
 800b0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0e8:	677b      	str	r3, [r7, #116]	; 0x74
 800b0ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d112      	bne.n	800b118 <USB_EPStartXfer+0x8b4>
 800b0f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b100:	801a      	strh	r2, [r3, #0]
 800b102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b29b      	uxth	r3, r3
 800b108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b10c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b110:	b29a      	uxth	r2, r3
 800b112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b114:	801a      	strh	r2, [r3, #0]
 800b116:	e057      	b.n	800b1c8 <USB_EPStartXfer+0x964>
 800b118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b11c:	2b3e      	cmp	r3, #62	; 0x3e
 800b11e:	d817      	bhi.n	800b150 <USB_EPStartXfer+0x8ec>
 800b120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b124:	085b      	lsrs	r3, r3, #1
 800b126:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <USB_EPStartXfer+0x8dc>
 800b136:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b13a:	3301      	adds	r3, #1
 800b13c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b140:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b144:	b29b      	uxth	r3, r3
 800b146:	029b      	lsls	r3, r3, #10
 800b148:	b29a      	uxth	r2, r3
 800b14a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	e03b      	b.n	800b1c8 <USB_EPStartXfer+0x964>
 800b150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b154:	095b      	lsrs	r3, r3, #5
 800b156:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b15e:	f003 031f 	and.w	r3, r3, #31
 800b162:	2b00      	cmp	r3, #0
 800b164:	d104      	bne.n	800b170 <USB_EPStartXfer+0x90c>
 800b166:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b16a:	3b01      	subs	r3, #1
 800b16c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b170:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b174:	b29b      	uxth	r3, r3
 800b176:	029b      	lsls	r3, r3, #10
 800b178:	b29b      	uxth	r3, r3
 800b17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b182:	b29a      	uxth	r2, r3
 800b184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	e01e      	b.n	800b1c8 <USB_EPStartXfer+0x964>
 800b18a:	463b      	mov	r3, r7
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d119      	bne.n	800b1c8 <USB_EPStartXfer+0x964>
 800b194:	1d3b      	adds	r3, r7, #4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1aa:	463b      	mov	r3, r7
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	011a      	lsls	r2, r3, #4
 800b1b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b1c8:	463b      	mov	r3, r7
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	895b      	ldrh	r3, [r3, #10]
 800b1ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1d2:	463b      	mov	r3, r7
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6959      	ldr	r1, [r3, #20]
 800b1d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b1e2:	1d38      	adds	r0, r7, #4
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	f000 ff5d 	bl	800c0a4 <USB_WritePMA>
          ep->xfer_buff += len;
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695a      	ldr	r2, [r3, #20]
 800b1f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1f4:	441a      	add	r2, r3
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6a1a      	ldr	r2, [r3, #32]
 800b202:	463b      	mov	r3, r7
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d909      	bls.n	800b220 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800b20c:	463b      	mov	r3, r7
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6a1a      	ldr	r2, [r3, #32]
 800b212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b216:	1ad2      	subs	r2, r2, r3
 800b218:	463b      	mov	r3, r7
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	621a      	str	r2, [r3, #32]
 800b21e:	e008      	b.n	800b232 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800b220:	463b      	mov	r3, r7
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b22a:	463b      	mov	r3, r7
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 821a 	beq.w	800b670 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b23c:	463b      	mov	r3, r7
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d164      	bne.n	800b310 <USB_EPStartXfer+0xaac>
 800b246:	1d3b      	adds	r3, r7, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b24c:	1d3b      	adds	r3, r7, #4
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b254:	b29b      	uxth	r3, r3
 800b256:	461a      	mov	r2, r3
 800b258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b25a:	4413      	add	r3, r2
 800b25c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b25e:	463b      	mov	r3, r7
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	011a      	lsls	r2, r3, #4
 800b266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b268:	4413      	add	r3, r2
 800b26a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b26e:	667b      	str	r3, [r7, #100]	; 0x64
 800b270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b274:	2b00      	cmp	r3, #0
 800b276:	d112      	bne.n	800b29e <USB_EPStartXfer+0xa3a>
 800b278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b282:	b29a      	uxth	r2, r3
 800b284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b286:	801a      	strh	r2, [r3, #0]
 800b288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b296:	b29a      	uxth	r2, r3
 800b298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b29a:	801a      	strh	r2, [r3, #0]
 800b29c:	e057      	b.n	800b34e <USB_EPStartXfer+0xaea>
 800b29e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b2a4:	d817      	bhi.n	800b2d6 <USB_EPStartXfer+0xa72>
 800b2a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d004      	beq.n	800b2c6 <USB_EPStartXfer+0xa62>
 800b2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	029b      	lsls	r3, r3, #10
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d2:	801a      	strh	r2, [r3, #0]
 800b2d4:	e03b      	b.n	800b34e <USB_EPStartXfer+0xaea>
 800b2d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2e4:	f003 031f 	and.w	r3, r3, #31
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d104      	bne.n	800b2f6 <USB_EPStartXfer+0xa92>
 800b2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	029b      	lsls	r3, r3, #10
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b308:	b29a      	uxth	r2, r3
 800b30a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30c:	801a      	strh	r2, [r3, #0]
 800b30e:	e01e      	b.n	800b34e <USB_EPStartXfer+0xaea>
 800b310:	463b      	mov	r3, r7
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d119      	bne.n	800b34e <USB_EPStartXfer+0xaea>
 800b31a:	1d3b      	adds	r3, r7, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	673b      	str	r3, [r7, #112]	; 0x70
 800b320:	1d3b      	adds	r3, r7, #4
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b328:	b29b      	uxth	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b32e:	4413      	add	r3, r2
 800b330:	673b      	str	r3, [r7, #112]	; 0x70
 800b332:	463b      	mov	r3, r7
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	011a      	lsls	r2, r3, #4
 800b33a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b33c:	4413      	add	r3, r2
 800b33e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b342:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b34e:	463b      	mov	r3, r7
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	891b      	ldrh	r3, [r3, #8]
 800b354:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b358:	463b      	mov	r3, r7
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6959      	ldr	r1, [r3, #20]
 800b35e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b362:	b29b      	uxth	r3, r3
 800b364:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b368:	1d38      	adds	r0, r7, #4
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	f000 fe9a 	bl	800c0a4 <USB_WritePMA>
 800b370:	e17e      	b.n	800b670 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b372:	463b      	mov	r3, r7
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d16f      	bne.n	800b45c <USB_EPStartXfer+0xbf8>
 800b37c:	1d3b      	adds	r3, r7, #4
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b384:	1d3b      	adds	r3, r7, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b394:	4413      	add	r3, r2
 800b396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b39a:	463b      	mov	r3, r7
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	011a      	lsls	r2, r3, #4
 800b3a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b3ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d116      	bne.n	800b3e6 <USB_EPStartXfer+0xb82>
 800b3b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3ca:	801a      	strh	r2, [r3, #0]
 800b3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3e2:	801a      	strh	r2, [r3, #0]
 800b3e4:	e05f      	b.n	800b4a6 <USB_EPStartXfer+0xc42>
 800b3e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b3ec:	d818      	bhi.n	800b420 <USB_EPStartXfer+0xbbc>
 800b3ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b3f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	2b00      	cmp	r3, #0
 800b402:	d004      	beq.n	800b40e <USB_EPStartXfer+0xbaa>
 800b404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b408:	3301      	adds	r3, #1
 800b40a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b40e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b412:	b29b      	uxth	r3, r3
 800b414:	029b      	lsls	r3, r3, #10
 800b416:	b29a      	uxth	r2, r3
 800b418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b41c:	801a      	strh	r2, [r3, #0]
 800b41e:	e042      	b.n	800b4a6 <USB_EPStartXfer+0xc42>
 800b420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b42a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b42e:	f003 031f 	and.w	r3, r3, #31
 800b432:	2b00      	cmp	r3, #0
 800b434:	d104      	bne.n	800b440 <USB_EPStartXfer+0xbdc>
 800b436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b43a:	3b01      	subs	r3, #1
 800b43c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b440:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b444:	b29b      	uxth	r3, r3
 800b446:	029b      	lsls	r3, r3, #10
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b452:	b29a      	uxth	r2, r3
 800b454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b458:	801a      	strh	r2, [r3, #0]
 800b45a:	e024      	b.n	800b4a6 <USB_EPStartXfer+0xc42>
 800b45c:	463b      	mov	r3, r7
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	785b      	ldrb	r3, [r3, #1]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d11f      	bne.n	800b4a6 <USB_EPStartXfer+0xc42>
 800b466:	1d3b      	adds	r3, r7, #4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b46e:	1d3b      	adds	r3, r7, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b476:	b29b      	uxth	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b47e:	4413      	add	r3, r2
 800b480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b484:	463b      	mov	r3, r7
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	011a      	lsls	r2, r3, #4
 800b48c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b490:	4413      	add	r3, r2
 800b492:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b49a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	891b      	ldrh	r3, [r3, #8]
 800b4ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4b0:	463b      	mov	r3, r7
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6959      	ldr	r1, [r3, #20]
 800b4b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b4c0:	1d38      	adds	r0, r7, #4
 800b4c2:	6800      	ldr	r0, [r0, #0]
 800b4c4:	f000 fdee 	bl	800c0a4 <USB_WritePMA>
          ep->xfer_buff += len;
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	695a      	ldr	r2, [r3, #20]
 800b4ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4d2:	441a      	add	r2, r3
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b4da:	463b      	mov	r3, r7
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6a1a      	ldr	r2, [r3, #32]
 800b4e0:	463b      	mov	r3, r7
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d909      	bls.n	800b4fe <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6a1a      	ldr	r2, [r3, #32]
 800b4f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4f4:	1ad2      	subs	r2, r2, r3
 800b4f6:	463b      	mov	r3, r7
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	621a      	str	r2, [r3, #32]
 800b4fc:	e008      	b.n	800b510 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800b4fe:	463b      	mov	r3, r7
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b508:	463b      	mov	r3, r7
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2200      	movs	r2, #0
 800b50e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80ab 	beq.w	800b670 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b51a:	1d3b      	adds	r3, r7, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b522:	463b      	mov	r3, r7
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d16f      	bne.n	800b60c <USB_EPStartXfer+0xda8>
 800b52c:	1d3b      	adds	r3, r7, #4
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b544:	4413      	add	r3, r2
 800b546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b54a:	463b      	mov	r3, r7
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	011a      	lsls	r2, r3, #4
 800b552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b556:	4413      	add	r3, r2
 800b558:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b55c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b564:	2b00      	cmp	r3, #0
 800b566:	d116      	bne.n	800b596 <USB_EPStartXfer+0xd32>
 800b568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b574:	b29a      	uxth	r2, r3
 800b576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b57a:	801a      	strh	r2, [r3, #0]
 800b57c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b29b      	uxth	r3, r3
 800b584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	e05b      	b.n	800b64e <USB_EPStartXfer+0xdea>
 800b596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b59a:	2b3e      	cmp	r3, #62	; 0x3e
 800b59c:	d818      	bhi.n	800b5d0 <USB_EPStartXfer+0xd6c>
 800b59e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <USB_EPStartXfer+0xd5a>
 800b5b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b5be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	029b      	lsls	r3, r3, #10
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5cc:	801a      	strh	r2, [r3, #0]
 800b5ce:	e03e      	b.n	800b64e <USB_EPStartXfer+0xdea>
 800b5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5d4:	095b      	lsrs	r3, r3, #5
 800b5d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b5da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5de:	f003 031f 	and.w	r3, r3, #31
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <USB_EPStartXfer+0xd8c>
 800b5e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	029b      	lsls	r3, r3, #10
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b602:	b29a      	uxth	r2, r3
 800b604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b608:	801a      	strh	r2, [r3, #0]
 800b60a:	e020      	b.n	800b64e <USB_EPStartXfer+0xdea>
 800b60c:	463b      	mov	r3, r7
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	785b      	ldrb	r3, [r3, #1]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d11b      	bne.n	800b64e <USB_EPStartXfer+0xdea>
 800b616:	1d3b      	adds	r3, r7, #4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b61e:	b29b      	uxth	r3, r3
 800b620:	461a      	mov	r2, r3
 800b622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b626:	4413      	add	r3, r2
 800b628:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b62c:	463b      	mov	r3, r7
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	011a      	lsls	r2, r3, #4
 800b634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b638:	4413      	add	r3, r2
 800b63a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b63e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b646:	b29a      	uxth	r2, r3
 800b648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b64c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b64e:	463b      	mov	r3, r7
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	895b      	ldrh	r3, [r3, #10]
 800b654:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b658:	463b      	mov	r3, r7
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6959      	ldr	r1, [r3, #20]
 800b65e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b662:	b29b      	uxth	r3, r3
 800b664:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b668:	1d38      	adds	r0, r7, #4
 800b66a:	6800      	ldr	r0, [r0, #0]
 800b66c:	f000 fd1a 	bl	800c0a4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b670:	1d3b      	adds	r3, r7, #4
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	463b      	mov	r3, r7
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	b29b      	uxth	r3, r3
 800b682:	f107 020a 	add.w	r2, r7, #10
 800b686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b68e:	8013      	strh	r3, [r2, #0]
 800b690:	f107 030a 	add.w	r3, r7, #10
 800b694:	f107 020a 	add.w	r2, r7, #10
 800b698:	8812      	ldrh	r2, [r2, #0]
 800b69a:	f082 0210 	eor.w	r2, r2, #16
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	f107 030a 	add.w	r3, r7, #10
 800b6a4:	f107 020a 	add.w	r2, r7, #10
 800b6a8:	8812      	ldrh	r2, [r2, #0]
 800b6aa:	f082 0220 	eor.w	r2, r2, #32
 800b6ae:	801a      	strh	r2, [r3, #0]
 800b6b0:	1d3b      	adds	r3, r7, #4
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	463b      	mov	r3, r7
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	441a      	add	r2, r3
 800b6be:	f107 030a 	add.w	r3, r7, #10
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	8013      	strh	r3, [r2, #0]
 800b6d8:	e3b5      	b.n	800be46 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b6da:	463b      	mov	r3, r7
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	7b1b      	ldrb	r3, [r3, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 8090 	bne.w	800b806 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d90e      	bls.n	800b714 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b700:	463b      	mov	r3, r7
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	699a      	ldr	r2, [r3, #24]
 800b706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	463b      	mov	r3, r7
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	619a      	str	r2, [r3, #24]
 800b712:	e008      	b.n	800b726 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800b714:	463b      	mov	r3, r7
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b71e:	463b      	mov	r3, r7
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b726:	1d3b      	adds	r3, r7, #4
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b72e:	1d3b      	adds	r3, r7, #4
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b736:	b29b      	uxth	r3, r3
 800b738:	461a      	mov	r2, r3
 800b73a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b73e:	4413      	add	r3, r2
 800b740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b744:	463b      	mov	r3, r7
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	011a      	lsls	r2, r3, #4
 800b74c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b750:	4413      	add	r3, r2
 800b752:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b75a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d116      	bne.n	800b790 <USB_EPStartXfer+0xf2c>
 800b762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b76e:	b29a      	uxth	r2, r3
 800b770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b774:	801a      	strh	r2, [r3, #0]
 800b776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b786:	b29a      	uxth	r2, r3
 800b788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e32c      	b.n	800bdea <USB_EPStartXfer+0x1586>
 800b790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b794:	2b3e      	cmp	r3, #62	; 0x3e
 800b796:	d818      	bhi.n	800b7ca <USB_EPStartXfer+0xf66>
 800b798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <USB_EPStartXfer+0xf54>
 800b7ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b7b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	029b      	lsls	r3, r3, #10
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7c6:	801a      	strh	r2, [r3, #0]
 800b7c8:	e30f      	b.n	800bdea <USB_EPStartXfer+0x1586>
 800b7ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b7d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7d8:	f003 031f 	and.w	r3, r3, #31
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <USB_EPStartXfer+0xf86>
 800b7e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b7ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	029b      	lsls	r3, r3, #10
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b802:	801a      	strh	r2, [r3, #0]
 800b804:	e2f1      	b.n	800bdea <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b806:	463b      	mov	r3, r7
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	78db      	ldrb	r3, [r3, #3]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	f040 818f 	bne.w	800bb30 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b812:	463b      	mov	r3, r7
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	785b      	ldrb	r3, [r3, #1]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d175      	bne.n	800b908 <USB_EPStartXfer+0x10a4>
 800b81c:	1d3b      	adds	r3, r7, #4
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b824:	1d3b      	adds	r3, r7, #4
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b834:	4413      	add	r3, r2
 800b836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b83a:	463b      	mov	r3, r7
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	011a      	lsls	r2, r3, #4
 800b842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b846:	4413      	add	r3, r2
 800b848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b84c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b850:	463b      	mov	r3, r7
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d116      	bne.n	800b888 <USB_EPStartXfer+0x1024>
 800b85a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b866:	b29a      	uxth	r2, r3
 800b868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b86c:	801a      	strh	r2, [r3, #0]
 800b86e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29b      	uxth	r3, r3
 800b876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b87e:	b29a      	uxth	r2, r3
 800b880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b884:	801a      	strh	r2, [r3, #0]
 800b886:	e065      	b.n	800b954 <USB_EPStartXfer+0x10f0>
 800b888:	463b      	mov	r3, r7
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	2b3e      	cmp	r3, #62	; 0x3e
 800b890:	d81a      	bhi.n	800b8c8 <USB_EPStartXfer+0x1064>
 800b892:	463b      	mov	r3, r7
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	085b      	lsrs	r3, r3, #1
 800b89a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b89e:	463b      	mov	r3, r7
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d004      	beq.n	800b8b6 <USB_EPStartXfer+0x1052>
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	029b      	lsls	r3, r3, #10
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8c4:	801a      	strh	r2, [r3, #0]
 800b8c6:	e045      	b.n	800b954 <USB_EPStartXfer+0x10f0>
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	095b      	lsrs	r3, r3, #5
 800b8d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f003 031f 	and.w	r3, r3, #31
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d104      	bne.n	800b8ec <USB_EPStartXfer+0x1088>
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	029b      	lsls	r3, r3, #10
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b904:	801a      	strh	r2, [r3, #0]
 800b906:	e025      	b.n	800b954 <USB_EPStartXfer+0x10f0>
 800b908:	463b      	mov	r3, r7
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	785b      	ldrb	r3, [r3, #1]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d120      	bne.n	800b954 <USB_EPStartXfer+0x10f0>
 800b912:	1d3b      	adds	r3, r7, #4
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b91a:	1d3b      	adds	r3, r7, #4
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b922:	b29b      	uxth	r3, r3
 800b924:	461a      	mov	r2, r3
 800b926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b92a:	4413      	add	r3, r2
 800b92c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b930:	463b      	mov	r3, r7
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	011a      	lsls	r2, r3, #4
 800b938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b93c:	4413      	add	r3, r2
 800b93e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b942:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b946:	463b      	mov	r3, r7
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	1d3b      	adds	r3, r7, #4
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b95c:	463b      	mov	r3, r7
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d175      	bne.n	800ba52 <USB_EPStartXfer+0x11ee>
 800b966:	1d3b      	adds	r3, r7, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b96e:	1d3b      	adds	r3, r7, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b976:	b29b      	uxth	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b97e:	4413      	add	r3, r2
 800b980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b984:	463b      	mov	r3, r7
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	011a      	lsls	r2, r3, #4
 800b98c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b990:	4413      	add	r3, r2
 800b992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b99a:	463b      	mov	r3, r7
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d116      	bne.n	800b9d2 <USB_EPStartXfer+0x116e>
 800b9a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9b6:	801a      	strh	r2, [r3, #0]
 800b9b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9ce:	801a      	strh	r2, [r3, #0]
 800b9d0:	e061      	b.n	800ba96 <USB_EPStartXfer+0x1232>
 800b9d2:	463b      	mov	r3, r7
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	2b3e      	cmp	r3, #62	; 0x3e
 800b9da:	d81a      	bhi.n	800ba12 <USB_EPStartXfer+0x11ae>
 800b9dc:	463b      	mov	r3, r7
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b9e8:	463b      	mov	r3, r7
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <USB_EPStartXfer+0x119c>
 800b9f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	029b      	lsls	r3, r3, #10
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba0e:	801a      	strh	r2, [r3, #0]
 800ba10:	e041      	b.n	800ba96 <USB_EPStartXfer+0x1232>
 800ba12:	463b      	mov	r3, r7
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	095b      	lsrs	r3, r3, #5
 800ba1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba1e:	463b      	mov	r3, r7
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f003 031f 	and.w	r3, r3, #31
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <USB_EPStartXfer+0x11d2>
 800ba2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba30:	3b01      	subs	r3, #1
 800ba32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	029b      	lsls	r3, r3, #10
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba4e:	801a      	strh	r2, [r3, #0]
 800ba50:	e021      	b.n	800ba96 <USB_EPStartXfer+0x1232>
 800ba52:	463b      	mov	r3, r7
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d11c      	bne.n	800ba96 <USB_EPStartXfer+0x1232>
 800ba5c:	1d3b      	adds	r3, r7, #4
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	461a      	mov	r2, r3
 800ba68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba72:	463b      	mov	r3, r7
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	011a      	lsls	r2, r3, #4
 800ba7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba7e:	4413      	add	r3, r2
 800ba80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba88:	463b      	mov	r3, r7
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba94:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ba96:	463b      	mov	r3, r7
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 81a4 	beq.w	800bdea <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800baa2:	1d3b      	adds	r3, r7, #4
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	463b      	mov	r3, r7
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bab6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800baba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <USB_EPStartXfer+0x126a>
 800bac2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10d      	bne.n	800baea <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bace:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f040 8187 	bne.w	800bdea <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800badc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f040 8180 	bne.w	800bdea <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800baea:	1d3b      	adds	r3, r7, #4
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	463b      	mov	r3, r7
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb04:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800bb08:	1d3b      	adds	r3, r7, #4
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	441a      	add	r2, r3
 800bb16:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800bb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	8013      	strh	r3, [r2, #0]
 800bb2e:	e15c      	b.n	800bdea <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bb30:	463b      	mov	r3, r7
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	78db      	ldrb	r3, [r3, #3]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	f040 8155 	bne.w	800bde6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699a      	ldr	r2, [r3, #24]
 800bb42:	463b      	mov	r3, r7
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d90e      	bls.n	800bb6a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800bb56:	463b      	mov	r3, r7
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	699a      	ldr	r2, [r3, #24]
 800bb5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb60:	1ad2      	subs	r2, r2, r3
 800bb62:	463b      	mov	r3, r7
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	619a      	str	r2, [r3, #24]
 800bb68:	e008      	b.n	800bb7c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800bb6a:	463b      	mov	r3, r7
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800bb74:	463b      	mov	r3, r7
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	785b      	ldrb	r3, [r3, #1]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d16f      	bne.n	800bc66 <USB_EPStartXfer+0x1402>
 800bb86:	1d3b      	adds	r3, r7, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb8e:	1d3b      	adds	r3, r7, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	461a      	mov	r2, r3
 800bb9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb9e:	4413      	add	r3, r2
 800bba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bba4:	463b      	mov	r3, r7
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	011a      	lsls	r2, r3, #4
 800bbac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bbb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d116      	bne.n	800bbf0 <USB_EPStartXfer+0x138c>
 800bbc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbd4:	801a      	strh	r2, [r3, #0]
 800bbd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbec:	801a      	strh	r2, [r3, #0]
 800bbee:	e05f      	b.n	800bcb0 <USB_EPStartXfer+0x144c>
 800bbf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbf4:	2b3e      	cmp	r3, #62	; 0x3e
 800bbf6:	d818      	bhi.n	800bc2a <USB_EPStartXfer+0x13c6>
 800bbf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbfc:	085b      	lsrs	r3, r3, #1
 800bbfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <USB_EPStartXfer+0x13b4>
 800bc0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc12:	3301      	adds	r3, #1
 800bc14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	029b      	lsls	r3, r3, #10
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc26:	801a      	strh	r2, [r3, #0]
 800bc28:	e042      	b.n	800bcb0 <USB_EPStartXfer+0x144c>
 800bc2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc2e:	095b      	lsrs	r3, r3, #5
 800bc30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc38:	f003 031f 	and.w	r3, r3, #31
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <USB_EPStartXfer+0x13e6>
 800bc40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc44:	3b01      	subs	r3, #1
 800bc46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	029b      	lsls	r3, r3, #10
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc62:	801a      	strh	r2, [r3, #0]
 800bc64:	e024      	b.n	800bcb0 <USB_EPStartXfer+0x144c>
 800bc66:	463b      	mov	r3, r7
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d11f      	bne.n	800bcb0 <USB_EPStartXfer+0x144c>
 800bc70:	1d3b      	adds	r3, r7, #4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc78:	1d3b      	adds	r3, r7, #4
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	461a      	mov	r2, r3
 800bc84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc88:	4413      	add	r3, r2
 800bc8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc8e:	463b      	mov	r3, r7
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	011a      	lsls	r2, r3, #4
 800bc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bca0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcae:	801a      	strh	r2, [r3, #0]
 800bcb0:	1d3b      	adds	r3, r7, #4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bcb8:	463b      	mov	r3, r7
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	785b      	ldrb	r3, [r3, #1]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d16f      	bne.n	800bda2 <USB_EPStartXfer+0x153e>
 800bcc2:	1d3b      	adds	r3, r7, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcca:	1d3b      	adds	r3, r7, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcda:	4413      	add	r3, r2
 800bcdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bce0:	463b      	mov	r3, r7
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	011a      	lsls	r2, r3, #4
 800bce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcec:	4413      	add	r3, r2
 800bcee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bcf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d116      	bne.n	800bd2c <USB_EPStartXfer+0x14c8>
 800bcfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd10:	801a      	strh	r2, [r3, #0]
 800bd12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd28:	801a      	strh	r2, [r3, #0]
 800bd2a:	e05e      	b.n	800bdea <USB_EPStartXfer+0x1586>
 800bd2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd30:	2b3e      	cmp	r3, #62	; 0x3e
 800bd32:	d818      	bhi.n	800bd66 <USB_EPStartXfer+0x1502>
 800bd34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd38:	085b      	lsrs	r3, r3, #1
 800bd3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d004      	beq.n	800bd54 <USB_EPStartXfer+0x14f0>
 800bd4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd4e:	3301      	adds	r3, #1
 800bd50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	029b      	lsls	r3, r3, #10
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	e041      	b.n	800bdea <USB_EPStartXfer+0x1586>
 800bd66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd6a:	095b      	lsrs	r3, r3, #5
 800bd6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd74:	f003 031f 	and.w	r3, r3, #31
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d104      	bne.n	800bd86 <USB_EPStartXfer+0x1522>
 800bd7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd80:	3b01      	subs	r3, #1
 800bd82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	029b      	lsls	r3, r3, #10
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd9e:	801a      	strh	r2, [r3, #0]
 800bda0:	e023      	b.n	800bdea <USB_EPStartXfer+0x1586>
 800bda2:	463b      	mov	r3, r7
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d11e      	bne.n	800bdea <USB_EPStartXfer+0x1586>
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	011a      	lsls	r2, r3, #4
 800bdca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdce:	4413      	add	r3, r2
 800bdd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bdd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde2:	801a      	strh	r2, [r3, #0]
 800bde4:	e001      	b.n	800bdea <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e02e      	b.n	800be48 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bdea:	1d3b      	adds	r3, r7, #4
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	463b      	mov	r3, r7
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be04:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be10:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be1c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be20:	1d3b      	adds	r3, r7, #4
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	463b      	mov	r3, r7
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	441a      	add	r2, r3
 800be2e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be42:	b29b      	uxth	r3, r3
 800be44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be52:	b480      	push	{r7}
 800be54:	b085      	sub	sp, #20
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	785b      	ldrb	r3, [r3, #1]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d020      	beq.n	800bea6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29b      	uxth	r3, r3
 800be72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be7a:	81bb      	strh	r3, [r7, #12]
 800be7c:	89bb      	ldrh	r3, [r7, #12]
 800be7e:	f083 0310 	eor.w	r3, r3, #16
 800be82:	81bb      	strh	r3, [r7, #12]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	441a      	add	r2, r3
 800be8e:	89bb      	ldrh	r3, [r7, #12]
 800be90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	8013      	strh	r3, [r2, #0]
 800bea4:	e01f      	b.n	800bee6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebc:	81fb      	strh	r3, [r7, #14]
 800bebe:	89fb      	ldrh	r3, [r7, #14]
 800bec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bec4:	81fb      	strh	r3, [r7, #14]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	441a      	add	r2, r3
 800bed0:	89fb      	ldrh	r3, [r7, #14]
 800bed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	bc80      	pop	{r7}
 800bef0:	4770      	bx	lr

0800bef2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bef2:	b480      	push	{r7}
 800bef4:	b087      	sub	sp, #28
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	7b1b      	ldrb	r3, [r3, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f040 809d 	bne.w	800c040 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d04c      	beq.n	800bfa8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	823b      	strh	r3, [r7, #16]
 800bf1c:	8a3b      	ldrh	r3, [r7, #16]
 800bf1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d01b      	beq.n	800bf5e <USB_EPClearStall+0x6c>
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf3c:	81fb      	strh	r3, [r7, #14]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	441a      	add	r2, r3
 800bf48:	89fb      	ldrh	r3, [r7, #14]
 800bf4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	78db      	ldrb	r3, [r3, #3]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d06c      	beq.n	800c040 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf7c:	81bb      	strh	r3, [r7, #12]
 800bf7e:	89bb      	ldrh	r3, [r7, #12]
 800bf80:	f083 0320 	eor.w	r3, r3, #32
 800bf84:	81bb      	strh	r3, [r7, #12]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	441a      	add	r2, r3
 800bf90:	89bb      	ldrh	r3, [r7, #12]
 800bf92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	8013      	strh	r3, [r2, #0]
 800bfa6:	e04b      	b.n	800c040 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	82fb      	strh	r3, [r7, #22]
 800bfb6:	8afb      	ldrh	r3, [r7, #22]
 800bfb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d01b      	beq.n	800bff8 <USB_EPClearStall+0x106>
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfd6:	82bb      	strh	r3, [r7, #20]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	441a      	add	r2, r3
 800bfe2:	8abb      	ldrh	r3, [r7, #20]
 800bfe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	b29b      	uxth	r3, r3
 800c006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c00e:	827b      	strh	r3, [r7, #18]
 800c010:	8a7b      	ldrh	r3, [r7, #18]
 800c012:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c016:	827b      	strh	r3, [r7, #18]
 800c018:	8a7b      	ldrh	r3, [r7, #18]
 800c01a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c01e:	827b      	strh	r3, [r7, #18]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	441a      	add	r2, r3
 800c02a:	8a7b      	ldrh	r3, [r7, #18]
 800c02c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	371c      	adds	r7, #28
 800c046:	46bd      	mov	sp, r7
 800c048:	bc80      	pop	{r7}
 800c04a:	4770      	bx	lr

0800c04c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d103      	bne.n	800c066 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2280      	movs	r2, #128	; 0x80
 800c062:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c094:	b29b      	uxth	r3, r3
 800c096:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c098:	68fb      	ldr	r3, [r7, #12]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bc80      	pop	{r7}
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b08d      	sub	sp, #52	; 0x34
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	80fb      	strh	r3, [r7, #6]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c0ba:	88bb      	ldrh	r3, [r7, #4]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	085b      	lsrs	r3, r3, #1
 800c0c0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	005a      	lsls	r2, r3, #1
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0dc:	e01e      	b.n	800c11c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	021b      	lsls	r3, r3, #8
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	3302      	adds	r3, #2
 800c108:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	3302      	adds	r3, #2
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	3301      	adds	r3, #1
 800c114:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	3b01      	subs	r3, #1
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1dd      	bne.n	800c0de <USB_WritePMA+0x3a>
  }
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	3734      	adds	r7, #52	; 0x34
 800c128:	46bd      	mov	sp, r7
 800c12a:	bc80      	pop	{r7}
 800c12c:	4770      	bx	lr

0800c12e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c12e:	b480      	push	{r7}
 800c130:	b08b      	sub	sp, #44	; 0x2c
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	4611      	mov	r1, r2
 800c13a:	461a      	mov	r2, r3
 800c13c:	460b      	mov	r3, r1
 800c13e:	80fb      	strh	r3, [r7, #6]
 800c140:	4613      	mov	r3, r2
 800c142:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c144:	88bb      	ldrh	r3, [r7, #4]
 800c146:	085b      	lsrs	r3, r3, #1
 800c148:	b29b      	uxth	r3, r3
 800c14a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	005a      	lsls	r2, r3, #1
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c160:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	627b      	str	r3, [r7, #36]	; 0x24
 800c166:	e01b      	b.n	800c1a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	3302      	adds	r3, #2
 800c174:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	3301      	adds	r3, #1
 800c182:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	3301      	adds	r3, #1
 800c192:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	3302      	adds	r3, #2
 800c198:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	3b01      	subs	r3, #1
 800c19e:	627b      	str	r3, [r7, #36]	; 0x24
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1e0      	bne.n	800c168 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c1a6:	88bb      	ldrh	r3, [r7, #4]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d007      	beq.n	800c1c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	701a      	strb	r2, [r3, #0]
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	372c      	adds	r7, #44	; 0x2c
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bc80      	pop	{r7}
 800c1ca:	4770      	bx	lr

0800c1cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c1d0:	4904      	ldr	r1, [pc, #16]	; (800c1e4 <MX_FATFS_Init+0x18>)
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <MX_FATFS_Init+0x1c>)
 800c1d4:	f004 fa8c 	bl	80106f0 <FATFS_LinkDriver>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4b03      	ldr	r3, [pc, #12]	; (800c1ec <MX_FATFS_Init+0x20>)
 800c1de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c1e0:	bf00      	nop
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	20000984 	.word	0x20000984
 800c1e8:	2000009c 	.word	0x2000009c
 800c1ec:	20000988 	.word	0x20000988

0800c1f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c1f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bc80      	pop	{r7}
 800c1fc:	4770      	bx	lr

0800c1fe <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	4603      	mov	r3, r0
 800c206:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f9d8 	bl	800c5c0 <USER_SPI_initialize>
 800c210:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b082      	sub	sp, #8
 800c21e:	af00      	add	r7, sp, #0
 800c220:	4603      	mov	r3, r0
 800c222:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fab6 	bl	800c798 <USER_SPI_status>
 800c22c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800c246:	7bf8      	ldrb	r0, [r7, #15]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	f000 fab7 	bl	800c7c0 <USER_SPI_read>
 800c252:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
 800c266:	603b      	str	r3, [r7, #0]
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800c26c:	7bf8      	ldrb	r0, [r7, #15]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	68b9      	ldr	r1, [r7, #8]
 800c274:	f000 fb0a 	bl	800c88c <USER_SPI_write>
 800c278:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	4603      	mov	r3, r0
 800c28a:	603a      	str	r2, [r7, #0]
 800c28c:	71fb      	strb	r3, [r7, #7]
 800c28e:	460b      	mov	r3, r1
 800c290:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800c292:	79b9      	ldrb	r1, [r7, #6]
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fb73 	bl	800c984 <USER_SPI_ioctl>
 800c29e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c2b0:	f7f7 ff7e 	bl	80041b0 <HAL_GetTick>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <SPI_Timer_On+0x20>)
 800c2b8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800c2ba:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <SPI_Timer_On+0x24>)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6013      	str	r3, [r2, #0]
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20000dec 	.word	0x20000dec
 800c2cc:	20000df0 	.word	0x20000df0

0800c2d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c2d4:	f7f7 ff6c 	bl	80041b0 <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <SPI_Timer_Status+0x24>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <SPI_Timer_Status+0x28>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	bf34      	ite	cc
 800c2e8:	2301      	movcc	r3, #1
 800c2ea:	2300      	movcs	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000dec 	.word	0x20000dec
 800c2f8:	20000df0 	.word	0x20000df0

0800c2fc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af02      	add	r7, sp, #8
 800c302:	4603      	mov	r3, r0
 800c304:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c306:	f107 020f 	add.w	r2, r7, #15
 800c30a:	1df9      	adds	r1, r7, #7
 800c30c:	2332      	movs	r3, #50	; 0x32
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2301      	movs	r3, #1
 800c312:	4804      	ldr	r0, [pc, #16]	; (800c324 <xchg_spi+0x28>)
 800c314:	f7fc fa7e 	bl	8008814 <HAL_SPI_TransmitReceive>
    return rxDat;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20000528 	.word	0x20000528

0800c328 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c328:	b590      	push	{r4, r7, lr}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e00a      	b.n	800c34e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	18d4      	adds	r4, r2, r3
 800c33e:	20ff      	movs	r0, #255	; 0xff
 800c340:	f7ff ffdc 	bl	800c2fc <xchg_spi>
 800c344:	4603      	mov	r3, r0
 800c346:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3301      	adds	r3, #1
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d3f0      	bcc.n	800c338 <rcvr_spi_multi+0x10>
	}
}
 800c356:	bf00      	nop
 800c358:	bf00      	nop
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd90      	pop	{r4, r7, pc}

0800c360 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	e009      	b.n	800c384 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff ffbf 	bl	800c2fc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3301      	adds	r3, #1
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d3f1      	bcc.n	800c370 <xmit_spi_multi+0x10>
	}
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b086      	sub	sp, #24
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c39e:	f7f7 ff07 	bl	80041b0 <HAL_GetTick>
 800c3a2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c3a8:	20ff      	movs	r0, #255	; 0xff
 800c3aa:	f7ff ffa7 	bl	800c2fc <xchg_spi>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	2bff      	cmp	r3, #255	; 0xff
 800c3b6:	d007      	beq.n	800c3c8 <wait_ready+0x32>
 800c3b8:	f7f7 fefa 	bl	80041b0 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d8ef      	bhi.n	800c3a8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	2bff      	cmp	r3, #255	; 0xff
 800c3cc:	bf0c      	ite	eq
 800c3ce:	2301      	moveq	r3, #1
 800c3d0:	2300      	movne	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	4803      	ldr	r0, [pc, #12]	; (800c3f4 <despiselect+0x18>)
 800c3e6:	f7f8 ffb2 	bl	800534e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c3ea:	20ff      	movs	r0, #255	; 0xff
 800c3ec:	f7ff ff86 	bl	800c2fc <xchg_spi>

}
 800c3f0:	bf00      	nop
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	40020400 	.word	0x40020400

0800c3f8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2101      	movs	r1, #1
 800c400:	4809      	ldr	r0, [pc, #36]	; (800c428 <spiselect+0x30>)
 800c402:	f7f8 ffa4 	bl	800534e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c406:	20ff      	movs	r0, #255	; 0xff
 800c408:	f7ff ff78 	bl	800c2fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c40c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c410:	f7ff ffc1 	bl	800c396 <wait_ready>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <spiselect+0x26>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e002      	b.n	800c424 <spiselect+0x2c>

	despiselect();
 800c41e:	f7ff ffdd 	bl	800c3dc <despiselect>
	return 0;	/* Timeout */
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	bd80      	pop	{r7, pc}
 800c428:	40020400 	.word	0x40020400

0800c42c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c436:	20c8      	movs	r0, #200	; 0xc8
 800c438:	f7ff ff36 	bl	800c2a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c43c:	20ff      	movs	r0, #255	; 0xff
 800c43e:	f7ff ff5d 	bl	800c2fc <xchg_spi>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	2bff      	cmp	r3, #255	; 0xff
 800c44a:	d104      	bne.n	800c456 <rcvr_datablock+0x2a>
 800c44c:	f7ff ff40 	bl	800c2d0 <SPI_Timer_Status>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f2      	bne.n	800c43c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	2bfe      	cmp	r3, #254	; 0xfe
 800c45a:	d001      	beq.n	800c460 <rcvr_datablock+0x34>
 800c45c:	2300      	movs	r3, #0
 800c45e:	e00a      	b.n	800c476 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff ff60 	bl	800c328 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c468:	20ff      	movs	r0, #255	; 0xff
 800c46a:	f7ff ff47 	bl	800c2fc <xchg_spi>
 800c46e:	20ff      	movs	r0, #255	; 0xff
 800c470:	f7ff ff44 	bl	800c2fc <xchg_spi>

	return 1;						/* Function succeeded */
 800c474:	2301      	movs	r3, #1
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c48a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c48e:	f7ff ff82 	bl	800c396 <wait_ready>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <xmit_datablock+0x1e>
 800c498:	2300      	movs	r3, #0
 800c49a:	e01e      	b.n	800c4da <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff ff2c 	bl	800c2fc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2bfd      	cmp	r3, #253	; 0xfd
 800c4a8:	d016      	beq.n	800c4d8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c4aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff ff56 	bl	800c360 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c4b4:	20ff      	movs	r0, #255	; 0xff
 800c4b6:	f7ff ff21 	bl	800c2fc <xchg_spi>
 800c4ba:	20ff      	movs	r0, #255	; 0xff
 800c4bc:	f7ff ff1e 	bl	800c2fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c4c0:	20ff      	movs	r0, #255	; 0xff
 800c4c2:	f7ff ff1b 	bl	800c2fc <xchg_spi>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	f003 031f 	and.w	r3, r3, #31
 800c4d0:	2b05      	cmp	r3, #5
 800c4d2:	d001      	beq.n	800c4d8 <xmit_datablock+0x5a>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e000      	b.n	800c4da <xmit_datablock+0x5c>
	}
	return 1;
 800c4d8:	2301      	movs	r3, #1
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	6039      	str	r1, [r7, #0]
 800c4ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c4ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da0e      	bge.n	800c514 <send_cmd+0x32>
		cmd &= 0x7F;
 800c4f6:	79fb      	ldrb	r3, [r7, #7]
 800c4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c4fe:	2100      	movs	r1, #0
 800c500:	2037      	movs	r0, #55	; 0x37
 800c502:	f7ff ffee 	bl	800c4e2 <send_cmd>
 800c506:	4603      	mov	r3, r0
 800c508:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d901      	bls.n	800c514 <send_cmd+0x32>
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	e051      	b.n	800c5b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	2b0c      	cmp	r3, #12
 800c518:	d008      	beq.n	800c52c <send_cmd+0x4a>
		despiselect();
 800c51a:	f7ff ff5f 	bl	800c3dc <despiselect>
		if (!spiselect()) return 0xFF;
 800c51e:	f7ff ff6b 	bl	800c3f8 <spiselect>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <send_cmd+0x4a>
 800c528:	23ff      	movs	r3, #255	; 0xff
 800c52a:	e045      	b.n	800c5b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c532:	b2db      	uxtb	r3, r3
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff fee1 	bl	800c2fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	0e1b      	lsrs	r3, r3, #24
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	4618      	mov	r0, r3
 800c542:	f7ff fedb 	bl	800c2fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	0c1b      	lsrs	r3, r3, #16
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff fed5 	bl	800c2fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	0a1b      	lsrs	r3, r3, #8
 800c556:	b2db      	uxtb	r3, r3
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff fecf 	bl	800c2fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff feca 	bl	800c2fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <send_cmd+0x94>
 800c572:	2395      	movs	r3, #149	; 0x95
 800c574:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d101      	bne.n	800c580 <send_cmd+0x9e>
 800c57c:	2387      	movs	r3, #135	; 0x87
 800c57e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c580:	7bfb      	ldrb	r3, [r7, #15]
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff feba 	bl	800c2fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b0c      	cmp	r3, #12
 800c58c:	d102      	bne.n	800c594 <send_cmd+0xb2>
 800c58e:	20ff      	movs	r0, #255	; 0xff
 800c590:	f7ff feb4 	bl	800c2fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c594:	230a      	movs	r3, #10
 800c596:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c598:	20ff      	movs	r0, #255	; 0xff
 800c59a:	f7ff feaf 	bl	800c2fc <xchg_spi>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	da05      	bge.n	800c5b6 <send_cmd+0xd4>
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1f0      	bne.n	800c598 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c5b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c5c0:	b590      	push	{r4, r7, lr}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <USER_SPI_initialize+0x14>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e0d6      	b.n	800c782 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c5d4:	4b6d      	ldr	r3, [pc, #436]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <USER_SPI_initialize+0x2a>
 800c5e2:	4b6a      	ldr	r3, [pc, #424]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	e0cb      	b.n	800c782 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800c5ea:	4b69      	ldr	r3, [pc, #420]	; (800c790 <USER_SPI_initialize+0x1d0>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c5f4:	4b66      	ldr	r3, [pc, #408]	; (800c790 <USER_SPI_initialize+0x1d0>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800c5fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c5fe:	230a      	movs	r3, #10
 800c600:	73fb      	strb	r3, [r7, #15]
 800c602:	e005      	b.n	800c610 <USER_SPI_initialize+0x50>
 800c604:	20ff      	movs	r0, #255	; 0xff
 800c606:	f7ff fe79 	bl	800c2fc <xchg_spi>
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	73fb      	strb	r3, [r7, #15]
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1f6      	bne.n	800c604 <USER_SPI_initialize+0x44>

	ty = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c61a:	2100      	movs	r1, #0
 800c61c:	2000      	movs	r0, #0
 800c61e:	f7ff ff60 	bl	800c4e2 <send_cmd>
 800c622:	4603      	mov	r3, r0
 800c624:	2b01      	cmp	r3, #1
 800c626:	f040 808b 	bne.w	800c740 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c62a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c62e:	f7ff fe3b 	bl	800c2a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c636:	2008      	movs	r0, #8
 800c638:	f7ff ff53 	bl	800c4e2 <send_cmd>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d151      	bne.n	800c6e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]
 800c646:	e00d      	b.n	800c664 <USER_SPI_initialize+0xa4>
 800c648:	7bfc      	ldrb	r4, [r7, #15]
 800c64a:	20ff      	movs	r0, #255	; 0xff
 800c64c:	f7ff fe56 	bl	800c2fc <xchg_spi>
 800c650:	4603      	mov	r3, r0
 800c652:	461a      	mov	r2, r3
 800c654:	f107 0310 	add.w	r3, r7, #16
 800c658:	4423      	add	r3, r4
 800c65a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	3301      	adds	r3, #1
 800c662:	73fb      	strb	r3, [r7, #15]
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2b03      	cmp	r3, #3
 800c668:	d9ee      	bls.n	800c648 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c66a:	7abb      	ldrb	r3, [r7, #10]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d167      	bne.n	800c740 <USER_SPI_initialize+0x180>
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	2baa      	cmp	r3, #170	; 0xaa
 800c674:	d164      	bne.n	800c740 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c676:	bf00      	nop
 800c678:	f7ff fe2a 	bl	800c2d0 <SPI_Timer_Status>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d007      	beq.n	800c692 <USER_SPI_initialize+0xd2>
 800c682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c686:	20a9      	movs	r0, #169	; 0xa9
 800c688:	f7ff ff2b 	bl	800c4e2 <send_cmd>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1f2      	bne.n	800c678 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c692:	f7ff fe1d 	bl	800c2d0 <SPI_Timer_Status>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d051      	beq.n	800c740 <USER_SPI_initialize+0x180>
 800c69c:	2100      	movs	r1, #0
 800c69e:	203a      	movs	r0, #58	; 0x3a
 800c6a0:	f7ff ff1f 	bl	800c4e2 <send_cmd>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d14a      	bne.n	800c740 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
 800c6ae:	e00d      	b.n	800c6cc <USER_SPI_initialize+0x10c>
 800c6b0:	7bfc      	ldrb	r4, [r7, #15]
 800c6b2:	20ff      	movs	r0, #255	; 0xff
 800c6b4:	f7ff fe22 	bl	800c2fc <xchg_spi>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f107 0310 	add.w	r3, r7, #16
 800c6c0:	4423      	add	r3, r4
 800c6c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	73fb      	strb	r3, [r7, #15]
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d9ee      	bls.n	800c6b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c6d2:	7a3b      	ldrb	r3, [r7, #8]
 800c6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <USER_SPI_initialize+0x120>
 800c6dc:	230c      	movs	r3, #12
 800c6de:	e000      	b.n	800c6e2 <USER_SPI_initialize+0x122>
 800c6e0:	2304      	movs	r3, #4
 800c6e2:	737b      	strb	r3, [r7, #13]
 800c6e4:	e02c      	b.n	800c740 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	20a9      	movs	r0, #169	; 0xa9
 800c6ea:	f7ff fefa 	bl	800c4e2 <send_cmd>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d804      	bhi.n	800c6fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	737b      	strb	r3, [r7, #13]
 800c6f8:	23a9      	movs	r3, #169	; 0xa9
 800c6fa:	73bb      	strb	r3, [r7, #14]
 800c6fc:	e003      	b.n	800c706 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c6fe:	2301      	movs	r3, #1
 800c700:	737b      	strb	r3, [r7, #13]
 800c702:	2301      	movs	r3, #1
 800c704:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c706:	bf00      	nop
 800c708:	f7ff fde2 	bl	800c2d0 <SPI_Timer_Status>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d007      	beq.n	800c722 <USER_SPI_initialize+0x162>
 800c712:	7bbb      	ldrb	r3, [r7, #14]
 800c714:	2100      	movs	r1, #0
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff fee3 	bl	800c4e2 <send_cmd>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f2      	bne.n	800c708 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c722:	f7ff fdd5 	bl	800c2d0 <SPI_Timer_Status>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d007      	beq.n	800c73c <USER_SPI_initialize+0x17c>
 800c72c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c730:	2010      	movs	r0, #16
 800c732:	f7ff fed6 	bl	800c4e2 <send_cmd>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <USER_SPI_initialize+0x180>
				ty = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c740:	4a14      	ldr	r2, [pc, #80]	; (800c794 <USER_SPI_initialize+0x1d4>)
 800c742:	7b7b      	ldrb	r3, [r7, #13]
 800c744:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c746:	f7ff fe49 	bl	800c3dc <despiselect>

	if (ty) {			/* OK */
 800c74a:	7b7b      	ldrb	r3, [r7, #13]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d012      	beq.n	800c776 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800c750:	4b0f      	ldr	r3, [pc, #60]	; (800c790 <USER_SPI_initialize+0x1d0>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c75a:	4b0d      	ldr	r3, [pc, #52]	; (800c790 <USER_SPI_initialize+0x1d0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0208 	orr.w	r2, r2, #8
 800c762:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c764:	4b09      	ldr	r3, [pc, #36]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	f023 0301 	bic.w	r3, r3, #1
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	4b06      	ldr	r3, [pc, #24]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	e002      	b.n	800c77c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c778:	2201      	movs	r2, #1
 800c77a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c77c:	4b03      	ldr	r3, [pc, #12]	; (800c78c <USER_SPI_initialize+0x1cc>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	b2db      	uxtb	r3, r3
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	bd90      	pop	{r4, r7, pc}
 800c78a:	bf00      	nop
 800c78c:	200000b0 	.word	0x200000b0
 800c790:	20000528 	.word	0x20000528
 800c794:	200006da 	.word	0x200006da

0800c798 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <USER_SPI_status+0x14>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e002      	b.n	800c7b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c7ac:	4b03      	ldr	r3, [pc, #12]	; (800c7bc <USER_SPI_status+0x24>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr
 800c7bc:	200000b0 	.word	0x200000b0

0800c7c0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60b9      	str	r1, [r7, #8]
 800c7c8:	607a      	str	r2, [r7, #4]
 800c7ca:	603b      	str	r3, [r7, #0]
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <USER_SPI_read+0x1c>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <USER_SPI_read+0x20>
 800c7dc:	2304      	movs	r3, #4
 800c7de:	e04d      	b.n	800c87c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c7e0:	4b28      	ldr	r3, [pc, #160]	; (800c884 <USER_SPI_read+0xc4>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <USER_SPI_read+0x32>
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e044      	b.n	800c87c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c7f2:	4b25      	ldr	r3, [pc, #148]	; (800c888 <USER_SPI_read+0xc8>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	f003 0308 	and.w	r3, r3, #8
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d102      	bne.n	800c804 <USER_SPI_read+0x44>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	025b      	lsls	r3, r3, #9
 800c802:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d111      	bne.n	800c82e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	2011      	movs	r0, #17
 800c80e:	f7ff fe68 	bl	800c4e2 <send_cmd>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d129      	bne.n	800c86c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c81c:	68b8      	ldr	r0, [r7, #8]
 800c81e:	f7ff fe05 	bl	800c42c <rcvr_datablock>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d021      	beq.n	800c86c <USER_SPI_read+0xac>
			count = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	e01e      	b.n	800c86c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	2012      	movs	r0, #18
 800c832:	f7ff fe56 	bl	800c4e2 <send_cmd>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d117      	bne.n	800c86c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c83c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c840:	68b8      	ldr	r0, [r7, #8]
 800c842:	f7ff fdf3 	bl	800c42c <rcvr_datablock>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <USER_SPI_read+0xa2>
				buff += 512;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c852:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	3b01      	subs	r3, #1
 800c858:	603b      	str	r3, [r7, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1ed      	bne.n	800c83c <USER_SPI_read+0x7c>
 800c860:	e000      	b.n	800c864 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c862:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c864:	2100      	movs	r1, #0
 800c866:	200c      	movs	r0, #12
 800c868:	f7ff fe3b 	bl	800c4e2 <send_cmd>
		}
	}
	despiselect();
 800c86c:	f7ff fdb6 	bl	800c3dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	bf14      	ite	ne
 800c876:	2301      	movne	r3, #1
 800c878:	2300      	moveq	r3, #0
 800c87a:	b2db      	uxtb	r3, r3
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	200000b0 	.word	0x200000b0
 800c888:	200006da 	.word	0x200006da

0800c88c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <USER_SPI_write+0x1c>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <USER_SPI_write+0x20>
 800c8a8:	2304      	movs	r3, #4
 800c8aa:	e063      	b.n	800c974 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c8ac:	4b33      	ldr	r3, [pc, #204]	; (800c97c <USER_SPI_write+0xf0>)
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d001      	beq.n	800c8be <USER_SPI_write+0x32>
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	e05a      	b.n	800c974 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c8be:	4b2f      	ldr	r3, [pc, #188]	; (800c97c <USER_SPI_write+0xf0>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <USER_SPI_write+0x44>
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	e051      	b.n	800c974 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c8d0:	4b2b      	ldr	r3, [pc, #172]	; (800c980 <USER_SPI_write+0xf4>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	f003 0308 	and.w	r3, r3, #8
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d102      	bne.n	800c8e2 <USER_SPI_write+0x56>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	025b      	lsls	r3, r3, #9
 800c8e0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d110      	bne.n	800c90a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	2018      	movs	r0, #24
 800c8ec:	f7ff fdf9 	bl	800c4e2 <send_cmd>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d136      	bne.n	800c964 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c8f6:	21fe      	movs	r1, #254	; 0xfe
 800c8f8:	68b8      	ldr	r0, [r7, #8]
 800c8fa:	f7ff fdc0 	bl	800c47e <xmit_datablock>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d02f      	beq.n	800c964 <USER_SPI_write+0xd8>
			count = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	603b      	str	r3, [r7, #0]
 800c908:	e02c      	b.n	800c964 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c90a:	4b1d      	ldr	r3, [pc, #116]	; (800c980 <USER_SPI_write+0xf4>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	f003 0306 	and.w	r3, r3, #6
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <USER_SPI_write+0x92>
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	2097      	movs	r0, #151	; 0x97
 800c91a:	f7ff fde2 	bl	800c4e2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	2019      	movs	r0, #25
 800c922:	f7ff fdde 	bl	800c4e2 <send_cmd>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d11b      	bne.n	800c964 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c92c:	21fc      	movs	r1, #252	; 0xfc
 800c92e:	68b8      	ldr	r0, [r7, #8]
 800c930:	f7ff fda5 	bl	800c47e <xmit_datablock>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <USER_SPI_write+0xc4>
				buff += 512;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c940:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	3b01      	subs	r3, #1
 800c946:	603b      	str	r3, [r7, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1ee      	bne.n	800c92c <USER_SPI_write+0xa0>
 800c94e:	e000      	b.n	800c952 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c950:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c952:	21fd      	movs	r1, #253	; 0xfd
 800c954:	2000      	movs	r0, #0
 800c956:	f7ff fd92 	bl	800c47e <xmit_datablock>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <USER_SPI_write+0xd8>
 800c960:	2301      	movs	r3, #1
 800c962:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c964:	f7ff fd3a 	bl	800c3dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	bf14      	ite	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	2300      	moveq	r3, #0
 800c972:	b2db      	uxtb	r3, r3
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	200000b0 	.word	0x200000b0
 800c980:	200006da 	.word	0x200006da

0800c984 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08c      	sub	sp, #48	; 0x30
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	603a      	str	r2, [r7, #0]
 800c98e:	71fb      	strb	r3, [r7, #7]
 800c990:	460b      	mov	r3, r1
 800c992:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <USER_SPI_ioctl+0x1a>
 800c99a:	2304      	movs	r3, #4
 800c99c:	e15a      	b.n	800cc54 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c99e:	4baf      	ldr	r3, [pc, #700]	; (800cc5c <USER_SPI_ioctl+0x2d8>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <USER_SPI_ioctl+0x2c>
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e151      	b.n	800cc54 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c9b6:	79bb      	ldrb	r3, [r7, #6]
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	f200 8136 	bhi.w	800cc2a <USER_SPI_ioctl+0x2a6>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <USER_SPI_ioctl+0x40>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800c9d9 	.word	0x0800c9d9
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800cc2b 	.word	0x0800cc2b
 800c9d0:	0800ca99 	.word	0x0800ca99
 800c9d4:	0800cb8f 	.word	0x0800cb8f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c9d8:	f7ff fd0e 	bl	800c3f8 <spiselect>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 8127 	beq.w	800cc32 <USER_SPI_ioctl+0x2ae>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c9ea:	e122      	b.n	800cc32 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	2009      	movs	r0, #9
 800c9f0:	f7ff fd77 	bl	800c4e2 <send_cmd>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f040 811d 	bne.w	800cc36 <USER_SPI_ioctl+0x2b2>
 800c9fc:	f107 030c 	add.w	r3, r7, #12
 800ca00:	2110      	movs	r1, #16
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fd12 	bl	800c42c <rcvr_datablock>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8113 	beq.w	800cc36 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800ca10:	7b3b      	ldrb	r3, [r7, #12]
 800ca12:	099b      	lsrs	r3, r3, #6
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d111      	bne.n	800ca3e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ca1a:	7d7b      	ldrb	r3, [r7, #21]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	7d3b      	ldrb	r3, [r7, #20]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	4413      	add	r3, r2
 800ca24:	461a      	mov	r2, r3
 800ca26:	7cfb      	ldrb	r3, [r7, #19]
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ca2e:	4413      	add	r3, r2
 800ca30:	3301      	adds	r3, #1
 800ca32:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	029a      	lsls	r2, r3, #10
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	e028      	b.n	800ca90 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ca3e:	7c7b      	ldrb	r3, [r7, #17]
 800ca40:	f003 030f 	and.w	r3, r3, #15
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	7dbb      	ldrb	r3, [r7, #22]
 800ca48:	09db      	lsrs	r3, r3, #7
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	4413      	add	r3, r2
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	7d7b      	ldrb	r3, [r7, #21]
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	f003 0306 	and.w	r3, r3, #6
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	4413      	add	r3, r2
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	3302      	adds	r3, #2
 800ca62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ca66:	7d3b      	ldrb	r3, [r7, #20]
 800ca68:	099b      	lsrs	r3, r3, #6
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	7cfb      	ldrb	r3, [r7, #19]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	441a      	add	r2, r3
 800ca74:	7cbb      	ldrb	r3, [r7, #18]
 800ca76:	029b      	lsls	r3, r3, #10
 800ca78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca7c:	4413      	add	r3, r2
 800ca7e:	3301      	adds	r3, #1
 800ca80:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ca82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca86:	3b09      	subs	r3, #9
 800ca88:	69fa      	ldr	r2, [r7, #28]
 800ca8a:	409a      	lsls	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ca96:	e0ce      	b.n	800cc36 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ca98:	4b71      	ldr	r3, [pc, #452]	; (800cc60 <USER_SPI_ioctl+0x2dc>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d031      	beq.n	800cb08 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800caa4:	2100      	movs	r1, #0
 800caa6:	208d      	movs	r0, #141	; 0x8d
 800caa8:	f7ff fd1b 	bl	800c4e2 <send_cmd>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f040 80c3 	bne.w	800cc3a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800cab4:	20ff      	movs	r0, #255	; 0xff
 800cab6:	f7ff fc21 	bl	800c2fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800caba:	f107 030c 	add.w	r3, r7, #12
 800cabe:	2110      	movs	r1, #16
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fcb3 	bl	800c42c <rcvr_datablock>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 80b6 	beq.w	800cc3a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800cace:	2330      	movs	r3, #48	; 0x30
 800cad0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cad4:	e007      	b.n	800cae6 <USER_SPI_ioctl+0x162>
 800cad6:	20ff      	movs	r0, #255	; 0xff
 800cad8:	f7ff fc10 	bl	800c2fc <xchg_spi>
 800cadc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cae0:	3b01      	subs	r3, #1
 800cae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1f3      	bne.n	800cad6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800caee:	7dbb      	ldrb	r3, [r7, #22]
 800caf0:	091b      	lsrs	r3, r3, #4
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	461a      	mov	r2, r3
 800caf6:	2310      	movs	r3, #16
 800caf8:	fa03 f202 	lsl.w	r2, r3, r2
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800cb06:	e098      	b.n	800cc3a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800cb08:	2100      	movs	r1, #0
 800cb0a:	2009      	movs	r0, #9
 800cb0c:	f7ff fce9 	bl	800c4e2 <send_cmd>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f040 8091 	bne.w	800cc3a <USER_SPI_ioctl+0x2b6>
 800cb18:	f107 030c 	add.w	r3, r7, #12
 800cb1c:	2110      	movs	r1, #16
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff fc84 	bl	800c42c <rcvr_datablock>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f000 8087 	beq.w	800cc3a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800cb2c:	4b4c      	ldr	r3, [pc, #304]	; (800cc60 <USER_SPI_ioctl+0x2dc>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d012      	beq.n	800cb5e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800cb38:	7dbb      	ldrb	r3, [r7, #22]
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800cb40:	7dfa      	ldrb	r2, [r7, #23]
 800cb42:	09d2      	lsrs	r2, r2, #7
 800cb44:	b2d2      	uxtb	r2, r2
 800cb46:	4413      	add	r3, r2
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	7e7b      	ldrb	r3, [r7, #25]
 800cb4c:	099b      	lsrs	r3, r3, #6
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	3b01      	subs	r3, #1
 800cb52:	fa02 f303 	lsl.w	r3, r2, r3
 800cb56:	461a      	mov	r2, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	e013      	b.n	800cb86 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800cb5e:	7dbb      	ldrb	r3, [r7, #22]
 800cb60:	109b      	asrs	r3, r3, #2
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	f003 031f 	and.w	r3, r3, #31
 800cb68:	3301      	adds	r3, #1
 800cb6a:	7dfa      	ldrb	r2, [r7, #23]
 800cb6c:	00d2      	lsls	r2, r2, #3
 800cb6e:	f002 0218 	and.w	r2, r2, #24
 800cb72:	7df9      	ldrb	r1, [r7, #23]
 800cb74:	0949      	lsrs	r1, r1, #5
 800cb76:	b2c9      	uxtb	r1, r1
 800cb78:	440a      	add	r2, r1
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	fb02 f303 	mul.w	r3, r2, r3
 800cb80:	461a      	mov	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800cb8c:	e055      	b.n	800cc3a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800cb8e:	4b34      	ldr	r3, [pc, #208]	; (800cc60 <USER_SPI_ioctl+0x2dc>)
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	f003 0306 	and.w	r3, r3, #6
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d051      	beq.n	800cc3e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800cb9a:	f107 020c 	add.w	r2, r7, #12
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	210b      	movs	r1, #11
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff feee 	bl	800c984 <USER_SPI_ioctl>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d149      	bne.n	800cc42 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800cbae:	7b3b      	ldrb	r3, [r7, #12]
 800cbb0:	099b      	lsrs	r3, r3, #6
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <USER_SPI_ioctl+0x23e>
 800cbb8:	7dbb      	ldrb	r3, [r7, #22]
 800cbba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d041      	beq.n	800cc46 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	623b      	str	r3, [r7, #32]
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800cbd2:	4b23      	ldr	r3, [pc, #140]	; (800cc60 <USER_SPI_ioctl+0x2dc>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	f003 0308 	and.w	r3, r3, #8
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d105      	bne.n	800cbea <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	025b      	lsls	r3, r3, #9
 800cbe2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	025b      	lsls	r3, r3, #9
 800cbe8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800cbea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbec:	2020      	movs	r0, #32
 800cbee:	f7ff fc78 	bl	800c4e2 <send_cmd>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d128      	bne.n	800cc4a <USER_SPI_ioctl+0x2c6>
 800cbf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbfa:	2021      	movs	r0, #33	; 0x21
 800cbfc:	f7ff fc71 	bl	800c4e2 <send_cmd>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d121      	bne.n	800cc4a <USER_SPI_ioctl+0x2c6>
 800cc06:	2100      	movs	r1, #0
 800cc08:	2026      	movs	r0, #38	; 0x26
 800cc0a:	f7ff fc6a 	bl	800c4e2 <send_cmd>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d11a      	bne.n	800cc4a <USER_SPI_ioctl+0x2c6>
 800cc14:	f247 5030 	movw	r0, #30000	; 0x7530
 800cc18:	f7ff fbbd 	bl	800c396 <wait_ready>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d013      	beq.n	800cc4a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800cc22:	2300      	movs	r3, #0
 800cc24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800cc28:	e00f      	b.n	800cc4a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800cc2a:	2304      	movs	r3, #4
 800cc2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cc30:	e00c      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		break;
 800cc32:	bf00      	nop
 800cc34:	e00a      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		break;
 800cc36:	bf00      	nop
 800cc38:	e008      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		break;
 800cc3a:	bf00      	nop
 800cc3c:	e006      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800cc3e:	bf00      	nop
 800cc40:	e004      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800cc42:	bf00      	nop
 800cc44:	e002      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800cc46:	bf00      	nop
 800cc48:	e000      	b.n	800cc4c <USER_SPI_ioctl+0x2c8>
		break;
 800cc4a:	bf00      	nop
	}

	despiselect();
 800cc4c:	f7ff fbc6 	bl	800c3dc <despiselect>

	return res;
 800cc50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3730      	adds	r7, #48	; 0x30
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	200000b0 	.word	0x200000b0
 800cc60:	200006da 	.word	0x200006da

0800cc64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7c1b      	ldrb	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d115      	bne.n	800cca8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc80:	2202      	movs	r2, #2
 800cc82:	2181      	movs	r1, #129	; 0x81
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f004 f8f2 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc94:	2202      	movs	r2, #2
 800cc96:	2101      	movs	r1, #1
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f004 f8e8 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800cca6:	e012      	b.n	800ccce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cca8:	2340      	movs	r3, #64	; 0x40
 800ccaa:	2202      	movs	r2, #2
 800ccac:	2181      	movs	r1, #129	; 0x81
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f004 f8dd 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ccba:	2340      	movs	r3, #64	; 0x40
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f004 f8d4 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ccce:	2308      	movs	r3, #8
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	2182      	movs	r1, #130	; 0x82
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f004 f8ca 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800cce0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cce4:	f004 f9ea 	bl	80110bc <USBD_static_malloc>
 800cce8:	4602      	mov	r2, r0
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d102      	bne.n	800cd00 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	73fb      	strb	r3, [r7, #15]
 800ccfe:	e026      	b.n	800cd4e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd06:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7c1b      	ldrb	r3, [r3, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d109      	bne.n	800cd3e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd34:	2101      	movs	r1, #1
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f004 f98a 	bl	8011050 <USBD_LL_PrepareReceive>
 800cd3c:	e007      	b.n	800cd4e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd44:	2340      	movs	r3, #64	; 0x40
 800cd46:	2101      	movs	r1, #1
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f004 f981 	bl	8011050 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cd68:	2181      	movs	r1, #129	; 0x81
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f004 f8a5 	bl	8010eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cd76:	2101      	movs	r1, #1
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f004 f89e 	bl	8010eba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cd86:	2182      	movs	r1, #130	; 0x82
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f004 f896 	bl	8010eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00e      	beq.n	800cdbc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f004 f990 	bl	80110d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b086      	sub	sp, #24
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cdd6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cddc:	2300      	movs	r3, #0
 800cdde:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d039      	beq.n	800ce64 <USBD_CDC_Setup+0x9e>
 800cdf0:	2b20      	cmp	r3, #32
 800cdf2:	d17f      	bne.n	800cef4 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	88db      	ldrh	r3, [r3, #6]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d029      	beq.n	800ce50 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	b25b      	sxtb	r3, r3
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da11      	bge.n	800ce2a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ce12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	88d2      	ldrh	r2, [r2, #6]
 800ce18:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ce1a:	6939      	ldr	r1, [r7, #16]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	88db      	ldrh	r3, [r3, #6]
 800ce20:	461a      	mov	r2, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 f993 	bl	800e14e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800ce28:	e06b      	b.n	800cf02 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	785a      	ldrb	r2, [r3, #1]
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	88db      	ldrh	r3, [r3, #6]
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ce40:	6939      	ldr	r1, [r7, #16]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	88db      	ldrh	r3, [r3, #6]
 800ce46:	461a      	mov	r2, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f001 f9ae 	bl	800e1aa <USBD_CtlPrepareRx>
    break;
 800ce4e:	e058      	b.n	800cf02 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	7850      	ldrb	r0, [r2, #1]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	4798      	blx	r3
    break;
 800ce62:	e04e      	b.n	800cf02 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	2b0b      	cmp	r3, #11
 800ce6a:	d02e      	beq.n	800ceca <USBD_CDC_Setup+0x104>
 800ce6c:	2b0b      	cmp	r3, #11
 800ce6e:	dc38      	bgt.n	800cee2 <USBD_CDC_Setup+0x11c>
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d002      	beq.n	800ce7a <USBD_CDC_Setup+0xb4>
 800ce74:	2b0a      	cmp	r3, #10
 800ce76:	d014      	beq.n	800cea2 <USBD_CDC_Setup+0xdc>
 800ce78:	e033      	b.n	800cee2 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce80:	2b03      	cmp	r3, #3
 800ce82:	d107      	bne.n	800ce94 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ce84:	f107 030c 	add.w	r3, r7, #12
 800ce88:	2202      	movs	r2, #2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 f95e 	bl	800e14e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ce92:	e02e      	b.n	800cef2 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f001 f8ef 	bl	800e07a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	75fb      	strb	r3, [r7, #23]
      break;
 800cea0:	e027      	b.n	800cef2 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	d107      	bne.n	800cebc <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ceac:	f107 030f 	add.w	r3, r7, #15
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 f94a 	bl	800e14e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ceba:	e01a      	b.n	800cef2 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f001 f8db 	bl	800e07a <USBD_CtlError>
			  ret = USBD_FAIL;
 800cec4:	2302      	movs	r3, #2
 800cec6:	75fb      	strb	r3, [r7, #23]
      break;
 800cec8:	e013      	b.n	800cef2 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d00d      	beq.n	800cef0 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 f8cf 	bl	800e07a <USBD_CtlError>
			  ret = USBD_FAIL;
 800cedc:	2302      	movs	r3, #2
 800cede:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800cee0:	e006      	b.n	800cef0 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f001 f8c8 	bl	800e07a <USBD_CtlError>
      ret = USBD_FAIL;
 800ceea:	2302      	movs	r3, #2
 800ceec:	75fb      	strb	r3, [r7, #23]
      break;
 800ceee:	e000      	b.n	800cef2 <USBD_CDC_Setup+0x12c>
      break;
 800cef0:	bf00      	nop
    }
    break;
 800cef2:	e006      	b.n	800cf02 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 f8bf 	bl	800e07a <USBD_CtlError>
    ret = USBD_FAIL;
 800cefc:	2302      	movs	r3, #2
 800cefe:	75fb      	strb	r3, [r7, #23]
    break;
 800cf00:	bf00      	nop
  }

  return ret;
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf1e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf26:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d03a      	beq.n	800cfa8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cf32:	78fa      	ldrb	r2, [r7, #3]
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	4613      	mov	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	440b      	add	r3, r1
 800cf40:	331c      	adds	r3, #28
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d029      	beq.n	800cf9c <USBD_CDC_DataIn+0x90>
 800cf48:	78fa      	ldrb	r2, [r7, #3]
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	440b      	add	r3, r1
 800cf56:	331c      	adds	r3, #28
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	78f9      	ldrb	r1, [r7, #3]
 800cf5c:	68b8      	ldr	r0, [r7, #8]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	440b      	add	r3, r1
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	4403      	add	r3, r0
 800cf68:	3338      	adds	r3, #56	; 0x38
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf70:	fb03 f301 	mul.w	r3, r3, r1
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d110      	bne.n	800cf9c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	440b      	add	r3, r1
 800cf88:	331c      	adds	r3, #28
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800cf8e:	78f9      	ldrb	r1, [r7, #3]
 800cf90:	2300      	movs	r3, #0
 800cf92:	2200      	movs	r2, #0
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f004 f838 	bl	801100a <USBD_LL_Transmit>
 800cf9a:	e003      	b.n	800cfa4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e000      	b.n	800cfaa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cfa8:	2302      	movs	r3, #2
  }
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cfc4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800cfc6:	78fb      	ldrb	r3, [r7, #3]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f004 f863 	bl	8011096 <USBD_LL_GetRxDataSize>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00d      	beq.n	800cffe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cff6:	4611      	mov	r1, r2
 800cff8:	4798      	blx	r3

    return USBD_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e000      	b.n	800d000 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cffe:	2302      	movs	r3, #2
  }
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d016:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d015      	beq.n	800d04e <USBD_CDC_EP0_RxReady+0x46>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d028:	2bff      	cmp	r3, #255	; 0xff
 800d02a:	d010      	beq.n	800d04e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d03a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d042:	b292      	uxth	r2, r2
 800d044:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	22ff      	movs	r2, #255	; 0xff
 800d04a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2243      	movs	r2, #67	; 0x43
 800d064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d066:	4b03      	ldr	r3, [pc, #12]	; (800d074 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d068:	4618      	mov	r0, r3
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bc80      	pop	{r7}
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	2000013c 	.word	0x2000013c

0800d078 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2243      	movs	r2, #67	; 0x43
 800d084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d086:	4b03      	ldr	r3, [pc, #12]	; (800d094 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bc80      	pop	{r7}
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	200000f8 	.word	0x200000f8

0800d098 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2243      	movs	r2, #67	; 0x43
 800d0a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d0a6:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bc80      	pop	{r7}
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000180 	.word	0x20000180

0800d0b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	220a      	movs	r2, #10
 800d0c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d0c6:	4b03      	ldr	r3, [pc, #12]	; (800d0d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bc80      	pop	{r7}
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	200000b4 	.word	0x200000b4

0800d0d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d005      	beq.n	800d0f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bc80      	pop	{r7}
 800d102:	4770      	bx	lr

0800d104 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d104:	b480      	push	{r7}
 800d106:	b087      	sub	sp, #28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4613      	mov	r3, r2
 800d110:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d118:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d122:	88fa      	ldrh	r2, [r7, #6]
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	371c      	adds	r7, #28
 800d130:	46bd      	mov	sp, r7
 800d132:	bc80      	pop	{r7}
 800d134:	4770      	bx	lr

0800d136 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d136:	b480      	push	{r7}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d146:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	bc80      	pop	{r7}
 800d15a:	4770      	bx	lr

0800d15c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d16a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d172:	2b00      	cmp	r3, #0
 800d174:	d01c      	beq.n	800d1b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d115      	bne.n	800d1ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	2181      	movs	r1, #129	; 0x81
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f003 ff31 	bl	801100a <USBD_LL_Transmit>

      return USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e002      	b.n	800d1b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e000      	b.n	800d1b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d1b0:	2302      	movs	r3, #2
  }
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b084      	sub	sp, #16
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d1c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d017      	beq.n	800d204 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7c1b      	ldrb	r3, [r3, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d109      	bne.n	800d1f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f003 ff31 	bl	8011050 <USBD_LL_PrepareReceive>
 800d1ee:	e007      	b.n	800d200 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1f6:	2340      	movs	r3, #64	; 0x40
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f003 ff28 	bl	8011050 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	e000      	b.n	800d206 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d204:	2302      	movs	r3, #2
  }
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	4613      	mov	r3, r2
 800d21a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d101      	bne.n	800d226 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d222:	2302      	movs	r3, #2
 800d224:	e01a      	b.n	800d25c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d003      	beq.n	800d238 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	79fa      	ldrb	r2, [r7, #7]
 800d252:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f003 fd95 	bl	8010d84 <USBD_LL_Init>

  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d006      	beq.n	800d286 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
 800d284:	e001      	b.n	800d28a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d286:	2302      	movs	r3, #2
 800d288:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	bc80      	pop	{r7}
 800d294:	4770      	bx	lr

0800d296 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f003 fdca 	bl	8010e38 <USBD_LL_Start>

  return USBD_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bc80      	pop	{r7}
 800d2c0:	4770      	bx	lr

0800d2c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00c      	beq.n	800d2f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	78fa      	ldrb	r2, [r7, #3]
 800d2e6:	4611      	mov	r1, r2
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	4611      	mov	r1, r2
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
  return USBD_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fe62 	bl	800e002 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d34c:	461a      	mov	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d35a:	f003 031f 	and.w	r3, r3, #31
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d016      	beq.n	800d390 <USBD_LL_SetupStage+0x6a>
 800d362:	2b02      	cmp	r3, #2
 800d364:	d81c      	bhi.n	800d3a0 <USBD_LL_SetupStage+0x7a>
 800d366:	2b00      	cmp	r3, #0
 800d368:	d002      	beq.n	800d370 <USBD_LL_SetupStage+0x4a>
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d008      	beq.n	800d380 <USBD_LL_SetupStage+0x5a>
 800d36e:	e017      	b.n	800d3a0 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f9c5 	bl	800d708 <USBD_StdDevReq>
    break;
 800d37e:	e01a      	b.n	800d3b6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fa27 	bl	800d7dc <USBD_StdItfReq>
    break;
 800d38e:	e012      	b.n	800d3b6 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fa67 	bl	800d86c <USBD_StdEPReq>
    break;
 800d39e:	e00a      	b.n	800d3b6 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d3a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f003 fda2 	bl	8010ef8 <USBD_LL_StallEP>
    break;
 800d3b4:	bf00      	nop
  }

  return USBD_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d14b      	bne.n	800d46c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d3da:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d134      	bne.n	800d450 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d919      	bls.n	800d426 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	1ad2      	subs	r2, r2, r3
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	68da      	ldr	r2, [r3, #12]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d408:	429a      	cmp	r2, r3
 800d40a:	d203      	bcs.n	800d414 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d410:	b29b      	uxth	r3, r3
 800d412:	e002      	b.n	800d41a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d418:	b29b      	uxth	r3, r3
 800d41a:	461a      	mov	r2, r3
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fee1 	bl	800e1e6 <USBD_CtlContinueRx>
 800d424:	e038      	b.n	800d498 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d105      	bne.n	800d448 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 fede 	bl	800e20a <USBD_CtlSendStatus>
 800d44e:	e023      	b.n	800d498 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d456:	2b05      	cmp	r3, #5
 800d458:	d11e      	bne.n	800d498 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d462:	2100      	movs	r1, #0
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f003 fd47 	bl	8010ef8 <USBD_LL_StallEP>
 800d46a:	e015      	b.n	800d498 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d472:	699b      	ldr	r3, [r3, #24]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00d      	beq.n	800d494 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d108      	bne.n	800d494 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	7afa      	ldrb	r2, [r7, #11]
 800d48c:	4611      	mov	r1, r2
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	4798      	blx	r3
 800d492:	e001      	b.n	800d498 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d494:	2302      	movs	r3, #2
 800d496:	e000      	b.n	800d49a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	607a      	str	r2, [r7, #4]
 800d4ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d17f      	bne.n	800d5b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3314      	adds	r3, #20
 800d4ba:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d15c      	bne.n	800d580 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d915      	bls.n	800d4fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	68da      	ldr	r2, [r3, #12]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	1ad2      	subs	r2, r2, r3
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f000 fe4b 	bl	800e186 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f003 fdaa 	bl	8011050 <USBD_LL_PrepareReceive>
 800d4fc:	e04e      	b.n	800d59c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	6912      	ldr	r2, [r2, #16]
 800d506:	fbb3 f1f2 	udiv	r1, r3, r2
 800d50a:	fb02 f201 	mul.w	r2, r2, r1
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	2b00      	cmp	r3, #0
 800d512:	d11c      	bne.n	800d54e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d316      	bcc.n	800d54e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	689a      	ldr	r2, [r3, #8]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d20f      	bcs.n	800d54e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 fe27 	bl	800e186 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d540:	2300      	movs	r3, #0
 800d542:	2200      	movs	r2, #0
 800d544:	2100      	movs	r1, #0
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f003 fd82 	bl	8011050 <USBD_LL_PrepareReceive>
 800d54c:	e026      	b.n	800d59c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d560:	2b03      	cmp	r3, #3
 800d562:	d105      	bne.n	800d570 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d570:	2180      	movs	r1, #128	; 0x80
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f003 fcc0 	bl	8010ef8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 fe59 	bl	800e230 <USBD_CtlReceiveStatus>
 800d57e:	e00d      	b.n	800d59c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d586:	2b04      	cmp	r3, #4
 800d588:	d004      	beq.n	800d594 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d590:	2b00      	cmp	r3, #0
 800d592:	d103      	bne.n	800d59c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d594:	2180      	movs	r1, #128	; 0x80
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f003 fcae 	bl	8010ef8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d11d      	bne.n	800d5e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff fe81 	bl	800d2ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d5b4:	e015      	b.n	800d5e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00d      	beq.n	800d5de <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d108      	bne.n	800d5de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5d2:	695b      	ldr	r3, [r3, #20]
 800d5d4:	7afa      	ldrb	r2, [r7, #11]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	4798      	blx	r3
 800d5dc:	e001      	b.n	800d5e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d5de:	2302      	movs	r3, #2
 800d5e0:	e000      	b.n	800d5e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5f4:	2340      	movs	r3, #64	; 0x40
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f003 fc37 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2240      	movs	r2, #64	; 0x40
 800d60c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	2200      	movs	r2, #0
 800d614:	2180      	movs	r1, #128	; 0x80
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f003 fc29 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2240      	movs	r2, #64	; 0x40
 800d626:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	6852      	ldr	r2, [r2, #4]
 800d65c:	b2d2      	uxtb	r2, r2
 800d65e:	4611      	mov	r1, r2
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	4798      	blx	r3
  }

  return USBD_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d66e:	b480      	push	{r7}
 800d670:	b083      	sub	sp, #12
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	78fa      	ldrb	r2, [r7, #3]
 800d67e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	bc80      	pop	{r7}
 800d68a:	4770      	bx	lr

0800d68c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bc80      	pop	{r7}
 800d6b2:	4770      	bx	lr

0800d6b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bc80      	pop	{r7}
 800d6d2:	4770      	bx	lr

0800d6d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d10b      	bne.n	800d6fe <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d712:	2300      	movs	r3, #0
 800d714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d71e:	2b40      	cmp	r3, #64	; 0x40
 800d720:	d005      	beq.n	800d72e <USBD_StdDevReq+0x26>
 800d722:	2b40      	cmp	r3, #64	; 0x40
 800d724:	d84f      	bhi.n	800d7c6 <USBD_StdDevReq+0xbe>
 800d726:	2b00      	cmp	r3, #0
 800d728:	d009      	beq.n	800d73e <USBD_StdDevReq+0x36>
 800d72a:	2b20      	cmp	r3, #32
 800d72c:	d14b      	bne.n	800d7c6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	4798      	blx	r3
    break;
 800d73c:	e048      	b.n	800d7d0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	785b      	ldrb	r3, [r3, #1]
 800d742:	2b09      	cmp	r3, #9
 800d744:	d839      	bhi.n	800d7ba <USBD_StdDevReq+0xb2>
 800d746:	a201      	add	r2, pc, #4	; (adr r2, 800d74c <USBD_StdDevReq+0x44>)
 800d748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74c:	0800d79d 	.word	0x0800d79d
 800d750:	0800d7b1 	.word	0x0800d7b1
 800d754:	0800d7bb 	.word	0x0800d7bb
 800d758:	0800d7a7 	.word	0x0800d7a7
 800d75c:	0800d7bb 	.word	0x0800d7bb
 800d760:	0800d77f 	.word	0x0800d77f
 800d764:	0800d775 	.word	0x0800d775
 800d768:	0800d7bb 	.word	0x0800d7bb
 800d76c:	0800d793 	.word	0x0800d793
 800d770:	0800d789 	.word	0x0800d789
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d774:	6839      	ldr	r1, [r7, #0]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f9da 	bl	800db30 <USBD_GetDescriptor>
      break;
 800d77c:	e022      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 facf 	bl	800dd24 <USBD_SetAddress>
      break;
 800d786:	e01d      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 fb0e 	bl	800ddac <USBD_SetConfig>
      break;
 800d790:	e018      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fb97 	bl	800dec8 <USBD_GetConfig>
      break;
 800d79a:	e013      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d79c:	6839      	ldr	r1, [r7, #0]
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fbc7 	bl	800df32 <USBD_GetStatus>
      break;
 800d7a4:	e00e      	b.n	800d7c4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fbf5 	bl	800df98 <USBD_SetFeature>
      break;
 800d7ae:	e009      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fc04 	bl	800dfc0 <USBD_ClrFeature>
      break;
 800d7b8:	e004      	b.n	800d7c4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fc5c 	bl	800e07a <USBD_CtlError>
      break;
 800d7c2:	bf00      	nop
    }
    break;
 800d7c4:	e004      	b.n	800d7d0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fc56 	bl	800e07a <USBD_CtlError>
    break;
 800d7ce:	bf00      	nop
  }

  return ret;
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop

0800d7dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7f2:	2b40      	cmp	r3, #64	; 0x40
 800d7f4:	d005      	beq.n	800d802 <USBD_StdItfReq+0x26>
 800d7f6:	2b40      	cmp	r3, #64	; 0x40
 800d7f8:	d82e      	bhi.n	800d858 <USBD_StdItfReq+0x7c>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d001      	beq.n	800d802 <USBD_StdItfReq+0x26>
 800d7fe:	2b20      	cmp	r3, #32
 800d800:	d12a      	bne.n	800d858 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d808:	3b01      	subs	r3, #1
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d81d      	bhi.n	800d84a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	889b      	ldrh	r3, [r3, #4]
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b01      	cmp	r3, #1
 800d816:	d813      	bhi.n	800d840 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	4798      	blx	r3
 800d826:	4603      	mov	r3, r0
 800d828:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	88db      	ldrh	r3, [r3, #6]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d110      	bne.n	800d854 <USBD_StdItfReq+0x78>
 800d832:	7bfb      	ldrb	r3, [r7, #15]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10d      	bne.n	800d854 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fce6 	bl	800e20a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d83e:	e009      	b.n	800d854 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fc19 	bl	800e07a <USBD_CtlError>
      break;
 800d848:	e004      	b.n	800d854 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fc14 	bl	800e07a <USBD_CtlError>
      break;
 800d852:	e000      	b.n	800d856 <USBD_StdItfReq+0x7a>
      break;
 800d854:	bf00      	nop
    }
    break;
 800d856:	e004      	b.n	800d862 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fc0d 	bl	800e07a <USBD_CtlError>
    break;
 800d860:	bf00      	nop
  }

  return USBD_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	889b      	ldrh	r3, [r3, #4]
 800d87e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d888:	2b40      	cmp	r3, #64	; 0x40
 800d88a:	d007      	beq.n	800d89c <USBD_StdEPReq+0x30>
 800d88c:	2b40      	cmp	r3, #64	; 0x40
 800d88e:	f200 8144 	bhi.w	800db1a <USBD_StdEPReq+0x2ae>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <USBD_StdEPReq+0x40>
 800d896:	2b20      	cmp	r3, #32
 800d898:	f040 813f 	bne.w	800db1a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	4798      	blx	r3
    break;
 800d8aa:	e13b      	b.n	800db24 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8b4:	2b20      	cmp	r3, #32
 800d8b6:	d10a      	bne.n	800d8ce <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	4798      	blx	r3
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	e12b      	b.n	800db26 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	785b      	ldrb	r3, [r3, #1]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d007      	beq.n	800d8e6 <USBD_StdEPReq+0x7a>
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	f300 8119 	bgt.w	800db0e <USBD_StdEPReq+0x2a2>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d072      	beq.n	800d9c6 <USBD_StdEPReq+0x15a>
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d03a      	beq.n	800d95a <USBD_StdEPReq+0xee>
 800d8e4:	e113      	b.n	800db0e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d002      	beq.n	800d8f6 <USBD_StdEPReq+0x8a>
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d015      	beq.n	800d920 <USBD_StdEPReq+0xb4>
 800d8f4:	e02b      	b.n	800d94e <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8f6:	7bbb      	ldrb	r3, [r7, #14]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00c      	beq.n	800d916 <USBD_StdEPReq+0xaa>
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b80      	cmp	r3, #128	; 0x80
 800d900:	d009      	beq.n	800d916 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d902:	7bbb      	ldrb	r3, [r7, #14]
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f003 faf6 	bl	8010ef8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d90c:	2180      	movs	r1, #128	; 0x80
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f003 faf2 	bl	8010ef8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d914:	e020      	b.n	800d958 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 fbae 	bl	800e07a <USBD_CtlError>
        break;
 800d91e:	e01b      	b.n	800d958 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	885b      	ldrh	r3, [r3, #2]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10e      	bne.n	800d946 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d928:	7bbb      	ldrb	r3, [r7, #14]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00b      	beq.n	800d946 <USBD_StdEPReq+0xda>
 800d92e:	7bbb      	ldrb	r3, [r7, #14]
 800d930:	2b80      	cmp	r3, #128	; 0x80
 800d932:	d008      	beq.n	800d946 <USBD_StdEPReq+0xda>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	88db      	ldrh	r3, [r3, #6]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f003 fad9 	bl	8010ef8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fc5f 	bl	800e20a <USBD_CtlSendStatus>

        break;
 800d94c:	e004      	b.n	800d958 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 fb92 	bl	800e07a <USBD_CtlError>
        break;
 800d956:	bf00      	nop
      }
      break;
 800d958:	e0de      	b.n	800db18 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d960:	2b02      	cmp	r3, #2
 800d962:	d002      	beq.n	800d96a <USBD_StdEPReq+0xfe>
 800d964:	2b03      	cmp	r3, #3
 800d966:	d015      	beq.n	800d994 <USBD_StdEPReq+0x128>
 800d968:	e026      	b.n	800d9b8 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d96a:	7bbb      	ldrb	r3, [r7, #14]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <USBD_StdEPReq+0x11e>
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	2b80      	cmp	r3, #128	; 0x80
 800d974:	d009      	beq.n	800d98a <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	4619      	mov	r1, r3
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f003 fabc 	bl	8010ef8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d980:	2180      	movs	r1, #128	; 0x80
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f003 fab8 	bl	8010ef8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d988:	e01c      	b.n	800d9c4 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fb74 	bl	800e07a <USBD_CtlError>
        break;
 800d992:	e017      	b.n	800d9c4 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	885b      	ldrh	r3, [r3, #2]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d112      	bne.n	800d9c2 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f003 fac3 	bl	8010f36 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fc2a 	bl	800e20a <USBD_CtlSendStatus>
        }
        break;
 800d9b6:	e004      	b.n	800d9c2 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800d9b8:	6839      	ldr	r1, [r7, #0]
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fb5d 	bl	800e07a <USBD_CtlError>
        break;
 800d9c0:	e000      	b.n	800d9c4 <USBD_StdEPReq+0x158>
        break;
 800d9c2:	bf00      	nop
      }
      break;
 800d9c4:	e0a8      	b.n	800db18 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d002      	beq.n	800d9d6 <USBD_StdEPReq+0x16a>
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d031      	beq.n	800da38 <USBD_StdEPReq+0x1cc>
 800d9d4:	e095      	b.n	800db02 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9d6:	7bbb      	ldrb	r3, [r7, #14]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d007      	beq.n	800d9ec <USBD_StdEPReq+0x180>
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	2b80      	cmp	r3, #128	; 0x80
 800d9e0:	d004      	beq.n	800d9ec <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fb48 	bl	800e07a <USBD_CtlError>
          break;
 800d9ea:	e08f      	b.n	800db0c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da0b      	bge.n	800da0c <USBD_StdEPReq+0x1a0>
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	3310      	adds	r3, #16
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4413      	add	r3, r2
 800da08:	3304      	adds	r3, #4
 800da0a:	e00a      	b.n	800da22 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
 800da0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800da12:	4613      	mov	r3, r2
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	4413      	add	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	4413      	add	r3, r2
 800da22:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2200      	movs	r2, #0
 800da28:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2202      	movs	r2, #2
 800da2e:	4619      	mov	r1, r3
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fb8c 	bl	800e14e <USBD_CtlSendData>
          break;
 800da36:	e069      	b.n	800db0c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800da38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	da11      	bge.n	800da64 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da40:	7bbb      	ldrb	r3, [r7, #14]
 800da42:	f003 020f 	and.w	r2, r3, #15
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	440b      	add	r3, r1
 800da52:	3318      	adds	r3, #24
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d117      	bne.n	800da8a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fb0c 	bl	800e07a <USBD_CtlError>
            break;
 800da62:	e053      	b.n	800db0c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	f003 020f 	and.w	r2, r3, #15
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	440b      	add	r3, r1
 800da76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d104      	bne.n	800da8a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 faf9 	bl	800e07a <USBD_CtlError>
            break;
 800da88:	e040      	b.n	800db0c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800da8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	da0b      	bge.n	800daaa <USBD_StdEPReq+0x23e>
 800da92:	7bbb      	ldrb	r3, [r7, #14]
 800da94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da98:	4613      	mov	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	3310      	adds	r3, #16
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	4413      	add	r3, r2
 800daa6:	3304      	adds	r3, #4
 800daa8:	e00a      	b.n	800dac0 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	4413      	add	r3, r2
 800dac0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <USBD_StdEPReq+0x262>
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	2b80      	cmp	r3, #128	; 0x80
 800dacc:	d103      	bne.n	800dad6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2200      	movs	r2, #0
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	e00e      	b.n	800daf4 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	4619      	mov	r1, r3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f003 fa4a 	bl	8010f74 <USBD_LL_IsStallEP>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2201      	movs	r2, #1
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	e002      	b.n	800daf4 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2202      	movs	r2, #2
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fb27 	bl	800e14e <USBD_CtlSendData>
          break;
 800db00:	e004      	b.n	800db0c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 fab8 	bl	800e07a <USBD_CtlError>
        break;
 800db0a:	bf00      	nop
      }
      break;
 800db0c:	e004      	b.n	800db18 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fab2 	bl	800e07a <USBD_CtlError>
      break;
 800db16:	bf00      	nop
    }
    break;
 800db18:	e004      	b.n	800db24 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 faac 	bl	800e07a <USBD_CtlError>
    break;
 800db22:	bf00      	nop
  }

  return ret;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	885b      	ldrh	r3, [r3, #2]
 800db3e:	0a1b      	lsrs	r3, r3, #8
 800db40:	b29b      	uxth	r3, r3
 800db42:	3b01      	subs	r3, #1
 800db44:	2b06      	cmp	r3, #6
 800db46:	f200 80c9 	bhi.w	800dcdc <USBD_GetDescriptor+0x1ac>
 800db4a:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <USBD_GetDescriptor+0x20>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800db6d 	.word	0x0800db6d
 800db54:	0800db85 	.word	0x0800db85
 800db58:	0800dbc5 	.word	0x0800dbc5
 800db5c:	0800dcdd 	.word	0x0800dcdd
 800db60:	0800dcdd 	.word	0x0800dcdd
 800db64:	0800dc89 	.word	0x0800dc89
 800db68:	0800dcaf 	.word	0x0800dcaf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	7c12      	ldrb	r2, [r2, #16]
 800db78:	f107 010a 	add.w	r1, r7, #10
 800db7c:	4610      	mov	r0, r2
 800db7e:	4798      	blx	r3
 800db80:	60f8      	str	r0, [r7, #12]
    break;
 800db82:	e0b0      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7c1b      	ldrb	r3, [r3, #16]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10d      	bne.n	800dba8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db94:	f107 020a 	add.w	r2, r7, #10
 800db98:	4610      	mov	r0, r2
 800db9a:	4798      	blx	r3
 800db9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	3301      	adds	r3, #1
 800dba2:	2202      	movs	r2, #2
 800dba4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800dba6:	e09e      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb0:	f107 020a 	add.w	r2, r7, #10
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
 800dbb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	701a      	strb	r2, [r3, #0]
    break;
 800dbc2:	e090      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	885b      	ldrh	r3, [r3, #2]
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	2b05      	cmp	r3, #5
 800dbcc:	d856      	bhi.n	800dc7c <USBD_GetDescriptor+0x14c>
 800dbce:	a201      	add	r2, pc, #4	; (adr r2, 800dbd4 <USBD_GetDescriptor+0xa4>)
 800dbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd4:	0800dbed 	.word	0x0800dbed
 800dbd8:	0800dc05 	.word	0x0800dc05
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc35 	.word	0x0800dc35
 800dbe4:	0800dc4d 	.word	0x0800dc4d
 800dbe8:	0800dc65 	.word	0x0800dc65
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	7c12      	ldrb	r2, [r2, #16]
 800dbf8:	f107 010a 	add.w	r1, r7, #10
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	4798      	blx	r3
 800dc00:	60f8      	str	r0, [r7, #12]
      break;
 800dc02:	e040      	b.n	800dc86 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	7c12      	ldrb	r2, [r2, #16]
 800dc10:	f107 010a 	add.w	r1, r7, #10
 800dc14:	4610      	mov	r0, r2
 800dc16:	4798      	blx	r3
 800dc18:	60f8      	str	r0, [r7, #12]
      break;
 800dc1a:	e034      	b.n	800dc86 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	7c12      	ldrb	r2, [r2, #16]
 800dc28:	f107 010a 	add.w	r1, r7, #10
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3
 800dc30:	60f8      	str	r0, [r7, #12]
      break;
 800dc32:	e028      	b.n	800dc86 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	7c12      	ldrb	r2, [r2, #16]
 800dc40:	f107 010a 	add.w	r1, r7, #10
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
 800dc48:	60f8      	str	r0, [r7, #12]
      break;
 800dc4a:	e01c      	b.n	800dc86 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	7c12      	ldrb	r2, [r2, #16]
 800dc58:	f107 010a 	add.w	r1, r7, #10
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
 800dc60:	60f8      	str	r0, [r7, #12]
      break;
 800dc62:	e010      	b.n	800dc86 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	7c12      	ldrb	r2, [r2, #16]
 800dc70:	f107 010a 	add.w	r1, r7, #10
 800dc74:	4610      	mov	r0, r2
 800dc76:	4798      	blx	r3
 800dc78:	60f8      	str	r0, [r7, #12]
      break;
 800dc7a:	e004      	b.n	800dc86 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f9fb 	bl	800e07a <USBD_CtlError>
      return;
 800dc84:	e04b      	b.n	800dd1e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800dc86:	e02e      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7c1b      	ldrb	r3, [r3, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d109      	bne.n	800dca4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc98:	f107 020a 	add.w	r2, r7, #10
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	4798      	blx	r3
 800dca0:	60f8      	str	r0, [r7, #12]
      break;
 800dca2:	e020      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f9e7 	bl	800e07a <USBD_CtlError>
      return;
 800dcac:	e037      	b.n	800dd1e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7c1b      	ldrb	r3, [r3, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10d      	bne.n	800dcd2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcbe:	f107 020a 	add.w	r2, r7, #10
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	4798      	blx	r3
 800dcc6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3301      	adds	r3, #1
 800dccc:	2207      	movs	r2, #7
 800dcce:	701a      	strb	r2, [r3, #0]
      break;
 800dcd0:	e009      	b.n	800dce6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f9d0 	bl	800e07a <USBD_CtlError>
      return;
 800dcda:	e020      	b.n	800dd1e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f9cb 	bl	800e07a <USBD_CtlError>
    return;
 800dce4:	e01b      	b.n	800dd1e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800dce6:	897b      	ldrh	r3, [r7, #10]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d011      	beq.n	800dd10 <USBD_GetDescriptor+0x1e0>
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	88db      	ldrh	r3, [r3, #6]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00d      	beq.n	800dd10 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	88da      	ldrh	r2, [r3, #6]
 800dcf8:	897b      	ldrh	r3, [r7, #10]
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	bf28      	it	cs
 800dcfe:	4613      	movcs	r3, r2
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800dd04:	897b      	ldrh	r3, [r7, #10]
 800dd06:	461a      	mov	r2, r3
 800dd08:	68f9      	ldr	r1, [r7, #12]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fa1f 	bl	800e14e <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	88db      	ldrh	r3, [r3, #6]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 fa76 	bl	800e20a <USBD_CtlSendStatus>
  }
}
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	889b      	ldrh	r3, [r3, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d130      	bne.n	800dd98 <USBD_SetAddress+0x74>
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	88db      	ldrh	r3, [r3, #6]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d12c      	bne.n	800dd98 <USBD_SetAddress+0x74>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	885b      	ldrh	r3, [r3, #2]
 800dd42:	2b7f      	cmp	r3, #127	; 0x7f
 800dd44:	d828      	bhi.n	800dd98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	885b      	ldrh	r3, [r3, #2]
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d104      	bne.n	800dd66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f98b 	bl	800e07a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd64:	e01d      	b.n	800dda2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	7bfa      	ldrb	r2, [r7, #15]
 800dd6a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f003 f92a 	bl	8010fcc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fa46 	bl	800e20a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d004      	beq.n	800dd8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2202      	movs	r2, #2
 800dd88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd8c:	e009      	b.n	800dda2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd96:	e004      	b.n	800dda2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f96d 	bl	800e07a <USBD_CtlError>
  }
}
 800dda0:	bf00      	nop
 800dda2:	bf00      	nop
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	885b      	ldrh	r3, [r3, #2]
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	4b41      	ldr	r3, [pc, #260]	; (800dec4 <USBD_SetConfig+0x118>)
 800ddbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ddc0:	4b40      	ldr	r3, [pc, #256]	; (800dec4 <USBD_SetConfig+0x118>)
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d904      	bls.n	800ddd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f955 	bl	800e07a <USBD_CtlError>
 800ddd0:	e075      	b.n	800debe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d002      	beq.n	800dde2 <USBD_SetConfig+0x36>
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	d023      	beq.n	800de28 <USBD_SetConfig+0x7c>
 800dde0:	e062      	b.n	800dea8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800dde2:	4b38      	ldr	r3, [pc, #224]	; (800dec4 <USBD_SetConfig+0x118>)
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d01a      	beq.n	800de20 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ddea:	4b36      	ldr	r3, [pc, #216]	; (800dec4 <USBD_SetConfig+0x118>)
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2203      	movs	r2, #3
 800ddf8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ddfc:	4b31      	ldr	r3, [pc, #196]	; (800dec4 <USBD_SetConfig+0x118>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff fa5d 	bl	800d2c2 <USBD_SetClassConfig>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d104      	bne.n	800de18 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 f932 	bl	800e07a <USBD_CtlError>
          return;
 800de16:	e052      	b.n	800debe <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f9f6 	bl	800e20a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800de1e:	e04e      	b.n	800debe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 f9f2 	bl	800e20a <USBD_CtlSendStatus>
      break;
 800de26:	e04a      	b.n	800debe <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de28:	4b26      	ldr	r3, [pc, #152]	; (800dec4 <USBD_SetConfig+0x118>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d112      	bne.n	800de56 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2202      	movs	r2, #2
 800de34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800de38:	4b22      	ldr	r3, [pc, #136]	; (800dec4 <USBD_SetConfig+0x118>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800de42:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <USBD_SetConfig+0x118>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff fa59 	bl	800d300 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f9db 	bl	800e20a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800de54:	e033      	b.n	800debe <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800de56:	4b1b      	ldr	r3, [pc, #108]	; (800dec4 <USBD_SetConfig+0x118>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	429a      	cmp	r2, r3
 800de62:	d01d      	beq.n	800dea0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff fa47 	bl	800d300 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de72:	4b14      	ldr	r3, [pc, #80]	; (800dec4 <USBD_SetConfig+0x118>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800de7c:	4b11      	ldr	r3, [pc, #68]	; (800dec4 <USBD_SetConfig+0x118>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7ff fa1d 	bl	800d2c2 <USBD_SetClassConfig>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d104      	bne.n	800de98 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f8f2 	bl	800e07a <USBD_CtlError>
          return;
 800de96:	e012      	b.n	800debe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f9b6 	bl	800e20a <USBD_CtlSendStatus>
      break;
 800de9e:	e00e      	b.n	800debe <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f9b2 	bl	800e20a <USBD_CtlSendStatus>
      break;
 800dea6:	e00a      	b.n	800debe <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f8e5 	bl	800e07a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800deb0:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <USBD_SetConfig+0x118>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7ff fa22 	bl	800d300 <USBD_ClrClassConfig>
      break;
 800debc:	bf00      	nop
    }
  }
}
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	200006db 	.word	0x200006db

0800dec8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	88db      	ldrh	r3, [r3, #6]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d004      	beq.n	800dee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f8cc 	bl	800e07a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800dee2:	e022      	b.n	800df2a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800deea:	2b02      	cmp	r3, #2
 800deec:	dc02      	bgt.n	800def4 <USBD_GetConfig+0x2c>
 800deee:	2b00      	cmp	r3, #0
 800def0:	dc03      	bgt.n	800defa <USBD_GetConfig+0x32>
 800def2:	e015      	b.n	800df20 <USBD_GetConfig+0x58>
 800def4:	2b03      	cmp	r3, #3
 800def6:	d00b      	beq.n	800df10 <USBD_GetConfig+0x48>
 800def8:	e012      	b.n	800df20 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3308      	adds	r3, #8
 800df04:	2201      	movs	r2, #1
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f920 	bl	800e14e <USBD_CtlSendData>
      break;
 800df0e:	e00c      	b.n	800df2a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3304      	adds	r3, #4
 800df14:	2201      	movs	r2, #1
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 f918 	bl	800e14e <USBD_CtlSendData>
      break;
 800df1e:	e004      	b.n	800df2a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f8a9 	bl	800e07a <USBD_CtlError>
      break;
 800df28:	bf00      	nop
}
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b082      	sub	sp, #8
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df42:	3b01      	subs	r3, #1
 800df44:	2b02      	cmp	r3, #2
 800df46:	d81e      	bhi.n	800df86 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	88db      	ldrh	r3, [r3, #6]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d004      	beq.n	800df5a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800df50:	6839      	ldr	r1, [r7, #0]
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f891 	bl	800e07a <USBD_CtlError>
      break;
 800df58:	e01a      	b.n	800df90 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	f043 0202 	orr.w	r2, r3, #2
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	330c      	adds	r3, #12
 800df7a:	2202      	movs	r2, #2
 800df7c:	4619      	mov	r1, r3
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 f8e5 	bl	800e14e <USBD_CtlSendData>
    break;
 800df84:	e004      	b.n	800df90 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f876 	bl	800e07a <USBD_CtlError>
    break;
 800df8e:	bf00      	nop
  }
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	885b      	ldrh	r3, [r3, #2]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d106      	bne.n	800dfb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2201      	movs	r2, #1
 800dfae:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f929 	bl	800e20a <USBD_CtlSendStatus>
  }

}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	d80b      	bhi.n	800dfee <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d10c      	bne.n	800dff8 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f90f 	bl	800e20a <USBD_CtlSendStatus>
    }
    break;
 800dfec:	e004      	b.n	800dff8 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f842 	bl	800e07a <USBD_CtlError>
    break;
 800dff6:	e000      	b.n	800dffa <USBD_ClrFeature+0x3a>
    break;
 800dff8:	bf00      	nop
  }
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e002:	b480      	push	{r7}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	781a      	ldrb	r2, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	785a      	ldrb	r2, [r3, #1]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	3302      	adds	r3, #2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	b29a      	uxth	r2, r3
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	3303      	adds	r3, #3
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4413      	add	r3, r2
 800e032:	b29a      	uxth	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	3304      	adds	r3, #4
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	3305      	adds	r3, #5
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	b29b      	uxth	r3, r3
 800e048:	021b      	lsls	r3, r3, #8
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	4413      	add	r3, r2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	3306      	adds	r3, #6
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	3307      	adds	r3, #7
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	b29b      	uxth	r3, r3
 800e064:	021b      	lsls	r3, r3, #8
 800e066:	b29b      	uxth	r3, r3
 800e068:	4413      	add	r3, r2
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	80da      	strh	r2, [r3, #6]

}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	bc80      	pop	{r7}
 800e078:	4770      	bx	lr

0800e07a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e084:	2180      	movs	r1, #128	; 0x80
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f002 ff36 	bl	8010ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e08c:	2100      	movs	r1, #0
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f002 ff32 	bl	8010ef8 <USBD_LL_StallEP>
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d032      	beq.n	800e118 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f000 f834 	bl	800e120 <USBD_GetLen>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e0c6:	7dfb      	ldrb	r3, [r7, #23]
 800e0c8:	1c5a      	adds	r2, r3, #1
 800e0ca:	75fa      	strb	r2, [r7, #23]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	7812      	ldrb	r2, [r2, #0]
 800e0d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e0d8:	7dfb      	ldrb	r3, [r7, #23]
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	75fa      	strb	r2, [r7, #23]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e0e8:	e012      	b.n	800e110 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	60fa      	str	r2, [r7, #12]
 800e0f0:	7dfa      	ldrb	r2, [r7, #23]
 800e0f2:	1c51      	adds	r1, r2, #1
 800e0f4:	75f9      	strb	r1, [r7, #23]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	440a      	add	r2, r1
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e100:	7dfb      	ldrb	r3, [r7, #23]
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	75fa      	strb	r2, [r7, #23]
 800e106:	461a      	mov	r2, r3
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	4413      	add	r3, r2
 800e10c:	2200      	movs	r2, #0
 800e10e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e8      	bne.n	800e0ea <USBD_GetString+0x4e>
    }
  }
}
 800e118:	bf00      	nop
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e12c:	e005      	b.n	800e13a <USBD_GetLen+0x1a>
    {
        len++;
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	3301      	adds	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	3301      	adds	r3, #1
 800e138:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1f5      	bne.n	800e12e <USBD_GetLen+0xe>
    }

    return len;
 800e142:	7bfb      	ldrb	r3, [r7, #15]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	bc80      	pop	{r7}
 800e14c:	4770      	bx	lr

0800e14e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b084      	sub	sp, #16
 800e152:	af00      	add	r7, sp, #0
 800e154:	60f8      	str	r0, [r7, #12]
 800e156:	60b9      	str	r1, [r7, #8]
 800e158:	4613      	mov	r3, r2
 800e15a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2202      	movs	r2, #2
 800e160:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e164:	88fa      	ldrh	r2, [r7, #6]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e16a:	88fa      	ldrh	r2, [r7, #6]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e170:	88fb      	ldrh	r3, [r7, #6]
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	2100      	movs	r1, #0
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f002 ff47 	bl	801100a <USBD_LL_Transmit>

  return USBD_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e186:	b580      	push	{r7, lr}
 800e188:	b084      	sub	sp, #16
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	60f8      	str	r0, [r7, #12]
 800e18e:	60b9      	str	r1, [r7, #8]
 800e190:	4613      	mov	r3, r2
 800e192:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e194:	88fb      	ldrh	r3, [r7, #6]
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	2100      	movs	r1, #0
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f002 ff35 	bl	801100a <USBD_LL_Transmit>

  return USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e1c0:	88fa      	ldrh	r2, [r7, #6]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e1c8:	88fa      	ldrh	r2, [r7, #6]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e1d0:	88fb      	ldrh	r3, [r7, #6]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f002 ff3a 	bl	8011050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	60b9      	str	r1, [r7, #8]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1f4:	88fb      	ldrh	r3, [r7, #6]
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f002 ff28 	bl	8011050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2204      	movs	r2, #4
 800e216:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e21a:	2300      	movs	r3, #0
 800e21c:	2200      	movs	r2, #0
 800e21e:	2100      	movs	r1, #0
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f002 fef2 	bl	801100a <USBD_LL_Transmit>

  return USBD_OK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2205      	movs	r2, #5
 800e23c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e240:	2300      	movs	r3, #0
 800e242:	2200      	movs	r2, #0
 800e244:	2100      	movs	r1, #0
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f002 ff02 	bl	8011050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
	...

0800e258 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	4a08      	ldr	r2, [pc, #32]	; (800e288 <disk_status+0x30>)
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	79fa      	ldrb	r2, [r7, #7]
 800e270:	4905      	ldr	r1, [pc, #20]	; (800e288 <disk_status+0x30>)
 800e272:	440a      	add	r2, r1
 800e274:	7a12      	ldrb	r2, [r2, #8]
 800e276:	4610      	mov	r0, r2
 800e278:	4798      	blx	r3
 800e27a:	4603      	mov	r3, r0
 800e27c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	20000704 	.word	0x20000704

0800e28c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	4603      	mov	r3, r0
 800e294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	4a0d      	ldr	r2, [pc, #52]	; (800e2d4 <disk_initialize+0x48>)
 800e29e:	5cd3      	ldrb	r3, [r2, r3]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d111      	bne.n	800e2c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	4a0b      	ldr	r2, [pc, #44]	; (800e2d4 <disk_initialize+0x48>)
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	4a09      	ldr	r2, [pc, #36]	; (800e2d4 <disk_initialize+0x48>)
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	79fa      	ldrb	r2, [r7, #7]
 800e2ba:	4906      	ldr	r1, [pc, #24]	; (800e2d4 <disk_initialize+0x48>)
 800e2bc:	440a      	add	r2, r1
 800e2be:	7a12      	ldrb	r2, [r2, #8]
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	4798      	blx	r3
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20000704 	.word	0x20000704

0800e2d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e2d8:	b590      	push	{r4, r7, lr}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	607a      	str	r2, [r7, #4]
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	4a0a      	ldr	r2, [pc, #40]	; (800e314 <disk_read+0x3c>)
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	689c      	ldr	r4, [r3, #8]
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
 800e2f6:	4a07      	ldr	r2, [pc, #28]	; (800e314 <disk_read+0x3c>)
 800e2f8:	4413      	add	r3, r2
 800e2fa:	7a18      	ldrb	r0, [r3, #8]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	47a0      	blx	r4
 800e304:	4603      	mov	r3, r0
 800e306:	75fb      	strb	r3, [r7, #23]
  return res;
 800e308:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	371c      	adds	r7, #28
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd90      	pop	{r4, r7, pc}
 800e312:	bf00      	nop
 800e314:	20000704 	.word	0x20000704

0800e318 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b087      	sub	sp, #28
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
 800e322:	603b      	str	r3, [r7, #0]
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	4a0a      	ldr	r2, [pc, #40]	; (800e354 <disk_write+0x3c>)
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	68dc      	ldr	r4, [r3, #12]
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	4a07      	ldr	r2, [pc, #28]	; (800e354 <disk_write+0x3c>)
 800e338:	4413      	add	r3, r2
 800e33a:	7a18      	ldrb	r0, [r3, #8]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	68b9      	ldr	r1, [r7, #8]
 800e342:	47a0      	blx	r4
 800e344:	4603      	mov	r3, r0
 800e346:	75fb      	strb	r3, [r7, #23]
  return res;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	371c      	adds	r7, #28
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd90      	pop	{r4, r7, pc}
 800e352:	bf00      	nop
 800e354:	20000704 	.word	0x20000704

0800e358 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	603a      	str	r2, [r7, #0]
 800e362:	71fb      	strb	r3, [r7, #7]
 800e364:	460b      	mov	r3, r1
 800e366:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	4a09      	ldr	r2, [pc, #36]	; (800e390 <disk_ioctl+0x38>)
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	79fa      	ldrb	r2, [r7, #7]
 800e376:	4906      	ldr	r1, [pc, #24]	; (800e390 <disk_ioctl+0x38>)
 800e378:	440a      	add	r2, r1
 800e37a:	7a10      	ldrb	r0, [r2, #8]
 800e37c:	79b9      	ldrb	r1, [r7, #6]
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	4798      	blx	r3
 800e382:	4603      	mov	r3, r0
 800e384:	73fb      	strb	r3, [r7, #15]
  return res;
 800e386:	7bfb      	ldrb	r3, [r7, #15]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	20000704 	.word	0x20000704

0800e394 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e3a4:	89fb      	ldrh	r3, [r7, #14]
 800e3a6:	021b      	lsls	r3, r3, #8
 800e3a8:	b21a      	sxth	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	b21b      	sxth	r3, r3
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	b21b      	sxth	r3, r3
 800e3b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e3b6:	89fb      	ldrh	r3, [r7, #14]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bc80      	pop	{r7}
 800e3c0:	4770      	bx	lr

0800e3c2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	b085      	sub	sp, #20
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3303      	adds	r3, #3
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	021b      	lsls	r3, r3, #8
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	3202      	adds	r2, #2
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	021b      	lsls	r3, r3, #8
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	3201      	adds	r2, #1
 800e3e8:	7812      	ldrb	r2, [r2, #0]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	021b      	lsls	r3, r3, #8
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
	return rv;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	bc80      	pop	{r7}
 800e404:	4770      	bx	lr

0800e406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e406:	b480      	push	{r7}
 800e408:	b083      	sub	sp, #12
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
 800e40e:	460b      	mov	r3, r1
 800e410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	1c5a      	adds	r2, r3, #1
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	887a      	ldrh	r2, [r7, #2]
 800e41a:	b2d2      	uxtb	r2, r2
 800e41c:	701a      	strb	r2, [r3, #0]
 800e41e:	887b      	ldrh	r3, [r7, #2]
 800e420:	0a1b      	lsrs	r3, r3, #8
 800e422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	1c5a      	adds	r2, r3, #1
 800e428:	607a      	str	r2, [r7, #4]
 800e42a:	887a      	ldrh	r2, [r7, #2]
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
}
 800e430:	bf00      	nop
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	bc80      	pop	{r7}
 800e438:	4770      	bx	lr

0800e43a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e43a:	b480      	push	{r7}
 800e43c:	b083      	sub	sp, #12
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	607a      	str	r2, [r7, #4]
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	b2d2      	uxtb	r2, r2
 800e44e:	701a      	strb	r2, [r3, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	b2d2      	uxtb	r2, r2
 800e460:	701a      	strb	r2, [r3, #0]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	0a1b      	lsrs	r3, r3, #8
 800e466:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	b2d2      	uxtb	r2, r2
 800e472:	701a      	strb	r2, [r3, #0]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	0a1b      	lsrs	r3, r3, #8
 800e478:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	683a      	ldr	r2, [r7, #0]
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]
}
 800e486:	bf00      	nop
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bc80      	pop	{r7}
 800e48e:	4770      	bx	lr

0800e490 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00d      	beq.n	800e4c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	1c53      	adds	r3, r2, #1
 800e4ae:	613b      	str	r3, [r7, #16]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	1c59      	adds	r1, r3, #1
 800e4b4:	6179      	str	r1, [r7, #20]
 800e4b6:	7812      	ldrb	r2, [r2, #0]
 800e4b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1f1      	bne.n	800e4aa <mem_cpy+0x1a>
	}
}
 800e4c6:	bf00      	nop
 800e4c8:	371c      	adds	r7, #28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bc80      	pop	{r7}
 800e4ce:	4770      	bx	lr

0800e4d0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e4d0:	b480      	push	{r7}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	617a      	str	r2, [r7, #20]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1f3      	bne.n	800e4e0 <mem_set+0x10>
}
 800e4f8:	bf00      	nop
 800e4fa:	bf00      	nop
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bc80      	pop	{r7}
 800e502:	4770      	bx	lr

0800e504 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e504:	b480      	push	{r7}
 800e506:	b089      	sub	sp, #36	; 0x24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	1c5a      	adds	r2, r3, #1
 800e520:	61fa      	str	r2, [r7, #28]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	4619      	mov	r1, r3
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	61ba      	str	r2, [r7, #24]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	1acb      	subs	r3, r1, r3
 800e530:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3b01      	subs	r3, #1
 800e536:	607b      	str	r3, [r7, #4]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <mem_cmp+0x40>
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d0eb      	beq.n	800e51c <mem_cmp+0x18>

	return r;
 800e544:	697b      	ldr	r3, [r7, #20]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3724      	adds	r7, #36	; 0x24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bc80      	pop	{r7}
 800e54e:	4770      	bx	lr

0800e550 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e55a:	e002      	b.n	800e562 <chk_chr+0x12>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3301      	adds	r3, #1
 800e560:	607b      	str	r3, [r7, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d005      	beq.n	800e576 <chk_chr+0x26>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	461a      	mov	r2, r3
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	4293      	cmp	r3, r2
 800e574:	d1f2      	bne.n	800e55c <chk_chr+0xc>
	return *str;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	781b      	ldrb	r3, [r3, #0]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	bc80      	pop	{r7}
 800e582:	4770      	bx	lr

0800e584 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e58e:	2300      	movs	r3, #0
 800e590:	60bb      	str	r3, [r7, #8]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	60fb      	str	r3, [r7, #12]
 800e596:	e029      	b.n	800e5ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e598:	4a26      	ldr	r2, [pc, #152]	; (800e634 <chk_lock+0xb0>)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	011b      	lsls	r3, r3, #4
 800e59e:	4413      	add	r3, r2
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d01d      	beq.n	800e5e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5a6:	4a23      	ldr	r2, [pc, #140]	; (800e634 <chk_lock+0xb0>)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	011b      	lsls	r3, r3, #4
 800e5ac:	4413      	add	r3, r2
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d116      	bne.n	800e5e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e5b8:	4a1e      	ldr	r2, [pc, #120]	; (800e634 <chk_lock+0xb0>)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	011b      	lsls	r3, r3, #4
 800e5be:	4413      	add	r3, r2
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d10c      	bne.n	800e5e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e5cc:	4a19      	ldr	r2, [pc, #100]	; (800e634 <chk_lock+0xb0>)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	011b      	lsls	r3, r3, #4
 800e5d2:	4413      	add	r3, r2
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d102      	bne.n	800e5e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e5e0:	e007      	b.n	800e5f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d9d2      	bls.n	800e598 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	d109      	bne.n	800e60c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d102      	bne.n	800e604 <chk_lock+0x80>
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	2b02      	cmp	r3, #2
 800e602:	d101      	bne.n	800e608 <chk_lock+0x84>
 800e604:	2300      	movs	r3, #0
 800e606:	e010      	b.n	800e62a <chk_lock+0xa6>
 800e608:	2312      	movs	r3, #18
 800e60a:	e00e      	b.n	800e62a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d108      	bne.n	800e624 <chk_lock+0xa0>
 800e612:	4a08      	ldr	r2, [pc, #32]	; (800e634 <chk_lock+0xb0>)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	011b      	lsls	r3, r3, #4
 800e618:	4413      	add	r3, r2
 800e61a:	330c      	adds	r3, #12
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e622:	d101      	bne.n	800e628 <chk_lock+0xa4>
 800e624:	2310      	movs	r3, #16
 800e626:	e000      	b.n	800e62a <chk_lock+0xa6>
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3714      	adds	r7, #20
 800e62e:	46bd      	mov	sp, r7
 800e630:	bc80      	pop	{r7}
 800e632:	4770      	bx	lr
 800e634:	200006e4 	.word	0x200006e4

0800e638 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e63e:	2300      	movs	r3, #0
 800e640:	607b      	str	r3, [r7, #4]
 800e642:	e002      	b.n	800e64a <enq_lock+0x12>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3301      	adds	r3, #1
 800e648:	607b      	str	r3, [r7, #4]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d806      	bhi.n	800e65e <enq_lock+0x26>
 800e650:	4a08      	ldr	r2, [pc, #32]	; (800e674 <enq_lock+0x3c>)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	011b      	lsls	r3, r3, #4
 800e656:	4413      	add	r3, r2
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1f2      	bne.n	800e644 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b02      	cmp	r3, #2
 800e662:	bf14      	ite	ne
 800e664:	2301      	movne	r3, #1
 800e666:	2300      	moveq	r3, #0
 800e668:	b2db      	uxtb	r3, r3
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	bc80      	pop	{r7}
 800e672:	4770      	bx	lr
 800e674:	200006e4 	.word	0x200006e4

0800e678 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	e01f      	b.n	800e6c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e688:	4a41      	ldr	r2, [pc, #260]	; (800e790 <inc_lock+0x118>)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	4413      	add	r3, r2
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d113      	bne.n	800e6c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e69a:	4a3d      	ldr	r2, [pc, #244]	; (800e790 <inc_lock+0x118>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	011b      	lsls	r3, r3, #4
 800e6a0:	4413      	add	r3, r2
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d109      	bne.n	800e6c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e6ae:	4a38      	ldr	r2, [pc, #224]	; (800e790 <inc_lock+0x118>)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	011b      	lsls	r3, r3, #4
 800e6b4:	4413      	add	r3, r2
 800e6b6:	3308      	adds	r3, #8
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d006      	beq.n	800e6d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d9dc      	bls.n	800e688 <inc_lock+0x10>
 800e6ce:	e000      	b.n	800e6d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e6d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b02      	cmp	r3, #2
 800e6d6:	d132      	bne.n	800e73e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	e002      	b.n	800e6e4 <inc_lock+0x6c>
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d806      	bhi.n	800e6f8 <inc_lock+0x80>
 800e6ea:	4a29      	ldr	r2, [pc, #164]	; (800e790 <inc_lock+0x118>)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	011b      	lsls	r3, r3, #4
 800e6f0:	4413      	add	r3, r2
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1f2      	bne.n	800e6de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d101      	bne.n	800e702 <inc_lock+0x8a>
 800e6fe:	2300      	movs	r3, #0
 800e700:	e040      	b.n	800e784 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	4922      	ldr	r1, [pc, #136]	; (800e790 <inc_lock+0x118>)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	011b      	lsls	r3, r3, #4
 800e70c:	440b      	add	r3, r1
 800e70e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689a      	ldr	r2, [r3, #8]
 800e714:	491e      	ldr	r1, [pc, #120]	; (800e790 <inc_lock+0x118>)
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	011b      	lsls	r3, r3, #4
 800e71a:	440b      	add	r3, r1
 800e71c:	3304      	adds	r3, #4
 800e71e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	695a      	ldr	r2, [r3, #20]
 800e724:	491a      	ldr	r1, [pc, #104]	; (800e790 <inc_lock+0x118>)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	011b      	lsls	r3, r3, #4
 800e72a:	440b      	add	r3, r1
 800e72c:	3308      	adds	r3, #8
 800e72e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e730:	4a17      	ldr	r2, [pc, #92]	; (800e790 <inc_lock+0x118>)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	4413      	add	r3, r2
 800e738:	330c      	adds	r3, #12
 800e73a:	2200      	movs	r2, #0
 800e73c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d009      	beq.n	800e758 <inc_lock+0xe0>
 800e744:	4a12      	ldr	r2, [pc, #72]	; (800e790 <inc_lock+0x118>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	4413      	add	r3, r2
 800e74c:	330c      	adds	r3, #12
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <inc_lock+0xe0>
 800e754:	2300      	movs	r3, #0
 800e756:	e015      	b.n	800e784 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d108      	bne.n	800e770 <inc_lock+0xf8>
 800e75e:	4a0c      	ldr	r2, [pc, #48]	; (800e790 <inc_lock+0x118>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	011b      	lsls	r3, r3, #4
 800e764:	4413      	add	r3, r2
 800e766:	330c      	adds	r3, #12
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	3301      	adds	r3, #1
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	e001      	b.n	800e774 <inc_lock+0xfc>
 800e770:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e774:	4906      	ldr	r1, [pc, #24]	; (800e790 <inc_lock+0x118>)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	440b      	add	r3, r1
 800e77c:	330c      	adds	r3, #12
 800e77e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	3301      	adds	r3, #1
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	bc80      	pop	{r7}
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	200006e4 	.word	0x200006e4

0800e794 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	607b      	str	r3, [r7, #4]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d825      	bhi.n	800e7f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e7a8:	4a16      	ldr	r2, [pc, #88]	; (800e804 <dec_lock+0x70>)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	011b      	lsls	r3, r3, #4
 800e7ae:	4413      	add	r3, r2
 800e7b0:	330c      	adds	r3, #12
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e7b6:	89fb      	ldrh	r3, [r7, #14]
 800e7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7bc:	d101      	bne.n	800e7c2 <dec_lock+0x2e>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e7c2:	89fb      	ldrh	r3, [r7, #14]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d002      	beq.n	800e7ce <dec_lock+0x3a>
 800e7c8:	89fb      	ldrh	r3, [r7, #14]
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e7ce:	4a0d      	ldr	r2, [pc, #52]	; (800e804 <dec_lock+0x70>)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	4413      	add	r3, r2
 800e7d6:	330c      	adds	r3, #12
 800e7d8:	89fa      	ldrh	r2, [r7, #14]
 800e7da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e7dc:	89fb      	ldrh	r3, [r7, #14]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <dec_lock+0x5a>
 800e7e2:	4a08      	ldr	r2, [pc, #32]	; (800e804 <dec_lock+0x70>)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	4413      	add	r3, r2
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	737b      	strb	r3, [r7, #13]
 800e7f2:	e001      	b.n	800e7f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e7f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bc80      	pop	{r7}
 800e802:	4770      	bx	lr
 800e804:	200006e4 	.word	0x200006e4

0800e808 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e010      	b.n	800e838 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e816:	4a0d      	ldr	r2, [pc, #52]	; (800e84c <clear_lock+0x44>)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	011b      	lsls	r3, r3, #4
 800e81c:	4413      	add	r3, r2
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d105      	bne.n	800e832 <clear_lock+0x2a>
 800e826:	4a09      	ldr	r2, [pc, #36]	; (800e84c <clear_lock+0x44>)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	011b      	lsls	r3, r3, #4
 800e82c:	4413      	add	r3, r2
 800e82e:	2200      	movs	r2, #0
 800e830:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d9eb      	bls.n	800e816 <clear_lock+0xe>
	}
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	bc80      	pop	{r7}
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	200006e4 	.word	0x200006e4

0800e850 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	78db      	ldrb	r3, [r3, #3]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d034      	beq.n	800e8ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	7858      	ldrb	r0, [r3, #1]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e874:	2301      	movs	r3, #1
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	f7ff fd4e 	bl	800e318 <disk_write>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d002      	beq.n	800e888 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e882:	2301      	movs	r3, #1
 800e884:	73fb      	strb	r3, [r7, #15]
 800e886:	e022      	b.n	800e8ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	1ad2      	subs	r2, r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d217      	bcs.n	800e8ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	789b      	ldrb	r3, [r3, #2]
 800e8a2:	613b      	str	r3, [r7, #16]
 800e8a4:	e010      	b.n	800e8c8 <sync_window+0x78>
					wsect += fs->fsize;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7858      	ldrb	r0, [r3, #1]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	697a      	ldr	r2, [r7, #20]
 800e8be:	f7ff fd2b 	bl	800e318 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	613b      	str	r3, [r7, #16]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d8eb      	bhi.n	800e8a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d01b      	beq.n	800e928 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7ff ffad 	bl	800e850 <sync_window>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d113      	bne.n	800e928 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	7858      	ldrb	r0, [r3, #1]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e90a:	2301      	movs	r3, #1
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	f7ff fce3 	bl	800e2d8 <disk_read>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d004      	beq.n	800e922 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e91c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e91e:	2301      	movs	r3, #1
 800e920:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
	...

0800e934 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7ff ff87 	bl	800e850 <sync_window>
 800e942:	4603      	mov	r3, r0
 800e944:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e946:	7bfb      	ldrb	r3, [r7, #15]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d158      	bne.n	800e9fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2b03      	cmp	r3, #3
 800e952:	d148      	bne.n	800e9e6 <sync_fs+0xb2>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	791b      	ldrb	r3, [r3, #4]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d144      	bne.n	800e9e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3330      	adds	r3, #48	; 0x30
 800e960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e964:	2100      	movs	r1, #0
 800e966:	4618      	mov	r0, r3
 800e968:	f7ff fdb2 	bl	800e4d0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3330      	adds	r3, #48	; 0x30
 800e970:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e974:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fd44 	bl	800e406 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	3330      	adds	r3, #48	; 0x30
 800e982:	4921      	ldr	r1, [pc, #132]	; (800ea08 <sync_fs+0xd4>)
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff fd58 	bl	800e43a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3330      	adds	r3, #48	; 0x30
 800e98e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e992:	491e      	ldr	r1, [pc, #120]	; (800ea0c <sync_fs+0xd8>)
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff fd50 	bl	800e43a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	3330      	adds	r3, #48	; 0x30
 800e99e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	f7ff fd46 	bl	800e43a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3330      	adds	r3, #48	; 0x30
 800e9b2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4610      	mov	r0, r2
 800e9be:	f7ff fd3c 	bl	800e43a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	69db      	ldr	r3, [r3, #28]
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	7858      	ldrb	r0, [r3, #1]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f7ff fc9c 	bl	800e318 <disk_write>
			fs->fsi_flag = 0;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	785b      	ldrb	r3, [r3, #1]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fcb2 	bl	800e358 <disk_ioctl>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <sync_fs+0xca>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	41615252 	.word	0x41615252
 800ea0c:	61417272 	.word	0x61417272

0800ea10 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	3b02      	subs	r3, #2
 800ea1e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	3b02      	subs	r3, #2
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d301      	bcc.n	800ea30 <clust2sect+0x20>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	e008      	b.n	800ea42 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	895b      	ldrh	r3, [r3, #10]
 800ea34:	461a      	mov	r2, r3
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	fb03 f202 	mul.w	r2, r3, r2
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea40:	4413      	add	r3, r2
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	370c      	adds	r7, #12
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bc80      	pop	{r7}
 800ea4a:	4770      	bx	lr

0800ea4c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b086      	sub	sp, #24
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d904      	bls.n	800ea6c <get_fat+0x20>
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d302      	bcc.n	800ea72 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	617b      	str	r3, [r7, #20]
 800ea70:	e08f      	b.n	800eb92 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ea72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea76:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2b03      	cmp	r3, #3
 800ea7e:	d062      	beq.n	800eb46 <get_fat+0xfa>
 800ea80:	2b03      	cmp	r3, #3
 800ea82:	dc7c      	bgt.n	800eb7e <get_fat+0x132>
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d002      	beq.n	800ea8e <get_fat+0x42>
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d042      	beq.n	800eb12 <get_fat+0xc6>
 800ea8c:	e077      	b.n	800eb7e <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	085b      	lsrs	r3, r3, #1
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	6a1a      	ldr	r2, [r3, #32]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	0a5b      	lsrs	r3, r3, #9
 800eaa4:	4413      	add	r3, r2
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6938      	ldr	r0, [r7, #16]
 800eaaa:	f7ff ff15 	bl	800e8d8 <move_window>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d167      	bne.n	800eb84 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	1c5a      	adds	r2, r3, #1
 800eab8:	60fa      	str	r2, [r7, #12]
 800eaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eabe:	693a      	ldr	r2, [r7, #16]
 800eac0:	4413      	add	r3, r2
 800eac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eac6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	6a1a      	ldr	r2, [r3, #32]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	0a5b      	lsrs	r3, r3, #9
 800ead0:	4413      	add	r3, r2
 800ead2:	4619      	mov	r1, r3
 800ead4:	6938      	ldr	r0, [r7, #16]
 800ead6:	f7ff feff 	bl	800e8d8 <move_window>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d153      	bne.n	800eb88 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae6:	693a      	ldr	r2, [r7, #16]
 800eae8:	4413      	add	r3, r2
 800eaea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eaee:	021b      	lsls	r3, r3, #8
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	f003 0301 	and.w	r3, r3, #1
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <get_fat+0xbc>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	091b      	lsrs	r3, r3, #4
 800eb06:	e002      	b.n	800eb0e <get_fat+0xc2>
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb0e:	617b      	str	r3, [r7, #20]
			break;
 800eb10:	e03f      	b.n	800eb92 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	6a1a      	ldr	r2, [r3, #32]
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	0a1b      	lsrs	r3, r3, #8
 800eb1a:	4413      	add	r3, r2
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6938      	ldr	r0, [r7, #16]
 800eb20:	f7ff feda 	bl	800e8d8 <move_window>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d130      	bne.n	800eb8c <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	005b      	lsls	r3, r3, #1
 800eb34:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eb38:	4413      	add	r3, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fc2a 	bl	800e394 <ld_word>
 800eb40:	4603      	mov	r3, r0
 800eb42:	617b      	str	r3, [r7, #20]
			break;
 800eb44:	e025      	b.n	800eb92 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	09db      	lsrs	r3, r3, #7
 800eb4e:	4413      	add	r3, r2
 800eb50:	4619      	mov	r1, r3
 800eb52:	6938      	ldr	r0, [r7, #16]
 800eb54:	f7ff fec0 	bl	800e8d8 <move_window>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d118      	bne.n	800eb90 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb6c:	4413      	add	r3, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fc27 	bl	800e3c2 <ld_dword>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb7a:	617b      	str	r3, [r7, #20]
			break;
 800eb7c:	e009      	b.n	800eb92 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eb7e:	2301      	movs	r3, #1
 800eb80:	617b      	str	r3, [r7, #20]
 800eb82:	e006      	b.n	800eb92 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb84:	bf00      	nop
 800eb86:	e004      	b.n	800eb92 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb88:	bf00      	nop
 800eb8a:	e002      	b.n	800eb92 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb8c:	bf00      	nop
 800eb8e:	e000      	b.n	800eb92 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb90:	bf00      	nop
		}
	}

	return val;
 800eb92:	697b      	ldr	r3, [r7, #20]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eb9c:	b590      	push	{r4, r7, lr}
 800eb9e:	b089      	sub	sp, #36	; 0x24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eba8:	2302      	movs	r3, #2
 800ebaa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	f240 80d2 	bls.w	800ed58 <put_fat+0x1bc>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	695b      	ldr	r3, [r3, #20]
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	f080 80cc 	bcs.w	800ed58 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	f000 8096 	beq.w	800ecf6 <put_fat+0x15a>
 800ebca:	2b03      	cmp	r3, #3
 800ebcc:	f300 80cd 	bgt.w	800ed6a <put_fat+0x1ce>
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d002      	beq.n	800ebda <put_fat+0x3e>
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d06e      	beq.n	800ecb6 <put_fat+0x11a>
 800ebd8:	e0c7      	b.n	800ed6a <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	61bb      	str	r3, [r7, #24]
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	085b      	lsrs	r3, r3, #1
 800ebe2:	69ba      	ldr	r2, [r7, #24]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6a1a      	ldr	r2, [r3, #32]
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	0a5b      	lsrs	r3, r3, #9
 800ebf0:	4413      	add	r3, r2
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f7ff fe6f 	bl	800e8d8 <move_window>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebfe:	7ffb      	ldrb	r3, [r7, #31]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f040 80ab 	bne.w	800ed5c <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	1c59      	adds	r1, r3, #1
 800ec10:	61b9      	str	r1, [r7, #24]
 800ec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec16:	4413      	add	r3, r2
 800ec18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	f003 0301 	and.w	r3, r3, #1
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00d      	beq.n	800ec40 <put_fat+0xa4>
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	b25b      	sxtb	r3, r3
 800ec2a:	f003 030f 	and.w	r3, r3, #15
 800ec2e:	b25a      	sxtb	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	011b      	lsls	r3, r3, #4
 800ec36:	b25b      	sxtb	r3, r3
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	b25b      	sxtb	r3, r3
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	e001      	b.n	800ec44 <put_fat+0xa8>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6a1a      	ldr	r2, [r3, #32]
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	0a5b      	lsrs	r3, r3, #9
 800ec56:	4413      	add	r3, r2
 800ec58:	4619      	mov	r1, r3
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7ff fe3c 	bl	800e8d8 <move_window>
 800ec60:	4603      	mov	r3, r0
 800ec62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec64:	7ffb      	ldrb	r3, [r7, #31]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d17a      	bne.n	800ed60 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec76:	4413      	add	r3, r2
 800ec78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d003      	beq.n	800ec8c <put_fat+0xf0>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	091b      	lsrs	r3, r3, #4
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	e00e      	b.n	800ecaa <put_fat+0x10e>
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	b25b      	sxtb	r3, r3
 800ec92:	f023 030f 	bic.w	r3, r3, #15
 800ec96:	b25a      	sxtb	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	0a1b      	lsrs	r3, r3, #8
 800ec9c:	b25b      	sxtb	r3, r3
 800ec9e:	f003 030f 	and.w	r3, r3, #15
 800eca2:	b25b      	sxtb	r3, r3
 800eca4:	4313      	orrs	r3, r2
 800eca6:	b25b      	sxtb	r3, r3
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	70da      	strb	r2, [r3, #3]
			break;
 800ecb4:	e059      	b.n	800ed6a <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6a1a      	ldr	r2, [r3, #32]
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	0a1b      	lsrs	r3, r3, #8
 800ecbe:	4413      	add	r3, r2
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f7ff fe08 	bl	800e8d8 <move_window>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eccc:	7ffb      	ldrb	r3, [r7, #31]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d148      	bne.n	800ed64 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ece0:	4413      	add	r3, r2
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	b292      	uxth	r2, r2
 800ece6:	4611      	mov	r1, r2
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff fb8c 	bl	800e406 <st_word>
			fs->wflag = 1;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	70da      	strb	r2, [r3, #3]
			break;
 800ecf4:	e039      	b.n	800ed6a <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a1a      	ldr	r2, [r3, #32]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	09db      	lsrs	r3, r3, #7
 800ecfe:	4413      	add	r3, r2
 800ed00:	4619      	mov	r1, r3
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff fde8 	bl	800e8d8 <move_window>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed0c:	7ffb      	ldrb	r3, [r7, #31]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d12a      	bne.n	800ed68 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed26:	4413      	add	r3, r2
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff fb4a 	bl	800e3c2 <ld_dword>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ed34:	4323      	orrs	r3, r4
 800ed36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed46:	4413      	add	r3, r2
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fb75 	bl	800e43a <st_dword>
			fs->wflag = 1;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2201      	movs	r2, #1
 800ed54:	70da      	strb	r2, [r3, #3]
			break;
 800ed56:	e008      	b.n	800ed6a <put_fat+0x1ce>
		}
	}
 800ed58:	bf00      	nop
 800ed5a:	e006      	b.n	800ed6a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed5c:	bf00      	nop
 800ed5e:	e004      	b.n	800ed6a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed60:	bf00      	nop
 800ed62:	e002      	b.n	800ed6a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed64:	bf00      	nop
 800ed66:	e000      	b.n	800ed6a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed68:	bf00      	nop
	return res;
 800ed6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3724      	adds	r7, #36	; 0x24
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd90      	pop	{r4, r7, pc}

0800ed74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d904      	bls.n	800ed9a <remove_chain+0x26>
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d301      	bcc.n	800ed9e <remove_chain+0x2a>
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	e04b      	b.n	800ee36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00c      	beq.n	800edbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eda4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eda8:	6879      	ldr	r1, [r7, #4]
 800edaa:	69b8      	ldr	r0, [r7, #24]
 800edac:	f7ff fef6 	bl	800eb9c <put_fat>
 800edb0:	4603      	mov	r3, r0
 800edb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800edb4:	7ffb      	ldrb	r3, [r7, #31]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d001      	beq.n	800edbe <remove_chain+0x4a>
 800edba:	7ffb      	ldrb	r3, [r7, #31]
 800edbc:	e03b      	b.n	800ee36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800edbe:	68b9      	ldr	r1, [r7, #8]
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f7ff fe43 	bl	800ea4c <get_fat>
 800edc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d031      	beq.n	800ee32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d101      	bne.n	800edd8 <remove_chain+0x64>
 800edd4:	2302      	movs	r3, #2
 800edd6:	e02e      	b.n	800ee36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edde:	d101      	bne.n	800ede4 <remove_chain+0x70>
 800ede0:	2301      	movs	r3, #1
 800ede2:	e028      	b.n	800ee36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ede4:	2200      	movs	r2, #0
 800ede6:	68b9      	ldr	r1, [r7, #8]
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f7ff fed7 	bl	800eb9c <put_fat>
 800edee:	4603      	mov	r3, r0
 800edf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800edf2:	7ffb      	ldrb	r3, [r7, #31]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <remove_chain+0x88>
 800edf8:	7ffb      	ldrb	r3, [r7, #31]
 800edfa:	e01c      	b.n	800ee36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	695b      	ldr	r3, [r3, #20]
 800ee04:	3b02      	subs	r3, #2
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d20b      	bcs.n	800ee22 <remove_chain+0xae>
			fs->free_clst++;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	791b      	ldrb	r3, [r3, #4]
 800ee18:	f043 0301 	orr.w	r3, r3, #1
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d3c6      	bcc.n	800edbe <remove_chain+0x4a>
 800ee30:	e000      	b.n	800ee34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ee32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3720      	adds	r7, #32
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b088      	sub	sp, #32
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10d      	bne.n	800ee70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <create_chain+0x2c>
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	69ba      	ldr	r2, [r7, #24]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d31b      	bcc.n	800eea2 <create_chain+0x64>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	e018      	b.n	800eea2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fdea 	bl	800ea4c <get_fat>
 800ee78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d801      	bhi.n	800ee84 <create_chain+0x46>
 800ee80:	2301      	movs	r3, #1
 800ee82:	e070      	b.n	800ef66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee8a:	d101      	bne.n	800ee90 <create_chain+0x52>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	e06a      	b.n	800ef66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d201      	bcs.n	800ee9e <create_chain+0x60>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	e063      	b.n	800ef66 <create_chain+0x128>
		scl = clst;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	69fa      	ldr	r2, [r7, #28]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d307      	bcc.n	800eec6 <create_chain+0x88>
				ncl = 2;
 800eeb6:	2302      	movs	r3, #2
 800eeb8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eeba:	69fa      	ldr	r2, [r7, #28]
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d901      	bls.n	800eec6 <create_chain+0x88>
 800eec2:	2300      	movs	r3, #0
 800eec4:	e04f      	b.n	800ef66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eec6:	69f9      	ldr	r1, [r7, #28]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff fdbf 	bl	800ea4c <get_fat>
 800eece:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00e      	beq.n	800eef4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d003      	beq.n	800eee4 <create_chain+0xa6>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eee2:	d101      	bne.n	800eee8 <create_chain+0xaa>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	e03e      	b.n	800ef66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d1da      	bne.n	800eea6 <create_chain+0x68>
 800eef0:	2300      	movs	r3, #0
 800eef2:	e038      	b.n	800ef66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eef4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eefa:	69f9      	ldr	r1, [r7, #28]
 800eefc:	6938      	ldr	r0, [r7, #16]
 800eefe:	f7ff fe4d 	bl	800eb9c <put_fat>
 800ef02:	4603      	mov	r3, r0
 800ef04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d109      	bne.n	800ef20 <create_chain+0xe2>
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d006      	beq.n	800ef20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ef12:	69fa      	ldr	r2, [r7, #28]
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6938      	ldr	r0, [r7, #16]
 800ef18:	f7ff fe40 	bl	800eb9c <put_fat>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d116      	bne.n	800ef54 <create_chain+0x116>
		fs->last_clst = ncl;
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	69fa      	ldr	r2, [r7, #28]
 800ef2a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	691a      	ldr	r2, [r3, #16]
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	3b02      	subs	r3, #2
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d804      	bhi.n	800ef44 <create_chain+0x106>
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	1e5a      	subs	r2, r3, #1
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	791b      	ldrb	r3, [r3, #4]
 800ef48:	f043 0301 	orr.w	r3, r3, #1
 800ef4c:	b2da      	uxtb	r2, r3
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	711a      	strb	r2, [r3, #4]
 800ef52:	e007      	b.n	800ef64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ef54:	7dfb      	ldrb	r3, [r7, #23]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d102      	bne.n	800ef60 <create_chain+0x122>
 800ef5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef5e:	e000      	b.n	800ef62 <create_chain+0x124>
 800ef60:	2301      	movs	r3, #1
 800ef62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ef64:	69fb      	ldr	r3, [r7, #28]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ef6e:	b480      	push	{r7}
 800ef70:	b087      	sub	sp, #28
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef82:	3304      	adds	r3, #4
 800ef84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	0a5b      	lsrs	r3, r3, #9
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	8952      	ldrh	r2, [r2, #10]
 800ef8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	1d1a      	adds	r2, r3, #4
 800ef98:	613a      	str	r2, [r7, #16]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d101      	bne.n	800efa8 <clmt_clust+0x3a>
 800efa4:	2300      	movs	r3, #0
 800efa6:	e010      	b.n	800efca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	429a      	cmp	r2, r3
 800efae:	d307      	bcc.n	800efc0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800efb0:	697a      	ldr	r2, [r7, #20]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	1ad3      	subs	r3, r2, r3
 800efb6:	617b      	str	r3, [r7, #20]
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	3304      	adds	r3, #4
 800efbc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800efbe:	e7e9      	b.n	800ef94 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800efc0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	4413      	add	r3, r2
}
 800efca:	4618      	mov	r0, r3
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	bc80      	pop	{r7}
 800efd2:	4770      	bx	lr

0800efd4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efea:	d204      	bcs.n	800eff6 <dir_sdi+0x22>
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	f003 031f 	and.w	r3, r3, #31
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d001      	beq.n	800effa <dir_sdi+0x26>
		return FR_INT_ERR;
 800eff6:	2302      	movs	r3, #2
 800eff8:	e063      	b.n	800f0c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <dir_sdi+0x46>
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b02      	cmp	r3, #2
 800f012:	d902      	bls.n	800f01a <dir_sdi+0x46>
		clst = fs->dirbase;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f018:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10c      	bne.n	800f03a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	095b      	lsrs	r3, r3, #5
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	8912      	ldrh	r2, [r2, #8]
 800f028:	4293      	cmp	r3, r2
 800f02a:	d301      	bcc.n	800f030 <dir_sdi+0x5c>
 800f02c:	2302      	movs	r3, #2
 800f02e:	e048      	b.n	800f0c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	61da      	str	r2, [r3, #28]
 800f038:	e029      	b.n	800f08e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	895b      	ldrh	r3, [r3, #10]
 800f03e:	025b      	lsls	r3, r3, #9
 800f040:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f042:	e019      	b.n	800f078 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6979      	ldr	r1, [r7, #20]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fcff 	bl	800ea4c <get_fat>
 800f04e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f056:	d101      	bne.n	800f05c <dir_sdi+0x88>
 800f058:	2301      	movs	r3, #1
 800f05a:	e032      	b.n	800f0c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d904      	bls.n	800f06c <dir_sdi+0x98>
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d301      	bcc.n	800f070 <dir_sdi+0x9c>
 800f06c:	2302      	movs	r3, #2
 800f06e:	e028      	b.n	800f0c2 <dir_sdi+0xee>
			ofs -= csz;
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f078:	683a      	ldr	r2, [r7, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d2e1      	bcs.n	800f044 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f080:	6979      	ldr	r1, [r7, #20]
 800f082:	6938      	ldr	r0, [r7, #16]
 800f084:	f7ff fcc4 	bl	800ea10 <clust2sect>
 800f088:	4602      	mov	r2, r0
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	69db      	ldr	r3, [r3, #28]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <dir_sdi+0xcc>
 800f09c:	2302      	movs	r3, #2
 800f09e:	e010      	b.n	800f0c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	69da      	ldr	r2, [r3, #28]
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	0a5b      	lsrs	r3, r3, #9
 800f0a8:	441a      	add	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ba:	441a      	add	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b086      	sub	sp, #24
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	695b      	ldr	r3, [r3, #20]
 800f0de:	3320      	adds	r3, #32
 800f0e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	69db      	ldr	r3, [r3, #28]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <dir_next+0x28>
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0f0:	d301      	bcc.n	800f0f6 <dir_next+0x2c>
 800f0f2:	2304      	movs	r3, #4
 800f0f4:	e0aa      	b.n	800f24c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f040 8098 	bne.w	800f232 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	69db      	ldr	r3, [r3, #28]
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10b      	bne.n	800f12c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	095b      	lsrs	r3, r3, #5
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	8912      	ldrh	r2, [r2, #8]
 800f11c:	4293      	cmp	r3, r2
 800f11e:	f0c0 8088 	bcc.w	800f232 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	61da      	str	r2, [r3, #28]
 800f128:	2304      	movs	r3, #4
 800f12a:	e08f      	b.n	800f24c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	0a5b      	lsrs	r3, r3, #9
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	8952      	ldrh	r2, [r2, #10]
 800f134:	3a01      	subs	r2, #1
 800f136:	4013      	ands	r3, r2
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d17a      	bne.n	800f232 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	699b      	ldr	r3, [r3, #24]
 800f142:	4619      	mov	r1, r3
 800f144:	4610      	mov	r0, r2
 800f146:	f7ff fc81 	bl	800ea4c <get_fat>
 800f14a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d801      	bhi.n	800f156 <dir_next+0x8c>
 800f152:	2302      	movs	r3, #2
 800f154:	e07a      	b.n	800f24c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f15c:	d101      	bne.n	800f162 <dir_next+0x98>
 800f15e:	2301      	movs	r3, #1
 800f160:	e074      	b.n	800f24c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d358      	bcc.n	800f21e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d104      	bne.n	800f17c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2200      	movs	r2, #0
 800f176:	61da      	str	r2, [r3, #28]
 800f178:	2304      	movs	r3, #4
 800f17a:	e067      	b.n	800f24c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	4619      	mov	r1, r3
 800f184:	4610      	mov	r0, r2
 800f186:	f7ff fe5a 	bl	800ee3e <create_chain>
 800f18a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <dir_next+0xcc>
 800f192:	2307      	movs	r3, #7
 800f194:	e05a      	b.n	800f24c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d101      	bne.n	800f1a0 <dir_next+0xd6>
 800f19c:	2302      	movs	r3, #2
 800f19e:	e055      	b.n	800f24c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1a6:	d101      	bne.n	800f1ac <dir_next+0xe2>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e04f      	b.n	800f24c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f7ff fb4f 	bl	800e850 <sync_window>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <dir_next+0xf2>
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e047      	b.n	800f24c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3330      	adds	r3, #48	; 0x30
 800f1c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff f982 	bl	800e4d0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	613b      	str	r3, [r7, #16]
 800f1d0:	6979      	ldr	r1, [r7, #20]
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7ff fc1c 	bl	800ea10 <clust2sect>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	62da      	str	r2, [r3, #44]	; 0x2c
 800f1de:	e012      	b.n	800f206 <dir_next+0x13c>
						fs->wflag = 1;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff fb32 	bl	800e850 <sync_window>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <dir_next+0x12c>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e02a      	b.n	800f24c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	613b      	str	r3, [r7, #16]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	62da      	str	r2, [r3, #44]	; 0x2c
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	895b      	ldrh	r3, [r3, #10]
 800f20a:	461a      	mov	r2, r3
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	4293      	cmp	r3, r2
 800f210:	d3e6      	bcc.n	800f1e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	1ad2      	subs	r2, r2, r3
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	697a      	ldr	r2, [r7, #20]
 800f222:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f224:	6979      	ldr	r1, [r7, #20]
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f7ff fbf2 	bl	800ea10 <clust2sect>
 800f22c:	4602      	mov	r2, r0
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f244:	441a      	add	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3718      	adds	r7, #24
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f264:	2100      	movs	r1, #0
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff feb4 	bl	800efd4 <dir_sdi>
 800f26c:	4603      	mov	r3, r0
 800f26e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f270:	7dfb      	ldrb	r3, [r7, #23]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d12b      	bne.n	800f2ce <dir_alloc+0x7a>
		n = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	69db      	ldr	r3, [r3, #28]
 800f27e:	4619      	mov	r1, r3
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff fb29 	bl	800e8d8 <move_window>
 800f286:	4603      	mov	r3, r0
 800f288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f28a:	7dfb      	ldrb	r3, [r7, #23]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d11d      	bne.n	800f2cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6a1b      	ldr	r3, [r3, #32]
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2be5      	cmp	r3, #229	; 0xe5
 800f298:	d004      	beq.n	800f2a4 <dir_alloc+0x50>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d107      	bne.n	800f2b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	613b      	str	r3, [r7, #16]
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d102      	bne.n	800f2b8 <dir_alloc+0x64>
 800f2b2:	e00c      	b.n	800f2ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ff05 	bl	800f0ca <dir_next>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0d7      	beq.n	800f27a <dir_alloc+0x26>
 800f2ca:	e000      	b.n	800f2ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f2cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f2ce:	7dfb      	ldrb	r3, [r7, #23]
 800f2d0:	2b04      	cmp	r3, #4
 800f2d2:	d101      	bne.n	800f2d8 <dir_alloc+0x84>
 800f2d4:	2307      	movs	r3, #7
 800f2d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3718      	adds	r7, #24
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b084      	sub	sp, #16
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	331a      	adds	r3, #26
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff f84f 	bl	800e394 <ld_word>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d109      	bne.n	800f316 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	3314      	adds	r3, #20
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff f844 	bl	800e394 <ld_word>
 800f30c:	4603      	mov	r3, r0
 800f30e:	041b      	lsls	r3, r3, #16
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	4313      	orrs	r3, r2
 800f314:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f316:	68fb      	ldr	r3, [r7, #12]
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	331a      	adds	r3, #26
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	b292      	uxth	r2, r2
 800f334:	4611      	mov	r1, r2
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff f865 	bl	800e406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b03      	cmp	r3, #3
 800f342:	d109      	bne.n	800f358 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	f103 0214 	add.w	r2, r3, #20
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	0c1b      	lsrs	r3, r3, #16
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4619      	mov	r1, r3
 800f352:	4610      	mov	r0, r2
 800f354:	f7ff f857 	bl	800e406 <st_word>
	}
}
 800f358:	bf00      	nop
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b086      	sub	sp, #24
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f36e:	2100      	movs	r1, #0
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff fe2f 	bl	800efd4 <dir_sdi>
 800f376:	4603      	mov	r3, r0
 800f378:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f37a:	7dfb      	ldrb	r3, [r7, #23]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <dir_find+0x24>
 800f380:	7dfb      	ldrb	r3, [r7, #23]
 800f382:	e03e      	b.n	800f402 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	69db      	ldr	r3, [r3, #28]
 800f388:	4619      	mov	r1, r3
 800f38a:	6938      	ldr	r0, [r7, #16]
 800f38c:	f7ff faa4 	bl	800e8d8 <move_window>
 800f390:	4603      	mov	r3, r0
 800f392:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d12f      	bne.n	800f3fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <dir_find+0x4e>
 800f3a8:	2304      	movs	r3, #4
 800f3aa:	75fb      	strb	r3, [r7, #23]
 800f3ac:	e028      	b.n	800f400 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	330b      	adds	r3, #11
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a1b      	ldr	r3, [r3, #32]
 800f3c4:	330b      	adds	r3, #11
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	f003 0308 	and.w	r3, r3, #8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <dir_find+0x86>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a18      	ldr	r0, [r3, #32]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	3324      	adds	r3, #36	; 0x24
 800f3d8:	220b      	movs	r2, #11
 800f3da:	4619      	mov	r1, r3
 800f3dc:	f7ff f892 	bl	800e504 <mem_cmp>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d00b      	beq.n	800f3fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fe6e 	bl	800f0ca <dir_next>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f3f2:	7dfb      	ldrb	r3, [r7, #23]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d0c5      	beq.n	800f384 <dir_find+0x24>
 800f3f8:	e002      	b.n	800f400 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f3fa:	bf00      	nop
 800f3fc:	e000      	b.n	800f400 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f3fe:	bf00      	nop

	return res;
 800f400:	7dfb      	ldrb	r3, [r7, #23]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f418:	2101      	movs	r1, #1
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff ff1a 	bl	800f254 <dir_alloc>
 800f420:	4603      	mov	r3, r0
 800f422:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d11c      	bne.n	800f464 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	69db      	ldr	r3, [r3, #28]
 800f42e:	4619      	mov	r1, r3
 800f430:	68b8      	ldr	r0, [r7, #8]
 800f432:	f7ff fa51 	bl	800e8d8 <move_window>
 800f436:	4603      	mov	r3, r0
 800f438:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f43a:	7bfb      	ldrb	r3, [r7, #15]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d111      	bne.n	800f464 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a1b      	ldr	r3, [r3, #32]
 800f444:	2220      	movs	r2, #32
 800f446:	2100      	movs	r1, #0
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff f841 	bl	800e4d0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a18      	ldr	r0, [r3, #32]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	3324      	adds	r3, #36	; 0x24
 800f456:	220b      	movs	r2, #11
 800f458:	4619      	mov	r1, r3
 800f45a:	f7ff f819 	bl	800e490 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2201      	movs	r2, #1
 800f462:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f464:	7bfb      	ldrb	r3, [r7, #15]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
	...

0800f470 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3324      	adds	r3, #36	; 0x24
 800f484:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f486:	220b      	movs	r2, #11
 800f488:	2120      	movs	r1, #32
 800f48a:	68b8      	ldr	r0, [r7, #8]
 800f48c:	f7ff f820 	bl	800e4d0 <mem_set>
	si = i = 0; ni = 8;
 800f490:	2300      	movs	r3, #0
 800f492:	613b      	str	r3, [r7, #16]
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	61fb      	str	r3, [r7, #28]
 800f498:	2308      	movs	r3, #8
 800f49a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	1c5a      	adds	r2, r3, #1
 800f4a0:	61fa      	str	r2, [r7, #28]
 800f4a2:	68fa      	ldr	r2, [r7, #12]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f4aa:	7efb      	ldrb	r3, [r7, #27]
 800f4ac:	2b20      	cmp	r3, #32
 800f4ae:	d94e      	bls.n	800f54e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f4b0:	7efb      	ldrb	r3, [r7, #27]
 800f4b2:	2b2f      	cmp	r3, #47	; 0x2f
 800f4b4:	d006      	beq.n	800f4c4 <create_name+0x54>
 800f4b6:	7efb      	ldrb	r3, [r7, #27]
 800f4b8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4ba:	d110      	bne.n	800f4de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f4bc:	e002      	b.n	800f4c4 <create_name+0x54>
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	61fb      	str	r3, [r7, #28]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b2f      	cmp	r3, #47	; 0x2f
 800f4ce:	d0f6      	beq.n	800f4be <create_name+0x4e>
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4da:	d0f0      	beq.n	800f4be <create_name+0x4e>
			break;
 800f4dc:	e038      	b.n	800f550 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f4de:	7efb      	ldrb	r3, [r7, #27]
 800f4e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4e2:	d003      	beq.n	800f4ec <create_name+0x7c>
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d30c      	bcc.n	800f506 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2b0b      	cmp	r3, #11
 800f4f0:	d002      	beq.n	800f4f8 <create_name+0x88>
 800f4f2:	7efb      	ldrb	r3, [r7, #27]
 800f4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f4f6:	d001      	beq.n	800f4fc <create_name+0x8c>
 800f4f8:	2306      	movs	r3, #6
 800f4fa:	e044      	b.n	800f586 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f4fc:	2308      	movs	r3, #8
 800f4fe:	613b      	str	r3, [r7, #16]
 800f500:	230b      	movs	r3, #11
 800f502:	617b      	str	r3, [r7, #20]
			continue;
 800f504:	e022      	b.n	800f54c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f506:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da04      	bge.n	800f518 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f50e:	7efb      	ldrb	r3, [r7, #27]
 800f510:	3b80      	subs	r3, #128	; 0x80
 800f512:	4a1f      	ldr	r2, [pc, #124]	; (800f590 <create_name+0x120>)
 800f514:	5cd3      	ldrb	r3, [r2, r3]
 800f516:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f518:	7efb      	ldrb	r3, [r7, #27]
 800f51a:	4619      	mov	r1, r3
 800f51c:	481d      	ldr	r0, [pc, #116]	; (800f594 <create_name+0x124>)
 800f51e:	f7ff f817 	bl	800e550 <chk_chr>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <create_name+0xbc>
 800f528:	2306      	movs	r3, #6
 800f52a:	e02c      	b.n	800f586 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f52c:	7efb      	ldrb	r3, [r7, #27]
 800f52e:	2b60      	cmp	r3, #96	; 0x60
 800f530:	d905      	bls.n	800f53e <create_name+0xce>
 800f532:	7efb      	ldrb	r3, [r7, #27]
 800f534:	2b7a      	cmp	r3, #122	; 0x7a
 800f536:	d802      	bhi.n	800f53e <create_name+0xce>
 800f538:	7efb      	ldrb	r3, [r7, #27]
 800f53a:	3b20      	subs	r3, #32
 800f53c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	613a      	str	r2, [r7, #16]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	4413      	add	r3, r2
 800f548:	7efa      	ldrb	r2, [r7, #27]
 800f54a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f54c:	e7a6      	b.n	800f49c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f54e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	441a      	add	r2, r3
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <create_name+0xf4>
 800f560:	2306      	movs	r3, #6
 800f562:	e010      	b.n	800f586 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2be5      	cmp	r3, #229	; 0xe5
 800f56a:	d102      	bne.n	800f572 <create_name+0x102>
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2205      	movs	r2, #5
 800f570:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f572:	7efb      	ldrb	r3, [r7, #27]
 800f574:	2b20      	cmp	r3, #32
 800f576:	d801      	bhi.n	800f57c <create_name+0x10c>
 800f578:	2204      	movs	r2, #4
 800f57a:	e000      	b.n	800f57e <create_name+0x10e>
 800f57c:	2200      	movs	r2, #0
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	330b      	adds	r3, #11
 800f582:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f584:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f586:	4618      	mov	r0, r3
 800f588:	3720      	adds	r7, #32
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	080175dc 	.word	0x080175dc
 800f594:	08017510 	.word	0x08017510

0800f598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f5ac:	e002      	b.n	800f5b4 <follow_path+0x1c>
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	603b      	str	r3, [r7, #0]
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b2f      	cmp	r3, #47	; 0x2f
 800f5ba:	d0f8      	beq.n	800f5ae <follow_path+0x16>
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800f5c2:	d0f4      	beq.n	800f5ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b1f      	cmp	r3, #31
 800f5d0:	d80a      	bhi.n	800f5e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2280      	movs	r2, #128	; 0x80
 800f5d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f5da:	2100      	movs	r1, #0
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff fcf9 	bl	800efd4 <dir_sdi>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	75fb      	strb	r3, [r7, #23]
 800f5e6:	e043      	b.n	800f670 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff ff3f 	bl	800f470 <create_name>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d134      	bne.n	800f666 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff feaf 	bl	800f360 <dir_find>
 800f602:	4603      	mov	r3, r0
 800f604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f60c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00a      	beq.n	800f62a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f614:	7dfb      	ldrb	r3, [r7, #23]
 800f616:	2b04      	cmp	r3, #4
 800f618:	d127      	bne.n	800f66a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f61a:	7afb      	ldrb	r3, [r7, #11]
 800f61c:	f003 0304 	and.w	r3, r3, #4
 800f620:	2b00      	cmp	r3, #0
 800f622:	d122      	bne.n	800f66a <follow_path+0xd2>
 800f624:	2305      	movs	r3, #5
 800f626:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f628:	e01f      	b.n	800f66a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f62a:	7afb      	ldrb	r3, [r7, #11]
 800f62c:	f003 0304 	and.w	r3, r3, #4
 800f630:	2b00      	cmp	r3, #0
 800f632:	d11c      	bne.n	800f66e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	799b      	ldrb	r3, [r3, #6]
 800f638:	f003 0310 	and.w	r3, r3, #16
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d102      	bne.n	800f646 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f640:	2305      	movs	r3, #5
 800f642:	75fb      	strb	r3, [r7, #23]
 800f644:	e014      	b.n	800f670 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	695b      	ldr	r3, [r3, #20]
 800f650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f654:	4413      	add	r3, r2
 800f656:	4619      	mov	r1, r3
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f7ff fe42 	bl	800f2e2 <ld_clust>
 800f65e:	4602      	mov	r2, r0
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f664:	e7c0      	b.n	800f5e8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f666:	bf00      	nop
 800f668:	e002      	b.n	800f670 <follow_path+0xd8>
				break;
 800f66a:	bf00      	nop
 800f66c:	e000      	b.n	800f670 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f66e:	bf00      	nop
			}
		}
	}

	return res;
 800f670:	7dfb      	ldrb	r3, [r7, #23]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3718      	adds	r7, #24
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f67a:	b480      	push	{r7}
 800f67c:	b087      	sub	sp, #28
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f686:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d031      	beq.n	800f6f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	617b      	str	r3, [r7, #20]
 800f696:	e002      	b.n	800f69e <get_ldnumber+0x24>
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	3301      	adds	r3, #1
 800f69c:	617b      	str	r3, [r7, #20]
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	2b20      	cmp	r3, #32
 800f6a4:	d903      	bls.n	800f6ae <get_ldnumber+0x34>
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	2b3a      	cmp	r3, #58	; 0x3a
 800f6ac:	d1f4      	bne.n	800f698 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b3a      	cmp	r3, #58	; 0x3a
 800f6b4:	d11c      	bne.n	800f6f0 <get_ldnumber+0x76>
			tp = *path;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	60fa      	str	r2, [r7, #12]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	3b30      	subs	r3, #48	; 0x30
 800f6c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	2b09      	cmp	r3, #9
 800f6cc:	d80e      	bhi.n	800f6ec <get_ldnumber+0x72>
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d10a      	bne.n	800f6ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d107      	bne.n	800f6ec <get_ldnumber+0x72>
					vol = (int)i;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	617b      	str	r3, [r7, #20]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	e002      	b.n	800f6f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f6f4:	693b      	ldr	r3, [r7, #16]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	371c      	adds	r7, #28
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bc80      	pop	{r7}
 800f6fe:	4770      	bx	lr

0800f700 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	70da      	strb	r2, [r3, #3]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f716:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7ff f8dc 	bl	800e8d8 <move_window>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <check_fs+0x2a>
 800f726:	2304      	movs	r3, #4
 800f728:	e038      	b.n	800f79c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	3330      	adds	r3, #48	; 0x30
 800f72e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe fe2e 	bl	800e394 <ld_word>
 800f738:	4603      	mov	r3, r0
 800f73a:	461a      	mov	r2, r3
 800f73c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f740:	429a      	cmp	r2, r3
 800f742:	d001      	beq.n	800f748 <check_fs+0x48>
 800f744:	2303      	movs	r3, #3
 800f746:	e029      	b.n	800f79c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f74e:	2be9      	cmp	r3, #233	; 0xe9
 800f750:	d009      	beq.n	800f766 <check_fs+0x66>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f758:	2beb      	cmp	r3, #235	; 0xeb
 800f75a:	d11e      	bne.n	800f79a <check_fs+0x9a>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f762:	2b90      	cmp	r3, #144	; 0x90
 800f764:	d119      	bne.n	800f79a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3330      	adds	r3, #48	; 0x30
 800f76a:	3336      	adds	r3, #54	; 0x36
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe fe28 	bl	800e3c2 <ld_dword>
 800f772:	4603      	mov	r3, r0
 800f774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f778:	4a0a      	ldr	r2, [pc, #40]	; (800f7a4 <check_fs+0xa4>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d101      	bne.n	800f782 <check_fs+0x82>
 800f77e:	2300      	movs	r3, #0
 800f780:	e00c      	b.n	800f79c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3330      	adds	r3, #48	; 0x30
 800f786:	3352      	adds	r3, #82	; 0x52
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fe fe1a 	bl	800e3c2 <ld_dword>
 800f78e:	4603      	mov	r3, r0
 800f790:	4a05      	ldr	r2, [pc, #20]	; (800f7a8 <check_fs+0xa8>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d101      	bne.n	800f79a <check_fs+0x9a>
 800f796:	2300      	movs	r3, #0
 800f798:	e000      	b.n	800f79c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f79a:	2302      	movs	r3, #2
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	00544146 	.word	0x00544146
 800f7a8:	33544146 	.word	0x33544146

0800f7ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b096      	sub	sp, #88	; 0x58
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff ff5a 	bl	800f67a <get_ldnumber>
 800f7c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	da01      	bge.n	800f7d2 <find_volume+0x26>
 800f7ce:	230b      	movs	r3, #11
 800f7d0:	e22e      	b.n	800fc30 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f7d2:	4aa8      	ldr	r2, [pc, #672]	; (800fa74 <find_volume+0x2c8>)
 800f7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <find_volume+0x3a>
 800f7e2:	230c      	movs	r3, #12
 800f7e4:	e224      	b.n	800fc30 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f7ec:	79fb      	ldrb	r3, [r7, #7]
 800f7ee:	f023 0301 	bic.w	r3, r3, #1
 800f7f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01a      	beq.n	800f832 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	785b      	ldrb	r3, [r3, #1]
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe fd29 	bl	800e258 <disk_status>
 800f806:	4603      	mov	r3, r0
 800f808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	2b00      	cmp	r3, #0
 800f816:	d10c      	bne.n	800f832 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f818:	79fb      	ldrb	r3, [r7, #7]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d007      	beq.n	800f82e <find_volume+0x82>
 800f81e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f822:	f003 0304 	and.w	r3, r3, #4
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f82a:	230a      	movs	r3, #10
 800f82c:	e200      	b.n	800fc30 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800f82e:	2300      	movs	r3, #0
 800f830:	e1fe      	b.n	800fc30 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f834:	2200      	movs	r2, #0
 800f836:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f83a:	b2da      	uxtb	r2, r3
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	785b      	ldrb	r3, [r3, #1]
 800f844:	4618      	mov	r0, r3
 800f846:	f7fe fd21 	bl	800e28c <disk_initialize>
 800f84a:	4603      	mov	r3, r0
 800f84c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f85c:	2303      	movs	r3, #3
 800f85e:	e1e7      	b.n	800fc30 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d007      	beq.n	800f876 <find_volume+0xca>
 800f866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f86a:	f003 0304 	and.w	r3, r3, #4
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f872:	230a      	movs	r3, #10
 800f874:	e1dc      	b.n	800fc30 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f87a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f87c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f87e:	f7ff ff3f 	bl	800f700 <check_fs>
 800f882:	4603      	mov	r3, r0
 800f884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f88c:	2b02      	cmp	r3, #2
 800f88e:	d14b      	bne.n	800f928 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f890:	2300      	movs	r3, #0
 800f892:	643b      	str	r3, [r7, #64]	; 0x40
 800f894:	e01f      	b.n	800f8d6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f898:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f89e:	011b      	lsls	r3, r3, #4
 800f8a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f8a4:	4413      	add	r3, r2
 800f8a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d006      	beq.n	800f8c0 <find_volume+0x114>
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	3308      	adds	r3, #8
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fe fd83 	bl	800e3c2 <ld_dword>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	e000      	b.n	800f8c2 <find_volume+0x116>
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f8ca:	440b      	add	r3, r1
 800f8cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	643b      	str	r3, [r7, #64]	; 0x40
 800f8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	d9dc      	bls.n	800f896 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f8dc:	2300      	movs	r3, #0
 800f8de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <find_volume+0x140>
 800f8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f8f4:	4413      	add	r3, r2
 800f8f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f8fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d005      	beq.n	800f90e <find_volume+0x162>
 800f902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f906:	f7ff fefb 	bl	800f700 <check_fs>
 800f90a:	4603      	mov	r3, r0
 800f90c:	e000      	b.n	800f910 <find_volume+0x164>
 800f90e:	2303      	movs	r3, #3
 800f910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d905      	bls.n	800f928 <find_volume+0x17c>
 800f91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f91e:	3301      	adds	r3, #1
 800f920:	643b      	str	r3, [r7, #64]	; 0x40
 800f922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f924:	2b03      	cmp	r3, #3
 800f926:	d9e1      	bls.n	800f8ec <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f92c:	2b04      	cmp	r3, #4
 800f92e:	d101      	bne.n	800f934 <find_volume+0x188>
 800f930:	2301      	movs	r3, #1
 800f932:	e17d      	b.n	800fc30 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d901      	bls.n	800f940 <find_volume+0x194>
 800f93c:	230d      	movs	r3, #13
 800f93e:	e177      	b.n	800fc30 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f942:	3330      	adds	r3, #48	; 0x30
 800f944:	330b      	adds	r3, #11
 800f946:	4618      	mov	r0, r3
 800f948:	f7fe fd24 	bl	800e394 <ld_word>
 800f94c:	4603      	mov	r3, r0
 800f94e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f952:	d001      	beq.n	800f958 <find_volume+0x1ac>
 800f954:	230d      	movs	r3, #13
 800f956:	e16b      	b.n	800fc30 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	3330      	adds	r3, #48	; 0x30
 800f95c:	3316      	adds	r3, #22
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fe fd18 	bl	800e394 <ld_word>
 800f964:	4603      	mov	r3, r0
 800f966:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <find_volume+0x1d0>
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	3330      	adds	r3, #48	; 0x30
 800f972:	3324      	adds	r3, #36	; 0x24
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe fd24 	bl	800e3c2 <ld_dword>
 800f97a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f980:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98e:	789b      	ldrb	r3, [r3, #2]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d005      	beq.n	800f9a0 <find_volume+0x1f4>
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	789b      	ldrb	r3, [r3, #2]
 800f998:	2b02      	cmp	r3, #2
 800f99a:	d001      	beq.n	800f9a0 <find_volume+0x1f4>
 800f99c:	230d      	movs	r3, #13
 800f99e:	e147      	b.n	800fc30 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a2:	789b      	ldrb	r3, [r3, #2]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a8:	fb02 f303 	mul.w	r3, r2, r3
 800f9ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9bc:	895b      	ldrh	r3, [r3, #10]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d008      	beq.n	800f9d4 <find_volume+0x228>
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	895b      	ldrh	r3, [r3, #10]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	895b      	ldrh	r3, [r3, #10]
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <find_volume+0x22c>
 800f9d4:	230d      	movs	r3, #13
 800f9d6:	e12b      	b.n	800fc30 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	3330      	adds	r3, #48	; 0x30
 800f9dc:	3311      	adds	r3, #17
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fe fcd8 	bl	800e394 <ld_word>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	891b      	ldrh	r3, [r3, #8]
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <find_volume+0x252>
 800f9fa:	230d      	movs	r3, #13
 800f9fc:	e118      	b.n	800fc30 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	3330      	adds	r3, #48	; 0x30
 800fa02:	3313      	adds	r3, #19
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe fcc5 	bl	800e394 <ld_word>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fa0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <find_volume+0x276>
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	3330      	adds	r3, #48	; 0x30
 800fa18:	3320      	adds	r3, #32
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fcd1 	bl	800e3c2 <ld_dword>
 800fa20:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa24:	3330      	adds	r3, #48	; 0x30
 800fa26:	330e      	adds	r3, #14
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fe fcb3 	bl	800e394 <ld_word>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fa32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d101      	bne.n	800fa3c <find_volume+0x290>
 800fa38:	230d      	movs	r3, #13
 800fa3a:	e0f9      	b.n	800fc30 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fa3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa40:	4413      	add	r3, r2
 800fa42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa44:	8912      	ldrh	r2, [r2, #8]
 800fa46:	0912      	lsrs	r2, r2, #4
 800fa48:	b292      	uxth	r2, r2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fa4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d201      	bcs.n	800fa5a <find_volume+0x2ae>
 800fa56:	230d      	movs	r3, #13
 800fa58:	e0ea      	b.n	800fc30 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fa5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa62:	8952      	ldrh	r2, [r2, #10]
 800fa64:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa68:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d103      	bne.n	800fa78 <find_volume+0x2cc>
 800fa70:	230d      	movs	r3, #13
 800fa72:	e0dd      	b.n	800fc30 <find_volume+0x484>
 800fa74:	200006dc 	.word	0x200006dc
		fmt = FS_FAT32;
 800fa78:	2303      	movs	r3, #3
 800fa7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d802      	bhi.n	800fa8e <find_volume+0x2e2>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d802      	bhi.n	800fa9e <find_volume+0x2f2>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	1c9a      	adds	r2, r3, #2
 800faa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800faa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800faaa:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800faac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800faae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab0:	441a      	add	r2, r3
 800fab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faba:	441a      	add	r2, r3
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fac4:	2b03      	cmp	r3, #3
 800fac6:	d11e      	bne.n	800fb06 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	3330      	adds	r3, #48	; 0x30
 800facc:	332a      	adds	r3, #42	; 0x2a
 800face:	4618      	mov	r0, r3
 800fad0:	f7fe fc60 	bl	800e394 <ld_word>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <find_volume+0x332>
 800fada:	230d      	movs	r3, #13
 800fadc:	e0a8      	b.n	800fc30 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae0:	891b      	ldrh	r3, [r3, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <find_volume+0x33e>
 800fae6:	230d      	movs	r3, #13
 800fae8:	e0a2      	b.n	800fc30 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	3330      	adds	r3, #48	; 0x30
 800faee:	332c      	adds	r3, #44	; 0x2c
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fc66 	bl	800e3c2 <ld_dword>
 800faf6:	4602      	mov	r2, r0
 800faf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	647b      	str	r3, [r7, #68]	; 0x44
 800fb04:	e01f      	b.n	800fb46 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb08:	891b      	ldrh	r3, [r3, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <find_volume+0x366>
 800fb0e:	230d      	movs	r3, #13
 800fb10:	e08e      	b.n	800fc30 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	6a1a      	ldr	r2, [r3, #32]
 800fb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb18:	441a      	add	r2, r3
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fb1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d103      	bne.n	800fb2e <find_volume+0x382>
 800fb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	e00a      	b.n	800fb44 <find_volume+0x398>
 800fb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb30:	695a      	ldr	r2, [r3, #20]
 800fb32:	4613      	mov	r3, r2
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	4413      	add	r3, r2
 800fb38:	085a      	lsrs	r2, r3, #1
 800fb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	f003 0301 	and.w	r3, r3, #1
 800fb42:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fb44:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fb50:	0a5b      	lsrs	r3, r3, #9
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d201      	bcs.n	800fb5a <find_volume+0x3ae>
 800fb56:	230d      	movs	r3, #13
 800fb58:	e06a      	b.n	800fc30 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb60:	611a      	str	r2, [r3, #16]
 800fb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb64:	691a      	ldr	r2, [r3, #16]
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	2280      	movs	r2, #128	; 0x80
 800fb6e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb74:	2b03      	cmp	r3, #3
 800fb76:	d149      	bne.n	800fc0c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	3330      	adds	r3, #48	; 0x30
 800fb7c:	3330      	adds	r3, #48	; 0x30
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fc08 	bl	800e394 <ld_word>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d140      	bne.n	800fc0c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	4619      	mov	r1, r3
 800fb90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb92:	f7fe fea1 	bl	800e8d8 <move_window>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d137      	bne.n	800fc0c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	2200      	movs	r2, #0
 800fba0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	3330      	adds	r3, #48	; 0x30
 800fba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fe fbf2 	bl	800e394 <ld_word>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d127      	bne.n	800fc0c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	3330      	adds	r3, #48	; 0x30
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe fbfe 	bl	800e3c2 <ld_dword>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	4a1b      	ldr	r2, [pc, #108]	; (800fc38 <find_volume+0x48c>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d11e      	bne.n	800fc0c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd0:	3330      	adds	r3, #48	; 0x30
 800fbd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fbf3 	bl	800e3c2 <ld_dword>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	4a17      	ldr	r2, [pc, #92]	; (800fc3c <find_volume+0x490>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d113      	bne.n	800fc0c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	3330      	adds	r3, #48	; 0x30
 800fbe8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fe fbe8 	bl	800e3c2 <ld_dword>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfa:	3330      	adds	r3, #48	; 0x30
 800fbfc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe fbde 	bl	800e3c2 <ld_dword>
 800fc06:	4602      	mov	r2, r0
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fc12:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fc14:	4b0a      	ldr	r3, [pc, #40]	; (800fc40 <find_volume+0x494>)
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	4b08      	ldr	r3, [pc, #32]	; (800fc40 <find_volume+0x494>)
 800fc1e:	801a      	strh	r2, [r3, #0]
 800fc20:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <find_volume+0x494>)
 800fc22:	881a      	ldrh	r2, [r3, #0]
 800fc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc26:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fc28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc2a:	f7fe fded 	bl	800e808 <clear_lock>
#endif
	return FR_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3758      	adds	r7, #88	; 0x58
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	41615252 	.word	0x41615252
 800fc3c:	61417272 	.word	0x61417272
 800fc40:	200006e0 	.word	0x200006e0

0800fc44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fc4e:	2309      	movs	r3, #9
 800fc50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d01c      	beq.n	800fc92 <validate+0x4e>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d018      	beq.n	800fc92 <validate+0x4e>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d013      	beq.n	800fc92 <validate+0x4e>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	889a      	ldrh	r2, [r3, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	88db      	ldrh	r3, [r3, #6]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d10c      	bne.n	800fc92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	785b      	ldrb	r3, [r3, #1]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe faea 	bl	800e258 <disk_status>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f003 0301 	and.w	r3, r3, #1
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <validate+0x4e>
			res = FR_OK;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d102      	bne.n	800fc9e <validate+0x5a>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	e000      	b.n	800fca0 <validate+0x5c>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	6013      	str	r3, [r2, #0]
	return res;
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
	...

0800fcb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b088      	sub	sp, #32
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fcc2:	f107 0310 	add.w	r3, r7, #16
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff fcd7 	bl	800f67a <get_ldnumber>
 800fccc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	da01      	bge.n	800fcd8 <f_mount+0x28>
 800fcd4:	230b      	movs	r3, #11
 800fcd6:	e02b      	b.n	800fd30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fcd8:	4a17      	ldr	r2, [pc, #92]	; (800fd38 <f_mount+0x88>)
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d005      	beq.n	800fcf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fce8:	69b8      	ldr	r0, [r7, #24]
 800fcea:	f7fe fd8d 	bl	800e808 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	490d      	ldr	r1, [pc, #52]	; (800fd38 <f_mount+0x88>)
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <f_mount+0x66>
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d001      	beq.n	800fd1a <f_mount+0x6a>
 800fd16:	2300      	movs	r3, #0
 800fd18:	e00a      	b.n	800fd30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fd1a:	f107 010c 	add.w	r1, r7, #12
 800fd1e:	f107 0308 	add.w	r3, r7, #8
 800fd22:	2200      	movs	r2, #0
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff fd41 	bl	800f7ac <find_volume>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3720      	adds	r7, #32
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	200006dc 	.word	0x200006dc

0800fd3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b098      	sub	sp, #96	; 0x60
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	4613      	mov	r3, r2
 800fd48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d101      	bne.n	800fd54 <f_open+0x18>
 800fd50:	2309      	movs	r3, #9
 800fd52:	e1ad      	b.n	80100b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fd54:	79fb      	ldrb	r3, [r7, #7]
 800fd56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd5c:	79fa      	ldrb	r2, [r7, #7]
 800fd5e:	f107 0110 	add.w	r1, r7, #16
 800fd62:	f107 0308 	add.w	r3, r7, #8
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fd20 	bl	800f7ac <find_volume>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f040 8191 	bne.w	801009e <f_open+0x362>
		dj.obj.fs = fs;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	f107 0314 	add.w	r3, r7, #20
 800fd86:	4611      	mov	r1, r2
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff fc05 	bl	800f598 <follow_path>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d11a      	bne.n	800fdd2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fda0:	b25b      	sxtb	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	da03      	bge.n	800fdae <f_open+0x72>
				res = FR_INVALID_NAME;
 800fda6:	2306      	movs	r3, #6
 800fda8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fdac:	e011      	b.n	800fdd2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	f023 0301 	bic.w	r3, r3, #1
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	bf14      	ite	ne
 800fdb8:	2301      	movne	r3, #1
 800fdba:	2300      	moveq	r3, #0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	f107 0314 	add.w	r3, r7, #20
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fe fbdc 	bl	800e584 <chk_lock>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fdd2:	79fb      	ldrb	r3, [r7, #7]
 800fdd4:	f003 031c 	and.w	r3, r3, #28
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d07f      	beq.n	800fedc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d017      	beq.n	800fe14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fde4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fde8:	2b04      	cmp	r3, #4
 800fdea:	d10e      	bne.n	800fe0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fdec:	f7fe fc24 	bl	800e638 <enq_lock>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d006      	beq.n	800fe04 <f_open+0xc8>
 800fdf6:	f107 0314 	add.w	r3, r7, #20
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7ff fb05 	bl	800f40a <dir_register>
 800fe00:	4603      	mov	r3, r0
 800fe02:	e000      	b.n	800fe06 <f_open+0xca>
 800fe04:	2312      	movs	r3, #18
 800fe06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fe0a:	79fb      	ldrb	r3, [r7, #7]
 800fe0c:	f043 0308 	orr.w	r3, r3, #8
 800fe10:	71fb      	strb	r3, [r7, #7]
 800fe12:	e010      	b.n	800fe36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fe14:	7ebb      	ldrb	r3, [r7, #26]
 800fe16:	f003 0311 	and.w	r3, r3, #17
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d003      	beq.n	800fe26 <f_open+0xea>
					res = FR_DENIED;
 800fe1e:	2307      	movs	r3, #7
 800fe20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe24:	e007      	b.n	800fe36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fe26:	79fb      	ldrb	r3, [r7, #7]
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d002      	beq.n	800fe36 <f_open+0xfa>
 800fe30:	2308      	movs	r3, #8
 800fe32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fe36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d168      	bne.n	800ff10 <f_open+0x1d4>
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	f003 0308 	and.w	r3, r3, #8
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d063      	beq.n	800ff10 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fe48:	f7fc f9d2 	bl	800c1f0 <get_fattime>
 800fe4c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe50:	330e      	adds	r3, #14
 800fe52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fe faf0 	bl	800e43a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fe5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5c:	3316      	adds	r3, #22
 800fe5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fe faea 	bl	800e43a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe68:	330b      	adds	r3, #11
 800fe6a:	2220      	movs	r2, #32
 800fe6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe72:	4611      	mov	r1, r2
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff fa34 	bl	800f2e2 <ld_clust>
 800fe7a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe80:	2200      	movs	r2, #0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff fa4c 	bl	800f320 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fe88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8a:	331c      	adds	r3, #28
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe fad3 	bl	800e43a <st_dword>
					fs->wflag = 1;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2201      	movs	r2, #1
 800fe98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d037      	beq.n	800ff10 <f_open+0x1d4>
						dw = fs->winsect;
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fea6:	f107 0314 	add.w	r3, r7, #20
 800feaa:	2200      	movs	r2, #0
 800feac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe ff60 	bl	800ed74 <remove_chain>
 800feb4:	4603      	mov	r3, r0
 800feb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800feba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d126      	bne.n	800ff10 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe fd06 	bl	800e8d8 <move_window>
 800fecc:	4603      	mov	r3, r0
 800fece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fed6:	3a01      	subs	r2, #1
 800fed8:	60da      	str	r2, [r3, #12]
 800feda:	e019      	b.n	800ff10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fedc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d115      	bne.n	800ff10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fee4:	7ebb      	ldrb	r3, [r7, #26]
 800fee6:	f003 0310 	and.w	r3, r3, #16
 800feea:	2b00      	cmp	r3, #0
 800feec:	d003      	beq.n	800fef6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800feee:	2304      	movs	r3, #4
 800fef0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fef4:	e00c      	b.n	800ff10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fef6:	79fb      	ldrb	r3, [r7, #7]
 800fef8:	f003 0302 	and.w	r3, r3, #2
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d007      	beq.n	800ff10 <f_open+0x1d4>
 800ff00:	7ebb      	ldrb	r3, [r7, #26]
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d002      	beq.n	800ff10 <f_open+0x1d4>
						res = FR_DENIED;
 800ff0a:	2307      	movs	r3, #7
 800ff0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ff10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d128      	bne.n	800ff6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ff18:	79fb      	ldrb	r3, [r7, #7]
 800ff1a:	f003 0308 	and.w	r3, r3, #8
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d003      	beq.n	800ff2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ff22:	79fb      	ldrb	r3, [r7, #7]
 800ff24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ff32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff38:	79fb      	ldrb	r3, [r7, #7]
 800ff3a:	f023 0301 	bic.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	bf14      	ite	ne
 800ff42:	2301      	movne	r3, #1
 800ff44:	2300      	moveq	r3, #0
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f107 0314 	add.w	r3, r7, #20
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fe fb91 	bl	800e678 <inc_lock>
 800ff56:	4602      	mov	r2, r0
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d102      	bne.n	800ff6a <f_open+0x22e>
 800ff64:	2302      	movs	r3, #2
 800ff66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f040 8095 	bne.w	801009e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff78:	4611      	mov	r1, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff f9b1 	bl	800f2e2 <ld_clust>
 800ff80:	4602      	mov	r2, r0
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ff86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff88:	331c      	adds	r3, #28
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe fa19 	bl	800e3c2 <ld_dword>
 800ff90:	4602      	mov	r2, r0
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff9c:	693a      	ldr	r2, [r7, #16]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	88da      	ldrh	r2, [r3, #6]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	79fa      	ldrb	r2, [r7, #7]
 800ffae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	3330      	adds	r3, #48	; 0x30
 800ffc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffca:	2100      	movs	r1, #0
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fe fa7f 	bl	800e4d0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ffd2:	79fb      	ldrb	r3, [r7, #7]
 800ffd4:	f003 0320 	and.w	r3, r3, #32
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d060      	beq.n	801009e <f_open+0x362>
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d05c      	beq.n	801009e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	68da      	ldr	r2, [r3, #12]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	895b      	ldrh	r3, [r3, #10]
 800fff0:	025b      	lsls	r3, r3, #9
 800fff2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	657b      	str	r3, [r7, #84]	; 0x54
 8010000:	e016      	b.n	8010030 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe fd20 	bl	800ea4c <get_fat>
 801000c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801000e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010010:	2b01      	cmp	r3, #1
 8010012:	d802      	bhi.n	801001a <f_open+0x2de>
 8010014:	2302      	movs	r3, #2
 8010016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801001a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801001c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010020:	d102      	bne.n	8010028 <f_open+0x2ec>
 8010022:	2301      	movs	r3, #1
 8010024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801002a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	657b      	str	r3, [r7, #84]	; 0x54
 8010030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010034:	2b00      	cmp	r3, #0
 8010036:	d103      	bne.n	8010040 <f_open+0x304>
 8010038:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801003a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801003c:	429a      	cmp	r2, r3
 801003e:	d8e0      	bhi.n	8010002 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010044:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801004a:	2b00      	cmp	r3, #0
 801004c:	d127      	bne.n	801009e <f_open+0x362>
 801004e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010054:	2b00      	cmp	r3, #0
 8010056:	d022      	beq.n	801009e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801005c:	4618      	mov	r0, r3
 801005e:	f7fe fcd7 	bl	800ea10 <clust2sect>
 8010062:	6478      	str	r0, [r7, #68]	; 0x44
 8010064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010066:	2b00      	cmp	r3, #0
 8010068:	d103      	bne.n	8010072 <f_open+0x336>
						res = FR_INT_ERR;
 801006a:	2302      	movs	r3, #2
 801006c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010070:	e015      	b.n	801009e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010074:	0a5a      	lsrs	r2, r3, #9
 8010076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010078:	441a      	add	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	7858      	ldrb	r0, [r3, #1]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6a1a      	ldr	r2, [r3, #32]
 801008c:	2301      	movs	r3, #1
 801008e:	f7fe f923 	bl	800e2d8 <disk_read>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <f_open+0x362>
 8010098:	2301      	movs	r3, #1
 801009a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801009e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <f_open+0x370>
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80100ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3760      	adds	r7, #96	; 0x60
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b08c      	sub	sp, #48	; 0x30
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
 80100c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2200      	movs	r2, #0
 80100ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f107 0210 	add.w	r2, r7, #16
 80100d6:	4611      	mov	r1, r2
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff fdb3 	bl	800fc44 <validate>
 80100de:	4603      	mov	r3, r0
 80100e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80100e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d107      	bne.n	80100fc <f_write+0x44>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	7d5b      	ldrb	r3, [r3, #21]
 80100f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80100f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <f_write+0x4a>
 80100fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010100:	e14b      	b.n	801039a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	7d1b      	ldrb	r3, [r3, #20]
 8010106:	f003 0302 	and.w	r3, r3, #2
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <f_write+0x5a>
 801010e:	2307      	movs	r3, #7
 8010110:	e143      	b.n	801039a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	699a      	ldr	r2, [r3, #24]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	441a      	add	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	699b      	ldr	r3, [r3, #24]
 801011e:	429a      	cmp	r2, r3
 8010120:	f080 812d 	bcs.w	801037e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	43db      	mvns	r3, r3
 801012a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801012c:	e127      	b.n	801037e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010136:	2b00      	cmp	r3, #0
 8010138:	f040 80e3 	bne.w	8010302 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	0a5b      	lsrs	r3, r3, #9
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	8952      	ldrh	r2, [r2, #10]
 8010146:	3a01      	subs	r2, #1
 8010148:	4013      	ands	r3, r2
 801014a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d143      	bne.n	80101da <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	699b      	ldr	r3, [r3, #24]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d10c      	bne.n	8010174 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	2b00      	cmp	r3, #0
 8010164:	d11a      	bne.n	801019c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2100      	movs	r1, #0
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe fe67 	bl	800ee3e <create_chain>
 8010170:	62b8      	str	r0, [r7, #40]	; 0x28
 8010172:	e013      	b.n	801019c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d007      	beq.n	801018c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	4619      	mov	r1, r3
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7fe fef3 	bl	800ef6e <clmt_clust>
 8010188:	62b8      	str	r0, [r7, #40]	; 0x28
 801018a:	e007      	b.n	801019c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	69db      	ldr	r3, [r3, #28]
 8010192:	4619      	mov	r1, r3
 8010194:	4610      	mov	r0, r2
 8010196:	f7fe fe52 	bl	800ee3e <create_chain>
 801019a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801019c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f000 80f2 	beq.w	8010388 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80101a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d104      	bne.n	80101b4 <f_write+0xfc>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2202      	movs	r2, #2
 80101ae:	755a      	strb	r2, [r3, #21]
 80101b0:	2302      	movs	r3, #2
 80101b2:	e0f2      	b.n	801039a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101ba:	d104      	bne.n	80101c6 <f_write+0x10e>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2201      	movs	r2, #1
 80101c0:	755a      	strb	r2, [r3, #21]
 80101c2:	2301      	movs	r3, #1
 80101c4:	e0e9      	b.n	801039a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101ca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <f_write+0x122>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	7d1b      	ldrb	r3, [r3, #20]
 80101de:	b25b      	sxtb	r3, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	da18      	bge.n	8010216 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	7858      	ldrb	r0, [r3, #1]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6a1a      	ldr	r2, [r3, #32]
 80101f2:	2301      	movs	r3, #1
 80101f4:	f7fe f890 	bl	800e318 <disk_write>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d004      	beq.n	8010208 <f_write+0x150>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2201      	movs	r2, #1
 8010202:	755a      	strb	r2, [r3, #21]
 8010204:	2301      	movs	r3, #1
 8010206:	e0c8      	b.n	801039a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	7d1b      	ldrb	r3, [r3, #20]
 801020c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010210:	b2da      	uxtb	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	69db      	ldr	r3, [r3, #28]
 801021c:	4619      	mov	r1, r3
 801021e:	4610      	mov	r0, r2
 8010220:	f7fe fbf6 	bl	800ea10 <clust2sect>
 8010224:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d104      	bne.n	8010236 <f_write+0x17e>
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2202      	movs	r2, #2
 8010230:	755a      	strb	r2, [r3, #21]
 8010232:	2302      	movs	r3, #2
 8010234:	e0b1      	b.n	801039a <f_write+0x2e2>
			sect += csect;
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	4413      	add	r3, r2
 801023c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	0a5b      	lsrs	r3, r3, #9
 8010242:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010244:	6a3b      	ldr	r3, [r7, #32]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d03c      	beq.n	80102c4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	6a3b      	ldr	r3, [r7, #32]
 801024e:	4413      	add	r3, r2
 8010250:	693a      	ldr	r2, [r7, #16]
 8010252:	8952      	ldrh	r2, [r2, #10]
 8010254:	4293      	cmp	r3, r2
 8010256:	d905      	bls.n	8010264 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	895b      	ldrh	r3, [r3, #10]
 801025c:	461a      	mov	r2, r3
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	7858      	ldrb	r0, [r3, #1]
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	69f9      	ldr	r1, [r7, #28]
 801026e:	f7fe f853 	bl	800e318 <disk_write>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d004      	beq.n	8010282 <f_write+0x1ca>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2201      	movs	r2, #1
 801027c:	755a      	strb	r2, [r3, #21]
 801027e:	2301      	movs	r3, #1
 8010280:	e08b      	b.n	801039a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6a1a      	ldr	r2, [r3, #32]
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	1ad3      	subs	r3, r2, r3
 801028a:	6a3a      	ldr	r2, [r7, #32]
 801028c:	429a      	cmp	r2, r3
 801028e:	d915      	bls.n	80102bc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6a1a      	ldr	r2, [r3, #32]
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	025b      	lsls	r3, r3, #9
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	4413      	add	r3, r2
 80102a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102a8:	4619      	mov	r1, r3
 80102aa:	f7fe f8f1 	bl	800e490 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	7d1b      	ldrb	r3, [r3, #20]
 80102b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102b6:	b2da      	uxtb	r2, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	025b      	lsls	r3, r3, #9
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80102c2:	e03f      	b.n	8010344 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6a1b      	ldr	r3, [r3, #32]
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d016      	beq.n	80102fc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	699a      	ldr	r2, [r3, #24]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d210      	bcs.n	80102fc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	7858      	ldrb	r0, [r3, #1]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102e4:	2301      	movs	r3, #1
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	f7fd fff6 	bl	800e2d8 <disk_read>
 80102ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d004      	beq.n	80102fc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2201      	movs	r2, #1
 80102f6:	755a      	strb	r2, [r3, #21]
 80102f8:	2301      	movs	r3, #1
 80102fa:	e04e      	b.n	801039a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	697a      	ldr	r2, [r7, #20]
 8010300:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	699b      	ldr	r3, [r3, #24]
 8010306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801030a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801030e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d901      	bls.n	801031c <f_write+0x264>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801032a:	4413      	add	r3, r2
 801032c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032e:	69f9      	ldr	r1, [r7, #28]
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe f8ad 	bl	800e490 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	7d1b      	ldrb	r3, [r3, #20]
 801033a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801033e:	b2da      	uxtb	r2, r3
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010344:	69fa      	ldr	r2, [r7, #28]
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	4413      	add	r3, r2
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	699a      	ldr	r2, [r3, #24]
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	441a      	add	r2, r3
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	619a      	str	r2, [r3, #24]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	68da      	ldr	r2, [r3, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	429a      	cmp	r2, r3
 8010362:	bf38      	it	cc
 8010364:	461a      	movcc	r2, r3
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	60da      	str	r2, [r3, #12]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	441a      	add	r2, r3
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	601a      	str	r2, [r3, #0]
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	f47f aed4 	bne.w	801012e <f_write+0x76>
 8010386:	e000      	b.n	801038a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010388:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7d1b      	ldrb	r3, [r3, #20]
 801038e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010392:	b2da      	uxtb	r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3730      	adds	r7, #48	; 0x30
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b086      	sub	sp, #24
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f107 0208 	add.w	r2, r7, #8
 80103b0:	4611      	mov	r1, r2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff fc46 	bl	800fc44 <validate>
 80103b8:	4603      	mov	r3, r0
 80103ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80103bc:	7dfb      	ldrb	r3, [r7, #23]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d168      	bne.n	8010494 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	7d1b      	ldrb	r3, [r3, #20]
 80103c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d062      	beq.n	8010494 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	7d1b      	ldrb	r3, [r3, #20]
 80103d2:	b25b      	sxtb	r3, r3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	da15      	bge.n	8010404 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	7858      	ldrb	r0, [r3, #1]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6a1a      	ldr	r2, [r3, #32]
 80103e6:	2301      	movs	r3, #1
 80103e8:	f7fd ff96 	bl	800e318 <disk_write>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <f_sync+0x54>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e04f      	b.n	8010496 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	7d1b      	ldrb	r3, [r3, #20]
 80103fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010404:	f7fb fef4 	bl	800c1f0 <get_fattime>
 8010408:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe fa60 	bl	800e8d8 <move_window>
 8010418:	4603      	mov	r3, r0
 801041a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801041c:	7dfb      	ldrb	r3, [r7, #23]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d138      	bne.n	8010494 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010426:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	330b      	adds	r3, #11
 801042c:	781a      	ldrb	r2, [r3, #0]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	330b      	adds	r3, #11
 8010432:	f042 0220 	orr.w	r2, r2, #32
 8010436:	b2d2      	uxtb	r2, r2
 8010438:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6818      	ldr	r0, [r3, #0]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	461a      	mov	r2, r3
 8010444:	68f9      	ldr	r1, [r7, #12]
 8010446:	f7fe ff6b 	bl	800f320 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f103 021c 	add.w	r2, r3, #28
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	4619      	mov	r1, r3
 8010456:	4610      	mov	r0, r2
 8010458:	f7fd ffef 	bl	800e43a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3316      	adds	r3, #22
 8010460:	6939      	ldr	r1, [r7, #16]
 8010462:	4618      	mov	r0, r3
 8010464:	f7fd ffe9 	bl	800e43a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	3312      	adds	r3, #18
 801046c:	2100      	movs	r1, #0
 801046e:	4618      	mov	r0, r3
 8010470:	f7fd ffc9 	bl	800e406 <st_word>
					fs->wflag = 1;
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2201      	movs	r2, #1
 8010478:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	4618      	mov	r0, r3
 801047e:	f7fe fa59 	bl	800e934 <sync_fs>
 8010482:	4603      	mov	r3, r0
 8010484:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	7d1b      	ldrb	r3, [r3, #20]
 801048a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010494:	7dfb      	ldrb	r3, [r7, #23]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3718      	adds	r7, #24
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b084      	sub	sp, #16
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7ff ff7b 	bl	80103a2 <f_sync>
 80104ac:	4603      	mov	r3, r0
 80104ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80104b0:	7bfb      	ldrb	r3, [r7, #15]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d118      	bne.n	80104e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f107 0208 	add.w	r2, r7, #8
 80104bc:	4611      	mov	r1, r2
 80104be:	4618      	mov	r0, r3
 80104c0:	f7ff fbc0 	bl	800fc44 <validate>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10c      	bne.n	80104e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fe f95e 	bl	800e794 <dec_lock>
 80104d8:	4603      	mov	r3, r0
 80104da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d102      	bne.n	80104e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b092      	sub	sp, #72	; 0x48
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	60f8      	str	r0, [r7, #12]
 80104fa:	60b9      	str	r1, [r7, #8]
 80104fc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80104fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010502:	f107 030c 	add.w	r3, r7, #12
 8010506:	2200      	movs	r2, #0
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff f94f 	bl	800f7ac <find_volume>
 801050e:	4603      	mov	r3, r0
 8010510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010514:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010518:	2b00      	cmp	r3, #0
 801051a:	f040 8099 	bne.w	8010650 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801051e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	691a      	ldr	r2, [r3, #16]
 8010528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052a:	695b      	ldr	r3, [r3, #20]
 801052c:	3b02      	subs	r3, #2
 801052e:	429a      	cmp	r2, r3
 8010530:	d804      	bhi.n	801053c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010534:	691a      	ldr	r2, [r3, #16]
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	e089      	b.n	8010650 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	2b01      	cmp	r3, #1
 8010546:	d128      	bne.n	801059a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010548:	2302      	movs	r3, #2
 801054a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010550:	f107 0314 	add.w	r3, r7, #20
 8010554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010556:	4618      	mov	r0, r3
 8010558:	f7fe fa78 	bl	800ea4c <get_fat>
 801055c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010564:	d103      	bne.n	801056e <f_getfree+0x7c>
 8010566:	2301      	movs	r3, #1
 8010568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801056c:	e063      	b.n	8010636 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	2b01      	cmp	r3, #1
 8010572:	d103      	bne.n	801057c <f_getfree+0x8a>
 8010574:	2302      	movs	r3, #2
 8010576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801057a:	e05c      	b.n	8010636 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	2b00      	cmp	r3, #0
 8010580:	d102      	bne.n	8010588 <f_getfree+0x96>
 8010582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010584:	3301      	adds	r3, #1
 8010586:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801058a:	3301      	adds	r3, #1
 801058c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010594:	429a      	cmp	r2, r3
 8010596:	d3db      	bcc.n	8010550 <f_getfree+0x5e>
 8010598:	e04d      	b.n	8010636 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801059a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a2:	6a1b      	ldr	r3, [r3, #32]
 80105a4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	637b      	str	r3, [r7, #52]	; 0x34
 80105aa:	2300      	movs	r3, #0
 80105ac:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80105ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d113      	bne.n	80105dc <f_getfree+0xea>
							res = move_window(fs, sect++);
 80105b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80105bc:	4619      	mov	r1, r3
 80105be:	f7fe f98b 	bl	800e8d8 <move_window>
 80105c2:	4603      	mov	r3, r0
 80105c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80105c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d131      	bne.n	8010634 <f_getfree+0x142>
							p = fs->win;
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	3330      	adds	r3, #48	; 0x30
 80105d4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80105d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105da:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d10f      	bne.n	8010604 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80105e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105e6:	f7fd fed5 	bl	800e394 <ld_word>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d102      	bne.n	80105f6 <f_getfree+0x104>
 80105f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f2:	3301      	adds	r3, #1
 80105f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	3302      	adds	r3, #2
 80105fa:	633b      	str	r3, [r7, #48]	; 0x30
 80105fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fe:	3b02      	subs	r3, #2
 8010600:	637b      	str	r3, [r7, #52]	; 0x34
 8010602:	e010      	b.n	8010626 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010606:	f7fd fedc 	bl	800e3c2 <ld_dword>
 801060a:	4603      	mov	r3, r0
 801060c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <f_getfree+0x128>
 8010614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010616:	3301      	adds	r3, #1
 8010618:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061c:	3304      	adds	r3, #4
 801061e:	633b      	str	r3, [r7, #48]	; 0x30
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	3b04      	subs	r3, #4
 8010624:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010628:	3b01      	subs	r3, #1
 801062a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801062c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1bd      	bne.n	80105ae <f_getfree+0xbc>
 8010632:	e000      	b.n	8010636 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010634:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801063a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010640:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	791a      	ldrb	r2, [r3, #4]
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	f042 0201 	orr.w	r2, r2, #1
 801064c:	b2d2      	uxtb	r2, r2
 801064e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010654:	4618      	mov	r0, r3
 8010656:	3748      	adds	r7, #72	; 0x48
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801065c:	b480      	push	{r7}
 801065e:	b087      	sub	sp, #28
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	4613      	mov	r3, r2
 8010668:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801066a:	2301      	movs	r3, #1
 801066c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801066e:	2300      	movs	r3, #0
 8010670:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010672:	4b1e      	ldr	r3, [pc, #120]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 8010674:	7a5b      	ldrb	r3, [r3, #9]
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d131      	bne.n	80106e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801067c:	4b1b      	ldr	r3, [pc, #108]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 801067e:	7a5b      	ldrb	r3, [r3, #9]
 8010680:	b2db      	uxtb	r3, r3
 8010682:	461a      	mov	r2, r3
 8010684:	4b19      	ldr	r3, [pc, #100]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 8010686:	2100      	movs	r1, #0
 8010688:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801068a:	4b18      	ldr	r3, [pc, #96]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 801068c:	7a5b      	ldrb	r3, [r3, #9]
 801068e:	b2db      	uxtb	r3, r3
 8010690:	4a16      	ldr	r2, [pc, #88]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801069a:	4b14      	ldr	r3, [pc, #80]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 801069c:	7a5b      	ldrb	r3, [r3, #9]
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	461a      	mov	r2, r3
 80106a2:	4b12      	ldr	r3, [pc, #72]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 80106a4:	4413      	add	r3, r2
 80106a6:	79fa      	ldrb	r2, [r7, #7]
 80106a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106aa:	4b10      	ldr	r3, [pc, #64]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 80106ac:	7a5b      	ldrb	r3, [r3, #9]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	1c5a      	adds	r2, r3, #1
 80106b2:	b2d1      	uxtb	r1, r2
 80106b4:	4a0d      	ldr	r2, [pc, #52]	; (80106ec <FATFS_LinkDriverEx+0x90>)
 80106b6:	7251      	strb	r1, [r2, #9]
 80106b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106ba:	7dbb      	ldrb	r3, [r7, #22]
 80106bc:	3330      	adds	r3, #48	; 0x30
 80106be:	b2da      	uxtb	r2, r3
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	3301      	adds	r3, #1
 80106c8:	223a      	movs	r2, #58	; 0x3a
 80106ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	3302      	adds	r3, #2
 80106d0:	222f      	movs	r2, #47	; 0x2f
 80106d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	3303      	adds	r3, #3
 80106d8:	2200      	movs	r2, #0
 80106da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106dc:	2300      	movs	r3, #0
 80106de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80106e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	371c      	adds	r7, #28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bc80      	pop	{r7}
 80106ea:	4770      	bx	lr
 80106ec:	20000704 	.word	0x20000704

080106f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80106fa:	2200      	movs	r2, #0
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7ff ffac 	bl	801065c <FATFS_LinkDriverEx>
 8010704:	4603      	mov	r3, r0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010714:	2200      	movs	r2, #0
 8010716:	4912      	ldr	r1, [pc, #72]	; (8010760 <MX_USB_DEVICE_Init+0x50>)
 8010718:	4812      	ldr	r0, [pc, #72]	; (8010764 <MX_USB_DEVICE_Init+0x54>)
 801071a:	f7fc fd78 	bl	800d20e <USBD_Init>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010724:	f7f2 fcd8 	bl	80030d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010728:	490f      	ldr	r1, [pc, #60]	; (8010768 <MX_USB_DEVICE_Init+0x58>)
 801072a:	480e      	ldr	r0, [pc, #56]	; (8010764 <MX_USB_DEVICE_Init+0x54>)
 801072c:	f7fc fd9a 	bl	800d264 <USBD_RegisterClass>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010736:	f7f2 fccf 	bl	80030d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801073a:	490c      	ldr	r1, [pc, #48]	; (801076c <MX_USB_DEVICE_Init+0x5c>)
 801073c:	4809      	ldr	r0, [pc, #36]	; (8010764 <MX_USB_DEVICE_Init+0x54>)
 801073e:	f7fc fccb 	bl	800d0d8 <USBD_CDC_RegisterInterface>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010748:	f7f2 fcc6 	bl	80030d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801074c:	4805      	ldr	r0, [pc, #20]	; (8010764 <MX_USB_DEVICE_Init+0x54>)
 801074e:	f7fc fda2 	bl	800d296 <USBD_Start>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010758:	f7f2 fcbe 	bl	80030d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801075c:	bf00      	nop
 801075e:	bd80      	pop	{r7, pc}
 8010760:	200001d4 	.word	0x200001d4
 8010764:	20000df4 	.word	0x20000df4
 8010768:	200000c0 	.word	0x200000c0
 801076c:	200001c4 	.word	0x200001c4

08010770 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010774:	2200      	movs	r2, #0
 8010776:	4905      	ldr	r1, [pc, #20]	; (801078c <CDC_Init_FS+0x1c>)
 8010778:	4805      	ldr	r0, [pc, #20]	; (8010790 <CDC_Init_FS+0x20>)
 801077a:	f7fc fcc3 	bl	800d104 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801077e:	4905      	ldr	r1, [pc, #20]	; (8010794 <CDC_Init_FS+0x24>)
 8010780:	4803      	ldr	r0, [pc, #12]	; (8010790 <CDC_Init_FS+0x20>)
 8010782:	f7fc fcd8 	bl	800d136 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010786:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010788:	4618      	mov	r0, r3
 801078a:	bd80      	pop	{r7, pc}
 801078c:	20001478 	.word	0x20001478
 8010790:	20000df4 	.word	0x20000df4
 8010794:	20001090 	.word	0x20001090

08010798 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010798:	b480      	push	{r7}
 801079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801079c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801079e:	4618      	mov	r0, r3
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bc80      	pop	{r7}
 80107a4:	4770      	bx	lr
	...

080107a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	6039      	str	r1, [r7, #0]
 80107b2:	71fb      	strb	r3, [r7, #7]
 80107b4:	4613      	mov	r3, r2
 80107b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	2b23      	cmp	r3, #35	; 0x23
 80107bc:	d84a      	bhi.n	8010854 <CDC_Control_FS+0xac>
 80107be:	a201      	add	r2, pc, #4	; (adr r2, 80107c4 <CDC_Control_FS+0x1c>)
 80107c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c4:	08010855 	.word	0x08010855
 80107c8:	08010855 	.word	0x08010855
 80107cc:	08010855 	.word	0x08010855
 80107d0:	08010855 	.word	0x08010855
 80107d4:	08010855 	.word	0x08010855
 80107d8:	08010855 	.word	0x08010855
 80107dc:	08010855 	.word	0x08010855
 80107e0:	08010855 	.word	0x08010855
 80107e4:	08010855 	.word	0x08010855
 80107e8:	08010855 	.word	0x08010855
 80107ec:	08010855 	.word	0x08010855
 80107f0:	08010855 	.word	0x08010855
 80107f4:	08010855 	.word	0x08010855
 80107f8:	08010855 	.word	0x08010855
 80107fc:	08010855 	.word	0x08010855
 8010800:	08010855 	.word	0x08010855
 8010804:	08010855 	.word	0x08010855
 8010808:	08010855 	.word	0x08010855
 801080c:	08010855 	.word	0x08010855
 8010810:	08010855 	.word	0x08010855
 8010814:	08010855 	.word	0x08010855
 8010818:	08010855 	.word	0x08010855
 801081c:	08010855 	.word	0x08010855
 8010820:	08010855 	.word	0x08010855
 8010824:	08010855 	.word	0x08010855
 8010828:	08010855 	.word	0x08010855
 801082c:	08010855 	.word	0x08010855
 8010830:	08010855 	.word	0x08010855
 8010834:	08010855 	.word	0x08010855
 8010838:	08010855 	.word	0x08010855
 801083c:	08010855 	.word	0x08010855
 8010840:	08010855 	.word	0x08010855
 8010844:	08010855 	.word	0x08010855
 8010848:	08010855 	.word	0x08010855
 801084c:	08010855 	.word	0x08010855
 8010850:	08010855 	.word	0x08010855
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010854:	bf00      	nop
  }

  return (USBD_OK);
 8010856:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	bc80      	pop	{r7}
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop

08010864 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	4816      	ldr	r0, [pc, #88]	; (80108cc <CDC_Receive_FS+0x68>)
 8010872:	f7fc fc60 	bl	800d136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010876:	4815      	ldr	r0, [pc, #84]	; (80108cc <CDC_Receive_FS+0x68>)
 8010878:	f7fc fc9f 	bl	800d1ba <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	73fb      	strb	r3, [r7, #15]

  memcpy(buffer+length, Buf, len);
 8010882:	4b13      	ldr	r3, [pc, #76]	; (80108d0 <CDC_Receive_FS+0x6c>)
 8010884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010888:	461a      	mov	r2, r3
 801088a:	4b12      	ldr	r3, [pc, #72]	; (80108d4 <CDC_Receive_FS+0x70>)
 801088c:	4413      	add	r3, r2
 801088e:	7bfa      	ldrb	r2, [r7, #15]
 8010890:	6879      	ldr	r1, [r7, #4]
 8010892:	4618      	mov	r0, r3
 8010894:	f001 fd2c 	bl	80122f0 <memcpy>
  memset(Buf, '\0', 16);
 8010898:	2210      	movs	r2, #16
 801089a:	2100      	movs	r1, #0
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f001 fd4f 	bl	8012340 <memset>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80108a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80108a6:	480c      	ldr	r0, [pc, #48]	; (80108d8 <CDC_Receive_FS+0x74>)
 80108a8:	f7f4 fd69 	bl	800537e <HAL_GPIO_TogglePin>

  length += len;
 80108ac:	7bfb      	ldrb	r3, [r7, #15]
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	4b07      	ldr	r3, [pc, #28]	; (80108d0 <CDC_Receive_FS+0x6c>)
 80108b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4413      	add	r3, r2
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	b21a      	sxth	r2, r3
 80108be:	4b04      	ldr	r3, [pc, #16]	; (80108d0 <CDC_Receive_FS+0x6c>)
 80108c0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80108c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20000df4 	.word	0x20000df4
 80108d0:	20000710 	.word	0x20000710
 80108d4:	20001860 	.word	0x20001860
 80108d8:	40020800 	.word	0x40020800

080108dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	460b      	mov	r3, r1
 80108e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80108ec:	4b0f      	ldr	r3, [pc, #60]	; (801092c <CDC_Transmit_FS+0x50>)
 80108ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80108f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80108fe:	2301      	movs	r3, #1
 8010900:	e010      	b.n	8010924 <CDC_Transmit_FS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010902:	887b      	ldrh	r3, [r7, #2]
 8010904:	461a      	mov	r2, r3
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	4808      	ldr	r0, [pc, #32]	; (801092c <CDC_Transmit_FS+0x50>)
 801090a:	f7fc fbfb 	bl	800d104 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801090e:	4807      	ldr	r0, [pc, #28]	; (801092c <CDC_Transmit_FS+0x50>)
 8010910:	f7fc fc24 	bl	800d15c <USBD_CDC_TransmitPacket>
 8010914:	4603      	mov	r3, r0
 8010916:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8010918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801091c:	4804      	ldr	r0, [pc, #16]	; (8010930 <CDC_Transmit_FS+0x54>)
 801091e:	f7f4 fd2e 	bl	800537e <HAL_GPIO_TogglePin>

  /* USER CODE END 7 */
  return result;
 8010922:	7bfb      	ldrb	r3, [r7, #15]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20000df4 	.word	0x20000df4
 8010930:	40020800 	.word	0x40020800

08010934 <CDC_ReadLine>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadLine(uint8_t* Buf)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
	memset(Buf, '\0', 16);
 801093c:	2210      	movs	r2, #16
 801093e:	2100      	movs	r1, #0
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f001 fcfd 	bl	8012340 <memset>

	while(buffer[length-1] != '\n') {
 8010946:	bf00      	nop
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <CDC_ReadLine+0x48>)
 801094a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801094e:	3b01      	subs	r3, #1
 8010950:	4a0b      	ldr	r2, [pc, #44]	; (8010980 <CDC_ReadLine+0x4c>)
 8010952:	5cd3      	ldrb	r3, [r2, r3]
 8010954:	2b0a      	cmp	r3, #10
 8010956:	d001      	beq.n	801095c <CDC_ReadLine+0x28>
		return 0;
 8010958:	2300      	movs	r3, #0
 801095a:	e00b      	b.n	8010974 <CDC_ReadLine+0x40>
	}

	memcpy(Buf, buffer, length*sizeof(uint8_t));
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <CDC_ReadLine+0x48>)
 801095e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010962:	461a      	mov	r2, r3
 8010964:	4906      	ldr	r1, [pc, #24]	; (8010980 <CDC_ReadLine+0x4c>)
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f001 fcc2 	bl	80122f0 <memcpy>
	return length;
 801096c:	4b03      	ldr	r3, [pc, #12]	; (801097c <CDC_ReadLine+0x48>)
 801096e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010972:	b2db      	uxtb	r3, r3
}
 8010974:	4618      	mov	r0, r3
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	20000710 	.word	0x20000710
 8010980:	20001860 	.word	0x20001860

08010984 <CDC_ClearBuffer>:
	return length;
}


uint8_t CDC_ClearBuffer()
{
 8010984:	b580      	push	{r7, lr}
 8010986:	af00      	add	r7, sp, #0
	memset(buffer, '\0', 16);
 8010988:	2210      	movs	r2, #16
 801098a:	2100      	movs	r1, #0
 801098c:	4804      	ldr	r0, [pc, #16]	; (80109a0 <CDC_ClearBuffer+0x1c>)
 801098e:	f001 fcd7 	bl	8012340 <memset>
	length = 0;
 8010992:	4b04      	ldr	r3, [pc, #16]	; (80109a4 <CDC_ClearBuffer+0x20>)
 8010994:	2200      	movs	r2, #0
 8010996:	801a      	strh	r2, [r3, #0]
}
 8010998:	bf00      	nop
 801099a:	4618      	mov	r0, r3
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	20001860 	.word	0x20001860
 80109a4:	20000710 	.word	0x20000710

080109a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	6039      	str	r1, [r7, #0]
 80109b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	2212      	movs	r2, #18
 80109b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80109ba:	4b03      	ldr	r3, [pc, #12]	; (80109c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bc80      	pop	{r7}
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	200001f0 	.word	0x200001f0

080109cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	6039      	str	r1, [r7, #0]
 80109d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	2204      	movs	r2, #4
 80109dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80109de:	4b03      	ldr	r3, [pc, #12]	; (80109ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bc80      	pop	{r7}
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	20000204 	.word	0x20000204

080109f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	4603      	mov	r3, r0
 80109f8:	6039      	str	r1, [r7, #0]
 80109fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109fc:	79fb      	ldrb	r3, [r7, #7]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d105      	bne.n	8010a0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	4907      	ldr	r1, [pc, #28]	; (8010a24 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a06:	4808      	ldr	r0, [pc, #32]	; (8010a28 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a08:	f7fd fb48 	bl	800e09c <USBD_GetString>
 8010a0c:	e004      	b.n	8010a18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a0e:	683a      	ldr	r2, [r7, #0]
 8010a10:	4904      	ldr	r1, [pc, #16]	; (8010a24 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a12:	4805      	ldr	r0, [pc, #20]	; (8010a28 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a14:	f7fd fb42 	bl	800e09c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a18:	4b02      	ldr	r3, [pc, #8]	; (8010a24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3708      	adds	r7, #8
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	20001870 	.word	0x20001870
 8010a28:	08017554 	.word	0x08017554

08010a2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	4603      	mov	r3, r0
 8010a34:	6039      	str	r1, [r7, #0]
 8010a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	4904      	ldr	r1, [pc, #16]	; (8010a4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a3c:	4804      	ldr	r0, [pc, #16]	; (8010a50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a3e:	f7fd fb2d 	bl	800e09c <USBD_GetString>
  return USBD_StrDesc;
 8010a42:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20001870 	.word	0x20001870
 8010a50:	0801756c 	.word	0x0801756c

08010a54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	6039      	str	r1, [r7, #0]
 8010a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	221a      	movs	r2, #26
 8010a64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010a66:	f000 f843 	bl	8010af0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010a6a:	4b02      	ldr	r3, [pc, #8]	; (8010a74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	20000208 	.word	0x20000208

08010a78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	6039      	str	r1, [r7, #0]
 8010a82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010a84:	79fb      	ldrb	r3, [r7, #7]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d105      	bne.n	8010a96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	4907      	ldr	r1, [pc, #28]	; (8010aac <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a8e:	4808      	ldr	r0, [pc, #32]	; (8010ab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010a90:	f7fd fb04 	bl	800e09c <USBD_GetString>
 8010a94:	e004      	b.n	8010aa0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	4904      	ldr	r1, [pc, #16]	; (8010aac <USBD_FS_ConfigStrDescriptor+0x34>)
 8010a9a:	4805      	ldr	r0, [pc, #20]	; (8010ab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010a9c:	f7fd fafe 	bl	800e09c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010aa0:	4b02      	ldr	r3, [pc, #8]	; (8010aac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	20001870 	.word	0x20001870
 8010ab0:	08017580 	.word	0x08017580

08010ab4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	4603      	mov	r3, r0
 8010abc:	6039      	str	r1, [r7, #0]
 8010abe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d105      	bne.n	8010ad2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	4907      	ldr	r1, [pc, #28]	; (8010ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010aca:	4808      	ldr	r0, [pc, #32]	; (8010aec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010acc:	f7fd fae6 	bl	800e09c <USBD_GetString>
 8010ad0:	e004      	b.n	8010adc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ad2:	683a      	ldr	r2, [r7, #0]
 8010ad4:	4904      	ldr	r1, [pc, #16]	; (8010ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ad6:	4805      	ldr	r0, [pc, #20]	; (8010aec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ad8:	f7fd fae0 	bl	800e09c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010adc:	4b02      	ldr	r3, [pc, #8]	; (8010ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20001870 	.word	0x20001870
 8010aec:	0801758c 	.word	0x0801758c

08010af0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010af6:	4b0f      	ldr	r3, [pc, #60]	; (8010b34 <Get_SerialNum+0x44>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010afc:	4b0e      	ldr	r3, [pc, #56]	; (8010b38 <Get_SerialNum+0x48>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b02:	4b0e      	ldr	r3, [pc, #56]	; (8010b3c <Get_SerialNum+0x4c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d009      	beq.n	8010b2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b16:	2208      	movs	r2, #8
 8010b18:	4909      	ldr	r1, [pc, #36]	; (8010b40 <Get_SerialNum+0x50>)
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f000 f814 	bl	8010b48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b20:	2204      	movs	r2, #4
 8010b22:	4908      	ldr	r1, [pc, #32]	; (8010b44 <Get_SerialNum+0x54>)
 8010b24:	68b8      	ldr	r0, [r7, #8]
 8010b26:	f000 f80f 	bl	8010b48 <IntToUnicode>
  }
}
 8010b2a:	bf00      	nop
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	1ff80050 	.word	0x1ff80050
 8010b38:	1ff80054 	.word	0x1ff80054
 8010b3c:	1ff80058 	.word	0x1ff80058
 8010b40:	2000020a 	.word	0x2000020a
 8010b44:	2000021a 	.word	0x2000021a

08010b48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b087      	sub	sp, #28
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	4613      	mov	r3, r2
 8010b54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	75fb      	strb	r3, [r7, #23]
 8010b5e:	e027      	b.n	8010bb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	0f1b      	lsrs	r3, r3, #28
 8010b64:	2b09      	cmp	r3, #9
 8010b66:	d80b      	bhi.n	8010b80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	0f1b      	lsrs	r3, r3, #28
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	7dfb      	ldrb	r3, [r7, #23]
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	4619      	mov	r1, r3
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	440b      	add	r3, r1
 8010b78:	3230      	adds	r2, #48	; 0x30
 8010b7a:	b2d2      	uxtb	r2, r2
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	e00a      	b.n	8010b96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	0f1b      	lsrs	r3, r3, #28
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
 8010b88:	005b      	lsls	r3, r3, #1
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	440b      	add	r3, r1
 8010b90:	3237      	adds	r2, #55	; 0x37
 8010b92:	b2d2      	uxtb	r2, r2
 8010b94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	011b      	lsls	r3, r3, #4
 8010b9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010b9c:	7dfb      	ldrb	r3, [r7, #23]
 8010b9e:	005b      	lsls	r3, r3, #1
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
 8010bac:	3301      	adds	r3, #1
 8010bae:	75fb      	strb	r3, [r7, #23]
 8010bb0:	7dfa      	ldrb	r2, [r7, #23]
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d3d3      	bcc.n	8010b60 <IntToUnicode+0x18>
  }
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bc80      	pop	{r7}
 8010bc2:	4770      	bx	lr

08010bc4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8010bd0:	78fb      	ldrb	r3, [r7, #3]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d106      	bne.n	8010be4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8010bd6:	4b09      	ldr	r3, [pc, #36]	; (8010bfc <HAL_PCDEx_SetConnectionState+0x38>)
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	4a08      	ldr	r2, [pc, #32]	; (8010bfc <HAL_PCDEx_SetConnectionState+0x38>)
 8010bdc:	f043 0301 	orr.w	r3, r3, #1
 8010be0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8010be2:	e005      	b.n	8010bf0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8010be4:	4b05      	ldr	r3, [pc, #20]	; (8010bfc <HAL_PCDEx_SetConnectionState+0x38>)
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	4a04      	ldr	r2, [pc, #16]	; (8010bfc <HAL_PCDEx_SetConnectionState+0x38>)
 8010bea:	f023 0301 	bic.w	r3, r3, #1
 8010bee:	6053      	str	r3, [r2, #4]
}
 8010bf0:	bf00      	nop
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bc80      	pop	{r7}
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	40010000 	.word	0x40010000

08010c00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a0d      	ldr	r2, [pc, #52]	; (8010c44 <HAL_PCD_MspInit+0x44>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d113      	bne.n	8010c3a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <HAL_PCD_MspInit+0x48>)
 8010c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c16:	4a0c      	ldr	r2, [pc, #48]	; (8010c48 <HAL_PCD_MspInit+0x48>)
 8010c18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010c1c:	6253      	str	r3, [r2, #36]	; 0x24
 8010c1e:	4b0a      	ldr	r3, [pc, #40]	; (8010c48 <HAL_PCD_MspInit+0x48>)
 8010c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	2014      	movs	r0, #20
 8010c30:	f7f3 ffb7 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010c34:	2014      	movs	r0, #20
 8010c36:	f7f3 ffd0 	bl	8004bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010c3a:	bf00      	nop
 8010c3c:	3710      	adds	r7, #16
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	40005c00 	.word	0x40005c00
 8010c48:	40023800 	.word	0x40023800

08010c4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010c60:	4619      	mov	r1, r3
 8010c62:	4610      	mov	r0, r2
 8010c64:	f7fc fb5f 	bl	800d326 <USBD_LL_SetupStage>
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010c82:	78fa      	ldrb	r2, [r7, #3]
 8010c84:	6879      	ldr	r1, [r7, #4]
 8010c86:	4613      	mov	r3, r2
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	440b      	add	r3, r1
 8010c90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	78fb      	ldrb	r3, [r7, #3]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	f7fc fb91 	bl	800d3c0 <USBD_LL_DataOutStage>
}
 8010c9e:	bf00      	nop
 8010ca0:	3708      	adds	r7, #8
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b082      	sub	sp, #8
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	460b      	mov	r3, r1
 8010cb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010cb8:	78fa      	ldrb	r2, [r7, #3]
 8010cba:	6879      	ldr	r1, [r7, #4]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	440b      	add	r3, r1
 8010cc6:	333c      	adds	r3, #60	; 0x3c
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	78fb      	ldrb	r3, [r7, #3]
 8010ccc:	4619      	mov	r1, r3
 8010cce:	f7fc fbe8 	bl	800d4a2 <USBD_LL_DataInStage>
}
 8010cd2:	bf00      	nop
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b082      	sub	sp, #8
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fc fcf3 	bl	800d6d4 <USBD_LL_SOF>
}
 8010cee:	bf00      	nop
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b084      	sub	sp, #16
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	2b02      	cmp	r3, #2
 8010d08:	d001      	beq.n	8010d0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010d0a:	f7f2 f9e5 	bl	80030d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010d14:	7bfa      	ldrb	r2, [r7, #15]
 8010d16:	4611      	mov	r1, r2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fc fca8 	bl	800d66e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fc fc61 	bl	800d5ec <USBD_LL_Reset>
}
 8010d2a:	bf00      	nop
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fc fca2 	bl	800d68c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d005      	beq.n	8010d5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d50:	4b04      	ldr	r3, [pc, #16]	; (8010d64 <HAL_PCD_SuspendCallback+0x30>)
 8010d52:	691b      	ldr	r3, [r3, #16]
 8010d54:	4a03      	ldr	r2, [pc, #12]	; (8010d64 <HAL_PCD_SuspendCallback+0x30>)
 8010d56:	f043 0306 	orr.w	r3, r3, #6
 8010d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	e000ed00 	.word	0xe000ed00

08010d68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fc fc9c 	bl	800d6b4 <USBD_LL_Resume>
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010d8c:	4a28      	ldr	r2, [pc, #160]	; (8010e30 <USBD_LL_Init+0xac>)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4a26      	ldr	r2, [pc, #152]	; (8010e30 <USBD_LL_Init+0xac>)
 8010d98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8010d9c:	4b24      	ldr	r3, [pc, #144]	; (8010e30 <USBD_LL_Init+0xac>)
 8010d9e:	4a25      	ldr	r2, [pc, #148]	; (8010e34 <USBD_LL_Init+0xb0>)
 8010da0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010da2:	4b23      	ldr	r3, [pc, #140]	; (8010e30 <USBD_LL_Init+0xac>)
 8010da4:	2208      	movs	r2, #8
 8010da6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010da8:	4b21      	ldr	r3, [pc, #132]	; (8010e30 <USBD_LL_Init+0xac>)
 8010daa:	2202      	movs	r2, #2
 8010dac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010dae:	4b20      	ldr	r3, [pc, #128]	; (8010e30 <USBD_LL_Init+0xac>)
 8010db0:	2202      	movs	r2, #2
 8010db2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010db4:	4b1e      	ldr	r3, [pc, #120]	; (8010e30 <USBD_LL_Init+0xac>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010dba:	4b1d      	ldr	r3, [pc, #116]	; (8010e30 <USBD_LL_Init+0xac>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010dc0:	481b      	ldr	r0, [pc, #108]	; (8010e30 <USBD_LL_Init+0xac>)
 8010dc2:	f7f5 fab3 	bl	800632c <HAL_PCD_Init>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d001      	beq.n	8010dd0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8010dcc:	f7f2 f984 	bl	80030d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010dd6:	2318      	movs	r3, #24
 8010dd8:	2200      	movs	r2, #0
 8010dda:	2100      	movs	r1, #0
 8010ddc:	f7f6 fe90 	bl	8007b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010de6:	2358      	movs	r3, #88	; 0x58
 8010de8:	2200      	movs	r2, #0
 8010dea:	2180      	movs	r1, #128	; 0x80
 8010dec:	f7f6 fe88 	bl	8007b00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010df6:	23c0      	movs	r3, #192	; 0xc0
 8010df8:	2200      	movs	r2, #0
 8010dfa:	2181      	movs	r1, #129	; 0x81
 8010dfc:	f7f6 fe80 	bl	8007b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010e06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	f7f6 fe77 	bl	8007b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	2182      	movs	r1, #130	; 0x82
 8010e20:	f7f6 fe6e 	bl	8007b00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3708      	adds	r7, #8
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	20001a70 	.word	0x20001a70
 8010e34:	40005c00 	.word	0x40005c00

08010e38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b084      	sub	sp, #16
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e40:	2300      	movs	r3, #0
 8010e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e44:	2300      	movs	r3, #0
 8010e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f5 fb4a 	bl	80064e8 <HAL_PCD_Start>
 8010e54:	4603      	mov	r3, r0
 8010e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e58:	7bfb      	ldrb	r3, [r7, #15]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f000 f944 	bl	80110e8 <USBD_Get_USB_Status>
 8010e60:	4603      	mov	r3, r0
 8010e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	4608      	mov	r0, r1
 8010e78:	4611      	mov	r1, r2
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	70fb      	strb	r3, [r7, #3]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70bb      	strb	r3, [r7, #2]
 8010e84:	4613      	mov	r3, r2
 8010e86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010e96:	78bb      	ldrb	r3, [r7, #2]
 8010e98:	883a      	ldrh	r2, [r7, #0]
 8010e9a:	78f9      	ldrb	r1, [r7, #3]
 8010e9c:	f7f5 fc66 	bl	800676c <HAL_PCD_EP_Open>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ea4:	7bfb      	ldrb	r3, [r7, #15]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f000 f91e 	bl	80110e8 <USBD_Get_USB_Status>
 8010eac:	4603      	mov	r3, r0
 8010eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b084      	sub	sp, #16
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010ed4:	78fa      	ldrb	r2, [r7, #3]
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7f5 fcad 	bl	8006838 <HAL_PCD_EP_Close>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ee2:	7bfb      	ldrb	r3, [r7, #15]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f000 f8ff 	bl	80110e8 <USBD_Get_USB_Status>
 8010eea:	4603      	mov	r3, r0
 8010eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3710      	adds	r7, #16
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f04:	2300      	movs	r3, #0
 8010f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010f12:	78fa      	ldrb	r2, [r7, #3]
 8010f14:	4611      	mov	r1, r2
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7f5 fd6d 	bl	80069f6 <HAL_PCD_EP_SetStall>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 f8e0 	bl	80110e8 <USBD_Get_USB_Status>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b084      	sub	sp, #16
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f42:	2300      	movs	r3, #0
 8010f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f46:	2300      	movs	r3, #0
 8010f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010f50:	78fa      	ldrb	r2, [r7, #3]
 8010f52:	4611      	mov	r1, r2
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7f5 fda0 	bl	8006a9a <HAL_PCD_EP_ClrStall>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f000 f8c1 	bl	80110e8 <USBD_Get_USB_Status>
 8010f66:	4603      	mov	r3, r0
 8010f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010f86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	da0c      	bge.n	8010faa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f90:	78fb      	ldrb	r3, [r7, #3]
 8010f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f96:	68f9      	ldr	r1, [r7, #12]
 8010f98:	1c5a      	adds	r2, r3, #1
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	440b      	add	r3, r1
 8010fa4:	3302      	adds	r3, #2
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	e00b      	b.n	8010fc2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010faa:	78fb      	ldrb	r3, [r7, #3]
 8010fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010fb0:	68f9      	ldr	r1, [r7, #12]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	4413      	add	r3, r2
 8010fb8:	00db      	lsls	r3, r3, #3
 8010fba:	440b      	add	r3, r1
 8010fbc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010fc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bc80      	pop	{r7}
 8010fca:	4770      	bx	lr

08010fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010fe6:	78fa      	ldrb	r2, [r7, #3]
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7f5 fb99 	bl	8006722 <HAL_PCD_SetAddress>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f000 f876 	bl	80110e8 <USBD_Get_USB_Status>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011000:	7bbb      	ldrb	r3, [r7, #14]
}
 8011002:	4618      	mov	r0, r3
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801100a:	b580      	push	{r7, lr}
 801100c:	b086      	sub	sp, #24
 801100e:	af00      	add	r7, sp, #0
 8011010:	60f8      	str	r0, [r7, #12]
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	461a      	mov	r2, r3
 8011016:	460b      	mov	r3, r1
 8011018:	72fb      	strb	r3, [r7, #11]
 801101a:	4613      	mov	r3, r2
 801101c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801101e:	2300      	movs	r3, #0
 8011020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011022:	2300      	movs	r3, #0
 8011024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801102c:	893b      	ldrh	r3, [r7, #8]
 801102e:	7af9      	ldrb	r1, [r7, #11]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	f7f5 fc9d 	bl	8006970 <HAL_PCD_EP_Transmit>
 8011036:	4603      	mov	r3, r0
 8011038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801103a:	7dfb      	ldrb	r3, [r7, #23]
 801103c:	4618      	mov	r0, r3
 801103e:	f000 f853 	bl	80110e8 <USBD_Get_USB_Status>
 8011042:	4603      	mov	r3, r0
 8011044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011046:	7dbb      	ldrb	r3, [r7, #22]
}
 8011048:	4618      	mov	r0, r3
 801104a:	3718      	adds	r7, #24
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	607a      	str	r2, [r7, #4]
 801105a:	461a      	mov	r2, r3
 801105c:	460b      	mov	r3, r1
 801105e:	72fb      	strb	r3, [r7, #11]
 8011060:	4613      	mov	r3, r2
 8011062:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011072:	893b      	ldrh	r3, [r7, #8]
 8011074:	7af9      	ldrb	r1, [r7, #11]
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	f7f5 fc26 	bl	80068c8 <HAL_PCD_EP_Receive>
 801107c:	4603      	mov	r3, r0
 801107e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011080:	7dfb      	ldrb	r3, [r7, #23]
 8011082:	4618      	mov	r0, r3
 8011084:	f000 f830 	bl	80110e8 <USBD_Get_USB_Status>
 8011088:	4603      	mov	r3, r0
 801108a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801108c:	7dbb      	ldrb	r3, [r7, #22]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3718      	adds	r7, #24
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80110a8:	78fa      	ldrb	r2, [r7, #3]
 80110aa:	4611      	mov	r1, r2
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7f5 fc48 	bl	8006942 <HAL_PCD_EP_GetRxCount>
 80110b2:	4603      	mov	r3, r0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80110c4:	4b02      	ldr	r3, [pc, #8]	; (80110d0 <USBD_static_malloc+0x14>)
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	370c      	adds	r7, #12
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bc80      	pop	{r7}
 80110ce:	4770      	bx	lr
 80110d0:	20000714 	.word	0x20000714

080110d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]

}
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bc80      	pop	{r7}
 80110e4:	4770      	bx	lr
	...

080110e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	4603      	mov	r3, r0
 80110f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	2b03      	cmp	r3, #3
 80110fa:	d817      	bhi.n	801112c <USBD_Get_USB_Status+0x44>
 80110fc:	a201      	add	r2, pc, #4	; (adr r2, 8011104 <USBD_Get_USB_Status+0x1c>)
 80110fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011102:	bf00      	nop
 8011104:	08011115 	.word	0x08011115
 8011108:	0801111b 	.word	0x0801111b
 801110c:	08011121 	.word	0x08011121
 8011110:	08011127 	.word	0x08011127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011114:	2300      	movs	r3, #0
 8011116:	73fb      	strb	r3, [r7, #15]
    break;
 8011118:	e00b      	b.n	8011132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801111a:	2302      	movs	r3, #2
 801111c:	73fb      	strb	r3, [r7, #15]
    break;
 801111e:	e008      	b.n	8011132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011120:	2301      	movs	r3, #1
 8011122:	73fb      	strb	r3, [r7, #15]
    break;
 8011124:	e005      	b.n	8011132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011126:	2302      	movs	r3, #2
 8011128:	73fb      	strb	r3, [r7, #15]
    break;
 801112a:	e002      	b.n	8011132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801112c:	2302      	movs	r3, #2
 801112e:	73fb      	strb	r3, [r7, #15]
    break;
 8011130:	bf00      	nop
  }
  return usb_status;
 8011132:	7bfb      	ldrb	r3, [r7, #15]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	bc80      	pop	{r7}
 801113c:	4770      	bx	lr
 801113e:	bf00      	nop

08011140 <_ZdlPv>:
 8011140:	f001 b8c0 	b.w	80122c4 <free>

08011144 <_ZdlPvj>:
 8011144:	f7ff bffc 	b.w	8011140 <_ZdlPv>

08011148 <_Znwj>:
 8011148:	2801      	cmp	r0, #1
 801114a:	bf38      	it	cc
 801114c:	2001      	movcc	r0, #1
 801114e:	b510      	push	{r4, lr}
 8011150:	4604      	mov	r4, r0
 8011152:	4620      	mov	r0, r4
 8011154:	f001 f8ae 	bl	80122b4 <malloc>
 8011158:	b930      	cbnz	r0, 8011168 <_Znwj+0x20>
 801115a:	f000 fbe3 	bl	8011924 <_ZSt15get_new_handlerv>
 801115e:	b908      	cbnz	r0, 8011164 <_Znwj+0x1c>
 8011160:	f001 f86e 	bl	8012240 <abort>
 8011164:	4780      	blx	r0
 8011166:	e7f4      	b.n	8011152 <_Znwj+0xa>
 8011168:	bd10      	pop	{r4, pc}

0801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801116a:	68c3      	ldr	r3, [r0, #12]
 801116c:	b510      	push	{r4, lr}
 801116e:	689a      	ldr	r2, [r3, #8]
 8011170:	60c2      	str	r2, [r0, #12]
 8011172:	b102      	cbz	r2, 8011176 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8011174:	6050      	str	r0, [r2, #4]
 8011176:	6842      	ldr	r2, [r0, #4]
 8011178:	605a      	str	r2, [r3, #4]
 801117a:	680c      	ldr	r4, [r1, #0]
 801117c:	4284      	cmp	r4, r0
 801117e:	d103      	bne.n	8011188 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8011180:	600b      	str	r3, [r1, #0]
 8011182:	6098      	str	r0, [r3, #8]
 8011184:	6043      	str	r3, [r0, #4]
 8011186:	bd10      	pop	{r4, pc}
 8011188:	6891      	ldr	r1, [r2, #8]
 801118a:	4281      	cmp	r1, r0
 801118c:	bf0c      	ite	eq
 801118e:	6093      	streq	r3, [r2, #8]
 8011190:	60d3      	strne	r3, [r2, #12]
 8011192:	e7f6      	b.n	8011182 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8011194:	6883      	ldr	r3, [r0, #8]
 8011196:	b510      	push	{r4, lr}
 8011198:	68da      	ldr	r2, [r3, #12]
 801119a:	6082      	str	r2, [r0, #8]
 801119c:	b102      	cbz	r2, 80111a0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801119e:	6050      	str	r0, [r2, #4]
 80111a0:	6842      	ldr	r2, [r0, #4]
 80111a2:	605a      	str	r2, [r3, #4]
 80111a4:	680c      	ldr	r4, [r1, #0]
 80111a6:	4284      	cmp	r4, r0
 80111a8:	d103      	bne.n	80111b2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80111aa:	600b      	str	r3, [r1, #0]
 80111ac:	60d8      	str	r0, [r3, #12]
 80111ae:	6043      	str	r3, [r0, #4]
 80111b0:	bd10      	pop	{r4, pc}
 80111b2:	68d1      	ldr	r1, [r2, #12]
 80111b4:	4281      	cmp	r1, r0
 80111b6:	bf0c      	ite	eq
 80111b8:	60d3      	streq	r3, [r2, #12]
 80111ba:	6093      	strne	r3, [r2, #8]
 80111bc:	e7f6      	b.n	80111ac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080111be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80111be:	7802      	ldrb	r2, [r0, #0]
 80111c0:	4603      	mov	r3, r0
 80111c2:	b92a      	cbnz	r2, 80111d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80111c4:	6842      	ldr	r2, [r0, #4]
 80111c6:	6852      	ldr	r2, [r2, #4]
 80111c8:	4282      	cmp	r2, r0
 80111ca:	d101      	bne.n	80111d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80111cc:	68d0      	ldr	r0, [r2, #12]
 80111ce:	4770      	bx	lr
 80111d0:	689a      	ldr	r2, [r3, #8]
 80111d2:	b122      	cbz	r2, 80111de <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80111d4:	4610      	mov	r0, r2
 80111d6:	68d2      	ldr	r2, [r2, #12]
 80111d8:	2a00      	cmp	r2, #0
 80111da:	d1fb      	bne.n	80111d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80111dc:	4770      	bx	lr
 80111de:	6858      	ldr	r0, [r3, #4]
 80111e0:	6882      	ldr	r2, [r0, #8]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d102      	bne.n	80111ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 80111e6:	4603      	mov	r3, r0
 80111e8:	6840      	ldr	r0, [r0, #4]
 80111ea:	e7f9      	b.n	80111e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 80111ec:	4770      	bx	lr

080111ee <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80111ee:	68c3      	ldr	r3, [r0, #12]
 80111f0:	b123      	cbz	r3, 80111fc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80111f2:	4618      	mov	r0, r3
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1fb      	bne.n	80111f2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80111fa:	4770      	bx	lr
 80111fc:	6843      	ldr	r3, [r0, #4]
 80111fe:	68da      	ldr	r2, [r3, #12]
 8011200:	4282      	cmp	r2, r0
 8011202:	d102      	bne.n	801120a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8011204:	4618      	mov	r0, r3
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	e7f9      	b.n	80111fe <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 801120a:	68c2      	ldr	r2, [r0, #12]
 801120c:	4293      	cmp	r3, r2
 801120e:	bf18      	it	ne
 8011210:	4618      	movne	r0, r3
 8011212:	4770      	bx	lr

08011214 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8011214:	f7ff bfd3 	b.w	80111be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08011218 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8011218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801121c:	461e      	mov	r6, r3
 801121e:	f103 0804 	add.w	r8, r3, #4
 8011222:	2300      	movs	r3, #0
 8011224:	460c      	mov	r4, r1
 8011226:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801122a:	604a      	str	r2, [r1, #4]
 801122c:	700b      	strb	r3, [r1, #0]
 801122e:	b300      	cbz	r0, 8011272 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8011230:	4296      	cmp	r6, r2
 8011232:	6091      	str	r1, [r2, #8]
 8011234:	d118      	bne.n	8011268 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8011236:	6071      	str	r1, [r6, #4]
 8011238:	60f4      	str	r4, [r6, #12]
 801123a:	2701      	movs	r7, #1
 801123c:	f04f 0900 	mov.w	r9, #0
 8011240:	6873      	ldr	r3, [r6, #4]
 8011242:	42a3      	cmp	r3, r4
 8011244:	d03f      	beq.n	80112c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8011246:	6860      	ldr	r0, [r4, #4]
 8011248:	7802      	ldrb	r2, [r0, #0]
 801124a:	2a00      	cmp	r2, #0
 801124c:	d13c      	bne.n	80112c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 801124e:	6845      	ldr	r5, [r0, #4]
 8011250:	68ab      	ldr	r3, [r5, #8]
 8011252:	4298      	cmp	r0, r3
 8011254:	d123      	bne.n	801129e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8011256:	68eb      	ldr	r3, [r5, #12]
 8011258:	b183      	cbz	r3, 801127c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801125a:	781a      	ldrb	r2, [r3, #0]
 801125c:	b972      	cbnz	r2, 801127c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801125e:	7007      	strb	r7, [r0, #0]
 8011260:	701f      	strb	r7, [r3, #0]
 8011262:	702a      	strb	r2, [r5, #0]
 8011264:	462c      	mov	r4, r5
 8011266:	e7eb      	b.n	8011240 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8011268:	68b3      	ldr	r3, [r6, #8]
 801126a:	4293      	cmp	r3, r2
 801126c:	d1e5      	bne.n	801123a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801126e:	60b1      	str	r1, [r6, #8]
 8011270:	e7e3      	b.n	801123a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8011272:	60d1      	str	r1, [r2, #12]
 8011274:	68f3      	ldr	r3, [r6, #12]
 8011276:	4293      	cmp	r3, r2
 8011278:	d1df      	bne.n	801123a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801127a:	e7dd      	b.n	8011238 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801127c:	68c3      	ldr	r3, [r0, #12]
 801127e:	42a3      	cmp	r3, r4
 8011280:	d103      	bne.n	801128a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8011282:	4641      	mov	r1, r8
 8011284:	f7ff ff71 	bl	801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011288:	4604      	mov	r4, r0
 801128a:	6863      	ldr	r3, [r4, #4]
 801128c:	4641      	mov	r1, r8
 801128e:	701f      	strb	r7, [r3, #0]
 8011290:	4628      	mov	r0, r5
 8011292:	f885 9000 	strb.w	r9, [r5]
 8011296:	f7ff ff7d 	bl	8011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801129a:	4625      	mov	r5, r4
 801129c:	e7e2      	b.n	8011264 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 801129e:	b113      	cbz	r3, 80112a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80112a0:	781a      	ldrb	r2, [r3, #0]
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	d0db      	beq.n	801125e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80112a6:	6883      	ldr	r3, [r0, #8]
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	d103      	bne.n	80112b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80112ac:	4641      	mov	r1, r8
 80112ae:	f7ff ff71 	bl	8011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80112b2:	4604      	mov	r4, r0
 80112b4:	6863      	ldr	r3, [r4, #4]
 80112b6:	4641      	mov	r1, r8
 80112b8:	701f      	strb	r7, [r3, #0]
 80112ba:	4628      	mov	r0, r5
 80112bc:	f885 9000 	strb.w	r9, [r5]
 80112c0:	f7ff ff53 	bl	801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80112c4:	e7e9      	b.n	801129a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80112c6:	4623      	mov	r3, r4
 80112c8:	2201      	movs	r2, #1
 80112ca:	701a      	strb	r2, [r3, #0]
 80112cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080112d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 80112d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d4:	460f      	mov	r7, r1
 80112d6:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 80112da:	4604      	mov	r4, r0
 80112dc:	2e00      	cmp	r6, #0
 80112de:	d03e      	beq.n	801135e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 80112e0:	2900      	cmp	r1, #0
 80112e2:	d03d      	beq.n	8011360 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 80112e4:	460a      	mov	r2, r1
 80112e6:	4613      	mov	r3, r2
 80112e8:	6892      	ldr	r2, [r2, #8]
 80112ea:	2a00      	cmp	r2, #0
 80112ec:	d1fb      	bne.n	80112e6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 80112ee:	42a3      	cmp	r3, r4
 80112f0:	68da      	ldr	r2, [r3, #12]
 80112f2:	d04b      	beq.n	801138c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 80112f4:	4299      	cmp	r1, r3
 80112f6:	6073      	str	r3, [r6, #4]
 80112f8:	609e      	str	r6, [r3, #8]
 80112fa:	d027      	beq.n	801134c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 80112fc:	685d      	ldr	r5, [r3, #4]
 80112fe:	b102      	cbz	r2, 8011302 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 8011300:	6055      	str	r5, [r2, #4]
 8011302:	6858      	ldr	r0, [r3, #4]
 8011304:	6082      	str	r2, [r0, #8]
 8011306:	60d9      	str	r1, [r3, #12]
 8011308:	68e1      	ldr	r1, [r4, #12]
 801130a:	604b      	str	r3, [r1, #4]
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	42a1      	cmp	r1, r4
 8011310:	d11e      	bne.n	8011350 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 8011312:	607b      	str	r3, [r7, #4]
 8011314:	4616      	mov	r6, r2
 8011316:	6861      	ldr	r1, [r4, #4]
 8011318:	7820      	ldrb	r0, [r4, #0]
 801131a:	6059      	str	r1, [r3, #4]
 801131c:	7819      	ldrb	r1, [r3, #0]
 801131e:	7018      	strb	r0, [r3, #0]
 8011320:	7021      	strb	r1, [r4, #0]
 8011322:	7823      	ldrb	r3, [r4, #0]
 8011324:	b17b      	cbz	r3, 8011346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 8011326:	f04f 0800 	mov.w	r8, #0
 801132a:	f04f 0901 	mov.w	r9, #1
 801132e:	f107 0a04 	add.w	sl, r7, #4
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	42b3      	cmp	r3, r6
 8011336:	d075      	beq.n	8011424 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>
 8011338:	2e00      	cmp	r6, #0
 801133a:	d03e      	beq.n	80113ba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 801133c:	7833      	ldrb	r3, [r6, #0]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d03b      	beq.n	80113ba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 8011342:	2301      	movs	r3, #1
 8011344:	7033      	strb	r3, [r6, #0]
 8011346:	4620      	mov	r0, r4
 8011348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801134c:	461d      	mov	r5, r3
 801134e:	e7dd      	b.n	801130c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 8011350:	6861      	ldr	r1, [r4, #4]
 8011352:	6888      	ldr	r0, [r1, #8]
 8011354:	42a0      	cmp	r0, r4
 8011356:	bf0c      	ite	eq
 8011358:	608b      	streq	r3, [r1, #8]
 801135a:	60cb      	strne	r3, [r1, #12]
 801135c:	e7da      	b.n	8011314 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 801135e:	460e      	mov	r6, r1
 8011360:	6865      	ldr	r5, [r4, #4]
 8011362:	b106      	cbz	r6, 8011366 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 8011364:	6075      	str	r5, [r6, #4]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	42a3      	cmp	r3, r4
 801136a:	d111      	bne.n	8011390 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 801136c:	607e      	str	r6, [r7, #4]
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	42a3      	cmp	r3, r4
 8011372:	d103      	bne.n	801137c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 8011374:	68e3      	ldr	r3, [r4, #12]
 8011376:	b993      	cbnz	r3, 801139e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 8011378:	6863      	ldr	r3, [r4, #4]
 801137a:	60bb      	str	r3, [r7, #8]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	42a3      	cmp	r3, r4
 8011380:	d1cf      	bne.n	8011322 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8011382:	68a3      	ldr	r3, [r4, #8]
 8011384:	b993      	cbnz	r3, 80113ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 8011386:	6863      	ldr	r3, [r4, #4]
 8011388:	60fb      	str	r3, [r7, #12]
 801138a:	e7ca      	b.n	8011322 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 801138c:	4616      	mov	r6, r2
 801138e:	e7e7      	b.n	8011360 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	689a      	ldr	r2, [r3, #8]
 8011394:	42a2      	cmp	r2, r4
 8011396:	bf0c      	ite	eq
 8011398:	609e      	streq	r6, [r3, #8]
 801139a:	60de      	strne	r6, [r3, #12]
 801139c:	e7e7      	b.n	801136e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 801139e:	4633      	mov	r3, r6
 80113a0:	461a      	mov	r2, r3
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1fb      	bne.n	80113a0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 80113a8:	60ba      	str	r2, [r7, #8]
 80113aa:	e7e7      	b.n	801137c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 80113ac:	4633      	mov	r3, r6
 80113ae:	461a      	mov	r2, r3
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1fb      	bne.n	80113ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 80113b6:	60fa      	str	r2, [r7, #12]
 80113b8:	e7b3      	b.n	8011322 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 80113ba:	68a8      	ldr	r0, [r5, #8]
 80113bc:	42b0      	cmp	r0, r6
 80113be:	d134      	bne.n	801142a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15a>
 80113c0:	68e8      	ldr	r0, [r5, #12]
 80113c2:	7803      	ldrb	r3, [r0, #0]
 80113c4:	b93b      	cbnz	r3, 80113d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x106>
 80113c6:	f880 9000 	strb.w	r9, [r0]
 80113ca:	4651      	mov	r1, sl
 80113cc:	4628      	mov	r0, r5
 80113ce:	702b      	strb	r3, [r5, #0]
 80113d0:	f7ff fecb 	bl	801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80113d4:	68e8      	ldr	r0, [r5, #12]
 80113d6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80113da:	b112      	cbz	r2, 80113e2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x112>
 80113dc:	7811      	ldrb	r1, [r2, #0]
 80113de:	2901      	cmp	r1, #1
 80113e0:	d109      	bne.n	80113f6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 80113e2:	b113      	cbz	r3, 80113ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 80113e4:	7819      	ldrb	r1, [r3, #0]
 80113e6:	2901      	cmp	r1, #1
 80113e8:	d105      	bne.n	80113f6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 80113ea:	686b      	ldr	r3, [r5, #4]
 80113ec:	462e      	mov	r6, r5
 80113ee:	f880 8000 	strb.w	r8, [r0]
 80113f2:	461d      	mov	r5, r3
 80113f4:	e79d      	b.n	8011332 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x62>
 80113f6:	b113      	cbz	r3, 80113fe <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12e>
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d107      	bne.n	801140e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13e>
 80113fe:	2301      	movs	r3, #1
 8011400:	7013      	strb	r3, [r2, #0]
 8011402:	2300      	movs	r3, #0
 8011404:	4651      	mov	r1, sl
 8011406:	7003      	strb	r3, [r0, #0]
 8011408:	f7ff fec4 	bl	8011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801140c:	68e8      	ldr	r0, [r5, #12]
 801140e:	2201      	movs	r2, #1
 8011410:	782b      	ldrb	r3, [r5, #0]
 8011412:	7003      	strb	r3, [r0, #0]
 8011414:	68c3      	ldr	r3, [r0, #12]
 8011416:	702a      	strb	r2, [r5, #0]
 8011418:	b103      	cbz	r3, 801141c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14c>
 801141a:	701a      	strb	r2, [r3, #0]
 801141c:	4651      	mov	r1, sl
 801141e:	4628      	mov	r0, r5
 8011420:	f7ff fea3 	bl	801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011424:	2e00      	cmp	r6, #0
 8011426:	d18c      	bne.n	8011342 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x72>
 8011428:	e78d      	b.n	8011346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 801142a:	7803      	ldrb	r3, [r0, #0]
 801142c:	b93b      	cbnz	r3, 801143e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16e>
 801142e:	f880 9000 	strb.w	r9, [r0]
 8011432:	4651      	mov	r1, sl
 8011434:	4628      	mov	r0, r5
 8011436:	702b      	strb	r3, [r5, #0]
 8011438:	f7ff feac 	bl	8011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801143c:	68a8      	ldr	r0, [r5, #8]
 801143e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011442:	b112      	cbz	r2, 801144a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 8011444:	7811      	ldrb	r1, [r2, #0]
 8011446:	2901      	cmp	r1, #1
 8011448:	d104      	bne.n	8011454 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x184>
 801144a:	2b00      	cmp	r3, #0
 801144c:	d0cd      	beq.n	80113ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 801144e:	7819      	ldrb	r1, [r3, #0]
 8011450:	2901      	cmp	r1, #1
 8011452:	d0ca      	beq.n	80113ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 8011454:	b113      	cbz	r3, 801145c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18c>
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d107      	bne.n	801146c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19c>
 801145c:	2301      	movs	r3, #1
 801145e:	7013      	strb	r3, [r2, #0]
 8011460:	2300      	movs	r3, #0
 8011462:	4651      	mov	r1, sl
 8011464:	7003      	strb	r3, [r0, #0]
 8011466:	f7ff fe80 	bl	801116a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801146a:	68a8      	ldr	r0, [r5, #8]
 801146c:	2201      	movs	r2, #1
 801146e:	782b      	ldrb	r3, [r5, #0]
 8011470:	7003      	strb	r3, [r0, #0]
 8011472:	6883      	ldr	r3, [r0, #8]
 8011474:	702a      	strb	r2, [r5, #0]
 8011476:	b103      	cbz	r3, 801147a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
 8011478:	701a      	strb	r2, [r3, #0]
 801147a:	4651      	mov	r1, sl
 801147c:	4628      	mov	r0, r5
 801147e:	f7ff fe89 	bl	8011194 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8011482:	e7cf      	b.n	8011424 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>

08011484 <_ZSt17__throw_bad_allocv>:
 8011484:	b508      	push	{r3, lr}
 8011486:	f000 fedb 	bl	8012240 <abort>

0801148a <_ZSt19__throw_logic_errorPKc>:
 801148a:	b508      	push	{r3, lr}
 801148c:	f000 fed8 	bl	8012240 <abort>

08011490 <_ZSt20__throw_length_errorPKc>:
 8011490:	b508      	push	{r3, lr}
 8011492:	f000 fed5 	bl	8012240 <abort>

08011496 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8011496:	b40f      	push	{r0, r1, r2, r3}
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	f107 0410 	add.w	r4, r7, #16
 80114a2:	f854 5b04 	ldr.w	r5, [r4], #4
 80114a6:	4628      	mov	r0, r5
 80114a8:	f7ee fe6a 	bl	8000180 <strlen>
 80114ac:	f200 2307 	addw	r3, r0, #519	; 0x207
 80114b0:	f023 0307 	bic.w	r3, r3, #7
 80114b4:	ebad 0d03 	sub.w	sp, sp, r3
 80114b8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80114bc:	4623      	mov	r3, r4
 80114be:	462a      	mov	r2, r5
 80114c0:	4668      	mov	r0, sp
 80114c2:	607c      	str	r4, [r7, #4]
 80114c4:	f000 f854 	bl	8011570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80114c8:	f000 feba 	bl	8012240 <abort>

080114cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80114cc:	4606      	mov	r6, r0
 80114ce:	460c      	mov	r4, r1
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b09c      	sub	sp, #112	; 0x70
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	1ba4      	subs	r4, r4, r6
 80114d8:	2269      	movs	r2, #105	; 0x69
 80114da:	490e      	ldr	r1, [pc, #56]	; (8011514 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80114dc:	1d38      	adds	r0, r7, #4
 80114de:	f000 ff07 	bl	80122f0 <memcpy>
 80114e2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80114e6:	f023 0307 	bic.w	r3, r3, #7
 80114ea:	ebad 0d03 	sub.w	sp, sp, r3
 80114ee:	466d      	mov	r5, sp
 80114f0:	2268      	movs	r2, #104	; 0x68
 80114f2:	1d39      	adds	r1, r7, #4
 80114f4:	4628      	mov	r0, r5
 80114f6:	f000 fefb 	bl	80122f0 <memcpy>
 80114fa:	4622      	mov	r2, r4
 80114fc:	4631      	mov	r1, r6
 80114fe:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8011502:	f000 fef5 	bl	80122f0 <memcpy>
 8011506:	2300      	movs	r3, #0
 8011508:	442c      	add	r4, r5
 801150a:	4628      	mov	r0, r5
 801150c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8011510:	f7ff ffbb 	bl	801148a <_ZSt19__throw_logic_errorPKc>
 8011514:	0801765c 	.word	0x0801765c

08011518 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151c:	af00      	add	r7, sp, #0
 801151e:	b084      	sub	sp, #16
 8011520:	466d      	mov	r5, sp
 8011522:	f105 040c 	add.w	r4, r5, #12
 8011526:	4623      	mov	r3, r4
 8011528:	f04f 0c0a 	mov.w	ip, #10
 801152c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 801156c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8011530:	fbb2 f6fc 	udiv	r6, r2, ip
 8011534:	fb0c 2e16 	mls	lr, ip, r6, r2
 8011538:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801153c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8011540:	4696      	mov	lr, r2
 8011542:	f1be 0f09 	cmp.w	lr, #9
 8011546:	4632      	mov	r2, r6
 8011548:	d8f2      	bhi.n	8011530 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801154a:	1ae4      	subs	r4, r4, r3
 801154c:	428c      	cmp	r4, r1
 801154e:	d809      	bhi.n	8011564 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8011550:	f1c4 010c 	rsb	r1, r4, #12
 8011554:	4622      	mov	r2, r4
 8011556:	4429      	add	r1, r5
 8011558:	f000 feca 	bl	80122f0 <memcpy>
 801155c:	4620      	mov	r0, r4
 801155e:	46bd      	mov	sp, r7
 8011560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011568:	e7f8      	b.n	801155c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801156a:	bf00      	nop
 801156c:	080176c5 	.word	0x080176c5

08011570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011574:	4607      	mov	r7, r0
 8011576:	4615      	mov	r5, r2
 8011578:	4604      	mov	r4, r0
 801157a:	3901      	subs	r1, #1
 801157c:	eb00 0801 	add.w	r8, r0, r1
 8011580:	782a      	ldrb	r2, [r5, #0]
 8011582:	b362      	cbz	r2, 80115de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8011584:	4544      	cmp	r4, r8
 8011586:	d22e      	bcs.n	80115e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8011588:	2a25      	cmp	r2, #37	; 0x25
 801158a:	d107      	bne.n	801159c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801158c:	786a      	ldrb	r2, [r5, #1]
 801158e:	2a73      	cmp	r2, #115	; 0x73
 8011590:	d009      	beq.n	80115a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8011592:	2a7a      	cmp	r2, #122	; 0x7a
 8011594:	d012      	beq.n	80115bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011596:	2a25      	cmp	r2, #37	; 0x25
 8011598:	d100      	bne.n	801159c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801159a:	3501      	adds	r5, #1
 801159c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80115a0:	f804 2b01 	strb.w	r2, [r4], #1
 80115a4:	e7ec      	b.n	8011580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115aa:	3a01      	subs	r2, #1
 80115ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80115b0:	b1e9      	cbz	r1, 80115ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80115b2:	4544      	cmp	r4, r8
 80115b4:	d017      	beq.n	80115e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80115b6:	f804 1b01 	strb.w	r1, [r4], #1
 80115ba:	e7f7      	b.n	80115ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80115bc:	78aa      	ldrb	r2, [r5, #2]
 80115be:	2a75      	cmp	r2, #117	; 0x75
 80115c0:	d1ec      	bne.n	801159c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80115c2:	461e      	mov	r6, r3
 80115c4:	4620      	mov	r0, r4
 80115c6:	f856 2b04 	ldr.w	r2, [r6], #4
 80115ca:	eba8 0104 	sub.w	r1, r8, r4
 80115ce:	f7ff ffa3 	bl	8011518 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	dd07      	ble.n	80115e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80115d6:	4633      	mov	r3, r6
 80115d8:	4404      	add	r4, r0
 80115da:	3503      	adds	r5, #3
 80115dc:	e7d0      	b.n	8011580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115de:	7022      	strb	r2, [r4, #0]
 80115e0:	1be0      	subs	r0, r4, r7
 80115e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e6:	4621      	mov	r1, r4
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7ff ff6f 	bl	80114cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80115ee:	3502      	adds	r5, #2
 80115f0:	e7c6      	b.n	8011580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

080115f2 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 80115f2:	4613      	mov	r3, r2
 80115f4:	460a      	mov	r2, r1
 80115f6:	b111      	cbz	r1, 80115fe <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80115f8:	7819      	ldrb	r1, [r3, #0]
 80115fa:	f000 be6b 	b.w	80122d4 <memchr>
 80115fe:	4608      	mov	r0, r1
 8011600:	4770      	bx	lr

08011602 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8011602:	b10a      	cbz	r2, 8011608 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8011604:	f000 be74 	b.w	80122f0 <memcpy>
 8011608:	4770      	bx	lr
	...

0801160c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801160c:	b508      	push	{r3, lr}
 801160e:	680b      	ldr	r3, [r1, #0]
 8011610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011614:	d302      	bcc.n	801161c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8011616:	480d      	ldr	r0, [pc, #52]	; (801164c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8011618:	f7ff ff3a 	bl	8011490 <_ZSt20__throw_length_errorPKc>
 801161c:	4293      	cmp	r3, r2
 801161e:	d90b      	bls.n	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011620:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011624:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8011628:	d206      	bcs.n	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801162a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801162e:	bf2a      	itet	cs
 8011630:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8011634:	6008      	strcc	r0, [r1, #0]
 8011636:	600b      	strcs	r3, [r1, #0]
 8011638:	6808      	ldr	r0, [r1, #0]
 801163a:	3001      	adds	r0, #1
 801163c:	d501      	bpl.n	8011642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801163e:	f7ff ff21 	bl	8011484 <_ZSt17__throw_bad_allocv>
 8011642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011646:	f7ff bd7f 	b.w	8011148 <_Znwj>
 801164a:	bf00      	nop
 801164c:	080176d0 	.word	0x080176d0

08011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011650:	4603      	mov	r3, r0
 8011652:	f853 0b08 	ldr.w	r0, [r3], #8
 8011656:	4298      	cmp	r0, r3
 8011658:	d001      	beq.n	801165e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801165a:	f7ff bd71 	b.w	8011140 <_ZdlPv>
 801165e:	4770      	bx	lr

08011660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011660:	b508      	push	{r3, lr}
 8011662:	4603      	mov	r3, r0
 8011664:	4608      	mov	r0, r1
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	4611      	mov	r1, r2
 801166a:	4298      	cmp	r0, r3
 801166c:	d903      	bls.n	8011676 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 801166e:	4602      	mov	r2, r0
 8011670:	4801      	ldr	r0, [pc, #4]	; (8011678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8011672:	f7ff ff10 	bl	8011496 <_ZSt24__throw_out_of_range_fmtPKcz>
 8011676:	bd08      	pop	{r3, pc}
 8011678:	080176e8 	.word	0x080176e8

0801167c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801167c:	6840      	ldr	r0, [r0, #4]
 801167e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8011682:	3901      	subs	r1, #1
 8011684:	1a09      	subs	r1, r1, r0
 8011686:	4291      	cmp	r1, r2
 8011688:	b508      	push	{r3, lr}
 801168a:	d202      	bcs.n	8011692 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801168c:	4618      	mov	r0, r3
 801168e:	f7ff feff 	bl	8011490 <_ZSt20__throw_length_errorPKc>
 8011692:	bd08      	pop	{r3, pc}

08011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011694:	2a01      	cmp	r2, #1
 8011696:	b510      	push	{r4, lr}
 8011698:	d102      	bne.n	80116a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801169a:	780a      	ldrb	r2, [r1, #0]
 801169c:	7002      	strb	r2, [r0, #0]
 801169e:	bd10      	pop	{r4, pc}
 80116a0:	f7ff ffaf 	bl	8011602 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80116a4:	e7fb      	b.n	801169e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080116a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80116a6:	2a01      	cmp	r2, #1
 80116a8:	b430      	push	{r4, r5}
 80116aa:	d103      	bne.n	80116b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80116ac:	780b      	ldrb	r3, [r1, #0]
 80116ae:	7003      	strb	r3, [r0, #0]
 80116b0:	bc30      	pop	{r4, r5}
 80116b2:	4770      	bx	lr
 80116b4:	2a00      	cmp	r2, #0
 80116b6:	d0fb      	beq.n	80116b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80116b8:	bc30      	pop	{r4, r5}
 80116ba:	f000 be27 	b.w	801230c <memmove>

080116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80116be:	b508      	push	{r3, lr}
 80116c0:	1a52      	subs	r2, r2, r1
 80116c2:	f7ff ffe7 	bl	8011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80116c6:	bd08      	pop	{r3, pc}

080116c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80116c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80116cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80116ce:	461f      	mov	r7, r3
 80116d0:	6843      	ldr	r3, [r0, #4]
 80116d2:	eb01 0802 	add.w	r8, r1, r2
 80116d6:	1ab2      	subs	r2, r6, r2
 80116d8:	441a      	add	r2, r3
 80116da:	eba3 0908 	sub.w	r9, r3, r8
 80116de:	4603      	mov	r3, r0
 80116e0:	9201      	str	r2, [sp, #4]
 80116e2:	f853 2b08 	ldr.w	r2, [r3], #8
 80116e6:	460d      	mov	r5, r1
 80116e8:	429a      	cmp	r2, r3
 80116ea:	bf0c      	ite	eq
 80116ec:	220f      	moveq	r2, #15
 80116ee:	6882      	ldrne	r2, [r0, #8]
 80116f0:	a901      	add	r1, sp, #4
 80116f2:	4604      	mov	r4, r0
 80116f4:	f7ff ff8a 	bl	801160c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80116f8:	4682      	mov	sl, r0
 80116fa:	b11d      	cbz	r5, 8011704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 80116fc:	462a      	mov	r2, r5
 80116fe:	6821      	ldr	r1, [r4, #0]
 8011700:	f7ff ffc8 	bl	8011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011704:	b137      	cbz	r7, 8011714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8011706:	b12e      	cbz	r6, 8011714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8011708:	4632      	mov	r2, r6
 801170a:	4639      	mov	r1, r7
 801170c:	eb0a 0005 	add.w	r0, sl, r5
 8011710:	f7ff ffc0 	bl	8011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011714:	f1b9 0f00 	cmp.w	r9, #0
 8011718:	d007      	beq.n	801172a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 801171a:	6821      	ldr	r1, [r4, #0]
 801171c:	4435      	add	r5, r6
 801171e:	464a      	mov	r2, r9
 8011720:	4441      	add	r1, r8
 8011722:	eb0a 0005 	add.w	r0, sl, r5
 8011726:	f7ff ffb5 	bl	8011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801172a:	4620      	mov	r0, r4
 801172c:	f7ff ff90 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011730:	9b01      	ldr	r3, [sp, #4]
 8011732:	f8c4 a000 	str.w	sl, [r4]
 8011736:	60a3      	str	r3, [r4, #8]
 8011738:	b002      	add	sp, #8
 801173a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801173e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 801173e:	b538      	push	{r3, r4, r5, lr}
 8011740:	4604      	mov	r4, r0
 8011742:	4615      	mov	r5, r2
 8011744:	4608      	mov	r0, r1
 8011746:	4411      	add	r1, r2
 8011748:	6862      	ldr	r2, [r4, #4]
 801174a:	1a52      	subs	r2, r2, r1
 801174c:	d005      	beq.n	801175a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 801174e:	b125      	cbz	r5, 801175a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	4419      	add	r1, r3
 8011754:	4418      	add	r0, r3
 8011756:	f7ff ffa6 	bl	80116a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801175a:	6862      	ldr	r2, [r4, #4]
 801175c:	6823      	ldr	r3, [r4, #0]
 801175e:	1b55      	subs	r5, r2, r5
 8011760:	2200      	movs	r2, #0
 8011762:	6065      	str	r5, [r4, #4]
 8011764:	555a      	strb	r2, [r3, r5]
 8011766:	bd38      	pop	{r3, r4, r5, pc}

08011768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8011768:	f100 0208 	add.w	r2, r0, #8
 801176c:	6002      	str	r2, [r0, #0]
 801176e:	2200      	movs	r2, #0
 8011770:	6042      	str	r2, [r0, #4]
 8011772:	7202      	strb	r2, [r0, #8]
 8011774:	4770      	bx	lr

08011776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011776:	b510      	push	{r4, lr}
 8011778:	4604      	mov	r4, r0
 801177a:	f7ff ff69 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801177e:	4620      	mov	r0, r4
 8011780:	bd10      	pop	{r4, pc}

08011782 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011782:	6840      	ldr	r0, [r0, #4]
 8011784:	4770      	bx	lr

08011786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8011786:	2300      	movs	r3, #0
 8011788:	6802      	ldr	r2, [r0, #0]
 801178a:	6043      	str	r3, [r0, #4]
 801178c:	7013      	strb	r3, [r2, #0]
 801178e:	4770      	bx	lr

08011790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 8011790:	b570      	push	{r4, r5, r6, lr}
 8011792:	4616      	mov	r6, r2
 8011794:	4a0c      	ldr	r2, [pc, #48]	; (80117c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 8011796:	4604      	mov	r4, r0
 8011798:	460d      	mov	r5, r1
 801179a:	f7ff ff61 	bl	8011660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801179e:	1c73      	adds	r3, r6, #1
 80117a0:	d105      	bne.n	80117ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 80117a2:	2200      	movs	r2, #0
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	6065      	str	r5, [r4, #4]
 80117a8:	555a      	strb	r2, [r3, r5]
 80117aa:	4620      	mov	r0, r4
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	2e00      	cmp	r6, #0
 80117b0:	d0fb      	beq.n	80117aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 80117b2:	6862      	ldr	r2, [r4, #4]
 80117b4:	4629      	mov	r1, r5
 80117b6:	1b52      	subs	r2, r2, r5
 80117b8:	42b2      	cmp	r2, r6
 80117ba:	bf28      	it	cs
 80117bc:	4632      	movcs	r2, r6
 80117be:	4620      	mov	r0, r4
 80117c0:	f7ff ffbd 	bl	801173e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 80117c4:	e7f1      	b.n	80117aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 80117c6:	bf00      	nop
 80117c8:	0801771f 	.word	0x0801771f

080117cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80117cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117ce:	4604      	mov	r4, r0
 80117d0:	4623      	mov	r3, r4
 80117d2:	f853 6b08 	ldr.w	r6, [r3], #8
 80117d6:	6840      	ldr	r0, [r0, #4]
 80117d8:	429e      	cmp	r6, r3
 80117da:	bf0c      	ite	eq
 80117dc:	230f      	moveq	r3, #15
 80117de:	68a3      	ldrne	r3, [r4, #8]
 80117e0:	1885      	adds	r5, r0, r2
 80117e2:	429d      	cmp	r5, r3
 80117e4:	d80a      	bhi.n	80117fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 80117e6:	b112      	cbz	r2, 80117ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 80117e8:	4430      	add	r0, r6
 80117ea:	f7ff ff53 	bl	8011694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80117ee:	2200      	movs	r2, #0
 80117f0:	4620      	mov	r0, r4
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	6065      	str	r5, [r4, #4]
 80117f6:	555a      	strb	r2, [r3, r5]
 80117f8:	b002      	add	sp, #8
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	460b      	mov	r3, r1
 80117fe:	9200      	str	r2, [sp, #0]
 8011800:	4601      	mov	r1, r0
 8011802:	2200      	movs	r2, #0
 8011804:	4620      	mov	r0, r4
 8011806:	f7ff ff5f 	bl	80116c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801180a:	e7f0      	b.n	80117ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0801180c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	460d      	mov	r5, r1
 8011814:	f7ee fcb4 	bl	8000180 <strlen>
 8011818:	4606      	mov	r6, r0
 801181a:	4602      	mov	r2, r0
 801181c:	2100      	movs	r1, #0
 801181e:	4620      	mov	r0, r4
 8011820:	4b04      	ldr	r3, [pc, #16]	; (8011834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8011822:	f7ff ff2b 	bl	801167c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011826:	4632      	mov	r2, r6
 8011828:	4629      	mov	r1, r5
 801182a:	4620      	mov	r0, r4
 801182c:	f7ff ffce 	bl	80117cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011830:	bd70      	pop	{r4, r5, r6, pc}
 8011832:	bf00      	nop
 8011834:	08017733 	.word	0x08017733

08011838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8011838:	b508      	push	{r3, lr}
 801183a:	f7ff ffe7 	bl	801180c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 801183e:	bd08      	pop	{r3, pc}

08011840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011840:	6800      	ldr	r0, [r0, #0]
 8011842:	4770      	bx	lr

08011844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8011844:	b513      	push	{r0, r1, r4, lr}
 8011846:	f88d 1007 	strb.w	r1, [sp, #7]
 801184a:	6841      	ldr	r1, [r0, #4]
 801184c:	4613      	mov	r3, r2
 801184e:	428a      	cmp	r2, r1
 8011850:	d20a      	bcs.n	8011868 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8011852:	6804      	ldr	r4, [r0, #0]
 8011854:	f10d 0207 	add.w	r2, sp, #7
 8011858:	1ac9      	subs	r1, r1, r3
 801185a:	18e0      	adds	r0, r4, r3
 801185c:	f7ff fec9 	bl	80115f2 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8011860:	b110      	cbz	r0, 8011868 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8011862:	1b00      	subs	r0, r0, r4
 8011864:	b002      	add	sp, #8
 8011866:	bd10      	pop	{r4, pc}
 8011868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801186c:	e7fa      	b.n	8011864 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>
	...

08011870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011870:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011872:	4604      	mov	r4, r0
 8011874:	4616      	mov	r6, r2
 8011876:	460d      	mov	r5, r1
 8011878:	b919      	cbnz	r1, 8011882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801187a:	b112      	cbz	r2, 8011882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801187c:	480d      	ldr	r0, [pc, #52]	; (80118b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801187e:	f7ff fe04 	bl	801148a <_ZSt19__throw_logic_errorPKc>
 8011882:	1b73      	subs	r3, r6, r5
 8011884:	2b0f      	cmp	r3, #15
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	d907      	bls.n	801189a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801188a:	2200      	movs	r2, #0
 801188c:	4620      	mov	r0, r4
 801188e:	a901      	add	r1, sp, #4
 8011890:	f7ff febc 	bl	801160c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011894:	9b01      	ldr	r3, [sp, #4]
 8011896:	6020      	str	r0, [r4, #0]
 8011898:	60a3      	str	r3, [r4, #8]
 801189a:	4632      	mov	r2, r6
 801189c:	4629      	mov	r1, r5
 801189e:	6820      	ldr	r0, [r4, #0]
 80118a0:	f7ff ff0d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80118a4:	2100      	movs	r1, #0
 80118a6:	9b01      	ldr	r3, [sp, #4]
 80118a8:	6822      	ldr	r2, [r4, #0]
 80118aa:	6063      	str	r3, [r4, #4]
 80118ac:	54d1      	strb	r1, [r2, r3]
 80118ae:	b002      	add	sp, #8
 80118b0:	bd70      	pop	{r4, r5, r6, pc}
 80118b2:	bf00      	nop
 80118b4:	08017748 	.word	0x08017748

080118b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80118b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118bc:	460d      	mov	r5, r1
 80118be:	4617      	mov	r7, r2
 80118c0:	4698      	mov	r8, r3
 80118c2:	f100 0308 	add.w	r3, r0, #8
 80118c6:	4604      	mov	r4, r0
 80118c8:	4639      	mov	r1, r7
 80118ca:	6003      	str	r3, [r0, #0]
 80118cc:	4a0a      	ldr	r2, [pc, #40]	; (80118f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80118ce:	4628      	mov	r0, r5
 80118d0:	f7ff fec6 	bl	8011660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80118d4:	682e      	ldr	r6, [r5, #0]
 80118d6:	686a      	ldr	r2, [r5, #4]
 80118d8:	1831      	adds	r1, r6, r0
 80118da:	1bd2      	subs	r2, r2, r7
 80118dc:	4620      	mov	r0, r4
 80118de:	f04f 0300 	mov.w	r3, #0
 80118e2:	4542      	cmp	r2, r8
 80118e4:	bf94      	ite	ls
 80118e6:	188a      	addls	r2, r1, r2
 80118e8:	eb01 0208 	addhi.w	r2, r1, r8
 80118ec:	f7ff ffc0 	bl	8011870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80118f0:	4620      	mov	r0, r4
 80118f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118f6:	bf00      	nop
 80118f8:	08017772 	.word	0x08017772

080118fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	460d      	mov	r5, r1
 8011900:	4604      	mov	r4, r0
 8011902:	4611      	mov	r1, r2
 8011904:	4628      	mov	r0, r5
 8011906:	4a06      	ldr	r2, [pc, #24]	; (8011920 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8011908:	461e      	mov	r6, r3
 801190a:	f7ff fea9 	bl	8011660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801190e:	4633      	mov	r3, r6
 8011910:	4602      	mov	r2, r0
 8011912:	4629      	mov	r1, r5
 8011914:	4620      	mov	r0, r4
 8011916:	f7ff ffcf 	bl	80118b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 801191a:	4620      	mov	r0, r4
 801191c:	bd70      	pop	{r4, r5, r6, pc}
 801191e:	bf00      	nop
 8011920:	0801778d 	.word	0x0801778d

08011924 <_ZSt15get_new_handlerv>:
 8011924:	4b02      	ldr	r3, [pc, #8]	; (8011930 <_ZSt15get_new_handlerv+0xc>)
 8011926:	6818      	ldr	r0, [r3, #0]
 8011928:	f3bf 8f5b 	dmb	ish
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	20000934 	.word	0x20000934
 8011934:	00000000 	.word	0x00000000

08011938 <atan>:
 8011938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	4bb6      	ldr	r3, [pc, #728]	; (8011c18 <atan+0x2e0>)
 801193e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011942:	429e      	cmp	r6, r3
 8011944:	4604      	mov	r4, r0
 8011946:	460d      	mov	r5, r1
 8011948:	468b      	mov	fp, r1
 801194a:	dd17      	ble.n	801197c <atan+0x44>
 801194c:	4bb3      	ldr	r3, [pc, #716]	; (8011c1c <atan+0x2e4>)
 801194e:	429e      	cmp	r6, r3
 8011950:	dc01      	bgt.n	8011956 <atan+0x1e>
 8011952:	d109      	bne.n	8011968 <atan+0x30>
 8011954:	b140      	cbz	r0, 8011968 <atan+0x30>
 8011956:	4622      	mov	r2, r4
 8011958:	462b      	mov	r3, r5
 801195a:	4620      	mov	r0, r4
 801195c:	4629      	mov	r1, r5
 801195e:	f7ee fc1d 	bl	800019c <__adddf3>
 8011962:	4604      	mov	r4, r0
 8011964:	460d      	mov	r5, r1
 8011966:	e005      	b.n	8011974 <atan+0x3c>
 8011968:	f1bb 0f00 	cmp.w	fp, #0
 801196c:	4cac      	ldr	r4, [pc, #688]	; (8011c20 <atan+0x2e8>)
 801196e:	f300 8121 	bgt.w	8011bb4 <atan+0x27c>
 8011972:	4dac      	ldr	r5, [pc, #688]	; (8011c24 <atan+0x2ec>)
 8011974:	4620      	mov	r0, r4
 8011976:	4629      	mov	r1, r5
 8011978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197c:	4baa      	ldr	r3, [pc, #680]	; (8011c28 <atan+0x2f0>)
 801197e:	429e      	cmp	r6, r3
 8011980:	dc11      	bgt.n	80119a6 <atan+0x6e>
 8011982:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011986:	429e      	cmp	r6, r3
 8011988:	dc0a      	bgt.n	80119a0 <atan+0x68>
 801198a:	a38b      	add	r3, pc, #556	; (adr r3, 8011bb8 <atan+0x280>)
 801198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011990:	f7ee fc04 	bl	800019c <__adddf3>
 8011994:	2200      	movs	r2, #0
 8011996:	4ba5      	ldr	r3, [pc, #660]	; (8011c2c <atan+0x2f4>)
 8011998:	f7ef f846 	bl	8000a28 <__aeabi_dcmpgt>
 801199c:	2800      	cmp	r0, #0
 801199e:	d1e9      	bne.n	8011974 <atan+0x3c>
 80119a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80119a4:	e027      	b.n	80119f6 <atan+0xbe>
 80119a6:	f000 f951 	bl	8011c4c <fabs>
 80119aa:	4ba1      	ldr	r3, [pc, #644]	; (8011c30 <atan+0x2f8>)
 80119ac:	4604      	mov	r4, r0
 80119ae:	429e      	cmp	r6, r3
 80119b0:	460d      	mov	r5, r1
 80119b2:	f300 80b8 	bgt.w	8011b26 <atan+0x1ee>
 80119b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80119ba:	429e      	cmp	r6, r3
 80119bc:	f300 809c 	bgt.w	8011af8 <atan+0x1c0>
 80119c0:	4602      	mov	r2, r0
 80119c2:	460b      	mov	r3, r1
 80119c4:	f7ee fbea 	bl	800019c <__adddf3>
 80119c8:	2200      	movs	r2, #0
 80119ca:	4b98      	ldr	r3, [pc, #608]	; (8011c2c <atan+0x2f4>)
 80119cc:	f7ee fbe4 	bl	8000198 <__aeabi_dsub>
 80119d0:	2200      	movs	r2, #0
 80119d2:	4606      	mov	r6, r0
 80119d4:	460f      	mov	r7, r1
 80119d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80119da:	4620      	mov	r0, r4
 80119dc:	4629      	mov	r1, r5
 80119de:	f7ee fbdd 	bl	800019c <__adddf3>
 80119e2:	4602      	mov	r2, r0
 80119e4:	460b      	mov	r3, r1
 80119e6:	4630      	mov	r0, r6
 80119e8:	4639      	mov	r1, r7
 80119ea:	f7ee feb7 	bl	800075c <__aeabi_ddiv>
 80119ee:	f04f 0a00 	mov.w	sl, #0
 80119f2:	4604      	mov	r4, r0
 80119f4:	460d      	mov	r5, r1
 80119f6:	4622      	mov	r2, r4
 80119f8:	462b      	mov	r3, r5
 80119fa:	4620      	mov	r0, r4
 80119fc:	4629      	mov	r1, r5
 80119fe:	f7ee fd83 	bl	8000508 <__aeabi_dmul>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	4680      	mov	r8, r0
 8011a08:	4689      	mov	r9, r1
 8011a0a:	f7ee fd7d 	bl	8000508 <__aeabi_dmul>
 8011a0e:	a36c      	add	r3, pc, #432	; (adr r3, 8011bc0 <atan+0x288>)
 8011a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a14:	4606      	mov	r6, r0
 8011a16:	460f      	mov	r7, r1
 8011a18:	f7ee fd76 	bl	8000508 <__aeabi_dmul>
 8011a1c:	a36a      	add	r3, pc, #424	; (adr r3, 8011bc8 <atan+0x290>)
 8011a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a22:	f7ee fbbb 	bl	800019c <__adddf3>
 8011a26:	4632      	mov	r2, r6
 8011a28:	463b      	mov	r3, r7
 8011a2a:	f7ee fd6d 	bl	8000508 <__aeabi_dmul>
 8011a2e:	a368      	add	r3, pc, #416	; (adr r3, 8011bd0 <atan+0x298>)
 8011a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a34:	f7ee fbb2 	bl	800019c <__adddf3>
 8011a38:	4632      	mov	r2, r6
 8011a3a:	463b      	mov	r3, r7
 8011a3c:	f7ee fd64 	bl	8000508 <__aeabi_dmul>
 8011a40:	a365      	add	r3, pc, #404	; (adr r3, 8011bd8 <atan+0x2a0>)
 8011a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a46:	f7ee fba9 	bl	800019c <__adddf3>
 8011a4a:	4632      	mov	r2, r6
 8011a4c:	463b      	mov	r3, r7
 8011a4e:	f7ee fd5b 	bl	8000508 <__aeabi_dmul>
 8011a52:	a363      	add	r3, pc, #396	; (adr r3, 8011be0 <atan+0x2a8>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	f7ee fba0 	bl	800019c <__adddf3>
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	463b      	mov	r3, r7
 8011a60:	f7ee fd52 	bl	8000508 <__aeabi_dmul>
 8011a64:	a360      	add	r3, pc, #384	; (adr r3, 8011be8 <atan+0x2b0>)
 8011a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6a:	f7ee fb97 	bl	800019c <__adddf3>
 8011a6e:	4642      	mov	r2, r8
 8011a70:	464b      	mov	r3, r9
 8011a72:	f7ee fd49 	bl	8000508 <__aeabi_dmul>
 8011a76:	a35e      	add	r3, pc, #376	; (adr r3, 8011bf0 <atan+0x2b8>)
 8011a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7c:	4680      	mov	r8, r0
 8011a7e:	4689      	mov	r9, r1
 8011a80:	4630      	mov	r0, r6
 8011a82:	4639      	mov	r1, r7
 8011a84:	f7ee fd40 	bl	8000508 <__aeabi_dmul>
 8011a88:	a35b      	add	r3, pc, #364	; (adr r3, 8011bf8 <atan+0x2c0>)
 8011a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8e:	f7ee fb83 	bl	8000198 <__aeabi_dsub>
 8011a92:	4632      	mov	r2, r6
 8011a94:	463b      	mov	r3, r7
 8011a96:	f7ee fd37 	bl	8000508 <__aeabi_dmul>
 8011a9a:	a359      	add	r3, pc, #356	; (adr r3, 8011c00 <atan+0x2c8>)
 8011a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa0:	f7ee fb7a 	bl	8000198 <__aeabi_dsub>
 8011aa4:	4632      	mov	r2, r6
 8011aa6:	463b      	mov	r3, r7
 8011aa8:	f7ee fd2e 	bl	8000508 <__aeabi_dmul>
 8011aac:	a356      	add	r3, pc, #344	; (adr r3, 8011c08 <atan+0x2d0>)
 8011aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab2:	f7ee fb71 	bl	8000198 <__aeabi_dsub>
 8011ab6:	4632      	mov	r2, r6
 8011ab8:	463b      	mov	r3, r7
 8011aba:	f7ee fd25 	bl	8000508 <__aeabi_dmul>
 8011abe:	a354      	add	r3, pc, #336	; (adr r3, 8011c10 <atan+0x2d8>)
 8011ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac4:	f7ee fb68 	bl	8000198 <__aeabi_dsub>
 8011ac8:	4632      	mov	r2, r6
 8011aca:	463b      	mov	r3, r7
 8011acc:	f7ee fd1c 	bl	8000508 <__aeabi_dmul>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	4640      	mov	r0, r8
 8011ad6:	4649      	mov	r1, r9
 8011ad8:	f7ee fb60 	bl	800019c <__adddf3>
 8011adc:	4622      	mov	r2, r4
 8011ade:	462b      	mov	r3, r5
 8011ae0:	f7ee fd12 	bl	8000508 <__aeabi_dmul>
 8011ae4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8011ae8:	4602      	mov	r2, r0
 8011aea:	460b      	mov	r3, r1
 8011aec:	d144      	bne.n	8011b78 <atan+0x240>
 8011aee:	4620      	mov	r0, r4
 8011af0:	4629      	mov	r1, r5
 8011af2:	f7ee fb51 	bl	8000198 <__aeabi_dsub>
 8011af6:	e734      	b.n	8011962 <atan+0x2a>
 8011af8:	2200      	movs	r2, #0
 8011afa:	4b4c      	ldr	r3, [pc, #304]	; (8011c2c <atan+0x2f4>)
 8011afc:	f7ee fb4c 	bl	8000198 <__aeabi_dsub>
 8011b00:	2200      	movs	r2, #0
 8011b02:	4606      	mov	r6, r0
 8011b04:	460f      	mov	r7, r1
 8011b06:	4620      	mov	r0, r4
 8011b08:	4629      	mov	r1, r5
 8011b0a:	4b48      	ldr	r3, [pc, #288]	; (8011c2c <atan+0x2f4>)
 8011b0c:	f7ee fb46 	bl	800019c <__adddf3>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4630      	mov	r0, r6
 8011b16:	4639      	mov	r1, r7
 8011b18:	f7ee fe20 	bl	800075c <__aeabi_ddiv>
 8011b1c:	f04f 0a01 	mov.w	sl, #1
 8011b20:	4604      	mov	r4, r0
 8011b22:	460d      	mov	r5, r1
 8011b24:	e767      	b.n	80119f6 <atan+0xbe>
 8011b26:	4b43      	ldr	r3, [pc, #268]	; (8011c34 <atan+0x2fc>)
 8011b28:	429e      	cmp	r6, r3
 8011b2a:	da1a      	bge.n	8011b62 <atan+0x22a>
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	4b42      	ldr	r3, [pc, #264]	; (8011c38 <atan+0x300>)
 8011b30:	f7ee fb32 	bl	8000198 <__aeabi_dsub>
 8011b34:	2200      	movs	r2, #0
 8011b36:	4606      	mov	r6, r0
 8011b38:	460f      	mov	r7, r1
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	4b3e      	ldr	r3, [pc, #248]	; (8011c38 <atan+0x300>)
 8011b40:	f7ee fce2 	bl	8000508 <__aeabi_dmul>
 8011b44:	2200      	movs	r2, #0
 8011b46:	4b39      	ldr	r3, [pc, #228]	; (8011c2c <atan+0x2f4>)
 8011b48:	f7ee fb28 	bl	800019c <__adddf3>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4630      	mov	r0, r6
 8011b52:	4639      	mov	r1, r7
 8011b54:	f7ee fe02 	bl	800075c <__aeabi_ddiv>
 8011b58:	f04f 0a02 	mov.w	sl, #2
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	460d      	mov	r5, r1
 8011b60:	e749      	b.n	80119f6 <atan+0xbe>
 8011b62:	4602      	mov	r2, r0
 8011b64:	460b      	mov	r3, r1
 8011b66:	2000      	movs	r0, #0
 8011b68:	4934      	ldr	r1, [pc, #208]	; (8011c3c <atan+0x304>)
 8011b6a:	f7ee fdf7 	bl	800075c <__aeabi_ddiv>
 8011b6e:	f04f 0a03 	mov.w	sl, #3
 8011b72:	4604      	mov	r4, r0
 8011b74:	460d      	mov	r5, r1
 8011b76:	e73e      	b.n	80119f6 <atan+0xbe>
 8011b78:	4b31      	ldr	r3, [pc, #196]	; (8011c40 <atan+0x308>)
 8011b7a:	4e32      	ldr	r6, [pc, #200]	; (8011c44 <atan+0x30c>)
 8011b7c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011b80:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011b84:	e9da 2300 	ldrd	r2, r3, [sl]
 8011b88:	f7ee fb06 	bl	8000198 <__aeabi_dsub>
 8011b8c:	4622      	mov	r2, r4
 8011b8e:	462b      	mov	r3, r5
 8011b90:	f7ee fb02 	bl	8000198 <__aeabi_dsub>
 8011b94:	4602      	mov	r2, r0
 8011b96:	460b      	mov	r3, r1
 8011b98:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011b9c:	f7ee fafc 	bl	8000198 <__aeabi_dsub>
 8011ba0:	f1bb 0f00 	cmp.w	fp, #0
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	f6bf aee4 	bge.w	8011974 <atan+0x3c>
 8011bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bb0:	461d      	mov	r5, r3
 8011bb2:	e6df      	b.n	8011974 <atan+0x3c>
 8011bb4:	4d24      	ldr	r5, [pc, #144]	; (8011c48 <atan+0x310>)
 8011bb6:	e6dd      	b.n	8011974 <atan+0x3c>
 8011bb8:	8800759c 	.word	0x8800759c
 8011bbc:	7e37e43c 	.word	0x7e37e43c
 8011bc0:	e322da11 	.word	0xe322da11
 8011bc4:	3f90ad3a 	.word	0x3f90ad3a
 8011bc8:	24760deb 	.word	0x24760deb
 8011bcc:	3fa97b4b 	.word	0x3fa97b4b
 8011bd0:	a0d03d51 	.word	0xa0d03d51
 8011bd4:	3fb10d66 	.word	0x3fb10d66
 8011bd8:	c54c206e 	.word	0xc54c206e
 8011bdc:	3fb745cd 	.word	0x3fb745cd
 8011be0:	920083ff 	.word	0x920083ff
 8011be4:	3fc24924 	.word	0x3fc24924
 8011be8:	5555550d 	.word	0x5555550d
 8011bec:	3fd55555 	.word	0x3fd55555
 8011bf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8011bf4:	bfa2b444 	.word	0xbfa2b444
 8011bf8:	52defd9a 	.word	0x52defd9a
 8011bfc:	3fadde2d 	.word	0x3fadde2d
 8011c00:	af749a6d 	.word	0xaf749a6d
 8011c04:	3fb3b0f2 	.word	0x3fb3b0f2
 8011c08:	fe231671 	.word	0xfe231671
 8011c0c:	3fbc71c6 	.word	0x3fbc71c6
 8011c10:	9998ebc4 	.word	0x9998ebc4
 8011c14:	3fc99999 	.word	0x3fc99999
 8011c18:	440fffff 	.word	0x440fffff
 8011c1c:	7ff00000 	.word	0x7ff00000
 8011c20:	54442d18 	.word	0x54442d18
 8011c24:	bff921fb 	.word	0xbff921fb
 8011c28:	3fdbffff 	.word	0x3fdbffff
 8011c2c:	3ff00000 	.word	0x3ff00000
 8011c30:	3ff2ffff 	.word	0x3ff2ffff
 8011c34:	40038000 	.word	0x40038000
 8011c38:	3ff80000 	.word	0x3ff80000
 8011c3c:	bff00000 	.word	0xbff00000
 8011c40:	080177c8 	.word	0x080177c8
 8011c44:	080177a8 	.word	0x080177a8
 8011c48:	3ff921fb 	.word	0x3ff921fb

08011c4c <fabs>:
 8011c4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c50:	4770      	bx	lr

08011c52 <atan2>:
 8011c52:	f000 b865 	b.w	8011d20 <__ieee754_atan2>
	...

08011c58 <fmod>:
 8011c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c5c:	461f      	mov	r7, r3
 8011c5e:	4680      	mov	r8, r0
 8011c60:	4689      	mov	r9, r1
 8011c62:	4616      	mov	r6, r2
 8011c64:	f000 f92e 	bl	8011ec4 <__ieee754_fmod>
 8011c68:	4b15      	ldr	r3, [pc, #84]	; (8011cc0 <fmod+0x68>)
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8011c70:	460d      	mov	r5, r1
 8011c72:	3301      	adds	r3, #1
 8011c74:	d020      	beq.n	8011cb8 <fmod+0x60>
 8011c76:	4632      	mov	r2, r6
 8011c78:	463b      	mov	r3, r7
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	4639      	mov	r1, r7
 8011c7e:	f7ee fedd 	bl	8000a3c <__aeabi_dcmpun>
 8011c82:	b9c8      	cbnz	r0, 8011cb8 <fmod+0x60>
 8011c84:	4642      	mov	r2, r8
 8011c86:	464b      	mov	r3, r9
 8011c88:	4640      	mov	r0, r8
 8011c8a:	4649      	mov	r1, r9
 8011c8c:	f7ee fed6 	bl	8000a3c <__aeabi_dcmpun>
 8011c90:	b990      	cbnz	r0, 8011cb8 <fmod+0x60>
 8011c92:	2200      	movs	r2, #0
 8011c94:	2300      	movs	r3, #0
 8011c96:	4630      	mov	r0, r6
 8011c98:	4639      	mov	r1, r7
 8011c9a:	f7ee fe9d 	bl	80009d8 <__aeabi_dcmpeq>
 8011c9e:	b158      	cbz	r0, 8011cb8 <fmod+0x60>
 8011ca0:	f000 fade 	bl	8012260 <__errno>
 8011ca4:	2321      	movs	r3, #33	; 0x21
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	6003      	str	r3, [r0, #0]
 8011caa:	2300      	movs	r3, #0
 8011cac:	4610      	mov	r0, r2
 8011cae:	4619      	mov	r1, r3
 8011cb0:	f7ee fd54 	bl	800075c <__aeabi_ddiv>
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	460d      	mov	r5, r1
 8011cb8:	4620      	mov	r0, r4
 8011cba:	4629      	mov	r1, r5
 8011cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cc0:	20000222 	.word	0x20000222

08011cc4 <sqrt>:
 8011cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	460f      	mov	r7, r1
 8011cca:	f000 fa0d 	bl	80120e8 <__ieee754_sqrt>
 8011cce:	4b12      	ldr	r3, [pc, #72]	; (8011d18 <sqrt+0x54>)
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8011cd6:	460d      	mov	r5, r1
 8011cd8:	3301      	adds	r3, #1
 8011cda:	d019      	beq.n	8011d10 <sqrt+0x4c>
 8011cdc:	4632      	mov	r2, r6
 8011cde:	463b      	mov	r3, r7
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee feaa 	bl	8000a3c <__aeabi_dcmpun>
 8011ce8:	b990      	cbnz	r0, 8011d10 <sqrt+0x4c>
 8011cea:	2200      	movs	r2, #0
 8011cec:	2300      	movs	r3, #0
 8011cee:	4630      	mov	r0, r6
 8011cf0:	4639      	mov	r1, r7
 8011cf2:	f7ee fe7b 	bl	80009ec <__aeabi_dcmplt>
 8011cf6:	b158      	cbz	r0, 8011d10 <sqrt+0x4c>
 8011cf8:	f000 fab2 	bl	8012260 <__errno>
 8011cfc:	2321      	movs	r3, #33	; 0x21
 8011cfe:	2200      	movs	r2, #0
 8011d00:	6003      	str	r3, [r0, #0]
 8011d02:	2300      	movs	r3, #0
 8011d04:	4610      	mov	r0, r2
 8011d06:	4619      	mov	r1, r3
 8011d08:	f7ee fd28 	bl	800075c <__aeabi_ddiv>
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	460d      	mov	r5, r1
 8011d10:	4620      	mov	r0, r4
 8011d12:	4629      	mov	r1, r5
 8011d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d16:	bf00      	nop
 8011d18:	20000222 	.word	0x20000222
 8011d1c:	00000000 	.word	0x00000000

08011d20 <__ieee754_atan2>:
 8011d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d24:	4692      	mov	sl, r2
 8011d26:	4699      	mov	r9, r3
 8011d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011d2c:	461f      	mov	r7, r3
 8011d2e:	f1ca 0300 	rsb	r3, sl, #0
 8011d32:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8011ec0 <__ieee754_atan2+0x1a0>
 8011d36:	ea43 030a 	orr.w	r3, r3, sl
 8011d3a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011d3e:	4573      	cmp	r3, lr
 8011d40:	4604      	mov	r4, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	d808      	bhi.n	8011d58 <__ieee754_atan2+0x38>
 8011d46:	4246      	negs	r6, r0
 8011d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d4c:	4306      	orrs	r6, r0
 8011d4e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8011d52:	4576      	cmp	r6, lr
 8011d54:	468c      	mov	ip, r1
 8011d56:	d908      	bls.n	8011d6a <__ieee754_atan2+0x4a>
 8011d58:	4652      	mov	r2, sl
 8011d5a:	464b      	mov	r3, r9
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	4629      	mov	r1, r5
 8011d60:	f7ee fa1c 	bl	800019c <__adddf3>
 8011d64:	4604      	mov	r4, r0
 8011d66:	460d      	mov	r5, r1
 8011d68:	e019      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011d6a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8011d6e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8011d72:	ea56 060a 	orrs.w	r6, r6, sl
 8011d76:	d103      	bne.n	8011d80 <__ieee754_atan2+0x60>
 8011d78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7c:	f7ff bddc 	b.w	8011938 <atan>
 8011d80:	17be      	asrs	r6, r7, #30
 8011d82:	f006 0602 	and.w	r6, r6, #2
 8011d86:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8011d8a:	ea53 0100 	orrs.w	r1, r3, r0
 8011d8e:	d10a      	bne.n	8011da6 <__ieee754_atan2+0x86>
 8011d90:	2e02      	cmp	r6, #2
 8011d92:	d067      	beq.n	8011e64 <__ieee754_atan2+0x144>
 8011d94:	2e03      	cmp	r6, #3
 8011d96:	d102      	bne.n	8011d9e <__ieee754_atan2+0x7e>
 8011d98:	a53b      	add	r5, pc, #236	; (adr r5, 8011e88 <__ieee754_atan2+0x168>)
 8011d9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	4629      	mov	r1, r5
 8011da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da6:	ea52 010a 	orrs.w	r1, r2, sl
 8011daa:	d106      	bne.n	8011dba <__ieee754_atan2+0x9a>
 8011dac:	f1bc 0f00 	cmp.w	ip, #0
 8011db0:	da63      	bge.n	8011e7a <__ieee754_atan2+0x15a>
 8011db2:	a537      	add	r5, pc, #220	; (adr r5, 8011e90 <__ieee754_atan2+0x170>)
 8011db4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011db8:	e7f1      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011dba:	4572      	cmp	r2, lr
 8011dbc:	d10f      	bne.n	8011dde <__ieee754_atan2+0xbe>
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011dc4:	d107      	bne.n	8011dd6 <__ieee754_atan2+0xb6>
 8011dc6:	2e02      	cmp	r6, #2
 8011dc8:	d850      	bhi.n	8011e6c <__ieee754_atan2+0x14c>
 8011dca:	4b3b      	ldr	r3, [pc, #236]	; (8011eb8 <__ieee754_atan2+0x198>)
 8011dcc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011dd0:	e9d6 4500 	ldrd	r4, r5, [r6]
 8011dd4:	e7e3      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011dd6:	2e02      	cmp	r6, #2
 8011dd8:	d84c      	bhi.n	8011e74 <__ieee754_atan2+0x154>
 8011dda:	4b38      	ldr	r3, [pc, #224]	; (8011ebc <__ieee754_atan2+0x19c>)
 8011ddc:	e7f6      	b.n	8011dcc <__ieee754_atan2+0xac>
 8011dde:	4573      	cmp	r3, lr
 8011de0:	d0e4      	beq.n	8011dac <__ieee754_atan2+0x8c>
 8011de2:	1a9b      	subs	r3, r3, r2
 8011de4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011de8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011dec:	da20      	bge.n	8011e30 <__ieee754_atan2+0x110>
 8011dee:	2f00      	cmp	r7, #0
 8011df0:	da01      	bge.n	8011df6 <__ieee754_atan2+0xd6>
 8011df2:	323c      	adds	r2, #60	; 0x3c
 8011df4:	db20      	blt.n	8011e38 <__ieee754_atan2+0x118>
 8011df6:	4652      	mov	r2, sl
 8011df8:	464b      	mov	r3, r9
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	f7ee fcad 	bl	800075c <__aeabi_ddiv>
 8011e02:	f7ff ff23 	bl	8011c4c <fabs>
 8011e06:	f7ff fd97 	bl	8011938 <atan>
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	2e01      	cmp	r6, #1
 8011e10:	d015      	beq.n	8011e3e <__ieee754_atan2+0x11e>
 8011e12:	2e02      	cmp	r6, #2
 8011e14:	d017      	beq.n	8011e46 <__ieee754_atan2+0x126>
 8011e16:	2e00      	cmp	r6, #0
 8011e18:	d0c1      	beq.n	8011d9e <__ieee754_atan2+0x7e>
 8011e1a:	a31f      	add	r3, pc, #124	; (adr r3, 8011e98 <__ieee754_atan2+0x178>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	4620      	mov	r0, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	f7ee f9b8 	bl	8000198 <__aeabi_dsub>
 8011e28:	a31d      	add	r3, pc, #116	; (adr r3, 8011ea0 <__ieee754_atan2+0x180>)
 8011e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2e:	e016      	b.n	8011e5e <__ieee754_atan2+0x13e>
 8011e30:	a51d      	add	r5, pc, #116	; (adr r5, 8011ea8 <__ieee754_atan2+0x188>)
 8011e32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e36:	e7ea      	b.n	8011e0e <__ieee754_atan2+0xee>
 8011e38:	2400      	movs	r4, #0
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	e7e7      	b.n	8011e0e <__ieee754_atan2+0xee>
 8011e3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011e42:	461d      	mov	r5, r3
 8011e44:	e7ab      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011e46:	a314      	add	r3, pc, #80	; (adr r3, 8011e98 <__ieee754_atan2+0x178>)
 8011e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	4629      	mov	r1, r5
 8011e50:	f7ee f9a2 	bl	8000198 <__aeabi_dsub>
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	a111      	add	r1, pc, #68	; (adr r1, 8011ea0 <__ieee754_atan2+0x180>)
 8011e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e5e:	f7ee f99b 	bl	8000198 <__aeabi_dsub>
 8011e62:	e77f      	b.n	8011d64 <__ieee754_atan2+0x44>
 8011e64:	a50e      	add	r5, pc, #56	; (adr r5, 8011ea0 <__ieee754_atan2+0x180>)
 8011e66:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e6a:	e798      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011e6c:	a510      	add	r5, pc, #64	; (adr r5, 8011eb0 <__ieee754_atan2+0x190>)
 8011e6e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e72:	e794      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011e74:	2400      	movs	r4, #0
 8011e76:	2500      	movs	r5, #0
 8011e78:	e791      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011e7a:	a50b      	add	r5, pc, #44	; (adr r5, 8011ea8 <__ieee754_atan2+0x188>)
 8011e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e80:	e78d      	b.n	8011d9e <__ieee754_atan2+0x7e>
 8011e82:	bf00      	nop
 8011e84:	f3af 8000 	nop.w
 8011e88:	54442d18 	.word	0x54442d18
 8011e8c:	c00921fb 	.word	0xc00921fb
 8011e90:	54442d18 	.word	0x54442d18
 8011e94:	bff921fb 	.word	0xbff921fb
 8011e98:	33145c07 	.word	0x33145c07
 8011e9c:	3ca1a626 	.word	0x3ca1a626
 8011ea0:	54442d18 	.word	0x54442d18
 8011ea4:	400921fb 	.word	0x400921fb
 8011ea8:	54442d18 	.word	0x54442d18
 8011eac:	3ff921fb 	.word	0x3ff921fb
 8011eb0:	54442d18 	.word	0x54442d18
 8011eb4:	3fe921fb 	.word	0x3fe921fb
 8011eb8:	080177e8 	.word	0x080177e8
 8011ebc:	08017800 	.word	0x08017800
 8011ec0:	7ff00000 	.word	0x7ff00000

08011ec4 <__ieee754_fmod>:
 8011ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec8:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8011ecc:	4607      	mov	r7, r0
 8011ece:	461d      	mov	r5, r3
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	ea58 0302 	orrs.w	r3, r8, r2
 8011ed6:	460e      	mov	r6, r1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	4694      	mov	ip, r2
 8011edc:	4696      	mov	lr, r2
 8011ede:	d00d      	beq.n	8011efc <__ieee754_fmod+0x38>
 8011ee0:	4a7b      	ldr	r2, [pc, #492]	; (80120d0 <__ieee754_fmod+0x20c>)
 8011ee2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	468a      	mov	sl, r1
 8011eea:	dc07      	bgt.n	8011efc <__ieee754_fmod+0x38>
 8011eec:	4262      	negs	r2, r4
 8011eee:	4979      	ldr	r1, [pc, #484]	; (80120d4 <__ieee754_fmod+0x210>)
 8011ef0:	4322      	orrs	r2, r4
 8011ef2:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8011ef6:	428a      	cmp	r2, r1
 8011ef8:	460a      	mov	r2, r1
 8011efa:	d90c      	bls.n	8011f16 <__ieee754_fmod+0x52>
 8011efc:	4603      	mov	r3, r0
 8011efe:	4622      	mov	r2, r4
 8011f00:	4638      	mov	r0, r7
 8011f02:	4631      	mov	r1, r6
 8011f04:	f7ee fb00 	bl	8000508 <__aeabi_dmul>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	f7ee fc26 	bl	800075c <__aeabi_ddiv>
 8011f10:	4607      	mov	r7, r0
 8011f12:	460e      	mov	r6, r1
 8011f14:	e00f      	b.n	8011f36 <__ieee754_fmod+0x72>
 8011f16:	4543      	cmp	r3, r8
 8011f18:	46b9      	mov	r9, r7
 8011f1a:	4639      	mov	r1, r7
 8011f1c:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 8011f20:	dc0d      	bgt.n	8011f3e <__ieee754_fmod+0x7a>
 8011f22:	db08      	blt.n	8011f36 <__ieee754_fmod+0x72>
 8011f24:	4567      	cmp	r7, ip
 8011f26:	d306      	bcc.n	8011f36 <__ieee754_fmod+0x72>
 8011f28:	d109      	bne.n	8011f3e <__ieee754_fmod+0x7a>
 8011f2a:	4a6b      	ldr	r2, [pc, #428]	; (80120d8 <__ieee754_fmod+0x214>)
 8011f2c:	0fe4      	lsrs	r4, r4, #31
 8011f2e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8011f32:	e9d4 7600 	ldrd	r7, r6, [r4]
 8011f36:	4638      	mov	r0, r7
 8011f38:	4631      	mov	r1, r6
 8011f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3e:	ea1a 0f02 	tst.w	sl, r2
 8011f42:	d14a      	bne.n	8011fda <__ieee754_fmod+0x116>
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d141      	bne.n	8011fcc <__ieee754_fmod+0x108>
 8011f48:	464a      	mov	r2, r9
 8011f4a:	4864      	ldr	r0, [pc, #400]	; (80120dc <__ieee754_fmod+0x218>)
 8011f4c:	2a00      	cmp	r2, #0
 8011f4e:	dc3a      	bgt.n	8011fc6 <__ieee754_fmod+0x102>
 8011f50:	4a60      	ldr	r2, [pc, #384]	; (80120d4 <__ieee754_fmod+0x210>)
 8011f52:	402a      	ands	r2, r5
 8011f54:	2a00      	cmp	r2, #0
 8011f56:	d14f      	bne.n	8011ff8 <__ieee754_fmod+0x134>
 8011f58:	f1b8 0f00 	cmp.w	r8, #0
 8011f5c:	d144      	bne.n	8011fe8 <__ieee754_fmod+0x124>
 8011f5e:	4666      	mov	r6, ip
 8011f60:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011f64:	2e00      	cmp	r6, #0
 8011f66:	dc3c      	bgt.n	8011fe2 <__ieee754_fmod+0x11e>
 8011f68:	4e5d      	ldr	r6, [pc, #372]	; (80120e0 <__ieee754_fmod+0x21c>)
 8011f6a:	42b0      	cmp	r0, r6
 8011f6c:	db49      	blt.n	8012002 <__ieee754_fmod+0x13e>
 8011f6e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8011f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f76:	4e5a      	ldr	r6, [pc, #360]	; (80120e0 <__ieee754_fmod+0x21c>)
 8011f78:	42b2      	cmp	r2, r6
 8011f7a:	db54      	blt.n	8012026 <__ieee754_fmod+0x162>
 8011f7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011f80:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8011f84:	1a80      	subs	r0, r0, r2
 8011f86:	1b5e      	subs	r6, r3, r5
 8011f88:	eba1 070e 	sub.w	r7, r1, lr
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	d161      	bne.n	8012054 <__ieee754_fmod+0x190>
 8011f90:	4571      	cmp	r1, lr
 8011f92:	bf38      	it	cc
 8011f94:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 8011f98:	2e00      	cmp	r6, #0
 8011f9a:	bfa4      	itt	ge
 8011f9c:	4639      	movge	r1, r7
 8011f9e:	4633      	movge	r3, r6
 8011fa0:	ea53 0001 	orrs.w	r0, r3, r1
 8011fa4:	d0c1      	beq.n	8011f2a <__ieee754_fmod+0x66>
 8011fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011faa:	db68      	blt.n	801207e <__ieee754_fmod+0x1ba>
 8011fac:	484c      	ldr	r0, [pc, #304]	; (80120e0 <__ieee754_fmod+0x21c>)
 8011fae:	4282      	cmp	r2, r0
 8011fb0:	db6b      	blt.n	801208a <__ieee754_fmod+0x1c6>
 8011fb2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fb6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8011fba:	431c      	orrs	r4, r3
 8011fbc:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 8011fc0:	460f      	mov	r7, r1
 8011fc2:	464e      	mov	r6, r9
 8011fc4:	e7b7      	b.n	8011f36 <__ieee754_fmod+0x72>
 8011fc6:	3801      	subs	r0, #1
 8011fc8:	0052      	lsls	r2, r2, #1
 8011fca:	e7bf      	b.n	8011f4c <__ieee754_fmod+0x88>
 8011fcc:	4844      	ldr	r0, [pc, #272]	; (80120e0 <__ieee754_fmod+0x21c>)
 8011fce:	02da      	lsls	r2, r3, #11
 8011fd0:	2a00      	cmp	r2, #0
 8011fd2:	ddbd      	ble.n	8011f50 <__ieee754_fmod+0x8c>
 8011fd4:	3801      	subs	r0, #1
 8011fd6:	0052      	lsls	r2, r2, #1
 8011fd8:	e7fa      	b.n	8011fd0 <__ieee754_fmod+0x10c>
 8011fda:	1518      	asrs	r0, r3, #20
 8011fdc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011fe0:	e7b6      	b.n	8011f50 <__ieee754_fmod+0x8c>
 8011fe2:	3a01      	subs	r2, #1
 8011fe4:	0076      	lsls	r6, r6, #1
 8011fe6:	e7bd      	b.n	8011f64 <__ieee754_fmod+0xa0>
 8011fe8:	4a3d      	ldr	r2, [pc, #244]	; (80120e0 <__ieee754_fmod+0x21c>)
 8011fea:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 8011fee:	2e00      	cmp	r6, #0
 8011ff0:	ddba      	ble.n	8011f68 <__ieee754_fmod+0xa4>
 8011ff2:	3a01      	subs	r2, #1
 8011ff4:	0076      	lsls	r6, r6, #1
 8011ff6:	e7fa      	b.n	8011fee <__ieee754_fmod+0x12a>
 8011ff8:	ea4f 5228 	mov.w	r2, r8, asr #20
 8011ffc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012000:	e7b2      	b.n	8011f68 <__ieee754_fmod+0xa4>
 8012002:	1a31      	subs	r1, r6, r0
 8012004:	291f      	cmp	r1, #31
 8012006:	dc08      	bgt.n	801201a <__ieee754_fmod+0x156>
 8012008:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 801200c:	408b      	lsls	r3, r1
 801200e:	fa29 f606 	lsr.w	r6, r9, r6
 8012012:	4333      	orrs	r3, r6
 8012014:	fa09 f101 	lsl.w	r1, r9, r1
 8012018:	e7ad      	b.n	8011f76 <__ieee754_fmod+0xb2>
 801201a:	4b32      	ldr	r3, [pc, #200]	; (80120e4 <__ieee754_fmod+0x220>)
 801201c:	2100      	movs	r1, #0
 801201e:	1a1b      	subs	r3, r3, r0
 8012020:	fa09 f303 	lsl.w	r3, r9, r3
 8012024:	e7a7      	b.n	8011f76 <__ieee754_fmod+0xb2>
 8012026:	eba6 0e02 	sub.w	lr, r6, r2
 801202a:	f1be 0f1f 	cmp.w	lr, #31
 801202e:	dc0a      	bgt.n	8012046 <__ieee754_fmod+0x182>
 8012030:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8012034:	fa08 f80e 	lsl.w	r8, r8, lr
 8012038:	fa2c f505 	lsr.w	r5, ip, r5
 801203c:	ea45 0508 	orr.w	r5, r5, r8
 8012040:	fa0c fe0e 	lsl.w	lr, ip, lr
 8012044:	e79e      	b.n	8011f84 <__ieee754_fmod+0xc0>
 8012046:	4d27      	ldr	r5, [pc, #156]	; (80120e4 <__ieee754_fmod+0x220>)
 8012048:	f04f 0e00 	mov.w	lr, #0
 801204c:	1aad      	subs	r5, r5, r2
 801204e:	fa0c f505 	lsl.w	r5, ip, r5
 8012052:	e797      	b.n	8011f84 <__ieee754_fmod+0xc0>
 8012054:	4571      	cmp	r1, lr
 8012056:	bf38      	it	cc
 8012058:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 801205c:	2e00      	cmp	r6, #0
 801205e:	da05      	bge.n	801206c <__ieee754_fmod+0x1a8>
 8012060:	0fce      	lsrs	r6, r1, #31
 8012062:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8012066:	0049      	lsls	r1, r1, #1
 8012068:	3801      	subs	r0, #1
 801206a:	e78c      	b.n	8011f86 <__ieee754_fmod+0xc2>
 801206c:	ea56 0307 	orrs.w	r3, r6, r7
 8012070:	f43f af5b 	beq.w	8011f2a <__ieee754_fmod+0x66>
 8012074:	0ffb      	lsrs	r3, r7, #31
 8012076:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801207a:	0079      	lsls	r1, r7, #1
 801207c:	e7f4      	b.n	8012068 <__ieee754_fmod+0x1a4>
 801207e:	0fc8      	lsrs	r0, r1, #31
 8012080:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012084:	0049      	lsls	r1, r1, #1
 8012086:	3a01      	subs	r2, #1
 8012088:	e78d      	b.n	8011fa6 <__ieee754_fmod+0xe2>
 801208a:	1a80      	subs	r0, r0, r2
 801208c:	2814      	cmp	r0, #20
 801208e:	dc0a      	bgt.n	80120a6 <__ieee754_fmod+0x1e2>
 8012090:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8012094:	fa03 f202 	lsl.w	r2, r3, r2
 8012098:	40c1      	lsrs	r1, r0
 801209a:	430a      	orrs	r2, r1
 801209c:	4103      	asrs	r3, r0
 801209e:	4610      	mov	r0, r2
 80120a0:	ea43 0104 	orr.w	r1, r3, r4
 80120a4:	e734      	b.n	8011f10 <__ieee754_fmod+0x4c>
 80120a6:	281f      	cmp	r0, #31
 80120a8:	dc07      	bgt.n	80120ba <__ieee754_fmod+0x1f6>
 80120aa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80120ae:	40c1      	lsrs	r1, r0
 80120b0:	fa03 f202 	lsl.w	r2, r3, r2
 80120b4:	430a      	orrs	r2, r1
 80120b6:	4623      	mov	r3, r4
 80120b8:	e7f1      	b.n	801209e <__ieee754_fmod+0x1da>
 80120ba:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80120be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80120c2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80120c6:	32e2      	adds	r2, #226	; 0xe2
 80120c8:	fa43 f202 	asr.w	r2, r3, r2
 80120cc:	e7f3      	b.n	80120b6 <__ieee754_fmod+0x1f2>
 80120ce:	bf00      	nop
 80120d0:	7fefffff 	.word	0x7fefffff
 80120d4:	7ff00000 	.word	0x7ff00000
 80120d8:	08017818 	.word	0x08017818
 80120dc:	fffffbed 	.word	0xfffffbed
 80120e0:	fffffc02 	.word	0xfffffc02
 80120e4:	fffffbe2 	.word	0xfffffbe2

080120e8 <__ieee754_sqrt>:
 80120e8:	f8df c150 	ldr.w	ip, [pc, #336]	; 801223c <__ieee754_sqrt+0x154>
 80120ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f0:	ea3c 0c01 	bics.w	ip, ip, r1
 80120f4:	460b      	mov	r3, r1
 80120f6:	4606      	mov	r6, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	460a      	mov	r2, r1
 80120fc:	4607      	mov	r7, r0
 80120fe:	4604      	mov	r4, r0
 8012100:	d10e      	bne.n	8012120 <__ieee754_sqrt+0x38>
 8012102:	4602      	mov	r2, r0
 8012104:	f7ee fa00 	bl	8000508 <__aeabi_dmul>
 8012108:	4602      	mov	r2, r0
 801210a:	460b      	mov	r3, r1
 801210c:	4630      	mov	r0, r6
 801210e:	4629      	mov	r1, r5
 8012110:	f7ee f844 	bl	800019c <__adddf3>
 8012114:	4606      	mov	r6, r0
 8012116:	460d      	mov	r5, r1
 8012118:	4630      	mov	r0, r6
 801211a:	4629      	mov	r1, r5
 801211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012120:	2900      	cmp	r1, #0
 8012122:	dc0d      	bgt.n	8012140 <__ieee754_sqrt+0x58>
 8012124:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8012128:	ea5c 0707 	orrs.w	r7, ip, r7
 801212c:	d0f4      	beq.n	8012118 <__ieee754_sqrt+0x30>
 801212e:	b139      	cbz	r1, 8012140 <__ieee754_sqrt+0x58>
 8012130:	4602      	mov	r2, r0
 8012132:	f7ee f831 	bl	8000198 <__aeabi_dsub>
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	f7ee fb0f 	bl	800075c <__aeabi_ddiv>
 801213e:	e7e9      	b.n	8012114 <__ieee754_sqrt+0x2c>
 8012140:	1512      	asrs	r2, r2, #20
 8012142:	d074      	beq.n	801222e <__ieee754_sqrt+0x146>
 8012144:	2000      	movs	r0, #0
 8012146:	07d5      	lsls	r5, r2, #31
 8012148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801214c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8012150:	bf5e      	ittt	pl
 8012152:	0fe3      	lsrpl	r3, r4, #31
 8012154:	0064      	lslpl	r4, r4, #1
 8012156:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 801215a:	0fe3      	lsrs	r3, r4, #31
 801215c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012160:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012164:	2516      	movs	r5, #22
 8012166:	4601      	mov	r1, r0
 8012168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801216c:	1076      	asrs	r6, r6, #1
 801216e:	0064      	lsls	r4, r4, #1
 8012170:	188f      	adds	r7, r1, r2
 8012172:	429f      	cmp	r7, r3
 8012174:	bfde      	ittt	le
 8012176:	1bdb      	suble	r3, r3, r7
 8012178:	18b9      	addle	r1, r7, r2
 801217a:	1880      	addle	r0, r0, r2
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	3d01      	subs	r5, #1
 8012180:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8012184:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012188:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801218c:	d1f0      	bne.n	8012170 <__ieee754_sqrt+0x88>
 801218e:	462a      	mov	r2, r5
 8012190:	f04f 0e20 	mov.w	lr, #32
 8012194:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8012198:	428b      	cmp	r3, r1
 801219a:	eb07 0c05 	add.w	ip, r7, r5
 801219e:	dc02      	bgt.n	80121a6 <__ieee754_sqrt+0xbe>
 80121a0:	d113      	bne.n	80121ca <__ieee754_sqrt+0xe2>
 80121a2:	45a4      	cmp	ip, r4
 80121a4:	d811      	bhi.n	80121ca <__ieee754_sqrt+0xe2>
 80121a6:	f1bc 0f00 	cmp.w	ip, #0
 80121aa:	eb0c 0507 	add.w	r5, ip, r7
 80121ae:	da43      	bge.n	8012238 <__ieee754_sqrt+0x150>
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	db41      	blt.n	8012238 <__ieee754_sqrt+0x150>
 80121b4:	f101 0801 	add.w	r8, r1, #1
 80121b8:	1a5b      	subs	r3, r3, r1
 80121ba:	4641      	mov	r1, r8
 80121bc:	45a4      	cmp	ip, r4
 80121be:	bf88      	it	hi
 80121c0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80121c4:	eba4 040c 	sub.w	r4, r4, ip
 80121c8:	443a      	add	r2, r7
 80121ca:	005b      	lsls	r3, r3, #1
 80121cc:	f1be 0e01 	subs.w	lr, lr, #1
 80121d0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80121d4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80121d8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80121dc:	d1dc      	bne.n	8012198 <__ieee754_sqrt+0xb0>
 80121de:	4323      	orrs	r3, r4
 80121e0:	d006      	beq.n	80121f0 <__ieee754_sqrt+0x108>
 80121e2:	1c54      	adds	r4, r2, #1
 80121e4:	bf0b      	itete	eq
 80121e6:	4672      	moveq	r2, lr
 80121e8:	3201      	addne	r2, #1
 80121ea:	3001      	addeq	r0, #1
 80121ec:	f022 0201 	bicne.w	r2, r2, #1
 80121f0:	1043      	asrs	r3, r0, #1
 80121f2:	07c1      	lsls	r1, r0, #31
 80121f4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80121f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80121fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012200:	bf48      	it	mi
 8012202:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012206:	4610      	mov	r0, r2
 8012208:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801220c:	e782      	b.n	8012114 <__ieee754_sqrt+0x2c>
 801220e:	0ae3      	lsrs	r3, r4, #11
 8012210:	3915      	subs	r1, #21
 8012212:	0564      	lsls	r4, r4, #21
 8012214:	2b00      	cmp	r3, #0
 8012216:	d0fa      	beq.n	801220e <__ieee754_sqrt+0x126>
 8012218:	02de      	lsls	r6, r3, #11
 801221a:	d50a      	bpl.n	8012232 <__ieee754_sqrt+0x14a>
 801221c:	f1c2 0020 	rsb	r0, r2, #32
 8012220:	fa24 f000 	lsr.w	r0, r4, r0
 8012224:	1e55      	subs	r5, r2, #1
 8012226:	4094      	lsls	r4, r2
 8012228:	4303      	orrs	r3, r0
 801222a:	1b4a      	subs	r2, r1, r5
 801222c:	e78a      	b.n	8012144 <__ieee754_sqrt+0x5c>
 801222e:	4611      	mov	r1, r2
 8012230:	e7f0      	b.n	8012214 <__ieee754_sqrt+0x12c>
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	3201      	adds	r2, #1
 8012236:	e7ef      	b.n	8012218 <__ieee754_sqrt+0x130>
 8012238:	4688      	mov	r8, r1
 801223a:	e7bd      	b.n	80121b8 <__ieee754_sqrt+0xd0>
 801223c:	7ff00000 	.word	0x7ff00000

08012240 <abort>:
 8012240:	2006      	movs	r0, #6
 8012242:	b508      	push	{r3, lr}
 8012244:	f000 ffe6 	bl	8013214 <raise>
 8012248:	2001      	movs	r0, #1
 801224a:	f7f1 fdee 	bl	8003e2a <_exit>
	...

08012250 <calloc>:
 8012250:	4b02      	ldr	r3, [pc, #8]	; (801225c <calloc+0xc>)
 8012252:	460a      	mov	r2, r1
 8012254:	4601      	mov	r1, r0
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	f000 b87a 	b.w	8012350 <_calloc_r>
 801225c:	20000224 	.word	0x20000224

08012260 <__errno>:
 8012260:	4b01      	ldr	r3, [pc, #4]	; (8012268 <__errno+0x8>)
 8012262:	6818      	ldr	r0, [r3, #0]
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	20000224 	.word	0x20000224

0801226c <__libc_init_array>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	2600      	movs	r6, #0
 8012270:	4d0c      	ldr	r5, [pc, #48]	; (80122a4 <__libc_init_array+0x38>)
 8012272:	4c0d      	ldr	r4, [pc, #52]	; (80122a8 <__libc_init_array+0x3c>)
 8012274:	1b64      	subs	r4, r4, r5
 8012276:	10a4      	asrs	r4, r4, #2
 8012278:	42a6      	cmp	r6, r4
 801227a:	d109      	bne.n	8012290 <__libc_init_array+0x24>
 801227c:	f005 f880 	bl	8017380 <_init>
 8012280:	2600      	movs	r6, #0
 8012282:	4d0a      	ldr	r5, [pc, #40]	; (80122ac <__libc_init_array+0x40>)
 8012284:	4c0a      	ldr	r4, [pc, #40]	; (80122b0 <__libc_init_array+0x44>)
 8012286:	1b64      	subs	r4, r4, r5
 8012288:	10a4      	asrs	r4, r4, #2
 801228a:	42a6      	cmp	r6, r4
 801228c:	d105      	bne.n	801229a <__libc_init_array+0x2e>
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	f855 3b04 	ldr.w	r3, [r5], #4
 8012294:	4798      	blx	r3
 8012296:	3601      	adds	r6, #1
 8012298:	e7ee      	b.n	8012278 <__libc_init_array+0xc>
 801229a:	f855 3b04 	ldr.w	r3, [r5], #4
 801229e:	4798      	blx	r3
 80122a0:	3601      	adds	r6, #1
 80122a2:	e7f2      	b.n	801228a <__libc_init_array+0x1e>
 80122a4:	08017cfc 	.word	0x08017cfc
 80122a8:	08017cfc 	.word	0x08017cfc
 80122ac:	08017cfc 	.word	0x08017cfc
 80122b0:	08017d08 	.word	0x08017d08

080122b4 <malloc>:
 80122b4:	4b02      	ldr	r3, [pc, #8]	; (80122c0 <malloc+0xc>)
 80122b6:	4601      	mov	r1, r0
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	f000 b8a3 	b.w	8012404 <_malloc_r>
 80122be:	bf00      	nop
 80122c0:	20000224 	.word	0x20000224

080122c4 <free>:
 80122c4:	4b02      	ldr	r3, [pc, #8]	; (80122d0 <free+0xc>)
 80122c6:	4601      	mov	r1, r0
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	f000 b84f 	b.w	801236c <_free_r>
 80122ce:	bf00      	nop
 80122d0:	20000224 	.word	0x20000224

080122d4 <memchr>:
 80122d4:	4603      	mov	r3, r0
 80122d6:	b510      	push	{r4, lr}
 80122d8:	b2c9      	uxtb	r1, r1
 80122da:	4402      	add	r2, r0
 80122dc:	4293      	cmp	r3, r2
 80122de:	4618      	mov	r0, r3
 80122e0:	d101      	bne.n	80122e6 <memchr+0x12>
 80122e2:	2000      	movs	r0, #0
 80122e4:	e003      	b.n	80122ee <memchr+0x1a>
 80122e6:	7804      	ldrb	r4, [r0, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	428c      	cmp	r4, r1
 80122ec:	d1f6      	bne.n	80122dc <memchr+0x8>
 80122ee:	bd10      	pop	{r4, pc}

080122f0 <memcpy>:
 80122f0:	440a      	add	r2, r1
 80122f2:	4291      	cmp	r1, r2
 80122f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80122f8:	d100      	bne.n	80122fc <memcpy+0xc>
 80122fa:	4770      	bx	lr
 80122fc:	b510      	push	{r4, lr}
 80122fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012302:	4291      	cmp	r1, r2
 8012304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012308:	d1f9      	bne.n	80122fe <memcpy+0xe>
 801230a:	bd10      	pop	{r4, pc}

0801230c <memmove>:
 801230c:	4288      	cmp	r0, r1
 801230e:	b510      	push	{r4, lr}
 8012310:	eb01 0402 	add.w	r4, r1, r2
 8012314:	d902      	bls.n	801231c <memmove+0x10>
 8012316:	4284      	cmp	r4, r0
 8012318:	4623      	mov	r3, r4
 801231a:	d807      	bhi.n	801232c <memmove+0x20>
 801231c:	1e43      	subs	r3, r0, #1
 801231e:	42a1      	cmp	r1, r4
 8012320:	d008      	beq.n	8012334 <memmove+0x28>
 8012322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801232a:	e7f8      	b.n	801231e <memmove+0x12>
 801232c:	4601      	mov	r1, r0
 801232e:	4402      	add	r2, r0
 8012330:	428a      	cmp	r2, r1
 8012332:	d100      	bne.n	8012336 <memmove+0x2a>
 8012334:	bd10      	pop	{r4, pc}
 8012336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801233a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801233e:	e7f7      	b.n	8012330 <memmove+0x24>

08012340 <memset>:
 8012340:	4603      	mov	r3, r0
 8012342:	4402      	add	r2, r0
 8012344:	4293      	cmp	r3, r2
 8012346:	d100      	bne.n	801234a <memset+0xa>
 8012348:	4770      	bx	lr
 801234a:	f803 1b01 	strb.w	r1, [r3], #1
 801234e:	e7f9      	b.n	8012344 <memset+0x4>

08012350 <_calloc_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	fb02 f501 	mul.w	r5, r2, r1
 8012356:	4629      	mov	r1, r5
 8012358:	f000 f854 	bl	8012404 <_malloc_r>
 801235c:	4604      	mov	r4, r0
 801235e:	b118      	cbz	r0, 8012368 <_calloc_r+0x18>
 8012360:	462a      	mov	r2, r5
 8012362:	2100      	movs	r1, #0
 8012364:	f7ff ffec 	bl	8012340 <memset>
 8012368:	4620      	mov	r0, r4
 801236a:	bd38      	pop	{r3, r4, r5, pc}

0801236c <_free_r>:
 801236c:	b538      	push	{r3, r4, r5, lr}
 801236e:	4605      	mov	r5, r0
 8012370:	2900      	cmp	r1, #0
 8012372:	d043      	beq.n	80123fc <_free_r+0x90>
 8012374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012378:	1f0c      	subs	r4, r1, #4
 801237a:	2b00      	cmp	r3, #0
 801237c:	bfb8      	it	lt
 801237e:	18e4      	addlt	r4, r4, r3
 8012380:	f003 f8e6 	bl	8015550 <__malloc_lock>
 8012384:	4a1e      	ldr	r2, [pc, #120]	; (8012400 <_free_r+0x94>)
 8012386:	6813      	ldr	r3, [r2, #0]
 8012388:	4610      	mov	r0, r2
 801238a:	b933      	cbnz	r3, 801239a <_free_r+0x2e>
 801238c:	6063      	str	r3, [r4, #4]
 801238e:	6014      	str	r4, [r2, #0]
 8012390:	4628      	mov	r0, r5
 8012392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012396:	f003 b8e1 	b.w	801555c <__malloc_unlock>
 801239a:	42a3      	cmp	r3, r4
 801239c:	d90a      	bls.n	80123b4 <_free_r+0x48>
 801239e:	6821      	ldr	r1, [r4, #0]
 80123a0:	1862      	adds	r2, r4, r1
 80123a2:	4293      	cmp	r3, r2
 80123a4:	bf01      	itttt	eq
 80123a6:	681a      	ldreq	r2, [r3, #0]
 80123a8:	685b      	ldreq	r3, [r3, #4]
 80123aa:	1852      	addeq	r2, r2, r1
 80123ac:	6022      	streq	r2, [r4, #0]
 80123ae:	6063      	str	r3, [r4, #4]
 80123b0:	6004      	str	r4, [r0, #0]
 80123b2:	e7ed      	b.n	8012390 <_free_r+0x24>
 80123b4:	461a      	mov	r2, r3
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	b10b      	cbz	r3, 80123be <_free_r+0x52>
 80123ba:	42a3      	cmp	r3, r4
 80123bc:	d9fa      	bls.n	80123b4 <_free_r+0x48>
 80123be:	6811      	ldr	r1, [r2, #0]
 80123c0:	1850      	adds	r0, r2, r1
 80123c2:	42a0      	cmp	r0, r4
 80123c4:	d10b      	bne.n	80123de <_free_r+0x72>
 80123c6:	6820      	ldr	r0, [r4, #0]
 80123c8:	4401      	add	r1, r0
 80123ca:	1850      	adds	r0, r2, r1
 80123cc:	4283      	cmp	r3, r0
 80123ce:	6011      	str	r1, [r2, #0]
 80123d0:	d1de      	bne.n	8012390 <_free_r+0x24>
 80123d2:	6818      	ldr	r0, [r3, #0]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	4401      	add	r1, r0
 80123d8:	6011      	str	r1, [r2, #0]
 80123da:	6053      	str	r3, [r2, #4]
 80123dc:	e7d8      	b.n	8012390 <_free_r+0x24>
 80123de:	d902      	bls.n	80123e6 <_free_r+0x7a>
 80123e0:	230c      	movs	r3, #12
 80123e2:	602b      	str	r3, [r5, #0]
 80123e4:	e7d4      	b.n	8012390 <_free_r+0x24>
 80123e6:	6820      	ldr	r0, [r4, #0]
 80123e8:	1821      	adds	r1, r4, r0
 80123ea:	428b      	cmp	r3, r1
 80123ec:	bf01      	itttt	eq
 80123ee:	6819      	ldreq	r1, [r3, #0]
 80123f0:	685b      	ldreq	r3, [r3, #4]
 80123f2:	1809      	addeq	r1, r1, r0
 80123f4:	6021      	streq	r1, [r4, #0]
 80123f6:	6063      	str	r3, [r4, #4]
 80123f8:	6054      	str	r4, [r2, #4]
 80123fa:	e7c9      	b.n	8012390 <_free_r+0x24>
 80123fc:	bd38      	pop	{r3, r4, r5, pc}
 80123fe:	bf00      	nop
 8012400:	20000938 	.word	0x20000938

08012404 <_malloc_r>:
 8012404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012406:	1ccd      	adds	r5, r1, #3
 8012408:	f025 0503 	bic.w	r5, r5, #3
 801240c:	3508      	adds	r5, #8
 801240e:	2d0c      	cmp	r5, #12
 8012410:	bf38      	it	cc
 8012412:	250c      	movcc	r5, #12
 8012414:	2d00      	cmp	r5, #0
 8012416:	4606      	mov	r6, r0
 8012418:	db01      	blt.n	801241e <_malloc_r+0x1a>
 801241a:	42a9      	cmp	r1, r5
 801241c:	d903      	bls.n	8012426 <_malloc_r+0x22>
 801241e:	230c      	movs	r3, #12
 8012420:	6033      	str	r3, [r6, #0]
 8012422:	2000      	movs	r0, #0
 8012424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012426:	f003 f893 	bl	8015550 <__malloc_lock>
 801242a:	4921      	ldr	r1, [pc, #132]	; (80124b0 <_malloc_r+0xac>)
 801242c:	680a      	ldr	r2, [r1, #0]
 801242e:	4614      	mov	r4, r2
 8012430:	b99c      	cbnz	r4, 801245a <_malloc_r+0x56>
 8012432:	4f20      	ldr	r7, [pc, #128]	; (80124b4 <_malloc_r+0xb0>)
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	b923      	cbnz	r3, 8012442 <_malloc_r+0x3e>
 8012438:	4621      	mov	r1, r4
 801243a:	4630      	mov	r0, r6
 801243c:	f000 feae 	bl	801319c <_sbrk_r>
 8012440:	6038      	str	r0, [r7, #0]
 8012442:	4629      	mov	r1, r5
 8012444:	4630      	mov	r0, r6
 8012446:	f000 fea9 	bl	801319c <_sbrk_r>
 801244a:	1c43      	adds	r3, r0, #1
 801244c:	d123      	bne.n	8012496 <_malloc_r+0x92>
 801244e:	230c      	movs	r3, #12
 8012450:	4630      	mov	r0, r6
 8012452:	6033      	str	r3, [r6, #0]
 8012454:	f003 f882 	bl	801555c <__malloc_unlock>
 8012458:	e7e3      	b.n	8012422 <_malloc_r+0x1e>
 801245a:	6823      	ldr	r3, [r4, #0]
 801245c:	1b5b      	subs	r3, r3, r5
 801245e:	d417      	bmi.n	8012490 <_malloc_r+0x8c>
 8012460:	2b0b      	cmp	r3, #11
 8012462:	d903      	bls.n	801246c <_malloc_r+0x68>
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	441c      	add	r4, r3
 8012468:	6025      	str	r5, [r4, #0]
 801246a:	e004      	b.n	8012476 <_malloc_r+0x72>
 801246c:	6863      	ldr	r3, [r4, #4]
 801246e:	42a2      	cmp	r2, r4
 8012470:	bf0c      	ite	eq
 8012472:	600b      	streq	r3, [r1, #0]
 8012474:	6053      	strne	r3, [r2, #4]
 8012476:	4630      	mov	r0, r6
 8012478:	f003 f870 	bl	801555c <__malloc_unlock>
 801247c:	f104 000b 	add.w	r0, r4, #11
 8012480:	1d23      	adds	r3, r4, #4
 8012482:	f020 0007 	bic.w	r0, r0, #7
 8012486:	1ac2      	subs	r2, r0, r3
 8012488:	d0cc      	beq.n	8012424 <_malloc_r+0x20>
 801248a:	1a1b      	subs	r3, r3, r0
 801248c:	50a3      	str	r3, [r4, r2]
 801248e:	e7c9      	b.n	8012424 <_malloc_r+0x20>
 8012490:	4622      	mov	r2, r4
 8012492:	6864      	ldr	r4, [r4, #4]
 8012494:	e7cc      	b.n	8012430 <_malloc_r+0x2c>
 8012496:	1cc4      	adds	r4, r0, #3
 8012498:	f024 0403 	bic.w	r4, r4, #3
 801249c:	42a0      	cmp	r0, r4
 801249e:	d0e3      	beq.n	8012468 <_malloc_r+0x64>
 80124a0:	1a21      	subs	r1, r4, r0
 80124a2:	4630      	mov	r0, r6
 80124a4:	f000 fe7a 	bl	801319c <_sbrk_r>
 80124a8:	3001      	adds	r0, #1
 80124aa:	d1dd      	bne.n	8012468 <_malloc_r+0x64>
 80124ac:	e7cf      	b.n	801244e <_malloc_r+0x4a>
 80124ae:	bf00      	nop
 80124b0:	20000938 	.word	0x20000938
 80124b4:	2000093c 	.word	0x2000093c

080124b8 <__cvt>:
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124be:	461f      	mov	r7, r3
 80124c0:	bfbb      	ittet	lt
 80124c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80124c6:	461f      	movlt	r7, r3
 80124c8:	2300      	movge	r3, #0
 80124ca:	232d      	movlt	r3, #45	; 0x2d
 80124cc:	b088      	sub	sp, #32
 80124ce:	4614      	mov	r4, r2
 80124d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80124d4:	7013      	strb	r3, [r2, #0]
 80124d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80124dc:	f023 0820 	bic.w	r8, r3, #32
 80124e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80124e4:	d005      	beq.n	80124f2 <__cvt+0x3a>
 80124e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80124ea:	d100      	bne.n	80124ee <__cvt+0x36>
 80124ec:	3501      	adds	r5, #1
 80124ee:	2302      	movs	r3, #2
 80124f0:	e000      	b.n	80124f4 <__cvt+0x3c>
 80124f2:	2303      	movs	r3, #3
 80124f4:	aa07      	add	r2, sp, #28
 80124f6:	9204      	str	r2, [sp, #16]
 80124f8:	aa06      	add	r2, sp, #24
 80124fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80124fe:	e9cd 3500 	strd	r3, r5, [sp]
 8012502:	4622      	mov	r2, r4
 8012504:	463b      	mov	r3, r7
 8012506:	f001 fea7 	bl	8014258 <_dtoa_r>
 801250a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801250e:	4606      	mov	r6, r0
 8012510:	d102      	bne.n	8012518 <__cvt+0x60>
 8012512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012514:	07db      	lsls	r3, r3, #31
 8012516:	d522      	bpl.n	801255e <__cvt+0xa6>
 8012518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801251c:	eb06 0905 	add.w	r9, r6, r5
 8012520:	d110      	bne.n	8012544 <__cvt+0x8c>
 8012522:	7833      	ldrb	r3, [r6, #0]
 8012524:	2b30      	cmp	r3, #48	; 0x30
 8012526:	d10a      	bne.n	801253e <__cvt+0x86>
 8012528:	2200      	movs	r2, #0
 801252a:	2300      	movs	r3, #0
 801252c:	4620      	mov	r0, r4
 801252e:	4639      	mov	r1, r7
 8012530:	f7ee fa52 	bl	80009d8 <__aeabi_dcmpeq>
 8012534:	b918      	cbnz	r0, 801253e <__cvt+0x86>
 8012536:	f1c5 0501 	rsb	r5, r5, #1
 801253a:	f8ca 5000 	str.w	r5, [sl]
 801253e:	f8da 3000 	ldr.w	r3, [sl]
 8012542:	4499      	add	r9, r3
 8012544:	2200      	movs	r2, #0
 8012546:	2300      	movs	r3, #0
 8012548:	4620      	mov	r0, r4
 801254a:	4639      	mov	r1, r7
 801254c:	f7ee fa44 	bl	80009d8 <__aeabi_dcmpeq>
 8012550:	b108      	cbz	r0, 8012556 <__cvt+0x9e>
 8012552:	f8cd 901c 	str.w	r9, [sp, #28]
 8012556:	2230      	movs	r2, #48	; 0x30
 8012558:	9b07      	ldr	r3, [sp, #28]
 801255a:	454b      	cmp	r3, r9
 801255c:	d307      	bcc.n	801256e <__cvt+0xb6>
 801255e:	4630      	mov	r0, r6
 8012560:	9b07      	ldr	r3, [sp, #28]
 8012562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012564:	1b9b      	subs	r3, r3, r6
 8012566:	6013      	str	r3, [r2, #0]
 8012568:	b008      	add	sp, #32
 801256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801256e:	1c59      	adds	r1, r3, #1
 8012570:	9107      	str	r1, [sp, #28]
 8012572:	701a      	strb	r2, [r3, #0]
 8012574:	e7f0      	b.n	8012558 <__cvt+0xa0>

08012576 <__exponent>:
 8012576:	4603      	mov	r3, r0
 8012578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801257a:	2900      	cmp	r1, #0
 801257c:	f803 2b02 	strb.w	r2, [r3], #2
 8012580:	bfb6      	itet	lt
 8012582:	222d      	movlt	r2, #45	; 0x2d
 8012584:	222b      	movge	r2, #43	; 0x2b
 8012586:	4249      	neglt	r1, r1
 8012588:	2909      	cmp	r1, #9
 801258a:	7042      	strb	r2, [r0, #1]
 801258c:	dd2b      	ble.n	80125e6 <__exponent+0x70>
 801258e:	f10d 0407 	add.w	r4, sp, #7
 8012592:	46a4      	mov	ip, r4
 8012594:	270a      	movs	r7, #10
 8012596:	fb91 f6f7 	sdiv	r6, r1, r7
 801259a:	460a      	mov	r2, r1
 801259c:	46a6      	mov	lr, r4
 801259e:	fb07 1516 	mls	r5, r7, r6, r1
 80125a2:	2a63      	cmp	r2, #99	; 0x63
 80125a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80125a8:	4631      	mov	r1, r6
 80125aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80125ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80125b2:	dcf0      	bgt.n	8012596 <__exponent+0x20>
 80125b4:	3130      	adds	r1, #48	; 0x30
 80125b6:	f1ae 0502 	sub.w	r5, lr, #2
 80125ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80125be:	4629      	mov	r1, r5
 80125c0:	1c44      	adds	r4, r0, #1
 80125c2:	4561      	cmp	r1, ip
 80125c4:	d30a      	bcc.n	80125dc <__exponent+0x66>
 80125c6:	f10d 0209 	add.w	r2, sp, #9
 80125ca:	eba2 020e 	sub.w	r2, r2, lr
 80125ce:	4565      	cmp	r5, ip
 80125d0:	bf88      	it	hi
 80125d2:	2200      	movhi	r2, #0
 80125d4:	4413      	add	r3, r2
 80125d6:	1a18      	subs	r0, r3, r0
 80125d8:	b003      	add	sp, #12
 80125da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80125e4:	e7ed      	b.n	80125c2 <__exponent+0x4c>
 80125e6:	2330      	movs	r3, #48	; 0x30
 80125e8:	3130      	adds	r1, #48	; 0x30
 80125ea:	7083      	strb	r3, [r0, #2]
 80125ec:	70c1      	strb	r1, [r0, #3]
 80125ee:	1d03      	adds	r3, r0, #4
 80125f0:	e7f1      	b.n	80125d6 <__exponent+0x60>
	...

080125f4 <_printf_float>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	b091      	sub	sp, #68	; 0x44
 80125fa:	460c      	mov	r4, r1
 80125fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012600:	4616      	mov	r6, r2
 8012602:	461f      	mov	r7, r3
 8012604:	4605      	mov	r5, r0
 8012606:	f002 ff7b 	bl	8015500 <_localeconv_r>
 801260a:	6803      	ldr	r3, [r0, #0]
 801260c:	4618      	mov	r0, r3
 801260e:	9309      	str	r3, [sp, #36]	; 0x24
 8012610:	f7ed fdb6 	bl	8000180 <strlen>
 8012614:	2300      	movs	r3, #0
 8012616:	930e      	str	r3, [sp, #56]	; 0x38
 8012618:	f8d8 3000 	ldr.w	r3, [r8]
 801261c:	900a      	str	r0, [sp, #40]	; 0x28
 801261e:	3307      	adds	r3, #7
 8012620:	f023 0307 	bic.w	r3, r3, #7
 8012624:	f103 0208 	add.w	r2, r3, #8
 8012628:	f894 9018 	ldrb.w	r9, [r4, #24]
 801262c:	f8d4 b000 	ldr.w	fp, [r4]
 8012630:	f8c8 2000 	str.w	r2, [r8]
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801263c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012640:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012644:	930b      	str	r3, [sp, #44]	; 0x2c
 8012646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801264a:	4640      	mov	r0, r8
 801264c:	4b9c      	ldr	r3, [pc, #624]	; (80128c0 <_printf_float+0x2cc>)
 801264e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012650:	f7ee f9f4 	bl	8000a3c <__aeabi_dcmpun>
 8012654:	bb70      	cbnz	r0, 80126b4 <_printf_float+0xc0>
 8012656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801265a:	4640      	mov	r0, r8
 801265c:	4b98      	ldr	r3, [pc, #608]	; (80128c0 <_printf_float+0x2cc>)
 801265e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012660:	f7ee f9ce 	bl	8000a00 <__aeabi_dcmple>
 8012664:	bb30      	cbnz	r0, 80126b4 <_printf_float+0xc0>
 8012666:	2200      	movs	r2, #0
 8012668:	2300      	movs	r3, #0
 801266a:	4640      	mov	r0, r8
 801266c:	4651      	mov	r1, sl
 801266e:	f7ee f9bd 	bl	80009ec <__aeabi_dcmplt>
 8012672:	b110      	cbz	r0, 801267a <_printf_float+0x86>
 8012674:	232d      	movs	r3, #45	; 0x2d
 8012676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801267a:	4b92      	ldr	r3, [pc, #584]	; (80128c4 <_printf_float+0x2d0>)
 801267c:	4892      	ldr	r0, [pc, #584]	; (80128c8 <_printf_float+0x2d4>)
 801267e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012682:	bf94      	ite	ls
 8012684:	4698      	movls	r8, r3
 8012686:	4680      	movhi	r8, r0
 8012688:	2303      	movs	r3, #3
 801268a:	f04f 0a00 	mov.w	sl, #0
 801268e:	6123      	str	r3, [r4, #16]
 8012690:	f02b 0304 	bic.w	r3, fp, #4
 8012694:	6023      	str	r3, [r4, #0]
 8012696:	4633      	mov	r3, r6
 8012698:	4621      	mov	r1, r4
 801269a:	4628      	mov	r0, r5
 801269c:	9700      	str	r7, [sp, #0]
 801269e:	aa0f      	add	r2, sp, #60	; 0x3c
 80126a0:	f000 f9d4 	bl	8012a4c <_printf_common>
 80126a4:	3001      	adds	r0, #1
 80126a6:	f040 8090 	bne.w	80127ca <_printf_float+0x1d6>
 80126aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ae:	b011      	add	sp, #68	; 0x44
 80126b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b4:	4642      	mov	r2, r8
 80126b6:	4653      	mov	r3, sl
 80126b8:	4640      	mov	r0, r8
 80126ba:	4651      	mov	r1, sl
 80126bc:	f7ee f9be 	bl	8000a3c <__aeabi_dcmpun>
 80126c0:	b148      	cbz	r0, 80126d6 <_printf_float+0xe2>
 80126c2:	f1ba 0f00 	cmp.w	sl, #0
 80126c6:	bfb8      	it	lt
 80126c8:	232d      	movlt	r3, #45	; 0x2d
 80126ca:	4880      	ldr	r0, [pc, #512]	; (80128cc <_printf_float+0x2d8>)
 80126cc:	bfb8      	it	lt
 80126ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80126d2:	4b7f      	ldr	r3, [pc, #508]	; (80128d0 <_printf_float+0x2dc>)
 80126d4:	e7d3      	b.n	801267e <_printf_float+0x8a>
 80126d6:	6863      	ldr	r3, [r4, #4]
 80126d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	d142      	bne.n	8012766 <_printf_float+0x172>
 80126e0:	2306      	movs	r3, #6
 80126e2:	6063      	str	r3, [r4, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	9206      	str	r2, [sp, #24]
 80126e8:	aa0e      	add	r2, sp, #56	; 0x38
 80126ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80126ee:	aa0d      	add	r2, sp, #52	; 0x34
 80126f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80126f4:	9203      	str	r2, [sp, #12]
 80126f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80126fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	6863      	ldr	r3, [r4, #4]
 8012702:	4642      	mov	r2, r8
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	4628      	mov	r0, r5
 8012708:	4653      	mov	r3, sl
 801270a:	910b      	str	r1, [sp, #44]	; 0x2c
 801270c:	f7ff fed4 	bl	80124b8 <__cvt>
 8012710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012712:	4680      	mov	r8, r0
 8012714:	2947      	cmp	r1, #71	; 0x47
 8012716:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012718:	d108      	bne.n	801272c <_printf_float+0x138>
 801271a:	1cc8      	adds	r0, r1, #3
 801271c:	db02      	blt.n	8012724 <_printf_float+0x130>
 801271e:	6863      	ldr	r3, [r4, #4]
 8012720:	4299      	cmp	r1, r3
 8012722:	dd40      	ble.n	80127a6 <_printf_float+0x1b2>
 8012724:	f1a9 0902 	sub.w	r9, r9, #2
 8012728:	fa5f f989 	uxtb.w	r9, r9
 801272c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012730:	d81f      	bhi.n	8012772 <_printf_float+0x17e>
 8012732:	464a      	mov	r2, r9
 8012734:	3901      	subs	r1, #1
 8012736:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801273a:	910d      	str	r1, [sp, #52]	; 0x34
 801273c:	f7ff ff1b 	bl	8012576 <__exponent>
 8012740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012742:	4682      	mov	sl, r0
 8012744:	1813      	adds	r3, r2, r0
 8012746:	2a01      	cmp	r2, #1
 8012748:	6123      	str	r3, [r4, #16]
 801274a:	dc02      	bgt.n	8012752 <_printf_float+0x15e>
 801274c:	6822      	ldr	r2, [r4, #0]
 801274e:	07d2      	lsls	r2, r2, #31
 8012750:	d501      	bpl.n	8012756 <_printf_float+0x162>
 8012752:	3301      	adds	r3, #1
 8012754:	6123      	str	r3, [r4, #16]
 8012756:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801275a:	2b00      	cmp	r3, #0
 801275c:	d09b      	beq.n	8012696 <_printf_float+0xa2>
 801275e:	232d      	movs	r3, #45	; 0x2d
 8012760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012764:	e797      	b.n	8012696 <_printf_float+0xa2>
 8012766:	2947      	cmp	r1, #71	; 0x47
 8012768:	d1bc      	bne.n	80126e4 <_printf_float+0xf0>
 801276a:	2b00      	cmp	r3, #0
 801276c:	d1ba      	bne.n	80126e4 <_printf_float+0xf0>
 801276e:	2301      	movs	r3, #1
 8012770:	e7b7      	b.n	80126e2 <_printf_float+0xee>
 8012772:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012776:	d118      	bne.n	80127aa <_printf_float+0x1b6>
 8012778:	2900      	cmp	r1, #0
 801277a:	6863      	ldr	r3, [r4, #4]
 801277c:	dd0b      	ble.n	8012796 <_printf_float+0x1a2>
 801277e:	6121      	str	r1, [r4, #16]
 8012780:	b913      	cbnz	r3, 8012788 <_printf_float+0x194>
 8012782:	6822      	ldr	r2, [r4, #0]
 8012784:	07d0      	lsls	r0, r2, #31
 8012786:	d502      	bpl.n	801278e <_printf_float+0x19a>
 8012788:	3301      	adds	r3, #1
 801278a:	440b      	add	r3, r1
 801278c:	6123      	str	r3, [r4, #16]
 801278e:	f04f 0a00 	mov.w	sl, #0
 8012792:	65a1      	str	r1, [r4, #88]	; 0x58
 8012794:	e7df      	b.n	8012756 <_printf_float+0x162>
 8012796:	b913      	cbnz	r3, 801279e <_printf_float+0x1aa>
 8012798:	6822      	ldr	r2, [r4, #0]
 801279a:	07d2      	lsls	r2, r2, #31
 801279c:	d501      	bpl.n	80127a2 <_printf_float+0x1ae>
 801279e:	3302      	adds	r3, #2
 80127a0:	e7f4      	b.n	801278c <_printf_float+0x198>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e7f2      	b.n	801278c <_printf_float+0x198>
 80127a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80127aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ac:	4299      	cmp	r1, r3
 80127ae:	db05      	blt.n	80127bc <_printf_float+0x1c8>
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	6121      	str	r1, [r4, #16]
 80127b4:	07d8      	lsls	r0, r3, #31
 80127b6:	d5ea      	bpl.n	801278e <_printf_float+0x19a>
 80127b8:	1c4b      	adds	r3, r1, #1
 80127ba:	e7e7      	b.n	801278c <_printf_float+0x198>
 80127bc:	2900      	cmp	r1, #0
 80127be:	bfcc      	ite	gt
 80127c0:	2201      	movgt	r2, #1
 80127c2:	f1c1 0202 	rsble	r2, r1, #2
 80127c6:	4413      	add	r3, r2
 80127c8:	e7e0      	b.n	801278c <_printf_float+0x198>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	055a      	lsls	r2, r3, #21
 80127ce:	d407      	bmi.n	80127e0 <_printf_float+0x1ec>
 80127d0:	6923      	ldr	r3, [r4, #16]
 80127d2:	4642      	mov	r2, r8
 80127d4:	4631      	mov	r1, r6
 80127d6:	4628      	mov	r0, r5
 80127d8:	47b8      	blx	r7
 80127da:	3001      	adds	r0, #1
 80127dc:	d12b      	bne.n	8012836 <_printf_float+0x242>
 80127de:	e764      	b.n	80126aa <_printf_float+0xb6>
 80127e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80127e4:	f240 80dd 	bls.w	80129a2 <_printf_float+0x3ae>
 80127e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80127ec:	2200      	movs	r2, #0
 80127ee:	2300      	movs	r3, #0
 80127f0:	f7ee f8f2 	bl	80009d8 <__aeabi_dcmpeq>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d033      	beq.n	8012860 <_printf_float+0x26c>
 80127f8:	2301      	movs	r3, #1
 80127fa:	4631      	mov	r1, r6
 80127fc:	4628      	mov	r0, r5
 80127fe:	4a35      	ldr	r2, [pc, #212]	; (80128d4 <_printf_float+0x2e0>)
 8012800:	47b8      	blx	r7
 8012802:	3001      	adds	r0, #1
 8012804:	f43f af51 	beq.w	80126aa <_printf_float+0xb6>
 8012808:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801280c:	429a      	cmp	r2, r3
 801280e:	db02      	blt.n	8012816 <_printf_float+0x222>
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	07d8      	lsls	r0, r3, #31
 8012814:	d50f      	bpl.n	8012836 <_printf_float+0x242>
 8012816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801281a:	4631      	mov	r1, r6
 801281c:	4628      	mov	r0, r5
 801281e:	47b8      	blx	r7
 8012820:	3001      	adds	r0, #1
 8012822:	f43f af42 	beq.w	80126aa <_printf_float+0xb6>
 8012826:	f04f 0800 	mov.w	r8, #0
 801282a:	f104 091a 	add.w	r9, r4, #26
 801282e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012830:	3b01      	subs	r3, #1
 8012832:	4543      	cmp	r3, r8
 8012834:	dc09      	bgt.n	801284a <_printf_float+0x256>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	079b      	lsls	r3, r3, #30
 801283a:	f100 8102 	bmi.w	8012a42 <_printf_float+0x44e>
 801283e:	68e0      	ldr	r0, [r4, #12]
 8012840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012842:	4298      	cmp	r0, r3
 8012844:	bfb8      	it	lt
 8012846:	4618      	movlt	r0, r3
 8012848:	e731      	b.n	80126ae <_printf_float+0xba>
 801284a:	2301      	movs	r3, #1
 801284c:	464a      	mov	r2, r9
 801284e:	4631      	mov	r1, r6
 8012850:	4628      	mov	r0, r5
 8012852:	47b8      	blx	r7
 8012854:	3001      	adds	r0, #1
 8012856:	f43f af28 	beq.w	80126aa <_printf_float+0xb6>
 801285a:	f108 0801 	add.w	r8, r8, #1
 801285e:	e7e6      	b.n	801282e <_printf_float+0x23a>
 8012860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012862:	2b00      	cmp	r3, #0
 8012864:	dc38      	bgt.n	80128d8 <_printf_float+0x2e4>
 8012866:	2301      	movs	r3, #1
 8012868:	4631      	mov	r1, r6
 801286a:	4628      	mov	r0, r5
 801286c:	4a19      	ldr	r2, [pc, #100]	; (80128d4 <_printf_float+0x2e0>)
 801286e:	47b8      	blx	r7
 8012870:	3001      	adds	r0, #1
 8012872:	f43f af1a 	beq.w	80126aa <_printf_float+0xb6>
 8012876:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801287a:	4313      	orrs	r3, r2
 801287c:	d102      	bne.n	8012884 <_printf_float+0x290>
 801287e:	6823      	ldr	r3, [r4, #0]
 8012880:	07d9      	lsls	r1, r3, #31
 8012882:	d5d8      	bpl.n	8012836 <_printf_float+0x242>
 8012884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012888:	4631      	mov	r1, r6
 801288a:	4628      	mov	r0, r5
 801288c:	47b8      	blx	r7
 801288e:	3001      	adds	r0, #1
 8012890:	f43f af0b 	beq.w	80126aa <_printf_float+0xb6>
 8012894:	f04f 0900 	mov.w	r9, #0
 8012898:	f104 0a1a 	add.w	sl, r4, #26
 801289c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801289e:	425b      	negs	r3, r3
 80128a0:	454b      	cmp	r3, r9
 80128a2:	dc01      	bgt.n	80128a8 <_printf_float+0x2b4>
 80128a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128a6:	e794      	b.n	80127d2 <_printf_float+0x1de>
 80128a8:	2301      	movs	r3, #1
 80128aa:	4652      	mov	r2, sl
 80128ac:	4631      	mov	r1, r6
 80128ae:	4628      	mov	r0, r5
 80128b0:	47b8      	blx	r7
 80128b2:	3001      	adds	r0, #1
 80128b4:	f43f aef9 	beq.w	80126aa <_printf_float+0xb6>
 80128b8:	f109 0901 	add.w	r9, r9, #1
 80128bc:	e7ee      	b.n	801289c <_printf_float+0x2a8>
 80128be:	bf00      	nop
 80128c0:	7fefffff 	.word	0x7fefffff
 80128c4:	0801782c 	.word	0x0801782c
 80128c8:	08017830 	.word	0x08017830
 80128cc:	08017838 	.word	0x08017838
 80128d0:	08017834 	.word	0x08017834
 80128d4:	08017c41 	.word	0x08017c41
 80128d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128dc:	429a      	cmp	r2, r3
 80128de:	bfa8      	it	ge
 80128e0:	461a      	movge	r2, r3
 80128e2:	2a00      	cmp	r2, #0
 80128e4:	4691      	mov	r9, r2
 80128e6:	dc37      	bgt.n	8012958 <_printf_float+0x364>
 80128e8:	f04f 0b00 	mov.w	fp, #0
 80128ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128f0:	f104 021a 	add.w	r2, r4, #26
 80128f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80128f8:	ebaa 0309 	sub.w	r3, sl, r9
 80128fc:	455b      	cmp	r3, fp
 80128fe:	dc33      	bgt.n	8012968 <_printf_float+0x374>
 8012900:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012904:	429a      	cmp	r2, r3
 8012906:	db3b      	blt.n	8012980 <_printf_float+0x38c>
 8012908:	6823      	ldr	r3, [r4, #0]
 801290a:	07da      	lsls	r2, r3, #31
 801290c:	d438      	bmi.n	8012980 <_printf_float+0x38c>
 801290e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012912:	eba2 030a 	sub.w	r3, r2, sl
 8012916:	eba2 0901 	sub.w	r9, r2, r1
 801291a:	4599      	cmp	r9, r3
 801291c:	bfa8      	it	ge
 801291e:	4699      	movge	r9, r3
 8012920:	f1b9 0f00 	cmp.w	r9, #0
 8012924:	dc34      	bgt.n	8012990 <_printf_float+0x39c>
 8012926:	f04f 0800 	mov.w	r8, #0
 801292a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801292e:	f104 0a1a 	add.w	sl, r4, #26
 8012932:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012936:	1a9b      	subs	r3, r3, r2
 8012938:	eba3 0309 	sub.w	r3, r3, r9
 801293c:	4543      	cmp	r3, r8
 801293e:	f77f af7a 	ble.w	8012836 <_printf_float+0x242>
 8012942:	2301      	movs	r3, #1
 8012944:	4652      	mov	r2, sl
 8012946:	4631      	mov	r1, r6
 8012948:	4628      	mov	r0, r5
 801294a:	47b8      	blx	r7
 801294c:	3001      	adds	r0, #1
 801294e:	f43f aeac 	beq.w	80126aa <_printf_float+0xb6>
 8012952:	f108 0801 	add.w	r8, r8, #1
 8012956:	e7ec      	b.n	8012932 <_printf_float+0x33e>
 8012958:	4613      	mov	r3, r2
 801295a:	4631      	mov	r1, r6
 801295c:	4642      	mov	r2, r8
 801295e:	4628      	mov	r0, r5
 8012960:	47b8      	blx	r7
 8012962:	3001      	adds	r0, #1
 8012964:	d1c0      	bne.n	80128e8 <_printf_float+0x2f4>
 8012966:	e6a0      	b.n	80126aa <_printf_float+0xb6>
 8012968:	2301      	movs	r3, #1
 801296a:	4631      	mov	r1, r6
 801296c:	4628      	mov	r0, r5
 801296e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012970:	47b8      	blx	r7
 8012972:	3001      	adds	r0, #1
 8012974:	f43f ae99 	beq.w	80126aa <_printf_float+0xb6>
 8012978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801297a:	f10b 0b01 	add.w	fp, fp, #1
 801297e:	e7b9      	b.n	80128f4 <_printf_float+0x300>
 8012980:	4631      	mov	r1, r6
 8012982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012986:	4628      	mov	r0, r5
 8012988:	47b8      	blx	r7
 801298a:	3001      	adds	r0, #1
 801298c:	d1bf      	bne.n	801290e <_printf_float+0x31a>
 801298e:	e68c      	b.n	80126aa <_printf_float+0xb6>
 8012990:	464b      	mov	r3, r9
 8012992:	4631      	mov	r1, r6
 8012994:	4628      	mov	r0, r5
 8012996:	eb08 020a 	add.w	r2, r8, sl
 801299a:	47b8      	blx	r7
 801299c:	3001      	adds	r0, #1
 801299e:	d1c2      	bne.n	8012926 <_printf_float+0x332>
 80129a0:	e683      	b.n	80126aa <_printf_float+0xb6>
 80129a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129a4:	2a01      	cmp	r2, #1
 80129a6:	dc01      	bgt.n	80129ac <_printf_float+0x3b8>
 80129a8:	07db      	lsls	r3, r3, #31
 80129aa:	d537      	bpl.n	8012a1c <_printf_float+0x428>
 80129ac:	2301      	movs	r3, #1
 80129ae:	4642      	mov	r2, r8
 80129b0:	4631      	mov	r1, r6
 80129b2:	4628      	mov	r0, r5
 80129b4:	47b8      	blx	r7
 80129b6:	3001      	adds	r0, #1
 80129b8:	f43f ae77 	beq.w	80126aa <_printf_float+0xb6>
 80129bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129c0:	4631      	mov	r1, r6
 80129c2:	4628      	mov	r0, r5
 80129c4:	47b8      	blx	r7
 80129c6:	3001      	adds	r0, #1
 80129c8:	f43f ae6f 	beq.w	80126aa <_printf_float+0xb6>
 80129cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80129d0:	2200      	movs	r2, #0
 80129d2:	2300      	movs	r3, #0
 80129d4:	f7ee f800 	bl	80009d8 <__aeabi_dcmpeq>
 80129d8:	b9d8      	cbnz	r0, 8012a12 <_printf_float+0x41e>
 80129da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129dc:	f108 0201 	add.w	r2, r8, #1
 80129e0:	3b01      	subs	r3, #1
 80129e2:	4631      	mov	r1, r6
 80129e4:	4628      	mov	r0, r5
 80129e6:	47b8      	blx	r7
 80129e8:	3001      	adds	r0, #1
 80129ea:	d10e      	bne.n	8012a0a <_printf_float+0x416>
 80129ec:	e65d      	b.n	80126aa <_printf_float+0xb6>
 80129ee:	2301      	movs	r3, #1
 80129f0:	464a      	mov	r2, r9
 80129f2:	4631      	mov	r1, r6
 80129f4:	4628      	mov	r0, r5
 80129f6:	47b8      	blx	r7
 80129f8:	3001      	adds	r0, #1
 80129fa:	f43f ae56 	beq.w	80126aa <_printf_float+0xb6>
 80129fe:	f108 0801 	add.w	r8, r8, #1
 8012a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a04:	3b01      	subs	r3, #1
 8012a06:	4543      	cmp	r3, r8
 8012a08:	dcf1      	bgt.n	80129ee <_printf_float+0x3fa>
 8012a0a:	4653      	mov	r3, sl
 8012a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a10:	e6e0      	b.n	80127d4 <_printf_float+0x1e0>
 8012a12:	f04f 0800 	mov.w	r8, #0
 8012a16:	f104 091a 	add.w	r9, r4, #26
 8012a1a:	e7f2      	b.n	8012a02 <_printf_float+0x40e>
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	4642      	mov	r2, r8
 8012a20:	e7df      	b.n	80129e2 <_printf_float+0x3ee>
 8012a22:	2301      	movs	r3, #1
 8012a24:	464a      	mov	r2, r9
 8012a26:	4631      	mov	r1, r6
 8012a28:	4628      	mov	r0, r5
 8012a2a:	47b8      	blx	r7
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	f43f ae3c 	beq.w	80126aa <_printf_float+0xb6>
 8012a32:	f108 0801 	add.w	r8, r8, #1
 8012a36:	68e3      	ldr	r3, [r4, #12]
 8012a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a3a:	1a5b      	subs	r3, r3, r1
 8012a3c:	4543      	cmp	r3, r8
 8012a3e:	dcf0      	bgt.n	8012a22 <_printf_float+0x42e>
 8012a40:	e6fd      	b.n	801283e <_printf_float+0x24a>
 8012a42:	f04f 0800 	mov.w	r8, #0
 8012a46:	f104 0919 	add.w	r9, r4, #25
 8012a4a:	e7f4      	b.n	8012a36 <_printf_float+0x442>

08012a4c <_printf_common>:
 8012a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a50:	4616      	mov	r6, r2
 8012a52:	4699      	mov	r9, r3
 8012a54:	688a      	ldr	r2, [r1, #8]
 8012a56:	690b      	ldr	r3, [r1, #16]
 8012a58:	4607      	mov	r7, r0
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	bfb8      	it	lt
 8012a5e:	4613      	movlt	r3, r2
 8012a60:	6033      	str	r3, [r6, #0]
 8012a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a66:	460c      	mov	r4, r1
 8012a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a6c:	b10a      	cbz	r2, 8012a72 <_printf_common+0x26>
 8012a6e:	3301      	adds	r3, #1
 8012a70:	6033      	str	r3, [r6, #0]
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	0699      	lsls	r1, r3, #26
 8012a76:	bf42      	ittt	mi
 8012a78:	6833      	ldrmi	r3, [r6, #0]
 8012a7a:	3302      	addmi	r3, #2
 8012a7c:	6033      	strmi	r3, [r6, #0]
 8012a7e:	6825      	ldr	r5, [r4, #0]
 8012a80:	f015 0506 	ands.w	r5, r5, #6
 8012a84:	d106      	bne.n	8012a94 <_printf_common+0x48>
 8012a86:	f104 0a19 	add.w	sl, r4, #25
 8012a8a:	68e3      	ldr	r3, [r4, #12]
 8012a8c:	6832      	ldr	r2, [r6, #0]
 8012a8e:	1a9b      	subs	r3, r3, r2
 8012a90:	42ab      	cmp	r3, r5
 8012a92:	dc28      	bgt.n	8012ae6 <_printf_common+0x9a>
 8012a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a98:	1e13      	subs	r3, r2, #0
 8012a9a:	6822      	ldr	r2, [r4, #0]
 8012a9c:	bf18      	it	ne
 8012a9e:	2301      	movne	r3, #1
 8012aa0:	0692      	lsls	r2, r2, #26
 8012aa2:	d42d      	bmi.n	8012b00 <_printf_common+0xb4>
 8012aa4:	4649      	mov	r1, r9
 8012aa6:	4638      	mov	r0, r7
 8012aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012aac:	47c0      	blx	r8
 8012aae:	3001      	adds	r0, #1
 8012ab0:	d020      	beq.n	8012af4 <_printf_common+0xa8>
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	68e5      	ldr	r5, [r4, #12]
 8012ab6:	f003 0306 	and.w	r3, r3, #6
 8012aba:	2b04      	cmp	r3, #4
 8012abc:	bf18      	it	ne
 8012abe:	2500      	movne	r5, #0
 8012ac0:	6832      	ldr	r2, [r6, #0]
 8012ac2:	f04f 0600 	mov.w	r6, #0
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	bf08      	it	eq
 8012aca:	1aad      	subeq	r5, r5, r2
 8012acc:	6922      	ldr	r2, [r4, #16]
 8012ace:	bf08      	it	eq
 8012ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	bfc4      	itt	gt
 8012ad8:	1a9b      	subgt	r3, r3, r2
 8012ada:	18ed      	addgt	r5, r5, r3
 8012adc:	341a      	adds	r4, #26
 8012ade:	42b5      	cmp	r5, r6
 8012ae0:	d11a      	bne.n	8012b18 <_printf_common+0xcc>
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	e008      	b.n	8012af8 <_printf_common+0xac>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	4652      	mov	r2, sl
 8012aea:	4649      	mov	r1, r9
 8012aec:	4638      	mov	r0, r7
 8012aee:	47c0      	blx	r8
 8012af0:	3001      	adds	r0, #1
 8012af2:	d103      	bne.n	8012afc <_printf_common+0xb0>
 8012af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012afc:	3501      	adds	r5, #1
 8012afe:	e7c4      	b.n	8012a8a <_printf_common+0x3e>
 8012b00:	2030      	movs	r0, #48	; 0x30
 8012b02:	18e1      	adds	r1, r4, r3
 8012b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b08:	1c5a      	adds	r2, r3, #1
 8012b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b0e:	4422      	add	r2, r4
 8012b10:	3302      	adds	r3, #2
 8012b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b16:	e7c5      	b.n	8012aa4 <_printf_common+0x58>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	4638      	mov	r0, r7
 8012b20:	47c0      	blx	r8
 8012b22:	3001      	adds	r0, #1
 8012b24:	d0e6      	beq.n	8012af4 <_printf_common+0xa8>
 8012b26:	3601      	adds	r6, #1
 8012b28:	e7d9      	b.n	8012ade <_printf_common+0x92>
	...

08012b2c <_printf_i>:
 8012b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b30:	460c      	mov	r4, r1
 8012b32:	7e27      	ldrb	r7, [r4, #24]
 8012b34:	4691      	mov	r9, r2
 8012b36:	2f78      	cmp	r7, #120	; 0x78
 8012b38:	4680      	mov	r8, r0
 8012b3a:	469a      	mov	sl, r3
 8012b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b42:	d807      	bhi.n	8012b54 <_printf_i+0x28>
 8012b44:	2f62      	cmp	r7, #98	; 0x62
 8012b46:	d80a      	bhi.n	8012b5e <_printf_i+0x32>
 8012b48:	2f00      	cmp	r7, #0
 8012b4a:	f000 80d9 	beq.w	8012d00 <_printf_i+0x1d4>
 8012b4e:	2f58      	cmp	r7, #88	; 0x58
 8012b50:	f000 80a4 	beq.w	8012c9c <_printf_i+0x170>
 8012b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b5c:	e03a      	b.n	8012bd4 <_printf_i+0xa8>
 8012b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b62:	2b15      	cmp	r3, #21
 8012b64:	d8f6      	bhi.n	8012b54 <_printf_i+0x28>
 8012b66:	a001      	add	r0, pc, #4	; (adr r0, 8012b6c <_printf_i+0x40>)
 8012b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012b6c:	08012bc5 	.word	0x08012bc5
 8012b70:	08012bd9 	.word	0x08012bd9
 8012b74:	08012b55 	.word	0x08012b55
 8012b78:	08012b55 	.word	0x08012b55
 8012b7c:	08012b55 	.word	0x08012b55
 8012b80:	08012b55 	.word	0x08012b55
 8012b84:	08012bd9 	.word	0x08012bd9
 8012b88:	08012b55 	.word	0x08012b55
 8012b8c:	08012b55 	.word	0x08012b55
 8012b90:	08012b55 	.word	0x08012b55
 8012b94:	08012b55 	.word	0x08012b55
 8012b98:	08012ce7 	.word	0x08012ce7
 8012b9c:	08012c09 	.word	0x08012c09
 8012ba0:	08012cc9 	.word	0x08012cc9
 8012ba4:	08012b55 	.word	0x08012b55
 8012ba8:	08012b55 	.word	0x08012b55
 8012bac:	08012d09 	.word	0x08012d09
 8012bb0:	08012b55 	.word	0x08012b55
 8012bb4:	08012c09 	.word	0x08012c09
 8012bb8:	08012b55 	.word	0x08012b55
 8012bbc:	08012b55 	.word	0x08012b55
 8012bc0:	08012cd1 	.word	0x08012cd1
 8012bc4:	680b      	ldr	r3, [r1, #0]
 8012bc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012bca:	1d1a      	adds	r2, r3, #4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	600a      	str	r2, [r1, #0]
 8012bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e0a4      	b.n	8012d22 <_printf_i+0x1f6>
 8012bd8:	6825      	ldr	r5, [r4, #0]
 8012bda:	6808      	ldr	r0, [r1, #0]
 8012bdc:	062e      	lsls	r6, r5, #24
 8012bde:	f100 0304 	add.w	r3, r0, #4
 8012be2:	d50a      	bpl.n	8012bfa <_printf_i+0xce>
 8012be4:	6805      	ldr	r5, [r0, #0]
 8012be6:	600b      	str	r3, [r1, #0]
 8012be8:	2d00      	cmp	r5, #0
 8012bea:	da03      	bge.n	8012bf4 <_printf_i+0xc8>
 8012bec:	232d      	movs	r3, #45	; 0x2d
 8012bee:	426d      	negs	r5, r5
 8012bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bf4:	230a      	movs	r3, #10
 8012bf6:	485e      	ldr	r0, [pc, #376]	; (8012d70 <_printf_i+0x244>)
 8012bf8:	e019      	b.n	8012c2e <_printf_i+0x102>
 8012bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012bfe:	6805      	ldr	r5, [r0, #0]
 8012c00:	600b      	str	r3, [r1, #0]
 8012c02:	bf18      	it	ne
 8012c04:	b22d      	sxthne	r5, r5
 8012c06:	e7ef      	b.n	8012be8 <_printf_i+0xbc>
 8012c08:	680b      	ldr	r3, [r1, #0]
 8012c0a:	6825      	ldr	r5, [r4, #0]
 8012c0c:	1d18      	adds	r0, r3, #4
 8012c0e:	6008      	str	r0, [r1, #0]
 8012c10:	0628      	lsls	r0, r5, #24
 8012c12:	d501      	bpl.n	8012c18 <_printf_i+0xec>
 8012c14:	681d      	ldr	r5, [r3, #0]
 8012c16:	e002      	b.n	8012c1e <_printf_i+0xf2>
 8012c18:	0669      	lsls	r1, r5, #25
 8012c1a:	d5fb      	bpl.n	8012c14 <_printf_i+0xe8>
 8012c1c:	881d      	ldrh	r5, [r3, #0]
 8012c1e:	2f6f      	cmp	r7, #111	; 0x6f
 8012c20:	bf0c      	ite	eq
 8012c22:	2308      	moveq	r3, #8
 8012c24:	230a      	movne	r3, #10
 8012c26:	4852      	ldr	r0, [pc, #328]	; (8012d70 <_printf_i+0x244>)
 8012c28:	2100      	movs	r1, #0
 8012c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c2e:	6866      	ldr	r6, [r4, #4]
 8012c30:	2e00      	cmp	r6, #0
 8012c32:	bfa8      	it	ge
 8012c34:	6821      	ldrge	r1, [r4, #0]
 8012c36:	60a6      	str	r6, [r4, #8]
 8012c38:	bfa4      	itt	ge
 8012c3a:	f021 0104 	bicge.w	r1, r1, #4
 8012c3e:	6021      	strge	r1, [r4, #0]
 8012c40:	b90d      	cbnz	r5, 8012c46 <_printf_i+0x11a>
 8012c42:	2e00      	cmp	r6, #0
 8012c44:	d04d      	beq.n	8012ce2 <_printf_i+0x1b6>
 8012c46:	4616      	mov	r6, r2
 8012c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8012c50:	5dc7      	ldrb	r7, [r0, r7]
 8012c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c56:	462f      	mov	r7, r5
 8012c58:	42bb      	cmp	r3, r7
 8012c5a:	460d      	mov	r5, r1
 8012c5c:	d9f4      	bls.n	8012c48 <_printf_i+0x11c>
 8012c5e:	2b08      	cmp	r3, #8
 8012c60:	d10b      	bne.n	8012c7a <_printf_i+0x14e>
 8012c62:	6823      	ldr	r3, [r4, #0]
 8012c64:	07df      	lsls	r7, r3, #31
 8012c66:	d508      	bpl.n	8012c7a <_printf_i+0x14e>
 8012c68:	6923      	ldr	r3, [r4, #16]
 8012c6a:	6861      	ldr	r1, [r4, #4]
 8012c6c:	4299      	cmp	r1, r3
 8012c6e:	bfde      	ittt	le
 8012c70:	2330      	movle	r3, #48	; 0x30
 8012c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c76:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012c7a:	1b92      	subs	r2, r2, r6
 8012c7c:	6122      	str	r2, [r4, #16]
 8012c7e:	464b      	mov	r3, r9
 8012c80:	4621      	mov	r1, r4
 8012c82:	4640      	mov	r0, r8
 8012c84:	f8cd a000 	str.w	sl, [sp]
 8012c88:	aa03      	add	r2, sp, #12
 8012c8a:	f7ff fedf 	bl	8012a4c <_printf_common>
 8012c8e:	3001      	adds	r0, #1
 8012c90:	d14c      	bne.n	8012d2c <_printf_i+0x200>
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c96:	b004      	add	sp, #16
 8012c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9c:	4834      	ldr	r0, [pc, #208]	; (8012d70 <_printf_i+0x244>)
 8012c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012ca2:	680e      	ldr	r6, [r1, #0]
 8012ca4:	6823      	ldr	r3, [r4, #0]
 8012ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8012caa:	061f      	lsls	r7, r3, #24
 8012cac:	600e      	str	r6, [r1, #0]
 8012cae:	d514      	bpl.n	8012cda <_printf_i+0x1ae>
 8012cb0:	07d9      	lsls	r1, r3, #31
 8012cb2:	bf44      	itt	mi
 8012cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8012cb8:	6023      	strmi	r3, [r4, #0]
 8012cba:	b91d      	cbnz	r5, 8012cc4 <_printf_i+0x198>
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	f023 0320 	bic.w	r3, r3, #32
 8012cc2:	6023      	str	r3, [r4, #0]
 8012cc4:	2310      	movs	r3, #16
 8012cc6:	e7af      	b.n	8012c28 <_printf_i+0xfc>
 8012cc8:	6823      	ldr	r3, [r4, #0]
 8012cca:	f043 0320 	orr.w	r3, r3, #32
 8012cce:	6023      	str	r3, [r4, #0]
 8012cd0:	2378      	movs	r3, #120	; 0x78
 8012cd2:	4828      	ldr	r0, [pc, #160]	; (8012d74 <_printf_i+0x248>)
 8012cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cd8:	e7e3      	b.n	8012ca2 <_printf_i+0x176>
 8012cda:	065e      	lsls	r6, r3, #25
 8012cdc:	bf48      	it	mi
 8012cde:	b2ad      	uxthmi	r5, r5
 8012ce0:	e7e6      	b.n	8012cb0 <_printf_i+0x184>
 8012ce2:	4616      	mov	r6, r2
 8012ce4:	e7bb      	b.n	8012c5e <_printf_i+0x132>
 8012ce6:	680b      	ldr	r3, [r1, #0]
 8012ce8:	6826      	ldr	r6, [r4, #0]
 8012cea:	1d1d      	adds	r5, r3, #4
 8012cec:	6960      	ldr	r0, [r4, #20]
 8012cee:	600d      	str	r5, [r1, #0]
 8012cf0:	0635      	lsls	r5, r6, #24
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	d501      	bpl.n	8012cfa <_printf_i+0x1ce>
 8012cf6:	6018      	str	r0, [r3, #0]
 8012cf8:	e002      	b.n	8012d00 <_printf_i+0x1d4>
 8012cfa:	0671      	lsls	r1, r6, #25
 8012cfc:	d5fb      	bpl.n	8012cf6 <_printf_i+0x1ca>
 8012cfe:	8018      	strh	r0, [r3, #0]
 8012d00:	2300      	movs	r3, #0
 8012d02:	4616      	mov	r6, r2
 8012d04:	6123      	str	r3, [r4, #16]
 8012d06:	e7ba      	b.n	8012c7e <_printf_i+0x152>
 8012d08:	680b      	ldr	r3, [r1, #0]
 8012d0a:	1d1a      	adds	r2, r3, #4
 8012d0c:	600a      	str	r2, [r1, #0]
 8012d0e:	681e      	ldr	r6, [r3, #0]
 8012d10:	2100      	movs	r1, #0
 8012d12:	4630      	mov	r0, r6
 8012d14:	6862      	ldr	r2, [r4, #4]
 8012d16:	f7ff fadd 	bl	80122d4 <memchr>
 8012d1a:	b108      	cbz	r0, 8012d20 <_printf_i+0x1f4>
 8012d1c:	1b80      	subs	r0, r0, r6
 8012d1e:	6060      	str	r0, [r4, #4]
 8012d20:	6863      	ldr	r3, [r4, #4]
 8012d22:	6123      	str	r3, [r4, #16]
 8012d24:	2300      	movs	r3, #0
 8012d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d2a:	e7a8      	b.n	8012c7e <_printf_i+0x152>
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	4649      	mov	r1, r9
 8012d30:	4640      	mov	r0, r8
 8012d32:	6923      	ldr	r3, [r4, #16]
 8012d34:	47d0      	blx	sl
 8012d36:	3001      	adds	r0, #1
 8012d38:	d0ab      	beq.n	8012c92 <_printf_i+0x166>
 8012d3a:	6823      	ldr	r3, [r4, #0]
 8012d3c:	079b      	lsls	r3, r3, #30
 8012d3e:	d413      	bmi.n	8012d68 <_printf_i+0x23c>
 8012d40:	68e0      	ldr	r0, [r4, #12]
 8012d42:	9b03      	ldr	r3, [sp, #12]
 8012d44:	4298      	cmp	r0, r3
 8012d46:	bfb8      	it	lt
 8012d48:	4618      	movlt	r0, r3
 8012d4a:	e7a4      	b.n	8012c96 <_printf_i+0x16a>
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	4632      	mov	r2, r6
 8012d50:	4649      	mov	r1, r9
 8012d52:	4640      	mov	r0, r8
 8012d54:	47d0      	blx	sl
 8012d56:	3001      	adds	r0, #1
 8012d58:	d09b      	beq.n	8012c92 <_printf_i+0x166>
 8012d5a:	3501      	adds	r5, #1
 8012d5c:	68e3      	ldr	r3, [r4, #12]
 8012d5e:	9903      	ldr	r1, [sp, #12]
 8012d60:	1a5b      	subs	r3, r3, r1
 8012d62:	42ab      	cmp	r3, r5
 8012d64:	dcf2      	bgt.n	8012d4c <_printf_i+0x220>
 8012d66:	e7eb      	b.n	8012d40 <_printf_i+0x214>
 8012d68:	2500      	movs	r5, #0
 8012d6a:	f104 0619 	add.w	r6, r4, #25
 8012d6e:	e7f5      	b.n	8012d5c <_printf_i+0x230>
 8012d70:	0801783c 	.word	0x0801783c
 8012d74:	0801784d 	.word	0x0801784d

08012d78 <_scanf_float>:
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	b087      	sub	sp, #28
 8012d7e:	9303      	str	r3, [sp, #12]
 8012d80:	688b      	ldr	r3, [r1, #8]
 8012d82:	4617      	mov	r7, r2
 8012d84:	1e5a      	subs	r2, r3, #1
 8012d86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012d8a:	bf85      	ittet	hi
 8012d8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012d90:	195b      	addhi	r3, r3, r5
 8012d92:	2300      	movls	r3, #0
 8012d94:	9302      	strhi	r3, [sp, #8]
 8012d96:	bf88      	it	hi
 8012d98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d9c:	468b      	mov	fp, r1
 8012d9e:	f04f 0500 	mov.w	r5, #0
 8012da2:	bf8c      	ite	hi
 8012da4:	608b      	strhi	r3, [r1, #8]
 8012da6:	9302      	strls	r3, [sp, #8]
 8012da8:	680b      	ldr	r3, [r1, #0]
 8012daa:	4680      	mov	r8, r0
 8012dac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012db0:	f84b 3b1c 	str.w	r3, [fp], #28
 8012db4:	460c      	mov	r4, r1
 8012db6:	465e      	mov	r6, fp
 8012db8:	46aa      	mov	sl, r5
 8012dba:	46a9      	mov	r9, r5
 8012dbc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012dc0:	9501      	str	r5, [sp, #4]
 8012dc2:	68a2      	ldr	r2, [r4, #8]
 8012dc4:	b152      	cbz	r2, 8012ddc <_scanf_float+0x64>
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2b4e      	cmp	r3, #78	; 0x4e
 8012dcc:	d864      	bhi.n	8012e98 <_scanf_float+0x120>
 8012dce:	2b40      	cmp	r3, #64	; 0x40
 8012dd0:	d83c      	bhi.n	8012e4c <_scanf_float+0xd4>
 8012dd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012dd6:	b2c8      	uxtb	r0, r1
 8012dd8:	280e      	cmp	r0, #14
 8012dda:	d93a      	bls.n	8012e52 <_scanf_float+0xda>
 8012ddc:	f1b9 0f00 	cmp.w	r9, #0
 8012de0:	d003      	beq.n	8012dea <_scanf_float+0x72>
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012dee:	f1ba 0f01 	cmp.w	sl, #1
 8012df2:	f200 8113 	bhi.w	801301c <_scanf_float+0x2a4>
 8012df6:	455e      	cmp	r6, fp
 8012df8:	f200 8105 	bhi.w	8013006 <_scanf_float+0x28e>
 8012dfc:	2501      	movs	r5, #1
 8012dfe:	4628      	mov	r0, r5
 8012e00:	b007      	add	sp, #28
 8012e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012e0a:	2a0d      	cmp	r2, #13
 8012e0c:	d8e6      	bhi.n	8012ddc <_scanf_float+0x64>
 8012e0e:	a101      	add	r1, pc, #4	; (adr r1, 8012e14 <_scanf_float+0x9c>)
 8012e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012e14:	08012f53 	.word	0x08012f53
 8012e18:	08012ddd 	.word	0x08012ddd
 8012e1c:	08012ddd 	.word	0x08012ddd
 8012e20:	08012ddd 	.word	0x08012ddd
 8012e24:	08012fb3 	.word	0x08012fb3
 8012e28:	08012f8b 	.word	0x08012f8b
 8012e2c:	08012ddd 	.word	0x08012ddd
 8012e30:	08012ddd 	.word	0x08012ddd
 8012e34:	08012f61 	.word	0x08012f61
 8012e38:	08012ddd 	.word	0x08012ddd
 8012e3c:	08012ddd 	.word	0x08012ddd
 8012e40:	08012ddd 	.word	0x08012ddd
 8012e44:	08012ddd 	.word	0x08012ddd
 8012e48:	08012f19 	.word	0x08012f19
 8012e4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012e50:	e7db      	b.n	8012e0a <_scanf_float+0x92>
 8012e52:	290e      	cmp	r1, #14
 8012e54:	d8c2      	bhi.n	8012ddc <_scanf_float+0x64>
 8012e56:	a001      	add	r0, pc, #4	; (adr r0, 8012e5c <_scanf_float+0xe4>)
 8012e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012e5c:	08012f0b 	.word	0x08012f0b
 8012e60:	08012ddd 	.word	0x08012ddd
 8012e64:	08012f0b 	.word	0x08012f0b
 8012e68:	08012f9f 	.word	0x08012f9f
 8012e6c:	08012ddd 	.word	0x08012ddd
 8012e70:	08012eb9 	.word	0x08012eb9
 8012e74:	08012ef5 	.word	0x08012ef5
 8012e78:	08012ef5 	.word	0x08012ef5
 8012e7c:	08012ef5 	.word	0x08012ef5
 8012e80:	08012ef5 	.word	0x08012ef5
 8012e84:	08012ef5 	.word	0x08012ef5
 8012e88:	08012ef5 	.word	0x08012ef5
 8012e8c:	08012ef5 	.word	0x08012ef5
 8012e90:	08012ef5 	.word	0x08012ef5
 8012e94:	08012ef5 	.word	0x08012ef5
 8012e98:	2b6e      	cmp	r3, #110	; 0x6e
 8012e9a:	d809      	bhi.n	8012eb0 <_scanf_float+0x138>
 8012e9c:	2b60      	cmp	r3, #96	; 0x60
 8012e9e:	d8b2      	bhi.n	8012e06 <_scanf_float+0x8e>
 8012ea0:	2b54      	cmp	r3, #84	; 0x54
 8012ea2:	d077      	beq.n	8012f94 <_scanf_float+0x21c>
 8012ea4:	2b59      	cmp	r3, #89	; 0x59
 8012ea6:	d199      	bne.n	8012ddc <_scanf_float+0x64>
 8012ea8:	2d07      	cmp	r5, #7
 8012eaa:	d197      	bne.n	8012ddc <_scanf_float+0x64>
 8012eac:	2508      	movs	r5, #8
 8012eae:	e029      	b.n	8012f04 <_scanf_float+0x18c>
 8012eb0:	2b74      	cmp	r3, #116	; 0x74
 8012eb2:	d06f      	beq.n	8012f94 <_scanf_float+0x21c>
 8012eb4:	2b79      	cmp	r3, #121	; 0x79
 8012eb6:	e7f6      	b.n	8012ea6 <_scanf_float+0x12e>
 8012eb8:	6821      	ldr	r1, [r4, #0]
 8012eba:	05c8      	lsls	r0, r1, #23
 8012ebc:	d51a      	bpl.n	8012ef4 <_scanf_float+0x17c>
 8012ebe:	9b02      	ldr	r3, [sp, #8]
 8012ec0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012ec4:	6021      	str	r1, [r4, #0]
 8012ec6:	f109 0901 	add.w	r9, r9, #1
 8012eca:	b11b      	cbz	r3, 8012ed4 <_scanf_float+0x15c>
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	3201      	adds	r2, #1
 8012ed0:	9302      	str	r3, [sp, #8]
 8012ed2:	60a2      	str	r2, [r4, #8]
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	60a3      	str	r3, [r4, #8]
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	3301      	adds	r3, #1
 8012ede:	6123      	str	r3, [r4, #16]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	f340 8084 	ble.w	8012ff4 <_scanf_float+0x27c>
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	3301      	adds	r3, #1
 8012ef0:	603b      	str	r3, [r7, #0]
 8012ef2:	e766      	b.n	8012dc2 <_scanf_float+0x4a>
 8012ef4:	eb1a 0f05 	cmn.w	sl, r5
 8012ef8:	f47f af70 	bne.w	8012ddc <_scanf_float+0x64>
 8012efc:	6822      	ldr	r2, [r4, #0]
 8012efe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012f02:	6022      	str	r2, [r4, #0]
 8012f04:	f806 3b01 	strb.w	r3, [r6], #1
 8012f08:	e7e4      	b.n	8012ed4 <_scanf_float+0x15c>
 8012f0a:	6822      	ldr	r2, [r4, #0]
 8012f0c:	0610      	lsls	r0, r2, #24
 8012f0e:	f57f af65 	bpl.w	8012ddc <_scanf_float+0x64>
 8012f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f16:	e7f4      	b.n	8012f02 <_scanf_float+0x18a>
 8012f18:	f1ba 0f00 	cmp.w	sl, #0
 8012f1c:	d10e      	bne.n	8012f3c <_scanf_float+0x1c4>
 8012f1e:	f1b9 0f00 	cmp.w	r9, #0
 8012f22:	d10e      	bne.n	8012f42 <_scanf_float+0x1ca>
 8012f24:	6822      	ldr	r2, [r4, #0]
 8012f26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012f2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012f2e:	d108      	bne.n	8012f42 <_scanf_float+0x1ca>
 8012f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f34:	f04f 0a01 	mov.w	sl, #1
 8012f38:	6022      	str	r2, [r4, #0]
 8012f3a:	e7e3      	b.n	8012f04 <_scanf_float+0x18c>
 8012f3c:	f1ba 0f02 	cmp.w	sl, #2
 8012f40:	d055      	beq.n	8012fee <_scanf_float+0x276>
 8012f42:	2d01      	cmp	r5, #1
 8012f44:	d002      	beq.n	8012f4c <_scanf_float+0x1d4>
 8012f46:	2d04      	cmp	r5, #4
 8012f48:	f47f af48 	bne.w	8012ddc <_scanf_float+0x64>
 8012f4c:	3501      	adds	r5, #1
 8012f4e:	b2ed      	uxtb	r5, r5
 8012f50:	e7d8      	b.n	8012f04 <_scanf_float+0x18c>
 8012f52:	f1ba 0f01 	cmp.w	sl, #1
 8012f56:	f47f af41 	bne.w	8012ddc <_scanf_float+0x64>
 8012f5a:	f04f 0a02 	mov.w	sl, #2
 8012f5e:	e7d1      	b.n	8012f04 <_scanf_float+0x18c>
 8012f60:	b97d      	cbnz	r5, 8012f82 <_scanf_float+0x20a>
 8012f62:	f1b9 0f00 	cmp.w	r9, #0
 8012f66:	f47f af3c 	bne.w	8012de2 <_scanf_float+0x6a>
 8012f6a:	6822      	ldr	r2, [r4, #0]
 8012f6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012f70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012f74:	f47f af39 	bne.w	8012dea <_scanf_float+0x72>
 8012f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f7c:	2501      	movs	r5, #1
 8012f7e:	6022      	str	r2, [r4, #0]
 8012f80:	e7c0      	b.n	8012f04 <_scanf_float+0x18c>
 8012f82:	2d03      	cmp	r5, #3
 8012f84:	d0e2      	beq.n	8012f4c <_scanf_float+0x1d4>
 8012f86:	2d05      	cmp	r5, #5
 8012f88:	e7de      	b.n	8012f48 <_scanf_float+0x1d0>
 8012f8a:	2d02      	cmp	r5, #2
 8012f8c:	f47f af26 	bne.w	8012ddc <_scanf_float+0x64>
 8012f90:	2503      	movs	r5, #3
 8012f92:	e7b7      	b.n	8012f04 <_scanf_float+0x18c>
 8012f94:	2d06      	cmp	r5, #6
 8012f96:	f47f af21 	bne.w	8012ddc <_scanf_float+0x64>
 8012f9a:	2507      	movs	r5, #7
 8012f9c:	e7b2      	b.n	8012f04 <_scanf_float+0x18c>
 8012f9e:	6822      	ldr	r2, [r4, #0]
 8012fa0:	0591      	lsls	r1, r2, #22
 8012fa2:	f57f af1b 	bpl.w	8012ddc <_scanf_float+0x64>
 8012fa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012faa:	6022      	str	r2, [r4, #0]
 8012fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8012fb0:	e7a8      	b.n	8012f04 <_scanf_float+0x18c>
 8012fb2:	6822      	ldr	r2, [r4, #0]
 8012fb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012fb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012fbc:	d006      	beq.n	8012fcc <_scanf_float+0x254>
 8012fbe:	0550      	lsls	r0, r2, #21
 8012fc0:	f57f af0c 	bpl.w	8012ddc <_scanf_float+0x64>
 8012fc4:	f1b9 0f00 	cmp.w	r9, #0
 8012fc8:	f43f af0f 	beq.w	8012dea <_scanf_float+0x72>
 8012fcc:	0591      	lsls	r1, r2, #22
 8012fce:	bf58      	it	pl
 8012fd0:	9901      	ldrpl	r1, [sp, #4]
 8012fd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012fd6:	bf58      	it	pl
 8012fd8:	eba9 0101 	subpl.w	r1, r9, r1
 8012fdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012fe0:	f04f 0900 	mov.w	r9, #0
 8012fe4:	bf58      	it	pl
 8012fe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012fea:	6022      	str	r2, [r4, #0]
 8012fec:	e78a      	b.n	8012f04 <_scanf_float+0x18c>
 8012fee:	f04f 0a03 	mov.w	sl, #3
 8012ff2:	e787      	b.n	8012f04 <_scanf_float+0x18c>
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	4640      	mov	r0, r8
 8012ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ffc:	4798      	blx	r3
 8012ffe:	2800      	cmp	r0, #0
 8013000:	f43f aedf 	beq.w	8012dc2 <_scanf_float+0x4a>
 8013004:	e6ea      	b.n	8012ddc <_scanf_float+0x64>
 8013006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801300a:	463a      	mov	r2, r7
 801300c:	4640      	mov	r0, r8
 801300e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013012:	4798      	blx	r3
 8013014:	6923      	ldr	r3, [r4, #16]
 8013016:	3b01      	subs	r3, #1
 8013018:	6123      	str	r3, [r4, #16]
 801301a:	e6ec      	b.n	8012df6 <_scanf_float+0x7e>
 801301c:	1e6b      	subs	r3, r5, #1
 801301e:	2b06      	cmp	r3, #6
 8013020:	d825      	bhi.n	801306e <_scanf_float+0x2f6>
 8013022:	2d02      	cmp	r5, #2
 8013024:	d836      	bhi.n	8013094 <_scanf_float+0x31c>
 8013026:	455e      	cmp	r6, fp
 8013028:	f67f aee8 	bls.w	8012dfc <_scanf_float+0x84>
 801302c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013030:	463a      	mov	r2, r7
 8013032:	4640      	mov	r0, r8
 8013034:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013038:	4798      	blx	r3
 801303a:	6923      	ldr	r3, [r4, #16]
 801303c:	3b01      	subs	r3, #1
 801303e:	6123      	str	r3, [r4, #16]
 8013040:	e7f1      	b.n	8013026 <_scanf_float+0x2ae>
 8013042:	9802      	ldr	r0, [sp, #8]
 8013044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013048:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801304c:	463a      	mov	r2, r7
 801304e:	9002      	str	r0, [sp, #8]
 8013050:	4640      	mov	r0, r8
 8013052:	4798      	blx	r3
 8013054:	6923      	ldr	r3, [r4, #16]
 8013056:	3b01      	subs	r3, #1
 8013058:	6123      	str	r3, [r4, #16]
 801305a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801305e:	fa5f fa8a 	uxtb.w	sl, sl
 8013062:	f1ba 0f02 	cmp.w	sl, #2
 8013066:	d1ec      	bne.n	8013042 <_scanf_float+0x2ca>
 8013068:	3d03      	subs	r5, #3
 801306a:	b2ed      	uxtb	r5, r5
 801306c:	1b76      	subs	r6, r6, r5
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	05da      	lsls	r2, r3, #23
 8013072:	d52f      	bpl.n	80130d4 <_scanf_float+0x35c>
 8013074:	055b      	lsls	r3, r3, #21
 8013076:	d510      	bpl.n	801309a <_scanf_float+0x322>
 8013078:	455e      	cmp	r6, fp
 801307a:	f67f aebf 	bls.w	8012dfc <_scanf_float+0x84>
 801307e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013082:	463a      	mov	r2, r7
 8013084:	4640      	mov	r0, r8
 8013086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801308a:	4798      	blx	r3
 801308c:	6923      	ldr	r3, [r4, #16]
 801308e:	3b01      	subs	r3, #1
 8013090:	6123      	str	r3, [r4, #16]
 8013092:	e7f1      	b.n	8013078 <_scanf_float+0x300>
 8013094:	46aa      	mov	sl, r5
 8013096:	9602      	str	r6, [sp, #8]
 8013098:	e7df      	b.n	801305a <_scanf_float+0x2e2>
 801309a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801309e:	6923      	ldr	r3, [r4, #16]
 80130a0:	2965      	cmp	r1, #101	; 0x65
 80130a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80130a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80130aa:	6123      	str	r3, [r4, #16]
 80130ac:	d00c      	beq.n	80130c8 <_scanf_float+0x350>
 80130ae:	2945      	cmp	r1, #69	; 0x45
 80130b0:	d00a      	beq.n	80130c8 <_scanf_float+0x350>
 80130b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130b6:	463a      	mov	r2, r7
 80130b8:	4640      	mov	r0, r8
 80130ba:	4798      	blx	r3
 80130bc:	6923      	ldr	r3, [r4, #16]
 80130be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	1eb5      	subs	r5, r6, #2
 80130c6:	6123      	str	r3, [r4, #16]
 80130c8:	463a      	mov	r2, r7
 80130ca:	4640      	mov	r0, r8
 80130cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130d0:	4798      	blx	r3
 80130d2:	462e      	mov	r6, r5
 80130d4:	6825      	ldr	r5, [r4, #0]
 80130d6:	f015 0510 	ands.w	r5, r5, #16
 80130da:	d159      	bne.n	8013190 <_scanf_float+0x418>
 80130dc:	7035      	strb	r5, [r6, #0]
 80130de:	6823      	ldr	r3, [r4, #0]
 80130e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80130e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80130e8:	d11c      	bne.n	8013124 <_scanf_float+0x3ac>
 80130ea:	9b01      	ldr	r3, [sp, #4]
 80130ec:	454b      	cmp	r3, r9
 80130ee:	eba3 0209 	sub.w	r2, r3, r9
 80130f2:	d124      	bne.n	801313e <_scanf_float+0x3c6>
 80130f4:	2200      	movs	r2, #0
 80130f6:	4659      	mov	r1, fp
 80130f8:	4640      	mov	r0, r8
 80130fa:	f000 ff6d 	bl	8013fd8 <_strtod_r>
 80130fe:	f8d4 c000 	ldr.w	ip, [r4]
 8013102:	9b03      	ldr	r3, [sp, #12]
 8013104:	f01c 0f02 	tst.w	ip, #2
 8013108:	4606      	mov	r6, r0
 801310a:	460f      	mov	r7, r1
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	d021      	beq.n	8013154 <_scanf_float+0x3dc>
 8013110:	9903      	ldr	r1, [sp, #12]
 8013112:	1d1a      	adds	r2, r3, #4
 8013114:	600a      	str	r2, [r1, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	e9c3 6700 	strd	r6, r7, [r3]
 801311c:	68e3      	ldr	r3, [r4, #12]
 801311e:	3301      	adds	r3, #1
 8013120:	60e3      	str	r3, [r4, #12]
 8013122:	e66c      	b.n	8012dfe <_scanf_float+0x86>
 8013124:	9b04      	ldr	r3, [sp, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d0e4      	beq.n	80130f4 <_scanf_float+0x37c>
 801312a:	9905      	ldr	r1, [sp, #20]
 801312c:	230a      	movs	r3, #10
 801312e:	462a      	mov	r2, r5
 8013130:	4640      	mov	r0, r8
 8013132:	3101      	adds	r1, #1
 8013134:	f000 ffdc 	bl	80140f0 <_strtol_r>
 8013138:	9b04      	ldr	r3, [sp, #16]
 801313a:	9e05      	ldr	r6, [sp, #20]
 801313c:	1ac2      	subs	r2, r0, r3
 801313e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013142:	429e      	cmp	r6, r3
 8013144:	bf28      	it	cs
 8013146:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801314a:	4630      	mov	r0, r6
 801314c:	4911      	ldr	r1, [pc, #68]	; (8013194 <_scanf_float+0x41c>)
 801314e:	f000 f87d 	bl	801324c <siprintf>
 8013152:	e7cf      	b.n	80130f4 <_scanf_float+0x37c>
 8013154:	f01c 0f04 	tst.w	ip, #4
 8013158:	f103 0e04 	add.w	lr, r3, #4
 801315c:	d003      	beq.n	8013166 <_scanf_float+0x3ee>
 801315e:	9903      	ldr	r1, [sp, #12]
 8013160:	f8c1 e000 	str.w	lr, [r1]
 8013164:	e7d7      	b.n	8013116 <_scanf_float+0x39e>
 8013166:	9a03      	ldr	r2, [sp, #12]
 8013168:	f8c2 e000 	str.w	lr, [r2]
 801316c:	f8d3 8000 	ldr.w	r8, [r3]
 8013170:	4602      	mov	r2, r0
 8013172:	460b      	mov	r3, r1
 8013174:	f7ed fc62 	bl	8000a3c <__aeabi_dcmpun>
 8013178:	b128      	cbz	r0, 8013186 <_scanf_float+0x40e>
 801317a:	4807      	ldr	r0, [pc, #28]	; (8013198 <_scanf_float+0x420>)
 801317c:	f000 f81e 	bl	80131bc <nanf>
 8013180:	f8c8 0000 	str.w	r0, [r8]
 8013184:	e7ca      	b.n	801311c <_scanf_float+0x3a4>
 8013186:	4630      	mov	r0, r6
 8013188:	4639      	mov	r1, r7
 801318a:	f7ed fcb5 	bl	8000af8 <__aeabi_d2f>
 801318e:	e7f7      	b.n	8013180 <_scanf_float+0x408>
 8013190:	2500      	movs	r5, #0
 8013192:	e634      	b.n	8012dfe <_scanf_float+0x86>
 8013194:	0801785e 	.word	0x0801785e
 8013198:	08017c93 	.word	0x08017c93

0801319c <_sbrk_r>:
 801319c:	b538      	push	{r3, r4, r5, lr}
 801319e:	2300      	movs	r3, #0
 80131a0:	4d05      	ldr	r5, [pc, #20]	; (80131b8 <_sbrk_r+0x1c>)
 80131a2:	4604      	mov	r4, r0
 80131a4:	4608      	mov	r0, r1
 80131a6:	602b      	str	r3, [r5, #0]
 80131a8:	f7f0 feb2 	bl	8003f10 <_sbrk>
 80131ac:	1c43      	adds	r3, r0, #1
 80131ae:	d102      	bne.n	80131b6 <_sbrk_r+0x1a>
 80131b0:	682b      	ldr	r3, [r5, #0]
 80131b2:	b103      	cbz	r3, 80131b6 <_sbrk_r+0x1a>
 80131b4:	6023      	str	r3, [r4, #0]
 80131b6:	bd38      	pop	{r3, r4, r5, pc}
 80131b8:	20001d5c 	.word	0x20001d5c

080131bc <nanf>:
 80131bc:	4800      	ldr	r0, [pc, #0]	; (80131c0 <nanf+0x4>)
 80131be:	4770      	bx	lr
 80131c0:	7fc00000 	.word	0x7fc00000

080131c4 <_raise_r>:
 80131c4:	291f      	cmp	r1, #31
 80131c6:	b538      	push	{r3, r4, r5, lr}
 80131c8:	4604      	mov	r4, r0
 80131ca:	460d      	mov	r5, r1
 80131cc:	d904      	bls.n	80131d8 <_raise_r+0x14>
 80131ce:	2316      	movs	r3, #22
 80131d0:	6003      	str	r3, [r0, #0]
 80131d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80131da:	b112      	cbz	r2, 80131e2 <_raise_r+0x1e>
 80131dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131e0:	b94b      	cbnz	r3, 80131f6 <_raise_r+0x32>
 80131e2:	4620      	mov	r0, r4
 80131e4:	f000 f830 	bl	8013248 <_getpid_r>
 80131e8:	462a      	mov	r2, r5
 80131ea:	4601      	mov	r1, r0
 80131ec:	4620      	mov	r0, r4
 80131ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131f2:	f000 b817 	b.w	8013224 <_kill_r>
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d00a      	beq.n	8013210 <_raise_r+0x4c>
 80131fa:	1c59      	adds	r1, r3, #1
 80131fc:	d103      	bne.n	8013206 <_raise_r+0x42>
 80131fe:	2316      	movs	r3, #22
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	2001      	movs	r0, #1
 8013204:	e7e7      	b.n	80131d6 <_raise_r+0x12>
 8013206:	2400      	movs	r4, #0
 8013208:	4628      	mov	r0, r5
 801320a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801320e:	4798      	blx	r3
 8013210:	2000      	movs	r0, #0
 8013212:	e7e0      	b.n	80131d6 <_raise_r+0x12>

08013214 <raise>:
 8013214:	4b02      	ldr	r3, [pc, #8]	; (8013220 <raise+0xc>)
 8013216:	4601      	mov	r1, r0
 8013218:	6818      	ldr	r0, [r3, #0]
 801321a:	f7ff bfd3 	b.w	80131c4 <_raise_r>
 801321e:	bf00      	nop
 8013220:	20000224 	.word	0x20000224

08013224 <_kill_r>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	2300      	movs	r3, #0
 8013228:	4d06      	ldr	r5, [pc, #24]	; (8013244 <_kill_r+0x20>)
 801322a:	4604      	mov	r4, r0
 801322c:	4608      	mov	r0, r1
 801322e:	4611      	mov	r1, r2
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	f7f0 fdea 	bl	8003e0a <_kill>
 8013236:	1c43      	adds	r3, r0, #1
 8013238:	d102      	bne.n	8013240 <_kill_r+0x1c>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	b103      	cbz	r3, 8013240 <_kill_r+0x1c>
 801323e:	6023      	str	r3, [r4, #0]
 8013240:	bd38      	pop	{r3, r4, r5, pc}
 8013242:	bf00      	nop
 8013244:	20001d5c 	.word	0x20001d5c

08013248 <_getpid_r>:
 8013248:	f7f0 bdd8 	b.w	8003dfc <_getpid>

0801324c <siprintf>:
 801324c:	b40e      	push	{r1, r2, r3}
 801324e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013252:	b500      	push	{lr}
 8013254:	b09c      	sub	sp, #112	; 0x70
 8013256:	ab1d      	add	r3, sp, #116	; 0x74
 8013258:	9002      	str	r0, [sp, #8]
 801325a:	9006      	str	r0, [sp, #24]
 801325c:	9107      	str	r1, [sp, #28]
 801325e:	9104      	str	r1, [sp, #16]
 8013260:	4808      	ldr	r0, [pc, #32]	; (8013284 <siprintf+0x38>)
 8013262:	4909      	ldr	r1, [pc, #36]	; (8013288 <siprintf+0x3c>)
 8013264:	f853 2b04 	ldr.w	r2, [r3], #4
 8013268:	9105      	str	r1, [sp, #20]
 801326a:	6800      	ldr	r0, [r0, #0]
 801326c:	a902      	add	r1, sp, #8
 801326e:	9301      	str	r3, [sp, #4]
 8013270:	f002 fe8e 	bl	8015f90 <_svfiprintf_r>
 8013274:	2200      	movs	r2, #0
 8013276:	9b02      	ldr	r3, [sp, #8]
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	b01c      	add	sp, #112	; 0x70
 801327c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013280:	b003      	add	sp, #12
 8013282:	4770      	bx	lr
 8013284:	20000224 	.word	0x20000224
 8013288:	ffff0208 	.word	0xffff0208

0801328c <siscanf>:
 801328c:	b40e      	push	{r1, r2, r3}
 801328e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013292:	b530      	push	{r4, r5, lr}
 8013294:	b09c      	sub	sp, #112	; 0x70
 8013296:	ac1f      	add	r4, sp, #124	; 0x7c
 8013298:	f854 5b04 	ldr.w	r5, [r4], #4
 801329c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80132a0:	9002      	str	r0, [sp, #8]
 80132a2:	9006      	str	r0, [sp, #24]
 80132a4:	f7ec ff6c 	bl	8000180 <strlen>
 80132a8:	4b0b      	ldr	r3, [pc, #44]	; (80132d8 <siscanf+0x4c>)
 80132aa:	9003      	str	r0, [sp, #12]
 80132ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80132ae:	2300      	movs	r3, #0
 80132b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80132b2:	9314      	str	r3, [sp, #80]	; 0x50
 80132b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132b8:	9007      	str	r0, [sp, #28]
 80132ba:	4808      	ldr	r0, [pc, #32]	; (80132dc <siscanf+0x50>)
 80132bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80132c0:	462a      	mov	r2, r5
 80132c2:	4623      	mov	r3, r4
 80132c4:	a902      	add	r1, sp, #8
 80132c6:	6800      	ldr	r0, [r0, #0]
 80132c8:	9401      	str	r4, [sp, #4]
 80132ca:	f002 ffbb 	bl	8016244 <__ssvfiscanf_r>
 80132ce:	b01c      	add	sp, #112	; 0x70
 80132d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132d4:	b003      	add	sp, #12
 80132d6:	4770      	bx	lr
 80132d8:	08013303 	.word	0x08013303
 80132dc:	20000224 	.word	0x20000224

080132e0 <__sread>:
 80132e0:	b510      	push	{r4, lr}
 80132e2:	460c      	mov	r4, r1
 80132e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132e8:	f003 fa70 	bl	80167cc <_read_r>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	bfab      	itete	ge
 80132f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80132f2:	89a3      	ldrhlt	r3, [r4, #12]
 80132f4:	181b      	addge	r3, r3, r0
 80132f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80132fa:	bfac      	ite	ge
 80132fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80132fe:	81a3      	strhlt	r3, [r4, #12]
 8013300:	bd10      	pop	{r4, pc}

08013302 <__seofread>:
 8013302:	2000      	movs	r0, #0
 8013304:	4770      	bx	lr

08013306 <__swrite>:
 8013306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330a:	461f      	mov	r7, r3
 801330c:	898b      	ldrh	r3, [r1, #12]
 801330e:	4605      	mov	r5, r0
 8013310:	05db      	lsls	r3, r3, #23
 8013312:	460c      	mov	r4, r1
 8013314:	4616      	mov	r6, r2
 8013316:	d505      	bpl.n	8013324 <__swrite+0x1e>
 8013318:	2302      	movs	r3, #2
 801331a:	2200      	movs	r2, #0
 801331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013320:	f002 f8f2 	bl	8015508 <_lseek_r>
 8013324:	89a3      	ldrh	r3, [r4, #12]
 8013326:	4632      	mov	r2, r6
 8013328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801332c:	81a3      	strh	r3, [r4, #12]
 801332e:	4628      	mov	r0, r5
 8013330:	463b      	mov	r3, r7
 8013332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801333a:	f000 bedb 	b.w	80140f4 <_write_r>

0801333e <__sseek>:
 801333e:	b510      	push	{r4, lr}
 8013340:	460c      	mov	r4, r1
 8013342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013346:	f002 f8df 	bl	8015508 <_lseek_r>
 801334a:	1c43      	adds	r3, r0, #1
 801334c:	89a3      	ldrh	r3, [r4, #12]
 801334e:	bf15      	itete	ne
 8013350:	6560      	strne	r0, [r4, #84]	; 0x54
 8013352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801335a:	81a3      	strheq	r3, [r4, #12]
 801335c:	bf18      	it	ne
 801335e:	81a3      	strhne	r3, [r4, #12]
 8013360:	bd10      	pop	{r4, pc}

08013362 <__sclose>:
 8013362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013366:	f000 bed7 	b.w	8014118 <_close_r>

0801336a <strcpy>:
 801336a:	4603      	mov	r3, r0
 801336c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013370:	f803 2b01 	strb.w	r2, [r3], #1
 8013374:	2a00      	cmp	r2, #0
 8013376:	d1f9      	bne.n	801336c <strcpy+0x2>
 8013378:	4770      	bx	lr

0801337a <strstr>:
 801337a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801337c:	780c      	ldrb	r4, [r1, #0]
 801337e:	b164      	cbz	r4, 801339a <strstr+0x20>
 8013380:	4603      	mov	r3, r0
 8013382:	781a      	ldrb	r2, [r3, #0]
 8013384:	4618      	mov	r0, r3
 8013386:	1c5e      	adds	r6, r3, #1
 8013388:	b90a      	cbnz	r2, 801338e <strstr+0x14>
 801338a:	4610      	mov	r0, r2
 801338c:	e005      	b.n	801339a <strstr+0x20>
 801338e:	4294      	cmp	r4, r2
 8013390:	d108      	bne.n	80133a4 <strstr+0x2a>
 8013392:	460d      	mov	r5, r1
 8013394:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013398:	b902      	cbnz	r2, 801339c <strstr+0x22>
 801339a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801339c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80133a0:	4297      	cmp	r7, r2
 80133a2:	d0f7      	beq.n	8013394 <strstr+0x1a>
 80133a4:	4633      	mov	r3, r6
 80133a6:	e7ec      	b.n	8013382 <strstr+0x8>

080133a8 <sulp>:
 80133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ac:	460f      	mov	r7, r1
 80133ae:	4690      	mov	r8, r2
 80133b0:	f002 fc4a 	bl	8015c48 <__ulp>
 80133b4:	4604      	mov	r4, r0
 80133b6:	460d      	mov	r5, r1
 80133b8:	f1b8 0f00 	cmp.w	r8, #0
 80133bc:	d011      	beq.n	80133e2 <sulp+0x3a>
 80133be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80133c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	dd0b      	ble.n	80133e2 <sulp+0x3a>
 80133ca:	2400      	movs	r4, #0
 80133cc:	051b      	lsls	r3, r3, #20
 80133ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80133d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80133d6:	4622      	mov	r2, r4
 80133d8:	462b      	mov	r3, r5
 80133da:	f7ed f895 	bl	8000508 <__aeabi_dmul>
 80133de:	4604      	mov	r4, r0
 80133e0:	460d      	mov	r5, r1
 80133e2:	4620      	mov	r0, r4
 80133e4:	4629      	mov	r1, r5
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	0000      	movs	r0, r0
 80133ec:	0000      	movs	r0, r0
	...

080133f0 <_strtod_l>:
 80133f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	469b      	mov	fp, r3
 80133f6:	2300      	movs	r3, #0
 80133f8:	b0a1      	sub	sp, #132	; 0x84
 80133fa:	931c      	str	r3, [sp, #112]	; 0x70
 80133fc:	4ba1      	ldr	r3, [pc, #644]	; (8013684 <_strtod_l+0x294>)
 80133fe:	4682      	mov	sl, r0
 8013400:	681f      	ldr	r7, [r3, #0]
 8013402:	460e      	mov	r6, r1
 8013404:	4638      	mov	r0, r7
 8013406:	9217      	str	r2, [sp, #92]	; 0x5c
 8013408:	f7ec feba 	bl	8000180 <strlen>
 801340c:	f04f 0800 	mov.w	r8, #0
 8013410:	4604      	mov	r4, r0
 8013412:	f04f 0900 	mov.w	r9, #0
 8013416:	961b      	str	r6, [sp, #108]	; 0x6c
 8013418:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801341a:	781a      	ldrb	r2, [r3, #0]
 801341c:	2a2b      	cmp	r2, #43	; 0x2b
 801341e:	d04c      	beq.n	80134ba <_strtod_l+0xca>
 8013420:	d83a      	bhi.n	8013498 <_strtod_l+0xa8>
 8013422:	2a0d      	cmp	r2, #13
 8013424:	d833      	bhi.n	801348e <_strtod_l+0x9e>
 8013426:	2a08      	cmp	r2, #8
 8013428:	d833      	bhi.n	8013492 <_strtod_l+0xa2>
 801342a:	2a00      	cmp	r2, #0
 801342c:	d03d      	beq.n	80134aa <_strtod_l+0xba>
 801342e:	2300      	movs	r3, #0
 8013430:	930c      	str	r3, [sp, #48]	; 0x30
 8013432:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013434:	782b      	ldrb	r3, [r5, #0]
 8013436:	2b30      	cmp	r3, #48	; 0x30
 8013438:	f040 80af 	bne.w	801359a <_strtod_l+0x1aa>
 801343c:	786b      	ldrb	r3, [r5, #1]
 801343e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013442:	2b58      	cmp	r3, #88	; 0x58
 8013444:	d16c      	bne.n	8013520 <_strtod_l+0x130>
 8013446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013448:	4650      	mov	r0, sl
 801344a:	9301      	str	r3, [sp, #4]
 801344c:	ab1c      	add	r3, sp, #112	; 0x70
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	4a8d      	ldr	r2, [pc, #564]	; (8013688 <_strtod_l+0x298>)
 8013452:	f8cd b008 	str.w	fp, [sp, #8]
 8013456:	ab1d      	add	r3, sp, #116	; 0x74
 8013458:	a91b      	add	r1, sp, #108	; 0x6c
 801345a:	f001 fd53 	bl	8014f04 <__gethex>
 801345e:	f010 0607 	ands.w	r6, r0, #7
 8013462:	4604      	mov	r4, r0
 8013464:	d005      	beq.n	8013472 <_strtod_l+0x82>
 8013466:	2e06      	cmp	r6, #6
 8013468:	d129      	bne.n	80134be <_strtod_l+0xce>
 801346a:	2300      	movs	r3, #0
 801346c:	3501      	adds	r5, #1
 801346e:	951b      	str	r5, [sp, #108]	; 0x6c
 8013470:	930c      	str	r3, [sp, #48]	; 0x30
 8013472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013474:	2b00      	cmp	r3, #0
 8013476:	f040 8596 	bne.w	8013fa6 <_strtod_l+0xbb6>
 801347a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801347c:	b1d3      	cbz	r3, 80134b4 <_strtod_l+0xc4>
 801347e:	4642      	mov	r2, r8
 8013480:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013484:	4610      	mov	r0, r2
 8013486:	4619      	mov	r1, r3
 8013488:	b021      	add	sp, #132	; 0x84
 801348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801348e:	2a20      	cmp	r2, #32
 8013490:	d1cd      	bne.n	801342e <_strtod_l+0x3e>
 8013492:	3301      	adds	r3, #1
 8013494:	931b      	str	r3, [sp, #108]	; 0x6c
 8013496:	e7bf      	b.n	8013418 <_strtod_l+0x28>
 8013498:	2a2d      	cmp	r2, #45	; 0x2d
 801349a:	d1c8      	bne.n	801342e <_strtod_l+0x3e>
 801349c:	2201      	movs	r2, #1
 801349e:	920c      	str	r2, [sp, #48]	; 0x30
 80134a0:	1c5a      	adds	r2, r3, #1
 80134a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80134a4:	785b      	ldrb	r3, [r3, #1]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d1c3      	bne.n	8013432 <_strtod_l+0x42>
 80134aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f040 8577 	bne.w	8013fa2 <_strtod_l+0xbb2>
 80134b4:	4642      	mov	r2, r8
 80134b6:	464b      	mov	r3, r9
 80134b8:	e7e4      	b.n	8013484 <_strtod_l+0x94>
 80134ba:	2200      	movs	r2, #0
 80134bc:	e7ef      	b.n	801349e <_strtod_l+0xae>
 80134be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80134c0:	b13a      	cbz	r2, 80134d2 <_strtod_l+0xe2>
 80134c2:	2135      	movs	r1, #53	; 0x35
 80134c4:	a81e      	add	r0, sp, #120	; 0x78
 80134c6:	f002 fcc3 	bl	8015e50 <__copybits>
 80134ca:	4650      	mov	r0, sl
 80134cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80134ce:	f002 f88b 	bl	80155e8 <_Bfree>
 80134d2:	3e01      	subs	r6, #1
 80134d4:	2e05      	cmp	r6, #5
 80134d6:	d807      	bhi.n	80134e8 <_strtod_l+0xf8>
 80134d8:	e8df f006 	tbb	[pc, r6]
 80134dc:	1d180b0e 	.word	0x1d180b0e
 80134e0:	030e      	.short	0x030e
 80134e2:	f04f 0900 	mov.w	r9, #0
 80134e6:	46c8      	mov	r8, r9
 80134e8:	0721      	lsls	r1, r4, #28
 80134ea:	d5c2      	bpl.n	8013472 <_strtod_l+0x82>
 80134ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80134f0:	e7bf      	b.n	8013472 <_strtod_l+0x82>
 80134f2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80134f6:	e7f7      	b.n	80134e8 <_strtod_l+0xf8>
 80134f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134fa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80134fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013506:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801350a:	e7ed      	b.n	80134e8 <_strtod_l+0xf8>
 801350c:	f04f 0800 	mov.w	r8, #0
 8013510:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801368c <_strtod_l+0x29c>
 8013514:	e7e8      	b.n	80134e8 <_strtod_l+0xf8>
 8013516:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801351a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801351e:	e7e3      	b.n	80134e8 <_strtod_l+0xf8>
 8013520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	921b      	str	r2, [sp, #108]	; 0x6c
 8013526:	785b      	ldrb	r3, [r3, #1]
 8013528:	2b30      	cmp	r3, #48	; 0x30
 801352a:	d0f9      	beq.n	8013520 <_strtod_l+0x130>
 801352c:	2b00      	cmp	r3, #0
 801352e:	d0a0      	beq.n	8013472 <_strtod_l+0x82>
 8013530:	2301      	movs	r3, #1
 8013532:	9307      	str	r3, [sp, #28]
 8013534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013536:	220a      	movs	r2, #10
 8013538:	9308      	str	r3, [sp, #32]
 801353a:	2300      	movs	r3, #0
 801353c:	469b      	mov	fp, r3
 801353e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013542:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013544:	7805      	ldrb	r5, [r0, #0]
 8013546:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801354a:	b2d9      	uxtb	r1, r3
 801354c:	2909      	cmp	r1, #9
 801354e:	d926      	bls.n	801359e <_strtod_l+0x1ae>
 8013550:	4622      	mov	r2, r4
 8013552:	4639      	mov	r1, r7
 8013554:	f003 f98c 	bl	8016870 <strncmp>
 8013558:	2800      	cmp	r0, #0
 801355a:	d032      	beq.n	80135c2 <_strtod_l+0x1d2>
 801355c:	2000      	movs	r0, #0
 801355e:	462b      	mov	r3, r5
 8013560:	465c      	mov	r4, fp
 8013562:	4602      	mov	r2, r0
 8013564:	9004      	str	r0, [sp, #16]
 8013566:	2b65      	cmp	r3, #101	; 0x65
 8013568:	d001      	beq.n	801356e <_strtod_l+0x17e>
 801356a:	2b45      	cmp	r3, #69	; 0x45
 801356c:	d113      	bne.n	8013596 <_strtod_l+0x1a6>
 801356e:	b91c      	cbnz	r4, 8013578 <_strtod_l+0x188>
 8013570:	9b07      	ldr	r3, [sp, #28]
 8013572:	4303      	orrs	r3, r0
 8013574:	d099      	beq.n	80134aa <_strtod_l+0xba>
 8013576:	2400      	movs	r4, #0
 8013578:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801357a:	1c73      	adds	r3, r6, #1
 801357c:	931b      	str	r3, [sp, #108]	; 0x6c
 801357e:	7873      	ldrb	r3, [r6, #1]
 8013580:	2b2b      	cmp	r3, #43	; 0x2b
 8013582:	d078      	beq.n	8013676 <_strtod_l+0x286>
 8013584:	2b2d      	cmp	r3, #45	; 0x2d
 8013586:	d07b      	beq.n	8013680 <_strtod_l+0x290>
 8013588:	2700      	movs	r7, #0
 801358a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801358e:	2909      	cmp	r1, #9
 8013590:	f240 8082 	bls.w	8013698 <_strtod_l+0x2a8>
 8013594:	961b      	str	r6, [sp, #108]	; 0x6c
 8013596:	2500      	movs	r5, #0
 8013598:	e09e      	b.n	80136d8 <_strtod_l+0x2e8>
 801359a:	2300      	movs	r3, #0
 801359c:	e7c9      	b.n	8013532 <_strtod_l+0x142>
 801359e:	f1bb 0f08 	cmp.w	fp, #8
 80135a2:	bfd5      	itete	le
 80135a4:	9906      	ldrle	r1, [sp, #24]
 80135a6:	9905      	ldrgt	r1, [sp, #20]
 80135a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80135ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80135b0:	f100 0001 	add.w	r0, r0, #1
 80135b4:	bfd4      	ite	le
 80135b6:	9306      	strle	r3, [sp, #24]
 80135b8:	9305      	strgt	r3, [sp, #20]
 80135ba:	f10b 0b01 	add.w	fp, fp, #1
 80135be:	901b      	str	r0, [sp, #108]	; 0x6c
 80135c0:	e7bf      	b.n	8013542 <_strtod_l+0x152>
 80135c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135c4:	191a      	adds	r2, r3, r4
 80135c6:	921b      	str	r2, [sp, #108]	; 0x6c
 80135c8:	5d1b      	ldrb	r3, [r3, r4]
 80135ca:	f1bb 0f00 	cmp.w	fp, #0
 80135ce:	d036      	beq.n	801363e <_strtod_l+0x24e>
 80135d0:	465c      	mov	r4, fp
 80135d2:	9004      	str	r0, [sp, #16]
 80135d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80135d8:	2a09      	cmp	r2, #9
 80135da:	d912      	bls.n	8013602 <_strtod_l+0x212>
 80135dc:	2201      	movs	r2, #1
 80135de:	e7c2      	b.n	8013566 <_strtod_l+0x176>
 80135e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135e2:	3001      	adds	r0, #1
 80135e4:	1c5a      	adds	r2, r3, #1
 80135e6:	921b      	str	r2, [sp, #108]	; 0x6c
 80135e8:	785b      	ldrb	r3, [r3, #1]
 80135ea:	2b30      	cmp	r3, #48	; 0x30
 80135ec:	d0f8      	beq.n	80135e0 <_strtod_l+0x1f0>
 80135ee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80135f2:	2a08      	cmp	r2, #8
 80135f4:	f200 84dc 	bhi.w	8013fb0 <_strtod_l+0xbc0>
 80135f8:	9004      	str	r0, [sp, #16]
 80135fa:	2000      	movs	r0, #0
 80135fc:	4604      	mov	r4, r0
 80135fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013600:	9208      	str	r2, [sp, #32]
 8013602:	3b30      	subs	r3, #48	; 0x30
 8013604:	f100 0201 	add.w	r2, r0, #1
 8013608:	d013      	beq.n	8013632 <_strtod_l+0x242>
 801360a:	9904      	ldr	r1, [sp, #16]
 801360c:	1905      	adds	r5, r0, r4
 801360e:	4411      	add	r1, r2
 8013610:	9104      	str	r1, [sp, #16]
 8013612:	4622      	mov	r2, r4
 8013614:	210a      	movs	r1, #10
 8013616:	42aa      	cmp	r2, r5
 8013618:	d113      	bne.n	8013642 <_strtod_l+0x252>
 801361a:	1822      	adds	r2, r4, r0
 801361c:	2a08      	cmp	r2, #8
 801361e:	f104 0401 	add.w	r4, r4, #1
 8013622:	4404      	add	r4, r0
 8013624:	dc1b      	bgt.n	801365e <_strtod_l+0x26e>
 8013626:	220a      	movs	r2, #10
 8013628:	9906      	ldr	r1, [sp, #24]
 801362a:	fb02 3301 	mla	r3, r2, r1, r3
 801362e:	9306      	str	r3, [sp, #24]
 8013630:	2200      	movs	r2, #0
 8013632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013634:	4610      	mov	r0, r2
 8013636:	1c59      	adds	r1, r3, #1
 8013638:	911b      	str	r1, [sp, #108]	; 0x6c
 801363a:	785b      	ldrb	r3, [r3, #1]
 801363c:	e7ca      	b.n	80135d4 <_strtod_l+0x1e4>
 801363e:	4658      	mov	r0, fp
 8013640:	e7d3      	b.n	80135ea <_strtod_l+0x1fa>
 8013642:	2a08      	cmp	r2, #8
 8013644:	dc04      	bgt.n	8013650 <_strtod_l+0x260>
 8013646:	9f06      	ldr	r7, [sp, #24]
 8013648:	434f      	muls	r7, r1
 801364a:	9706      	str	r7, [sp, #24]
 801364c:	3201      	adds	r2, #1
 801364e:	e7e2      	b.n	8013616 <_strtod_l+0x226>
 8013650:	1c57      	adds	r7, r2, #1
 8013652:	2f10      	cmp	r7, #16
 8013654:	bfde      	ittt	le
 8013656:	9f05      	ldrle	r7, [sp, #20]
 8013658:	434f      	mulle	r7, r1
 801365a:	9705      	strle	r7, [sp, #20]
 801365c:	e7f6      	b.n	801364c <_strtod_l+0x25c>
 801365e:	2c10      	cmp	r4, #16
 8013660:	bfdf      	itttt	le
 8013662:	220a      	movle	r2, #10
 8013664:	9905      	ldrle	r1, [sp, #20]
 8013666:	fb02 3301 	mlale	r3, r2, r1, r3
 801366a:	9305      	strle	r3, [sp, #20]
 801366c:	e7e0      	b.n	8013630 <_strtod_l+0x240>
 801366e:	2300      	movs	r3, #0
 8013670:	2201      	movs	r2, #1
 8013672:	9304      	str	r3, [sp, #16]
 8013674:	e77c      	b.n	8013570 <_strtod_l+0x180>
 8013676:	2700      	movs	r7, #0
 8013678:	1cb3      	adds	r3, r6, #2
 801367a:	931b      	str	r3, [sp, #108]	; 0x6c
 801367c:	78b3      	ldrb	r3, [r6, #2]
 801367e:	e784      	b.n	801358a <_strtod_l+0x19a>
 8013680:	2701      	movs	r7, #1
 8013682:	e7f9      	b.n	8013678 <_strtod_l+0x288>
 8013684:	08017ab8 	.word	0x08017ab8
 8013688:	08017864 	.word	0x08017864
 801368c:	7ff00000 	.word	0x7ff00000
 8013690:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013692:	1c59      	adds	r1, r3, #1
 8013694:	911b      	str	r1, [sp, #108]	; 0x6c
 8013696:	785b      	ldrb	r3, [r3, #1]
 8013698:	2b30      	cmp	r3, #48	; 0x30
 801369a:	d0f9      	beq.n	8013690 <_strtod_l+0x2a0>
 801369c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80136a0:	2908      	cmp	r1, #8
 80136a2:	f63f af78 	bhi.w	8013596 <_strtod_l+0x1a6>
 80136a6:	f04f 0e0a 	mov.w	lr, #10
 80136aa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80136ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136b0:	9309      	str	r3, [sp, #36]	; 0x24
 80136b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136b4:	1c59      	adds	r1, r3, #1
 80136b6:	911b      	str	r1, [sp, #108]	; 0x6c
 80136b8:	785b      	ldrb	r3, [r3, #1]
 80136ba:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80136be:	2d09      	cmp	r5, #9
 80136c0:	d935      	bls.n	801372e <_strtod_l+0x33e>
 80136c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80136c4:	1b49      	subs	r1, r1, r5
 80136c6:	2908      	cmp	r1, #8
 80136c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80136cc:	dc02      	bgt.n	80136d4 <_strtod_l+0x2e4>
 80136ce:	4565      	cmp	r5, ip
 80136d0:	bfa8      	it	ge
 80136d2:	4665      	movge	r5, ip
 80136d4:	b107      	cbz	r7, 80136d8 <_strtod_l+0x2e8>
 80136d6:	426d      	negs	r5, r5
 80136d8:	2c00      	cmp	r4, #0
 80136da:	d14c      	bne.n	8013776 <_strtod_l+0x386>
 80136dc:	9907      	ldr	r1, [sp, #28]
 80136de:	4301      	orrs	r1, r0
 80136e0:	f47f aec7 	bne.w	8013472 <_strtod_l+0x82>
 80136e4:	2a00      	cmp	r2, #0
 80136e6:	f47f aee0 	bne.w	80134aa <_strtod_l+0xba>
 80136ea:	2b69      	cmp	r3, #105	; 0x69
 80136ec:	d026      	beq.n	801373c <_strtod_l+0x34c>
 80136ee:	dc23      	bgt.n	8013738 <_strtod_l+0x348>
 80136f0:	2b49      	cmp	r3, #73	; 0x49
 80136f2:	d023      	beq.n	801373c <_strtod_l+0x34c>
 80136f4:	2b4e      	cmp	r3, #78	; 0x4e
 80136f6:	f47f aed8 	bne.w	80134aa <_strtod_l+0xba>
 80136fa:	499c      	ldr	r1, [pc, #624]	; (801396c <_strtod_l+0x57c>)
 80136fc:	a81b      	add	r0, sp, #108	; 0x6c
 80136fe:	f001 fe4f 	bl	80153a0 <__match>
 8013702:	2800      	cmp	r0, #0
 8013704:	f43f aed1 	beq.w	80134aa <_strtod_l+0xba>
 8013708:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	2b28      	cmp	r3, #40	; 0x28
 801370e:	d12c      	bne.n	801376a <_strtod_l+0x37a>
 8013710:	4997      	ldr	r1, [pc, #604]	; (8013970 <_strtod_l+0x580>)
 8013712:	aa1e      	add	r2, sp, #120	; 0x78
 8013714:	a81b      	add	r0, sp, #108	; 0x6c
 8013716:	f001 fe57 	bl	80153c8 <__hexnan>
 801371a:	2805      	cmp	r0, #5
 801371c:	d125      	bne.n	801376a <_strtod_l+0x37a>
 801371e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013720:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013724:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013728:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801372c:	e6a1      	b.n	8013472 <_strtod_l+0x82>
 801372e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8013732:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013736:	e7bc      	b.n	80136b2 <_strtod_l+0x2c2>
 8013738:	2b6e      	cmp	r3, #110	; 0x6e
 801373a:	e7dc      	b.n	80136f6 <_strtod_l+0x306>
 801373c:	498d      	ldr	r1, [pc, #564]	; (8013974 <_strtod_l+0x584>)
 801373e:	a81b      	add	r0, sp, #108	; 0x6c
 8013740:	f001 fe2e 	bl	80153a0 <__match>
 8013744:	2800      	cmp	r0, #0
 8013746:	f43f aeb0 	beq.w	80134aa <_strtod_l+0xba>
 801374a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801374c:	498a      	ldr	r1, [pc, #552]	; (8013978 <_strtod_l+0x588>)
 801374e:	3b01      	subs	r3, #1
 8013750:	a81b      	add	r0, sp, #108	; 0x6c
 8013752:	931b      	str	r3, [sp, #108]	; 0x6c
 8013754:	f001 fe24 	bl	80153a0 <__match>
 8013758:	b910      	cbnz	r0, 8013760 <_strtod_l+0x370>
 801375a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801375c:	3301      	adds	r3, #1
 801375e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013760:	f04f 0800 	mov.w	r8, #0
 8013764:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8013988 <_strtod_l+0x598>
 8013768:	e683      	b.n	8013472 <_strtod_l+0x82>
 801376a:	4884      	ldr	r0, [pc, #528]	; (801397c <_strtod_l+0x58c>)
 801376c:	f003 f840 	bl	80167f0 <nan>
 8013770:	4680      	mov	r8, r0
 8013772:	4689      	mov	r9, r1
 8013774:	e67d      	b.n	8013472 <_strtod_l+0x82>
 8013776:	9b04      	ldr	r3, [sp, #16]
 8013778:	f1bb 0f00 	cmp.w	fp, #0
 801377c:	bf08      	it	eq
 801377e:	46a3      	moveq	fp, r4
 8013780:	1aeb      	subs	r3, r5, r3
 8013782:	2c10      	cmp	r4, #16
 8013784:	9806      	ldr	r0, [sp, #24]
 8013786:	4626      	mov	r6, r4
 8013788:	9307      	str	r3, [sp, #28]
 801378a:	bfa8      	it	ge
 801378c:	2610      	movge	r6, #16
 801378e:	f7ec fe41 	bl	8000414 <__aeabi_ui2d>
 8013792:	2c09      	cmp	r4, #9
 8013794:	4680      	mov	r8, r0
 8013796:	4689      	mov	r9, r1
 8013798:	dd13      	ble.n	80137c2 <_strtod_l+0x3d2>
 801379a:	4b79      	ldr	r3, [pc, #484]	; (8013980 <_strtod_l+0x590>)
 801379c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80137a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80137a4:	f7ec feb0 	bl	8000508 <__aeabi_dmul>
 80137a8:	4680      	mov	r8, r0
 80137aa:	9805      	ldr	r0, [sp, #20]
 80137ac:	4689      	mov	r9, r1
 80137ae:	f7ec fe31 	bl	8000414 <__aeabi_ui2d>
 80137b2:	4602      	mov	r2, r0
 80137b4:	460b      	mov	r3, r1
 80137b6:	4640      	mov	r0, r8
 80137b8:	4649      	mov	r1, r9
 80137ba:	f7ec fcef 	bl	800019c <__adddf3>
 80137be:	4680      	mov	r8, r0
 80137c0:	4689      	mov	r9, r1
 80137c2:	2c0f      	cmp	r4, #15
 80137c4:	dc36      	bgt.n	8013834 <_strtod_l+0x444>
 80137c6:	9b07      	ldr	r3, [sp, #28]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f43f ae52 	beq.w	8013472 <_strtod_l+0x82>
 80137ce:	dd22      	ble.n	8013816 <_strtod_l+0x426>
 80137d0:	2b16      	cmp	r3, #22
 80137d2:	dc09      	bgt.n	80137e8 <_strtod_l+0x3f8>
 80137d4:	4c6a      	ldr	r4, [pc, #424]	; (8013980 <_strtod_l+0x590>)
 80137d6:	4642      	mov	r2, r8
 80137d8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80137dc:	464b      	mov	r3, r9
 80137de:	e9d4 0100 	ldrd	r0, r1, [r4]
 80137e2:	f7ec fe91 	bl	8000508 <__aeabi_dmul>
 80137e6:	e7c3      	b.n	8013770 <_strtod_l+0x380>
 80137e8:	9a07      	ldr	r2, [sp, #28]
 80137ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80137ee:	4293      	cmp	r3, r2
 80137f0:	db20      	blt.n	8013834 <_strtod_l+0x444>
 80137f2:	4d63      	ldr	r5, [pc, #396]	; (8013980 <_strtod_l+0x590>)
 80137f4:	f1c4 040f 	rsb	r4, r4, #15
 80137f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80137fc:	4642      	mov	r2, r8
 80137fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013802:	464b      	mov	r3, r9
 8013804:	f7ec fe80 	bl	8000508 <__aeabi_dmul>
 8013808:	9b07      	ldr	r3, [sp, #28]
 801380a:	1b1c      	subs	r4, r3, r4
 801380c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013814:	e7e5      	b.n	80137e2 <_strtod_l+0x3f2>
 8013816:	9b07      	ldr	r3, [sp, #28]
 8013818:	3316      	adds	r3, #22
 801381a:	db0b      	blt.n	8013834 <_strtod_l+0x444>
 801381c:	9b04      	ldr	r3, [sp, #16]
 801381e:	4a58      	ldr	r2, [pc, #352]	; (8013980 <_strtod_l+0x590>)
 8013820:	1b5d      	subs	r5, r3, r5
 8013822:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013826:	4640      	mov	r0, r8
 8013828:	e9d5 2300 	ldrd	r2, r3, [r5]
 801382c:	4649      	mov	r1, r9
 801382e:	f7ec ff95 	bl	800075c <__aeabi_ddiv>
 8013832:	e79d      	b.n	8013770 <_strtod_l+0x380>
 8013834:	9b07      	ldr	r3, [sp, #28]
 8013836:	1ba6      	subs	r6, r4, r6
 8013838:	441e      	add	r6, r3
 801383a:	2e00      	cmp	r6, #0
 801383c:	dd71      	ble.n	8013922 <_strtod_l+0x532>
 801383e:	f016 030f 	ands.w	r3, r6, #15
 8013842:	d00a      	beq.n	801385a <_strtod_l+0x46a>
 8013844:	494e      	ldr	r1, [pc, #312]	; (8013980 <_strtod_l+0x590>)
 8013846:	4642      	mov	r2, r8
 8013848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801384c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013850:	464b      	mov	r3, r9
 8013852:	f7ec fe59 	bl	8000508 <__aeabi_dmul>
 8013856:	4680      	mov	r8, r0
 8013858:	4689      	mov	r9, r1
 801385a:	f036 060f 	bics.w	r6, r6, #15
 801385e:	d050      	beq.n	8013902 <_strtod_l+0x512>
 8013860:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8013864:	dd27      	ble.n	80138b6 <_strtod_l+0x4c6>
 8013866:	f04f 0b00 	mov.w	fp, #0
 801386a:	f8cd b010 	str.w	fp, [sp, #16]
 801386e:	f8cd b020 	str.w	fp, [sp, #32]
 8013872:	f8cd b018 	str.w	fp, [sp, #24]
 8013876:	2322      	movs	r3, #34	; 0x22
 8013878:	f04f 0800 	mov.w	r8, #0
 801387c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013988 <_strtod_l+0x598>
 8013880:	f8ca 3000 	str.w	r3, [sl]
 8013884:	9b08      	ldr	r3, [sp, #32]
 8013886:	2b00      	cmp	r3, #0
 8013888:	f43f adf3 	beq.w	8013472 <_strtod_l+0x82>
 801388c:	4650      	mov	r0, sl
 801388e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013890:	f001 feaa 	bl	80155e8 <_Bfree>
 8013894:	4650      	mov	r0, sl
 8013896:	9906      	ldr	r1, [sp, #24]
 8013898:	f001 fea6 	bl	80155e8 <_Bfree>
 801389c:	4650      	mov	r0, sl
 801389e:	9904      	ldr	r1, [sp, #16]
 80138a0:	f001 fea2 	bl	80155e8 <_Bfree>
 80138a4:	4650      	mov	r0, sl
 80138a6:	9908      	ldr	r1, [sp, #32]
 80138a8:	f001 fe9e 	bl	80155e8 <_Bfree>
 80138ac:	4659      	mov	r1, fp
 80138ae:	4650      	mov	r0, sl
 80138b0:	f001 fe9a 	bl	80155e8 <_Bfree>
 80138b4:	e5dd      	b.n	8013472 <_strtod_l+0x82>
 80138b6:	2300      	movs	r3, #0
 80138b8:	4640      	mov	r0, r8
 80138ba:	4649      	mov	r1, r9
 80138bc:	461f      	mov	r7, r3
 80138be:	1136      	asrs	r6, r6, #4
 80138c0:	2e01      	cmp	r6, #1
 80138c2:	dc21      	bgt.n	8013908 <_strtod_l+0x518>
 80138c4:	b10b      	cbz	r3, 80138ca <_strtod_l+0x4da>
 80138c6:	4680      	mov	r8, r0
 80138c8:	4689      	mov	r9, r1
 80138ca:	4b2e      	ldr	r3, [pc, #184]	; (8013984 <_strtod_l+0x594>)
 80138cc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80138d0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80138d4:	4642      	mov	r2, r8
 80138d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80138da:	464b      	mov	r3, r9
 80138dc:	f7ec fe14 	bl	8000508 <__aeabi_dmul>
 80138e0:	4b29      	ldr	r3, [pc, #164]	; (8013988 <_strtod_l+0x598>)
 80138e2:	460a      	mov	r2, r1
 80138e4:	400b      	ands	r3, r1
 80138e6:	4929      	ldr	r1, [pc, #164]	; (801398c <_strtod_l+0x59c>)
 80138e8:	4680      	mov	r8, r0
 80138ea:	428b      	cmp	r3, r1
 80138ec:	d8bb      	bhi.n	8013866 <_strtod_l+0x476>
 80138ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80138f2:	428b      	cmp	r3, r1
 80138f4:	bf86      	itte	hi
 80138f6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80138fa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8013990 <_strtod_l+0x5a0>
 80138fe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013902:	2300      	movs	r3, #0
 8013904:	9305      	str	r3, [sp, #20]
 8013906:	e07e      	b.n	8013a06 <_strtod_l+0x616>
 8013908:	07f2      	lsls	r2, r6, #31
 801390a:	d507      	bpl.n	801391c <_strtod_l+0x52c>
 801390c:	4b1d      	ldr	r3, [pc, #116]	; (8013984 <_strtod_l+0x594>)
 801390e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	f7ec fdf7 	bl	8000508 <__aeabi_dmul>
 801391a:	2301      	movs	r3, #1
 801391c:	3701      	adds	r7, #1
 801391e:	1076      	asrs	r6, r6, #1
 8013920:	e7ce      	b.n	80138c0 <_strtod_l+0x4d0>
 8013922:	d0ee      	beq.n	8013902 <_strtod_l+0x512>
 8013924:	4276      	negs	r6, r6
 8013926:	f016 020f 	ands.w	r2, r6, #15
 801392a:	d00a      	beq.n	8013942 <_strtod_l+0x552>
 801392c:	4b14      	ldr	r3, [pc, #80]	; (8013980 <_strtod_l+0x590>)
 801392e:	4640      	mov	r0, r8
 8013930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013934:	4649      	mov	r1, r9
 8013936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393a:	f7ec ff0f 	bl	800075c <__aeabi_ddiv>
 801393e:	4680      	mov	r8, r0
 8013940:	4689      	mov	r9, r1
 8013942:	1136      	asrs	r6, r6, #4
 8013944:	d0dd      	beq.n	8013902 <_strtod_l+0x512>
 8013946:	2e1f      	cmp	r6, #31
 8013948:	dd24      	ble.n	8013994 <_strtod_l+0x5a4>
 801394a:	f04f 0b00 	mov.w	fp, #0
 801394e:	f8cd b010 	str.w	fp, [sp, #16]
 8013952:	f8cd b020 	str.w	fp, [sp, #32]
 8013956:	f8cd b018 	str.w	fp, [sp, #24]
 801395a:	2322      	movs	r3, #34	; 0x22
 801395c:	f04f 0800 	mov.w	r8, #0
 8013960:	f04f 0900 	mov.w	r9, #0
 8013964:	f8ca 3000 	str.w	r3, [sl]
 8013968:	e78c      	b.n	8013884 <_strtod_l+0x494>
 801396a:	bf00      	nop
 801396c:	08017839 	.word	0x08017839
 8013970:	08017878 	.word	0x08017878
 8013974:	08017831 	.word	0x08017831
 8013978:	080179bc 	.word	0x080179bc
 801397c:	08017c93 	.word	0x08017c93
 8013980:	08017b58 	.word	0x08017b58
 8013984:	08017b30 	.word	0x08017b30
 8013988:	7ff00000 	.word	0x7ff00000
 801398c:	7ca00000 	.word	0x7ca00000
 8013990:	7fefffff 	.word	0x7fefffff
 8013994:	f016 0310 	ands.w	r3, r6, #16
 8013998:	bf18      	it	ne
 801399a:	236a      	movne	r3, #106	; 0x6a
 801399c:	4640      	mov	r0, r8
 801399e:	9305      	str	r3, [sp, #20]
 80139a0:	4649      	mov	r1, r9
 80139a2:	2300      	movs	r3, #0
 80139a4:	4fb2      	ldr	r7, [pc, #712]	; (8013c70 <_strtod_l+0x880>)
 80139a6:	07f2      	lsls	r2, r6, #31
 80139a8:	d504      	bpl.n	80139b4 <_strtod_l+0x5c4>
 80139aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139ae:	f7ec fdab 	bl	8000508 <__aeabi_dmul>
 80139b2:	2301      	movs	r3, #1
 80139b4:	1076      	asrs	r6, r6, #1
 80139b6:	f107 0708 	add.w	r7, r7, #8
 80139ba:	d1f4      	bne.n	80139a6 <_strtod_l+0x5b6>
 80139bc:	b10b      	cbz	r3, 80139c2 <_strtod_l+0x5d2>
 80139be:	4680      	mov	r8, r0
 80139c0:	4689      	mov	r9, r1
 80139c2:	9b05      	ldr	r3, [sp, #20]
 80139c4:	b1bb      	cbz	r3, 80139f6 <_strtod_l+0x606>
 80139c6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80139ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	4649      	mov	r1, r9
 80139d2:	dd10      	ble.n	80139f6 <_strtod_l+0x606>
 80139d4:	2b1f      	cmp	r3, #31
 80139d6:	f340 812b 	ble.w	8013c30 <_strtod_l+0x840>
 80139da:	2b34      	cmp	r3, #52	; 0x34
 80139dc:	bfd8      	it	le
 80139de:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80139e2:	f04f 0800 	mov.w	r8, #0
 80139e6:	bfcf      	iteee	gt
 80139e8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80139ec:	3b20      	suble	r3, #32
 80139ee:	fa02 f303 	lslle.w	r3, r2, r3
 80139f2:	ea03 0901 	andle.w	r9, r3, r1
 80139f6:	2200      	movs	r2, #0
 80139f8:	2300      	movs	r3, #0
 80139fa:	4640      	mov	r0, r8
 80139fc:	4649      	mov	r1, r9
 80139fe:	f7ec ffeb 	bl	80009d8 <__aeabi_dcmpeq>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d1a1      	bne.n	801394a <_strtod_l+0x55a>
 8013a06:	9b06      	ldr	r3, [sp, #24]
 8013a08:	465a      	mov	r2, fp
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	4650      	mov	r0, sl
 8013a0e:	4623      	mov	r3, r4
 8013a10:	9908      	ldr	r1, [sp, #32]
 8013a12:	f001 fe55 	bl	80156c0 <__s2b>
 8013a16:	9008      	str	r0, [sp, #32]
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	f43f af24 	beq.w	8013866 <_strtod_l+0x476>
 8013a1e:	9b04      	ldr	r3, [sp, #16]
 8013a20:	f04f 0b00 	mov.w	fp, #0
 8013a24:	1b5d      	subs	r5, r3, r5
 8013a26:	9b07      	ldr	r3, [sp, #28]
 8013a28:	f8cd b010 	str.w	fp, [sp, #16]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bfb4      	ite	lt
 8013a30:	462b      	movlt	r3, r5
 8013a32:	2300      	movge	r3, #0
 8013a34:	930e      	str	r3, [sp, #56]	; 0x38
 8013a36:	9b07      	ldr	r3, [sp, #28]
 8013a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013a3c:	9316      	str	r3, [sp, #88]	; 0x58
 8013a3e:	9b08      	ldr	r3, [sp, #32]
 8013a40:	4650      	mov	r0, sl
 8013a42:	6859      	ldr	r1, [r3, #4]
 8013a44:	f001 fd90 	bl	8015568 <_Balloc>
 8013a48:	9006      	str	r0, [sp, #24]
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	f43f af13 	beq.w	8013876 <_strtod_l+0x486>
 8013a50:	9b08      	ldr	r3, [sp, #32]
 8013a52:	300c      	adds	r0, #12
 8013a54:	691a      	ldr	r2, [r3, #16]
 8013a56:	f103 010c 	add.w	r1, r3, #12
 8013a5a:	3202      	adds	r2, #2
 8013a5c:	0092      	lsls	r2, r2, #2
 8013a5e:	f7fe fc47 	bl	80122f0 <memcpy>
 8013a62:	ab1e      	add	r3, sp, #120	; 0x78
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	ab1d      	add	r3, sp, #116	; 0x74
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	4642      	mov	r2, r8
 8013a6c:	464b      	mov	r3, r9
 8013a6e:	4650      	mov	r0, sl
 8013a70:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8013a74:	f002 f962 	bl	8015d3c <__d2b>
 8013a78:	901c      	str	r0, [sp, #112]	; 0x70
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	f43f aefb 	beq.w	8013876 <_strtod_l+0x486>
 8013a80:	2101      	movs	r1, #1
 8013a82:	4650      	mov	r0, sl
 8013a84:	f001 feb4 	bl	80157f0 <__i2b>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	9004      	str	r0, [sp, #16]
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	f43f aef2 	beq.w	8013876 <_strtod_l+0x486>
 8013a92:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013a94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a96:	2d00      	cmp	r5, #0
 8013a98:	bfab      	itete	ge
 8013a9a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013a9c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013a9e:	18ee      	addge	r6, r5, r3
 8013aa0:	1b5c      	sublt	r4, r3, r5
 8013aa2:	9b05      	ldr	r3, [sp, #20]
 8013aa4:	bfa8      	it	ge
 8013aa6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8013aa8:	eba5 0503 	sub.w	r5, r5, r3
 8013aac:	4415      	add	r5, r2
 8013aae:	4b71      	ldr	r3, [pc, #452]	; (8013c74 <_strtod_l+0x884>)
 8013ab0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8013ab4:	bfb8      	it	lt
 8013ab6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8013ab8:	429d      	cmp	r5, r3
 8013aba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013abe:	f280 80c9 	bge.w	8013c54 <_strtod_l+0x864>
 8013ac2:	1b5b      	subs	r3, r3, r5
 8013ac4:	2b1f      	cmp	r3, #31
 8013ac6:	f04f 0701 	mov.w	r7, #1
 8013aca:	eba2 0203 	sub.w	r2, r2, r3
 8013ace:	f300 80b6 	bgt.w	8013c3e <_strtod_l+0x84e>
 8013ad2:	2500      	movs	r5, #0
 8013ad4:	fa07 f303 	lsl.w	r3, r7, r3
 8013ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ada:	18b7      	adds	r7, r6, r2
 8013adc:	9b05      	ldr	r3, [sp, #20]
 8013ade:	42be      	cmp	r6, r7
 8013ae0:	4414      	add	r4, r2
 8013ae2:	441c      	add	r4, r3
 8013ae4:	4633      	mov	r3, r6
 8013ae6:	bfa8      	it	ge
 8013ae8:	463b      	movge	r3, r7
 8013aea:	42a3      	cmp	r3, r4
 8013aec:	bfa8      	it	ge
 8013aee:	4623      	movge	r3, r4
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	bfc2      	ittt	gt
 8013af4:	1aff      	subgt	r7, r7, r3
 8013af6:	1ae4      	subgt	r4, r4, r3
 8013af8:	1af6      	subgt	r6, r6, r3
 8013afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	dd17      	ble.n	8013b30 <_strtod_l+0x740>
 8013b00:	461a      	mov	r2, r3
 8013b02:	4650      	mov	r0, sl
 8013b04:	9904      	ldr	r1, [sp, #16]
 8013b06:	f001 ff2d 	bl	8015964 <__pow5mult>
 8013b0a:	9004      	str	r0, [sp, #16]
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	f43f aeb2 	beq.w	8013876 <_strtod_l+0x486>
 8013b12:	4601      	mov	r1, r0
 8013b14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b16:	4650      	mov	r0, sl
 8013b18:	f001 fe80 	bl	801581c <__multiply>
 8013b1c:	9009      	str	r0, [sp, #36]	; 0x24
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	f43f aea9 	beq.w	8013876 <_strtod_l+0x486>
 8013b24:	4650      	mov	r0, sl
 8013b26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b28:	f001 fd5e 	bl	80155e8 <_Bfree>
 8013b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b2e:	931c      	str	r3, [sp, #112]	; 0x70
 8013b30:	2f00      	cmp	r7, #0
 8013b32:	f300 8093 	bgt.w	8013c5c <_strtod_l+0x86c>
 8013b36:	9b07      	ldr	r3, [sp, #28]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	dd08      	ble.n	8013b4e <_strtod_l+0x75e>
 8013b3c:	4650      	mov	r0, sl
 8013b3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013b40:	9906      	ldr	r1, [sp, #24]
 8013b42:	f001 ff0f 	bl	8015964 <__pow5mult>
 8013b46:	9006      	str	r0, [sp, #24]
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	f43f ae94 	beq.w	8013876 <_strtod_l+0x486>
 8013b4e:	2c00      	cmp	r4, #0
 8013b50:	dd08      	ble.n	8013b64 <_strtod_l+0x774>
 8013b52:	4622      	mov	r2, r4
 8013b54:	4650      	mov	r0, sl
 8013b56:	9906      	ldr	r1, [sp, #24]
 8013b58:	f001 ff5e 	bl	8015a18 <__lshift>
 8013b5c:	9006      	str	r0, [sp, #24]
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	f43f ae89 	beq.w	8013876 <_strtod_l+0x486>
 8013b64:	2e00      	cmp	r6, #0
 8013b66:	dd08      	ble.n	8013b7a <_strtod_l+0x78a>
 8013b68:	4632      	mov	r2, r6
 8013b6a:	4650      	mov	r0, sl
 8013b6c:	9904      	ldr	r1, [sp, #16]
 8013b6e:	f001 ff53 	bl	8015a18 <__lshift>
 8013b72:	9004      	str	r0, [sp, #16]
 8013b74:	2800      	cmp	r0, #0
 8013b76:	f43f ae7e 	beq.w	8013876 <_strtod_l+0x486>
 8013b7a:	4650      	mov	r0, sl
 8013b7c:	9a06      	ldr	r2, [sp, #24]
 8013b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b80:	f001 ffd2 	bl	8015b28 <__mdiff>
 8013b84:	4683      	mov	fp, r0
 8013b86:	2800      	cmp	r0, #0
 8013b88:	f43f ae75 	beq.w	8013876 <_strtod_l+0x486>
 8013b8c:	2400      	movs	r4, #0
 8013b8e:	68c3      	ldr	r3, [r0, #12]
 8013b90:	9904      	ldr	r1, [sp, #16]
 8013b92:	60c4      	str	r4, [r0, #12]
 8013b94:	930d      	str	r3, [sp, #52]	; 0x34
 8013b96:	f001 ffab 	bl	8015af0 <__mcmp>
 8013b9a:	42a0      	cmp	r0, r4
 8013b9c:	da70      	bge.n	8013c80 <_strtod_l+0x890>
 8013b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ba0:	ea53 0308 	orrs.w	r3, r3, r8
 8013ba4:	f040 8096 	bne.w	8013cd4 <_strtod_l+0x8e4>
 8013ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f040 8091 	bne.w	8013cd4 <_strtod_l+0x8e4>
 8013bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013bb6:	0d1b      	lsrs	r3, r3, #20
 8013bb8:	051b      	lsls	r3, r3, #20
 8013bba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013bbe:	f240 8089 	bls.w	8013cd4 <_strtod_l+0x8e4>
 8013bc2:	f8db 3014 	ldr.w	r3, [fp, #20]
 8013bc6:	b923      	cbnz	r3, 8013bd2 <_strtod_l+0x7e2>
 8013bc8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	f340 8081 	ble.w	8013cd4 <_strtod_l+0x8e4>
 8013bd2:	4659      	mov	r1, fp
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	4650      	mov	r0, sl
 8013bd8:	f001 ff1e 	bl	8015a18 <__lshift>
 8013bdc:	9904      	ldr	r1, [sp, #16]
 8013bde:	4683      	mov	fp, r0
 8013be0:	f001 ff86 	bl	8015af0 <__mcmp>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	dd75      	ble.n	8013cd4 <_strtod_l+0x8e4>
 8013be8:	9905      	ldr	r1, [sp, #20]
 8013bea:	464b      	mov	r3, r9
 8013bec:	4a22      	ldr	r2, [pc, #136]	; (8013c78 <_strtod_l+0x888>)
 8013bee:	2900      	cmp	r1, #0
 8013bf0:	f000 8091 	beq.w	8013d16 <_strtod_l+0x926>
 8013bf4:	ea02 0109 	and.w	r1, r2, r9
 8013bf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013bfc:	f300 808b 	bgt.w	8013d16 <_strtod_l+0x926>
 8013c00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013c04:	f77f aea9 	ble.w	801395a <_strtod_l+0x56a>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	4a1c      	ldr	r2, [pc, #112]	; (8013c7c <_strtod_l+0x88c>)
 8013c0c:	4640      	mov	r0, r8
 8013c0e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013c12:	4649      	mov	r1, r9
 8013c14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013c18:	f7ec fc76 	bl	8000508 <__aeabi_dmul>
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	4303      	orrs	r3, r0
 8013c20:	bf08      	it	eq
 8013c22:	2322      	moveq	r3, #34	; 0x22
 8013c24:	4680      	mov	r8, r0
 8013c26:	4689      	mov	r9, r1
 8013c28:	bf08      	it	eq
 8013c2a:	f8ca 3000 	streq.w	r3, [sl]
 8013c2e:	e62d      	b.n	801388c <_strtod_l+0x49c>
 8013c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c34:	fa02 f303 	lsl.w	r3, r2, r3
 8013c38:	ea03 0808 	and.w	r8, r3, r8
 8013c3c:	e6db      	b.n	80139f6 <_strtod_l+0x606>
 8013c3e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8013c42:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8013c46:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8013c4a:	35e2      	adds	r5, #226	; 0xe2
 8013c4c:	fa07 f505 	lsl.w	r5, r7, r5
 8013c50:	970f      	str	r7, [sp, #60]	; 0x3c
 8013c52:	e742      	b.n	8013ada <_strtod_l+0x6ea>
 8013c54:	2301      	movs	r3, #1
 8013c56:	2500      	movs	r5, #0
 8013c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c5a:	e73e      	b.n	8013ada <_strtod_l+0x6ea>
 8013c5c:	463a      	mov	r2, r7
 8013c5e:	4650      	mov	r0, sl
 8013c60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c62:	f001 fed9 	bl	8015a18 <__lshift>
 8013c66:	901c      	str	r0, [sp, #112]	; 0x70
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	f47f af64 	bne.w	8013b36 <_strtod_l+0x746>
 8013c6e:	e602      	b.n	8013876 <_strtod_l+0x486>
 8013c70:	08017890 	.word	0x08017890
 8013c74:	fffffc02 	.word	0xfffffc02
 8013c78:	7ff00000 	.word	0x7ff00000
 8013c7c:	39500000 	.word	0x39500000
 8013c80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013c84:	d166      	bne.n	8013d54 <_strtod_l+0x964>
 8013c86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c8c:	b35a      	cbz	r2, 8013ce6 <_strtod_l+0x8f6>
 8013c8e:	4a9c      	ldr	r2, [pc, #624]	; (8013f00 <_strtod_l+0xb10>)
 8013c90:	4293      	cmp	r3, r2
 8013c92:	d12c      	bne.n	8013cee <_strtod_l+0x8fe>
 8013c94:	9b05      	ldr	r3, [sp, #20]
 8013c96:	4640      	mov	r0, r8
 8013c98:	b303      	cbz	r3, 8013cdc <_strtod_l+0x8ec>
 8013c9a:	464b      	mov	r3, r9
 8013c9c:	4a99      	ldr	r2, [pc, #612]	; (8013f04 <_strtod_l+0xb14>)
 8013c9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ca2:	401a      	ands	r2, r3
 8013ca4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013ca8:	d81b      	bhi.n	8013ce2 <_strtod_l+0x8f2>
 8013caa:	0d12      	lsrs	r2, r2, #20
 8013cac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8013cb4:	4298      	cmp	r0, r3
 8013cb6:	d11a      	bne.n	8013cee <_strtod_l+0x8fe>
 8013cb8:	4b93      	ldr	r3, [pc, #588]	; (8013f08 <_strtod_l+0xb18>)
 8013cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d102      	bne.n	8013cc6 <_strtod_l+0x8d6>
 8013cc0:	3001      	adds	r0, #1
 8013cc2:	f43f add8 	beq.w	8013876 <_strtod_l+0x486>
 8013cc6:	f04f 0800 	mov.w	r8, #0
 8013cca:	4b8e      	ldr	r3, [pc, #568]	; (8013f04 <_strtod_l+0xb14>)
 8013ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cce:	401a      	ands	r2, r3
 8013cd0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8013cd4:	9b05      	ldr	r3, [sp, #20]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d196      	bne.n	8013c08 <_strtod_l+0x818>
 8013cda:	e5d7      	b.n	801388c <_strtod_l+0x49c>
 8013cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ce0:	e7e8      	b.n	8013cb4 <_strtod_l+0x8c4>
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	e7e6      	b.n	8013cb4 <_strtod_l+0x8c4>
 8013ce6:	ea53 0308 	orrs.w	r3, r3, r8
 8013cea:	f43f af7d 	beq.w	8013be8 <_strtod_l+0x7f8>
 8013cee:	b1e5      	cbz	r5, 8013d2a <_strtod_l+0x93a>
 8013cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cf2:	421d      	tst	r5, r3
 8013cf4:	d0ee      	beq.n	8013cd4 <_strtod_l+0x8e4>
 8013cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cf8:	4640      	mov	r0, r8
 8013cfa:	4649      	mov	r1, r9
 8013cfc:	9a05      	ldr	r2, [sp, #20]
 8013cfe:	b1c3      	cbz	r3, 8013d32 <_strtod_l+0x942>
 8013d00:	f7ff fb52 	bl	80133a8 <sulp>
 8013d04:	4602      	mov	r2, r0
 8013d06:	460b      	mov	r3, r1
 8013d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d0c:	f7ec fa46 	bl	800019c <__adddf3>
 8013d10:	4680      	mov	r8, r0
 8013d12:	4689      	mov	r9, r1
 8013d14:	e7de      	b.n	8013cd4 <_strtod_l+0x8e4>
 8013d16:	4013      	ands	r3, r2
 8013d18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013d1c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013d20:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013d24:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013d28:	e7d4      	b.n	8013cd4 <_strtod_l+0x8e4>
 8013d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d2c:	ea13 0f08 	tst.w	r3, r8
 8013d30:	e7e0      	b.n	8013cf4 <_strtod_l+0x904>
 8013d32:	f7ff fb39 	bl	80133a8 <sulp>
 8013d36:	4602      	mov	r2, r0
 8013d38:	460b      	mov	r3, r1
 8013d3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d3e:	f7ec fa2b 	bl	8000198 <__aeabi_dsub>
 8013d42:	2200      	movs	r2, #0
 8013d44:	2300      	movs	r3, #0
 8013d46:	4680      	mov	r8, r0
 8013d48:	4689      	mov	r9, r1
 8013d4a:	f7ec fe45 	bl	80009d8 <__aeabi_dcmpeq>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d0c0      	beq.n	8013cd4 <_strtod_l+0x8e4>
 8013d52:	e602      	b.n	801395a <_strtod_l+0x56a>
 8013d54:	4658      	mov	r0, fp
 8013d56:	9904      	ldr	r1, [sp, #16]
 8013d58:	f002 f84c 	bl	8015df4 <__ratio>
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d62:	4606      	mov	r6, r0
 8013d64:	460f      	mov	r7, r1
 8013d66:	f7ec fe4b 	bl	8000a00 <__aeabi_dcmple>
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	d075      	beq.n	8013e5a <_strtod_l+0xa6a>
 8013d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d047      	beq.n	8013e04 <_strtod_l+0xa14>
 8013d74:	2600      	movs	r6, #0
 8013d76:	4f65      	ldr	r7, [pc, #404]	; (8013f0c <_strtod_l+0xb1c>)
 8013d78:	4d64      	ldr	r5, [pc, #400]	; (8013f0c <_strtod_l+0xb1c>)
 8013d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d80:	0d1b      	lsrs	r3, r3, #20
 8013d82:	051b      	lsls	r3, r3, #20
 8013d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d88:	4b61      	ldr	r3, [pc, #388]	; (8013f10 <_strtod_l+0xb20>)
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	f040 80c8 	bne.w	8013f20 <_strtod_l+0xb30>
 8013d90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d94:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d9a:	4640      	mov	r0, r8
 8013d9c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8013da0:	4649      	mov	r1, r9
 8013da2:	f001 ff51 	bl	8015c48 <__ulp>
 8013da6:	4602      	mov	r2, r0
 8013da8:	460b      	mov	r3, r1
 8013daa:	4630      	mov	r0, r6
 8013dac:	4639      	mov	r1, r7
 8013dae:	f7ec fbab 	bl	8000508 <__aeabi_dmul>
 8013db2:	4642      	mov	r2, r8
 8013db4:	464b      	mov	r3, r9
 8013db6:	f7ec f9f1 	bl	800019c <__adddf3>
 8013dba:	460b      	mov	r3, r1
 8013dbc:	4951      	ldr	r1, [pc, #324]	; (8013f04 <_strtod_l+0xb14>)
 8013dbe:	4a55      	ldr	r2, [pc, #340]	; (8013f14 <_strtod_l+0xb24>)
 8013dc0:	4019      	ands	r1, r3
 8013dc2:	4291      	cmp	r1, r2
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	d95e      	bls.n	8013e86 <_strtod_l+0xa96>
 8013dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d103      	bne.n	8013dda <_strtod_l+0x9ea>
 8013dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	f43f ad4e 	beq.w	8013876 <_strtod_l+0x486>
 8013dda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013dde:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8013f08 <_strtod_l+0xb18>
 8013de2:	4650      	mov	r0, sl
 8013de4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013de6:	f001 fbff 	bl	80155e8 <_Bfree>
 8013dea:	4650      	mov	r0, sl
 8013dec:	9906      	ldr	r1, [sp, #24]
 8013dee:	f001 fbfb 	bl	80155e8 <_Bfree>
 8013df2:	4650      	mov	r0, sl
 8013df4:	9904      	ldr	r1, [sp, #16]
 8013df6:	f001 fbf7 	bl	80155e8 <_Bfree>
 8013dfa:	4659      	mov	r1, fp
 8013dfc:	4650      	mov	r0, sl
 8013dfe:	f001 fbf3 	bl	80155e8 <_Bfree>
 8013e02:	e61c      	b.n	8013a3e <_strtod_l+0x64e>
 8013e04:	f1b8 0f00 	cmp.w	r8, #0
 8013e08:	d119      	bne.n	8013e3e <_strtod_l+0xa4e>
 8013e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e10:	b9e3      	cbnz	r3, 8013e4c <_strtod_l+0xa5c>
 8013e12:	2200      	movs	r2, #0
 8013e14:	4630      	mov	r0, r6
 8013e16:	4639      	mov	r1, r7
 8013e18:	4b3c      	ldr	r3, [pc, #240]	; (8013f0c <_strtod_l+0xb1c>)
 8013e1a:	f7ec fde7 	bl	80009ec <__aeabi_dcmplt>
 8013e1e:	b9c8      	cbnz	r0, 8013e54 <_strtod_l+0xa64>
 8013e20:	2200      	movs	r2, #0
 8013e22:	4630      	mov	r0, r6
 8013e24:	4639      	mov	r1, r7
 8013e26:	4b3c      	ldr	r3, [pc, #240]	; (8013f18 <_strtod_l+0xb28>)
 8013e28:	f7ec fb6e 	bl	8000508 <__aeabi_dmul>
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	460d      	mov	r5, r1
 8013e30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013e34:	9418      	str	r4, [sp, #96]	; 0x60
 8013e36:	9319      	str	r3, [sp, #100]	; 0x64
 8013e38:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8013e3c:	e79d      	b.n	8013d7a <_strtod_l+0x98a>
 8013e3e:	f1b8 0f01 	cmp.w	r8, #1
 8013e42:	d103      	bne.n	8013e4c <_strtod_l+0xa5c>
 8013e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f43f ad87 	beq.w	801395a <_strtod_l+0x56a>
 8013e4c:	2600      	movs	r6, #0
 8013e4e:	2400      	movs	r4, #0
 8013e50:	4f32      	ldr	r7, [pc, #200]	; (8013f1c <_strtod_l+0xb2c>)
 8013e52:	e791      	b.n	8013d78 <_strtod_l+0x988>
 8013e54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013e56:	4d30      	ldr	r5, [pc, #192]	; (8013f18 <_strtod_l+0xb28>)
 8013e58:	e7ea      	b.n	8013e30 <_strtod_l+0xa40>
 8013e5a:	4b2f      	ldr	r3, [pc, #188]	; (8013f18 <_strtod_l+0xb28>)
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	4630      	mov	r0, r6
 8013e60:	4639      	mov	r1, r7
 8013e62:	f7ec fb51 	bl	8000508 <__aeabi_dmul>
 8013e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e68:	4604      	mov	r4, r0
 8013e6a:	460d      	mov	r5, r1
 8013e6c:	b933      	cbnz	r3, 8013e7c <_strtod_l+0xa8c>
 8013e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e72:	9010      	str	r0, [sp, #64]	; 0x40
 8013e74:	9311      	str	r3, [sp, #68]	; 0x44
 8013e76:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013e7a:	e77e      	b.n	8013d7a <_strtod_l+0x98a>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8013e84:	e7f7      	b.n	8013e76 <_strtod_l+0xa86>
 8013e86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013e8a:	9b05      	ldr	r3, [sp, #20]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1a8      	bne.n	8013de2 <_strtod_l+0x9f2>
 8013e90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e96:	0d1b      	lsrs	r3, r3, #20
 8013e98:	051b      	lsls	r3, r3, #20
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d1a1      	bne.n	8013de2 <_strtod_l+0x9f2>
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	f7ed f915 	bl	80010d0 <__aeabi_d2lz>
 8013ea6:	f7ec fb01 	bl	80004ac <__aeabi_l2d>
 8013eaa:	4602      	mov	r2, r0
 8013eac:	460b      	mov	r3, r1
 8013eae:	4620      	mov	r0, r4
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	f7ec f971 	bl	8000198 <__aeabi_dsub>
 8013eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ebc:	ea43 0308 	orr.w	r3, r3, r8
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	460d      	mov	r5, r1
 8013ec6:	d066      	beq.n	8013f96 <_strtod_l+0xba6>
 8013ec8:	a309      	add	r3, pc, #36	; (adr r3, 8013ef0 <_strtod_l+0xb00>)
 8013eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ece:	f7ec fd8d 	bl	80009ec <__aeabi_dcmplt>
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f47f acda 	bne.w	801388c <_strtod_l+0x49c>
 8013ed8:	a307      	add	r3, pc, #28	; (adr r3, 8013ef8 <_strtod_l+0xb08>)
 8013eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	f7ec fda1 	bl	8000a28 <__aeabi_dcmpgt>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f43f af7b 	beq.w	8013de2 <_strtod_l+0x9f2>
 8013eec:	e4ce      	b.n	801388c <_strtod_l+0x49c>
 8013eee:	bf00      	nop
 8013ef0:	94a03595 	.word	0x94a03595
 8013ef4:	3fdfffff 	.word	0x3fdfffff
 8013ef8:	35afe535 	.word	0x35afe535
 8013efc:	3fe00000 	.word	0x3fe00000
 8013f00:	000fffff 	.word	0x000fffff
 8013f04:	7ff00000 	.word	0x7ff00000
 8013f08:	7fefffff 	.word	0x7fefffff
 8013f0c:	3ff00000 	.word	0x3ff00000
 8013f10:	7fe00000 	.word	0x7fe00000
 8013f14:	7c9fffff 	.word	0x7c9fffff
 8013f18:	3fe00000 	.word	0x3fe00000
 8013f1c:	bff00000 	.word	0xbff00000
 8013f20:	9b05      	ldr	r3, [sp, #20]
 8013f22:	b313      	cbz	r3, 8013f6a <_strtod_l+0xb7a>
 8013f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f2a:	d81e      	bhi.n	8013f6a <_strtod_l+0xb7a>
 8013f2c:	a326      	add	r3, pc, #152	; (adr r3, 8013fc8 <_strtod_l+0xbd8>)
 8013f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f32:	4620      	mov	r0, r4
 8013f34:	4629      	mov	r1, r5
 8013f36:	f7ec fd63 	bl	8000a00 <__aeabi_dcmple>
 8013f3a:	b190      	cbz	r0, 8013f62 <_strtod_l+0xb72>
 8013f3c:	4629      	mov	r1, r5
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f7ec fdba 	bl	8000ab8 <__aeabi_d2uiz>
 8013f44:	2801      	cmp	r0, #1
 8013f46:	bf38      	it	cc
 8013f48:	2001      	movcc	r0, #1
 8013f4a:	f7ec fa63 	bl	8000414 <__aeabi_ui2d>
 8013f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f50:	4604      	mov	r4, r0
 8013f52:	460d      	mov	r5, r1
 8013f54:	b9d3      	cbnz	r3, 8013f8c <_strtod_l+0xb9c>
 8013f56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f5a:	9012      	str	r0, [sp, #72]	; 0x48
 8013f5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f5e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8013f62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f64:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013f68:	1a9f      	subs	r7, r3, r2
 8013f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f6e:	f001 fe6b 	bl	8015c48 <__ulp>
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	4630      	mov	r0, r6
 8013f78:	4639      	mov	r1, r7
 8013f7a:	f7ec fac5 	bl	8000508 <__aeabi_dmul>
 8013f7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013f82:	f7ec f90b 	bl	800019c <__adddf3>
 8013f86:	4680      	mov	r8, r0
 8013f88:	4689      	mov	r9, r1
 8013f8a:	e77e      	b.n	8013e8a <_strtod_l+0xa9a>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	460b      	mov	r3, r1
 8013f90:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8013f94:	e7e3      	b.n	8013f5e <_strtod_l+0xb6e>
 8013f96:	a30e      	add	r3, pc, #56	; (adr r3, 8013fd0 <_strtod_l+0xbe0>)
 8013f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9c:	f7ec fd26 	bl	80009ec <__aeabi_dcmplt>
 8013fa0:	e7a1      	b.n	8013ee6 <_strtod_l+0xaf6>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8013fa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013faa:	6013      	str	r3, [r2, #0]
 8013fac:	f7ff ba65 	b.w	801347a <_strtod_l+0x8a>
 8013fb0:	2b65      	cmp	r3, #101	; 0x65
 8013fb2:	f43f ab5c 	beq.w	801366e <_strtod_l+0x27e>
 8013fb6:	2b45      	cmp	r3, #69	; 0x45
 8013fb8:	f43f ab59 	beq.w	801366e <_strtod_l+0x27e>
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	f7ff bb8d 	b.w	80136dc <_strtod_l+0x2ec>
 8013fc2:	bf00      	nop
 8013fc4:	f3af 8000 	nop.w
 8013fc8:	ffc00000 	.word	0xffc00000
 8013fcc:	41dfffff 	.word	0x41dfffff
 8013fd0:	94a03595 	.word	0x94a03595
 8013fd4:	3fcfffff 	.word	0x3fcfffff

08013fd8 <_strtod_r>:
 8013fd8:	4b01      	ldr	r3, [pc, #4]	; (8013fe0 <_strtod_r+0x8>)
 8013fda:	f7ff ba09 	b.w	80133f0 <_strtod_l>
 8013fde:	bf00      	nop
 8013fe0:	2000028c 	.word	0x2000028c

08013fe4 <_strtol_l.isra.0>:
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fea:	4686      	mov	lr, r0
 8013fec:	d001      	beq.n	8013ff2 <_strtol_l.isra.0+0xe>
 8013fee:	2b24      	cmp	r3, #36	; 0x24
 8013ff0:	d906      	bls.n	8014000 <_strtol_l.isra.0+0x1c>
 8013ff2:	f7fe f935 	bl	8012260 <__errno>
 8013ff6:	2316      	movs	r3, #22
 8013ff8:	6003      	str	r3, [r0, #0]
 8013ffa:	2000      	movs	r0, #0
 8013ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014000:	468c      	mov	ip, r1
 8014002:	4e3a      	ldr	r6, [pc, #232]	; (80140ec <_strtol_l.isra.0+0x108>)
 8014004:	4660      	mov	r0, ip
 8014006:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801400a:	5da5      	ldrb	r5, [r4, r6]
 801400c:	f015 0508 	ands.w	r5, r5, #8
 8014010:	d1f8      	bne.n	8014004 <_strtol_l.isra.0+0x20>
 8014012:	2c2d      	cmp	r4, #45	; 0x2d
 8014014:	d133      	bne.n	801407e <_strtol_l.isra.0+0x9a>
 8014016:	f04f 0801 	mov.w	r8, #1
 801401a:	f89c 4000 	ldrb.w	r4, [ip]
 801401e:	f100 0c02 	add.w	ip, r0, #2
 8014022:	2b00      	cmp	r3, #0
 8014024:	d05d      	beq.n	80140e2 <_strtol_l.isra.0+0xfe>
 8014026:	2b10      	cmp	r3, #16
 8014028:	d10c      	bne.n	8014044 <_strtol_l.isra.0+0x60>
 801402a:	2c30      	cmp	r4, #48	; 0x30
 801402c:	d10a      	bne.n	8014044 <_strtol_l.isra.0+0x60>
 801402e:	f89c 0000 	ldrb.w	r0, [ip]
 8014032:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014036:	2858      	cmp	r0, #88	; 0x58
 8014038:	d14e      	bne.n	80140d8 <_strtol_l.isra.0+0xf4>
 801403a:	2310      	movs	r3, #16
 801403c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014040:	f10c 0c02 	add.w	ip, ip, #2
 8014044:	2500      	movs	r5, #0
 8014046:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801404a:	3f01      	subs	r7, #1
 801404c:	fbb7 f9f3 	udiv	r9, r7, r3
 8014050:	4628      	mov	r0, r5
 8014052:	fb03 7a19 	mls	sl, r3, r9, r7
 8014056:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801405a:	2e09      	cmp	r6, #9
 801405c:	d818      	bhi.n	8014090 <_strtol_l.isra.0+0xac>
 801405e:	4634      	mov	r4, r6
 8014060:	42a3      	cmp	r3, r4
 8014062:	dd24      	ble.n	80140ae <_strtol_l.isra.0+0xca>
 8014064:	2d00      	cmp	r5, #0
 8014066:	db1f      	blt.n	80140a8 <_strtol_l.isra.0+0xc4>
 8014068:	4581      	cmp	r9, r0
 801406a:	d31d      	bcc.n	80140a8 <_strtol_l.isra.0+0xc4>
 801406c:	d101      	bne.n	8014072 <_strtol_l.isra.0+0x8e>
 801406e:	45a2      	cmp	sl, r4
 8014070:	db1a      	blt.n	80140a8 <_strtol_l.isra.0+0xc4>
 8014072:	2501      	movs	r5, #1
 8014074:	fb00 4003 	mla	r0, r0, r3, r4
 8014078:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801407c:	e7eb      	b.n	8014056 <_strtol_l.isra.0+0x72>
 801407e:	2c2b      	cmp	r4, #43	; 0x2b
 8014080:	bf08      	it	eq
 8014082:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014086:	46a8      	mov	r8, r5
 8014088:	bf08      	it	eq
 801408a:	f100 0c02 	addeq.w	ip, r0, #2
 801408e:	e7c8      	b.n	8014022 <_strtol_l.isra.0+0x3e>
 8014090:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014094:	2e19      	cmp	r6, #25
 8014096:	d801      	bhi.n	801409c <_strtol_l.isra.0+0xb8>
 8014098:	3c37      	subs	r4, #55	; 0x37
 801409a:	e7e1      	b.n	8014060 <_strtol_l.isra.0+0x7c>
 801409c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80140a0:	2e19      	cmp	r6, #25
 80140a2:	d804      	bhi.n	80140ae <_strtol_l.isra.0+0xca>
 80140a4:	3c57      	subs	r4, #87	; 0x57
 80140a6:	e7db      	b.n	8014060 <_strtol_l.isra.0+0x7c>
 80140a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80140ac:	e7e4      	b.n	8014078 <_strtol_l.isra.0+0x94>
 80140ae:	2d00      	cmp	r5, #0
 80140b0:	da08      	bge.n	80140c4 <_strtol_l.isra.0+0xe0>
 80140b2:	2322      	movs	r3, #34	; 0x22
 80140b4:	4638      	mov	r0, r7
 80140b6:	f8ce 3000 	str.w	r3, [lr]
 80140ba:	2a00      	cmp	r2, #0
 80140bc:	d09e      	beq.n	8013ffc <_strtol_l.isra.0+0x18>
 80140be:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80140c2:	e007      	b.n	80140d4 <_strtol_l.isra.0+0xf0>
 80140c4:	f1b8 0f00 	cmp.w	r8, #0
 80140c8:	d000      	beq.n	80140cc <_strtol_l.isra.0+0xe8>
 80140ca:	4240      	negs	r0, r0
 80140cc:	2a00      	cmp	r2, #0
 80140ce:	d095      	beq.n	8013ffc <_strtol_l.isra.0+0x18>
 80140d0:	2d00      	cmp	r5, #0
 80140d2:	d1f4      	bne.n	80140be <_strtol_l.isra.0+0xda>
 80140d4:	6011      	str	r1, [r2, #0]
 80140d6:	e791      	b.n	8013ffc <_strtol_l.isra.0+0x18>
 80140d8:	2430      	movs	r4, #48	; 0x30
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d1b2      	bne.n	8014044 <_strtol_l.isra.0+0x60>
 80140de:	2308      	movs	r3, #8
 80140e0:	e7b0      	b.n	8014044 <_strtol_l.isra.0+0x60>
 80140e2:	2c30      	cmp	r4, #48	; 0x30
 80140e4:	d0a3      	beq.n	801402e <_strtol_l.isra.0+0x4a>
 80140e6:	230a      	movs	r3, #10
 80140e8:	e7ac      	b.n	8014044 <_strtol_l.isra.0+0x60>
 80140ea:	bf00      	nop
 80140ec:	080178b9 	.word	0x080178b9

080140f0 <_strtol_r>:
 80140f0:	f7ff bf78 	b.w	8013fe4 <_strtol_l.isra.0>

080140f4 <_write_r>:
 80140f4:	b538      	push	{r3, r4, r5, lr}
 80140f6:	4604      	mov	r4, r0
 80140f8:	4608      	mov	r0, r1
 80140fa:	4611      	mov	r1, r2
 80140fc:	2200      	movs	r2, #0
 80140fe:	4d05      	ldr	r5, [pc, #20]	; (8014114 <_write_r+0x20>)
 8014100:	602a      	str	r2, [r5, #0]
 8014102:	461a      	mov	r2, r3
 8014104:	f7ef feb8 	bl	8003e78 <_write>
 8014108:	1c43      	adds	r3, r0, #1
 801410a:	d102      	bne.n	8014112 <_write_r+0x1e>
 801410c:	682b      	ldr	r3, [r5, #0]
 801410e:	b103      	cbz	r3, 8014112 <_write_r+0x1e>
 8014110:	6023      	str	r3, [r4, #0]
 8014112:	bd38      	pop	{r3, r4, r5, pc}
 8014114:	20001d5c 	.word	0x20001d5c

08014118 <_close_r>:
 8014118:	b538      	push	{r3, r4, r5, lr}
 801411a:	2300      	movs	r3, #0
 801411c:	4d05      	ldr	r5, [pc, #20]	; (8014134 <_close_r+0x1c>)
 801411e:	4604      	mov	r4, r0
 8014120:	4608      	mov	r0, r1
 8014122:	602b      	str	r3, [r5, #0]
 8014124:	f7ef fec4 	bl	8003eb0 <_close>
 8014128:	1c43      	adds	r3, r0, #1
 801412a:	d102      	bne.n	8014132 <_close_r+0x1a>
 801412c:	682b      	ldr	r3, [r5, #0]
 801412e:	b103      	cbz	r3, 8014132 <_close_r+0x1a>
 8014130:	6023      	str	r3, [r4, #0]
 8014132:	bd38      	pop	{r3, r4, r5, pc}
 8014134:	20001d5c 	.word	0x20001d5c

08014138 <quorem>:
 8014138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413c:	6903      	ldr	r3, [r0, #16]
 801413e:	690c      	ldr	r4, [r1, #16]
 8014140:	4607      	mov	r7, r0
 8014142:	42a3      	cmp	r3, r4
 8014144:	f2c0 8083 	blt.w	801424e <quorem+0x116>
 8014148:	3c01      	subs	r4, #1
 801414a:	f100 0514 	add.w	r5, r0, #20
 801414e:	f101 0814 	add.w	r8, r1, #20
 8014152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801415c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014160:	3301      	adds	r3, #1
 8014162:	429a      	cmp	r2, r3
 8014164:	fbb2 f6f3 	udiv	r6, r2, r3
 8014168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801416c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014170:	d332      	bcc.n	80141d8 <quorem+0xa0>
 8014172:	f04f 0e00 	mov.w	lr, #0
 8014176:	4640      	mov	r0, r8
 8014178:	46ac      	mov	ip, r5
 801417a:	46f2      	mov	sl, lr
 801417c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014180:	b293      	uxth	r3, r2
 8014182:	fb06 e303 	mla	r3, r6, r3, lr
 8014186:	0c12      	lsrs	r2, r2, #16
 8014188:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801418c:	fb06 e202 	mla	r2, r6, r2, lr
 8014190:	b29b      	uxth	r3, r3
 8014192:	ebaa 0303 	sub.w	r3, sl, r3
 8014196:	f8dc a000 	ldr.w	sl, [ip]
 801419a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801419e:	fa1f fa8a 	uxth.w	sl, sl
 80141a2:	4453      	add	r3, sl
 80141a4:	fa1f fa82 	uxth.w	sl, r2
 80141a8:	f8dc 2000 	ldr.w	r2, [ip]
 80141ac:	4581      	cmp	r9, r0
 80141ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80141b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141c0:	f84c 3b04 	str.w	r3, [ip], #4
 80141c4:	d2da      	bcs.n	801417c <quorem+0x44>
 80141c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80141ca:	b92b      	cbnz	r3, 80141d8 <quorem+0xa0>
 80141cc:	9b01      	ldr	r3, [sp, #4]
 80141ce:	3b04      	subs	r3, #4
 80141d0:	429d      	cmp	r5, r3
 80141d2:	461a      	mov	r2, r3
 80141d4:	d32f      	bcc.n	8014236 <quorem+0xfe>
 80141d6:	613c      	str	r4, [r7, #16]
 80141d8:	4638      	mov	r0, r7
 80141da:	f001 fc89 	bl	8015af0 <__mcmp>
 80141de:	2800      	cmp	r0, #0
 80141e0:	db25      	blt.n	801422e <quorem+0xf6>
 80141e2:	4628      	mov	r0, r5
 80141e4:	f04f 0c00 	mov.w	ip, #0
 80141e8:	3601      	adds	r6, #1
 80141ea:	f858 1b04 	ldr.w	r1, [r8], #4
 80141ee:	f8d0 e000 	ldr.w	lr, [r0]
 80141f2:	b28b      	uxth	r3, r1
 80141f4:	ebac 0303 	sub.w	r3, ip, r3
 80141f8:	fa1f f28e 	uxth.w	r2, lr
 80141fc:	4413      	add	r3, r2
 80141fe:	0c0a      	lsrs	r2, r1, #16
 8014200:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014208:	b29b      	uxth	r3, r3
 801420a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801420e:	45c1      	cmp	r9, r8
 8014210:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014214:	f840 3b04 	str.w	r3, [r0], #4
 8014218:	d2e7      	bcs.n	80141ea <quorem+0xb2>
 801421a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801421e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014222:	b922      	cbnz	r2, 801422e <quorem+0xf6>
 8014224:	3b04      	subs	r3, #4
 8014226:	429d      	cmp	r5, r3
 8014228:	461a      	mov	r2, r3
 801422a:	d30a      	bcc.n	8014242 <quorem+0x10a>
 801422c:	613c      	str	r4, [r7, #16]
 801422e:	4630      	mov	r0, r6
 8014230:	b003      	add	sp, #12
 8014232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014236:	6812      	ldr	r2, [r2, #0]
 8014238:	3b04      	subs	r3, #4
 801423a:	2a00      	cmp	r2, #0
 801423c:	d1cb      	bne.n	80141d6 <quorem+0x9e>
 801423e:	3c01      	subs	r4, #1
 8014240:	e7c6      	b.n	80141d0 <quorem+0x98>
 8014242:	6812      	ldr	r2, [r2, #0]
 8014244:	3b04      	subs	r3, #4
 8014246:	2a00      	cmp	r2, #0
 8014248:	d1f0      	bne.n	801422c <quorem+0xf4>
 801424a:	3c01      	subs	r4, #1
 801424c:	e7eb      	b.n	8014226 <quorem+0xee>
 801424e:	2000      	movs	r0, #0
 8014250:	e7ee      	b.n	8014230 <quorem+0xf8>
 8014252:	0000      	movs	r0, r0
 8014254:	0000      	movs	r0, r0
	...

08014258 <_dtoa_r>:
 8014258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425c:	4616      	mov	r6, r2
 801425e:	461f      	mov	r7, r3
 8014260:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014262:	b099      	sub	sp, #100	; 0x64
 8014264:	4605      	mov	r5, r0
 8014266:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801426a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801426e:	b974      	cbnz	r4, 801428e <_dtoa_r+0x36>
 8014270:	2010      	movs	r0, #16
 8014272:	f7fe f81f 	bl	80122b4 <malloc>
 8014276:	4602      	mov	r2, r0
 8014278:	6268      	str	r0, [r5, #36]	; 0x24
 801427a:	b920      	cbnz	r0, 8014286 <_dtoa_r+0x2e>
 801427c:	21ea      	movs	r1, #234	; 0xea
 801427e:	4bae      	ldr	r3, [pc, #696]	; (8014538 <_dtoa_r+0x2e0>)
 8014280:	48ae      	ldr	r0, [pc, #696]	; (801453c <_dtoa_r+0x2e4>)
 8014282:	f002 fbcb 	bl	8016a1c <__assert_func>
 8014286:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801428a:	6004      	str	r4, [r0, #0]
 801428c:	60c4      	str	r4, [r0, #12]
 801428e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014290:	6819      	ldr	r1, [r3, #0]
 8014292:	b151      	cbz	r1, 80142aa <_dtoa_r+0x52>
 8014294:	685a      	ldr	r2, [r3, #4]
 8014296:	2301      	movs	r3, #1
 8014298:	4093      	lsls	r3, r2
 801429a:	604a      	str	r2, [r1, #4]
 801429c:	608b      	str	r3, [r1, #8]
 801429e:	4628      	mov	r0, r5
 80142a0:	f001 f9a2 	bl	80155e8 <_Bfree>
 80142a4:	2200      	movs	r2, #0
 80142a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80142a8:	601a      	str	r2, [r3, #0]
 80142aa:	1e3b      	subs	r3, r7, #0
 80142ac:	bfaf      	iteee	ge
 80142ae:	2300      	movge	r3, #0
 80142b0:	2201      	movlt	r2, #1
 80142b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80142b6:	9305      	strlt	r3, [sp, #20]
 80142b8:	bfa8      	it	ge
 80142ba:	f8c8 3000 	strge.w	r3, [r8]
 80142be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80142c2:	4b9f      	ldr	r3, [pc, #636]	; (8014540 <_dtoa_r+0x2e8>)
 80142c4:	bfb8      	it	lt
 80142c6:	f8c8 2000 	strlt.w	r2, [r8]
 80142ca:	ea33 0309 	bics.w	r3, r3, r9
 80142ce:	d119      	bne.n	8014304 <_dtoa_r+0xac>
 80142d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80142d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80142d6:	6013      	str	r3, [r2, #0]
 80142d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142dc:	4333      	orrs	r3, r6
 80142de:	f000 8580 	beq.w	8014de2 <_dtoa_r+0xb8a>
 80142e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80142e4:	b953      	cbnz	r3, 80142fc <_dtoa_r+0xa4>
 80142e6:	4b97      	ldr	r3, [pc, #604]	; (8014544 <_dtoa_r+0x2ec>)
 80142e8:	e022      	b.n	8014330 <_dtoa_r+0xd8>
 80142ea:	4b97      	ldr	r3, [pc, #604]	; (8014548 <_dtoa_r+0x2f0>)
 80142ec:	9308      	str	r3, [sp, #32]
 80142ee:	3308      	adds	r3, #8
 80142f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80142f2:	6013      	str	r3, [r2, #0]
 80142f4:	9808      	ldr	r0, [sp, #32]
 80142f6:	b019      	add	sp, #100	; 0x64
 80142f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fc:	4b91      	ldr	r3, [pc, #580]	; (8014544 <_dtoa_r+0x2ec>)
 80142fe:	9308      	str	r3, [sp, #32]
 8014300:	3303      	adds	r3, #3
 8014302:	e7f5      	b.n	80142f0 <_dtoa_r+0x98>
 8014304:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014308:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801430c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014310:	2200      	movs	r2, #0
 8014312:	2300      	movs	r3, #0
 8014314:	f7ec fb60 	bl	80009d8 <__aeabi_dcmpeq>
 8014318:	4680      	mov	r8, r0
 801431a:	b158      	cbz	r0, 8014334 <_dtoa_r+0xdc>
 801431c:	2301      	movs	r3, #1
 801431e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014320:	6013      	str	r3, [r2, #0]
 8014322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 8559 	beq.w	8014ddc <_dtoa_r+0xb84>
 801432a:	4888      	ldr	r0, [pc, #544]	; (801454c <_dtoa_r+0x2f4>)
 801432c:	6018      	str	r0, [r3, #0]
 801432e:	1e43      	subs	r3, r0, #1
 8014330:	9308      	str	r3, [sp, #32]
 8014332:	e7df      	b.n	80142f4 <_dtoa_r+0x9c>
 8014334:	ab16      	add	r3, sp, #88	; 0x58
 8014336:	9301      	str	r3, [sp, #4]
 8014338:	ab17      	add	r3, sp, #92	; 0x5c
 801433a:	9300      	str	r3, [sp, #0]
 801433c:	4628      	mov	r0, r5
 801433e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014342:	f001 fcfb 	bl	8015d3c <__d2b>
 8014346:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801434a:	4682      	mov	sl, r0
 801434c:	2c00      	cmp	r4, #0
 801434e:	d07e      	beq.n	801444e <_dtoa_r+0x1f6>
 8014350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014356:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801435a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801435e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014362:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014366:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801436a:	2200      	movs	r2, #0
 801436c:	4b78      	ldr	r3, [pc, #480]	; (8014550 <_dtoa_r+0x2f8>)
 801436e:	f7eb ff13 	bl	8000198 <__aeabi_dsub>
 8014372:	a36b      	add	r3, pc, #428	; (adr r3, 8014520 <_dtoa_r+0x2c8>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014378:	f7ec f8c6 	bl	8000508 <__aeabi_dmul>
 801437c:	a36a      	add	r3, pc, #424	; (adr r3, 8014528 <_dtoa_r+0x2d0>)
 801437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014382:	f7eb ff0b 	bl	800019c <__adddf3>
 8014386:	4606      	mov	r6, r0
 8014388:	4620      	mov	r0, r4
 801438a:	460f      	mov	r7, r1
 801438c:	f7ec f852 	bl	8000434 <__aeabi_i2d>
 8014390:	a367      	add	r3, pc, #412	; (adr r3, 8014530 <_dtoa_r+0x2d8>)
 8014392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014396:	f7ec f8b7 	bl	8000508 <__aeabi_dmul>
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	4630      	mov	r0, r6
 80143a0:	4639      	mov	r1, r7
 80143a2:	f7eb fefb 	bl	800019c <__adddf3>
 80143a6:	4606      	mov	r6, r0
 80143a8:	460f      	mov	r7, r1
 80143aa:	f7ec fb5d 	bl	8000a68 <__aeabi_d2iz>
 80143ae:	2200      	movs	r2, #0
 80143b0:	4681      	mov	r9, r0
 80143b2:	2300      	movs	r3, #0
 80143b4:	4630      	mov	r0, r6
 80143b6:	4639      	mov	r1, r7
 80143b8:	f7ec fb18 	bl	80009ec <__aeabi_dcmplt>
 80143bc:	b148      	cbz	r0, 80143d2 <_dtoa_r+0x17a>
 80143be:	4648      	mov	r0, r9
 80143c0:	f7ec f838 	bl	8000434 <__aeabi_i2d>
 80143c4:	4632      	mov	r2, r6
 80143c6:	463b      	mov	r3, r7
 80143c8:	f7ec fb06 	bl	80009d8 <__aeabi_dcmpeq>
 80143cc:	b908      	cbnz	r0, 80143d2 <_dtoa_r+0x17a>
 80143ce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80143d2:	f1b9 0f16 	cmp.w	r9, #22
 80143d6:	d857      	bhi.n	8014488 <_dtoa_r+0x230>
 80143d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80143dc:	4b5d      	ldr	r3, [pc, #372]	; (8014554 <_dtoa_r+0x2fc>)
 80143de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80143e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e6:	f7ec fb01 	bl	80009ec <__aeabi_dcmplt>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d04e      	beq.n	801448c <_dtoa_r+0x234>
 80143ee:	2300      	movs	r3, #0
 80143f0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80143f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80143f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80143f8:	1b1c      	subs	r4, r3, r4
 80143fa:	1e63      	subs	r3, r4, #1
 80143fc:	9309      	str	r3, [sp, #36]	; 0x24
 80143fe:	bf49      	itett	mi
 8014400:	f1c4 0301 	rsbmi	r3, r4, #1
 8014404:	2300      	movpl	r3, #0
 8014406:	9306      	strmi	r3, [sp, #24]
 8014408:	2300      	movmi	r3, #0
 801440a:	bf54      	ite	pl
 801440c:	9306      	strpl	r3, [sp, #24]
 801440e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014410:	f1b9 0f00 	cmp.w	r9, #0
 8014414:	db3c      	blt.n	8014490 <_dtoa_r+0x238>
 8014416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014418:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801441c:	444b      	add	r3, r9
 801441e:	9309      	str	r3, [sp, #36]	; 0x24
 8014420:	2300      	movs	r3, #0
 8014422:	930a      	str	r3, [sp, #40]	; 0x28
 8014424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014426:	2b09      	cmp	r3, #9
 8014428:	d86c      	bhi.n	8014504 <_dtoa_r+0x2ac>
 801442a:	2b05      	cmp	r3, #5
 801442c:	bfc4      	itt	gt
 801442e:	3b04      	subgt	r3, #4
 8014430:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014434:	bfc8      	it	gt
 8014436:	2400      	movgt	r4, #0
 8014438:	f1a3 0302 	sub.w	r3, r3, #2
 801443c:	bfd8      	it	le
 801443e:	2401      	movle	r4, #1
 8014440:	2b03      	cmp	r3, #3
 8014442:	f200 808b 	bhi.w	801455c <_dtoa_r+0x304>
 8014446:	e8df f003 	tbb	[pc, r3]
 801444a:	4f2d      	.short	0x4f2d
 801444c:	5b4d      	.short	0x5b4d
 801444e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014452:	441c      	add	r4, r3
 8014454:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014458:	2b20      	cmp	r3, #32
 801445a:	bfc3      	ittte	gt
 801445c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014460:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8014464:	fa09 f303 	lslgt.w	r3, r9, r3
 8014468:	f1c3 0320 	rsble	r3, r3, #32
 801446c:	bfc6      	itte	gt
 801446e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014472:	4318      	orrgt	r0, r3
 8014474:	fa06 f003 	lslle.w	r0, r6, r3
 8014478:	f7eb ffcc 	bl	8000414 <__aeabi_ui2d>
 801447c:	2301      	movs	r3, #1
 801447e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014482:	3c01      	subs	r4, #1
 8014484:	9313      	str	r3, [sp, #76]	; 0x4c
 8014486:	e770      	b.n	801436a <_dtoa_r+0x112>
 8014488:	2301      	movs	r3, #1
 801448a:	e7b3      	b.n	80143f4 <_dtoa_r+0x19c>
 801448c:	900f      	str	r0, [sp, #60]	; 0x3c
 801448e:	e7b2      	b.n	80143f6 <_dtoa_r+0x19e>
 8014490:	9b06      	ldr	r3, [sp, #24]
 8014492:	eba3 0309 	sub.w	r3, r3, r9
 8014496:	9306      	str	r3, [sp, #24]
 8014498:	f1c9 0300 	rsb	r3, r9, #0
 801449c:	930a      	str	r3, [sp, #40]	; 0x28
 801449e:	2300      	movs	r3, #0
 80144a0:	930e      	str	r3, [sp, #56]	; 0x38
 80144a2:	e7bf      	b.n	8014424 <_dtoa_r+0x1cc>
 80144a4:	2300      	movs	r3, #0
 80144a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80144a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	dc59      	bgt.n	8014562 <_dtoa_r+0x30a>
 80144ae:	f04f 0b01 	mov.w	fp, #1
 80144b2:	465b      	mov	r3, fp
 80144b4:	f8cd b008 	str.w	fp, [sp, #8]
 80144b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80144bc:	2200      	movs	r2, #0
 80144be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80144c0:	6042      	str	r2, [r0, #4]
 80144c2:	2204      	movs	r2, #4
 80144c4:	f102 0614 	add.w	r6, r2, #20
 80144c8:	429e      	cmp	r6, r3
 80144ca:	6841      	ldr	r1, [r0, #4]
 80144cc:	d94f      	bls.n	801456e <_dtoa_r+0x316>
 80144ce:	4628      	mov	r0, r5
 80144d0:	f001 f84a 	bl	8015568 <_Balloc>
 80144d4:	9008      	str	r0, [sp, #32]
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d14d      	bne.n	8014576 <_dtoa_r+0x31e>
 80144da:	4602      	mov	r2, r0
 80144dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80144e0:	4b1d      	ldr	r3, [pc, #116]	; (8014558 <_dtoa_r+0x300>)
 80144e2:	e6cd      	b.n	8014280 <_dtoa_r+0x28>
 80144e4:	2301      	movs	r3, #1
 80144e6:	e7de      	b.n	80144a6 <_dtoa_r+0x24e>
 80144e8:	2300      	movs	r3, #0
 80144ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80144ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80144ee:	eb09 0b03 	add.w	fp, r9, r3
 80144f2:	f10b 0301 	add.w	r3, fp, #1
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	9302      	str	r3, [sp, #8]
 80144fa:	bfb8      	it	lt
 80144fc:	2301      	movlt	r3, #1
 80144fe:	e7dd      	b.n	80144bc <_dtoa_r+0x264>
 8014500:	2301      	movs	r3, #1
 8014502:	e7f2      	b.n	80144ea <_dtoa_r+0x292>
 8014504:	2401      	movs	r4, #1
 8014506:	2300      	movs	r3, #0
 8014508:	940b      	str	r4, [sp, #44]	; 0x2c
 801450a:	9322      	str	r3, [sp, #136]	; 0x88
 801450c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014510:	2200      	movs	r2, #0
 8014512:	2312      	movs	r3, #18
 8014514:	f8cd b008 	str.w	fp, [sp, #8]
 8014518:	9223      	str	r2, [sp, #140]	; 0x8c
 801451a:	e7cf      	b.n	80144bc <_dtoa_r+0x264>
 801451c:	f3af 8000 	nop.w
 8014520:	636f4361 	.word	0x636f4361
 8014524:	3fd287a7 	.word	0x3fd287a7
 8014528:	8b60c8b3 	.word	0x8b60c8b3
 801452c:	3fc68a28 	.word	0x3fc68a28
 8014530:	509f79fb 	.word	0x509f79fb
 8014534:	3fd34413 	.word	0x3fd34413
 8014538:	080179c6 	.word	0x080179c6
 801453c:	080179dd 	.word	0x080179dd
 8014540:	7ff00000 	.word	0x7ff00000
 8014544:	080179c2 	.word	0x080179c2
 8014548:	080179b9 	.word	0x080179b9
 801454c:	08017c42 	.word	0x08017c42
 8014550:	3ff80000 	.word	0x3ff80000
 8014554:	08017b58 	.word	0x08017b58
 8014558:	08017a3c 	.word	0x08017a3c
 801455c:	2301      	movs	r3, #1
 801455e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014560:	e7d4      	b.n	801450c <_dtoa_r+0x2b4>
 8014562:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014566:	465b      	mov	r3, fp
 8014568:	f8cd b008 	str.w	fp, [sp, #8]
 801456c:	e7a6      	b.n	80144bc <_dtoa_r+0x264>
 801456e:	3101      	adds	r1, #1
 8014570:	6041      	str	r1, [r0, #4]
 8014572:	0052      	lsls	r2, r2, #1
 8014574:	e7a6      	b.n	80144c4 <_dtoa_r+0x26c>
 8014576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014578:	9a08      	ldr	r2, [sp, #32]
 801457a:	601a      	str	r2, [r3, #0]
 801457c:	9b02      	ldr	r3, [sp, #8]
 801457e:	2b0e      	cmp	r3, #14
 8014580:	f200 80a8 	bhi.w	80146d4 <_dtoa_r+0x47c>
 8014584:	2c00      	cmp	r4, #0
 8014586:	f000 80a5 	beq.w	80146d4 <_dtoa_r+0x47c>
 801458a:	f1b9 0f00 	cmp.w	r9, #0
 801458e:	dd34      	ble.n	80145fa <_dtoa_r+0x3a2>
 8014590:	4a9a      	ldr	r2, [pc, #616]	; (80147fc <_dtoa_r+0x5a4>)
 8014592:	f009 030f 	and.w	r3, r9, #15
 8014596:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801459a:	f419 7f80 	tst.w	r9, #256	; 0x100
 801459e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80145a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80145a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80145aa:	d016      	beq.n	80145da <_dtoa_r+0x382>
 80145ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80145b0:	4b93      	ldr	r3, [pc, #588]	; (8014800 <_dtoa_r+0x5a8>)
 80145b2:	2703      	movs	r7, #3
 80145b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145b8:	f7ec f8d0 	bl	800075c <__aeabi_ddiv>
 80145bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145c0:	f004 040f 	and.w	r4, r4, #15
 80145c4:	4e8e      	ldr	r6, [pc, #568]	; (8014800 <_dtoa_r+0x5a8>)
 80145c6:	b954      	cbnz	r4, 80145de <_dtoa_r+0x386>
 80145c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80145cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145d0:	f7ec f8c4 	bl	800075c <__aeabi_ddiv>
 80145d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145d8:	e029      	b.n	801462e <_dtoa_r+0x3d6>
 80145da:	2702      	movs	r7, #2
 80145dc:	e7f2      	b.n	80145c4 <_dtoa_r+0x36c>
 80145de:	07e1      	lsls	r1, r4, #31
 80145e0:	d508      	bpl.n	80145f4 <_dtoa_r+0x39c>
 80145e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80145e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80145ea:	f7eb ff8d 	bl	8000508 <__aeabi_dmul>
 80145ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80145f2:	3701      	adds	r7, #1
 80145f4:	1064      	asrs	r4, r4, #1
 80145f6:	3608      	adds	r6, #8
 80145f8:	e7e5      	b.n	80145c6 <_dtoa_r+0x36e>
 80145fa:	f000 80a5 	beq.w	8014748 <_dtoa_r+0x4f0>
 80145fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014602:	f1c9 0400 	rsb	r4, r9, #0
 8014606:	4b7d      	ldr	r3, [pc, #500]	; (80147fc <_dtoa_r+0x5a4>)
 8014608:	f004 020f 	and.w	r2, r4, #15
 801460c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014614:	f7eb ff78 	bl	8000508 <__aeabi_dmul>
 8014618:	2702      	movs	r7, #2
 801461a:	2300      	movs	r3, #0
 801461c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014620:	4e77      	ldr	r6, [pc, #476]	; (8014800 <_dtoa_r+0x5a8>)
 8014622:	1124      	asrs	r4, r4, #4
 8014624:	2c00      	cmp	r4, #0
 8014626:	f040 8084 	bne.w	8014732 <_dtoa_r+0x4da>
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1d2      	bne.n	80145d4 <_dtoa_r+0x37c>
 801462e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014630:	2b00      	cmp	r3, #0
 8014632:	f000 808b 	beq.w	801474c <_dtoa_r+0x4f4>
 8014636:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801463a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801463e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014642:	2200      	movs	r2, #0
 8014644:	4b6f      	ldr	r3, [pc, #444]	; (8014804 <_dtoa_r+0x5ac>)
 8014646:	f7ec f9d1 	bl	80009ec <__aeabi_dcmplt>
 801464a:	2800      	cmp	r0, #0
 801464c:	d07e      	beq.n	801474c <_dtoa_r+0x4f4>
 801464e:	9b02      	ldr	r3, [sp, #8]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d07b      	beq.n	801474c <_dtoa_r+0x4f4>
 8014654:	f1bb 0f00 	cmp.w	fp, #0
 8014658:	dd38      	ble.n	80146cc <_dtoa_r+0x474>
 801465a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801465e:	2200      	movs	r2, #0
 8014660:	4b69      	ldr	r3, [pc, #420]	; (8014808 <_dtoa_r+0x5b0>)
 8014662:	f7eb ff51 	bl	8000508 <__aeabi_dmul>
 8014666:	465c      	mov	r4, fp
 8014668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801466c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8014670:	3701      	adds	r7, #1
 8014672:	4638      	mov	r0, r7
 8014674:	f7eb fede 	bl	8000434 <__aeabi_i2d>
 8014678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801467c:	f7eb ff44 	bl	8000508 <__aeabi_dmul>
 8014680:	2200      	movs	r2, #0
 8014682:	4b62      	ldr	r3, [pc, #392]	; (801480c <_dtoa_r+0x5b4>)
 8014684:	f7eb fd8a 	bl	800019c <__adddf3>
 8014688:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801468c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014690:	9611      	str	r6, [sp, #68]	; 0x44
 8014692:	2c00      	cmp	r4, #0
 8014694:	d15d      	bne.n	8014752 <_dtoa_r+0x4fa>
 8014696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801469a:	2200      	movs	r2, #0
 801469c:	4b5c      	ldr	r3, [pc, #368]	; (8014810 <_dtoa_r+0x5b8>)
 801469e:	f7eb fd7b 	bl	8000198 <__aeabi_dsub>
 80146a2:	4602      	mov	r2, r0
 80146a4:	460b      	mov	r3, r1
 80146a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80146aa:	4633      	mov	r3, r6
 80146ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146ae:	f7ec f9bb 	bl	8000a28 <__aeabi_dcmpgt>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f040 829e 	bne.w	8014bf4 <_dtoa_r+0x99c>
 80146b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80146c2:	f7ec f993 	bl	80009ec <__aeabi_dcmplt>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	f040 8292 	bne.w	8014bf0 <_dtoa_r+0x998>
 80146cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80146d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80146d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f2c0 8153 	blt.w	8014982 <_dtoa_r+0x72a>
 80146dc:	f1b9 0f0e 	cmp.w	r9, #14
 80146e0:	f300 814f 	bgt.w	8014982 <_dtoa_r+0x72a>
 80146e4:	4b45      	ldr	r3, [pc, #276]	; (80147fc <_dtoa_r+0x5a4>)
 80146e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80146ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80146ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80146f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	f280 80db 	bge.w	80148b0 <_dtoa_r+0x658>
 80146fa:	9b02      	ldr	r3, [sp, #8]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f300 80d7 	bgt.w	80148b0 <_dtoa_r+0x658>
 8014702:	f040 8274 	bne.w	8014bee <_dtoa_r+0x996>
 8014706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801470a:	2200      	movs	r2, #0
 801470c:	4b40      	ldr	r3, [pc, #256]	; (8014810 <_dtoa_r+0x5b8>)
 801470e:	f7eb fefb 	bl	8000508 <__aeabi_dmul>
 8014712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014716:	f7ec f97d 	bl	8000a14 <__aeabi_dcmpge>
 801471a:	9c02      	ldr	r4, [sp, #8]
 801471c:	4626      	mov	r6, r4
 801471e:	2800      	cmp	r0, #0
 8014720:	f040 824a 	bne.w	8014bb8 <_dtoa_r+0x960>
 8014724:	2331      	movs	r3, #49	; 0x31
 8014726:	9f08      	ldr	r7, [sp, #32]
 8014728:	f109 0901 	add.w	r9, r9, #1
 801472c:	f807 3b01 	strb.w	r3, [r7], #1
 8014730:	e246      	b.n	8014bc0 <_dtoa_r+0x968>
 8014732:	07e2      	lsls	r2, r4, #31
 8014734:	d505      	bpl.n	8014742 <_dtoa_r+0x4ea>
 8014736:	e9d6 2300 	ldrd	r2, r3, [r6]
 801473a:	f7eb fee5 	bl	8000508 <__aeabi_dmul>
 801473e:	2301      	movs	r3, #1
 8014740:	3701      	adds	r7, #1
 8014742:	1064      	asrs	r4, r4, #1
 8014744:	3608      	adds	r6, #8
 8014746:	e76d      	b.n	8014624 <_dtoa_r+0x3cc>
 8014748:	2702      	movs	r7, #2
 801474a:	e770      	b.n	801462e <_dtoa_r+0x3d6>
 801474c:	46c8      	mov	r8, r9
 801474e:	9c02      	ldr	r4, [sp, #8]
 8014750:	e78f      	b.n	8014672 <_dtoa_r+0x41a>
 8014752:	9908      	ldr	r1, [sp, #32]
 8014754:	4b29      	ldr	r3, [pc, #164]	; (80147fc <_dtoa_r+0x5a4>)
 8014756:	4421      	add	r1, r4
 8014758:	9112      	str	r1, [sp, #72]	; 0x48
 801475a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801475c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014760:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014764:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014768:	2900      	cmp	r1, #0
 801476a:	d055      	beq.n	8014818 <_dtoa_r+0x5c0>
 801476c:	2000      	movs	r0, #0
 801476e:	4929      	ldr	r1, [pc, #164]	; (8014814 <_dtoa_r+0x5bc>)
 8014770:	f7eb fff4 	bl	800075c <__aeabi_ddiv>
 8014774:	463b      	mov	r3, r7
 8014776:	4632      	mov	r2, r6
 8014778:	f7eb fd0e 	bl	8000198 <__aeabi_dsub>
 801477c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014780:	9f08      	ldr	r7, [sp, #32]
 8014782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014786:	f7ec f96f 	bl	8000a68 <__aeabi_d2iz>
 801478a:	4604      	mov	r4, r0
 801478c:	f7eb fe52 	bl	8000434 <__aeabi_i2d>
 8014790:	4602      	mov	r2, r0
 8014792:	460b      	mov	r3, r1
 8014794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014798:	f7eb fcfe 	bl	8000198 <__aeabi_dsub>
 801479c:	4602      	mov	r2, r0
 801479e:	460b      	mov	r3, r1
 80147a0:	3430      	adds	r4, #48	; 0x30
 80147a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80147a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80147aa:	f807 4b01 	strb.w	r4, [r7], #1
 80147ae:	f7ec f91d 	bl	80009ec <__aeabi_dcmplt>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d174      	bne.n	80148a0 <_dtoa_r+0x648>
 80147b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147ba:	2000      	movs	r0, #0
 80147bc:	4911      	ldr	r1, [pc, #68]	; (8014804 <_dtoa_r+0x5ac>)
 80147be:	f7eb fceb 	bl	8000198 <__aeabi_dsub>
 80147c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80147c6:	f7ec f911 	bl	80009ec <__aeabi_dcmplt>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	f040 80b6 	bne.w	801493c <_dtoa_r+0x6e4>
 80147d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80147d2:	429f      	cmp	r7, r3
 80147d4:	f43f af7a 	beq.w	80146cc <_dtoa_r+0x474>
 80147d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80147dc:	2200      	movs	r2, #0
 80147de:	4b0a      	ldr	r3, [pc, #40]	; (8014808 <_dtoa_r+0x5b0>)
 80147e0:	f7eb fe92 	bl	8000508 <__aeabi_dmul>
 80147e4:	2200      	movs	r2, #0
 80147e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80147ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80147ee:	4b06      	ldr	r3, [pc, #24]	; (8014808 <_dtoa_r+0x5b0>)
 80147f0:	f7eb fe8a 	bl	8000508 <__aeabi_dmul>
 80147f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80147f8:	e7c3      	b.n	8014782 <_dtoa_r+0x52a>
 80147fa:	bf00      	nop
 80147fc:	08017b58 	.word	0x08017b58
 8014800:	08017b30 	.word	0x08017b30
 8014804:	3ff00000 	.word	0x3ff00000
 8014808:	40240000 	.word	0x40240000
 801480c:	401c0000 	.word	0x401c0000
 8014810:	40140000 	.word	0x40140000
 8014814:	3fe00000 	.word	0x3fe00000
 8014818:	4630      	mov	r0, r6
 801481a:	4639      	mov	r1, r7
 801481c:	f7eb fe74 	bl	8000508 <__aeabi_dmul>
 8014820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014822:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014826:	9c08      	ldr	r4, [sp, #32]
 8014828:	9314      	str	r3, [sp, #80]	; 0x50
 801482a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801482e:	f7ec f91b 	bl	8000a68 <__aeabi_d2iz>
 8014832:	9015      	str	r0, [sp, #84]	; 0x54
 8014834:	f7eb fdfe 	bl	8000434 <__aeabi_i2d>
 8014838:	4602      	mov	r2, r0
 801483a:	460b      	mov	r3, r1
 801483c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014840:	f7eb fcaa 	bl	8000198 <__aeabi_dsub>
 8014844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014846:	4606      	mov	r6, r0
 8014848:	3330      	adds	r3, #48	; 0x30
 801484a:	f804 3b01 	strb.w	r3, [r4], #1
 801484e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014850:	460f      	mov	r7, r1
 8014852:	429c      	cmp	r4, r3
 8014854:	f04f 0200 	mov.w	r2, #0
 8014858:	d124      	bne.n	80148a4 <_dtoa_r+0x64c>
 801485a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801485e:	4bb3      	ldr	r3, [pc, #716]	; (8014b2c <_dtoa_r+0x8d4>)
 8014860:	f7eb fc9c 	bl	800019c <__adddf3>
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	4630      	mov	r0, r6
 801486a:	4639      	mov	r1, r7
 801486c:	f7ec f8dc 	bl	8000a28 <__aeabi_dcmpgt>
 8014870:	2800      	cmp	r0, #0
 8014872:	d162      	bne.n	801493a <_dtoa_r+0x6e2>
 8014874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014878:	2000      	movs	r0, #0
 801487a:	49ac      	ldr	r1, [pc, #688]	; (8014b2c <_dtoa_r+0x8d4>)
 801487c:	f7eb fc8c 	bl	8000198 <__aeabi_dsub>
 8014880:	4602      	mov	r2, r0
 8014882:	460b      	mov	r3, r1
 8014884:	4630      	mov	r0, r6
 8014886:	4639      	mov	r1, r7
 8014888:	f7ec f8b0 	bl	80009ec <__aeabi_dcmplt>
 801488c:	2800      	cmp	r0, #0
 801488e:	f43f af1d 	beq.w	80146cc <_dtoa_r+0x474>
 8014892:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014894:	1e7b      	subs	r3, r7, #1
 8014896:	9314      	str	r3, [sp, #80]	; 0x50
 8014898:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801489c:	2b30      	cmp	r3, #48	; 0x30
 801489e:	d0f8      	beq.n	8014892 <_dtoa_r+0x63a>
 80148a0:	46c1      	mov	r9, r8
 80148a2:	e03a      	b.n	801491a <_dtoa_r+0x6c2>
 80148a4:	4ba2      	ldr	r3, [pc, #648]	; (8014b30 <_dtoa_r+0x8d8>)
 80148a6:	f7eb fe2f 	bl	8000508 <__aeabi_dmul>
 80148aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80148ae:	e7bc      	b.n	801482a <_dtoa_r+0x5d2>
 80148b0:	9f08      	ldr	r7, [sp, #32]
 80148b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80148ba:	f7eb ff4f 	bl	800075c <__aeabi_ddiv>
 80148be:	f7ec f8d3 	bl	8000a68 <__aeabi_d2iz>
 80148c2:	4604      	mov	r4, r0
 80148c4:	f7eb fdb6 	bl	8000434 <__aeabi_i2d>
 80148c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148cc:	f7eb fe1c 	bl	8000508 <__aeabi_dmul>
 80148d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80148d4:	460b      	mov	r3, r1
 80148d6:	4602      	mov	r2, r0
 80148d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80148dc:	f7eb fc5c 	bl	8000198 <__aeabi_dsub>
 80148e0:	f807 6b01 	strb.w	r6, [r7], #1
 80148e4:	9e08      	ldr	r6, [sp, #32]
 80148e6:	9b02      	ldr	r3, [sp, #8]
 80148e8:	1bbe      	subs	r6, r7, r6
 80148ea:	42b3      	cmp	r3, r6
 80148ec:	d13a      	bne.n	8014964 <_dtoa_r+0x70c>
 80148ee:	4602      	mov	r2, r0
 80148f0:	460b      	mov	r3, r1
 80148f2:	f7eb fc53 	bl	800019c <__adddf3>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80148fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014902:	f7ec f891 	bl	8000a28 <__aeabi_dcmpgt>
 8014906:	bb58      	cbnz	r0, 8014960 <_dtoa_r+0x708>
 8014908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801490c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014910:	f7ec f862 	bl	80009d8 <__aeabi_dcmpeq>
 8014914:	b108      	cbz	r0, 801491a <_dtoa_r+0x6c2>
 8014916:	07e1      	lsls	r1, r4, #31
 8014918:	d422      	bmi.n	8014960 <_dtoa_r+0x708>
 801491a:	4628      	mov	r0, r5
 801491c:	4651      	mov	r1, sl
 801491e:	f000 fe63 	bl	80155e8 <_Bfree>
 8014922:	2300      	movs	r3, #0
 8014924:	703b      	strb	r3, [r7, #0]
 8014926:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014928:	f109 0001 	add.w	r0, r9, #1
 801492c:	6018      	str	r0, [r3, #0]
 801492e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014930:	2b00      	cmp	r3, #0
 8014932:	f43f acdf 	beq.w	80142f4 <_dtoa_r+0x9c>
 8014936:	601f      	str	r7, [r3, #0]
 8014938:	e4dc      	b.n	80142f4 <_dtoa_r+0x9c>
 801493a:	4627      	mov	r7, r4
 801493c:	463b      	mov	r3, r7
 801493e:	461f      	mov	r7, r3
 8014940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014944:	2a39      	cmp	r2, #57	; 0x39
 8014946:	d107      	bne.n	8014958 <_dtoa_r+0x700>
 8014948:	9a08      	ldr	r2, [sp, #32]
 801494a:	429a      	cmp	r2, r3
 801494c:	d1f7      	bne.n	801493e <_dtoa_r+0x6e6>
 801494e:	2230      	movs	r2, #48	; 0x30
 8014950:	9908      	ldr	r1, [sp, #32]
 8014952:	f108 0801 	add.w	r8, r8, #1
 8014956:	700a      	strb	r2, [r1, #0]
 8014958:	781a      	ldrb	r2, [r3, #0]
 801495a:	3201      	adds	r2, #1
 801495c:	701a      	strb	r2, [r3, #0]
 801495e:	e79f      	b.n	80148a0 <_dtoa_r+0x648>
 8014960:	46c8      	mov	r8, r9
 8014962:	e7eb      	b.n	801493c <_dtoa_r+0x6e4>
 8014964:	2200      	movs	r2, #0
 8014966:	4b72      	ldr	r3, [pc, #456]	; (8014b30 <_dtoa_r+0x8d8>)
 8014968:	f7eb fdce 	bl	8000508 <__aeabi_dmul>
 801496c:	4602      	mov	r2, r0
 801496e:	460b      	mov	r3, r1
 8014970:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014974:	2200      	movs	r2, #0
 8014976:	2300      	movs	r3, #0
 8014978:	f7ec f82e 	bl	80009d8 <__aeabi_dcmpeq>
 801497c:	2800      	cmp	r0, #0
 801497e:	d098      	beq.n	80148b2 <_dtoa_r+0x65a>
 8014980:	e7cb      	b.n	801491a <_dtoa_r+0x6c2>
 8014982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014984:	2a00      	cmp	r2, #0
 8014986:	f000 80cd 	beq.w	8014b24 <_dtoa_r+0x8cc>
 801498a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801498c:	2a01      	cmp	r2, #1
 801498e:	f300 80af 	bgt.w	8014af0 <_dtoa_r+0x898>
 8014992:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014994:	2a00      	cmp	r2, #0
 8014996:	f000 80a7 	beq.w	8014ae8 <_dtoa_r+0x890>
 801499a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801499e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80149a0:	9f06      	ldr	r7, [sp, #24]
 80149a2:	9a06      	ldr	r2, [sp, #24]
 80149a4:	2101      	movs	r1, #1
 80149a6:	441a      	add	r2, r3
 80149a8:	9206      	str	r2, [sp, #24]
 80149aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149ac:	4628      	mov	r0, r5
 80149ae:	441a      	add	r2, r3
 80149b0:	9209      	str	r2, [sp, #36]	; 0x24
 80149b2:	f000 ff1d 	bl	80157f0 <__i2b>
 80149b6:	4606      	mov	r6, r0
 80149b8:	2f00      	cmp	r7, #0
 80149ba:	dd0c      	ble.n	80149d6 <_dtoa_r+0x77e>
 80149bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149be:	2b00      	cmp	r3, #0
 80149c0:	dd09      	ble.n	80149d6 <_dtoa_r+0x77e>
 80149c2:	42bb      	cmp	r3, r7
 80149c4:	bfa8      	it	ge
 80149c6:	463b      	movge	r3, r7
 80149c8:	9a06      	ldr	r2, [sp, #24]
 80149ca:	1aff      	subs	r7, r7, r3
 80149cc:	1ad2      	subs	r2, r2, r3
 80149ce:	9206      	str	r2, [sp, #24]
 80149d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	9309      	str	r3, [sp, #36]	; 0x24
 80149d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149d8:	b1f3      	cbz	r3, 8014a18 <_dtoa_r+0x7c0>
 80149da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f000 80a9 	beq.w	8014b34 <_dtoa_r+0x8dc>
 80149e2:	2c00      	cmp	r4, #0
 80149e4:	dd10      	ble.n	8014a08 <_dtoa_r+0x7b0>
 80149e6:	4631      	mov	r1, r6
 80149e8:	4622      	mov	r2, r4
 80149ea:	4628      	mov	r0, r5
 80149ec:	f000 ffba 	bl	8015964 <__pow5mult>
 80149f0:	4652      	mov	r2, sl
 80149f2:	4601      	mov	r1, r0
 80149f4:	4606      	mov	r6, r0
 80149f6:	4628      	mov	r0, r5
 80149f8:	f000 ff10 	bl	801581c <__multiply>
 80149fc:	4680      	mov	r8, r0
 80149fe:	4651      	mov	r1, sl
 8014a00:	4628      	mov	r0, r5
 8014a02:	f000 fdf1 	bl	80155e8 <_Bfree>
 8014a06:	46c2      	mov	sl, r8
 8014a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a0a:	1b1a      	subs	r2, r3, r4
 8014a0c:	d004      	beq.n	8014a18 <_dtoa_r+0x7c0>
 8014a0e:	4651      	mov	r1, sl
 8014a10:	4628      	mov	r0, r5
 8014a12:	f000 ffa7 	bl	8015964 <__pow5mult>
 8014a16:	4682      	mov	sl, r0
 8014a18:	2101      	movs	r1, #1
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f000 fee8 	bl	80157f0 <__i2b>
 8014a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a22:	4604      	mov	r4, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	f340 8087 	ble.w	8014b38 <_dtoa_r+0x8e0>
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	4601      	mov	r1, r0
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f000 ff98 	bl	8015964 <__pow5mult>
 8014a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014a36:	4604      	mov	r4, r0
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	f340 8080 	ble.w	8014b3e <_dtoa_r+0x8e6>
 8014a3e:	f04f 0800 	mov.w	r8, #0
 8014a42:	6923      	ldr	r3, [r4, #16]
 8014a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014a48:	6918      	ldr	r0, [r3, #16]
 8014a4a:	f000 fe83 	bl	8015754 <__hi0bits>
 8014a4e:	f1c0 0020 	rsb	r0, r0, #32
 8014a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a54:	4418      	add	r0, r3
 8014a56:	f010 001f 	ands.w	r0, r0, #31
 8014a5a:	f000 8092 	beq.w	8014b82 <_dtoa_r+0x92a>
 8014a5e:	f1c0 0320 	rsb	r3, r0, #32
 8014a62:	2b04      	cmp	r3, #4
 8014a64:	f340 808a 	ble.w	8014b7c <_dtoa_r+0x924>
 8014a68:	f1c0 001c 	rsb	r0, r0, #28
 8014a6c:	9b06      	ldr	r3, [sp, #24]
 8014a6e:	4407      	add	r7, r0
 8014a70:	4403      	add	r3, r0
 8014a72:	9306      	str	r3, [sp, #24]
 8014a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a76:	4403      	add	r3, r0
 8014a78:	9309      	str	r3, [sp, #36]	; 0x24
 8014a7a:	9b06      	ldr	r3, [sp, #24]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	dd05      	ble.n	8014a8c <_dtoa_r+0x834>
 8014a80:	4651      	mov	r1, sl
 8014a82:	461a      	mov	r2, r3
 8014a84:	4628      	mov	r0, r5
 8014a86:	f000 ffc7 	bl	8015a18 <__lshift>
 8014a8a:	4682      	mov	sl, r0
 8014a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	dd05      	ble.n	8014a9e <_dtoa_r+0x846>
 8014a92:	4621      	mov	r1, r4
 8014a94:	461a      	mov	r2, r3
 8014a96:	4628      	mov	r0, r5
 8014a98:	f000 ffbe 	bl	8015a18 <__lshift>
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d070      	beq.n	8014b86 <_dtoa_r+0x92e>
 8014aa4:	4621      	mov	r1, r4
 8014aa6:	4650      	mov	r0, sl
 8014aa8:	f001 f822 	bl	8015af0 <__mcmp>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	da6a      	bge.n	8014b86 <_dtoa_r+0x92e>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	4651      	mov	r1, sl
 8014ab4:	220a      	movs	r2, #10
 8014ab6:	4628      	mov	r0, r5
 8014ab8:	f000 fdb8 	bl	801562c <__multadd>
 8014abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014abe:	4682      	mov	sl, r0
 8014ac0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f000 8193 	beq.w	8014df0 <_dtoa_r+0xb98>
 8014aca:	4631      	mov	r1, r6
 8014acc:	2300      	movs	r3, #0
 8014ace:	220a      	movs	r2, #10
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	f000 fdab 	bl	801562c <__multadd>
 8014ad6:	f1bb 0f00 	cmp.w	fp, #0
 8014ada:	4606      	mov	r6, r0
 8014adc:	f300 8093 	bgt.w	8014c06 <_dtoa_r+0x9ae>
 8014ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ae2:	2b02      	cmp	r3, #2
 8014ae4:	dc57      	bgt.n	8014b96 <_dtoa_r+0x93e>
 8014ae6:	e08e      	b.n	8014c06 <_dtoa_r+0x9ae>
 8014ae8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014aea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014aee:	e756      	b.n	801499e <_dtoa_r+0x746>
 8014af0:	9b02      	ldr	r3, [sp, #8]
 8014af2:	1e5c      	subs	r4, r3, #1
 8014af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014af6:	42a3      	cmp	r3, r4
 8014af8:	bfb7      	itett	lt
 8014afa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014afc:	1b1c      	subge	r4, r3, r4
 8014afe:	1ae2      	sublt	r2, r4, r3
 8014b00:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014b02:	bfbe      	ittt	lt
 8014b04:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014b06:	189b      	addlt	r3, r3, r2
 8014b08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b0a:	9b02      	ldr	r3, [sp, #8]
 8014b0c:	bfb8      	it	lt
 8014b0e:	2400      	movlt	r4, #0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	bfbb      	ittet	lt
 8014b14:	9b06      	ldrlt	r3, [sp, #24]
 8014b16:	9a02      	ldrlt	r2, [sp, #8]
 8014b18:	9f06      	ldrge	r7, [sp, #24]
 8014b1a:	1a9f      	sublt	r7, r3, r2
 8014b1c:	bfac      	ite	ge
 8014b1e:	9b02      	ldrge	r3, [sp, #8]
 8014b20:	2300      	movlt	r3, #0
 8014b22:	e73e      	b.n	80149a2 <_dtoa_r+0x74a>
 8014b24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014b26:	9f06      	ldr	r7, [sp, #24]
 8014b28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014b2a:	e745      	b.n	80149b8 <_dtoa_r+0x760>
 8014b2c:	3fe00000 	.word	0x3fe00000
 8014b30:	40240000 	.word	0x40240000
 8014b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b36:	e76a      	b.n	8014a0e <_dtoa_r+0x7b6>
 8014b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	dc19      	bgt.n	8014b72 <_dtoa_r+0x91a>
 8014b3e:	9b04      	ldr	r3, [sp, #16]
 8014b40:	b9bb      	cbnz	r3, 8014b72 <_dtoa_r+0x91a>
 8014b42:	9b05      	ldr	r3, [sp, #20]
 8014b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b48:	b99b      	cbnz	r3, 8014b72 <_dtoa_r+0x91a>
 8014b4a:	9b05      	ldr	r3, [sp, #20]
 8014b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b50:	0d1b      	lsrs	r3, r3, #20
 8014b52:	051b      	lsls	r3, r3, #20
 8014b54:	b183      	cbz	r3, 8014b78 <_dtoa_r+0x920>
 8014b56:	f04f 0801 	mov.w	r8, #1
 8014b5a:	9b06      	ldr	r3, [sp, #24]
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	9306      	str	r3, [sp, #24]
 8014b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b62:	3301      	adds	r3, #1
 8014b64:	9309      	str	r3, [sp, #36]	; 0x24
 8014b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f47f af6a 	bne.w	8014a42 <_dtoa_r+0x7ea>
 8014b6e:	2001      	movs	r0, #1
 8014b70:	e76f      	b.n	8014a52 <_dtoa_r+0x7fa>
 8014b72:	f04f 0800 	mov.w	r8, #0
 8014b76:	e7f6      	b.n	8014b66 <_dtoa_r+0x90e>
 8014b78:	4698      	mov	r8, r3
 8014b7a:	e7f4      	b.n	8014b66 <_dtoa_r+0x90e>
 8014b7c:	f43f af7d 	beq.w	8014a7a <_dtoa_r+0x822>
 8014b80:	4618      	mov	r0, r3
 8014b82:	301c      	adds	r0, #28
 8014b84:	e772      	b.n	8014a6c <_dtoa_r+0x814>
 8014b86:	9b02      	ldr	r3, [sp, #8]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	dc36      	bgt.n	8014bfa <_dtoa_r+0x9a2>
 8014b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b8e:	2b02      	cmp	r3, #2
 8014b90:	dd33      	ble.n	8014bfa <_dtoa_r+0x9a2>
 8014b92:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014b96:	f1bb 0f00 	cmp.w	fp, #0
 8014b9a:	d10d      	bne.n	8014bb8 <_dtoa_r+0x960>
 8014b9c:	4621      	mov	r1, r4
 8014b9e:	465b      	mov	r3, fp
 8014ba0:	2205      	movs	r2, #5
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f000 fd42 	bl	801562c <__multadd>
 8014ba8:	4601      	mov	r1, r0
 8014baa:	4604      	mov	r4, r0
 8014bac:	4650      	mov	r0, sl
 8014bae:	f000 ff9f 	bl	8015af0 <__mcmp>
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	f73f adb6 	bgt.w	8014724 <_dtoa_r+0x4cc>
 8014bb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bba:	9f08      	ldr	r7, [sp, #32]
 8014bbc:	ea6f 0903 	mvn.w	r9, r3
 8014bc0:	f04f 0800 	mov.w	r8, #0
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	f000 fd0e 	bl	80155e8 <_Bfree>
 8014bcc:	2e00      	cmp	r6, #0
 8014bce:	f43f aea4 	beq.w	801491a <_dtoa_r+0x6c2>
 8014bd2:	f1b8 0f00 	cmp.w	r8, #0
 8014bd6:	d005      	beq.n	8014be4 <_dtoa_r+0x98c>
 8014bd8:	45b0      	cmp	r8, r6
 8014bda:	d003      	beq.n	8014be4 <_dtoa_r+0x98c>
 8014bdc:	4641      	mov	r1, r8
 8014bde:	4628      	mov	r0, r5
 8014be0:	f000 fd02 	bl	80155e8 <_Bfree>
 8014be4:	4631      	mov	r1, r6
 8014be6:	4628      	mov	r0, r5
 8014be8:	f000 fcfe 	bl	80155e8 <_Bfree>
 8014bec:	e695      	b.n	801491a <_dtoa_r+0x6c2>
 8014bee:	2400      	movs	r4, #0
 8014bf0:	4626      	mov	r6, r4
 8014bf2:	e7e1      	b.n	8014bb8 <_dtoa_r+0x960>
 8014bf4:	46c1      	mov	r9, r8
 8014bf6:	4626      	mov	r6, r4
 8014bf8:	e594      	b.n	8014724 <_dtoa_r+0x4cc>
 8014bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bfc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	f000 80fc 	beq.w	8014dfe <_dtoa_r+0xba6>
 8014c06:	2f00      	cmp	r7, #0
 8014c08:	dd05      	ble.n	8014c16 <_dtoa_r+0x9be>
 8014c0a:	4631      	mov	r1, r6
 8014c0c:	463a      	mov	r2, r7
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 ff02 	bl	8015a18 <__lshift>
 8014c14:	4606      	mov	r6, r0
 8014c16:	f1b8 0f00 	cmp.w	r8, #0
 8014c1a:	d05c      	beq.n	8014cd6 <_dtoa_r+0xa7e>
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	6871      	ldr	r1, [r6, #4]
 8014c20:	f000 fca2 	bl	8015568 <_Balloc>
 8014c24:	4607      	mov	r7, r0
 8014c26:	b928      	cbnz	r0, 8014c34 <_dtoa_r+0x9dc>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014c2e:	4b7e      	ldr	r3, [pc, #504]	; (8014e28 <_dtoa_r+0xbd0>)
 8014c30:	f7ff bb26 	b.w	8014280 <_dtoa_r+0x28>
 8014c34:	6932      	ldr	r2, [r6, #16]
 8014c36:	f106 010c 	add.w	r1, r6, #12
 8014c3a:	3202      	adds	r2, #2
 8014c3c:	0092      	lsls	r2, r2, #2
 8014c3e:	300c      	adds	r0, #12
 8014c40:	f7fd fb56 	bl	80122f0 <memcpy>
 8014c44:	2201      	movs	r2, #1
 8014c46:	4639      	mov	r1, r7
 8014c48:	4628      	mov	r0, r5
 8014c4a:	f000 fee5 	bl	8015a18 <__lshift>
 8014c4e:	46b0      	mov	r8, r6
 8014c50:	4606      	mov	r6, r0
 8014c52:	9b08      	ldr	r3, [sp, #32]
 8014c54:	3301      	adds	r3, #1
 8014c56:	9302      	str	r3, [sp, #8]
 8014c58:	9b08      	ldr	r3, [sp, #32]
 8014c5a:	445b      	add	r3, fp
 8014c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8014c5e:	9b04      	ldr	r3, [sp, #16]
 8014c60:	f003 0301 	and.w	r3, r3, #1
 8014c64:	9309      	str	r3, [sp, #36]	; 0x24
 8014c66:	9b02      	ldr	r3, [sp, #8]
 8014c68:	4621      	mov	r1, r4
 8014c6a:	4650      	mov	r0, sl
 8014c6c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014c70:	f7ff fa62 	bl	8014138 <quorem>
 8014c74:	4603      	mov	r3, r0
 8014c76:	4641      	mov	r1, r8
 8014c78:	3330      	adds	r3, #48	; 0x30
 8014c7a:	9004      	str	r0, [sp, #16]
 8014c7c:	4650      	mov	r0, sl
 8014c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c80:	f000 ff36 	bl	8015af0 <__mcmp>
 8014c84:	4632      	mov	r2, r6
 8014c86:	9006      	str	r0, [sp, #24]
 8014c88:	4621      	mov	r1, r4
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f000 ff4c 	bl	8015b28 <__mdiff>
 8014c90:	68c2      	ldr	r2, [r0, #12]
 8014c92:	4607      	mov	r7, r0
 8014c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c96:	bb02      	cbnz	r2, 8014cda <_dtoa_r+0xa82>
 8014c98:	4601      	mov	r1, r0
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	f000 ff28 	bl	8015af0 <__mcmp>
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ca4:	4639      	mov	r1, r7
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014cac:	f000 fc9c 	bl	80155e8 <_Bfree>
 8014cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cb4:	9f02      	ldr	r7, [sp, #8]
 8014cb6:	ea43 0102 	orr.w	r1, r3, r2
 8014cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cbc:	430b      	orrs	r3, r1
 8014cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cc0:	d10d      	bne.n	8014cde <_dtoa_r+0xa86>
 8014cc2:	2b39      	cmp	r3, #57	; 0x39
 8014cc4:	d027      	beq.n	8014d16 <_dtoa_r+0xabe>
 8014cc6:	9a06      	ldr	r2, [sp, #24]
 8014cc8:	2a00      	cmp	r2, #0
 8014cca:	dd01      	ble.n	8014cd0 <_dtoa_r+0xa78>
 8014ccc:	9b04      	ldr	r3, [sp, #16]
 8014cce:	3331      	adds	r3, #49	; 0x31
 8014cd0:	f88b 3000 	strb.w	r3, [fp]
 8014cd4:	e776      	b.n	8014bc4 <_dtoa_r+0x96c>
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	e7b9      	b.n	8014c4e <_dtoa_r+0x9f6>
 8014cda:	2201      	movs	r2, #1
 8014cdc:	e7e2      	b.n	8014ca4 <_dtoa_r+0xa4c>
 8014cde:	9906      	ldr	r1, [sp, #24]
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	db04      	blt.n	8014cee <_dtoa_r+0xa96>
 8014ce4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014ce6:	4301      	orrs	r1, r0
 8014ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cea:	4301      	orrs	r1, r0
 8014cec:	d120      	bne.n	8014d30 <_dtoa_r+0xad8>
 8014cee:	2a00      	cmp	r2, #0
 8014cf0:	ddee      	ble.n	8014cd0 <_dtoa_r+0xa78>
 8014cf2:	4651      	mov	r1, sl
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	9302      	str	r3, [sp, #8]
 8014cfa:	f000 fe8d 	bl	8015a18 <__lshift>
 8014cfe:	4621      	mov	r1, r4
 8014d00:	4682      	mov	sl, r0
 8014d02:	f000 fef5 	bl	8015af0 <__mcmp>
 8014d06:	2800      	cmp	r0, #0
 8014d08:	9b02      	ldr	r3, [sp, #8]
 8014d0a:	dc02      	bgt.n	8014d12 <_dtoa_r+0xaba>
 8014d0c:	d1e0      	bne.n	8014cd0 <_dtoa_r+0xa78>
 8014d0e:	07da      	lsls	r2, r3, #31
 8014d10:	d5de      	bpl.n	8014cd0 <_dtoa_r+0xa78>
 8014d12:	2b39      	cmp	r3, #57	; 0x39
 8014d14:	d1da      	bne.n	8014ccc <_dtoa_r+0xa74>
 8014d16:	2339      	movs	r3, #57	; 0x39
 8014d18:	f88b 3000 	strb.w	r3, [fp]
 8014d1c:	463b      	mov	r3, r7
 8014d1e:	461f      	mov	r7, r3
 8014d20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014d24:	3b01      	subs	r3, #1
 8014d26:	2a39      	cmp	r2, #57	; 0x39
 8014d28:	d050      	beq.n	8014dcc <_dtoa_r+0xb74>
 8014d2a:	3201      	adds	r2, #1
 8014d2c:	701a      	strb	r2, [r3, #0]
 8014d2e:	e749      	b.n	8014bc4 <_dtoa_r+0x96c>
 8014d30:	2a00      	cmp	r2, #0
 8014d32:	dd03      	ble.n	8014d3c <_dtoa_r+0xae4>
 8014d34:	2b39      	cmp	r3, #57	; 0x39
 8014d36:	d0ee      	beq.n	8014d16 <_dtoa_r+0xabe>
 8014d38:	3301      	adds	r3, #1
 8014d3a:	e7c9      	b.n	8014cd0 <_dtoa_r+0xa78>
 8014d3c:	9a02      	ldr	r2, [sp, #8]
 8014d3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014d40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014d44:	428a      	cmp	r2, r1
 8014d46:	d02a      	beq.n	8014d9e <_dtoa_r+0xb46>
 8014d48:	4651      	mov	r1, sl
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	220a      	movs	r2, #10
 8014d4e:	4628      	mov	r0, r5
 8014d50:	f000 fc6c 	bl	801562c <__multadd>
 8014d54:	45b0      	cmp	r8, r6
 8014d56:	4682      	mov	sl, r0
 8014d58:	f04f 0300 	mov.w	r3, #0
 8014d5c:	f04f 020a 	mov.w	r2, #10
 8014d60:	4641      	mov	r1, r8
 8014d62:	4628      	mov	r0, r5
 8014d64:	d107      	bne.n	8014d76 <_dtoa_r+0xb1e>
 8014d66:	f000 fc61 	bl	801562c <__multadd>
 8014d6a:	4680      	mov	r8, r0
 8014d6c:	4606      	mov	r6, r0
 8014d6e:	9b02      	ldr	r3, [sp, #8]
 8014d70:	3301      	adds	r3, #1
 8014d72:	9302      	str	r3, [sp, #8]
 8014d74:	e777      	b.n	8014c66 <_dtoa_r+0xa0e>
 8014d76:	f000 fc59 	bl	801562c <__multadd>
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	2300      	movs	r3, #0
 8014d80:	220a      	movs	r2, #10
 8014d82:	4628      	mov	r0, r5
 8014d84:	f000 fc52 	bl	801562c <__multadd>
 8014d88:	4606      	mov	r6, r0
 8014d8a:	e7f0      	b.n	8014d6e <_dtoa_r+0xb16>
 8014d8c:	f1bb 0f00 	cmp.w	fp, #0
 8014d90:	bfcc      	ite	gt
 8014d92:	465f      	movgt	r7, fp
 8014d94:	2701      	movle	r7, #1
 8014d96:	f04f 0800 	mov.w	r8, #0
 8014d9a:	9a08      	ldr	r2, [sp, #32]
 8014d9c:	4417      	add	r7, r2
 8014d9e:	4651      	mov	r1, sl
 8014da0:	2201      	movs	r2, #1
 8014da2:	4628      	mov	r0, r5
 8014da4:	9302      	str	r3, [sp, #8]
 8014da6:	f000 fe37 	bl	8015a18 <__lshift>
 8014daa:	4621      	mov	r1, r4
 8014dac:	4682      	mov	sl, r0
 8014dae:	f000 fe9f 	bl	8015af0 <__mcmp>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	dcb2      	bgt.n	8014d1c <_dtoa_r+0xac4>
 8014db6:	d102      	bne.n	8014dbe <_dtoa_r+0xb66>
 8014db8:	9b02      	ldr	r3, [sp, #8]
 8014dba:	07db      	lsls	r3, r3, #31
 8014dbc:	d4ae      	bmi.n	8014d1c <_dtoa_r+0xac4>
 8014dbe:	463b      	mov	r3, r7
 8014dc0:	461f      	mov	r7, r3
 8014dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014dc6:	2a30      	cmp	r2, #48	; 0x30
 8014dc8:	d0fa      	beq.n	8014dc0 <_dtoa_r+0xb68>
 8014dca:	e6fb      	b.n	8014bc4 <_dtoa_r+0x96c>
 8014dcc:	9a08      	ldr	r2, [sp, #32]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d1a5      	bne.n	8014d1e <_dtoa_r+0xac6>
 8014dd2:	2331      	movs	r3, #49	; 0x31
 8014dd4:	f109 0901 	add.w	r9, r9, #1
 8014dd8:	7013      	strb	r3, [r2, #0]
 8014dda:	e6f3      	b.n	8014bc4 <_dtoa_r+0x96c>
 8014ddc:	4b13      	ldr	r3, [pc, #76]	; (8014e2c <_dtoa_r+0xbd4>)
 8014dde:	f7ff baa7 	b.w	8014330 <_dtoa_r+0xd8>
 8014de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	f47f aa80 	bne.w	80142ea <_dtoa_r+0x92>
 8014dea:	4b11      	ldr	r3, [pc, #68]	; (8014e30 <_dtoa_r+0xbd8>)
 8014dec:	f7ff baa0 	b.w	8014330 <_dtoa_r+0xd8>
 8014df0:	f1bb 0f00 	cmp.w	fp, #0
 8014df4:	dc03      	bgt.n	8014dfe <_dtoa_r+0xba6>
 8014df6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014df8:	2b02      	cmp	r3, #2
 8014dfa:	f73f aecc 	bgt.w	8014b96 <_dtoa_r+0x93e>
 8014dfe:	9f08      	ldr	r7, [sp, #32]
 8014e00:	4621      	mov	r1, r4
 8014e02:	4650      	mov	r0, sl
 8014e04:	f7ff f998 	bl	8014138 <quorem>
 8014e08:	9a08      	ldr	r2, [sp, #32]
 8014e0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014e0e:	f807 3b01 	strb.w	r3, [r7], #1
 8014e12:	1aba      	subs	r2, r7, r2
 8014e14:	4593      	cmp	fp, r2
 8014e16:	ddb9      	ble.n	8014d8c <_dtoa_r+0xb34>
 8014e18:	4651      	mov	r1, sl
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	220a      	movs	r2, #10
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f000 fc04 	bl	801562c <__multadd>
 8014e24:	4682      	mov	sl, r0
 8014e26:	e7eb      	b.n	8014e00 <_dtoa_r+0xba8>
 8014e28:	08017a3c 	.word	0x08017a3c
 8014e2c:	08017c41 	.word	0x08017c41
 8014e30:	080179b9 	.word	0x080179b9

08014e34 <rshift>:
 8014e34:	6903      	ldr	r3, [r0, #16]
 8014e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014e3e:	f100 0414 	add.w	r4, r0, #20
 8014e42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014e46:	dd46      	ble.n	8014ed6 <rshift+0xa2>
 8014e48:	f011 011f 	ands.w	r1, r1, #31
 8014e4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014e50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014e54:	d10c      	bne.n	8014e70 <rshift+0x3c>
 8014e56:	4629      	mov	r1, r5
 8014e58:	f100 0710 	add.w	r7, r0, #16
 8014e5c:	42b1      	cmp	r1, r6
 8014e5e:	d335      	bcc.n	8014ecc <rshift+0x98>
 8014e60:	1a9b      	subs	r3, r3, r2
 8014e62:	009b      	lsls	r3, r3, #2
 8014e64:	1eea      	subs	r2, r5, #3
 8014e66:	4296      	cmp	r6, r2
 8014e68:	bf38      	it	cc
 8014e6a:	2300      	movcc	r3, #0
 8014e6c:	4423      	add	r3, r4
 8014e6e:	e015      	b.n	8014e9c <rshift+0x68>
 8014e70:	46a1      	mov	r9, r4
 8014e72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014e76:	f1c1 0820 	rsb	r8, r1, #32
 8014e7a:	40cf      	lsrs	r7, r1
 8014e7c:	f105 0e04 	add.w	lr, r5, #4
 8014e80:	4576      	cmp	r6, lr
 8014e82:	46f4      	mov	ip, lr
 8014e84:	d816      	bhi.n	8014eb4 <rshift+0x80>
 8014e86:	1a9b      	subs	r3, r3, r2
 8014e88:	009a      	lsls	r2, r3, #2
 8014e8a:	3a04      	subs	r2, #4
 8014e8c:	3501      	adds	r5, #1
 8014e8e:	42ae      	cmp	r6, r5
 8014e90:	bf38      	it	cc
 8014e92:	2200      	movcc	r2, #0
 8014e94:	18a3      	adds	r3, r4, r2
 8014e96:	50a7      	str	r7, [r4, r2]
 8014e98:	b107      	cbz	r7, 8014e9c <rshift+0x68>
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	42a3      	cmp	r3, r4
 8014e9e:	eba3 0204 	sub.w	r2, r3, r4
 8014ea2:	bf08      	it	eq
 8014ea4:	2300      	moveq	r3, #0
 8014ea6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014eaa:	6102      	str	r2, [r0, #16]
 8014eac:	bf08      	it	eq
 8014eae:	6143      	streq	r3, [r0, #20]
 8014eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eb4:	f8dc c000 	ldr.w	ip, [ip]
 8014eb8:	fa0c fc08 	lsl.w	ip, ip, r8
 8014ebc:	ea4c 0707 	orr.w	r7, ip, r7
 8014ec0:	f849 7b04 	str.w	r7, [r9], #4
 8014ec4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ec8:	40cf      	lsrs	r7, r1
 8014eca:	e7d9      	b.n	8014e80 <rshift+0x4c>
 8014ecc:	f851 cb04 	ldr.w	ip, [r1], #4
 8014ed0:	f847 cf04 	str.w	ip, [r7, #4]!
 8014ed4:	e7c2      	b.n	8014e5c <rshift+0x28>
 8014ed6:	4623      	mov	r3, r4
 8014ed8:	e7e0      	b.n	8014e9c <rshift+0x68>

08014eda <__hexdig_fun>:
 8014eda:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ede:	2b09      	cmp	r3, #9
 8014ee0:	d802      	bhi.n	8014ee8 <__hexdig_fun+0xe>
 8014ee2:	3820      	subs	r0, #32
 8014ee4:	b2c0      	uxtb	r0, r0
 8014ee6:	4770      	bx	lr
 8014ee8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014eec:	2b05      	cmp	r3, #5
 8014eee:	d801      	bhi.n	8014ef4 <__hexdig_fun+0x1a>
 8014ef0:	3847      	subs	r0, #71	; 0x47
 8014ef2:	e7f7      	b.n	8014ee4 <__hexdig_fun+0xa>
 8014ef4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014ef8:	2b05      	cmp	r3, #5
 8014efa:	d801      	bhi.n	8014f00 <__hexdig_fun+0x26>
 8014efc:	3827      	subs	r0, #39	; 0x27
 8014efe:	e7f1      	b.n	8014ee4 <__hexdig_fun+0xa>
 8014f00:	2000      	movs	r0, #0
 8014f02:	4770      	bx	lr

08014f04 <__gethex>:
 8014f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f08:	b08b      	sub	sp, #44	; 0x2c
 8014f0a:	9306      	str	r3, [sp, #24]
 8014f0c:	4bb9      	ldr	r3, [pc, #740]	; (80151f4 <__gethex+0x2f0>)
 8014f0e:	9002      	str	r0, [sp, #8]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	468b      	mov	fp, r1
 8014f14:	4618      	mov	r0, r3
 8014f16:	4690      	mov	r8, r2
 8014f18:	9303      	str	r3, [sp, #12]
 8014f1a:	f7eb f931 	bl	8000180 <strlen>
 8014f1e:	4682      	mov	sl, r0
 8014f20:	9b03      	ldr	r3, [sp, #12]
 8014f22:	f8db 2000 	ldr.w	r2, [fp]
 8014f26:	4403      	add	r3, r0
 8014f28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014f2c:	9307      	str	r3, [sp, #28]
 8014f2e:	1c93      	adds	r3, r2, #2
 8014f30:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014f34:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014f38:	32fe      	adds	r2, #254	; 0xfe
 8014f3a:	18d1      	adds	r1, r2, r3
 8014f3c:	461f      	mov	r7, r3
 8014f3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f42:	9101      	str	r1, [sp, #4]
 8014f44:	2830      	cmp	r0, #48	; 0x30
 8014f46:	d0f8      	beq.n	8014f3a <__gethex+0x36>
 8014f48:	f7ff ffc7 	bl	8014eda <__hexdig_fun>
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d13a      	bne.n	8014fc8 <__gethex+0xc4>
 8014f52:	4652      	mov	r2, sl
 8014f54:	4638      	mov	r0, r7
 8014f56:	9903      	ldr	r1, [sp, #12]
 8014f58:	f001 fc8a 	bl	8016870 <strncmp>
 8014f5c:	4605      	mov	r5, r0
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d166      	bne.n	8015030 <__gethex+0x12c>
 8014f62:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014f66:	eb07 060a 	add.w	r6, r7, sl
 8014f6a:	f7ff ffb6 	bl	8014eda <__hexdig_fun>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d060      	beq.n	8015034 <__gethex+0x130>
 8014f72:	4633      	mov	r3, r6
 8014f74:	7818      	ldrb	r0, [r3, #0]
 8014f76:	461f      	mov	r7, r3
 8014f78:	2830      	cmp	r0, #48	; 0x30
 8014f7a:	f103 0301 	add.w	r3, r3, #1
 8014f7e:	d0f9      	beq.n	8014f74 <__gethex+0x70>
 8014f80:	f7ff ffab 	bl	8014eda <__hexdig_fun>
 8014f84:	2301      	movs	r3, #1
 8014f86:	fab0 f480 	clz	r4, r0
 8014f8a:	4635      	mov	r5, r6
 8014f8c:	0964      	lsrs	r4, r4, #5
 8014f8e:	9301      	str	r3, [sp, #4]
 8014f90:	463a      	mov	r2, r7
 8014f92:	4616      	mov	r6, r2
 8014f94:	7830      	ldrb	r0, [r6, #0]
 8014f96:	3201      	adds	r2, #1
 8014f98:	f7ff ff9f 	bl	8014eda <__hexdig_fun>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d1f8      	bne.n	8014f92 <__gethex+0x8e>
 8014fa0:	4652      	mov	r2, sl
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	9903      	ldr	r1, [sp, #12]
 8014fa6:	f001 fc63 	bl	8016870 <strncmp>
 8014faa:	b980      	cbnz	r0, 8014fce <__gethex+0xca>
 8014fac:	b94d      	cbnz	r5, 8014fc2 <__gethex+0xbe>
 8014fae:	eb06 050a 	add.w	r5, r6, sl
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4616      	mov	r6, r2
 8014fb6:	7830      	ldrb	r0, [r6, #0]
 8014fb8:	3201      	adds	r2, #1
 8014fba:	f7ff ff8e 	bl	8014eda <__hexdig_fun>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d1f8      	bne.n	8014fb4 <__gethex+0xb0>
 8014fc2:	1bad      	subs	r5, r5, r6
 8014fc4:	00ad      	lsls	r5, r5, #2
 8014fc6:	e004      	b.n	8014fd2 <__gethex+0xce>
 8014fc8:	2400      	movs	r4, #0
 8014fca:	4625      	mov	r5, r4
 8014fcc:	e7e0      	b.n	8014f90 <__gethex+0x8c>
 8014fce:	2d00      	cmp	r5, #0
 8014fd0:	d1f7      	bne.n	8014fc2 <__gethex+0xbe>
 8014fd2:	7833      	ldrb	r3, [r6, #0]
 8014fd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014fd8:	2b50      	cmp	r3, #80	; 0x50
 8014fda:	d139      	bne.n	8015050 <__gethex+0x14c>
 8014fdc:	7873      	ldrb	r3, [r6, #1]
 8014fde:	2b2b      	cmp	r3, #43	; 0x2b
 8014fe0:	d02a      	beq.n	8015038 <__gethex+0x134>
 8014fe2:	2b2d      	cmp	r3, #45	; 0x2d
 8014fe4:	d02c      	beq.n	8015040 <__gethex+0x13c>
 8014fe6:	f04f 0900 	mov.w	r9, #0
 8014fea:	1c71      	adds	r1, r6, #1
 8014fec:	7808      	ldrb	r0, [r1, #0]
 8014fee:	f7ff ff74 	bl	8014eda <__hexdig_fun>
 8014ff2:	1e43      	subs	r3, r0, #1
 8014ff4:	b2db      	uxtb	r3, r3
 8014ff6:	2b18      	cmp	r3, #24
 8014ff8:	d82a      	bhi.n	8015050 <__gethex+0x14c>
 8014ffa:	f1a0 0210 	sub.w	r2, r0, #16
 8014ffe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015002:	f7ff ff6a 	bl	8014eda <__hexdig_fun>
 8015006:	1e43      	subs	r3, r0, #1
 8015008:	b2db      	uxtb	r3, r3
 801500a:	2b18      	cmp	r3, #24
 801500c:	d91b      	bls.n	8015046 <__gethex+0x142>
 801500e:	f1b9 0f00 	cmp.w	r9, #0
 8015012:	d000      	beq.n	8015016 <__gethex+0x112>
 8015014:	4252      	negs	r2, r2
 8015016:	4415      	add	r5, r2
 8015018:	f8cb 1000 	str.w	r1, [fp]
 801501c:	b1d4      	cbz	r4, 8015054 <__gethex+0x150>
 801501e:	9b01      	ldr	r3, [sp, #4]
 8015020:	2b00      	cmp	r3, #0
 8015022:	bf14      	ite	ne
 8015024:	2700      	movne	r7, #0
 8015026:	2706      	moveq	r7, #6
 8015028:	4638      	mov	r0, r7
 801502a:	b00b      	add	sp, #44	; 0x2c
 801502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015030:	463e      	mov	r6, r7
 8015032:	4625      	mov	r5, r4
 8015034:	2401      	movs	r4, #1
 8015036:	e7cc      	b.n	8014fd2 <__gethex+0xce>
 8015038:	f04f 0900 	mov.w	r9, #0
 801503c:	1cb1      	adds	r1, r6, #2
 801503e:	e7d5      	b.n	8014fec <__gethex+0xe8>
 8015040:	f04f 0901 	mov.w	r9, #1
 8015044:	e7fa      	b.n	801503c <__gethex+0x138>
 8015046:	230a      	movs	r3, #10
 8015048:	fb03 0202 	mla	r2, r3, r2, r0
 801504c:	3a10      	subs	r2, #16
 801504e:	e7d6      	b.n	8014ffe <__gethex+0xfa>
 8015050:	4631      	mov	r1, r6
 8015052:	e7e1      	b.n	8015018 <__gethex+0x114>
 8015054:	4621      	mov	r1, r4
 8015056:	1bf3      	subs	r3, r6, r7
 8015058:	3b01      	subs	r3, #1
 801505a:	2b07      	cmp	r3, #7
 801505c:	dc0a      	bgt.n	8015074 <__gethex+0x170>
 801505e:	9802      	ldr	r0, [sp, #8]
 8015060:	f000 fa82 	bl	8015568 <_Balloc>
 8015064:	4604      	mov	r4, r0
 8015066:	b940      	cbnz	r0, 801507a <__gethex+0x176>
 8015068:	4602      	mov	r2, r0
 801506a:	21de      	movs	r1, #222	; 0xde
 801506c:	4b62      	ldr	r3, [pc, #392]	; (80151f8 <__gethex+0x2f4>)
 801506e:	4863      	ldr	r0, [pc, #396]	; (80151fc <__gethex+0x2f8>)
 8015070:	f001 fcd4 	bl	8016a1c <__assert_func>
 8015074:	3101      	adds	r1, #1
 8015076:	105b      	asrs	r3, r3, #1
 8015078:	e7ef      	b.n	801505a <__gethex+0x156>
 801507a:	f04f 0b00 	mov.w	fp, #0
 801507e:	f100 0914 	add.w	r9, r0, #20
 8015082:	f1ca 0301 	rsb	r3, sl, #1
 8015086:	f8cd 9010 	str.w	r9, [sp, #16]
 801508a:	f8cd b004 	str.w	fp, [sp, #4]
 801508e:	9308      	str	r3, [sp, #32]
 8015090:	42b7      	cmp	r7, r6
 8015092:	d33f      	bcc.n	8015114 <__gethex+0x210>
 8015094:	9f04      	ldr	r7, [sp, #16]
 8015096:	9b01      	ldr	r3, [sp, #4]
 8015098:	f847 3b04 	str.w	r3, [r7], #4
 801509c:	eba7 0709 	sub.w	r7, r7, r9
 80150a0:	10bf      	asrs	r7, r7, #2
 80150a2:	6127      	str	r7, [r4, #16]
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 fb55 	bl	8015754 <__hi0bits>
 80150aa:	017f      	lsls	r7, r7, #5
 80150ac:	f8d8 6000 	ldr.w	r6, [r8]
 80150b0:	1a3f      	subs	r7, r7, r0
 80150b2:	42b7      	cmp	r7, r6
 80150b4:	dd62      	ble.n	801517c <__gethex+0x278>
 80150b6:	1bbf      	subs	r7, r7, r6
 80150b8:	4639      	mov	r1, r7
 80150ba:	4620      	mov	r0, r4
 80150bc:	f000 feeb 	bl	8015e96 <__any_on>
 80150c0:	4682      	mov	sl, r0
 80150c2:	b1a8      	cbz	r0, 80150f0 <__gethex+0x1ec>
 80150c4:	f04f 0a01 	mov.w	sl, #1
 80150c8:	1e7b      	subs	r3, r7, #1
 80150ca:	1159      	asrs	r1, r3, #5
 80150cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80150d0:	f003 021f 	and.w	r2, r3, #31
 80150d4:	fa0a f202 	lsl.w	r2, sl, r2
 80150d8:	420a      	tst	r2, r1
 80150da:	d009      	beq.n	80150f0 <__gethex+0x1ec>
 80150dc:	4553      	cmp	r3, sl
 80150de:	dd05      	ble.n	80150ec <__gethex+0x1e8>
 80150e0:	4620      	mov	r0, r4
 80150e2:	1eb9      	subs	r1, r7, #2
 80150e4:	f000 fed7 	bl	8015e96 <__any_on>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d144      	bne.n	8015176 <__gethex+0x272>
 80150ec:	f04f 0a02 	mov.w	sl, #2
 80150f0:	4639      	mov	r1, r7
 80150f2:	4620      	mov	r0, r4
 80150f4:	f7ff fe9e 	bl	8014e34 <rshift>
 80150f8:	443d      	add	r5, r7
 80150fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150fe:	42ab      	cmp	r3, r5
 8015100:	da4a      	bge.n	8015198 <__gethex+0x294>
 8015102:	4621      	mov	r1, r4
 8015104:	9802      	ldr	r0, [sp, #8]
 8015106:	f000 fa6f 	bl	80155e8 <_Bfree>
 801510a:	2300      	movs	r3, #0
 801510c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801510e:	27a3      	movs	r7, #163	; 0xa3
 8015110:	6013      	str	r3, [r2, #0]
 8015112:	e789      	b.n	8015028 <__gethex+0x124>
 8015114:	1e73      	subs	r3, r6, #1
 8015116:	9a07      	ldr	r2, [sp, #28]
 8015118:	9305      	str	r3, [sp, #20]
 801511a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801511e:	4293      	cmp	r3, r2
 8015120:	d019      	beq.n	8015156 <__gethex+0x252>
 8015122:	f1bb 0f20 	cmp.w	fp, #32
 8015126:	d107      	bne.n	8015138 <__gethex+0x234>
 8015128:	9b04      	ldr	r3, [sp, #16]
 801512a:	9a01      	ldr	r2, [sp, #4]
 801512c:	f843 2b04 	str.w	r2, [r3], #4
 8015130:	9304      	str	r3, [sp, #16]
 8015132:	2300      	movs	r3, #0
 8015134:	469b      	mov	fp, r3
 8015136:	9301      	str	r3, [sp, #4]
 8015138:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801513c:	f7ff fecd 	bl	8014eda <__hexdig_fun>
 8015140:	9b01      	ldr	r3, [sp, #4]
 8015142:	f000 000f 	and.w	r0, r0, #15
 8015146:	fa00 f00b 	lsl.w	r0, r0, fp
 801514a:	4303      	orrs	r3, r0
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	f10b 0b04 	add.w	fp, fp, #4
 8015152:	9b05      	ldr	r3, [sp, #20]
 8015154:	e00d      	b.n	8015172 <__gethex+0x26e>
 8015156:	9b05      	ldr	r3, [sp, #20]
 8015158:	9a08      	ldr	r2, [sp, #32]
 801515a:	4413      	add	r3, r2
 801515c:	42bb      	cmp	r3, r7
 801515e:	d3e0      	bcc.n	8015122 <__gethex+0x21e>
 8015160:	4618      	mov	r0, r3
 8015162:	4652      	mov	r2, sl
 8015164:	9903      	ldr	r1, [sp, #12]
 8015166:	9309      	str	r3, [sp, #36]	; 0x24
 8015168:	f001 fb82 	bl	8016870 <strncmp>
 801516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516e:	2800      	cmp	r0, #0
 8015170:	d1d7      	bne.n	8015122 <__gethex+0x21e>
 8015172:	461e      	mov	r6, r3
 8015174:	e78c      	b.n	8015090 <__gethex+0x18c>
 8015176:	f04f 0a03 	mov.w	sl, #3
 801517a:	e7b9      	b.n	80150f0 <__gethex+0x1ec>
 801517c:	da09      	bge.n	8015192 <__gethex+0x28e>
 801517e:	1bf7      	subs	r7, r6, r7
 8015180:	4621      	mov	r1, r4
 8015182:	463a      	mov	r2, r7
 8015184:	9802      	ldr	r0, [sp, #8]
 8015186:	f000 fc47 	bl	8015a18 <__lshift>
 801518a:	4604      	mov	r4, r0
 801518c:	1bed      	subs	r5, r5, r7
 801518e:	f100 0914 	add.w	r9, r0, #20
 8015192:	f04f 0a00 	mov.w	sl, #0
 8015196:	e7b0      	b.n	80150fa <__gethex+0x1f6>
 8015198:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801519c:	42a8      	cmp	r0, r5
 801519e:	dd71      	ble.n	8015284 <__gethex+0x380>
 80151a0:	1b45      	subs	r5, r0, r5
 80151a2:	42ae      	cmp	r6, r5
 80151a4:	dc34      	bgt.n	8015210 <__gethex+0x30c>
 80151a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80151aa:	2b02      	cmp	r3, #2
 80151ac:	d028      	beq.n	8015200 <__gethex+0x2fc>
 80151ae:	2b03      	cmp	r3, #3
 80151b0:	d02a      	beq.n	8015208 <__gethex+0x304>
 80151b2:	2b01      	cmp	r3, #1
 80151b4:	d115      	bne.n	80151e2 <__gethex+0x2de>
 80151b6:	42ae      	cmp	r6, r5
 80151b8:	d113      	bne.n	80151e2 <__gethex+0x2de>
 80151ba:	2e01      	cmp	r6, #1
 80151bc:	d10b      	bne.n	80151d6 <__gethex+0x2d2>
 80151be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80151c2:	9a06      	ldr	r2, [sp, #24]
 80151c4:	2762      	movs	r7, #98	; 0x62
 80151c6:	6013      	str	r3, [r2, #0]
 80151c8:	2301      	movs	r3, #1
 80151ca:	6123      	str	r3, [r4, #16]
 80151cc:	f8c9 3000 	str.w	r3, [r9]
 80151d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151d2:	601c      	str	r4, [r3, #0]
 80151d4:	e728      	b.n	8015028 <__gethex+0x124>
 80151d6:	4620      	mov	r0, r4
 80151d8:	1e71      	subs	r1, r6, #1
 80151da:	f000 fe5c 	bl	8015e96 <__any_on>
 80151de:	2800      	cmp	r0, #0
 80151e0:	d1ed      	bne.n	80151be <__gethex+0x2ba>
 80151e2:	4621      	mov	r1, r4
 80151e4:	9802      	ldr	r0, [sp, #8]
 80151e6:	f000 f9ff 	bl	80155e8 <_Bfree>
 80151ea:	2300      	movs	r3, #0
 80151ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151ee:	2750      	movs	r7, #80	; 0x50
 80151f0:	6013      	str	r3, [r2, #0]
 80151f2:	e719      	b.n	8015028 <__gethex+0x124>
 80151f4:	08017ab8 	.word	0x08017ab8
 80151f8:	08017a3c 	.word	0x08017a3c
 80151fc:	08017a4d 	.word	0x08017a4d
 8015200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015202:	2b00      	cmp	r3, #0
 8015204:	d1ed      	bne.n	80151e2 <__gethex+0x2de>
 8015206:	e7da      	b.n	80151be <__gethex+0x2ba>
 8015208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1d7      	bne.n	80151be <__gethex+0x2ba>
 801520e:	e7e8      	b.n	80151e2 <__gethex+0x2de>
 8015210:	1e6f      	subs	r7, r5, #1
 8015212:	f1ba 0f00 	cmp.w	sl, #0
 8015216:	d132      	bne.n	801527e <__gethex+0x37a>
 8015218:	b127      	cbz	r7, 8015224 <__gethex+0x320>
 801521a:	4639      	mov	r1, r7
 801521c:	4620      	mov	r0, r4
 801521e:	f000 fe3a 	bl	8015e96 <__any_on>
 8015222:	4682      	mov	sl, r0
 8015224:	2101      	movs	r1, #1
 8015226:	117b      	asrs	r3, r7, #5
 8015228:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801522c:	f007 071f 	and.w	r7, r7, #31
 8015230:	fa01 f707 	lsl.w	r7, r1, r7
 8015234:	421f      	tst	r7, r3
 8015236:	f04f 0702 	mov.w	r7, #2
 801523a:	4629      	mov	r1, r5
 801523c:	4620      	mov	r0, r4
 801523e:	bf18      	it	ne
 8015240:	f04a 0a02 	orrne.w	sl, sl, #2
 8015244:	1b76      	subs	r6, r6, r5
 8015246:	f7ff fdf5 	bl	8014e34 <rshift>
 801524a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801524e:	f1ba 0f00 	cmp.w	sl, #0
 8015252:	d048      	beq.n	80152e6 <__gethex+0x3e2>
 8015254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015258:	2b02      	cmp	r3, #2
 801525a:	d015      	beq.n	8015288 <__gethex+0x384>
 801525c:	2b03      	cmp	r3, #3
 801525e:	d017      	beq.n	8015290 <__gethex+0x38c>
 8015260:	2b01      	cmp	r3, #1
 8015262:	d109      	bne.n	8015278 <__gethex+0x374>
 8015264:	f01a 0f02 	tst.w	sl, #2
 8015268:	d006      	beq.n	8015278 <__gethex+0x374>
 801526a:	f8d9 0000 	ldr.w	r0, [r9]
 801526e:	ea4a 0a00 	orr.w	sl, sl, r0
 8015272:	f01a 0f01 	tst.w	sl, #1
 8015276:	d10e      	bne.n	8015296 <__gethex+0x392>
 8015278:	f047 0710 	orr.w	r7, r7, #16
 801527c:	e033      	b.n	80152e6 <__gethex+0x3e2>
 801527e:	f04f 0a01 	mov.w	sl, #1
 8015282:	e7cf      	b.n	8015224 <__gethex+0x320>
 8015284:	2701      	movs	r7, #1
 8015286:	e7e2      	b.n	801524e <__gethex+0x34a>
 8015288:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801528a:	f1c3 0301 	rsb	r3, r3, #1
 801528e:	9315      	str	r3, [sp, #84]	; 0x54
 8015290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015292:	2b00      	cmp	r3, #0
 8015294:	d0f0      	beq.n	8015278 <__gethex+0x374>
 8015296:	f04f 0c00 	mov.w	ip, #0
 801529a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801529e:	f104 0314 	add.w	r3, r4, #20
 80152a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80152a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80152aa:	4618      	mov	r0, r3
 80152ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80152b0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80152b4:	d01c      	beq.n	80152f0 <__gethex+0x3ec>
 80152b6:	3201      	adds	r2, #1
 80152b8:	6002      	str	r2, [r0, #0]
 80152ba:	2f02      	cmp	r7, #2
 80152bc:	f104 0314 	add.w	r3, r4, #20
 80152c0:	d13d      	bne.n	801533e <__gethex+0x43a>
 80152c2:	f8d8 2000 	ldr.w	r2, [r8]
 80152c6:	3a01      	subs	r2, #1
 80152c8:	42b2      	cmp	r2, r6
 80152ca:	d10a      	bne.n	80152e2 <__gethex+0x3de>
 80152cc:	2201      	movs	r2, #1
 80152ce:	1171      	asrs	r1, r6, #5
 80152d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80152d4:	f006 061f 	and.w	r6, r6, #31
 80152d8:	fa02 f606 	lsl.w	r6, r2, r6
 80152dc:	421e      	tst	r6, r3
 80152de:	bf18      	it	ne
 80152e0:	4617      	movne	r7, r2
 80152e2:	f047 0720 	orr.w	r7, r7, #32
 80152e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152e8:	601c      	str	r4, [r3, #0]
 80152ea:	9b06      	ldr	r3, [sp, #24]
 80152ec:	601d      	str	r5, [r3, #0]
 80152ee:	e69b      	b.n	8015028 <__gethex+0x124>
 80152f0:	4299      	cmp	r1, r3
 80152f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80152f6:	d8d8      	bhi.n	80152aa <__gethex+0x3a6>
 80152f8:	68a3      	ldr	r3, [r4, #8]
 80152fa:	459b      	cmp	fp, r3
 80152fc:	db17      	blt.n	801532e <__gethex+0x42a>
 80152fe:	6861      	ldr	r1, [r4, #4]
 8015300:	9802      	ldr	r0, [sp, #8]
 8015302:	3101      	adds	r1, #1
 8015304:	f000 f930 	bl	8015568 <_Balloc>
 8015308:	4681      	mov	r9, r0
 801530a:	b918      	cbnz	r0, 8015314 <__gethex+0x410>
 801530c:	4602      	mov	r2, r0
 801530e:	2184      	movs	r1, #132	; 0x84
 8015310:	4b19      	ldr	r3, [pc, #100]	; (8015378 <__gethex+0x474>)
 8015312:	e6ac      	b.n	801506e <__gethex+0x16a>
 8015314:	6922      	ldr	r2, [r4, #16]
 8015316:	f104 010c 	add.w	r1, r4, #12
 801531a:	3202      	adds	r2, #2
 801531c:	0092      	lsls	r2, r2, #2
 801531e:	300c      	adds	r0, #12
 8015320:	f7fc ffe6 	bl	80122f0 <memcpy>
 8015324:	4621      	mov	r1, r4
 8015326:	9802      	ldr	r0, [sp, #8]
 8015328:	f000 f95e 	bl	80155e8 <_Bfree>
 801532c:	464c      	mov	r4, r9
 801532e:	6923      	ldr	r3, [r4, #16]
 8015330:	1c5a      	adds	r2, r3, #1
 8015332:	6122      	str	r2, [r4, #16]
 8015334:	2201      	movs	r2, #1
 8015336:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801533a:	615a      	str	r2, [r3, #20]
 801533c:	e7bd      	b.n	80152ba <__gethex+0x3b6>
 801533e:	6922      	ldr	r2, [r4, #16]
 8015340:	455a      	cmp	r2, fp
 8015342:	dd0b      	ble.n	801535c <__gethex+0x458>
 8015344:	2101      	movs	r1, #1
 8015346:	4620      	mov	r0, r4
 8015348:	f7ff fd74 	bl	8014e34 <rshift>
 801534c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015350:	3501      	adds	r5, #1
 8015352:	42ab      	cmp	r3, r5
 8015354:	f6ff aed5 	blt.w	8015102 <__gethex+0x1fe>
 8015358:	2701      	movs	r7, #1
 801535a:	e7c2      	b.n	80152e2 <__gethex+0x3de>
 801535c:	f016 061f 	ands.w	r6, r6, #31
 8015360:	d0fa      	beq.n	8015358 <__gethex+0x454>
 8015362:	449a      	add	sl, r3
 8015364:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015368:	f000 f9f4 	bl	8015754 <__hi0bits>
 801536c:	f1c6 0620 	rsb	r6, r6, #32
 8015370:	42b0      	cmp	r0, r6
 8015372:	dbe7      	blt.n	8015344 <__gethex+0x440>
 8015374:	e7f0      	b.n	8015358 <__gethex+0x454>
 8015376:	bf00      	nop
 8015378:	08017a3c 	.word	0x08017a3c

0801537c <L_shift>:
 801537c:	f1c2 0208 	rsb	r2, r2, #8
 8015380:	0092      	lsls	r2, r2, #2
 8015382:	b570      	push	{r4, r5, r6, lr}
 8015384:	f1c2 0620 	rsb	r6, r2, #32
 8015388:	6843      	ldr	r3, [r0, #4]
 801538a:	6804      	ldr	r4, [r0, #0]
 801538c:	fa03 f506 	lsl.w	r5, r3, r6
 8015390:	432c      	orrs	r4, r5
 8015392:	40d3      	lsrs	r3, r2
 8015394:	6004      	str	r4, [r0, #0]
 8015396:	f840 3f04 	str.w	r3, [r0, #4]!
 801539a:	4288      	cmp	r0, r1
 801539c:	d3f4      	bcc.n	8015388 <L_shift+0xc>
 801539e:	bd70      	pop	{r4, r5, r6, pc}

080153a0 <__match>:
 80153a0:	b530      	push	{r4, r5, lr}
 80153a2:	6803      	ldr	r3, [r0, #0]
 80153a4:	3301      	adds	r3, #1
 80153a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153aa:	b914      	cbnz	r4, 80153b2 <__match+0x12>
 80153ac:	6003      	str	r3, [r0, #0]
 80153ae:	2001      	movs	r0, #1
 80153b0:	bd30      	pop	{r4, r5, pc}
 80153b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80153ba:	2d19      	cmp	r5, #25
 80153bc:	bf98      	it	ls
 80153be:	3220      	addls	r2, #32
 80153c0:	42a2      	cmp	r2, r4
 80153c2:	d0f0      	beq.n	80153a6 <__match+0x6>
 80153c4:	2000      	movs	r0, #0
 80153c6:	e7f3      	b.n	80153b0 <__match+0x10>

080153c8 <__hexnan>:
 80153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	2500      	movs	r5, #0
 80153ce:	680b      	ldr	r3, [r1, #0]
 80153d0:	4682      	mov	sl, r0
 80153d2:	115e      	asrs	r6, r3, #5
 80153d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80153d8:	f013 031f 	ands.w	r3, r3, #31
 80153dc:	bf18      	it	ne
 80153de:	3604      	addne	r6, #4
 80153e0:	1f37      	subs	r7, r6, #4
 80153e2:	4690      	mov	r8, r2
 80153e4:	46b9      	mov	r9, r7
 80153e6:	463c      	mov	r4, r7
 80153e8:	46ab      	mov	fp, r5
 80153ea:	b087      	sub	sp, #28
 80153ec:	6801      	ldr	r1, [r0, #0]
 80153ee:	9301      	str	r3, [sp, #4]
 80153f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80153f4:	9502      	str	r5, [sp, #8]
 80153f6:	784a      	ldrb	r2, [r1, #1]
 80153f8:	1c4b      	adds	r3, r1, #1
 80153fa:	9303      	str	r3, [sp, #12]
 80153fc:	b342      	cbz	r2, 8015450 <__hexnan+0x88>
 80153fe:	4610      	mov	r0, r2
 8015400:	9105      	str	r1, [sp, #20]
 8015402:	9204      	str	r2, [sp, #16]
 8015404:	f7ff fd69 	bl	8014eda <__hexdig_fun>
 8015408:	2800      	cmp	r0, #0
 801540a:	d14f      	bne.n	80154ac <__hexnan+0xe4>
 801540c:	9a04      	ldr	r2, [sp, #16]
 801540e:	9905      	ldr	r1, [sp, #20]
 8015410:	2a20      	cmp	r2, #32
 8015412:	d818      	bhi.n	8015446 <__hexnan+0x7e>
 8015414:	9b02      	ldr	r3, [sp, #8]
 8015416:	459b      	cmp	fp, r3
 8015418:	dd13      	ble.n	8015442 <__hexnan+0x7a>
 801541a:	454c      	cmp	r4, r9
 801541c:	d206      	bcs.n	801542c <__hexnan+0x64>
 801541e:	2d07      	cmp	r5, #7
 8015420:	dc04      	bgt.n	801542c <__hexnan+0x64>
 8015422:	462a      	mov	r2, r5
 8015424:	4649      	mov	r1, r9
 8015426:	4620      	mov	r0, r4
 8015428:	f7ff ffa8 	bl	801537c <L_shift>
 801542c:	4544      	cmp	r4, r8
 801542e:	d950      	bls.n	80154d2 <__hexnan+0x10a>
 8015430:	2300      	movs	r3, #0
 8015432:	f1a4 0904 	sub.w	r9, r4, #4
 8015436:	f844 3c04 	str.w	r3, [r4, #-4]
 801543a:	461d      	mov	r5, r3
 801543c:	464c      	mov	r4, r9
 801543e:	f8cd b008 	str.w	fp, [sp, #8]
 8015442:	9903      	ldr	r1, [sp, #12]
 8015444:	e7d7      	b.n	80153f6 <__hexnan+0x2e>
 8015446:	2a29      	cmp	r2, #41	; 0x29
 8015448:	d156      	bne.n	80154f8 <__hexnan+0x130>
 801544a:	3102      	adds	r1, #2
 801544c:	f8ca 1000 	str.w	r1, [sl]
 8015450:	f1bb 0f00 	cmp.w	fp, #0
 8015454:	d050      	beq.n	80154f8 <__hexnan+0x130>
 8015456:	454c      	cmp	r4, r9
 8015458:	d206      	bcs.n	8015468 <__hexnan+0xa0>
 801545a:	2d07      	cmp	r5, #7
 801545c:	dc04      	bgt.n	8015468 <__hexnan+0xa0>
 801545e:	462a      	mov	r2, r5
 8015460:	4649      	mov	r1, r9
 8015462:	4620      	mov	r0, r4
 8015464:	f7ff ff8a 	bl	801537c <L_shift>
 8015468:	4544      	cmp	r4, r8
 801546a:	d934      	bls.n	80154d6 <__hexnan+0x10e>
 801546c:	4623      	mov	r3, r4
 801546e:	f1a8 0204 	sub.w	r2, r8, #4
 8015472:	f853 1b04 	ldr.w	r1, [r3], #4
 8015476:	429f      	cmp	r7, r3
 8015478:	f842 1f04 	str.w	r1, [r2, #4]!
 801547c:	d2f9      	bcs.n	8015472 <__hexnan+0xaa>
 801547e:	1b3b      	subs	r3, r7, r4
 8015480:	f023 0303 	bic.w	r3, r3, #3
 8015484:	3304      	adds	r3, #4
 8015486:	3401      	adds	r4, #1
 8015488:	3e03      	subs	r6, #3
 801548a:	42b4      	cmp	r4, r6
 801548c:	bf88      	it	hi
 801548e:	2304      	movhi	r3, #4
 8015490:	2200      	movs	r2, #0
 8015492:	4443      	add	r3, r8
 8015494:	f843 2b04 	str.w	r2, [r3], #4
 8015498:	429f      	cmp	r7, r3
 801549a:	d2fb      	bcs.n	8015494 <__hexnan+0xcc>
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	b91b      	cbnz	r3, 80154a8 <__hexnan+0xe0>
 80154a0:	4547      	cmp	r7, r8
 80154a2:	d127      	bne.n	80154f4 <__hexnan+0x12c>
 80154a4:	2301      	movs	r3, #1
 80154a6:	603b      	str	r3, [r7, #0]
 80154a8:	2005      	movs	r0, #5
 80154aa:	e026      	b.n	80154fa <__hexnan+0x132>
 80154ac:	3501      	adds	r5, #1
 80154ae:	2d08      	cmp	r5, #8
 80154b0:	f10b 0b01 	add.w	fp, fp, #1
 80154b4:	dd06      	ble.n	80154c4 <__hexnan+0xfc>
 80154b6:	4544      	cmp	r4, r8
 80154b8:	d9c3      	bls.n	8015442 <__hexnan+0x7a>
 80154ba:	2300      	movs	r3, #0
 80154bc:	2501      	movs	r5, #1
 80154be:	f844 3c04 	str.w	r3, [r4, #-4]
 80154c2:	3c04      	subs	r4, #4
 80154c4:	6822      	ldr	r2, [r4, #0]
 80154c6:	f000 000f 	and.w	r0, r0, #15
 80154ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80154ce:	6022      	str	r2, [r4, #0]
 80154d0:	e7b7      	b.n	8015442 <__hexnan+0x7a>
 80154d2:	2508      	movs	r5, #8
 80154d4:	e7b5      	b.n	8015442 <__hexnan+0x7a>
 80154d6:	9b01      	ldr	r3, [sp, #4]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d0df      	beq.n	801549c <__hexnan+0xd4>
 80154dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154e0:	f1c3 0320 	rsb	r3, r3, #32
 80154e4:	fa22 f303 	lsr.w	r3, r2, r3
 80154e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80154ec:	401a      	ands	r2, r3
 80154ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80154f2:	e7d3      	b.n	801549c <__hexnan+0xd4>
 80154f4:	3f04      	subs	r7, #4
 80154f6:	e7d1      	b.n	801549c <__hexnan+0xd4>
 80154f8:	2004      	movs	r0, #4
 80154fa:	b007      	add	sp, #28
 80154fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015500 <_localeconv_r>:
 8015500:	4800      	ldr	r0, [pc, #0]	; (8015504 <_localeconv_r+0x4>)
 8015502:	4770      	bx	lr
 8015504:	2000037c 	.word	0x2000037c

08015508 <_lseek_r>:
 8015508:	b538      	push	{r3, r4, r5, lr}
 801550a:	4604      	mov	r4, r0
 801550c:	4608      	mov	r0, r1
 801550e:	4611      	mov	r1, r2
 8015510:	2200      	movs	r2, #0
 8015512:	4d05      	ldr	r5, [pc, #20]	; (8015528 <_lseek_r+0x20>)
 8015514:	602a      	str	r2, [r5, #0]
 8015516:	461a      	mov	r2, r3
 8015518:	f7ee fcee 	bl	8003ef8 <_lseek>
 801551c:	1c43      	adds	r3, r0, #1
 801551e:	d102      	bne.n	8015526 <_lseek_r+0x1e>
 8015520:	682b      	ldr	r3, [r5, #0]
 8015522:	b103      	cbz	r3, 8015526 <_lseek_r+0x1e>
 8015524:	6023      	str	r3, [r4, #0]
 8015526:	bd38      	pop	{r3, r4, r5, pc}
 8015528:	20001d5c 	.word	0x20001d5c

0801552c <__ascii_mbtowc>:
 801552c:	b082      	sub	sp, #8
 801552e:	b901      	cbnz	r1, 8015532 <__ascii_mbtowc+0x6>
 8015530:	a901      	add	r1, sp, #4
 8015532:	b142      	cbz	r2, 8015546 <__ascii_mbtowc+0x1a>
 8015534:	b14b      	cbz	r3, 801554a <__ascii_mbtowc+0x1e>
 8015536:	7813      	ldrb	r3, [r2, #0]
 8015538:	600b      	str	r3, [r1, #0]
 801553a:	7812      	ldrb	r2, [r2, #0]
 801553c:	1e10      	subs	r0, r2, #0
 801553e:	bf18      	it	ne
 8015540:	2001      	movne	r0, #1
 8015542:	b002      	add	sp, #8
 8015544:	4770      	bx	lr
 8015546:	4610      	mov	r0, r2
 8015548:	e7fb      	b.n	8015542 <__ascii_mbtowc+0x16>
 801554a:	f06f 0001 	mvn.w	r0, #1
 801554e:	e7f8      	b.n	8015542 <__ascii_mbtowc+0x16>

08015550 <__malloc_lock>:
 8015550:	4801      	ldr	r0, [pc, #4]	; (8015558 <__malloc_lock+0x8>)
 8015552:	f7ee bdda 	b.w	800410a <__retarget_lock_acquire_recursive>
 8015556:	bf00      	nop
 8015558:	200006d8 	.word	0x200006d8

0801555c <__malloc_unlock>:
 801555c:	4801      	ldr	r0, [pc, #4]	; (8015564 <__malloc_unlock+0x8>)
 801555e:	f7ee bde8 	b.w	8004132 <__retarget_lock_release_recursive>
 8015562:	bf00      	nop
 8015564:	200006d8 	.word	0x200006d8

08015568 <_Balloc>:
 8015568:	b570      	push	{r4, r5, r6, lr}
 801556a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801556c:	4604      	mov	r4, r0
 801556e:	460d      	mov	r5, r1
 8015570:	b976      	cbnz	r6, 8015590 <_Balloc+0x28>
 8015572:	2010      	movs	r0, #16
 8015574:	f7fc fe9e 	bl	80122b4 <malloc>
 8015578:	4602      	mov	r2, r0
 801557a:	6260      	str	r0, [r4, #36]	; 0x24
 801557c:	b920      	cbnz	r0, 8015588 <_Balloc+0x20>
 801557e:	2166      	movs	r1, #102	; 0x66
 8015580:	4b17      	ldr	r3, [pc, #92]	; (80155e0 <_Balloc+0x78>)
 8015582:	4818      	ldr	r0, [pc, #96]	; (80155e4 <_Balloc+0x7c>)
 8015584:	f001 fa4a 	bl	8016a1c <__assert_func>
 8015588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801558c:	6006      	str	r6, [r0, #0]
 801558e:	60c6      	str	r6, [r0, #12]
 8015590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015592:	68f3      	ldr	r3, [r6, #12]
 8015594:	b183      	cbz	r3, 80155b8 <_Balloc+0x50>
 8015596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801559e:	b9b8      	cbnz	r0, 80155d0 <_Balloc+0x68>
 80155a0:	2101      	movs	r1, #1
 80155a2:	fa01 f605 	lsl.w	r6, r1, r5
 80155a6:	1d72      	adds	r2, r6, #5
 80155a8:	4620      	mov	r0, r4
 80155aa:	0092      	lsls	r2, r2, #2
 80155ac:	f7fc fed0 	bl	8012350 <_calloc_r>
 80155b0:	b160      	cbz	r0, 80155cc <_Balloc+0x64>
 80155b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155b6:	e00e      	b.n	80155d6 <_Balloc+0x6e>
 80155b8:	2221      	movs	r2, #33	; 0x21
 80155ba:	2104      	movs	r1, #4
 80155bc:	4620      	mov	r0, r4
 80155be:	f7fc fec7 	bl	8012350 <_calloc_r>
 80155c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155c4:	60f0      	str	r0, [r6, #12]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d1e4      	bne.n	8015596 <_Balloc+0x2e>
 80155cc:	2000      	movs	r0, #0
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	6802      	ldr	r2, [r0, #0]
 80155d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155d6:	2300      	movs	r3, #0
 80155d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155dc:	e7f7      	b.n	80155ce <_Balloc+0x66>
 80155de:	bf00      	nop
 80155e0:	080179c6 	.word	0x080179c6
 80155e4:	08017acc 	.word	0x08017acc

080155e8 <_Bfree>:
 80155e8:	b570      	push	{r4, r5, r6, lr}
 80155ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80155ec:	4605      	mov	r5, r0
 80155ee:	460c      	mov	r4, r1
 80155f0:	b976      	cbnz	r6, 8015610 <_Bfree+0x28>
 80155f2:	2010      	movs	r0, #16
 80155f4:	f7fc fe5e 	bl	80122b4 <malloc>
 80155f8:	4602      	mov	r2, r0
 80155fa:	6268      	str	r0, [r5, #36]	; 0x24
 80155fc:	b920      	cbnz	r0, 8015608 <_Bfree+0x20>
 80155fe:	218a      	movs	r1, #138	; 0x8a
 8015600:	4b08      	ldr	r3, [pc, #32]	; (8015624 <_Bfree+0x3c>)
 8015602:	4809      	ldr	r0, [pc, #36]	; (8015628 <_Bfree+0x40>)
 8015604:	f001 fa0a 	bl	8016a1c <__assert_func>
 8015608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801560c:	6006      	str	r6, [r0, #0]
 801560e:	60c6      	str	r6, [r0, #12]
 8015610:	b13c      	cbz	r4, 8015622 <_Bfree+0x3a>
 8015612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015614:	6862      	ldr	r2, [r4, #4]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801561c:	6021      	str	r1, [r4, #0]
 801561e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015622:	bd70      	pop	{r4, r5, r6, pc}
 8015624:	080179c6 	.word	0x080179c6
 8015628:	08017acc 	.word	0x08017acc

0801562c <__multadd>:
 801562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015630:	4698      	mov	r8, r3
 8015632:	460c      	mov	r4, r1
 8015634:	2300      	movs	r3, #0
 8015636:	690e      	ldr	r6, [r1, #16]
 8015638:	4607      	mov	r7, r0
 801563a:	f101 0014 	add.w	r0, r1, #20
 801563e:	6805      	ldr	r5, [r0, #0]
 8015640:	3301      	adds	r3, #1
 8015642:	b2a9      	uxth	r1, r5
 8015644:	fb02 8101 	mla	r1, r2, r1, r8
 8015648:	0c2d      	lsrs	r5, r5, #16
 801564a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801564e:	fb02 c505 	mla	r5, r2, r5, ip
 8015652:	b289      	uxth	r1, r1
 8015654:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015658:	429e      	cmp	r6, r3
 801565a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801565e:	f840 1b04 	str.w	r1, [r0], #4
 8015662:	dcec      	bgt.n	801563e <__multadd+0x12>
 8015664:	f1b8 0f00 	cmp.w	r8, #0
 8015668:	d022      	beq.n	80156b0 <__multadd+0x84>
 801566a:	68a3      	ldr	r3, [r4, #8]
 801566c:	42b3      	cmp	r3, r6
 801566e:	dc19      	bgt.n	80156a4 <__multadd+0x78>
 8015670:	6861      	ldr	r1, [r4, #4]
 8015672:	4638      	mov	r0, r7
 8015674:	3101      	adds	r1, #1
 8015676:	f7ff ff77 	bl	8015568 <_Balloc>
 801567a:	4605      	mov	r5, r0
 801567c:	b928      	cbnz	r0, 801568a <__multadd+0x5e>
 801567e:	4602      	mov	r2, r0
 8015680:	21b5      	movs	r1, #181	; 0xb5
 8015682:	4b0d      	ldr	r3, [pc, #52]	; (80156b8 <__multadd+0x8c>)
 8015684:	480d      	ldr	r0, [pc, #52]	; (80156bc <__multadd+0x90>)
 8015686:	f001 f9c9 	bl	8016a1c <__assert_func>
 801568a:	6922      	ldr	r2, [r4, #16]
 801568c:	f104 010c 	add.w	r1, r4, #12
 8015690:	3202      	adds	r2, #2
 8015692:	0092      	lsls	r2, r2, #2
 8015694:	300c      	adds	r0, #12
 8015696:	f7fc fe2b 	bl	80122f0 <memcpy>
 801569a:	4621      	mov	r1, r4
 801569c:	4638      	mov	r0, r7
 801569e:	f7ff ffa3 	bl	80155e8 <_Bfree>
 80156a2:	462c      	mov	r4, r5
 80156a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80156a8:	3601      	adds	r6, #1
 80156aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80156ae:	6126      	str	r6, [r4, #16]
 80156b0:	4620      	mov	r0, r4
 80156b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b6:	bf00      	nop
 80156b8:	08017a3c 	.word	0x08017a3c
 80156bc:	08017acc 	.word	0x08017acc

080156c0 <__s2b>:
 80156c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156c4:	4615      	mov	r5, r2
 80156c6:	2209      	movs	r2, #9
 80156c8:	461f      	mov	r7, r3
 80156ca:	3308      	adds	r3, #8
 80156cc:	460c      	mov	r4, r1
 80156ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80156d2:	4606      	mov	r6, r0
 80156d4:	2201      	movs	r2, #1
 80156d6:	2100      	movs	r1, #0
 80156d8:	429a      	cmp	r2, r3
 80156da:	db09      	blt.n	80156f0 <__s2b+0x30>
 80156dc:	4630      	mov	r0, r6
 80156de:	f7ff ff43 	bl	8015568 <_Balloc>
 80156e2:	b940      	cbnz	r0, 80156f6 <__s2b+0x36>
 80156e4:	4602      	mov	r2, r0
 80156e6:	21ce      	movs	r1, #206	; 0xce
 80156e8:	4b18      	ldr	r3, [pc, #96]	; (801574c <__s2b+0x8c>)
 80156ea:	4819      	ldr	r0, [pc, #100]	; (8015750 <__s2b+0x90>)
 80156ec:	f001 f996 	bl	8016a1c <__assert_func>
 80156f0:	0052      	lsls	r2, r2, #1
 80156f2:	3101      	adds	r1, #1
 80156f4:	e7f0      	b.n	80156d8 <__s2b+0x18>
 80156f6:	9b08      	ldr	r3, [sp, #32]
 80156f8:	2d09      	cmp	r5, #9
 80156fa:	6143      	str	r3, [r0, #20]
 80156fc:	f04f 0301 	mov.w	r3, #1
 8015700:	6103      	str	r3, [r0, #16]
 8015702:	dd16      	ble.n	8015732 <__s2b+0x72>
 8015704:	f104 0909 	add.w	r9, r4, #9
 8015708:	46c8      	mov	r8, r9
 801570a:	442c      	add	r4, r5
 801570c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015710:	4601      	mov	r1, r0
 8015712:	220a      	movs	r2, #10
 8015714:	4630      	mov	r0, r6
 8015716:	3b30      	subs	r3, #48	; 0x30
 8015718:	f7ff ff88 	bl	801562c <__multadd>
 801571c:	45a0      	cmp	r8, r4
 801571e:	d1f5      	bne.n	801570c <__s2b+0x4c>
 8015720:	f1a5 0408 	sub.w	r4, r5, #8
 8015724:	444c      	add	r4, r9
 8015726:	1b2d      	subs	r5, r5, r4
 8015728:	1963      	adds	r3, r4, r5
 801572a:	42bb      	cmp	r3, r7
 801572c:	db04      	blt.n	8015738 <__s2b+0x78>
 801572e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015732:	2509      	movs	r5, #9
 8015734:	340a      	adds	r4, #10
 8015736:	e7f6      	b.n	8015726 <__s2b+0x66>
 8015738:	f814 3b01 	ldrb.w	r3, [r4], #1
 801573c:	4601      	mov	r1, r0
 801573e:	220a      	movs	r2, #10
 8015740:	4630      	mov	r0, r6
 8015742:	3b30      	subs	r3, #48	; 0x30
 8015744:	f7ff ff72 	bl	801562c <__multadd>
 8015748:	e7ee      	b.n	8015728 <__s2b+0x68>
 801574a:	bf00      	nop
 801574c:	08017a3c 	.word	0x08017a3c
 8015750:	08017acc 	.word	0x08017acc

08015754 <__hi0bits>:
 8015754:	0c02      	lsrs	r2, r0, #16
 8015756:	0412      	lsls	r2, r2, #16
 8015758:	4603      	mov	r3, r0
 801575a:	b9ca      	cbnz	r2, 8015790 <__hi0bits+0x3c>
 801575c:	0403      	lsls	r3, r0, #16
 801575e:	2010      	movs	r0, #16
 8015760:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015764:	bf04      	itt	eq
 8015766:	021b      	lsleq	r3, r3, #8
 8015768:	3008      	addeq	r0, #8
 801576a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801576e:	bf04      	itt	eq
 8015770:	011b      	lsleq	r3, r3, #4
 8015772:	3004      	addeq	r0, #4
 8015774:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015778:	bf04      	itt	eq
 801577a:	009b      	lsleq	r3, r3, #2
 801577c:	3002      	addeq	r0, #2
 801577e:	2b00      	cmp	r3, #0
 8015780:	db05      	blt.n	801578e <__hi0bits+0x3a>
 8015782:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8015786:	f100 0001 	add.w	r0, r0, #1
 801578a:	bf08      	it	eq
 801578c:	2020      	moveq	r0, #32
 801578e:	4770      	bx	lr
 8015790:	2000      	movs	r0, #0
 8015792:	e7e5      	b.n	8015760 <__hi0bits+0xc>

08015794 <__lo0bits>:
 8015794:	6803      	ldr	r3, [r0, #0]
 8015796:	4602      	mov	r2, r0
 8015798:	f013 0007 	ands.w	r0, r3, #7
 801579c:	d00b      	beq.n	80157b6 <__lo0bits+0x22>
 801579e:	07d9      	lsls	r1, r3, #31
 80157a0:	d422      	bmi.n	80157e8 <__lo0bits+0x54>
 80157a2:	0798      	lsls	r0, r3, #30
 80157a4:	bf49      	itett	mi
 80157a6:	085b      	lsrmi	r3, r3, #1
 80157a8:	089b      	lsrpl	r3, r3, #2
 80157aa:	2001      	movmi	r0, #1
 80157ac:	6013      	strmi	r3, [r2, #0]
 80157ae:	bf5c      	itt	pl
 80157b0:	2002      	movpl	r0, #2
 80157b2:	6013      	strpl	r3, [r2, #0]
 80157b4:	4770      	bx	lr
 80157b6:	b299      	uxth	r1, r3
 80157b8:	b909      	cbnz	r1, 80157be <__lo0bits+0x2a>
 80157ba:	2010      	movs	r0, #16
 80157bc:	0c1b      	lsrs	r3, r3, #16
 80157be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80157c2:	bf04      	itt	eq
 80157c4:	0a1b      	lsreq	r3, r3, #8
 80157c6:	3008      	addeq	r0, #8
 80157c8:	0719      	lsls	r1, r3, #28
 80157ca:	bf04      	itt	eq
 80157cc:	091b      	lsreq	r3, r3, #4
 80157ce:	3004      	addeq	r0, #4
 80157d0:	0799      	lsls	r1, r3, #30
 80157d2:	bf04      	itt	eq
 80157d4:	089b      	lsreq	r3, r3, #2
 80157d6:	3002      	addeq	r0, #2
 80157d8:	07d9      	lsls	r1, r3, #31
 80157da:	d403      	bmi.n	80157e4 <__lo0bits+0x50>
 80157dc:	085b      	lsrs	r3, r3, #1
 80157de:	f100 0001 	add.w	r0, r0, #1
 80157e2:	d003      	beq.n	80157ec <__lo0bits+0x58>
 80157e4:	6013      	str	r3, [r2, #0]
 80157e6:	4770      	bx	lr
 80157e8:	2000      	movs	r0, #0
 80157ea:	4770      	bx	lr
 80157ec:	2020      	movs	r0, #32
 80157ee:	4770      	bx	lr

080157f0 <__i2b>:
 80157f0:	b510      	push	{r4, lr}
 80157f2:	460c      	mov	r4, r1
 80157f4:	2101      	movs	r1, #1
 80157f6:	f7ff feb7 	bl	8015568 <_Balloc>
 80157fa:	4602      	mov	r2, r0
 80157fc:	b928      	cbnz	r0, 801580a <__i2b+0x1a>
 80157fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015802:	4b04      	ldr	r3, [pc, #16]	; (8015814 <__i2b+0x24>)
 8015804:	4804      	ldr	r0, [pc, #16]	; (8015818 <__i2b+0x28>)
 8015806:	f001 f909 	bl	8016a1c <__assert_func>
 801580a:	2301      	movs	r3, #1
 801580c:	6144      	str	r4, [r0, #20]
 801580e:	6103      	str	r3, [r0, #16]
 8015810:	bd10      	pop	{r4, pc}
 8015812:	bf00      	nop
 8015814:	08017a3c 	.word	0x08017a3c
 8015818:	08017acc 	.word	0x08017acc

0801581c <__multiply>:
 801581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015820:	4614      	mov	r4, r2
 8015822:	690a      	ldr	r2, [r1, #16]
 8015824:	6923      	ldr	r3, [r4, #16]
 8015826:	460d      	mov	r5, r1
 8015828:	429a      	cmp	r2, r3
 801582a:	bfbe      	ittt	lt
 801582c:	460b      	movlt	r3, r1
 801582e:	4625      	movlt	r5, r4
 8015830:	461c      	movlt	r4, r3
 8015832:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015836:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801583a:	68ab      	ldr	r3, [r5, #8]
 801583c:	6869      	ldr	r1, [r5, #4]
 801583e:	eb0a 0709 	add.w	r7, sl, r9
 8015842:	42bb      	cmp	r3, r7
 8015844:	b085      	sub	sp, #20
 8015846:	bfb8      	it	lt
 8015848:	3101      	addlt	r1, #1
 801584a:	f7ff fe8d 	bl	8015568 <_Balloc>
 801584e:	b930      	cbnz	r0, 801585e <__multiply+0x42>
 8015850:	4602      	mov	r2, r0
 8015852:	f240 115d 	movw	r1, #349	; 0x15d
 8015856:	4b41      	ldr	r3, [pc, #260]	; (801595c <__multiply+0x140>)
 8015858:	4841      	ldr	r0, [pc, #260]	; (8015960 <__multiply+0x144>)
 801585a:	f001 f8df 	bl	8016a1c <__assert_func>
 801585e:	f100 0614 	add.w	r6, r0, #20
 8015862:	4633      	mov	r3, r6
 8015864:	2200      	movs	r2, #0
 8015866:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801586a:	4543      	cmp	r3, r8
 801586c:	d31e      	bcc.n	80158ac <__multiply+0x90>
 801586e:	f105 0c14 	add.w	ip, r5, #20
 8015872:	f104 0314 	add.w	r3, r4, #20
 8015876:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801587a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801587e:	9202      	str	r2, [sp, #8]
 8015880:	ebac 0205 	sub.w	r2, ip, r5
 8015884:	3a15      	subs	r2, #21
 8015886:	f022 0203 	bic.w	r2, r2, #3
 801588a:	3204      	adds	r2, #4
 801588c:	f105 0115 	add.w	r1, r5, #21
 8015890:	458c      	cmp	ip, r1
 8015892:	bf38      	it	cc
 8015894:	2204      	movcc	r2, #4
 8015896:	9201      	str	r2, [sp, #4]
 8015898:	9a02      	ldr	r2, [sp, #8]
 801589a:	9303      	str	r3, [sp, #12]
 801589c:	429a      	cmp	r2, r3
 801589e:	d808      	bhi.n	80158b2 <__multiply+0x96>
 80158a0:	2f00      	cmp	r7, #0
 80158a2:	dc55      	bgt.n	8015950 <__multiply+0x134>
 80158a4:	6107      	str	r7, [r0, #16]
 80158a6:	b005      	add	sp, #20
 80158a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ac:	f843 2b04 	str.w	r2, [r3], #4
 80158b0:	e7db      	b.n	801586a <__multiply+0x4e>
 80158b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80158b6:	f1ba 0f00 	cmp.w	sl, #0
 80158ba:	d020      	beq.n	80158fe <__multiply+0xe2>
 80158bc:	46b1      	mov	r9, r6
 80158be:	2200      	movs	r2, #0
 80158c0:	f105 0e14 	add.w	lr, r5, #20
 80158c4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80158c8:	f8d9 b000 	ldr.w	fp, [r9]
 80158cc:	b2a1      	uxth	r1, r4
 80158ce:	fa1f fb8b 	uxth.w	fp, fp
 80158d2:	fb0a b101 	mla	r1, sl, r1, fp
 80158d6:	4411      	add	r1, r2
 80158d8:	f8d9 2000 	ldr.w	r2, [r9]
 80158dc:	0c24      	lsrs	r4, r4, #16
 80158de:	0c12      	lsrs	r2, r2, #16
 80158e0:	fb0a 2404 	mla	r4, sl, r4, r2
 80158e4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80158e8:	b289      	uxth	r1, r1
 80158ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80158ee:	45f4      	cmp	ip, lr
 80158f0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80158f4:	f849 1b04 	str.w	r1, [r9], #4
 80158f8:	d8e4      	bhi.n	80158c4 <__multiply+0xa8>
 80158fa:	9901      	ldr	r1, [sp, #4]
 80158fc:	5072      	str	r2, [r6, r1]
 80158fe:	9a03      	ldr	r2, [sp, #12]
 8015900:	3304      	adds	r3, #4
 8015902:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015906:	f1b9 0f00 	cmp.w	r9, #0
 801590a:	d01f      	beq.n	801594c <__multiply+0x130>
 801590c:	46b6      	mov	lr, r6
 801590e:	f04f 0a00 	mov.w	sl, #0
 8015912:	6834      	ldr	r4, [r6, #0]
 8015914:	f105 0114 	add.w	r1, r5, #20
 8015918:	880a      	ldrh	r2, [r1, #0]
 801591a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801591e:	b2a4      	uxth	r4, r4
 8015920:	fb09 b202 	mla	r2, r9, r2, fp
 8015924:	4492      	add	sl, r2
 8015926:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801592a:	f84e 4b04 	str.w	r4, [lr], #4
 801592e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015932:	f8be 2000 	ldrh.w	r2, [lr]
 8015936:	0c24      	lsrs	r4, r4, #16
 8015938:	fb09 2404 	mla	r4, r9, r4, r2
 801593c:	458c      	cmp	ip, r1
 801593e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015942:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015946:	d8e7      	bhi.n	8015918 <__multiply+0xfc>
 8015948:	9a01      	ldr	r2, [sp, #4]
 801594a:	50b4      	str	r4, [r6, r2]
 801594c:	3604      	adds	r6, #4
 801594e:	e7a3      	b.n	8015898 <__multiply+0x7c>
 8015950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015954:	2b00      	cmp	r3, #0
 8015956:	d1a5      	bne.n	80158a4 <__multiply+0x88>
 8015958:	3f01      	subs	r7, #1
 801595a:	e7a1      	b.n	80158a0 <__multiply+0x84>
 801595c:	08017a3c 	.word	0x08017a3c
 8015960:	08017acc 	.word	0x08017acc

08015964 <__pow5mult>:
 8015964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015968:	4615      	mov	r5, r2
 801596a:	f012 0203 	ands.w	r2, r2, #3
 801596e:	4606      	mov	r6, r0
 8015970:	460f      	mov	r7, r1
 8015972:	d007      	beq.n	8015984 <__pow5mult+0x20>
 8015974:	4c25      	ldr	r4, [pc, #148]	; (8015a0c <__pow5mult+0xa8>)
 8015976:	3a01      	subs	r2, #1
 8015978:	2300      	movs	r3, #0
 801597a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801597e:	f7ff fe55 	bl	801562c <__multadd>
 8015982:	4607      	mov	r7, r0
 8015984:	10ad      	asrs	r5, r5, #2
 8015986:	d03d      	beq.n	8015a04 <__pow5mult+0xa0>
 8015988:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801598a:	b97c      	cbnz	r4, 80159ac <__pow5mult+0x48>
 801598c:	2010      	movs	r0, #16
 801598e:	f7fc fc91 	bl	80122b4 <malloc>
 8015992:	4602      	mov	r2, r0
 8015994:	6270      	str	r0, [r6, #36]	; 0x24
 8015996:	b928      	cbnz	r0, 80159a4 <__pow5mult+0x40>
 8015998:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801599c:	4b1c      	ldr	r3, [pc, #112]	; (8015a10 <__pow5mult+0xac>)
 801599e:	481d      	ldr	r0, [pc, #116]	; (8015a14 <__pow5mult+0xb0>)
 80159a0:	f001 f83c 	bl	8016a1c <__assert_func>
 80159a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159a8:	6004      	str	r4, [r0, #0]
 80159aa:	60c4      	str	r4, [r0, #12]
 80159ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159b4:	b94c      	cbnz	r4, 80159ca <__pow5mult+0x66>
 80159b6:	f240 2171 	movw	r1, #625	; 0x271
 80159ba:	4630      	mov	r0, r6
 80159bc:	f7ff ff18 	bl	80157f0 <__i2b>
 80159c0:	2300      	movs	r3, #0
 80159c2:	4604      	mov	r4, r0
 80159c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80159c8:	6003      	str	r3, [r0, #0]
 80159ca:	f04f 0900 	mov.w	r9, #0
 80159ce:	07eb      	lsls	r3, r5, #31
 80159d0:	d50a      	bpl.n	80159e8 <__pow5mult+0x84>
 80159d2:	4639      	mov	r1, r7
 80159d4:	4622      	mov	r2, r4
 80159d6:	4630      	mov	r0, r6
 80159d8:	f7ff ff20 	bl	801581c <__multiply>
 80159dc:	4680      	mov	r8, r0
 80159de:	4639      	mov	r1, r7
 80159e0:	4630      	mov	r0, r6
 80159e2:	f7ff fe01 	bl	80155e8 <_Bfree>
 80159e6:	4647      	mov	r7, r8
 80159e8:	106d      	asrs	r5, r5, #1
 80159ea:	d00b      	beq.n	8015a04 <__pow5mult+0xa0>
 80159ec:	6820      	ldr	r0, [r4, #0]
 80159ee:	b938      	cbnz	r0, 8015a00 <__pow5mult+0x9c>
 80159f0:	4622      	mov	r2, r4
 80159f2:	4621      	mov	r1, r4
 80159f4:	4630      	mov	r0, r6
 80159f6:	f7ff ff11 	bl	801581c <__multiply>
 80159fa:	6020      	str	r0, [r4, #0]
 80159fc:	f8c0 9000 	str.w	r9, [r0]
 8015a00:	4604      	mov	r4, r0
 8015a02:	e7e4      	b.n	80159ce <__pow5mult+0x6a>
 8015a04:	4638      	mov	r0, r7
 8015a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a0a:	bf00      	nop
 8015a0c:	08017c20 	.word	0x08017c20
 8015a10:	080179c6 	.word	0x080179c6
 8015a14:	08017acc 	.word	0x08017acc

08015a18 <__lshift>:
 8015a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a1c:	460c      	mov	r4, r1
 8015a1e:	4607      	mov	r7, r0
 8015a20:	4691      	mov	r9, r2
 8015a22:	6923      	ldr	r3, [r4, #16]
 8015a24:	6849      	ldr	r1, [r1, #4]
 8015a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a2a:	68a3      	ldr	r3, [r4, #8]
 8015a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a30:	f108 0601 	add.w	r6, r8, #1
 8015a34:	42b3      	cmp	r3, r6
 8015a36:	db0b      	blt.n	8015a50 <__lshift+0x38>
 8015a38:	4638      	mov	r0, r7
 8015a3a:	f7ff fd95 	bl	8015568 <_Balloc>
 8015a3e:	4605      	mov	r5, r0
 8015a40:	b948      	cbnz	r0, 8015a56 <__lshift+0x3e>
 8015a42:	4602      	mov	r2, r0
 8015a44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015a48:	4b27      	ldr	r3, [pc, #156]	; (8015ae8 <__lshift+0xd0>)
 8015a4a:	4828      	ldr	r0, [pc, #160]	; (8015aec <__lshift+0xd4>)
 8015a4c:	f000 ffe6 	bl	8016a1c <__assert_func>
 8015a50:	3101      	adds	r1, #1
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	e7ee      	b.n	8015a34 <__lshift+0x1c>
 8015a56:	2300      	movs	r3, #0
 8015a58:	f100 0114 	add.w	r1, r0, #20
 8015a5c:	f100 0210 	add.w	r2, r0, #16
 8015a60:	4618      	mov	r0, r3
 8015a62:	4553      	cmp	r3, sl
 8015a64:	db33      	blt.n	8015ace <__lshift+0xb6>
 8015a66:	6920      	ldr	r0, [r4, #16]
 8015a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a6c:	f104 0314 	add.w	r3, r4, #20
 8015a70:	f019 091f 	ands.w	r9, r9, #31
 8015a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015a7c:	d02b      	beq.n	8015ad6 <__lshift+0xbe>
 8015a7e:	468a      	mov	sl, r1
 8015a80:	2200      	movs	r2, #0
 8015a82:	f1c9 0e20 	rsb	lr, r9, #32
 8015a86:	6818      	ldr	r0, [r3, #0]
 8015a88:	fa00 f009 	lsl.w	r0, r0, r9
 8015a8c:	4302      	orrs	r2, r0
 8015a8e:	f84a 2b04 	str.w	r2, [sl], #4
 8015a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a96:	459c      	cmp	ip, r3
 8015a98:	fa22 f20e 	lsr.w	r2, r2, lr
 8015a9c:	d8f3      	bhi.n	8015a86 <__lshift+0x6e>
 8015a9e:	ebac 0304 	sub.w	r3, ip, r4
 8015aa2:	3b15      	subs	r3, #21
 8015aa4:	f023 0303 	bic.w	r3, r3, #3
 8015aa8:	3304      	adds	r3, #4
 8015aaa:	f104 0015 	add.w	r0, r4, #21
 8015aae:	4584      	cmp	ip, r0
 8015ab0:	bf38      	it	cc
 8015ab2:	2304      	movcc	r3, #4
 8015ab4:	50ca      	str	r2, [r1, r3]
 8015ab6:	b10a      	cbz	r2, 8015abc <__lshift+0xa4>
 8015ab8:	f108 0602 	add.w	r6, r8, #2
 8015abc:	3e01      	subs	r6, #1
 8015abe:	4638      	mov	r0, r7
 8015ac0:	4621      	mov	r1, r4
 8015ac2:	612e      	str	r6, [r5, #16]
 8015ac4:	f7ff fd90 	bl	80155e8 <_Bfree>
 8015ac8:	4628      	mov	r0, r5
 8015aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	e7c5      	b.n	8015a62 <__lshift+0x4a>
 8015ad6:	3904      	subs	r1, #4
 8015ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015adc:	459c      	cmp	ip, r3
 8015ade:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ae2:	d8f9      	bhi.n	8015ad8 <__lshift+0xc0>
 8015ae4:	e7ea      	b.n	8015abc <__lshift+0xa4>
 8015ae6:	bf00      	nop
 8015ae8:	08017a3c 	.word	0x08017a3c
 8015aec:	08017acc 	.word	0x08017acc

08015af0 <__mcmp>:
 8015af0:	4603      	mov	r3, r0
 8015af2:	690a      	ldr	r2, [r1, #16]
 8015af4:	6900      	ldr	r0, [r0, #16]
 8015af6:	b530      	push	{r4, r5, lr}
 8015af8:	1a80      	subs	r0, r0, r2
 8015afa:	d10d      	bne.n	8015b18 <__mcmp+0x28>
 8015afc:	3314      	adds	r3, #20
 8015afe:	3114      	adds	r1, #20
 8015b00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015b04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015b10:	4295      	cmp	r5, r2
 8015b12:	d002      	beq.n	8015b1a <__mcmp+0x2a>
 8015b14:	d304      	bcc.n	8015b20 <__mcmp+0x30>
 8015b16:	2001      	movs	r0, #1
 8015b18:	bd30      	pop	{r4, r5, pc}
 8015b1a:	42a3      	cmp	r3, r4
 8015b1c:	d3f4      	bcc.n	8015b08 <__mcmp+0x18>
 8015b1e:	e7fb      	b.n	8015b18 <__mcmp+0x28>
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b24:	e7f8      	b.n	8015b18 <__mcmp+0x28>
	...

08015b28 <__mdiff>:
 8015b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b2c:	460c      	mov	r4, r1
 8015b2e:	4606      	mov	r6, r0
 8015b30:	4611      	mov	r1, r2
 8015b32:	4620      	mov	r0, r4
 8015b34:	4692      	mov	sl, r2
 8015b36:	f7ff ffdb 	bl	8015af0 <__mcmp>
 8015b3a:	1e05      	subs	r5, r0, #0
 8015b3c:	d111      	bne.n	8015b62 <__mdiff+0x3a>
 8015b3e:	4629      	mov	r1, r5
 8015b40:	4630      	mov	r0, r6
 8015b42:	f7ff fd11 	bl	8015568 <_Balloc>
 8015b46:	4602      	mov	r2, r0
 8015b48:	b928      	cbnz	r0, 8015b56 <__mdiff+0x2e>
 8015b4a:	f240 2132 	movw	r1, #562	; 0x232
 8015b4e:	4b3c      	ldr	r3, [pc, #240]	; (8015c40 <__mdiff+0x118>)
 8015b50:	483c      	ldr	r0, [pc, #240]	; (8015c44 <__mdiff+0x11c>)
 8015b52:	f000 ff63 	bl	8016a1c <__assert_func>
 8015b56:	2301      	movs	r3, #1
 8015b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b5c:	4610      	mov	r0, r2
 8015b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b62:	bfa4      	itt	ge
 8015b64:	4653      	movge	r3, sl
 8015b66:	46a2      	movge	sl, r4
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015b6e:	bfa6      	itte	ge
 8015b70:	461c      	movge	r4, r3
 8015b72:	2500      	movge	r5, #0
 8015b74:	2501      	movlt	r5, #1
 8015b76:	f7ff fcf7 	bl	8015568 <_Balloc>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	b918      	cbnz	r0, 8015b86 <__mdiff+0x5e>
 8015b7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015b82:	4b2f      	ldr	r3, [pc, #188]	; (8015c40 <__mdiff+0x118>)
 8015b84:	e7e4      	b.n	8015b50 <__mdiff+0x28>
 8015b86:	f100 0814 	add.w	r8, r0, #20
 8015b8a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8015b8e:	60c5      	str	r5, [r0, #12]
 8015b90:	f04f 0c00 	mov.w	ip, #0
 8015b94:	f10a 0514 	add.w	r5, sl, #20
 8015b98:	f10a 0010 	add.w	r0, sl, #16
 8015b9c:	46c2      	mov	sl, r8
 8015b9e:	6926      	ldr	r6, [r4, #16]
 8015ba0:	f104 0914 	add.w	r9, r4, #20
 8015ba4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8015ba8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015bac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8015bb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8015bb4:	fa1f f18b 	uxth.w	r1, fp
 8015bb8:	4461      	add	r1, ip
 8015bba:	fa1f fc83 	uxth.w	ip, r3
 8015bbe:	0c1b      	lsrs	r3, r3, #16
 8015bc0:	eba1 010c 	sub.w	r1, r1, ip
 8015bc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015bc8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015bcc:	b289      	uxth	r1, r1
 8015bce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015bd2:	454e      	cmp	r6, r9
 8015bd4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015bd8:	f84a 3b04 	str.w	r3, [sl], #4
 8015bdc:	d8e6      	bhi.n	8015bac <__mdiff+0x84>
 8015bde:	1b33      	subs	r3, r6, r4
 8015be0:	3b15      	subs	r3, #21
 8015be2:	f023 0303 	bic.w	r3, r3, #3
 8015be6:	3415      	adds	r4, #21
 8015be8:	3304      	adds	r3, #4
 8015bea:	42a6      	cmp	r6, r4
 8015bec:	bf38      	it	cc
 8015bee:	2304      	movcc	r3, #4
 8015bf0:	441d      	add	r5, r3
 8015bf2:	4443      	add	r3, r8
 8015bf4:	461e      	mov	r6, r3
 8015bf6:	462c      	mov	r4, r5
 8015bf8:	4574      	cmp	r4, lr
 8015bfa:	d30e      	bcc.n	8015c1a <__mdiff+0xf2>
 8015bfc:	f10e 0103 	add.w	r1, lr, #3
 8015c00:	1b49      	subs	r1, r1, r5
 8015c02:	f021 0103 	bic.w	r1, r1, #3
 8015c06:	3d03      	subs	r5, #3
 8015c08:	45ae      	cmp	lr, r5
 8015c0a:	bf38      	it	cc
 8015c0c:	2100      	movcc	r1, #0
 8015c0e:	4419      	add	r1, r3
 8015c10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015c14:	b18b      	cbz	r3, 8015c3a <__mdiff+0x112>
 8015c16:	6117      	str	r7, [r2, #16]
 8015c18:	e7a0      	b.n	8015b5c <__mdiff+0x34>
 8015c1a:	f854 8b04 	ldr.w	r8, [r4], #4
 8015c1e:	fa1f f188 	uxth.w	r1, r8
 8015c22:	4461      	add	r1, ip
 8015c24:	1408      	asrs	r0, r1, #16
 8015c26:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8015c2a:	b289      	uxth	r1, r1
 8015c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015c30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015c34:	f846 1b04 	str.w	r1, [r6], #4
 8015c38:	e7de      	b.n	8015bf8 <__mdiff+0xd0>
 8015c3a:	3f01      	subs	r7, #1
 8015c3c:	e7e8      	b.n	8015c10 <__mdiff+0xe8>
 8015c3e:	bf00      	nop
 8015c40:	08017a3c 	.word	0x08017a3c
 8015c44:	08017acc 	.word	0x08017acc

08015c48 <__ulp>:
 8015c48:	4b11      	ldr	r3, [pc, #68]	; (8015c90 <__ulp+0x48>)
 8015c4a:	400b      	ands	r3, r1
 8015c4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	dd02      	ble.n	8015c5a <__ulp+0x12>
 8015c54:	2000      	movs	r0, #0
 8015c56:	4619      	mov	r1, r3
 8015c58:	4770      	bx	lr
 8015c5a:	425b      	negs	r3, r3
 8015c5c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015c60:	f04f 0000 	mov.w	r0, #0
 8015c64:	f04f 0100 	mov.w	r1, #0
 8015c68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015c6c:	da04      	bge.n	8015c78 <__ulp+0x30>
 8015c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015c72:	fa43 f102 	asr.w	r1, r3, r2
 8015c76:	4770      	bx	lr
 8015c78:	f1a2 0314 	sub.w	r3, r2, #20
 8015c7c:	2b1e      	cmp	r3, #30
 8015c7e:	bfd6      	itet	le
 8015c80:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015c84:	2301      	movgt	r3, #1
 8015c86:	fa22 f303 	lsrle.w	r3, r2, r3
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	4770      	bx	lr
 8015c8e:	bf00      	nop
 8015c90:	7ff00000 	.word	0x7ff00000

08015c94 <__b2d>:
 8015c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c98:	6907      	ldr	r7, [r0, #16]
 8015c9a:	f100 0914 	add.w	r9, r0, #20
 8015c9e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8015ca2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8015ca6:	f1a7 0804 	sub.w	r8, r7, #4
 8015caa:	4630      	mov	r0, r6
 8015cac:	f7ff fd52 	bl	8015754 <__hi0bits>
 8015cb0:	f1c0 0320 	rsb	r3, r0, #32
 8015cb4:	280a      	cmp	r0, #10
 8015cb6:	600b      	str	r3, [r1, #0]
 8015cb8:	491f      	ldr	r1, [pc, #124]	; (8015d38 <__b2d+0xa4>)
 8015cba:	dc17      	bgt.n	8015cec <__b2d+0x58>
 8015cbc:	45c1      	cmp	r9, r8
 8015cbe:	bf28      	it	cs
 8015cc0:	2200      	movcs	r2, #0
 8015cc2:	f1c0 0c0b 	rsb	ip, r0, #11
 8015cc6:	fa26 f30c 	lsr.w	r3, r6, ip
 8015cca:	bf38      	it	cc
 8015ccc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015cd0:	ea43 0501 	orr.w	r5, r3, r1
 8015cd4:	f100 0315 	add.w	r3, r0, #21
 8015cd8:	fa06 f303 	lsl.w	r3, r6, r3
 8015cdc:	fa22 f20c 	lsr.w	r2, r2, ip
 8015ce0:	ea43 0402 	orr.w	r4, r3, r2
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cec:	45c1      	cmp	r9, r8
 8015cee:	bf2e      	itee	cs
 8015cf0:	2200      	movcs	r2, #0
 8015cf2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015cf6:	f1a7 0808 	subcc.w	r8, r7, #8
 8015cfa:	f1b0 030b 	subs.w	r3, r0, #11
 8015cfe:	d016      	beq.n	8015d2e <__b2d+0x9a>
 8015d00:	f1c3 0720 	rsb	r7, r3, #32
 8015d04:	fa22 f107 	lsr.w	r1, r2, r7
 8015d08:	45c8      	cmp	r8, r9
 8015d0a:	fa06 f603 	lsl.w	r6, r6, r3
 8015d0e:	ea46 0601 	orr.w	r6, r6, r1
 8015d12:	bf94      	ite	ls
 8015d14:	2100      	movls	r1, #0
 8015d16:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8015d1a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8015d1e:	fa02 f003 	lsl.w	r0, r2, r3
 8015d22:	40f9      	lsrs	r1, r7
 8015d24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015d28:	ea40 0401 	orr.w	r4, r0, r1
 8015d2c:	e7da      	b.n	8015ce4 <__b2d+0x50>
 8015d2e:	4614      	mov	r4, r2
 8015d30:	ea46 0501 	orr.w	r5, r6, r1
 8015d34:	e7d6      	b.n	8015ce4 <__b2d+0x50>
 8015d36:	bf00      	nop
 8015d38:	3ff00000 	.word	0x3ff00000

08015d3c <__d2b>:
 8015d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d40:	2101      	movs	r1, #1
 8015d42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8015d46:	4690      	mov	r8, r2
 8015d48:	461d      	mov	r5, r3
 8015d4a:	f7ff fc0d 	bl	8015568 <_Balloc>
 8015d4e:	4604      	mov	r4, r0
 8015d50:	b930      	cbnz	r0, 8015d60 <__d2b+0x24>
 8015d52:	4602      	mov	r2, r0
 8015d54:	f240 310a 	movw	r1, #778	; 0x30a
 8015d58:	4b24      	ldr	r3, [pc, #144]	; (8015dec <__d2b+0xb0>)
 8015d5a:	4825      	ldr	r0, [pc, #148]	; (8015df0 <__d2b+0xb4>)
 8015d5c:	f000 fe5e 	bl	8016a1c <__assert_func>
 8015d60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015d64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8015d68:	bb2d      	cbnz	r5, 8015db6 <__d2b+0x7a>
 8015d6a:	9301      	str	r3, [sp, #4]
 8015d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8015d70:	d026      	beq.n	8015dc0 <__d2b+0x84>
 8015d72:	4668      	mov	r0, sp
 8015d74:	9300      	str	r3, [sp, #0]
 8015d76:	f7ff fd0d 	bl	8015794 <__lo0bits>
 8015d7a:	9900      	ldr	r1, [sp, #0]
 8015d7c:	b1f0      	cbz	r0, 8015dbc <__d2b+0x80>
 8015d7e:	9a01      	ldr	r2, [sp, #4]
 8015d80:	f1c0 0320 	rsb	r3, r0, #32
 8015d84:	fa02 f303 	lsl.w	r3, r2, r3
 8015d88:	430b      	orrs	r3, r1
 8015d8a:	40c2      	lsrs	r2, r0
 8015d8c:	6163      	str	r3, [r4, #20]
 8015d8e:	9201      	str	r2, [sp, #4]
 8015d90:	9b01      	ldr	r3, [sp, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	bf14      	ite	ne
 8015d96:	2102      	movne	r1, #2
 8015d98:	2101      	moveq	r1, #1
 8015d9a:	61a3      	str	r3, [r4, #24]
 8015d9c:	6121      	str	r1, [r4, #16]
 8015d9e:	b1c5      	cbz	r5, 8015dd2 <__d2b+0x96>
 8015da0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015da4:	4405      	add	r5, r0
 8015da6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015daa:	603d      	str	r5, [r7, #0]
 8015dac:	6030      	str	r0, [r6, #0]
 8015dae:	4620      	mov	r0, r4
 8015db0:	b002      	add	sp, #8
 8015db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015dba:	e7d6      	b.n	8015d6a <__d2b+0x2e>
 8015dbc:	6161      	str	r1, [r4, #20]
 8015dbe:	e7e7      	b.n	8015d90 <__d2b+0x54>
 8015dc0:	a801      	add	r0, sp, #4
 8015dc2:	f7ff fce7 	bl	8015794 <__lo0bits>
 8015dc6:	2101      	movs	r1, #1
 8015dc8:	9b01      	ldr	r3, [sp, #4]
 8015dca:	6121      	str	r1, [r4, #16]
 8015dcc:	6163      	str	r3, [r4, #20]
 8015dce:	3020      	adds	r0, #32
 8015dd0:	e7e5      	b.n	8015d9e <__d2b+0x62>
 8015dd2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015dd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015dda:	6038      	str	r0, [r7, #0]
 8015ddc:	6918      	ldr	r0, [r3, #16]
 8015dde:	f7ff fcb9 	bl	8015754 <__hi0bits>
 8015de2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8015de6:	6031      	str	r1, [r6, #0]
 8015de8:	e7e1      	b.n	8015dae <__d2b+0x72>
 8015dea:	bf00      	nop
 8015dec:	08017a3c 	.word	0x08017a3c
 8015df0:	08017acc 	.word	0x08017acc

08015df4 <__ratio>:
 8015df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df8:	4688      	mov	r8, r1
 8015dfa:	4669      	mov	r1, sp
 8015dfc:	4681      	mov	r9, r0
 8015dfe:	f7ff ff49 	bl	8015c94 <__b2d>
 8015e02:	460f      	mov	r7, r1
 8015e04:	4604      	mov	r4, r0
 8015e06:	460d      	mov	r5, r1
 8015e08:	4640      	mov	r0, r8
 8015e0a:	a901      	add	r1, sp, #4
 8015e0c:	f7ff ff42 	bl	8015c94 <__b2d>
 8015e10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015e18:	468b      	mov	fp, r1
 8015e1a:	eba3 0c02 	sub.w	ip, r3, r2
 8015e1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e22:	1a9b      	subs	r3, r3, r2
 8015e24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	bfd5      	itete	le
 8015e2c:	460a      	movle	r2, r1
 8015e2e:	462a      	movgt	r2, r5
 8015e30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015e34:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015e38:	bfd8      	it	le
 8015e3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015e3e:	465b      	mov	r3, fp
 8015e40:	4602      	mov	r2, r0
 8015e42:	4639      	mov	r1, r7
 8015e44:	4620      	mov	r0, r4
 8015e46:	f7ea fc89 	bl	800075c <__aeabi_ddiv>
 8015e4a:	b003      	add	sp, #12
 8015e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e50 <__copybits>:
 8015e50:	3901      	subs	r1, #1
 8015e52:	b570      	push	{r4, r5, r6, lr}
 8015e54:	1149      	asrs	r1, r1, #5
 8015e56:	6914      	ldr	r4, [r2, #16]
 8015e58:	3101      	adds	r1, #1
 8015e5a:	f102 0314 	add.w	r3, r2, #20
 8015e5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015e66:	1f05      	subs	r5, r0, #4
 8015e68:	42a3      	cmp	r3, r4
 8015e6a:	d30c      	bcc.n	8015e86 <__copybits+0x36>
 8015e6c:	1aa3      	subs	r3, r4, r2
 8015e6e:	3b11      	subs	r3, #17
 8015e70:	f023 0303 	bic.w	r3, r3, #3
 8015e74:	3211      	adds	r2, #17
 8015e76:	42a2      	cmp	r2, r4
 8015e78:	bf88      	it	hi
 8015e7a:	2300      	movhi	r3, #0
 8015e7c:	4418      	add	r0, r3
 8015e7e:	2300      	movs	r3, #0
 8015e80:	4288      	cmp	r0, r1
 8015e82:	d305      	bcc.n	8015e90 <__copybits+0x40>
 8015e84:	bd70      	pop	{r4, r5, r6, pc}
 8015e86:	f853 6b04 	ldr.w	r6, [r3], #4
 8015e8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8015e8e:	e7eb      	b.n	8015e68 <__copybits+0x18>
 8015e90:	f840 3b04 	str.w	r3, [r0], #4
 8015e94:	e7f4      	b.n	8015e80 <__copybits+0x30>

08015e96 <__any_on>:
 8015e96:	f100 0214 	add.w	r2, r0, #20
 8015e9a:	6900      	ldr	r0, [r0, #16]
 8015e9c:	114b      	asrs	r3, r1, #5
 8015e9e:	4298      	cmp	r0, r3
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	db11      	blt.n	8015ec8 <__any_on+0x32>
 8015ea4:	dd0a      	ble.n	8015ebc <__any_on+0x26>
 8015ea6:	f011 011f 	ands.w	r1, r1, #31
 8015eaa:	d007      	beq.n	8015ebc <__any_on+0x26>
 8015eac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015eb0:	fa24 f001 	lsr.w	r0, r4, r1
 8015eb4:	fa00 f101 	lsl.w	r1, r0, r1
 8015eb8:	428c      	cmp	r4, r1
 8015eba:	d10b      	bne.n	8015ed4 <__any_on+0x3e>
 8015ebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	d803      	bhi.n	8015ecc <__any_on+0x36>
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	bd10      	pop	{r4, pc}
 8015ec8:	4603      	mov	r3, r0
 8015eca:	e7f7      	b.n	8015ebc <__any_on+0x26>
 8015ecc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ed0:	2900      	cmp	r1, #0
 8015ed2:	d0f5      	beq.n	8015ec0 <__any_on+0x2a>
 8015ed4:	2001      	movs	r0, #1
 8015ed6:	e7f6      	b.n	8015ec6 <__any_on+0x30>

08015ed8 <__ssputs_r>:
 8015ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015edc:	688e      	ldr	r6, [r1, #8]
 8015ede:	4682      	mov	sl, r0
 8015ee0:	429e      	cmp	r6, r3
 8015ee2:	460c      	mov	r4, r1
 8015ee4:	4690      	mov	r8, r2
 8015ee6:	461f      	mov	r7, r3
 8015ee8:	d838      	bhi.n	8015f5c <__ssputs_r+0x84>
 8015eea:	898a      	ldrh	r2, [r1, #12]
 8015eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ef0:	d032      	beq.n	8015f58 <__ssputs_r+0x80>
 8015ef2:	6825      	ldr	r5, [r4, #0]
 8015ef4:	6909      	ldr	r1, [r1, #16]
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	eba5 0901 	sub.w	r9, r5, r1
 8015efc:	6965      	ldr	r5, [r4, #20]
 8015efe:	444b      	add	r3, r9
 8015f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f08:	106d      	asrs	r5, r5, #1
 8015f0a:	429d      	cmp	r5, r3
 8015f0c:	bf38      	it	cc
 8015f0e:	461d      	movcc	r5, r3
 8015f10:	0553      	lsls	r3, r2, #21
 8015f12:	d531      	bpl.n	8015f78 <__ssputs_r+0xa0>
 8015f14:	4629      	mov	r1, r5
 8015f16:	f7fc fa75 	bl	8012404 <_malloc_r>
 8015f1a:	4606      	mov	r6, r0
 8015f1c:	b950      	cbnz	r0, 8015f34 <__ssputs_r+0x5c>
 8015f1e:	230c      	movs	r3, #12
 8015f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f24:	f8ca 3000 	str.w	r3, [sl]
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f2e:	81a3      	strh	r3, [r4, #12]
 8015f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f34:	464a      	mov	r2, r9
 8015f36:	6921      	ldr	r1, [r4, #16]
 8015f38:	f7fc f9da 	bl	80122f0 <memcpy>
 8015f3c:	89a3      	ldrh	r3, [r4, #12]
 8015f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f46:	81a3      	strh	r3, [r4, #12]
 8015f48:	6126      	str	r6, [r4, #16]
 8015f4a:	444e      	add	r6, r9
 8015f4c:	6026      	str	r6, [r4, #0]
 8015f4e:	463e      	mov	r6, r7
 8015f50:	6165      	str	r5, [r4, #20]
 8015f52:	eba5 0509 	sub.w	r5, r5, r9
 8015f56:	60a5      	str	r5, [r4, #8]
 8015f58:	42be      	cmp	r6, r7
 8015f5a:	d900      	bls.n	8015f5e <__ssputs_r+0x86>
 8015f5c:	463e      	mov	r6, r7
 8015f5e:	4632      	mov	r2, r6
 8015f60:	4641      	mov	r1, r8
 8015f62:	6820      	ldr	r0, [r4, #0]
 8015f64:	f7fc f9d2 	bl	801230c <memmove>
 8015f68:	68a3      	ldr	r3, [r4, #8]
 8015f6a:	6822      	ldr	r2, [r4, #0]
 8015f6c:	1b9b      	subs	r3, r3, r6
 8015f6e:	4432      	add	r2, r6
 8015f70:	2000      	movs	r0, #0
 8015f72:	60a3      	str	r3, [r4, #8]
 8015f74:	6022      	str	r2, [r4, #0]
 8015f76:	e7db      	b.n	8015f30 <__ssputs_r+0x58>
 8015f78:	462a      	mov	r2, r5
 8015f7a:	f000 ff36 	bl	8016dea <_realloc_r>
 8015f7e:	4606      	mov	r6, r0
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d1e1      	bne.n	8015f48 <__ssputs_r+0x70>
 8015f84:	4650      	mov	r0, sl
 8015f86:	6921      	ldr	r1, [r4, #16]
 8015f88:	f7fc f9f0 	bl	801236c <_free_r>
 8015f8c:	e7c7      	b.n	8015f1e <__ssputs_r+0x46>
	...

08015f90 <_svfiprintf_r>:
 8015f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f94:	4698      	mov	r8, r3
 8015f96:	898b      	ldrh	r3, [r1, #12]
 8015f98:	4607      	mov	r7, r0
 8015f9a:	061b      	lsls	r3, r3, #24
 8015f9c:	460d      	mov	r5, r1
 8015f9e:	4614      	mov	r4, r2
 8015fa0:	b09d      	sub	sp, #116	; 0x74
 8015fa2:	d50e      	bpl.n	8015fc2 <_svfiprintf_r+0x32>
 8015fa4:	690b      	ldr	r3, [r1, #16]
 8015fa6:	b963      	cbnz	r3, 8015fc2 <_svfiprintf_r+0x32>
 8015fa8:	2140      	movs	r1, #64	; 0x40
 8015faa:	f7fc fa2b 	bl	8012404 <_malloc_r>
 8015fae:	6028      	str	r0, [r5, #0]
 8015fb0:	6128      	str	r0, [r5, #16]
 8015fb2:	b920      	cbnz	r0, 8015fbe <_svfiprintf_r+0x2e>
 8015fb4:	230c      	movs	r3, #12
 8015fb6:	603b      	str	r3, [r7, #0]
 8015fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fbc:	e0d1      	b.n	8016162 <_svfiprintf_r+0x1d2>
 8015fbe:	2340      	movs	r3, #64	; 0x40
 8015fc0:	616b      	str	r3, [r5, #20]
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc6:	2320      	movs	r3, #32
 8015fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015fcc:	2330      	movs	r3, #48	; 0x30
 8015fce:	f04f 0901 	mov.w	r9, #1
 8015fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801617c <_svfiprintf_r+0x1ec>
 8015fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015fde:	4623      	mov	r3, r4
 8015fe0:	469a      	mov	sl, r3
 8015fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fe6:	b10a      	cbz	r2, 8015fec <_svfiprintf_r+0x5c>
 8015fe8:	2a25      	cmp	r2, #37	; 0x25
 8015fea:	d1f9      	bne.n	8015fe0 <_svfiprintf_r+0x50>
 8015fec:	ebba 0b04 	subs.w	fp, sl, r4
 8015ff0:	d00b      	beq.n	801600a <_svfiprintf_r+0x7a>
 8015ff2:	465b      	mov	r3, fp
 8015ff4:	4622      	mov	r2, r4
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	4638      	mov	r0, r7
 8015ffa:	f7ff ff6d 	bl	8015ed8 <__ssputs_r>
 8015ffe:	3001      	adds	r0, #1
 8016000:	f000 80aa 	beq.w	8016158 <_svfiprintf_r+0x1c8>
 8016004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016006:	445a      	add	r2, fp
 8016008:	9209      	str	r2, [sp, #36]	; 0x24
 801600a:	f89a 3000 	ldrb.w	r3, [sl]
 801600e:	2b00      	cmp	r3, #0
 8016010:	f000 80a2 	beq.w	8016158 <_svfiprintf_r+0x1c8>
 8016014:	2300      	movs	r3, #0
 8016016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801601a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801601e:	f10a 0a01 	add.w	sl, sl, #1
 8016022:	9304      	str	r3, [sp, #16]
 8016024:	9307      	str	r3, [sp, #28]
 8016026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801602a:	931a      	str	r3, [sp, #104]	; 0x68
 801602c:	4654      	mov	r4, sl
 801602e:	2205      	movs	r2, #5
 8016030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016034:	4851      	ldr	r0, [pc, #324]	; (801617c <_svfiprintf_r+0x1ec>)
 8016036:	f7fc f94d 	bl	80122d4 <memchr>
 801603a:	9a04      	ldr	r2, [sp, #16]
 801603c:	b9d8      	cbnz	r0, 8016076 <_svfiprintf_r+0xe6>
 801603e:	06d0      	lsls	r0, r2, #27
 8016040:	bf44      	itt	mi
 8016042:	2320      	movmi	r3, #32
 8016044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016048:	0711      	lsls	r1, r2, #28
 801604a:	bf44      	itt	mi
 801604c:	232b      	movmi	r3, #43	; 0x2b
 801604e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016052:	f89a 3000 	ldrb.w	r3, [sl]
 8016056:	2b2a      	cmp	r3, #42	; 0x2a
 8016058:	d015      	beq.n	8016086 <_svfiprintf_r+0xf6>
 801605a:	4654      	mov	r4, sl
 801605c:	2000      	movs	r0, #0
 801605e:	f04f 0c0a 	mov.w	ip, #10
 8016062:	9a07      	ldr	r2, [sp, #28]
 8016064:	4621      	mov	r1, r4
 8016066:	f811 3b01 	ldrb.w	r3, [r1], #1
 801606a:	3b30      	subs	r3, #48	; 0x30
 801606c:	2b09      	cmp	r3, #9
 801606e:	d94e      	bls.n	801610e <_svfiprintf_r+0x17e>
 8016070:	b1b0      	cbz	r0, 80160a0 <_svfiprintf_r+0x110>
 8016072:	9207      	str	r2, [sp, #28]
 8016074:	e014      	b.n	80160a0 <_svfiprintf_r+0x110>
 8016076:	eba0 0308 	sub.w	r3, r0, r8
 801607a:	fa09 f303 	lsl.w	r3, r9, r3
 801607e:	4313      	orrs	r3, r2
 8016080:	46a2      	mov	sl, r4
 8016082:	9304      	str	r3, [sp, #16]
 8016084:	e7d2      	b.n	801602c <_svfiprintf_r+0x9c>
 8016086:	9b03      	ldr	r3, [sp, #12]
 8016088:	1d19      	adds	r1, r3, #4
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	9103      	str	r1, [sp, #12]
 801608e:	2b00      	cmp	r3, #0
 8016090:	bfbb      	ittet	lt
 8016092:	425b      	neglt	r3, r3
 8016094:	f042 0202 	orrlt.w	r2, r2, #2
 8016098:	9307      	strge	r3, [sp, #28]
 801609a:	9307      	strlt	r3, [sp, #28]
 801609c:	bfb8      	it	lt
 801609e:	9204      	strlt	r2, [sp, #16]
 80160a0:	7823      	ldrb	r3, [r4, #0]
 80160a2:	2b2e      	cmp	r3, #46	; 0x2e
 80160a4:	d10c      	bne.n	80160c0 <_svfiprintf_r+0x130>
 80160a6:	7863      	ldrb	r3, [r4, #1]
 80160a8:	2b2a      	cmp	r3, #42	; 0x2a
 80160aa:	d135      	bne.n	8016118 <_svfiprintf_r+0x188>
 80160ac:	9b03      	ldr	r3, [sp, #12]
 80160ae:	3402      	adds	r4, #2
 80160b0:	1d1a      	adds	r2, r3, #4
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	9203      	str	r2, [sp, #12]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	bfb8      	it	lt
 80160ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80160be:	9305      	str	r3, [sp, #20]
 80160c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801618c <_svfiprintf_r+0x1fc>
 80160c4:	2203      	movs	r2, #3
 80160c6:	4650      	mov	r0, sl
 80160c8:	7821      	ldrb	r1, [r4, #0]
 80160ca:	f7fc f903 	bl	80122d4 <memchr>
 80160ce:	b140      	cbz	r0, 80160e2 <_svfiprintf_r+0x152>
 80160d0:	2340      	movs	r3, #64	; 0x40
 80160d2:	eba0 000a 	sub.w	r0, r0, sl
 80160d6:	fa03 f000 	lsl.w	r0, r3, r0
 80160da:	9b04      	ldr	r3, [sp, #16]
 80160dc:	3401      	adds	r4, #1
 80160de:	4303      	orrs	r3, r0
 80160e0:	9304      	str	r3, [sp, #16]
 80160e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160e6:	2206      	movs	r2, #6
 80160e8:	4825      	ldr	r0, [pc, #148]	; (8016180 <_svfiprintf_r+0x1f0>)
 80160ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80160ee:	f7fc f8f1 	bl	80122d4 <memchr>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d038      	beq.n	8016168 <_svfiprintf_r+0x1d8>
 80160f6:	4b23      	ldr	r3, [pc, #140]	; (8016184 <_svfiprintf_r+0x1f4>)
 80160f8:	bb1b      	cbnz	r3, 8016142 <_svfiprintf_r+0x1b2>
 80160fa:	9b03      	ldr	r3, [sp, #12]
 80160fc:	3307      	adds	r3, #7
 80160fe:	f023 0307 	bic.w	r3, r3, #7
 8016102:	3308      	adds	r3, #8
 8016104:	9303      	str	r3, [sp, #12]
 8016106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016108:	4433      	add	r3, r6
 801610a:	9309      	str	r3, [sp, #36]	; 0x24
 801610c:	e767      	b.n	8015fde <_svfiprintf_r+0x4e>
 801610e:	460c      	mov	r4, r1
 8016110:	2001      	movs	r0, #1
 8016112:	fb0c 3202 	mla	r2, ip, r2, r3
 8016116:	e7a5      	b.n	8016064 <_svfiprintf_r+0xd4>
 8016118:	2300      	movs	r3, #0
 801611a:	f04f 0c0a 	mov.w	ip, #10
 801611e:	4619      	mov	r1, r3
 8016120:	3401      	adds	r4, #1
 8016122:	9305      	str	r3, [sp, #20]
 8016124:	4620      	mov	r0, r4
 8016126:	f810 2b01 	ldrb.w	r2, [r0], #1
 801612a:	3a30      	subs	r2, #48	; 0x30
 801612c:	2a09      	cmp	r2, #9
 801612e:	d903      	bls.n	8016138 <_svfiprintf_r+0x1a8>
 8016130:	2b00      	cmp	r3, #0
 8016132:	d0c5      	beq.n	80160c0 <_svfiprintf_r+0x130>
 8016134:	9105      	str	r1, [sp, #20]
 8016136:	e7c3      	b.n	80160c0 <_svfiprintf_r+0x130>
 8016138:	4604      	mov	r4, r0
 801613a:	2301      	movs	r3, #1
 801613c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016140:	e7f0      	b.n	8016124 <_svfiprintf_r+0x194>
 8016142:	ab03      	add	r3, sp, #12
 8016144:	9300      	str	r3, [sp, #0]
 8016146:	462a      	mov	r2, r5
 8016148:	4638      	mov	r0, r7
 801614a:	4b0f      	ldr	r3, [pc, #60]	; (8016188 <_svfiprintf_r+0x1f8>)
 801614c:	a904      	add	r1, sp, #16
 801614e:	f7fc fa51 	bl	80125f4 <_printf_float>
 8016152:	1c42      	adds	r2, r0, #1
 8016154:	4606      	mov	r6, r0
 8016156:	d1d6      	bne.n	8016106 <_svfiprintf_r+0x176>
 8016158:	89ab      	ldrh	r3, [r5, #12]
 801615a:	065b      	lsls	r3, r3, #25
 801615c:	f53f af2c 	bmi.w	8015fb8 <_svfiprintf_r+0x28>
 8016160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016162:	b01d      	add	sp, #116	; 0x74
 8016164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016168:	ab03      	add	r3, sp, #12
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	462a      	mov	r2, r5
 801616e:	4638      	mov	r0, r7
 8016170:	4b05      	ldr	r3, [pc, #20]	; (8016188 <_svfiprintf_r+0x1f8>)
 8016172:	a904      	add	r1, sp, #16
 8016174:	f7fc fcda 	bl	8012b2c <_printf_i>
 8016178:	e7eb      	b.n	8016152 <_svfiprintf_r+0x1c2>
 801617a:	bf00      	nop
 801617c:	08017c2c 	.word	0x08017c2c
 8016180:	08017c36 	.word	0x08017c36
 8016184:	080125f5 	.word	0x080125f5
 8016188:	08015ed9 	.word	0x08015ed9
 801618c:	08017c32 	.word	0x08017c32

08016190 <_sungetc_r>:
 8016190:	b538      	push	{r3, r4, r5, lr}
 8016192:	1c4b      	adds	r3, r1, #1
 8016194:	4614      	mov	r4, r2
 8016196:	d103      	bne.n	80161a0 <_sungetc_r+0x10>
 8016198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801619c:	4628      	mov	r0, r5
 801619e:	bd38      	pop	{r3, r4, r5, pc}
 80161a0:	8993      	ldrh	r3, [r2, #12]
 80161a2:	b2cd      	uxtb	r5, r1
 80161a4:	f023 0320 	bic.w	r3, r3, #32
 80161a8:	8193      	strh	r3, [r2, #12]
 80161aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161ac:	6852      	ldr	r2, [r2, #4]
 80161ae:	b18b      	cbz	r3, 80161d4 <_sungetc_r+0x44>
 80161b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80161b2:	4293      	cmp	r3, r2
 80161b4:	dd08      	ble.n	80161c8 <_sungetc_r+0x38>
 80161b6:	6823      	ldr	r3, [r4, #0]
 80161b8:	1e5a      	subs	r2, r3, #1
 80161ba:	6022      	str	r2, [r4, #0]
 80161bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80161c0:	6863      	ldr	r3, [r4, #4]
 80161c2:	3301      	adds	r3, #1
 80161c4:	6063      	str	r3, [r4, #4]
 80161c6:	e7e9      	b.n	801619c <_sungetc_r+0xc>
 80161c8:	4621      	mov	r1, r4
 80161ca:	f000 fbe1 	bl	8016990 <__submore>
 80161ce:	2800      	cmp	r0, #0
 80161d0:	d0f1      	beq.n	80161b6 <_sungetc_r+0x26>
 80161d2:	e7e1      	b.n	8016198 <_sungetc_r+0x8>
 80161d4:	6921      	ldr	r1, [r4, #16]
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	b151      	cbz	r1, 80161f0 <_sungetc_r+0x60>
 80161da:	4299      	cmp	r1, r3
 80161dc:	d208      	bcs.n	80161f0 <_sungetc_r+0x60>
 80161de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80161e2:	42a9      	cmp	r1, r5
 80161e4:	d104      	bne.n	80161f0 <_sungetc_r+0x60>
 80161e6:	3b01      	subs	r3, #1
 80161e8:	3201      	adds	r2, #1
 80161ea:	6023      	str	r3, [r4, #0]
 80161ec:	6062      	str	r2, [r4, #4]
 80161ee:	e7d5      	b.n	801619c <_sungetc_r+0xc>
 80161f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80161f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161f8:	6363      	str	r3, [r4, #52]	; 0x34
 80161fa:	2303      	movs	r3, #3
 80161fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80161fe:	4623      	mov	r3, r4
 8016200:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016204:	6023      	str	r3, [r4, #0]
 8016206:	2301      	movs	r3, #1
 8016208:	e7dc      	b.n	80161c4 <_sungetc_r+0x34>

0801620a <__ssrefill_r>:
 801620a:	b510      	push	{r4, lr}
 801620c:	460c      	mov	r4, r1
 801620e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016210:	b169      	cbz	r1, 801622e <__ssrefill_r+0x24>
 8016212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016216:	4299      	cmp	r1, r3
 8016218:	d001      	beq.n	801621e <__ssrefill_r+0x14>
 801621a:	f7fc f8a7 	bl	801236c <_free_r>
 801621e:	2000      	movs	r0, #0
 8016220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016222:	6360      	str	r0, [r4, #52]	; 0x34
 8016224:	6063      	str	r3, [r4, #4]
 8016226:	b113      	cbz	r3, 801622e <__ssrefill_r+0x24>
 8016228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801622a:	6023      	str	r3, [r4, #0]
 801622c:	bd10      	pop	{r4, pc}
 801622e:	6923      	ldr	r3, [r4, #16]
 8016230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016234:	6023      	str	r3, [r4, #0]
 8016236:	2300      	movs	r3, #0
 8016238:	6063      	str	r3, [r4, #4]
 801623a:	89a3      	ldrh	r3, [r4, #12]
 801623c:	f043 0320 	orr.w	r3, r3, #32
 8016240:	81a3      	strh	r3, [r4, #12]
 8016242:	e7f3      	b.n	801622c <__ssrefill_r+0x22>

08016244 <__ssvfiscanf_r>:
 8016244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016248:	460c      	mov	r4, r1
 801624a:	2100      	movs	r1, #0
 801624c:	4606      	mov	r6, r0
 801624e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016252:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016256:	49b3      	ldr	r1, [pc, #716]	; (8016524 <__ssvfiscanf_r+0x2e0>)
 8016258:	f10d 0804 	add.w	r8, sp, #4
 801625c:	91a0      	str	r1, [sp, #640]	; 0x280
 801625e:	49b2      	ldr	r1, [pc, #712]	; (8016528 <__ssvfiscanf_r+0x2e4>)
 8016260:	4fb2      	ldr	r7, [pc, #712]	; (801652c <__ssvfiscanf_r+0x2e8>)
 8016262:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8016530 <__ssvfiscanf_r+0x2ec>
 8016266:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801626a:	91a1      	str	r1, [sp, #644]	; 0x284
 801626c:	9300      	str	r3, [sp, #0]
 801626e:	f892 a000 	ldrb.w	sl, [r2]
 8016272:	f1ba 0f00 	cmp.w	sl, #0
 8016276:	f000 8153 	beq.w	8016520 <__ssvfiscanf_r+0x2dc>
 801627a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801627e:	1c55      	adds	r5, r2, #1
 8016280:	f013 0308 	ands.w	r3, r3, #8
 8016284:	d019      	beq.n	80162ba <__ssvfiscanf_r+0x76>
 8016286:	6863      	ldr	r3, [r4, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	dd0f      	ble.n	80162ac <__ssvfiscanf_r+0x68>
 801628c:	6823      	ldr	r3, [r4, #0]
 801628e:	781a      	ldrb	r2, [r3, #0]
 8016290:	5cba      	ldrb	r2, [r7, r2]
 8016292:	0712      	lsls	r2, r2, #28
 8016294:	d401      	bmi.n	801629a <__ssvfiscanf_r+0x56>
 8016296:	462a      	mov	r2, r5
 8016298:	e7e9      	b.n	801626e <__ssvfiscanf_r+0x2a>
 801629a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801629c:	3301      	adds	r3, #1
 801629e:	3201      	adds	r2, #1
 80162a0:	9245      	str	r2, [sp, #276]	; 0x114
 80162a2:	6862      	ldr	r2, [r4, #4]
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	3a01      	subs	r2, #1
 80162a8:	6062      	str	r2, [r4, #4]
 80162aa:	e7ec      	b.n	8016286 <__ssvfiscanf_r+0x42>
 80162ac:	4621      	mov	r1, r4
 80162ae:	4630      	mov	r0, r6
 80162b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80162b2:	4798      	blx	r3
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d0e9      	beq.n	801628c <__ssvfiscanf_r+0x48>
 80162b8:	e7ed      	b.n	8016296 <__ssvfiscanf_r+0x52>
 80162ba:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80162be:	f040 8086 	bne.w	80163ce <__ssvfiscanf_r+0x18a>
 80162c2:	9341      	str	r3, [sp, #260]	; 0x104
 80162c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80162c6:	7853      	ldrb	r3, [r2, #1]
 80162c8:	2b2a      	cmp	r3, #42	; 0x2a
 80162ca:	bf04      	itt	eq
 80162cc:	2310      	moveq	r3, #16
 80162ce:	1c95      	addeq	r5, r2, #2
 80162d0:	f04f 020a 	mov.w	r2, #10
 80162d4:	bf08      	it	eq
 80162d6:	9341      	streq	r3, [sp, #260]	; 0x104
 80162d8:	46ab      	mov	fp, r5
 80162da:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80162de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80162e2:	2b09      	cmp	r3, #9
 80162e4:	d91d      	bls.n	8016322 <__ssvfiscanf_r+0xde>
 80162e6:	2203      	movs	r2, #3
 80162e8:	4891      	ldr	r0, [pc, #580]	; (8016530 <__ssvfiscanf_r+0x2ec>)
 80162ea:	f7fb fff3 	bl	80122d4 <memchr>
 80162ee:	b140      	cbz	r0, 8016302 <__ssvfiscanf_r+0xbe>
 80162f0:	2301      	movs	r3, #1
 80162f2:	465d      	mov	r5, fp
 80162f4:	eba0 0009 	sub.w	r0, r0, r9
 80162f8:	fa03 f000 	lsl.w	r0, r3, r0
 80162fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80162fe:	4318      	orrs	r0, r3
 8016300:	9041      	str	r0, [sp, #260]	; 0x104
 8016302:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016306:	2b78      	cmp	r3, #120	; 0x78
 8016308:	d806      	bhi.n	8016318 <__ssvfiscanf_r+0xd4>
 801630a:	2b57      	cmp	r3, #87	; 0x57
 801630c:	d810      	bhi.n	8016330 <__ssvfiscanf_r+0xec>
 801630e:	2b25      	cmp	r3, #37	; 0x25
 8016310:	d05d      	beq.n	80163ce <__ssvfiscanf_r+0x18a>
 8016312:	d857      	bhi.n	80163c4 <__ssvfiscanf_r+0x180>
 8016314:	2b00      	cmp	r3, #0
 8016316:	d075      	beq.n	8016404 <__ssvfiscanf_r+0x1c0>
 8016318:	2303      	movs	r3, #3
 801631a:	9347      	str	r3, [sp, #284]	; 0x11c
 801631c:	230a      	movs	r3, #10
 801631e:	9342      	str	r3, [sp, #264]	; 0x108
 8016320:	e082      	b.n	8016428 <__ssvfiscanf_r+0x1e4>
 8016322:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016324:	465d      	mov	r5, fp
 8016326:	fb02 1303 	mla	r3, r2, r3, r1
 801632a:	3b30      	subs	r3, #48	; 0x30
 801632c:	9343      	str	r3, [sp, #268]	; 0x10c
 801632e:	e7d3      	b.n	80162d8 <__ssvfiscanf_r+0x94>
 8016330:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016334:	2a20      	cmp	r2, #32
 8016336:	d8ef      	bhi.n	8016318 <__ssvfiscanf_r+0xd4>
 8016338:	a101      	add	r1, pc, #4	; (adr r1, 8016340 <__ssvfiscanf_r+0xfc>)
 801633a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801633e:	bf00      	nop
 8016340:	08016413 	.word	0x08016413
 8016344:	08016319 	.word	0x08016319
 8016348:	08016319 	.word	0x08016319
 801634c:	08016471 	.word	0x08016471
 8016350:	08016319 	.word	0x08016319
 8016354:	08016319 	.word	0x08016319
 8016358:	08016319 	.word	0x08016319
 801635c:	08016319 	.word	0x08016319
 8016360:	08016319 	.word	0x08016319
 8016364:	08016319 	.word	0x08016319
 8016368:	08016319 	.word	0x08016319
 801636c:	08016487 	.word	0x08016487
 8016370:	0801645d 	.word	0x0801645d
 8016374:	080163cb 	.word	0x080163cb
 8016378:	080163cb 	.word	0x080163cb
 801637c:	080163cb 	.word	0x080163cb
 8016380:	08016319 	.word	0x08016319
 8016384:	08016461 	.word	0x08016461
 8016388:	08016319 	.word	0x08016319
 801638c:	08016319 	.word	0x08016319
 8016390:	08016319 	.word	0x08016319
 8016394:	08016319 	.word	0x08016319
 8016398:	08016497 	.word	0x08016497
 801639c:	08016469 	.word	0x08016469
 80163a0:	0801640b 	.word	0x0801640b
 80163a4:	08016319 	.word	0x08016319
 80163a8:	08016319 	.word	0x08016319
 80163ac:	08016493 	.word	0x08016493
 80163b0:	08016319 	.word	0x08016319
 80163b4:	0801645d 	.word	0x0801645d
 80163b8:	08016319 	.word	0x08016319
 80163bc:	08016319 	.word	0x08016319
 80163c0:	08016413 	.word	0x08016413
 80163c4:	3b45      	subs	r3, #69	; 0x45
 80163c6:	2b02      	cmp	r3, #2
 80163c8:	d8a6      	bhi.n	8016318 <__ssvfiscanf_r+0xd4>
 80163ca:	2305      	movs	r3, #5
 80163cc:	e02b      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 80163ce:	6863      	ldr	r3, [r4, #4]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	dd0d      	ble.n	80163f0 <__ssvfiscanf_r+0x1ac>
 80163d4:	6823      	ldr	r3, [r4, #0]
 80163d6:	781a      	ldrb	r2, [r3, #0]
 80163d8:	4552      	cmp	r2, sl
 80163da:	f040 80a1 	bne.w	8016520 <__ssvfiscanf_r+0x2dc>
 80163de:	3301      	adds	r3, #1
 80163e0:	6862      	ldr	r2, [r4, #4]
 80163e2:	6023      	str	r3, [r4, #0]
 80163e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80163e6:	3a01      	subs	r2, #1
 80163e8:	3301      	adds	r3, #1
 80163ea:	6062      	str	r2, [r4, #4]
 80163ec:	9345      	str	r3, [sp, #276]	; 0x114
 80163ee:	e752      	b.n	8016296 <__ssvfiscanf_r+0x52>
 80163f0:	4621      	mov	r1, r4
 80163f2:	4630      	mov	r0, r6
 80163f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80163f6:	4798      	blx	r3
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d0eb      	beq.n	80163d4 <__ssvfiscanf_r+0x190>
 80163fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80163fe:	2800      	cmp	r0, #0
 8016400:	f040 8084 	bne.w	801650c <__ssvfiscanf_r+0x2c8>
 8016404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016408:	e086      	b.n	8016518 <__ssvfiscanf_r+0x2d4>
 801640a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801640c:	f042 0220 	orr.w	r2, r2, #32
 8016410:	9241      	str	r2, [sp, #260]	; 0x104
 8016412:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016418:	9241      	str	r2, [sp, #260]	; 0x104
 801641a:	2210      	movs	r2, #16
 801641c:	2b6f      	cmp	r3, #111	; 0x6f
 801641e:	bf34      	ite	cc
 8016420:	2303      	movcc	r3, #3
 8016422:	2304      	movcs	r3, #4
 8016424:	9242      	str	r2, [sp, #264]	; 0x108
 8016426:	9347      	str	r3, [sp, #284]	; 0x11c
 8016428:	6863      	ldr	r3, [r4, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	dd41      	ble.n	80164b2 <__ssvfiscanf_r+0x26e>
 801642e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016430:	0659      	lsls	r1, r3, #25
 8016432:	d404      	bmi.n	801643e <__ssvfiscanf_r+0x1fa>
 8016434:	6823      	ldr	r3, [r4, #0]
 8016436:	781a      	ldrb	r2, [r3, #0]
 8016438:	5cba      	ldrb	r2, [r7, r2]
 801643a:	0712      	lsls	r2, r2, #28
 801643c:	d440      	bmi.n	80164c0 <__ssvfiscanf_r+0x27c>
 801643e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016440:	2b02      	cmp	r3, #2
 8016442:	dc4f      	bgt.n	80164e4 <__ssvfiscanf_r+0x2a0>
 8016444:	466b      	mov	r3, sp
 8016446:	4622      	mov	r2, r4
 8016448:	4630      	mov	r0, r6
 801644a:	a941      	add	r1, sp, #260	; 0x104
 801644c:	f000 f874 	bl	8016538 <_scanf_chars>
 8016450:	2801      	cmp	r0, #1
 8016452:	d065      	beq.n	8016520 <__ssvfiscanf_r+0x2dc>
 8016454:	2802      	cmp	r0, #2
 8016456:	f47f af1e 	bne.w	8016296 <__ssvfiscanf_r+0x52>
 801645a:	e7cf      	b.n	80163fc <__ssvfiscanf_r+0x1b8>
 801645c:	220a      	movs	r2, #10
 801645e:	e7dd      	b.n	801641c <__ssvfiscanf_r+0x1d8>
 8016460:	2300      	movs	r3, #0
 8016462:	9342      	str	r3, [sp, #264]	; 0x108
 8016464:	2303      	movs	r3, #3
 8016466:	e7de      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 8016468:	2308      	movs	r3, #8
 801646a:	9342      	str	r3, [sp, #264]	; 0x108
 801646c:	2304      	movs	r3, #4
 801646e:	e7da      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 8016470:	4629      	mov	r1, r5
 8016472:	4640      	mov	r0, r8
 8016474:	f000 f9c2 	bl	80167fc <__sccl>
 8016478:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801647a:	4605      	mov	r5, r0
 801647c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016480:	9341      	str	r3, [sp, #260]	; 0x104
 8016482:	2301      	movs	r3, #1
 8016484:	e7cf      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 8016486:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801648c:	9341      	str	r3, [sp, #260]	; 0x104
 801648e:	2300      	movs	r3, #0
 8016490:	e7c9      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 8016492:	2302      	movs	r3, #2
 8016494:	e7c7      	b.n	8016426 <__ssvfiscanf_r+0x1e2>
 8016496:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016498:	06c3      	lsls	r3, r0, #27
 801649a:	f53f aefc 	bmi.w	8016296 <__ssvfiscanf_r+0x52>
 801649e:	9b00      	ldr	r3, [sp, #0]
 80164a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164a2:	1d19      	adds	r1, r3, #4
 80164a4:	9100      	str	r1, [sp, #0]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	07c0      	lsls	r0, r0, #31
 80164aa:	bf4c      	ite	mi
 80164ac:	801a      	strhmi	r2, [r3, #0]
 80164ae:	601a      	strpl	r2, [r3, #0]
 80164b0:	e6f1      	b.n	8016296 <__ssvfiscanf_r+0x52>
 80164b2:	4621      	mov	r1, r4
 80164b4:	4630      	mov	r0, r6
 80164b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164b8:	4798      	blx	r3
 80164ba:	2800      	cmp	r0, #0
 80164bc:	d0b7      	beq.n	801642e <__ssvfiscanf_r+0x1ea>
 80164be:	e79d      	b.n	80163fc <__ssvfiscanf_r+0x1b8>
 80164c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164c2:	3201      	adds	r2, #1
 80164c4:	9245      	str	r2, [sp, #276]	; 0x114
 80164c6:	6862      	ldr	r2, [r4, #4]
 80164c8:	3a01      	subs	r2, #1
 80164ca:	2a00      	cmp	r2, #0
 80164cc:	6062      	str	r2, [r4, #4]
 80164ce:	dd02      	ble.n	80164d6 <__ssvfiscanf_r+0x292>
 80164d0:	3301      	adds	r3, #1
 80164d2:	6023      	str	r3, [r4, #0]
 80164d4:	e7ae      	b.n	8016434 <__ssvfiscanf_r+0x1f0>
 80164d6:	4621      	mov	r1, r4
 80164d8:	4630      	mov	r0, r6
 80164da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164dc:	4798      	blx	r3
 80164de:	2800      	cmp	r0, #0
 80164e0:	d0a8      	beq.n	8016434 <__ssvfiscanf_r+0x1f0>
 80164e2:	e78b      	b.n	80163fc <__ssvfiscanf_r+0x1b8>
 80164e4:	2b04      	cmp	r3, #4
 80164e6:	dc06      	bgt.n	80164f6 <__ssvfiscanf_r+0x2b2>
 80164e8:	466b      	mov	r3, sp
 80164ea:	4622      	mov	r2, r4
 80164ec:	4630      	mov	r0, r6
 80164ee:	a941      	add	r1, sp, #260	; 0x104
 80164f0:	f000 f87a 	bl	80165e8 <_scanf_i>
 80164f4:	e7ac      	b.n	8016450 <__ssvfiscanf_r+0x20c>
 80164f6:	4b0f      	ldr	r3, [pc, #60]	; (8016534 <__ssvfiscanf_r+0x2f0>)
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f43f aecc 	beq.w	8016296 <__ssvfiscanf_r+0x52>
 80164fe:	466b      	mov	r3, sp
 8016500:	4622      	mov	r2, r4
 8016502:	4630      	mov	r0, r6
 8016504:	a941      	add	r1, sp, #260	; 0x104
 8016506:	f7fc fc37 	bl	8012d78 <_scanf_float>
 801650a:	e7a1      	b.n	8016450 <__ssvfiscanf_r+0x20c>
 801650c:	89a3      	ldrh	r3, [r4, #12]
 801650e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016512:	bf18      	it	ne
 8016514:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8016518:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016520:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016522:	e7f9      	b.n	8016518 <__ssvfiscanf_r+0x2d4>
 8016524:	08016191 	.word	0x08016191
 8016528:	0801620b 	.word	0x0801620b
 801652c:	080178b9 	.word	0x080178b9
 8016530:	08017c32 	.word	0x08017c32
 8016534:	08012d79 	.word	0x08012d79

08016538 <_scanf_chars>:
 8016538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801653c:	4615      	mov	r5, r2
 801653e:	688a      	ldr	r2, [r1, #8]
 8016540:	4680      	mov	r8, r0
 8016542:	460c      	mov	r4, r1
 8016544:	b932      	cbnz	r2, 8016554 <_scanf_chars+0x1c>
 8016546:	698a      	ldr	r2, [r1, #24]
 8016548:	2a00      	cmp	r2, #0
 801654a:	bf0c      	ite	eq
 801654c:	2201      	moveq	r2, #1
 801654e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8016552:	608a      	str	r2, [r1, #8]
 8016554:	2700      	movs	r7, #0
 8016556:	6822      	ldr	r2, [r4, #0]
 8016558:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80165e4 <_scanf_chars+0xac>
 801655c:	06d1      	lsls	r1, r2, #27
 801655e:	bf5f      	itttt	pl
 8016560:	681a      	ldrpl	r2, [r3, #0]
 8016562:	1d11      	addpl	r1, r2, #4
 8016564:	6019      	strpl	r1, [r3, #0]
 8016566:	6816      	ldrpl	r6, [r2, #0]
 8016568:	69a0      	ldr	r0, [r4, #24]
 801656a:	b188      	cbz	r0, 8016590 <_scanf_chars+0x58>
 801656c:	2801      	cmp	r0, #1
 801656e:	d107      	bne.n	8016580 <_scanf_chars+0x48>
 8016570:	682b      	ldr	r3, [r5, #0]
 8016572:	781a      	ldrb	r2, [r3, #0]
 8016574:	6963      	ldr	r3, [r4, #20]
 8016576:	5c9b      	ldrb	r3, [r3, r2]
 8016578:	b953      	cbnz	r3, 8016590 <_scanf_chars+0x58>
 801657a:	bb27      	cbnz	r7, 80165c6 <_scanf_chars+0x8e>
 801657c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016580:	2802      	cmp	r0, #2
 8016582:	d120      	bne.n	80165c6 <_scanf_chars+0x8e>
 8016584:	682b      	ldr	r3, [r5, #0]
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	f813 3009 	ldrb.w	r3, [r3, r9]
 801658c:	071b      	lsls	r3, r3, #28
 801658e:	d41a      	bmi.n	80165c6 <_scanf_chars+0x8e>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	3701      	adds	r7, #1
 8016594:	06da      	lsls	r2, r3, #27
 8016596:	bf5e      	ittt	pl
 8016598:	682b      	ldrpl	r3, [r5, #0]
 801659a:	781b      	ldrbpl	r3, [r3, #0]
 801659c:	f806 3b01 	strbpl.w	r3, [r6], #1
 80165a0:	682a      	ldr	r2, [r5, #0]
 80165a2:	686b      	ldr	r3, [r5, #4]
 80165a4:	3201      	adds	r2, #1
 80165a6:	602a      	str	r2, [r5, #0]
 80165a8:	68a2      	ldr	r2, [r4, #8]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	3a01      	subs	r2, #1
 80165ae:	606b      	str	r3, [r5, #4]
 80165b0:	60a2      	str	r2, [r4, #8]
 80165b2:	b142      	cbz	r2, 80165c6 <_scanf_chars+0x8e>
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	dcd7      	bgt.n	8016568 <_scanf_chars+0x30>
 80165b8:	4629      	mov	r1, r5
 80165ba:	4640      	mov	r0, r8
 80165bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80165c0:	4798      	blx	r3
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d0d0      	beq.n	8016568 <_scanf_chars+0x30>
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	f013 0310 	ands.w	r3, r3, #16
 80165cc:	d105      	bne.n	80165da <_scanf_chars+0xa2>
 80165ce:	68e2      	ldr	r2, [r4, #12]
 80165d0:	3201      	adds	r2, #1
 80165d2:	60e2      	str	r2, [r4, #12]
 80165d4:	69a2      	ldr	r2, [r4, #24]
 80165d6:	b102      	cbz	r2, 80165da <_scanf_chars+0xa2>
 80165d8:	7033      	strb	r3, [r6, #0]
 80165da:	6923      	ldr	r3, [r4, #16]
 80165dc:	2000      	movs	r0, #0
 80165de:	441f      	add	r7, r3
 80165e0:	6127      	str	r7, [r4, #16]
 80165e2:	e7cb      	b.n	801657c <_scanf_chars+0x44>
 80165e4:	080178b9 	.word	0x080178b9

080165e8 <_scanf_i>:
 80165e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ec:	460c      	mov	r4, r1
 80165ee:	4698      	mov	r8, r3
 80165f0:	4b72      	ldr	r3, [pc, #456]	; (80167bc <_scanf_i+0x1d4>)
 80165f2:	b087      	sub	sp, #28
 80165f4:	4682      	mov	sl, r0
 80165f6:	4616      	mov	r6, r2
 80165f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165fc:	ab03      	add	r3, sp, #12
 80165fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016602:	4b6f      	ldr	r3, [pc, #444]	; (80167c0 <_scanf_i+0x1d8>)
 8016604:	69a1      	ldr	r1, [r4, #24]
 8016606:	4a6f      	ldr	r2, [pc, #444]	; (80167c4 <_scanf_i+0x1dc>)
 8016608:	4627      	mov	r7, r4
 801660a:	2903      	cmp	r1, #3
 801660c:	bf18      	it	ne
 801660e:	461a      	movne	r2, r3
 8016610:	68a3      	ldr	r3, [r4, #8]
 8016612:	9201      	str	r2, [sp, #4]
 8016614:	1e5a      	subs	r2, r3, #1
 8016616:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801661a:	bf81      	itttt	hi
 801661c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016620:	eb03 0905 	addhi.w	r9, r3, r5
 8016624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016628:	60a3      	strhi	r3, [r4, #8]
 801662a:	f857 3b1c 	ldr.w	r3, [r7], #28
 801662e:	bf98      	it	ls
 8016630:	f04f 0900 	movls.w	r9, #0
 8016634:	463d      	mov	r5, r7
 8016636:	f04f 0b00 	mov.w	fp, #0
 801663a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801663e:	6023      	str	r3, [r4, #0]
 8016640:	6831      	ldr	r1, [r6, #0]
 8016642:	ab03      	add	r3, sp, #12
 8016644:	2202      	movs	r2, #2
 8016646:	7809      	ldrb	r1, [r1, #0]
 8016648:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801664c:	f7fb fe42 	bl	80122d4 <memchr>
 8016650:	b328      	cbz	r0, 801669e <_scanf_i+0xb6>
 8016652:	f1bb 0f01 	cmp.w	fp, #1
 8016656:	d159      	bne.n	801670c <_scanf_i+0x124>
 8016658:	6862      	ldr	r2, [r4, #4]
 801665a:	b92a      	cbnz	r2, 8016668 <_scanf_i+0x80>
 801665c:	2308      	movs	r3, #8
 801665e:	6822      	ldr	r2, [r4, #0]
 8016660:	6063      	str	r3, [r4, #4]
 8016662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016666:	6022      	str	r2, [r4, #0]
 8016668:	6822      	ldr	r2, [r4, #0]
 801666a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801666e:	6022      	str	r2, [r4, #0]
 8016670:	68a2      	ldr	r2, [r4, #8]
 8016672:	1e51      	subs	r1, r2, #1
 8016674:	60a1      	str	r1, [r4, #8]
 8016676:	b192      	cbz	r2, 801669e <_scanf_i+0xb6>
 8016678:	6832      	ldr	r2, [r6, #0]
 801667a:	1c51      	adds	r1, r2, #1
 801667c:	6031      	str	r1, [r6, #0]
 801667e:	7812      	ldrb	r2, [r2, #0]
 8016680:	f805 2b01 	strb.w	r2, [r5], #1
 8016684:	6872      	ldr	r2, [r6, #4]
 8016686:	3a01      	subs	r2, #1
 8016688:	2a00      	cmp	r2, #0
 801668a:	6072      	str	r2, [r6, #4]
 801668c:	dc07      	bgt.n	801669e <_scanf_i+0xb6>
 801668e:	4631      	mov	r1, r6
 8016690:	4650      	mov	r0, sl
 8016692:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016696:	4790      	blx	r2
 8016698:	2800      	cmp	r0, #0
 801669a:	f040 8085 	bne.w	80167a8 <_scanf_i+0x1c0>
 801669e:	f10b 0b01 	add.w	fp, fp, #1
 80166a2:	f1bb 0f03 	cmp.w	fp, #3
 80166a6:	d1cb      	bne.n	8016640 <_scanf_i+0x58>
 80166a8:	6863      	ldr	r3, [r4, #4]
 80166aa:	b90b      	cbnz	r3, 80166b0 <_scanf_i+0xc8>
 80166ac:	230a      	movs	r3, #10
 80166ae:	6063      	str	r3, [r4, #4]
 80166b0:	6863      	ldr	r3, [r4, #4]
 80166b2:	4945      	ldr	r1, [pc, #276]	; (80167c8 <_scanf_i+0x1e0>)
 80166b4:	6960      	ldr	r0, [r4, #20]
 80166b6:	1ac9      	subs	r1, r1, r3
 80166b8:	f000 f8a0 	bl	80167fc <__sccl>
 80166bc:	f04f 0b00 	mov.w	fp, #0
 80166c0:	68a3      	ldr	r3, [r4, #8]
 80166c2:	6822      	ldr	r2, [r4, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d03d      	beq.n	8016744 <_scanf_i+0x15c>
 80166c8:	6831      	ldr	r1, [r6, #0]
 80166ca:	6960      	ldr	r0, [r4, #20]
 80166cc:	f891 c000 	ldrb.w	ip, [r1]
 80166d0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80166d4:	2800      	cmp	r0, #0
 80166d6:	d035      	beq.n	8016744 <_scanf_i+0x15c>
 80166d8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80166dc:	d124      	bne.n	8016728 <_scanf_i+0x140>
 80166de:	0510      	lsls	r0, r2, #20
 80166e0:	d522      	bpl.n	8016728 <_scanf_i+0x140>
 80166e2:	f10b 0b01 	add.w	fp, fp, #1
 80166e6:	f1b9 0f00 	cmp.w	r9, #0
 80166ea:	d003      	beq.n	80166f4 <_scanf_i+0x10c>
 80166ec:	3301      	adds	r3, #1
 80166ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80166f2:	60a3      	str	r3, [r4, #8]
 80166f4:	6873      	ldr	r3, [r6, #4]
 80166f6:	3b01      	subs	r3, #1
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	6073      	str	r3, [r6, #4]
 80166fc:	dd1b      	ble.n	8016736 <_scanf_i+0x14e>
 80166fe:	6833      	ldr	r3, [r6, #0]
 8016700:	3301      	adds	r3, #1
 8016702:	6033      	str	r3, [r6, #0]
 8016704:	68a3      	ldr	r3, [r4, #8]
 8016706:	3b01      	subs	r3, #1
 8016708:	60a3      	str	r3, [r4, #8]
 801670a:	e7d9      	b.n	80166c0 <_scanf_i+0xd8>
 801670c:	f1bb 0f02 	cmp.w	fp, #2
 8016710:	d1ae      	bne.n	8016670 <_scanf_i+0x88>
 8016712:	6822      	ldr	r2, [r4, #0]
 8016714:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016718:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801671c:	d1bf      	bne.n	801669e <_scanf_i+0xb6>
 801671e:	2310      	movs	r3, #16
 8016720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016724:	6063      	str	r3, [r4, #4]
 8016726:	e7a2      	b.n	801666e <_scanf_i+0x86>
 8016728:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801672c:	6022      	str	r2, [r4, #0]
 801672e:	780b      	ldrb	r3, [r1, #0]
 8016730:	f805 3b01 	strb.w	r3, [r5], #1
 8016734:	e7de      	b.n	80166f4 <_scanf_i+0x10c>
 8016736:	4631      	mov	r1, r6
 8016738:	4650      	mov	r0, sl
 801673a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801673e:	4798      	blx	r3
 8016740:	2800      	cmp	r0, #0
 8016742:	d0df      	beq.n	8016704 <_scanf_i+0x11c>
 8016744:	6823      	ldr	r3, [r4, #0]
 8016746:	05d9      	lsls	r1, r3, #23
 8016748:	d50d      	bpl.n	8016766 <_scanf_i+0x17e>
 801674a:	42bd      	cmp	r5, r7
 801674c:	d909      	bls.n	8016762 <_scanf_i+0x17a>
 801674e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016752:	4632      	mov	r2, r6
 8016754:	4650      	mov	r0, sl
 8016756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801675a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801675e:	4798      	blx	r3
 8016760:	464d      	mov	r5, r9
 8016762:	42bd      	cmp	r5, r7
 8016764:	d028      	beq.n	80167b8 <_scanf_i+0x1d0>
 8016766:	6822      	ldr	r2, [r4, #0]
 8016768:	f012 0210 	ands.w	r2, r2, #16
 801676c:	d113      	bne.n	8016796 <_scanf_i+0x1ae>
 801676e:	702a      	strb	r2, [r5, #0]
 8016770:	4639      	mov	r1, r7
 8016772:	6863      	ldr	r3, [r4, #4]
 8016774:	4650      	mov	r0, sl
 8016776:	9e01      	ldr	r6, [sp, #4]
 8016778:	47b0      	blx	r6
 801677a:	f8d8 3000 	ldr.w	r3, [r8]
 801677e:	6821      	ldr	r1, [r4, #0]
 8016780:	1d1a      	adds	r2, r3, #4
 8016782:	f8c8 2000 	str.w	r2, [r8]
 8016786:	f011 0f20 	tst.w	r1, #32
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	d00f      	beq.n	80167ae <_scanf_i+0x1c6>
 801678e:	6018      	str	r0, [r3, #0]
 8016790:	68e3      	ldr	r3, [r4, #12]
 8016792:	3301      	adds	r3, #1
 8016794:	60e3      	str	r3, [r4, #12]
 8016796:	2000      	movs	r0, #0
 8016798:	1bed      	subs	r5, r5, r7
 801679a:	44ab      	add	fp, r5
 801679c:	6925      	ldr	r5, [r4, #16]
 801679e:	445d      	add	r5, fp
 80167a0:	6125      	str	r5, [r4, #16]
 80167a2:	b007      	add	sp, #28
 80167a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a8:	f04f 0b00 	mov.w	fp, #0
 80167ac:	e7ca      	b.n	8016744 <_scanf_i+0x15c>
 80167ae:	07ca      	lsls	r2, r1, #31
 80167b0:	bf4c      	ite	mi
 80167b2:	8018      	strhmi	r0, [r3, #0]
 80167b4:	6018      	strpl	r0, [r3, #0]
 80167b6:	e7eb      	b.n	8016790 <_scanf_i+0x1a8>
 80167b8:	2001      	movs	r0, #1
 80167ba:	e7f2      	b.n	80167a2 <_scanf_i+0x1ba>
 80167bc:	0801759c 	.word	0x0801759c
 80167c0:	0801698d 	.word	0x0801698d
 80167c4:	080140f1 	.word	0x080140f1
 80167c8:	08017c56 	.word	0x08017c56

080167cc <_read_r>:
 80167cc:	b538      	push	{r3, r4, r5, lr}
 80167ce:	4604      	mov	r4, r0
 80167d0:	4608      	mov	r0, r1
 80167d2:	4611      	mov	r1, r2
 80167d4:	2200      	movs	r2, #0
 80167d6:	4d05      	ldr	r5, [pc, #20]	; (80167ec <_read_r+0x20>)
 80167d8:	602a      	str	r2, [r5, #0]
 80167da:	461a      	mov	r2, r3
 80167dc:	f7ed fb2f 	bl	8003e3e <_read>
 80167e0:	1c43      	adds	r3, r0, #1
 80167e2:	d102      	bne.n	80167ea <_read_r+0x1e>
 80167e4:	682b      	ldr	r3, [r5, #0]
 80167e6:	b103      	cbz	r3, 80167ea <_read_r+0x1e>
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	bd38      	pop	{r3, r4, r5, pc}
 80167ec:	20001d5c 	.word	0x20001d5c

080167f0 <nan>:
 80167f0:	2000      	movs	r0, #0
 80167f2:	4901      	ldr	r1, [pc, #4]	; (80167f8 <nan+0x8>)
 80167f4:	4770      	bx	lr
 80167f6:	bf00      	nop
 80167f8:	7ff80000 	.word	0x7ff80000

080167fc <__sccl>:
 80167fc:	b570      	push	{r4, r5, r6, lr}
 80167fe:	780b      	ldrb	r3, [r1, #0]
 8016800:	4604      	mov	r4, r0
 8016802:	2b5e      	cmp	r3, #94	; 0x5e
 8016804:	bf13      	iteet	ne
 8016806:	2200      	movne	r2, #0
 8016808:	2201      	moveq	r2, #1
 801680a:	784b      	ldrbeq	r3, [r1, #1]
 801680c:	1c48      	addne	r0, r1, #1
 801680e:	bf08      	it	eq
 8016810:	1c88      	addeq	r0, r1, #2
 8016812:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016816:	1e61      	subs	r1, r4, #1
 8016818:	f801 2f01 	strb.w	r2, [r1, #1]!
 801681c:	42a9      	cmp	r1, r5
 801681e:	d1fb      	bne.n	8016818 <__sccl+0x1c>
 8016820:	b90b      	cbnz	r3, 8016826 <__sccl+0x2a>
 8016822:	3801      	subs	r0, #1
 8016824:	bd70      	pop	{r4, r5, r6, pc}
 8016826:	f082 0101 	eor.w	r1, r2, #1
 801682a:	54e1      	strb	r1, [r4, r3]
 801682c:	1c42      	adds	r2, r0, #1
 801682e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016832:	4610      	mov	r0, r2
 8016834:	2d2d      	cmp	r5, #45	; 0x2d
 8016836:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801683a:	d006      	beq.n	801684a <__sccl+0x4e>
 801683c:	2d5d      	cmp	r5, #93	; 0x5d
 801683e:	d0f1      	beq.n	8016824 <__sccl+0x28>
 8016840:	b90d      	cbnz	r5, 8016846 <__sccl+0x4a>
 8016842:	4630      	mov	r0, r6
 8016844:	e7ee      	b.n	8016824 <__sccl+0x28>
 8016846:	462b      	mov	r3, r5
 8016848:	e7ef      	b.n	801682a <__sccl+0x2e>
 801684a:	7816      	ldrb	r6, [r2, #0]
 801684c:	2e5d      	cmp	r6, #93	; 0x5d
 801684e:	d0fa      	beq.n	8016846 <__sccl+0x4a>
 8016850:	42b3      	cmp	r3, r6
 8016852:	dcf8      	bgt.n	8016846 <__sccl+0x4a>
 8016854:	4618      	mov	r0, r3
 8016856:	3001      	adds	r0, #1
 8016858:	4286      	cmp	r6, r0
 801685a:	5421      	strb	r1, [r4, r0]
 801685c:	dcfb      	bgt.n	8016856 <__sccl+0x5a>
 801685e:	43d8      	mvns	r0, r3
 8016860:	4430      	add	r0, r6
 8016862:	42b3      	cmp	r3, r6
 8016864:	bfa8      	it	ge
 8016866:	2000      	movge	r0, #0
 8016868:	1c5d      	adds	r5, r3, #1
 801686a:	182b      	adds	r3, r5, r0
 801686c:	3202      	adds	r2, #2
 801686e:	e7de      	b.n	801682e <__sccl+0x32>

08016870 <strncmp>:
 8016870:	b510      	push	{r4, lr}
 8016872:	b16a      	cbz	r2, 8016890 <strncmp+0x20>
 8016874:	3901      	subs	r1, #1
 8016876:	1884      	adds	r4, r0, r2
 8016878:	f810 3b01 	ldrb.w	r3, [r0], #1
 801687c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016880:	4293      	cmp	r3, r2
 8016882:	d103      	bne.n	801688c <strncmp+0x1c>
 8016884:	42a0      	cmp	r0, r4
 8016886:	d001      	beq.n	801688c <strncmp+0x1c>
 8016888:	2b00      	cmp	r3, #0
 801688a:	d1f5      	bne.n	8016878 <strncmp+0x8>
 801688c:	1a98      	subs	r0, r3, r2
 801688e:	bd10      	pop	{r4, pc}
 8016890:	4610      	mov	r0, r2
 8016892:	e7fc      	b.n	801688e <strncmp+0x1e>

08016894 <_strtoul_l.isra.0>:
 8016894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016898:	468c      	mov	ip, r1
 801689a:	4686      	mov	lr, r0
 801689c:	4e3a      	ldr	r6, [pc, #232]	; (8016988 <_strtoul_l.isra.0+0xf4>)
 801689e:	4660      	mov	r0, ip
 80168a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80168a4:	5da5      	ldrb	r5, [r4, r6]
 80168a6:	f015 0508 	ands.w	r5, r5, #8
 80168aa:	d1f8      	bne.n	801689e <_strtoul_l.isra.0+0xa>
 80168ac:	2c2d      	cmp	r4, #45	; 0x2d
 80168ae:	d134      	bne.n	801691a <_strtoul_l.isra.0+0x86>
 80168b0:	f04f 0801 	mov.w	r8, #1
 80168b4:	f89c 4000 	ldrb.w	r4, [ip]
 80168b8:	f100 0c02 	add.w	ip, r0, #2
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d05e      	beq.n	801697e <_strtoul_l.isra.0+0xea>
 80168c0:	2b10      	cmp	r3, #16
 80168c2:	d10c      	bne.n	80168de <_strtoul_l.isra.0+0x4a>
 80168c4:	2c30      	cmp	r4, #48	; 0x30
 80168c6:	d10a      	bne.n	80168de <_strtoul_l.isra.0+0x4a>
 80168c8:	f89c 0000 	ldrb.w	r0, [ip]
 80168cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80168d0:	2858      	cmp	r0, #88	; 0x58
 80168d2:	d14f      	bne.n	8016974 <_strtoul_l.isra.0+0xe0>
 80168d4:	2310      	movs	r3, #16
 80168d6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80168da:	f10c 0c02 	add.w	ip, ip, #2
 80168de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80168e2:	fbb7 f7f3 	udiv	r7, r7, r3
 80168e6:	2500      	movs	r5, #0
 80168e8:	fb03 f907 	mul.w	r9, r3, r7
 80168ec:	4628      	mov	r0, r5
 80168ee:	ea6f 0909 	mvn.w	r9, r9
 80168f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80168f6:	2e09      	cmp	r6, #9
 80168f8:	d818      	bhi.n	801692c <_strtoul_l.isra.0+0x98>
 80168fa:	4634      	mov	r4, r6
 80168fc:	42a3      	cmp	r3, r4
 80168fe:	dd24      	ble.n	801694a <_strtoul_l.isra.0+0xb6>
 8016900:	2d00      	cmp	r5, #0
 8016902:	db1f      	blt.n	8016944 <_strtoul_l.isra.0+0xb0>
 8016904:	4287      	cmp	r7, r0
 8016906:	d31d      	bcc.n	8016944 <_strtoul_l.isra.0+0xb0>
 8016908:	d101      	bne.n	801690e <_strtoul_l.isra.0+0x7a>
 801690a:	45a1      	cmp	r9, r4
 801690c:	db1a      	blt.n	8016944 <_strtoul_l.isra.0+0xb0>
 801690e:	2501      	movs	r5, #1
 8016910:	fb00 4003 	mla	r0, r0, r3, r4
 8016914:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016918:	e7eb      	b.n	80168f2 <_strtoul_l.isra.0+0x5e>
 801691a:	2c2b      	cmp	r4, #43	; 0x2b
 801691c:	bf08      	it	eq
 801691e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8016922:	46a8      	mov	r8, r5
 8016924:	bf08      	it	eq
 8016926:	f100 0c02 	addeq.w	ip, r0, #2
 801692a:	e7c7      	b.n	80168bc <_strtoul_l.isra.0+0x28>
 801692c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016930:	2e19      	cmp	r6, #25
 8016932:	d801      	bhi.n	8016938 <_strtoul_l.isra.0+0xa4>
 8016934:	3c37      	subs	r4, #55	; 0x37
 8016936:	e7e1      	b.n	80168fc <_strtoul_l.isra.0+0x68>
 8016938:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801693c:	2e19      	cmp	r6, #25
 801693e:	d804      	bhi.n	801694a <_strtoul_l.isra.0+0xb6>
 8016940:	3c57      	subs	r4, #87	; 0x57
 8016942:	e7db      	b.n	80168fc <_strtoul_l.isra.0+0x68>
 8016944:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016948:	e7e4      	b.n	8016914 <_strtoul_l.isra.0+0x80>
 801694a:	2d00      	cmp	r5, #0
 801694c:	da07      	bge.n	801695e <_strtoul_l.isra.0+0xca>
 801694e:	2322      	movs	r3, #34	; 0x22
 8016950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016954:	f8ce 3000 	str.w	r3, [lr]
 8016958:	b942      	cbnz	r2, 801696c <_strtoul_l.isra.0+0xd8>
 801695a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801695e:	f1b8 0f00 	cmp.w	r8, #0
 8016962:	d000      	beq.n	8016966 <_strtoul_l.isra.0+0xd2>
 8016964:	4240      	negs	r0, r0
 8016966:	2a00      	cmp	r2, #0
 8016968:	d0f7      	beq.n	801695a <_strtoul_l.isra.0+0xc6>
 801696a:	b10d      	cbz	r5, 8016970 <_strtoul_l.isra.0+0xdc>
 801696c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8016970:	6011      	str	r1, [r2, #0]
 8016972:	e7f2      	b.n	801695a <_strtoul_l.isra.0+0xc6>
 8016974:	2430      	movs	r4, #48	; 0x30
 8016976:	2b00      	cmp	r3, #0
 8016978:	d1b1      	bne.n	80168de <_strtoul_l.isra.0+0x4a>
 801697a:	2308      	movs	r3, #8
 801697c:	e7af      	b.n	80168de <_strtoul_l.isra.0+0x4a>
 801697e:	2c30      	cmp	r4, #48	; 0x30
 8016980:	d0a2      	beq.n	80168c8 <_strtoul_l.isra.0+0x34>
 8016982:	230a      	movs	r3, #10
 8016984:	e7ab      	b.n	80168de <_strtoul_l.isra.0+0x4a>
 8016986:	bf00      	nop
 8016988:	080178b9 	.word	0x080178b9

0801698c <_strtoul_r>:
 801698c:	f7ff bf82 	b.w	8016894 <_strtoul_l.isra.0>

08016990 <__submore>:
 8016990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016994:	460c      	mov	r4, r1
 8016996:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801699c:	4299      	cmp	r1, r3
 801699e:	d11b      	bne.n	80169d8 <__submore+0x48>
 80169a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80169a4:	f7fb fd2e 	bl	8012404 <_malloc_r>
 80169a8:	b918      	cbnz	r0, 80169b2 <__submore+0x22>
 80169aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80169b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80169bc:	6360      	str	r0, [r4, #52]	; 0x34
 80169be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80169c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80169c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80169ca:	7043      	strb	r3, [r0, #1]
 80169cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80169d0:	7003      	strb	r3, [r0, #0]
 80169d2:	6020      	str	r0, [r4, #0]
 80169d4:	2000      	movs	r0, #0
 80169d6:	e7ea      	b.n	80169ae <__submore+0x1e>
 80169d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80169da:	0077      	lsls	r7, r6, #1
 80169dc:	463a      	mov	r2, r7
 80169de:	f000 fa04 	bl	8016dea <_realloc_r>
 80169e2:	4605      	mov	r5, r0
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d0e0      	beq.n	80169aa <__submore+0x1a>
 80169e8:	eb00 0806 	add.w	r8, r0, r6
 80169ec:	4601      	mov	r1, r0
 80169ee:	4632      	mov	r2, r6
 80169f0:	4640      	mov	r0, r8
 80169f2:	f7fb fc7d 	bl	80122f0 <memcpy>
 80169f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80169fa:	f8c4 8000 	str.w	r8, [r4]
 80169fe:	e7e9      	b.n	80169d4 <__submore+0x44>

08016a00 <__ascii_wctomb>:
 8016a00:	4603      	mov	r3, r0
 8016a02:	4608      	mov	r0, r1
 8016a04:	b141      	cbz	r1, 8016a18 <__ascii_wctomb+0x18>
 8016a06:	2aff      	cmp	r2, #255	; 0xff
 8016a08:	d904      	bls.n	8016a14 <__ascii_wctomb+0x14>
 8016a0a:	228a      	movs	r2, #138	; 0x8a
 8016a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a10:	601a      	str	r2, [r3, #0]
 8016a12:	4770      	bx	lr
 8016a14:	2001      	movs	r0, #1
 8016a16:	700a      	strb	r2, [r1, #0]
 8016a18:	4770      	bx	lr
	...

08016a1c <__assert_func>:
 8016a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a1e:	4614      	mov	r4, r2
 8016a20:	461a      	mov	r2, r3
 8016a22:	4b09      	ldr	r3, [pc, #36]	; (8016a48 <__assert_func+0x2c>)
 8016a24:	4605      	mov	r5, r0
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	68d8      	ldr	r0, [r3, #12]
 8016a2a:	b14c      	cbz	r4, 8016a40 <__assert_func+0x24>
 8016a2c:	4b07      	ldr	r3, [pc, #28]	; (8016a4c <__assert_func+0x30>)
 8016a2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a32:	9100      	str	r1, [sp, #0]
 8016a34:	462b      	mov	r3, r5
 8016a36:	4906      	ldr	r1, [pc, #24]	; (8016a50 <__assert_func+0x34>)
 8016a38:	f000 f9a6 	bl	8016d88 <fiprintf>
 8016a3c:	f7fb fc00 	bl	8012240 <abort>
 8016a40:	4b04      	ldr	r3, [pc, #16]	; (8016a54 <__assert_func+0x38>)
 8016a42:	461c      	mov	r4, r3
 8016a44:	e7f3      	b.n	8016a2e <__assert_func+0x12>
 8016a46:	bf00      	nop
 8016a48:	20000224 	.word	0x20000224
 8016a4c:	08017c58 	.word	0x08017c58
 8016a50:	08017c65 	.word	0x08017c65
 8016a54:	08017c93 	.word	0x08017c93

08016a58 <__sflush_r>:
 8016a58:	898a      	ldrh	r2, [r1, #12]
 8016a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a5e:	4605      	mov	r5, r0
 8016a60:	0710      	lsls	r0, r2, #28
 8016a62:	460c      	mov	r4, r1
 8016a64:	d458      	bmi.n	8016b18 <__sflush_r+0xc0>
 8016a66:	684b      	ldr	r3, [r1, #4]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	dc05      	bgt.n	8016a78 <__sflush_r+0x20>
 8016a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	dc02      	bgt.n	8016a78 <__sflush_r+0x20>
 8016a72:	2000      	movs	r0, #0
 8016a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a7a:	2e00      	cmp	r6, #0
 8016a7c:	d0f9      	beq.n	8016a72 <__sflush_r+0x1a>
 8016a7e:	2300      	movs	r3, #0
 8016a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a84:	682f      	ldr	r7, [r5, #0]
 8016a86:	602b      	str	r3, [r5, #0]
 8016a88:	d032      	beq.n	8016af0 <__sflush_r+0x98>
 8016a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a8c:	89a3      	ldrh	r3, [r4, #12]
 8016a8e:	075a      	lsls	r2, r3, #29
 8016a90:	d505      	bpl.n	8016a9e <__sflush_r+0x46>
 8016a92:	6863      	ldr	r3, [r4, #4]
 8016a94:	1ac0      	subs	r0, r0, r3
 8016a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a98:	b10b      	cbz	r3, 8016a9e <__sflush_r+0x46>
 8016a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016a9c:	1ac0      	subs	r0, r0, r3
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016aa4:	4628      	mov	r0, r5
 8016aa6:	6a21      	ldr	r1, [r4, #32]
 8016aa8:	47b0      	blx	r6
 8016aaa:	1c43      	adds	r3, r0, #1
 8016aac:	89a3      	ldrh	r3, [r4, #12]
 8016aae:	d106      	bne.n	8016abe <__sflush_r+0x66>
 8016ab0:	6829      	ldr	r1, [r5, #0]
 8016ab2:	291d      	cmp	r1, #29
 8016ab4:	d82c      	bhi.n	8016b10 <__sflush_r+0xb8>
 8016ab6:	4a2a      	ldr	r2, [pc, #168]	; (8016b60 <__sflush_r+0x108>)
 8016ab8:	40ca      	lsrs	r2, r1
 8016aba:	07d6      	lsls	r6, r2, #31
 8016abc:	d528      	bpl.n	8016b10 <__sflush_r+0xb8>
 8016abe:	2200      	movs	r2, #0
 8016ac0:	6062      	str	r2, [r4, #4]
 8016ac2:	6922      	ldr	r2, [r4, #16]
 8016ac4:	04d9      	lsls	r1, r3, #19
 8016ac6:	6022      	str	r2, [r4, #0]
 8016ac8:	d504      	bpl.n	8016ad4 <__sflush_r+0x7c>
 8016aca:	1c42      	adds	r2, r0, #1
 8016acc:	d101      	bne.n	8016ad2 <__sflush_r+0x7a>
 8016ace:	682b      	ldr	r3, [r5, #0]
 8016ad0:	b903      	cbnz	r3, 8016ad4 <__sflush_r+0x7c>
 8016ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8016ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ad6:	602f      	str	r7, [r5, #0]
 8016ad8:	2900      	cmp	r1, #0
 8016ada:	d0ca      	beq.n	8016a72 <__sflush_r+0x1a>
 8016adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ae0:	4299      	cmp	r1, r3
 8016ae2:	d002      	beq.n	8016aea <__sflush_r+0x92>
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	f7fb fc41 	bl	801236c <_free_r>
 8016aea:	2000      	movs	r0, #0
 8016aec:	6360      	str	r0, [r4, #52]	; 0x34
 8016aee:	e7c1      	b.n	8016a74 <__sflush_r+0x1c>
 8016af0:	6a21      	ldr	r1, [r4, #32]
 8016af2:	2301      	movs	r3, #1
 8016af4:	4628      	mov	r0, r5
 8016af6:	47b0      	blx	r6
 8016af8:	1c41      	adds	r1, r0, #1
 8016afa:	d1c7      	bne.n	8016a8c <__sflush_r+0x34>
 8016afc:	682b      	ldr	r3, [r5, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d0c4      	beq.n	8016a8c <__sflush_r+0x34>
 8016b02:	2b1d      	cmp	r3, #29
 8016b04:	d001      	beq.n	8016b0a <__sflush_r+0xb2>
 8016b06:	2b16      	cmp	r3, #22
 8016b08:	d101      	bne.n	8016b0e <__sflush_r+0xb6>
 8016b0a:	602f      	str	r7, [r5, #0]
 8016b0c:	e7b1      	b.n	8016a72 <__sflush_r+0x1a>
 8016b0e:	89a3      	ldrh	r3, [r4, #12]
 8016b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b14:	81a3      	strh	r3, [r4, #12]
 8016b16:	e7ad      	b.n	8016a74 <__sflush_r+0x1c>
 8016b18:	690f      	ldr	r7, [r1, #16]
 8016b1a:	2f00      	cmp	r7, #0
 8016b1c:	d0a9      	beq.n	8016a72 <__sflush_r+0x1a>
 8016b1e:	0793      	lsls	r3, r2, #30
 8016b20:	bf18      	it	ne
 8016b22:	2300      	movne	r3, #0
 8016b24:	680e      	ldr	r6, [r1, #0]
 8016b26:	bf08      	it	eq
 8016b28:	694b      	ldreq	r3, [r1, #20]
 8016b2a:	eba6 0807 	sub.w	r8, r6, r7
 8016b2e:	600f      	str	r7, [r1, #0]
 8016b30:	608b      	str	r3, [r1, #8]
 8016b32:	f1b8 0f00 	cmp.w	r8, #0
 8016b36:	dd9c      	ble.n	8016a72 <__sflush_r+0x1a>
 8016b38:	4643      	mov	r3, r8
 8016b3a:	463a      	mov	r2, r7
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	6a21      	ldr	r1, [r4, #32]
 8016b40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016b42:	47b0      	blx	r6
 8016b44:	2800      	cmp	r0, #0
 8016b46:	dc06      	bgt.n	8016b56 <__sflush_r+0xfe>
 8016b48:	89a3      	ldrh	r3, [r4, #12]
 8016b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b52:	81a3      	strh	r3, [r4, #12]
 8016b54:	e78e      	b.n	8016a74 <__sflush_r+0x1c>
 8016b56:	4407      	add	r7, r0
 8016b58:	eba8 0800 	sub.w	r8, r8, r0
 8016b5c:	e7e9      	b.n	8016b32 <__sflush_r+0xda>
 8016b5e:	bf00      	nop
 8016b60:	20400001 	.word	0x20400001

08016b64 <_fflush_r>:
 8016b64:	b538      	push	{r3, r4, r5, lr}
 8016b66:	690b      	ldr	r3, [r1, #16]
 8016b68:	4605      	mov	r5, r0
 8016b6a:	460c      	mov	r4, r1
 8016b6c:	b913      	cbnz	r3, 8016b74 <_fflush_r+0x10>
 8016b6e:	2500      	movs	r5, #0
 8016b70:	4628      	mov	r0, r5
 8016b72:	bd38      	pop	{r3, r4, r5, pc}
 8016b74:	b118      	cbz	r0, 8016b7e <_fflush_r+0x1a>
 8016b76:	6983      	ldr	r3, [r0, #24]
 8016b78:	b90b      	cbnz	r3, 8016b7e <_fflush_r+0x1a>
 8016b7a:	f000 f887 	bl	8016c8c <__sinit>
 8016b7e:	4b14      	ldr	r3, [pc, #80]	; (8016bd0 <_fflush_r+0x6c>)
 8016b80:	429c      	cmp	r4, r3
 8016b82:	d11b      	bne.n	8016bbc <_fflush_r+0x58>
 8016b84:	686c      	ldr	r4, [r5, #4]
 8016b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d0ef      	beq.n	8016b6e <_fflush_r+0xa>
 8016b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016b90:	07d0      	lsls	r0, r2, #31
 8016b92:	d404      	bmi.n	8016b9e <_fflush_r+0x3a>
 8016b94:	0599      	lsls	r1, r3, #22
 8016b96:	d402      	bmi.n	8016b9e <_fflush_r+0x3a>
 8016b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b9a:	f7ed fab6 	bl	800410a <__retarget_lock_acquire_recursive>
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	4621      	mov	r1, r4
 8016ba2:	f7ff ff59 	bl	8016a58 <__sflush_r>
 8016ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ba8:	4605      	mov	r5, r0
 8016baa:	07da      	lsls	r2, r3, #31
 8016bac:	d4e0      	bmi.n	8016b70 <_fflush_r+0xc>
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	059b      	lsls	r3, r3, #22
 8016bb2:	d4dd      	bmi.n	8016b70 <_fflush_r+0xc>
 8016bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bb6:	f7ed fabc 	bl	8004132 <__retarget_lock_release_recursive>
 8016bba:	e7d9      	b.n	8016b70 <_fflush_r+0xc>
 8016bbc:	4b05      	ldr	r3, [pc, #20]	; (8016bd4 <_fflush_r+0x70>)
 8016bbe:	429c      	cmp	r4, r3
 8016bc0:	d101      	bne.n	8016bc6 <_fflush_r+0x62>
 8016bc2:	68ac      	ldr	r4, [r5, #8]
 8016bc4:	e7df      	b.n	8016b86 <_fflush_r+0x22>
 8016bc6:	4b04      	ldr	r3, [pc, #16]	; (8016bd8 <_fflush_r+0x74>)
 8016bc8:	429c      	cmp	r4, r3
 8016bca:	bf08      	it	eq
 8016bcc:	68ec      	ldreq	r4, [r5, #12]
 8016bce:	e7da      	b.n	8016b86 <_fflush_r+0x22>
 8016bd0:	08017cb4 	.word	0x08017cb4
 8016bd4:	08017cd4 	.word	0x08017cd4
 8016bd8:	08017c94 	.word	0x08017c94

08016bdc <std>:
 8016bdc:	2300      	movs	r3, #0
 8016bde:	b510      	push	{r4, lr}
 8016be0:	4604      	mov	r4, r0
 8016be2:	e9c0 3300 	strd	r3, r3, [r0]
 8016be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016bea:	6083      	str	r3, [r0, #8]
 8016bec:	8181      	strh	r1, [r0, #12]
 8016bee:	6643      	str	r3, [r0, #100]	; 0x64
 8016bf0:	81c2      	strh	r2, [r0, #14]
 8016bf2:	6183      	str	r3, [r0, #24]
 8016bf4:	4619      	mov	r1, r3
 8016bf6:	2208      	movs	r2, #8
 8016bf8:	305c      	adds	r0, #92	; 0x5c
 8016bfa:	f7fb fba1 	bl	8012340 <memset>
 8016bfe:	4b05      	ldr	r3, [pc, #20]	; (8016c14 <std+0x38>)
 8016c00:	6224      	str	r4, [r4, #32]
 8016c02:	6263      	str	r3, [r4, #36]	; 0x24
 8016c04:	4b04      	ldr	r3, [pc, #16]	; (8016c18 <std+0x3c>)
 8016c06:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c08:	4b04      	ldr	r3, [pc, #16]	; (8016c1c <std+0x40>)
 8016c0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c0c:	4b04      	ldr	r3, [pc, #16]	; (8016c20 <std+0x44>)
 8016c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8016c10:	bd10      	pop	{r4, pc}
 8016c12:	bf00      	nop
 8016c14:	080132e1 	.word	0x080132e1
 8016c18:	08013307 	.word	0x08013307
 8016c1c:	0801333f 	.word	0x0801333f
 8016c20:	08013363 	.word	0x08013363

08016c24 <_cleanup_r>:
 8016c24:	4901      	ldr	r1, [pc, #4]	; (8016c2c <_cleanup_r+0x8>)
 8016c26:	f000 b8c1 	b.w	8016dac <_fwalk_reent>
 8016c2a:	bf00      	nop
 8016c2c:	08016b65 	.word	0x08016b65

08016c30 <__sfmoreglue>:
 8016c30:	b570      	push	{r4, r5, r6, lr}
 8016c32:	2568      	movs	r5, #104	; 0x68
 8016c34:	1e4a      	subs	r2, r1, #1
 8016c36:	4355      	muls	r5, r2
 8016c38:	460e      	mov	r6, r1
 8016c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016c3e:	f7fb fbe1 	bl	8012404 <_malloc_r>
 8016c42:	4604      	mov	r4, r0
 8016c44:	b140      	cbz	r0, 8016c58 <__sfmoreglue+0x28>
 8016c46:	2100      	movs	r1, #0
 8016c48:	e9c0 1600 	strd	r1, r6, [r0]
 8016c4c:	300c      	adds	r0, #12
 8016c4e:	60a0      	str	r0, [r4, #8]
 8016c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016c54:	f7fb fb74 	bl	8012340 <memset>
 8016c58:	4620      	mov	r0, r4
 8016c5a:	bd70      	pop	{r4, r5, r6, pc}

08016c5c <__sfp_lock_acquire>:
 8016c5c:	4801      	ldr	r0, [pc, #4]	; (8016c64 <__sfp_lock_acquire+0x8>)
 8016c5e:	f7ed ba54 	b.w	800410a <__retarget_lock_acquire_recursive>
 8016c62:	bf00      	nop
 8016c64:	200006d4 	.word	0x200006d4

08016c68 <__sfp_lock_release>:
 8016c68:	4801      	ldr	r0, [pc, #4]	; (8016c70 <__sfp_lock_release+0x8>)
 8016c6a:	f7ed ba62 	b.w	8004132 <__retarget_lock_release_recursive>
 8016c6e:	bf00      	nop
 8016c70:	200006d4 	.word	0x200006d4

08016c74 <__sinit_lock_acquire>:
 8016c74:	4801      	ldr	r0, [pc, #4]	; (8016c7c <__sinit_lock_acquire+0x8>)
 8016c76:	f7ed ba48 	b.w	800410a <__retarget_lock_acquire_recursive>
 8016c7a:	bf00      	nop
 8016c7c:	200006d0 	.word	0x200006d0

08016c80 <__sinit_lock_release>:
 8016c80:	4801      	ldr	r0, [pc, #4]	; (8016c88 <__sinit_lock_release+0x8>)
 8016c82:	f7ed ba56 	b.w	8004132 <__retarget_lock_release_recursive>
 8016c86:	bf00      	nop
 8016c88:	200006d0 	.word	0x200006d0

08016c8c <__sinit>:
 8016c8c:	b510      	push	{r4, lr}
 8016c8e:	4604      	mov	r4, r0
 8016c90:	f7ff fff0 	bl	8016c74 <__sinit_lock_acquire>
 8016c94:	69a3      	ldr	r3, [r4, #24]
 8016c96:	b11b      	cbz	r3, 8016ca0 <__sinit+0x14>
 8016c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c9c:	f7ff bff0 	b.w	8016c80 <__sinit_lock_release>
 8016ca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ca4:	6523      	str	r3, [r4, #80]	; 0x50
 8016ca6:	4b13      	ldr	r3, [pc, #76]	; (8016cf4 <__sinit+0x68>)
 8016ca8:	4a13      	ldr	r2, [pc, #76]	; (8016cf8 <__sinit+0x6c>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	62a2      	str	r2, [r4, #40]	; 0x28
 8016cae:	42a3      	cmp	r3, r4
 8016cb0:	bf08      	it	eq
 8016cb2:	2301      	moveq	r3, #1
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	bf08      	it	eq
 8016cb8:	61a3      	streq	r3, [r4, #24]
 8016cba:	f000 f81f 	bl	8016cfc <__sfp>
 8016cbe:	6060      	str	r0, [r4, #4]
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	f000 f81b 	bl	8016cfc <__sfp>
 8016cc6:	60a0      	str	r0, [r4, #8]
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 f817 	bl	8016cfc <__sfp>
 8016cce:	2200      	movs	r2, #0
 8016cd0:	2104      	movs	r1, #4
 8016cd2:	60e0      	str	r0, [r4, #12]
 8016cd4:	6860      	ldr	r0, [r4, #4]
 8016cd6:	f7ff ff81 	bl	8016bdc <std>
 8016cda:	2201      	movs	r2, #1
 8016cdc:	2109      	movs	r1, #9
 8016cde:	68a0      	ldr	r0, [r4, #8]
 8016ce0:	f7ff ff7c 	bl	8016bdc <std>
 8016ce4:	2202      	movs	r2, #2
 8016ce6:	2112      	movs	r1, #18
 8016ce8:	68e0      	ldr	r0, [r4, #12]
 8016cea:	f7ff ff77 	bl	8016bdc <std>
 8016cee:	2301      	movs	r3, #1
 8016cf0:	61a3      	str	r3, [r4, #24]
 8016cf2:	e7d1      	b.n	8016c98 <__sinit+0xc>
 8016cf4:	08017828 	.word	0x08017828
 8016cf8:	08016c25 	.word	0x08016c25

08016cfc <__sfp>:
 8016cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfe:	4607      	mov	r7, r0
 8016d00:	f7ff ffac 	bl	8016c5c <__sfp_lock_acquire>
 8016d04:	4b1e      	ldr	r3, [pc, #120]	; (8016d80 <__sfp+0x84>)
 8016d06:	681e      	ldr	r6, [r3, #0]
 8016d08:	69b3      	ldr	r3, [r6, #24]
 8016d0a:	b913      	cbnz	r3, 8016d12 <__sfp+0x16>
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	f7ff ffbd 	bl	8016c8c <__sinit>
 8016d12:	3648      	adds	r6, #72	; 0x48
 8016d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	d503      	bpl.n	8016d24 <__sfp+0x28>
 8016d1c:	6833      	ldr	r3, [r6, #0]
 8016d1e:	b30b      	cbz	r3, 8016d64 <__sfp+0x68>
 8016d20:	6836      	ldr	r6, [r6, #0]
 8016d22:	e7f7      	b.n	8016d14 <__sfp+0x18>
 8016d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d28:	b9d5      	cbnz	r5, 8016d60 <__sfp+0x64>
 8016d2a:	4b16      	ldr	r3, [pc, #88]	; (8016d84 <__sfp+0x88>)
 8016d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d30:	60e3      	str	r3, [r4, #12]
 8016d32:	6665      	str	r5, [r4, #100]	; 0x64
 8016d34:	f7ed f9c3 	bl	80040be <__retarget_lock_init_recursive>
 8016d38:	f7ff ff96 	bl	8016c68 <__sfp_lock_release>
 8016d3c:	2208      	movs	r2, #8
 8016d3e:	4629      	mov	r1, r5
 8016d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016d48:	6025      	str	r5, [r4, #0]
 8016d4a:	61a5      	str	r5, [r4, #24]
 8016d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016d50:	f7fb faf6 	bl	8012340 <memset>
 8016d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d60:	3468      	adds	r4, #104	; 0x68
 8016d62:	e7d9      	b.n	8016d18 <__sfp+0x1c>
 8016d64:	2104      	movs	r1, #4
 8016d66:	4638      	mov	r0, r7
 8016d68:	f7ff ff62 	bl	8016c30 <__sfmoreglue>
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	6030      	str	r0, [r6, #0]
 8016d70:	2800      	cmp	r0, #0
 8016d72:	d1d5      	bne.n	8016d20 <__sfp+0x24>
 8016d74:	f7ff ff78 	bl	8016c68 <__sfp_lock_release>
 8016d78:	230c      	movs	r3, #12
 8016d7a:	603b      	str	r3, [r7, #0]
 8016d7c:	e7ee      	b.n	8016d5c <__sfp+0x60>
 8016d7e:	bf00      	nop
 8016d80:	08017828 	.word	0x08017828
 8016d84:	ffff0001 	.word	0xffff0001

08016d88 <fiprintf>:
 8016d88:	b40e      	push	{r1, r2, r3}
 8016d8a:	b503      	push	{r0, r1, lr}
 8016d8c:	4601      	mov	r1, r0
 8016d8e:	ab03      	add	r3, sp, #12
 8016d90:	4805      	ldr	r0, [pc, #20]	; (8016da8 <fiprintf+0x20>)
 8016d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d96:	6800      	ldr	r0, [r0, #0]
 8016d98:	9301      	str	r3, [sp, #4]
 8016d9a:	f000 f873 	bl	8016e84 <_vfiprintf_r>
 8016d9e:	b002      	add	sp, #8
 8016da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016da4:	b003      	add	sp, #12
 8016da6:	4770      	bx	lr
 8016da8:	20000224 	.word	0x20000224

08016dac <_fwalk_reent>:
 8016dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016db0:	4606      	mov	r6, r0
 8016db2:	4688      	mov	r8, r1
 8016db4:	2700      	movs	r7, #0
 8016db6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016dba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016dbe:	f1b9 0901 	subs.w	r9, r9, #1
 8016dc2:	d505      	bpl.n	8016dd0 <_fwalk_reent+0x24>
 8016dc4:	6824      	ldr	r4, [r4, #0]
 8016dc6:	2c00      	cmp	r4, #0
 8016dc8:	d1f7      	bne.n	8016dba <_fwalk_reent+0xe>
 8016dca:	4638      	mov	r0, r7
 8016dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dd0:	89ab      	ldrh	r3, [r5, #12]
 8016dd2:	2b01      	cmp	r3, #1
 8016dd4:	d907      	bls.n	8016de6 <_fwalk_reent+0x3a>
 8016dd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016dda:	3301      	adds	r3, #1
 8016ddc:	d003      	beq.n	8016de6 <_fwalk_reent+0x3a>
 8016dde:	4629      	mov	r1, r5
 8016de0:	4630      	mov	r0, r6
 8016de2:	47c0      	blx	r8
 8016de4:	4307      	orrs	r7, r0
 8016de6:	3568      	adds	r5, #104	; 0x68
 8016de8:	e7e9      	b.n	8016dbe <_fwalk_reent+0x12>

08016dea <_realloc_r>:
 8016dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dec:	4607      	mov	r7, r0
 8016dee:	4614      	mov	r4, r2
 8016df0:	460e      	mov	r6, r1
 8016df2:	b921      	cbnz	r1, 8016dfe <_realloc_r+0x14>
 8016df4:	4611      	mov	r1, r2
 8016df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016dfa:	f7fb bb03 	b.w	8012404 <_malloc_r>
 8016dfe:	b922      	cbnz	r2, 8016e0a <_realloc_r+0x20>
 8016e00:	f7fb fab4 	bl	801236c <_free_r>
 8016e04:	4625      	mov	r5, r4
 8016e06:	4628      	mov	r0, r5
 8016e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e0a:	f000 fa8f 	bl	801732c <_malloc_usable_size_r>
 8016e0e:	42a0      	cmp	r0, r4
 8016e10:	d20f      	bcs.n	8016e32 <_realloc_r+0x48>
 8016e12:	4621      	mov	r1, r4
 8016e14:	4638      	mov	r0, r7
 8016e16:	f7fb faf5 	bl	8012404 <_malloc_r>
 8016e1a:	4605      	mov	r5, r0
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	d0f2      	beq.n	8016e06 <_realloc_r+0x1c>
 8016e20:	4631      	mov	r1, r6
 8016e22:	4622      	mov	r2, r4
 8016e24:	f7fb fa64 	bl	80122f0 <memcpy>
 8016e28:	4631      	mov	r1, r6
 8016e2a:	4638      	mov	r0, r7
 8016e2c:	f7fb fa9e 	bl	801236c <_free_r>
 8016e30:	e7e9      	b.n	8016e06 <_realloc_r+0x1c>
 8016e32:	4635      	mov	r5, r6
 8016e34:	e7e7      	b.n	8016e06 <_realloc_r+0x1c>

08016e36 <__sfputc_r>:
 8016e36:	6893      	ldr	r3, [r2, #8]
 8016e38:	b410      	push	{r4}
 8016e3a:	3b01      	subs	r3, #1
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	6093      	str	r3, [r2, #8]
 8016e40:	da07      	bge.n	8016e52 <__sfputc_r+0x1c>
 8016e42:	6994      	ldr	r4, [r2, #24]
 8016e44:	42a3      	cmp	r3, r4
 8016e46:	db01      	blt.n	8016e4c <__sfputc_r+0x16>
 8016e48:	290a      	cmp	r1, #10
 8016e4a:	d102      	bne.n	8016e52 <__sfputc_r+0x1c>
 8016e4c:	bc10      	pop	{r4}
 8016e4e:	f000 b949 	b.w	80170e4 <__swbuf_r>
 8016e52:	6813      	ldr	r3, [r2, #0]
 8016e54:	1c58      	adds	r0, r3, #1
 8016e56:	6010      	str	r0, [r2, #0]
 8016e58:	7019      	strb	r1, [r3, #0]
 8016e5a:	4608      	mov	r0, r1
 8016e5c:	bc10      	pop	{r4}
 8016e5e:	4770      	bx	lr

08016e60 <__sfputs_r>:
 8016e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e62:	4606      	mov	r6, r0
 8016e64:	460f      	mov	r7, r1
 8016e66:	4614      	mov	r4, r2
 8016e68:	18d5      	adds	r5, r2, r3
 8016e6a:	42ac      	cmp	r4, r5
 8016e6c:	d101      	bne.n	8016e72 <__sfputs_r+0x12>
 8016e6e:	2000      	movs	r0, #0
 8016e70:	e007      	b.n	8016e82 <__sfputs_r+0x22>
 8016e72:	463a      	mov	r2, r7
 8016e74:	4630      	mov	r0, r6
 8016e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e7a:	f7ff ffdc 	bl	8016e36 <__sfputc_r>
 8016e7e:	1c43      	adds	r3, r0, #1
 8016e80:	d1f3      	bne.n	8016e6a <__sfputs_r+0xa>
 8016e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e84 <_vfiprintf_r>:
 8016e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e88:	460d      	mov	r5, r1
 8016e8a:	4614      	mov	r4, r2
 8016e8c:	4698      	mov	r8, r3
 8016e8e:	4606      	mov	r6, r0
 8016e90:	b09d      	sub	sp, #116	; 0x74
 8016e92:	b118      	cbz	r0, 8016e9c <_vfiprintf_r+0x18>
 8016e94:	6983      	ldr	r3, [r0, #24]
 8016e96:	b90b      	cbnz	r3, 8016e9c <_vfiprintf_r+0x18>
 8016e98:	f7ff fef8 	bl	8016c8c <__sinit>
 8016e9c:	4b89      	ldr	r3, [pc, #548]	; (80170c4 <_vfiprintf_r+0x240>)
 8016e9e:	429d      	cmp	r5, r3
 8016ea0:	d11b      	bne.n	8016eda <_vfiprintf_r+0x56>
 8016ea2:	6875      	ldr	r5, [r6, #4]
 8016ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ea6:	07d9      	lsls	r1, r3, #31
 8016ea8:	d405      	bmi.n	8016eb6 <_vfiprintf_r+0x32>
 8016eaa:	89ab      	ldrh	r3, [r5, #12]
 8016eac:	059a      	lsls	r2, r3, #22
 8016eae:	d402      	bmi.n	8016eb6 <_vfiprintf_r+0x32>
 8016eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016eb2:	f7ed f92a 	bl	800410a <__retarget_lock_acquire_recursive>
 8016eb6:	89ab      	ldrh	r3, [r5, #12]
 8016eb8:	071b      	lsls	r3, r3, #28
 8016eba:	d501      	bpl.n	8016ec0 <_vfiprintf_r+0x3c>
 8016ebc:	692b      	ldr	r3, [r5, #16]
 8016ebe:	b9eb      	cbnz	r3, 8016efc <_vfiprintf_r+0x78>
 8016ec0:	4629      	mov	r1, r5
 8016ec2:	4630      	mov	r0, r6
 8016ec4:	f000 f960 	bl	8017188 <__swsetup_r>
 8016ec8:	b1c0      	cbz	r0, 8016efc <_vfiprintf_r+0x78>
 8016eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ecc:	07dc      	lsls	r4, r3, #31
 8016ece:	d50e      	bpl.n	8016eee <_vfiprintf_r+0x6a>
 8016ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ed4:	b01d      	add	sp, #116	; 0x74
 8016ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eda:	4b7b      	ldr	r3, [pc, #492]	; (80170c8 <_vfiprintf_r+0x244>)
 8016edc:	429d      	cmp	r5, r3
 8016ede:	d101      	bne.n	8016ee4 <_vfiprintf_r+0x60>
 8016ee0:	68b5      	ldr	r5, [r6, #8]
 8016ee2:	e7df      	b.n	8016ea4 <_vfiprintf_r+0x20>
 8016ee4:	4b79      	ldr	r3, [pc, #484]	; (80170cc <_vfiprintf_r+0x248>)
 8016ee6:	429d      	cmp	r5, r3
 8016ee8:	bf08      	it	eq
 8016eea:	68f5      	ldreq	r5, [r6, #12]
 8016eec:	e7da      	b.n	8016ea4 <_vfiprintf_r+0x20>
 8016eee:	89ab      	ldrh	r3, [r5, #12]
 8016ef0:	0598      	lsls	r0, r3, #22
 8016ef2:	d4ed      	bmi.n	8016ed0 <_vfiprintf_r+0x4c>
 8016ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ef6:	f7ed f91c 	bl	8004132 <__retarget_lock_release_recursive>
 8016efa:	e7e9      	b.n	8016ed0 <_vfiprintf_r+0x4c>
 8016efc:	2300      	movs	r3, #0
 8016efe:	9309      	str	r3, [sp, #36]	; 0x24
 8016f00:	2320      	movs	r3, #32
 8016f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f06:	2330      	movs	r3, #48	; 0x30
 8016f08:	f04f 0901 	mov.w	r9, #1
 8016f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80170d0 <_vfiprintf_r+0x24c>
 8016f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f18:	4623      	mov	r3, r4
 8016f1a:	469a      	mov	sl, r3
 8016f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f20:	b10a      	cbz	r2, 8016f26 <_vfiprintf_r+0xa2>
 8016f22:	2a25      	cmp	r2, #37	; 0x25
 8016f24:	d1f9      	bne.n	8016f1a <_vfiprintf_r+0x96>
 8016f26:	ebba 0b04 	subs.w	fp, sl, r4
 8016f2a:	d00b      	beq.n	8016f44 <_vfiprintf_r+0xc0>
 8016f2c:	465b      	mov	r3, fp
 8016f2e:	4622      	mov	r2, r4
 8016f30:	4629      	mov	r1, r5
 8016f32:	4630      	mov	r0, r6
 8016f34:	f7ff ff94 	bl	8016e60 <__sfputs_r>
 8016f38:	3001      	adds	r0, #1
 8016f3a:	f000 80aa 	beq.w	8017092 <_vfiprintf_r+0x20e>
 8016f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f40:	445a      	add	r2, fp
 8016f42:	9209      	str	r2, [sp, #36]	; 0x24
 8016f44:	f89a 3000 	ldrb.w	r3, [sl]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	f000 80a2 	beq.w	8017092 <_vfiprintf_r+0x20e>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f58:	f10a 0a01 	add.w	sl, sl, #1
 8016f5c:	9304      	str	r3, [sp, #16]
 8016f5e:	9307      	str	r3, [sp, #28]
 8016f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f64:	931a      	str	r3, [sp, #104]	; 0x68
 8016f66:	4654      	mov	r4, sl
 8016f68:	2205      	movs	r2, #5
 8016f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f6e:	4858      	ldr	r0, [pc, #352]	; (80170d0 <_vfiprintf_r+0x24c>)
 8016f70:	f7fb f9b0 	bl	80122d4 <memchr>
 8016f74:	9a04      	ldr	r2, [sp, #16]
 8016f76:	b9d8      	cbnz	r0, 8016fb0 <_vfiprintf_r+0x12c>
 8016f78:	06d1      	lsls	r1, r2, #27
 8016f7a:	bf44      	itt	mi
 8016f7c:	2320      	movmi	r3, #32
 8016f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f82:	0713      	lsls	r3, r2, #28
 8016f84:	bf44      	itt	mi
 8016f86:	232b      	movmi	r3, #43	; 0x2b
 8016f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8016f90:	2b2a      	cmp	r3, #42	; 0x2a
 8016f92:	d015      	beq.n	8016fc0 <_vfiprintf_r+0x13c>
 8016f94:	4654      	mov	r4, sl
 8016f96:	2000      	movs	r0, #0
 8016f98:	f04f 0c0a 	mov.w	ip, #10
 8016f9c:	9a07      	ldr	r2, [sp, #28]
 8016f9e:	4621      	mov	r1, r4
 8016fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fa4:	3b30      	subs	r3, #48	; 0x30
 8016fa6:	2b09      	cmp	r3, #9
 8016fa8:	d94e      	bls.n	8017048 <_vfiprintf_r+0x1c4>
 8016faa:	b1b0      	cbz	r0, 8016fda <_vfiprintf_r+0x156>
 8016fac:	9207      	str	r2, [sp, #28]
 8016fae:	e014      	b.n	8016fda <_vfiprintf_r+0x156>
 8016fb0:	eba0 0308 	sub.w	r3, r0, r8
 8016fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	46a2      	mov	sl, r4
 8016fbc:	9304      	str	r3, [sp, #16]
 8016fbe:	e7d2      	b.n	8016f66 <_vfiprintf_r+0xe2>
 8016fc0:	9b03      	ldr	r3, [sp, #12]
 8016fc2:	1d19      	adds	r1, r3, #4
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	9103      	str	r1, [sp, #12]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	bfbb      	ittet	lt
 8016fcc:	425b      	neglt	r3, r3
 8016fce:	f042 0202 	orrlt.w	r2, r2, #2
 8016fd2:	9307      	strge	r3, [sp, #28]
 8016fd4:	9307      	strlt	r3, [sp, #28]
 8016fd6:	bfb8      	it	lt
 8016fd8:	9204      	strlt	r2, [sp, #16]
 8016fda:	7823      	ldrb	r3, [r4, #0]
 8016fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8016fde:	d10c      	bne.n	8016ffa <_vfiprintf_r+0x176>
 8016fe0:	7863      	ldrb	r3, [r4, #1]
 8016fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8016fe4:	d135      	bne.n	8017052 <_vfiprintf_r+0x1ce>
 8016fe6:	9b03      	ldr	r3, [sp, #12]
 8016fe8:	3402      	adds	r4, #2
 8016fea:	1d1a      	adds	r2, r3, #4
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	9203      	str	r2, [sp, #12]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	bfb8      	it	lt
 8016ff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016ff8:	9305      	str	r3, [sp, #20]
 8016ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80170e0 <_vfiprintf_r+0x25c>
 8016ffe:	2203      	movs	r2, #3
 8017000:	4650      	mov	r0, sl
 8017002:	7821      	ldrb	r1, [r4, #0]
 8017004:	f7fb f966 	bl	80122d4 <memchr>
 8017008:	b140      	cbz	r0, 801701c <_vfiprintf_r+0x198>
 801700a:	2340      	movs	r3, #64	; 0x40
 801700c:	eba0 000a 	sub.w	r0, r0, sl
 8017010:	fa03 f000 	lsl.w	r0, r3, r0
 8017014:	9b04      	ldr	r3, [sp, #16]
 8017016:	3401      	adds	r4, #1
 8017018:	4303      	orrs	r3, r0
 801701a:	9304      	str	r3, [sp, #16]
 801701c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017020:	2206      	movs	r2, #6
 8017022:	482c      	ldr	r0, [pc, #176]	; (80170d4 <_vfiprintf_r+0x250>)
 8017024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017028:	f7fb f954 	bl	80122d4 <memchr>
 801702c:	2800      	cmp	r0, #0
 801702e:	d03f      	beq.n	80170b0 <_vfiprintf_r+0x22c>
 8017030:	4b29      	ldr	r3, [pc, #164]	; (80170d8 <_vfiprintf_r+0x254>)
 8017032:	bb1b      	cbnz	r3, 801707c <_vfiprintf_r+0x1f8>
 8017034:	9b03      	ldr	r3, [sp, #12]
 8017036:	3307      	adds	r3, #7
 8017038:	f023 0307 	bic.w	r3, r3, #7
 801703c:	3308      	adds	r3, #8
 801703e:	9303      	str	r3, [sp, #12]
 8017040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017042:	443b      	add	r3, r7
 8017044:	9309      	str	r3, [sp, #36]	; 0x24
 8017046:	e767      	b.n	8016f18 <_vfiprintf_r+0x94>
 8017048:	460c      	mov	r4, r1
 801704a:	2001      	movs	r0, #1
 801704c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017050:	e7a5      	b.n	8016f9e <_vfiprintf_r+0x11a>
 8017052:	2300      	movs	r3, #0
 8017054:	f04f 0c0a 	mov.w	ip, #10
 8017058:	4619      	mov	r1, r3
 801705a:	3401      	adds	r4, #1
 801705c:	9305      	str	r3, [sp, #20]
 801705e:	4620      	mov	r0, r4
 8017060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017064:	3a30      	subs	r2, #48	; 0x30
 8017066:	2a09      	cmp	r2, #9
 8017068:	d903      	bls.n	8017072 <_vfiprintf_r+0x1ee>
 801706a:	2b00      	cmp	r3, #0
 801706c:	d0c5      	beq.n	8016ffa <_vfiprintf_r+0x176>
 801706e:	9105      	str	r1, [sp, #20]
 8017070:	e7c3      	b.n	8016ffa <_vfiprintf_r+0x176>
 8017072:	4604      	mov	r4, r0
 8017074:	2301      	movs	r3, #1
 8017076:	fb0c 2101 	mla	r1, ip, r1, r2
 801707a:	e7f0      	b.n	801705e <_vfiprintf_r+0x1da>
 801707c:	ab03      	add	r3, sp, #12
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	462a      	mov	r2, r5
 8017082:	4630      	mov	r0, r6
 8017084:	4b15      	ldr	r3, [pc, #84]	; (80170dc <_vfiprintf_r+0x258>)
 8017086:	a904      	add	r1, sp, #16
 8017088:	f7fb fab4 	bl	80125f4 <_printf_float>
 801708c:	4607      	mov	r7, r0
 801708e:	1c78      	adds	r0, r7, #1
 8017090:	d1d6      	bne.n	8017040 <_vfiprintf_r+0x1bc>
 8017092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017094:	07d9      	lsls	r1, r3, #31
 8017096:	d405      	bmi.n	80170a4 <_vfiprintf_r+0x220>
 8017098:	89ab      	ldrh	r3, [r5, #12]
 801709a:	059a      	lsls	r2, r3, #22
 801709c:	d402      	bmi.n	80170a4 <_vfiprintf_r+0x220>
 801709e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170a0:	f7ed f847 	bl	8004132 <__retarget_lock_release_recursive>
 80170a4:	89ab      	ldrh	r3, [r5, #12]
 80170a6:	065b      	lsls	r3, r3, #25
 80170a8:	f53f af12 	bmi.w	8016ed0 <_vfiprintf_r+0x4c>
 80170ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170ae:	e711      	b.n	8016ed4 <_vfiprintf_r+0x50>
 80170b0:	ab03      	add	r3, sp, #12
 80170b2:	9300      	str	r3, [sp, #0]
 80170b4:	462a      	mov	r2, r5
 80170b6:	4630      	mov	r0, r6
 80170b8:	4b08      	ldr	r3, [pc, #32]	; (80170dc <_vfiprintf_r+0x258>)
 80170ba:	a904      	add	r1, sp, #16
 80170bc:	f7fb fd36 	bl	8012b2c <_printf_i>
 80170c0:	e7e4      	b.n	801708c <_vfiprintf_r+0x208>
 80170c2:	bf00      	nop
 80170c4:	08017cb4 	.word	0x08017cb4
 80170c8:	08017cd4 	.word	0x08017cd4
 80170cc:	08017c94 	.word	0x08017c94
 80170d0:	08017c2c 	.word	0x08017c2c
 80170d4:	08017c36 	.word	0x08017c36
 80170d8:	080125f5 	.word	0x080125f5
 80170dc:	08016e61 	.word	0x08016e61
 80170e0:	08017c32 	.word	0x08017c32

080170e4 <__swbuf_r>:
 80170e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e6:	460e      	mov	r6, r1
 80170e8:	4614      	mov	r4, r2
 80170ea:	4605      	mov	r5, r0
 80170ec:	b118      	cbz	r0, 80170f6 <__swbuf_r+0x12>
 80170ee:	6983      	ldr	r3, [r0, #24]
 80170f0:	b90b      	cbnz	r3, 80170f6 <__swbuf_r+0x12>
 80170f2:	f7ff fdcb 	bl	8016c8c <__sinit>
 80170f6:	4b21      	ldr	r3, [pc, #132]	; (801717c <__swbuf_r+0x98>)
 80170f8:	429c      	cmp	r4, r3
 80170fa:	d12b      	bne.n	8017154 <__swbuf_r+0x70>
 80170fc:	686c      	ldr	r4, [r5, #4]
 80170fe:	69a3      	ldr	r3, [r4, #24]
 8017100:	60a3      	str	r3, [r4, #8]
 8017102:	89a3      	ldrh	r3, [r4, #12]
 8017104:	071a      	lsls	r2, r3, #28
 8017106:	d52f      	bpl.n	8017168 <__swbuf_r+0x84>
 8017108:	6923      	ldr	r3, [r4, #16]
 801710a:	b36b      	cbz	r3, 8017168 <__swbuf_r+0x84>
 801710c:	6923      	ldr	r3, [r4, #16]
 801710e:	6820      	ldr	r0, [r4, #0]
 8017110:	b2f6      	uxtb	r6, r6
 8017112:	1ac0      	subs	r0, r0, r3
 8017114:	6963      	ldr	r3, [r4, #20]
 8017116:	4637      	mov	r7, r6
 8017118:	4283      	cmp	r3, r0
 801711a:	dc04      	bgt.n	8017126 <__swbuf_r+0x42>
 801711c:	4621      	mov	r1, r4
 801711e:	4628      	mov	r0, r5
 8017120:	f7ff fd20 	bl	8016b64 <_fflush_r>
 8017124:	bb30      	cbnz	r0, 8017174 <__swbuf_r+0x90>
 8017126:	68a3      	ldr	r3, [r4, #8]
 8017128:	3001      	adds	r0, #1
 801712a:	3b01      	subs	r3, #1
 801712c:	60a3      	str	r3, [r4, #8]
 801712e:	6823      	ldr	r3, [r4, #0]
 8017130:	1c5a      	adds	r2, r3, #1
 8017132:	6022      	str	r2, [r4, #0]
 8017134:	701e      	strb	r6, [r3, #0]
 8017136:	6963      	ldr	r3, [r4, #20]
 8017138:	4283      	cmp	r3, r0
 801713a:	d004      	beq.n	8017146 <__swbuf_r+0x62>
 801713c:	89a3      	ldrh	r3, [r4, #12]
 801713e:	07db      	lsls	r3, r3, #31
 8017140:	d506      	bpl.n	8017150 <__swbuf_r+0x6c>
 8017142:	2e0a      	cmp	r6, #10
 8017144:	d104      	bne.n	8017150 <__swbuf_r+0x6c>
 8017146:	4621      	mov	r1, r4
 8017148:	4628      	mov	r0, r5
 801714a:	f7ff fd0b 	bl	8016b64 <_fflush_r>
 801714e:	b988      	cbnz	r0, 8017174 <__swbuf_r+0x90>
 8017150:	4638      	mov	r0, r7
 8017152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017154:	4b0a      	ldr	r3, [pc, #40]	; (8017180 <__swbuf_r+0x9c>)
 8017156:	429c      	cmp	r4, r3
 8017158:	d101      	bne.n	801715e <__swbuf_r+0x7a>
 801715a:	68ac      	ldr	r4, [r5, #8]
 801715c:	e7cf      	b.n	80170fe <__swbuf_r+0x1a>
 801715e:	4b09      	ldr	r3, [pc, #36]	; (8017184 <__swbuf_r+0xa0>)
 8017160:	429c      	cmp	r4, r3
 8017162:	bf08      	it	eq
 8017164:	68ec      	ldreq	r4, [r5, #12]
 8017166:	e7ca      	b.n	80170fe <__swbuf_r+0x1a>
 8017168:	4621      	mov	r1, r4
 801716a:	4628      	mov	r0, r5
 801716c:	f000 f80c 	bl	8017188 <__swsetup_r>
 8017170:	2800      	cmp	r0, #0
 8017172:	d0cb      	beq.n	801710c <__swbuf_r+0x28>
 8017174:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017178:	e7ea      	b.n	8017150 <__swbuf_r+0x6c>
 801717a:	bf00      	nop
 801717c:	08017cb4 	.word	0x08017cb4
 8017180:	08017cd4 	.word	0x08017cd4
 8017184:	08017c94 	.word	0x08017c94

08017188 <__swsetup_r>:
 8017188:	4b32      	ldr	r3, [pc, #200]	; (8017254 <__swsetup_r+0xcc>)
 801718a:	b570      	push	{r4, r5, r6, lr}
 801718c:	681d      	ldr	r5, [r3, #0]
 801718e:	4606      	mov	r6, r0
 8017190:	460c      	mov	r4, r1
 8017192:	b125      	cbz	r5, 801719e <__swsetup_r+0x16>
 8017194:	69ab      	ldr	r3, [r5, #24]
 8017196:	b913      	cbnz	r3, 801719e <__swsetup_r+0x16>
 8017198:	4628      	mov	r0, r5
 801719a:	f7ff fd77 	bl	8016c8c <__sinit>
 801719e:	4b2e      	ldr	r3, [pc, #184]	; (8017258 <__swsetup_r+0xd0>)
 80171a0:	429c      	cmp	r4, r3
 80171a2:	d10f      	bne.n	80171c4 <__swsetup_r+0x3c>
 80171a4:	686c      	ldr	r4, [r5, #4]
 80171a6:	89a3      	ldrh	r3, [r4, #12]
 80171a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171ac:	0719      	lsls	r1, r3, #28
 80171ae:	d42c      	bmi.n	801720a <__swsetup_r+0x82>
 80171b0:	06dd      	lsls	r5, r3, #27
 80171b2:	d411      	bmi.n	80171d8 <__swsetup_r+0x50>
 80171b4:	2309      	movs	r3, #9
 80171b6:	6033      	str	r3, [r6, #0]
 80171b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80171bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171c0:	81a3      	strh	r3, [r4, #12]
 80171c2:	e03e      	b.n	8017242 <__swsetup_r+0xba>
 80171c4:	4b25      	ldr	r3, [pc, #148]	; (801725c <__swsetup_r+0xd4>)
 80171c6:	429c      	cmp	r4, r3
 80171c8:	d101      	bne.n	80171ce <__swsetup_r+0x46>
 80171ca:	68ac      	ldr	r4, [r5, #8]
 80171cc:	e7eb      	b.n	80171a6 <__swsetup_r+0x1e>
 80171ce:	4b24      	ldr	r3, [pc, #144]	; (8017260 <__swsetup_r+0xd8>)
 80171d0:	429c      	cmp	r4, r3
 80171d2:	bf08      	it	eq
 80171d4:	68ec      	ldreq	r4, [r5, #12]
 80171d6:	e7e6      	b.n	80171a6 <__swsetup_r+0x1e>
 80171d8:	0758      	lsls	r0, r3, #29
 80171da:	d512      	bpl.n	8017202 <__swsetup_r+0x7a>
 80171dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171de:	b141      	cbz	r1, 80171f2 <__swsetup_r+0x6a>
 80171e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171e4:	4299      	cmp	r1, r3
 80171e6:	d002      	beq.n	80171ee <__swsetup_r+0x66>
 80171e8:	4630      	mov	r0, r6
 80171ea:	f7fb f8bf 	bl	801236c <_free_r>
 80171ee:	2300      	movs	r3, #0
 80171f0:	6363      	str	r3, [r4, #52]	; 0x34
 80171f2:	89a3      	ldrh	r3, [r4, #12]
 80171f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80171f8:	81a3      	strh	r3, [r4, #12]
 80171fa:	2300      	movs	r3, #0
 80171fc:	6063      	str	r3, [r4, #4]
 80171fe:	6923      	ldr	r3, [r4, #16]
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	89a3      	ldrh	r3, [r4, #12]
 8017204:	f043 0308 	orr.w	r3, r3, #8
 8017208:	81a3      	strh	r3, [r4, #12]
 801720a:	6923      	ldr	r3, [r4, #16]
 801720c:	b94b      	cbnz	r3, 8017222 <__swsetup_r+0x9a>
 801720e:	89a3      	ldrh	r3, [r4, #12]
 8017210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017218:	d003      	beq.n	8017222 <__swsetup_r+0x9a>
 801721a:	4621      	mov	r1, r4
 801721c:	4630      	mov	r0, r6
 801721e:	f000 f845 	bl	80172ac <__smakebuf_r>
 8017222:	89a0      	ldrh	r0, [r4, #12]
 8017224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017228:	f010 0301 	ands.w	r3, r0, #1
 801722c:	d00a      	beq.n	8017244 <__swsetup_r+0xbc>
 801722e:	2300      	movs	r3, #0
 8017230:	60a3      	str	r3, [r4, #8]
 8017232:	6963      	ldr	r3, [r4, #20]
 8017234:	425b      	negs	r3, r3
 8017236:	61a3      	str	r3, [r4, #24]
 8017238:	6923      	ldr	r3, [r4, #16]
 801723a:	b943      	cbnz	r3, 801724e <__swsetup_r+0xc6>
 801723c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017240:	d1ba      	bne.n	80171b8 <__swsetup_r+0x30>
 8017242:	bd70      	pop	{r4, r5, r6, pc}
 8017244:	0781      	lsls	r1, r0, #30
 8017246:	bf58      	it	pl
 8017248:	6963      	ldrpl	r3, [r4, #20]
 801724a:	60a3      	str	r3, [r4, #8]
 801724c:	e7f4      	b.n	8017238 <__swsetup_r+0xb0>
 801724e:	2000      	movs	r0, #0
 8017250:	e7f7      	b.n	8017242 <__swsetup_r+0xba>
 8017252:	bf00      	nop
 8017254:	20000224 	.word	0x20000224
 8017258:	08017cb4 	.word	0x08017cb4
 801725c:	08017cd4 	.word	0x08017cd4
 8017260:	08017c94 	.word	0x08017c94

08017264 <__swhatbuf_r>:
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	460e      	mov	r6, r1
 8017268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801726c:	4614      	mov	r4, r2
 801726e:	2900      	cmp	r1, #0
 8017270:	461d      	mov	r5, r3
 8017272:	b096      	sub	sp, #88	; 0x58
 8017274:	da07      	bge.n	8017286 <__swhatbuf_r+0x22>
 8017276:	2300      	movs	r3, #0
 8017278:	602b      	str	r3, [r5, #0]
 801727a:	89b3      	ldrh	r3, [r6, #12]
 801727c:	061a      	lsls	r2, r3, #24
 801727e:	d410      	bmi.n	80172a2 <__swhatbuf_r+0x3e>
 8017280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017284:	e00e      	b.n	80172a4 <__swhatbuf_r+0x40>
 8017286:	466a      	mov	r2, sp
 8017288:	f000 f858 	bl	801733c <_fstat_r>
 801728c:	2800      	cmp	r0, #0
 801728e:	dbf2      	blt.n	8017276 <__swhatbuf_r+0x12>
 8017290:	9a01      	ldr	r2, [sp, #4]
 8017292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801729a:	425a      	negs	r2, r3
 801729c:	415a      	adcs	r2, r3
 801729e:	602a      	str	r2, [r5, #0]
 80172a0:	e7ee      	b.n	8017280 <__swhatbuf_r+0x1c>
 80172a2:	2340      	movs	r3, #64	; 0x40
 80172a4:	2000      	movs	r0, #0
 80172a6:	6023      	str	r3, [r4, #0]
 80172a8:	b016      	add	sp, #88	; 0x58
 80172aa:	bd70      	pop	{r4, r5, r6, pc}

080172ac <__smakebuf_r>:
 80172ac:	898b      	ldrh	r3, [r1, #12]
 80172ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172b0:	079d      	lsls	r5, r3, #30
 80172b2:	4606      	mov	r6, r0
 80172b4:	460c      	mov	r4, r1
 80172b6:	d507      	bpl.n	80172c8 <__smakebuf_r+0x1c>
 80172b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80172bc:	6023      	str	r3, [r4, #0]
 80172be:	6123      	str	r3, [r4, #16]
 80172c0:	2301      	movs	r3, #1
 80172c2:	6163      	str	r3, [r4, #20]
 80172c4:	b002      	add	sp, #8
 80172c6:	bd70      	pop	{r4, r5, r6, pc}
 80172c8:	466a      	mov	r2, sp
 80172ca:	ab01      	add	r3, sp, #4
 80172cc:	f7ff ffca 	bl	8017264 <__swhatbuf_r>
 80172d0:	9900      	ldr	r1, [sp, #0]
 80172d2:	4605      	mov	r5, r0
 80172d4:	4630      	mov	r0, r6
 80172d6:	f7fb f895 	bl	8012404 <_malloc_r>
 80172da:	b948      	cbnz	r0, 80172f0 <__smakebuf_r+0x44>
 80172dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172e0:	059a      	lsls	r2, r3, #22
 80172e2:	d4ef      	bmi.n	80172c4 <__smakebuf_r+0x18>
 80172e4:	f023 0303 	bic.w	r3, r3, #3
 80172e8:	f043 0302 	orr.w	r3, r3, #2
 80172ec:	81a3      	strh	r3, [r4, #12]
 80172ee:	e7e3      	b.n	80172b8 <__smakebuf_r+0xc>
 80172f0:	4b0d      	ldr	r3, [pc, #52]	; (8017328 <__smakebuf_r+0x7c>)
 80172f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	6020      	str	r0, [r4, #0]
 80172f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172fc:	81a3      	strh	r3, [r4, #12]
 80172fe:	9b00      	ldr	r3, [sp, #0]
 8017300:	6120      	str	r0, [r4, #16]
 8017302:	6163      	str	r3, [r4, #20]
 8017304:	9b01      	ldr	r3, [sp, #4]
 8017306:	b15b      	cbz	r3, 8017320 <__smakebuf_r+0x74>
 8017308:	4630      	mov	r0, r6
 801730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801730e:	f000 f827 	bl	8017360 <_isatty_r>
 8017312:	b128      	cbz	r0, 8017320 <__smakebuf_r+0x74>
 8017314:	89a3      	ldrh	r3, [r4, #12]
 8017316:	f023 0303 	bic.w	r3, r3, #3
 801731a:	f043 0301 	orr.w	r3, r3, #1
 801731e:	81a3      	strh	r3, [r4, #12]
 8017320:	89a0      	ldrh	r0, [r4, #12]
 8017322:	4305      	orrs	r5, r0
 8017324:	81a5      	strh	r5, [r4, #12]
 8017326:	e7cd      	b.n	80172c4 <__smakebuf_r+0x18>
 8017328:	08016c25 	.word	0x08016c25

0801732c <_malloc_usable_size_r>:
 801732c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017330:	1f18      	subs	r0, r3, #4
 8017332:	2b00      	cmp	r3, #0
 8017334:	bfbc      	itt	lt
 8017336:	580b      	ldrlt	r3, [r1, r0]
 8017338:	18c0      	addlt	r0, r0, r3
 801733a:	4770      	bx	lr

0801733c <_fstat_r>:
 801733c:	b538      	push	{r3, r4, r5, lr}
 801733e:	2300      	movs	r3, #0
 8017340:	4d06      	ldr	r5, [pc, #24]	; (801735c <_fstat_r+0x20>)
 8017342:	4604      	mov	r4, r0
 8017344:	4608      	mov	r0, r1
 8017346:	4611      	mov	r1, r2
 8017348:	602b      	str	r3, [r5, #0]
 801734a:	f7ec fdbc 	bl	8003ec6 <_fstat>
 801734e:	1c43      	adds	r3, r0, #1
 8017350:	d102      	bne.n	8017358 <_fstat_r+0x1c>
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	b103      	cbz	r3, 8017358 <_fstat_r+0x1c>
 8017356:	6023      	str	r3, [r4, #0]
 8017358:	bd38      	pop	{r3, r4, r5, pc}
 801735a:	bf00      	nop
 801735c:	20001d5c 	.word	0x20001d5c

08017360 <_isatty_r>:
 8017360:	b538      	push	{r3, r4, r5, lr}
 8017362:	2300      	movs	r3, #0
 8017364:	4d05      	ldr	r5, [pc, #20]	; (801737c <_isatty_r+0x1c>)
 8017366:	4604      	mov	r4, r0
 8017368:	4608      	mov	r0, r1
 801736a:	602b      	str	r3, [r5, #0]
 801736c:	f7ec fdba 	bl	8003ee4 <_isatty>
 8017370:	1c43      	adds	r3, r0, #1
 8017372:	d102      	bne.n	801737a <_isatty_r+0x1a>
 8017374:	682b      	ldr	r3, [r5, #0]
 8017376:	b103      	cbz	r3, 801737a <_isatty_r+0x1a>
 8017378:	6023      	str	r3, [r4, #0]
 801737a:	bd38      	pop	{r3, r4, r5, pc}
 801737c:	20001d5c 	.word	0x20001d5c

08017380 <_init>:
 8017380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017382:	bf00      	nop
 8017384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017386:	bc08      	pop	{r3}
 8017388:	469e      	mov	lr, r3
 801738a:	4770      	bx	lr

0801738c <_fini>:
 801738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801738e:	bf00      	nop
 8017390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017392:	bc08      	pop	{r3}
 8017394:	469e      	mov	lr, r3
 8017396:	4770      	bx	lr
