
CustomBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b64  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  08014ca8  08014ca8  00024ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154e4  080154e4  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  080154e4  080154e4  000254e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154ec  080154ec  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080154ec  080154ec  000254ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080154f8  080154f8  000254f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  08015504  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  200003f8  080158fc  000303f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  080158fc  00031d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e8d5  00000000  00000000  00030421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006564  00000000  00000000  0006ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  00075260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  00077220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c8  00000000  00000000  00079010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f71  00000000  00000000  000986d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a755d  00000000  00000000  000bb649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3f8  00000000  00000000  00162bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003f8 	.word	0x200003f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08014c8c 	.word	0x08014c8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003fc 	.word	0x200003fc
 800017c:	08014c8c 	.word	0x08014c8c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010b4:	f000 b9a6 	b.w	8001404 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f83e 	bl	8001140 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_d2lz>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	460c      	mov	r4, r1
 80010d4:	4605      	mov	r5, r0
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff fc85 	bl	80009ec <__aeabi_dcmplt>
 80010e2:	b928      	cbnz	r0, 80010f0 <__aeabi_d2lz+0x20>
 80010e4:	4628      	mov	r0, r5
 80010e6:	4621      	mov	r1, r4
 80010e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ec:	f000 b80a 	b.w	8001104 <__aeabi_d2ulz>
 80010f0:	4628      	mov	r0, r5
 80010f2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010f6:	f000 f805 	bl	8001104 <__aeabi_d2ulz>
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	bd38      	pop	{r3, r4, r5, pc}
 8001102:	bf00      	nop

08001104 <__aeabi_d2ulz>:
 8001104:	b5d0      	push	{r4, r6, r7, lr}
 8001106:	2200      	movs	r2, #0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__aeabi_d2ulz+0x34>)
 800110a:	4606      	mov	r6, r0
 800110c:	460f      	mov	r7, r1
 800110e:	f7ff f9fb 	bl	8000508 <__aeabi_dmul>
 8001112:	f7ff fcd1 	bl	8000ab8 <__aeabi_d2uiz>
 8001116:	4604      	mov	r4, r0
 8001118:	f7ff f97c 	bl	8000414 <__aeabi_ui2d>
 800111c:	2200      	movs	r2, #0
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <__aeabi_d2ulz+0x38>)
 8001120:	f7ff f9f2 	bl	8000508 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4630      	mov	r0, r6
 800112a:	4639      	mov	r1, r7
 800112c:	f7ff f834 	bl	8000198 <__aeabi_dsub>
 8001130:	f7ff fcc2 	bl	8000ab8 <__aeabi_d2uiz>
 8001134:	4621      	mov	r1, r4
 8001136:	bdd0      	pop	{r4, r6, r7, pc}
 8001138:	3df00000 	.word	0x3df00000
 800113c:	41f00000 	.word	0x41f00000

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	9e08      	ldr	r6, [sp, #32]
 8001146:	460d      	mov	r5, r1
 8001148:	4604      	mov	r4, r0
 800114a:	468e      	mov	lr, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8083 	bne.w	8001258 <__udivmoddi4+0x118>
 8001152:	428a      	cmp	r2, r1
 8001154:	4617      	mov	r7, r2
 8001156:	d947      	bls.n	80011e8 <__udivmoddi4+0xa8>
 8001158:	fab2 f382 	clz	r3, r2
 800115c:	b14b      	cbz	r3, 8001172 <__udivmoddi4+0x32>
 800115e:	f1c3 0120 	rsb	r1, r3, #32
 8001162:	fa05 fe03 	lsl.w	lr, r5, r3
 8001166:	fa20 f101 	lsr.w	r1, r0, r1
 800116a:	409f      	lsls	r7, r3
 800116c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001176:	fbbe fcf8 	udiv	ip, lr, r8
 800117a:	fa1f f987 	uxth.w	r9, r7
 800117e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001182:	fb0c f009 	mul.w	r0, ip, r9
 8001186:	0c21      	lsrs	r1, r4, #16
 8001188:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x66>
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001196:	f080 8118 	bcs.w	80013ca <__udivmoddi4+0x28a>
 800119a:	4290      	cmp	r0, r2
 800119c:	f240 8115 	bls.w	80013ca <__udivmoddi4+0x28a>
 80011a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a4:	443a      	add	r2, r7
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011ac:	fb08 2210 	mls	r2, r8, r0, r2
 80011b0:	fb00 f109 	mul.w	r1, r0, r9
 80011b4:	b2a4      	uxth	r4, r4
 80011b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x92>
 80011be:	193c      	adds	r4, r7, r4
 80011c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c4:	f080 8103 	bcs.w	80013ce <__udivmoddi4+0x28e>
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	f240 8100 	bls.w	80013ce <__udivmoddi4+0x28e>
 80011ce:	3802      	subs	r0, #2
 80011d0:	443c      	add	r4, r7
 80011d2:	1a64      	subs	r4, r4, r1
 80011d4:	2100      	movs	r1, #0
 80011d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011da:	b11e      	cbz	r6, 80011e4 <__udivmoddi4+0xa4>
 80011dc:	2200      	movs	r2, #0
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	e9c6 4200 	strd	r4, r2, [r6]
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	b902      	cbnz	r2, 80011ec <__udivmoddi4+0xac>
 80011ea:	deff      	udf	#255	; 0xff
 80011ec:	fab2 f382 	clz	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <__udivmoddi4+0x154>
 80011f4:	1a8d      	subs	r5, r1, r2
 80011f6:	2101      	movs	r1, #1
 80011f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011fc:	fa1f f882 	uxth.w	r8, r2
 8001200:	fbb5 fcfe 	udiv	ip, r5, lr
 8001204:	fb0e 551c 	mls	r5, lr, ip, r5
 8001208:	fb08 f00c 	mul.w	r0, r8, ip
 800120c:	0c22      	lsrs	r2, r4, #16
 800120e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001212:	42a8      	cmp	r0, r5
 8001214:	d907      	bls.n	8001226 <__udivmoddi4+0xe6>
 8001216:	197d      	adds	r5, r7, r5
 8001218:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0xe4>
 800121e:	42a8      	cmp	r0, r5
 8001220:	f200 80e9 	bhi.w	80013f6 <__udivmoddi4+0x2b6>
 8001224:	4694      	mov	ip, r2
 8001226:	1a2d      	subs	r5, r5, r0
 8001228:	fbb5 f0fe 	udiv	r0, r5, lr
 800122c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001230:	fb08 f800 	mul.w	r8, r8, r0
 8001234:	b2a4      	uxth	r4, r4
 8001236:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800123a:	45a0      	cmp	r8, r4
 800123c:	d907      	bls.n	800124e <__udivmoddi4+0x10e>
 800123e:	193c      	adds	r4, r7, r4
 8001240:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001244:	d202      	bcs.n	800124c <__udivmoddi4+0x10c>
 8001246:	45a0      	cmp	r8, r4
 8001248:	f200 80d9 	bhi.w	80013fe <__udivmoddi4+0x2be>
 800124c:	4610      	mov	r0, r2
 800124e:	eba4 0408 	sub.w	r4, r4, r8
 8001252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001256:	e7c0      	b.n	80011da <__udivmoddi4+0x9a>
 8001258:	428b      	cmp	r3, r1
 800125a:	d908      	bls.n	800126e <__udivmoddi4+0x12e>
 800125c:	2e00      	cmp	r6, #0
 800125e:	f000 80b1 	beq.w	80013c4 <__udivmoddi4+0x284>
 8001262:	2100      	movs	r1, #0
 8001264:	e9c6 0500 	strd	r0, r5, [r6]
 8001268:	4608      	mov	r0, r1
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f183 	clz	r1, r3
 8001272:	2900      	cmp	r1, #0
 8001274:	d14b      	bne.n	800130e <__udivmoddi4+0x1ce>
 8001276:	42ab      	cmp	r3, r5
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0x140>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80b9 	bhi.w	80013f2 <__udivmoddi4+0x2b2>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb65 0303 	sbc.w	r3, r5, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469e      	mov	lr, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0aa      	beq.n	80011e4 <__udivmoddi4+0xa4>
 800128e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001292:	e7a7      	b.n	80011e4 <__udivmoddi4+0xa4>
 8001294:	409f      	lsls	r7, r3
 8001296:	f1c3 0220 	rsb	r2, r3, #32
 800129a:	40d1      	lsrs	r1, r2
 800129c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012a4:	fa1f f887 	uxth.w	r8, r7
 80012a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012ac:	fa24 f202 	lsr.w	r2, r4, r2
 80012b0:	409d      	lsls	r5, r3
 80012b2:	fb00 fc08 	mul.w	ip, r0, r8
 80012b6:	432a      	orrs	r2, r5
 80012b8:	0c15      	lsrs	r5, r2, #16
 80012ba:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012be:	45ac      	cmp	ip, r5
 80012c0:	fa04 f403 	lsl.w	r4, r4, r3
 80012c4:	d909      	bls.n	80012da <__udivmoddi4+0x19a>
 80012c6:	197d      	adds	r5, r7, r5
 80012c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80012cc:	f080 808f 	bcs.w	80013ee <__udivmoddi4+0x2ae>
 80012d0:	45ac      	cmp	ip, r5
 80012d2:	f240 808c 	bls.w	80013ee <__udivmoddi4+0x2ae>
 80012d6:	3802      	subs	r0, #2
 80012d8:	443d      	add	r5, r7
 80012da:	eba5 050c 	sub.w	r5, r5, ip
 80012de:	fbb5 f1fe 	udiv	r1, r5, lr
 80012e2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012e6:	fb01 f908 	mul.w	r9, r1, r8
 80012ea:	b295      	uxth	r5, r2
 80012ec:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d907      	bls.n	8001304 <__udivmoddi4+0x1c4>
 80012f4:	197d      	adds	r5, r7, r5
 80012f6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80012fa:	d274      	bcs.n	80013e6 <__udivmoddi4+0x2a6>
 80012fc:	45a9      	cmp	r9, r5
 80012fe:	d972      	bls.n	80013e6 <__udivmoddi4+0x2a6>
 8001300:	3902      	subs	r1, #2
 8001302:	443d      	add	r5, r7
 8001304:	eba5 0509 	sub.w	r5, r5, r9
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	e778      	b.n	8001200 <__udivmoddi4+0xc0>
 800130e:	f1c1 0720 	rsb	r7, r1, #32
 8001312:	408b      	lsls	r3, r1
 8001314:	fa22 fc07 	lsr.w	ip, r2, r7
 8001318:	ea4c 0c03 	orr.w	ip, ip, r3
 800131c:	fa25 f407 	lsr.w	r4, r5, r7
 8001320:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001324:	fbb4 f9fe 	udiv	r9, r4, lr
 8001328:	fa1f f88c 	uxth.w	r8, ip
 800132c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001330:	fa20 f307 	lsr.w	r3, r0, r7
 8001334:	fb09 fa08 	mul.w	sl, r9, r8
 8001338:	408d      	lsls	r5, r1
 800133a:	431d      	orrs	r5, r3
 800133c:	0c2b      	lsrs	r3, r5, #16
 800133e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001342:	45a2      	cmp	sl, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	fa00 f301 	lsl.w	r3, r0, r1
 800134c:	d909      	bls.n	8001362 <__udivmoddi4+0x222>
 800134e:	eb1c 0404 	adds.w	r4, ip, r4
 8001352:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001356:	d248      	bcs.n	80013ea <__udivmoddi4+0x2aa>
 8001358:	45a2      	cmp	sl, r4
 800135a:	d946      	bls.n	80013ea <__udivmoddi4+0x2aa>
 800135c:	f1a9 0902 	sub.w	r9, r9, #2
 8001360:	4464      	add	r4, ip
 8001362:	eba4 040a 	sub.w	r4, r4, sl
 8001366:	fbb4 f0fe 	udiv	r0, r4, lr
 800136a:	fb0e 4410 	mls	r4, lr, r0, r4
 800136e:	fb00 fa08 	mul.w	sl, r0, r8
 8001372:	b2ad      	uxth	r5, r5
 8001374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001378:	45a2      	cmp	sl, r4
 800137a:	d908      	bls.n	800138e <__udivmoddi4+0x24e>
 800137c:	eb1c 0404 	adds.w	r4, ip, r4
 8001380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001384:	d22d      	bcs.n	80013e2 <__udivmoddi4+0x2a2>
 8001386:	45a2      	cmp	sl, r4
 8001388:	d92b      	bls.n	80013e2 <__udivmoddi4+0x2a2>
 800138a:	3802      	subs	r0, #2
 800138c:	4464      	add	r4, ip
 800138e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001392:	fba0 8902 	umull	r8, r9, r0, r2
 8001396:	eba4 040a 	sub.w	r4, r4, sl
 800139a:	454c      	cmp	r4, r9
 800139c:	46c6      	mov	lr, r8
 800139e:	464d      	mov	r5, r9
 80013a0:	d319      	bcc.n	80013d6 <__udivmoddi4+0x296>
 80013a2:	d016      	beq.n	80013d2 <__udivmoddi4+0x292>
 80013a4:	b15e      	cbz	r6, 80013be <__udivmoddi4+0x27e>
 80013a6:	ebb3 020e 	subs.w	r2, r3, lr
 80013aa:	eb64 0405 	sbc.w	r4, r4, r5
 80013ae:	fa04 f707 	lsl.w	r7, r4, r7
 80013b2:	fa22 f301 	lsr.w	r3, r2, r1
 80013b6:	431f      	orrs	r7, r3
 80013b8:	40cc      	lsrs	r4, r1
 80013ba:	e9c6 7400 	strd	r7, r4, [r6]
 80013be:	2100      	movs	r1, #0
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	4631      	mov	r1, r6
 80013c6:	4630      	mov	r0, r6
 80013c8:	e70c      	b.n	80011e4 <__udivmoddi4+0xa4>
 80013ca:	468c      	mov	ip, r1
 80013cc:	e6eb      	b.n	80011a6 <__udivmoddi4+0x66>
 80013ce:	4610      	mov	r0, r2
 80013d0:	e6ff      	b.n	80011d2 <__udivmoddi4+0x92>
 80013d2:	4543      	cmp	r3, r8
 80013d4:	d2e6      	bcs.n	80013a4 <__udivmoddi4+0x264>
 80013d6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013da:	eb69 050c 	sbc.w	r5, r9, ip
 80013de:	3801      	subs	r0, #1
 80013e0:	e7e0      	b.n	80013a4 <__udivmoddi4+0x264>
 80013e2:	4628      	mov	r0, r5
 80013e4:	e7d3      	b.n	800138e <__udivmoddi4+0x24e>
 80013e6:	4611      	mov	r1, r2
 80013e8:	e78c      	b.n	8001304 <__udivmoddi4+0x1c4>
 80013ea:	4681      	mov	r9, r0
 80013ec:	e7b9      	b.n	8001362 <__udivmoddi4+0x222>
 80013ee:	4608      	mov	r0, r1
 80013f0:	e773      	b.n	80012da <__udivmoddi4+0x19a>
 80013f2:	4608      	mov	r0, r1
 80013f4:	e749      	b.n	800128a <__udivmoddi4+0x14a>
 80013f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80013fa:	443d      	add	r5, r7
 80013fc:	e713      	b.n	8001226 <__udivmoddi4+0xe6>
 80013fe:	3802      	subs	r0, #2
 8001400:	443c      	add	r4, r7
 8001402:	e724      	b.n	800124e <__udivmoddi4+0x10e>

08001404 <__aeabi_idiv0>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f805 	bl	800143c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
    }
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001474:	d205      	bcs.n	8001482 <_ZSt16__deque_buf_sizej+0x1c>
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	e000      	b.n	8001484 <_ZSt16__deque_buf_sizej+0x1e>
 8001482:	2301      	movs	r3, #1
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fa59 	bl	800194e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fa37 	bl	8001924 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffeb 	bl	80014a6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fa3e 	bl	8001966 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN4UARTC1EP20__UART_HandleTypeDef>:


std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <_ZN4UARTC1EP20__UART_HandleTypeDef+0x38>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3308      	adds	r3, #8
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fa41 	bl	8001990 <_ZNSt5dequeIhSaIhEEC1Ev>
	this->handle = handle;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]
	lastTime = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
	uartBuff = NULL;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	08014f6c 	.word	0x08014f6c

08001530 <_ZN4UARTD1Ev>:

UART::~UART() {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <_ZN4UARTD1Ev+0x80>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
	if (uartBuff != NULL) free(uartBuff);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <_ZN4UARTD1Ev+0x20>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4618      	mov	r0, r3
 800154c:	f00e fb42 	bl	800fbd4 <free>

	HAL_UART_AbortReceive_IT(handle);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fc95 	bl	8009e84 <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fa48 	bl	80019f4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4619      	mov	r1, r3
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <_ZN4UARTD1Ev+0x84>)
 800156c:	f000 fa4f 	bl	8001a0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8001570:	4603      	mov	r3, r0
 8001572:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <_ZN4UARTD1Ev+0x84>)
 8001576:	f000 fa59 	bl	8001a2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800157a:	4603      	mov	r3, r0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fa5c 	bl	8001a46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <_ZN4UARTD1Ev+0x6c>
		objectMap.erase(it);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <_ZN4UARTD1Ev+0x84>)
 8001598:	f000 fa68 	bl	8001a6c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
UART::~UART() {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3308      	adds	r3, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fa02 	bl	80019aa <_ZNSt5dequeIhSaIhEED1Ev>
}
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08014f6c 	.word	0x08014f6c
 80015b4:	20000414 	.word	0x20000414

080015b8 <_ZN4UARTD0Ev>:
UART::~UART() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
}
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffb5 	bl	8001530 <_ZN4UARTD1Ev>
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f00d fc8f 	bl	800eeec <_ZdlPvj>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN4UART4initEP13USART_TypeDefii>:

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

	uartBuff = (uint8_t*)calloc(this->packetSize_Bytes+1, sizeof(uint8_t));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	3301      	adds	r3, #1
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00e fab3 	bl	800fb60 <calloc>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	631a      	str	r2, [r3, #48]	; 0x30

	handle->Instance = port;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	601a      	str	r2, [r3, #0]
	handle->Init.BaudRate = baud;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	605a      	str	r2, [r3, #4]
	handle->Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
	handle->Init.StopBits = UART_STOPBITS_1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	handle->Init.Parity = UART_PARITY_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
	handle->Init.Mode = UART_MODE_TX_RX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
	handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
	handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(handle) != HAL_OK)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f008 fb0c 	bl	8009c64 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf14      	ite	ne
 8001652:	2301      	movne	r3, #1
 8001654:	2300      	moveq	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <_ZN4UART4initEP13USART_TypeDefii+0x8a>
	{
		return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001660:	e01e      	b.n	80016a0 <_ZN4UART4initEP13USART_TypeDefii+0xc8>
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4619      	mov	r1, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
 800166c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fa08 	bl	8001a8a <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	f107 021c 	add.w	r2, r7, #28
 8001682:	4909      	ldr	r1, [pc, #36]	; (80016a8 <_ZN4UART4initEP13USART_TypeDefii+0xd0>)
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fa19 	bl	8001abc <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6858      	ldr	r0, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f008 fbc2 	bl	8009e22 <HAL_UART_Receive_IT>
	return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000414 	.word	0x20000414

080016ac <_ZN4UART8readLineEPhim>:

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return len;
}

int UART::readLine(uint8_t *buff, int length, uint32_t minDelay) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0aa      	sub	sp, #168	; 0xa8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
	if(HAL_GetTick() - lastTime < minDelay) return 0;
 80016ba:	f003 fda5 	bl	8005208 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	bf8c      	ite	hi
 80016cc:	2301      	movhi	r3, #1
 80016ce:	2300      	movls	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <_ZN4UART8readLineEPhim+0x2e>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e0c8      	b.n	800186c <_ZN4UART8readLineEPhim+0x1c0>

	if(HAL_UART_AbortReceive_IT(handle) != HAL_OK) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f008 fbd0 	bl	8009e84 <HAL_UART_AbortReceive_IT>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf14      	ite	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	2300      	moveq	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d000      	beq.n	80016f6 <_ZN4UART8readLineEPhim+0x4a>
		__NOP();
 80016f4:	bf00      	nop
	}

	memset(buff, '\0', length);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	461a      	mov	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f00e fa99 	bl	800fc34 <memset>
	std::deque<uint8_t>::iterator it = std::find (msgBuff.begin(), msgBuff.end(), '\n');
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f103 0208 	add.w	r2, r3, #8
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f9fa 	bl	8001b08 <_ZNSt5dequeIhSaIhEE5beginEv>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f103 0208 	add.w	r2, r3, #8
 800171a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fa00 	bl	8001b26 <_ZNSt5dequeIhSaIhEE3endEv>
 8001726:	230a      	movs	r3, #10
 8001728:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800172c:	f107 0010 	add.w	r0, r7, #16
 8001730:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001734:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001738:	f107 0120 	add.w	r1, r7, #32
 800173c:	f000 fa4c 	bl	8001bd8 <_ZSt4findISt15_Deque_iteratorIhRhPhEcET_S4_S4_RKT0_>

	if(it == msgBuff.end()) {
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f103 0208 	add.w	r2, r3, #8
 8001746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f9ea 	bl	8001b26 <_ZNSt5dequeIhSaIhEE3endEv>
 8001752:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fa5d 	bl	8001c1c <_ZSteqIhRhPhEbRKSt15_Deque_iteratorIT_T0_T1_ES8_>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d014      	beq.n	8001792 <_ZN4UART8readLineEPhim+0xe6>
		if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes) != HAL_OK) {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6858      	ldr	r0, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	f008 fb53 	bl	8009e22 <HAL_UART_Receive_IT>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d000      	beq.n	800178e <_ZN4UART8readLineEPhim+0xe2>
			__NOP();
 800178c:	bf00      	nop
		}
		return 0;
 800178e:	2300      	movs	r3, #0
 8001790:	e06c      	b.n	800186c <_ZN4UART8readLineEPhim+0x1c0>
	}


	std::copy(msgBuff.begin(), it, buff);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f103 0208 	add.w	r2, r3, #8
 8001798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f9b2 	bl	8001b08 <_ZNSt5dequeIhSaIhEE5beginEv>
 80017a4:	f107 0210 	add.w	r2, r7, #16
 80017a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f9c8 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80017b4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80017b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f9db 	bl	8001b7a <_ZSt4copyISt15_Deque_iteratorIhRhPhES2_ET0_T_S5_S4_>

	int len = std::distance(msgBuff.begin(),it);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f103 0208 	add.w	r2, r3, #8
 80017ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f999 	bl	8001b08 <_ZNSt5dequeIhSaIhEE5beginEv>
 80017d6:	f107 0210 	add.w	r2, r7, #16
 80017da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f9af 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80017e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80017ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa26 	bl	8001c42 <_ZSt8distanceISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 80017f6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	while(msgBuff.begin() != it) msgBuff.pop_front();
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f103 0208 	add.w	r2, r3, #8
 8001800:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f97e 	bl	8001b08 <_ZNSt5dequeIhSaIhEE5beginEv>
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fa34 	bl	8001c84 <_ZStneIhRhPhEbRKSt15_Deque_iteratorIT_T0_T1_ES8_>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <_ZN4UART8readLineEPhim+0x182>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3308      	adds	r3, #8
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fa3d 	bl	8001ca6 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
 800182c:	e7e5      	b.n	80017fa <_ZN4UART8readLineEPhim+0x14e>
	msgBuff.pop_front();
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3308      	adds	r3, #8
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fa37 	bl	8001ca6 <_ZNSt5dequeIhSaIhEE9pop_frontEv>

	if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes != HAL_OK)){
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6858      	ldr	r0, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	f008 fae6 	bl	8009e22 <HAL_UART_Receive_IT>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d000      	beq.n	8001868 <_ZN4UART8readLineEPhim+0x1bc>
		__NOP();
 8001866:	bf00      	nop
	}
	return len;
 8001868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 800186c:	4618      	mov	r0, r3
 800186e:	37a8      	adds	r7, #168	; 0xa8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN4UART8sendDataEPhii>:
short UART::sendData(uint8_t *data, int numBytes, int timeout) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(handle, data, numBytes, timeout);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6858      	ldr	r0, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	b29a      	uxth	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	f008 fa36 	bl	8009cfe <HAL_UART_Transmit>

	return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN4UART9memberIRQEv>:

void UART::memberIRQ() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	dataReady = true;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	for (int i=0; i<packetSize_Bytes; ++i) {
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	da0d      	bge.n	80018d6 <_ZN4UART9memberIRQEv+0x3a>
		msgBuff.push_back(uartBuff[i]);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 0008 	add.w	r0, r3, #8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f000 fa0b 	bl	8001ce4 <_ZNSt5dequeIhSaIhEE9push_backERKh>
	for (int i=0; i<packetSize_Bytes; ++i) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e7ec      	b.n	80018b0 <_ZN4UART9memberIRQEv+0x14>
	}
	while(msgBuff.size() > 512) msgBuff.pop_front();
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3308      	adds	r3, #8
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f902 	bl	8001ae4 <_ZNKSt5dequeIhSaIhEE4sizeEv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e6:	bf8c      	ite	hi
 80018e8:	2301      	movhi	r3, #1
 80018ea:	2300      	movls	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <_ZN4UART9memberIRQEv+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3308      	adds	r3, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f9d5 	bl	8001ca6 <_ZNSt5dequeIhSaIhEE9pop_frontEv>
 80018fc:	e7eb      	b.n	80018d6 <_ZN4UART9memberIRQEv+0x3a>

	lastTime = HAL_GetTick();
 80018fe:	f003 fc83 	bl	8005208 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6858      	ldr	r0, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	f008 fa83 	bl	8009e22 <HAL_UART_Receive_IT>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f9fa 	bl	8001d26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fa02 	bl	8001d3e <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fd6d 	bl	800141e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f9fb 	bl	8001d52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa18 	bl	8001da4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f9f4 	bl	8001d66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd84 	bl	800148e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZNSt5dequeIhSaIhEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fa19 	bl	8001dd2 <_ZNSt11_Deque_baseIhSaIhEEC1Ev>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZNSt5dequeIhSaIhEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f8a5 	bl	8001b08 <_ZNSt5dequeIhSaIhEE5beginEv>
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f8ae 	bl	8001b26 <_ZNSt5dequeIhSaIhEE3endEv>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa33 	bl	8001e38 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f107 0218 	add.w	r2, r7, #24
 80019d8:	f107 0108 	add.w	r1, r7, #8
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fa35 	bl	8001e4c <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fa05 	bl	8001df4 <_ZNSt11_Deque_baseIhSaIhEED1Ev>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6839      	ldr	r1, [r7, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa21 	bl	8001e64 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fa53 	bl	8001ee2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fa42 	bl	8001f04 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	f000 fa50 	bl	8001f3c <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fa53 	bl	8001f50 <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>:
	insert(_Pair&& __x)
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 8001ac8:	68bc      	ldr	r4, [r7, #8]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fa4a 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fa4e 	bl	8001f78 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}

08001ae4 <_ZNKSt5dequeIhSaIhEE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0218 	add.w	r2, r3, #24
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3308      	adds	r3, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f000 fa87 	bl	800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZNSt5dequeIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3308      	adds	r3, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f813 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZNSt5dequeIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3318      	adds	r3, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f804 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <_ZSt4copyISt15_Deque_iteratorIhRhPhES2_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b094      	sub	sp, #80	; 0x50
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffd9 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	f107 0220 	add.w	r2, r7, #32
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fa57 	bl	8002050 <_ZSt12__miter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 8001ba2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ffcb 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fa49 	bl	8002050 <_ZSt12__miter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 8001bbe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fa4e 	bl	800206a <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIhRhPhES2_ET1_T0_S5_S4_>
 8001bce:	4603      	mov	r3, r0
    }
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3750      	adds	r7, #80	; 0x50
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZSt4findISt15_Deque_iteratorIhRhPhEcET_S4_S4_RKT0_>:
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
			    __gnu_cxx::__ops::__iter_equals_val(__val));
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ffa9 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ffa3 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f000 fa6c 	bl	80020dc <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8001c04:	4603      	mov	r3, r0
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f107 0220 	add.w	r2, r7, #32
 8001c0c:	f107 0110 	add.w	r1, r7, #16
 8001c10:	f000 fa73 	bl	80020fa <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_>
    }
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZSteqIhRhPhEbRKSt15_Deque_iteratorIT_T0_T1_ES8_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_ZSt8distanceISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001c42:	b590      	push	{r4, r7, lr}
 8001c44:	b08d      	sub	sp, #52	; 0x34
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff76 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff70 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
			     std::__iterator_category(__first));
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fa6c 	bl	8002142 <_ZSt19__iterator_categoryISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8001c6a:	f107 011c 	add.w	r1, r7, #28
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4622      	mov	r2, r4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fa6d 	bl	8002154 <_ZSt10__distanceISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8001c7a:	4603      	mov	r3, r0
    }
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3734      	adds	r7, #52	; 0x34
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <_ZStneIhRhPhEbRKSt15_Deque_iteratorIT_T0_T1_ES8_>:
    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffc3 	bl	8001c1c <_ZSteqIhRhPhEbRKSt15_Deque_iteratorIT_T0_T1_ES8_>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZNSt5dequeIhSaIhEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d00c      	beq.n	8001cd6 <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x30>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f000 fa54 	bl	8002172 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8001cd4:	e002      	b.n	8001cdc <_ZNSt5dequeIhSaIhEE9pop_frontEv+0x36>
	  _M_pop_front_aux();
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa58 	bl	800218c <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>
      }
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZNSt5dequeIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d00c      	beq.n	8001d16 <_ZNSt5dequeIhSaIhEE9push_backERKh+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f000 fa69 	bl	80021dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
      }
 8001d14:	e003      	b.n	8001d1e <_ZNSt5dequeIhSaIhEE9push_backERKh+0x3a>
	  _M_push_back_aux(__x);
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fa73 	bl	8002204 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>
      }
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 faac 	bl	800228c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
      { }
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d012      	beq.n	8001d9c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f000 fa92 	bl	80022a0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fff0 	bl	8001d66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f000 fa95 	bl	80022b6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d8c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fa9b 	bl	80022cc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d9a:	e7e9      	b.n	8001d70 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 faaf 	bl	8002326 <_ZNSaIhED1Ev>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZNSt11_Deque_baseIhSaIhEEC1Ev>:
      _Deque_base()
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fa86 	bl	80022ee <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001de2:	2100      	movs	r1, #0
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 faaa 	bl	800233e <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSt11_Deque_baseIhSaIhEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <_ZNSt11_Deque_baseIhSaIhEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 faf6 	bl	8002402 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fb08 	bl	8002436 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>
    }
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffc6 	bl	8001dba <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implD1Ev>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_ZNSt5dequeIhSaIhEE15_M_destroy_dataESt15_Deque_iteratorIhRhPhES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08d      	sub	sp, #52	; 0x34
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8001e5a:	bf00      	nop
 8001e5c:	3734      	adds	r7, #52	; 0x34
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff98 	bl	8001da4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001e74:	4604      	mov	r4, r0
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 faf9 	bl	800246e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4621      	mov	r1, r4
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fafe 	bl	8002484 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f828 	bl	8001ee2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fb22 	bl	80024ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001ea6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d110      	bne.n	8001ece <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001eac:	687c      	ldr	r4, [r7, #4]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fb2b 	bl	8002510 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001eba:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f000 fb30 	bl	8002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f807 	bl	8001ee2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	e000      	b.n	8001eda <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    }
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}

08001ee2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1d1a      	adds	r2, r3, #4
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fb29 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	60bb      	str	r3, [r7, #8]
	++__result;
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fb26 	bl	8002568 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 8001f1c:	463a      	mov	r2, r7
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fb30 	bl	800258a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb3b 	bl	80025a8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 8001f32:	68bb      	ldr	r3, [r7, #8]
      }
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	; 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffed 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68b8      	ldr	r0, [r7, #8]
 8001f90:	f000 fb24 	bl	80025dc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8001f94:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 8001f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f98:	f000 fbc1 	bl	800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fb30 	bl	800260a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	    if (__res.second)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	68b8      	ldr	r0, [r7, #8]
 8001fb8:	f000 fbc4 	bl	8002744 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001fc6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fbf6 	bl	80027c2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
 8001fd6:	e015      	b.n	8002004 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8001fd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fda:	68b8      	ldr	r0, [r7, #8]
 8001fdc:	f000 f976 	bl	80022cc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return _Res(iterator(__res.first), false);
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 faaf 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ff4:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fbdf 	bl	80027c2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	3730      	adds	r7, #48	; 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8002016:	f000 fbed 	bl	80027f4 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	109b      	asrs	r3, r3, #2
 800202a:	3b01      	subs	r3, #1
 800202c:	fb03 f201 	mul.w	r2, r3, r1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	1acb      	subs	r3, r1, r3
 800203a:	441a      	add	r2, r3
	+ (__y._M_last - __y._M_cur);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1acb      	subs	r3, r1, r3
 8002046:	4413      	add	r3, r2
    }
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZSt12__miter_baseISt15_Deque_iteratorIhRhPhEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    { return __it; }
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fd71 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIhRhPhES2_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800206a:	b580      	push	{r7, lr}
 800206c:	b094      	sub	sp, #80	; 0x50
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002076:	f107 0320 	add.w	r3, r7, #32
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd61 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	f107 0220 	add.w	r2, r7, #32
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fbb9 	bl	8002804 <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 8002092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fd53 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 800209e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fbab 	bl	8002804 <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fbb4 	bl	800281e <_ZSt12__niter_baseIPhET_S1_>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fbb6 	bl	8002832 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRhPhES2_ET1_T0_S5_S4_>
 80020c6:	4602      	mov	r2, r0
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fbd2 	bl	8002876 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80020d2:	4603      	mov	r3, r0
    }
 80020d4:	4618      	mov	r0, r3
 80020d6:	3750      	adds	r7, #80	; 0x50
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
	{ return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fbce 	bl	800288c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 80020fa:	b590      	push	{r4, r7, lr}
 80020fc:	b091      	sub	sp, #68	; 0x44
 80020fe:	af02      	add	r7, sp, #8
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
		       std::__iterator_category(__first));
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fd18 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd12 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f000 f80e 	bl	8002142 <_ZSt19__iterator_categoryISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800212c:	f107 0114 	add.w	r1, r7, #20
 8002130:	f88d 4000 	strb.w	r4, [sp]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f000 fbb7 	bl	80028a8 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag>
    }
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	373c      	adds	r7, #60	; 0x3c
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}

08002142 <_ZSt19__iterator_categoryISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <_ZSt10__distanceISt15_Deque_iteratorIhRhPhEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	68b8      	ldr	r0, [r7, #8]
 8002164:	f7ff ff52 	bl	800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 8002168:	4603      	mov	r3, r0
    }
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fc69 	bl	8002a56 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNSt5dequeIhSaIhEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe4e 	bl	8001e38 <_ZNSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800219c:	4602      	mov	r2, r0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f7ff ffe4 	bl	8002172 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 fc59 	bl	8002a6a <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f103 0208 	add.w	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 fc62 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
    }
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fc69 	bl	8002ac0 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fc6d 	bl	8002ad4 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fc68 	bl	8001ae4 <_ZNKSt5dequeIhSaIhEE4sizeEv>
 8002214:	4604      	mov	r4, r0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fc73 	bl	8002b02 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>
 800221c:	4603      	mov	r3, r0
 800221e:	429c      	cmp	r4, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0x2e>
	  __throw_length_error(
 800222c:	4816      	ldr	r0, [pc, #88]	; (8002288 <_ZNSt5dequeIhSaIhEE16_M_push_back_auxIJRKhEEEvDpOT_+0x84>)
 800222e:	f00d f800 	bl	800f232 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002232:	2101      	movs	r1, #1
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fc75 	bl	8002b24 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1d1c      	adds	r4, r3, #4
 8002242:	4610      	mov	r0, r2
 8002244:	f000 fc89 	bl	8002b5a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8002248:	4603      	mov	r3, r0
 800224a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800224c:	687c      	ldr	r4, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699d      	ldr	r5, [r3, #24]
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f000 fc34 	bl	8002ac0 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	4629      	mov	r1, r5
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ffbc 	bl	80021dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0218 	add.w	r2, r3, #24
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fc0c 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
      }
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bdb0      	pop	{r4, r5, r7, pc}
 8002288:	08014ca8 	.word	0x08014ca8

0800228c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fc50 	bl	8002b7e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fc61 	bl	8002ba8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZNSt11_Deque_baseIhSaIhEE11_Deque_implC1Ev>:
	_Deque_impl()
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fc68 	bl	8002bcc <_ZNSaIhEC1Ev>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3308      	adds	r3, #8
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fc69 	bl	8002be4 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3318      	adds	r3, #24
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fc64 	bl	8002be4 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>
	{ }
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fc6e 	bl	8002c10 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b089      	sub	sp, #36	; 0x24
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff f88c 	bl	8001466 <_ZSt16__deque_buf_sizej>
 800234e:	4602      	mov	r2, r0
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	fbb3 f3f2 	udiv	r3, r3, r2
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800235a:	2308      	movs	r3, #8
 800235c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3302      	adds	r3, #2
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	f107 0210 	add.w	r2, r7, #16
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fc58 	bl	8002c24 <_ZSt3maxIjERKT_S2_S2_>
 8002374:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fc61 	bl	8002c4a <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	1acb      	subs	r3, r1, r3
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800239e:	4413      	add	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fc67 	bl	8002c84 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3308      	adds	r3, #8
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fb67 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0218 	add.w	r2, r3, #24
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3b04      	subs	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 fb5e 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff f840 	bl	8001466 <_ZSt16__deque_buf_sizej>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ee:	fb02 f201 	mul.w	r2, r2, r1
 80023f2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80023f4:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
    }
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}

08002402 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d209      	bcs.n	800242e <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x2c>
	_M_deallocate_node(*__n);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb22 	bl	8002a6a <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3304      	adds	r3, #4
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e7f1      	b.n	8002412 <_ZNSt11_Deque_baseIhSaIhEE16_M_destroy_nodesEPPhS3_+0x10>
    }
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fc35 	bl	8002cb8 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fc4b 	bl	8002cf2 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fc3a 	bl	8002cda <_ZNSaIPhED1Ev>
      }
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01d      	beq.n	80024d4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8002498:	68fc      	ldr	r4, [r7, #12]
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	f000 f93f 	bl	800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80024a0:	4603      	mov	r3, r0
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4620      	mov	r0, r4
 80024ac:	f000 f83c 	bl	8002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f083 0301 	eor.w	r3, r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f7ff fef8 	bl	80022b6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80024c6:	60b8      	str	r0, [r7, #8]
 80024c8:	e7e3      	b.n	8002492 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80024ca:	68b8      	ldr	r0, [r7, #8]
 80024cc:	f7ff fee8 	bl	80022a0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80024d0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80024d2:	e7de      	b.n	8002492 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f836 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 80024e0:	697b      	ldr	r3, [r7, #20]
    }
 80024e2:	4618      	mov	r0, r3
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}

080024ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f900 	bl	800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	bf34      	ite	cc
 800253c:	2301      	movcc	r3, #1
 800253e:	2300      	movcs	r3, #0
 8002540:	b2db      	uxtb	r3, r3
      }
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f00c fd0e 	bl	800ef96 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	601a      	str	r2, [r3, #0]
	return *this;
 8002580:	687b      	ldr	r3, [r7, #4]
      }
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 80025b2:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f00c fd5c 	bl	800f078 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 80025c0:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fe81 	bl	80022cc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	615a      	str	r2, [r3, #20]
    }
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb92 	bl	8002d10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80025ec:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f7ff fcb8 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fb99 	bl	8002d32 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8002600:	68fb      	ldr	r3, [r7, #12]
	}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800260a:	b5b0      	push	{r4, r5, r7, lr}
 800260c:	b08a      	sub	sp, #40	; 0x28
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8002616:	68b8      	ldr	r0, [r7, #8]
 8002618:	f7ff fbc4 	bl	8001da4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800261c:	4603      	mov	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f7ff ff24 	bl	800246e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8002626:	4603      	mov	r3, r0
 8002628:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d023      	beq.n	800267e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800263a:	68bc      	ldr	r4, [r7, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681d      	ldr	r5, [r3, #0]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f86b 	bl	800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002648:	4603      	mov	r3, r0
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4629      	mov	r1, r5
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff ff69 	bl	8002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800265c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fe25 	bl	80022b6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800266c:	4603      	mov	r3, r0
 800266e:	e004      	b.n	800267a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe14 	bl	80022a0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002678:	4603      	mov	r3, r0
 800267a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800267c:	e7d8      	b.n	8002630 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff60 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01d      	beq.n	80026d0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002694:	68b8      	ldr	r0, [r7, #8]
 8002696:	f000 fb6c 	bl	8002d72 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800269a:	4603      	mov	r3, r0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	f107 021c 	add.w	r2, r7, #28
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff1e 	bl	80024ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80026b4:	f107 0214 	add.w	r2, r7, #20
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	4619      	mov	r1, r3
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fb68 	bl	8002d94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 80026c4:	e027      	b.n	8002716 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80026c6:	f107 0310 	add.w	r3, r7, #16
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fb7b 	bl	8002dc6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80026d0:	68bc      	ldr	r4, [r7, #8]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff1b 	bl	8002510 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80026da:	4603      	mov	r3, r0
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff ff1f 	bl	8002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80026f0:	f107 0214 	add.w	r2, r7, #20
 80026f4:	f107 0318 	add.w	r3, r7, #24
 80026f8:	4619      	mov	r1, r3
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fb4a 	bl	8002d94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8002700:	e009      	b.n	8002716 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	f107 0220 	add.w	r2, r7, #32
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4619      	mov	r1, r3
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fb69 	bl	8002de8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}

0800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb74 	bl	8002e14 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800272c:	4602      	mov	r2, r0
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fb7b 	bl	8002e30 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 800273a:	4603      	mov	r3, r0
      }
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d119      	bne.n	800278c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fe88 	bl	800246e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800275e:	4602      	mov	r2, r0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4293      	cmp	r3, r2
 8002764:	d012      	beq.n	800278c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8002766:	68fc      	ldr	r4, [r7, #12]
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	f7ff ffd8 	bl	800271e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800276e:	4603      	mov	r3, r0
 8002770:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fecc 	bl	8002510 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002778:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4629      	mov	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff fed1 	bl	8002528 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8002790:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002792:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002798:	7df8      	ldrb	r0, [r7, #23]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	f00c fc0f 	bl	800efc0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff feca 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 80027b8:	693b      	ldr	r3, [r7, #16]
    }
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdb0      	pop	{r4, r5, r7, pc}

080027c2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	f000 fb39 	bl	8002e46 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fb3c 	bl	8002e5a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80027e2:	4603      	mov	r3, r0
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	711a      	strb	r2, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7fe fe34 	bl	8001466 <_ZSt16__deque_buf_sizej>
 80027fe:	4603      	mov	r3, r0
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZSt12__niter_baseISt15_Deque_iteratorIhRhPhEET_S4_>:
    __niter_base(_Iterator __it)
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    { return __it; }
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff f997 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIhRhPhES2_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002832:	b580      	push	{r7, lr}
 8002834:	b08e      	sub	sp, #56	; 0x38
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			      _Category>::__copy_m(__first, __last, __result);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f97a 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f974 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 800285c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fb01 	bl	8002e6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIhRhPhES5_EET0_T_S8_S7_>
 800286c:	4603      	mov	r3, r0
    }
 800286e:	4618      	mov	r0, r3
 8002870:	3738      	adds	r7, #56	; 0x38
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	601a      	str	r2, [r3, #0]
      { }
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0a2      	sub	sp, #136	; 0x88
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fba7 	bl	800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 80028be:	4603      	mov	r3, r0
 80028c0:	109b      	asrs	r3, r3, #2
 80028c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      for (; __trip_count > 0; --__trip_count)
 80028c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dd65      	ble.n	800299a <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0xf2>
	  if (__pred(__first))
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f935 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80028da:	f107 0214 	add.w	r2, r7, #20
 80028de:	463b      	mov	r3, r7
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fae7 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x50>
	    return __first;
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff f927 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80028f6:	e0aa      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f000 faf2 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  if (__pred(__first))
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f91d 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 800290a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800290e:	463b      	mov	r3, r7
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 facf 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x80>
	    return __first;
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff f90f 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002926:	e092      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f000 fada 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  if (__pred(__first))
 800292e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f905 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 800293a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800293e:	463b      	mov	r3, r7
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fab7 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0xb0>
	    return __first;
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff f8f7 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002956:	e07a      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f000 fac2 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  if (__pred(__first))
 800295e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f8ed 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 800296a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800296e:	463b      	mov	r3, r7
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fa9f 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0xe0>
	    return __first;
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff f8df 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002986:	e062      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 8002988:	68b8      	ldr	r0, [r7, #8]
 800298a:	f000 faaa 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
      for (; __trip_count > 0; --__trip_count)
 800298e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002992:	3b01      	subs	r3, #1
 8002994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002998:	e795      	b.n	80028c6 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1e>
      switch (__last - __first)
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fb35 	bl	800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d006      	beq.n	80029b6 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x10e>
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	dc4c      	bgt.n	8002a46 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x19e>
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d032      	beq.n	8002a16 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x16e>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d018      	beq.n	80029e6 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x13e>
 80029b4:	e047      	b.n	8002a46 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x19e>
	  if (__pred(__first))
 80029b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f8c1 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80029c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80029c6:	463b      	mov	r3, r7
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fa73 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x138>
	    return __first;
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff f8b3 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80029de:	e036      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 80029e0:	68b8      	ldr	r0, [r7, #8]
 80029e2:	f000 fa7e 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  if (__pred(__first))
 80029e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f8a9 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 80029f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80029f6:	463b      	mov	r3, r7
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa5b 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x168>
	    return __first;
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff f89b 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002a0e:	e01e      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f000 fa66 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  if (__pred(__first))
 8002a16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f891 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002a22:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002a26:	463b      	mov	r3, r7
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fa43 	bl	8002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x198>
	    return __first;
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff f883 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
 8002a3e:	e006      	b.n	8002a4e <_ZSt9__find_ifISt15_Deque_iteratorIhRhPhEN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S9_S9_T0_St26random_access_iterator_tag+0x1a6>
	  ++__first;
 8002a40:	68b8      	ldr	r0, [r7, #8]
 8002a42:	f000 fa4e 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	  return __last;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff f87b 	bl	8001b44 <_ZNSt15_Deque_iteratorIhRhPhEC1ERKS2_>
    }
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	3788      	adds	r7, #136	; 0x88
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <_ZNSt11_Deque_baseIhSaIhEE18_M_deallocate_nodeEPh>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002a6a:	b590      	push	{r4, r7, lr}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002a74:	687c      	ldr	r4, [r7, #4]
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fe fcf5 	bl	8001466 <_ZSt16__deque_buf_sizej>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 fa4c 	bl	8002f20 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}

08002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685c      	ldr	r4, [r3, #4]
 8002aac:	f7ff fea2 	bl	80027f4 <_ZNSt15_Deque_iteratorIhRhPhE14_S_buffer_sizeEv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	18e2      	adds	r2, r4, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
      }
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffed 	bl	8002ac0 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	781c      	ldrb	r4, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4619      	mov	r1, r3
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7fe fc8a 	bl	8001408 <_ZnwjPv>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4622      	mov	r2, r4
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}

08002b02 <_ZNKSt5dequeIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fa30 	bl	8002f72 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fa12 	bl	8002f3e <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6809      	ldr	r1, [r1, #0]
 8002b3e:	1a41      	subs	r1, r0, r1
 8002b40:	1089      	asrs	r1, r1, #2
 8002b42:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d904      	bls.n	8002b52 <_ZNSt5dequeIhSaIhEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa1a 	bl	8002f86 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>
      }
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002b5a:	b590      	push	{r4, r7, lr}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002b62:	687c      	ldr	r4, [r7, #4]
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7fe fc7e 	bl	8001466 <_ZSt16__deque_buf_sizej>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f000 faa3 	bl	80030ba <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8002b74:	4603      	mov	r3, r0
      }
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}

08002b7e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002b7e:	b590      	push	{r4, r7, lr}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 faa5 	bl	80030d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002b8e:	4604      	mov	r4, r0
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f000 faab 	bl	80030ec <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f000 fab4 	bl	8003108 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}

08002ba8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa90 	bl	80030d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2201      	movs	r2, #1
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 faaf 	bl	8003122 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fab3 	bl	8003140 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt15_Deque_iteratorIhRhPhEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d201      	bcs.n	8002c3e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	e000      	b.n	8002c40 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002c3e:	687b      	ldr	r3, [r7, #4]
    }
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002c4a:	b590      	push	{r4, r7, lr}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f82c 	bl	8002cb8 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fa74 	bl	8003154 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f830 	bl	8002cda <_ZNSaIPhED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002c7a:	4623      	mov	r3, r4
      }
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}

08002c84 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d209      	bcs.n	8002cb0 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff ff5c 	bl	8002b5a <_ZNSt11_Deque_baseIhSaIhEE16_M_allocate_nodeEv>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3304      	adds	r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	e7f1      	b.n	8002c94 <_ZNSt11_Deque_baseIhSaIhEE15_M_create_nodesEPPhS3_+0x10>
    }
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZNKSt11_Deque_baseIhSaIhEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f000 f955 	bl	8002f72 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa50 	bl	8003172 <_ZNSaIPhEC1IhEERKSaIT_E>
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZNSaIPhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa52 	bl	800318c <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa4c 	bl	80031a0 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f9dd 	bl	80030d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fa49 	bl	80031ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002d32:	b5b0      	push	{r4, r5, r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4619      	mov	r1, r3
 8002d42:	2018      	movs	r0, #24
 8002d44:	f7fe fb60 	bl	8001408 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f9c5 	bl	80030d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002d4e:	4604      	mov	r4, r0
 8002d50:	68b8      	ldr	r0, [r7, #8]
 8002d52:	f000 f9cb 	bl	80030ec <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8002d56:	4605      	mov	r5, r0
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff f903 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	4629      	mov	r1, r5
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 fa37 	bl	80031d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>
	}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}

08002d72 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fbe1 	bl	800254c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002da0:	68b8      	ldr	r0, [r7, #8]
 8002da2:	f000 fa2c 	bl	80031fe <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002da6:	4603      	mov	r3, r0
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa2f 	bl	8003212 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002db4:	4603      	mov	r3, r0
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f00c f8f2 	bl	800efbc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
	return *this;
 8002dde:	687b      	ldr	r3, [r7, #4]
      }
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f000 fa0c 	bl	8003212 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3310      	adds	r3, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fa00 	bl	8003226 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIhRhPhES5_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	68b8      	ldr	r0, [r7, #8]
 8002e7e:	f7ff f8c5 	bl	800200c <_ZStmiIhRhPhENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 8002e82:	6178      	str	r0, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dd10      	ble.n	8002eac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIhRhPhES5_EET0_T_S8_S7_+0x3e>
	      *__result = *__first;
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f9d7 	bl	800323e <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8002e90:	4603      	mov	r3, r0
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f822 	bl	8002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>
	      ++__result;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e7eb      	b.n	8002e84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIhRhPhES5_EET0_T_S8_S7_+0x16>
	  return __result;
 8002eac:	687b      	ldr	r3, [r7, #4]
	}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclISt15_Deque_iteratorIhRhPhEEEbT_>:
	operator()(_Iterator __it)
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8002ec0:	6838      	ldr	r0, [r7, #0]
 8002ec2:	f000 f9bc 	bl	800323e <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_ZNSt15_Deque_iteratorIhRhPhEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d10a      	bne.n	8002f16 <_ZNSt15_Deque_iteratorIhRhPhEppEv+0x34>
	    _M_set_node(_M_node + 1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fdc1 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
	return *this;
 8002f16:	687b      	ldr	r3, [r7, #4]
      }
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f98f 	bl	8003254 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_ZNSt5dequeIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002f46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002f4a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f98e 	bl	800326e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8002f52:	4603      	mov	r3, r0
 8002f54:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002f56:	f107 0208 	add.w	r2, r7, #8
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f990 	bl	8003286 <_ZSt3minIjERKT_S2_S2_>
 8002f66:	4603      	mov	r3, r0
 8002f68:	681b      	ldr	r3, [r3, #0]
      }
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_ZNKSt11_Deque_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002f86:	b590      	push	{r4, r7, lr}
 8002f88:	b08b      	sub	sp, #44	; 0x2c
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	109b      	asrs	r3, r3, #2
 8002fa0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002fa2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	4413      	add	r3, r2
 8002faa:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d92d      	bls.n	8003014 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	1acb      	subs	r3, r1, r3
 8002fc4:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002fc6:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x4e>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	e000      	b.n	8002fd6 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x50>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002fd8:	4413      	add	r3, r2
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d209      	bcs.n	8002ffa <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002fee:	3304      	adds	r3, #4
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f000 f95a 	bl	80032ac <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
 8002ff8:	e048      	b.n	800308c <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003002:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	4413      	add	r3, r2
 800300c:	461a      	mov	r2, r3
 800300e:	f000 f965 	bl	80032dc <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>
 8003012:	e03b      	b.n	800308c <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3304      	adds	r3, #4
 800301c:	f107 0208 	add.w	r2, r7, #8
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fdfe 	bl	8002c24 <_ZSt3maxIjERKT_S2_S2_>
 8003028:	4603      	mov	r3, r0
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800302e:	3302      	adds	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fe07 	bl	8002c4a <_ZNSt11_Deque_baseIhSaIhEE15_M_allocate_mapEj>
 800303c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xce>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	e000      	b.n	8003056 <_ZNSt5dequeIhSaIhEE17_M_reallocate_mapEjb+0xd0>
 8003054:	2300      	movs	r3, #0
 8003056:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4413      	add	r3, r2
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003066:	3304      	adds	r3, #4
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	4619      	mov	r1, r3
 800306c:	f000 f91e 	bl	80032ac <_ZSt4copyIPPhS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	f7ff f9db 	bl	8002436 <_ZNSt11_Deque_baseIhSaIhEE17_M_deallocate_mapEPPhj>

	  this->_M_impl._M_map = __new_map;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3308      	adds	r3, #8
 8003090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fcfc 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f103 0018 	add.w	r0, r3, #24
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030a4:	3b01      	subs	r3, #1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7ff fcef 	bl	8002a90 <_ZNSt15_Deque_iteratorIhRhPhE11_M_set_nodeEPS1_>
    }
 80030b2:	bf00      	nop
 80030b4:	372c      	adds	r7, #44	; 0x2c
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}

080030ba <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80030c4:	2200      	movs	r2, #0
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f91f 	bl	800330c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3310      	adds	r3, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f923 	bl	8003344 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f921 	bl	800335c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f91c 	bl	8003370 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800315e:	2200      	movs	r2, #0
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f911 	bl	800338a <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>
 8003168:	4603      	mov	r3, r0
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZNSaIPhEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f922 	bl	80033c6 <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	f00b fe9b 	bl	800eee8 <_ZdlPv>
      }
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80031c4:	2200      	movs	r2, #0
 80031c6:	6839      	ldr	r1, [r7, #0]
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f906 	bl	80033da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe febd 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f913 	bl	800341c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f90c 	bl	800344c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8003234:	4603      	mov	r3, r0
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <_ZNKSt15_Deque_iteratorIhRhPhEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f00b fe41 	bl	800eee8 <_ZdlPv>
      }
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8f2 	bl	8003460 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800327c:	4603      	mov	r3, r0
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d201      	bcs.n	80032a0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	e000      	b.n	80032a2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80032a0:	687b      	ldr	r3, [r7, #4]
    }
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_ZSt4copyIPPhS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f8dc 	bl	8003476 <_ZSt12__miter_baseIPPhET_S2_>
 80032be:	4604      	mov	r4, r0
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f000 f8d8 	bl	8003476 <_ZSt12__miter_baseIPPhET_S2_>
 80032c6:	4603      	mov	r3, r0
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4620      	mov	r0, r4
 80032ce:	f000 f8dc 	bl	800348a <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 80032d2:	4603      	mov	r3, r0
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <_ZSt13copy_backwardIPPhS1_ET0_T_S3_S2_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f8c4 	bl	8003476 <_ZSt12__miter_baseIPPhET_S2_>
 80032ee:	4604      	mov	r4, r0
 80032f0:	68b8      	ldr	r0, [r7, #8]
 80032f2:	f000 f8c0 	bl	8003476 <_ZSt12__miter_baseIPPhET_S2_>
 80032f6:	4603      	mov	r3, r0
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4620      	mov	r0, r4
 80032fe:	f000 f8e7 	bl	80034d0 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>
 8003302:	4603      	mov	r3, r0
    }
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}

0800330c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f8a1 	bl	8003460 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800331e:	4602      	mov	r2, r0
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4293      	cmp	r3, r2
 8003324:	bf8c      	ite	hi
 8003326:	2301      	movhi	r3, #1
 8003328:	2300      	movls	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003330:	f00b ff7c 	bl	800f22c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003334:	68b8      	ldr	r0, [r7, #8]
 8003336:	f00b fddb 	bl	800eef0 <_Znwj>
 800333a:	4603      	mov	r3, r0
      }
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8e2 	bl	8003516 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8003352:	4603      	mov	r3, r0
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:
	destroy(_Up* __p)
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f00b fdb3 	bl	800eee8 <_ZdlPv>
      }
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8c7 	bl	800352a <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf8c      	ite	hi
 80033a4:	2301      	movhi	r3, #1
 80033a6:	2300      	movls	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80033ae:	f00b ff3d 	bl	800f22c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00b fd9a 	bl	800eef0 <_Znwj>
 80033bc:	4603      	mov	r3, r0
      }
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8aa 	bl	8003540 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf8c      	ite	hi
 80033f4:	2301      	movhi	r3, #1
 80033f6:	2300      	movls	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80033fe:	f00b ff15 	bl	800f22c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4618      	mov	r0, r3
 800340e:	f00b fd6f 	bl	800eef0 <_Znwj>
 8003412:	4603      	mov	r3, r0
      }
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe fd9b 	bl	8001f64 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800342e:	4604      	mov	r4, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4619      	mov	r1, r3
 8003434:	2008      	movs	r0, #8
 8003436:	f7fd ffe7 	bl	8001408 <_ZnwjPv>
 800343a:	4603      	mov	r3, r0
 800343c:	4621      	mov	r1, r4
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f88a 	bl	8003558 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003468:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <_ZSt12__miter_baseIPPhET_S2_>:
    __miter_base(_Iterator __it)
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <_ZSt14__copy_move_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800348a:	b5b0      	push	{r4, r5, r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f879 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 800349c:	4604      	mov	r4, r0
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f000 f875 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 80034a4:	4605      	mov	r5, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f870 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4629      	mov	r1, r5
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 f874 	bl	80035a2 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>
 80034ba:	4602      	mov	r2, r0
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f880 	bl	80035c6 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 80034c6:	4603      	mov	r3, r0
    }
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <_ZSt23__copy_move_backward_a2ILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f856 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 80034e2:	4604      	mov	r4, r0
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f000 f852 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 80034ea:	4605      	mov	r5, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f84d 	bl	800358e <_ZSt12__niter_baseIPPhET_S2_>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	4629      	mov	r1, r5
 80034fa:	4620      	mov	r0, r4
 80034fc:	f000 f86e 	bl	80035dc <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>
 8003500:	4602      	mov	r2, r0
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f85d 	bl	80035c6 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>
 800350c:	4603      	mov	r3, r0
    }
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bdb0      	pop	{r4, r5, r7, pc}

08003516 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003532:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv+0x14>)
      }
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	05555555 	.word	0x05555555

08003558 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f84b 	bl	8003600 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800356a:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fcea 	bl	8001f50 <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 800357c:	4603      	mov	r3, r0
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <_ZSt13__copy_move_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f82c 	bl	8003614 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>
 80035bc:	4603      	mov	r3, r0
    }
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZSt12__niter_wrapIPPhET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
    { return __res; }
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <_ZSt22__copy_move_backward_aILb0EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f82c 	bl	800364e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>
 80035f6:	4603      	mov	r3, r0
    }
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	109b      	asrs	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	461a      	mov	r2, r3
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f00c fae1 	bl	800fc00 <memmove>
	  return __result + _Num;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
	}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	109b      	asrs	r3, r3, #2
 8003662:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	425b      	negs	r3, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	18d0      	adds	r0, r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	461a      	mov	r2, r3
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	f00c fac0 	bl	800fc00 <memmove>
	  return __result - _Num;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	425b      	negs	r3, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
	}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <_Z41__static_initialization_and_destruction_0ii>:
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d110      	bne.n	80036c6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10b      	bne.n	80036c6 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80036b0:	461a      	mov	r2, r3
 80036b2:	2300      	movs	r3, #0
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	60d3      	str	r3, [r2, #12]
 80036bc:	6113      	str	r3, [r2, #16]
 80036be:	6153      	str	r3, [r2, #20]
 80036c0:	4808      	ldr	r0, [pc, #32]	; (80036e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80036c2:	f7fd fefd 	bl	80014c0 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <_Z41__static_initialization_and_destruction_0ii+0x48>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d102      	bne.n	80036dc <_Z41__static_initialization_and_destruction_0ii+0x48>
 80036d6:	4803      	ldr	r0, [pc, #12]	; (80036e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80036d8:	f7fd feff 	bl	80014da <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000414 	.word	0x20000414

080036e8 <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7ff ffcf 	bl	8003694 <_Z41__static_initialization_and_destruction_0ii>
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff ffc7 	bl	8003694 <_Z41__static_initialization_and_destruction_0ii>
 8003706:	bd80      	pop	{r7, pc}

08003708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	f2ad 5d74 	subw	sp, sp, #1396	; 0x574
 8003710:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003712:	f001 fd4e 	bl	80051b2 <HAL_Init>
  /* USER CODE BEGIN Init */
  GPGGA GPSData;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003716:	f000 faa5 	bl	8003c64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800371a:	f000 fc01 	bl	8003f20 <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 800371e:	f000 fafb 	bl	8003d18 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 8003722:	f000 fb6f 	bl	8003e04 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8003726:	f000 fba1 	bl	8003e6c <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 800372a:	f009 fb0f 	bl	800cd4c <MX_FATFS_Init>
  MX_DMA_Init();
 800372e:	f000 fbd9 	bl	8003ee4 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8003732:	f00a fec1 	bl	800e4b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adcValue, 2);
 8003736:	2202      	movs	r2, #2
 8003738:	499b      	ldr	r1, [pc, #620]	; (80039a8 <main+0x2a0>)
 800373a:	489c      	ldr	r0, [pc, #624]	; (80039ac <main+0x2a4>)
 800373c:	f001 fed6 	bl	80054ec <HAL_ADC_Start_DMA>

  ble.init(USART2, 9600, 1);
 8003740:	2301      	movs	r3, #1
 8003742:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003746:	499a      	ldr	r1, [pc, #616]	; (80039b0 <main+0x2a8>)
 8003748:	489a      	ldr	r0, [pc, #616]	; (80039b4 <main+0x2ac>)
 800374a:	f7fd ff45 	bl	80015d8 <_ZN4UART4initEP13USART_TypeDefii>
  gps.init(USART1, 9600, 1);
 800374e:	2301      	movs	r3, #1
 8003750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003754:	4998      	ldr	r1, [pc, #608]	; (80039b8 <main+0x2b0>)
 8003756:	4899      	ldr	r0, [pc, #612]	; (80039bc <main+0x2b4>)
 8003758:	f7fd ff3e 	bl	80015d8 <_ZN4UART4initEP13USART_TypeDefii>

  short attempts = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
  while(MPU6050_Init(&hi2c1) == 1 && attempts < 10){
 8003762:	4897      	ldr	r0, [pc, #604]	; (80039c0 <main+0x2b8>)
 8003764:	f000 fd5e 	bl	8004224 <_Z12MPU6050_InitP17I2C_HandleTypeDef>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <main+0x72>
 800376e:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8003772:	2b09      	cmp	r3, #9
 8003774:	dc01      	bgt.n	800377a <main+0x72>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <main+0x74>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <main+0x8c>
	  ++attempts;
 8003780:	f8b7 3506 	ldrh.w	r3, [r7, #1286]	; 0x506
 8003784:	3301      	adds	r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
	  HAL_Delay(10);
 800378c:	200a      	movs	r0, #10
 800378e:	f001 fd45 	bl	800521c <HAL_Delay>
  while(MPU6050_Init(&hi2c1) == 1 && attempts < 10){
 8003792:	e7e6      	b.n	8003762 <main+0x5a>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buff[1024] = {0};
 8003794:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f00c fa45 	bl	800fc34 <memset>
  char msg[100] = {0};
 80037aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2260      	movs	r2, #96	; 0x60
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00c fa3b 	bl	800fc34 <memset>

  HAL_GPIO_WritePin(BLE_EN_GPIO_Port, BLE_EN_Pin, GPIO_PIN_SET);
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037c4:	487f      	ldr	r0, [pc, #508]	; (80039c4 <main+0x2bc>)
 80037c6:	f002 fdee 	bl	80063a6 <HAL_GPIO_WritePin>

  //HAL_Delay(100);
  strcpy((char*)buff, "+++");
 80037ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80037ce:	4a7e      	ldr	r2, [pc, #504]	; (80039c8 <main+0x2c0>)
 80037d0:	601a      	str	r2, [r3, #0]
  ble.sendData(buff, strlen((char*)buff), 100);
 80037d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fcd2 	bl	8000180 <strlen>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80037e4:	2364      	movs	r3, #100	; 0x64
 80037e6:	4873      	ldr	r0, [pc, #460]	; (80039b4 <main+0x2ac>)
 80037e8:	f7fe f844 	bl	8001874 <_ZN4UART8sendDataEPhii>

  HAL_Delay(100);
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	f001 fd15 	bl	800521c <HAL_Delay>

  strcpy((char*)buff, "AT+setConnInt 36 24 2 400\r\n");
 80037f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80037f6:	4a75      	ldr	r2, [pc, #468]	; (80039cc <main+0x2c4>)
 80037f8:	461c      	mov	r4, r3
 80037fa:	4615      	mov	r5, r2
 80037fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ble.sendData(buff, strlen((char*)buff), 100);
 8003808:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fcb7 	bl	8000180 <strlen>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800381a:	2364      	movs	r3, #100	; 0x64
 800381c:	4865      	ldr	r0, [pc, #404]	; (80039b4 <main+0x2ac>)
 800381e:	f7fe f829 	bl	8001874 <_ZN4UART8sendDataEPhii>



  int count = 0, overlap = 10;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8003828:	230a      	movs	r3, #10
 800382a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc

  while (1)
  {

	  if(CDC_ReadLine(usbBuffer)) {
 800382e:	4868      	ldr	r0, [pc, #416]	; (80039d0 <main+0x2c8>)
 8003830:	f00a ff54 	bl	800e6dc <CDC_ReadLine>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <main+0x154>
		  CDC_Transmit_FS(usbBuffer, sizeof(usbBuffer));
 8003844:	2110      	movs	r1, #16
 8003846:	4862      	ldr	r0, [pc, #392]	; (80039d0 <main+0x2c8>)
 8003848:	f00a ff1c 	bl	800e684 <CDC_Transmit_FS>
		  ble.sendData(usbBuffer, sizeof(usbBuffer), 100);
 800384c:	2364      	movs	r3, #100	; 0x64
 800384e:	2210      	movs	r2, #16
 8003850:	495f      	ldr	r1, [pc, #380]	; (80039d0 <main+0x2c8>)
 8003852:	4858      	ldr	r0, [pc, #352]	; (80039b4 <main+0x2ac>)
 8003854:	f7fe f80e 	bl	8001874 <_ZN4UART8sendDataEPhii>

		  CDC_ClearBuffer();
 8003858:	f00a ff68 	bl	800e72c <CDC_ClearBuffer>
	  }
	  if(gps.readLine(buff, sizeof(buff), 50)) {
 800385c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003860:	2332      	movs	r3, #50	; 0x32
 8003862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003866:	4855      	ldr	r0, [pc, #340]	; (80039bc <main+0x2b4>)
 8003868:	f7fd ff20 	bl	80016ac <_ZN4UART8readLineEPhim>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80bf 	beq.w	80039fc <main+0x2f4>

		  //gps.getData(buff, sizeof(buff));
		  //CDC_Transmit_FS(buff, sizeof(buff));

		  char *str = strstr((char*)buff, "$GNGGA,");
 800387e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003882:	4954      	ldr	r1, [pc, #336]	; (80039d4 <main+0x2cc>)
 8003884:	4618      	mov	r0, r3
 8003886:	f00d f9f2 	bl	8010c6e <strstr>
 800388a:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8
		  if(str!=NULL)
 800388e:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b2 	beq.w	80039fc <main+0x2f4>
		  {
			  memset(&GPSData,0,sizeof(GPSData));
 8003898:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800389c:	2250      	movs	r2, #80	; 0x50
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f00c f9c7 	bl	800fc34 <memset>
			  sscanf(str,"$GNGGA,%2hu%2hu%2hu.%3hu,%f,%c,%f,%c,%hu,%hu,%f,%f,%c,%f,%c,,*%2s",
 80038a6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038aa:	1c99      	adds	r1, r3, #2
 80038ac:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80038b0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038b4:	3348      	adds	r3, #72	; 0x48
 80038b6:	930d      	str	r3, [sp, #52]	; 0x34
 80038b8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038bc:	3340      	adds	r3, #64	; 0x40
 80038be:	930c      	str	r3, [sp, #48]	; 0x30
 80038c0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038c4:	333c      	adds	r3, #60	; 0x3c
 80038c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038c8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038cc:	3338      	adds	r3, #56	; 0x38
 80038ce:	930a      	str	r3, [sp, #40]	; 0x28
 80038d0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038d4:	3334      	adds	r3, #52	; 0x34
 80038d6:	9309      	str	r3, [sp, #36]	; 0x24
 80038d8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038dc:	3330      	adds	r3, #48	; 0x30
 80038de:	9308      	str	r3, [sp, #32]
 80038e0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038e4:	332c      	adds	r3, #44	; 0x2c
 80038e6:	9307      	str	r3, [sp, #28]
 80038e8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038ec:	332a      	adds	r3, #42	; 0x2a
 80038ee:	9306      	str	r3, [sp, #24]
 80038f0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038f4:	3328      	adds	r3, #40	; 0x28
 80038f6:	9305      	str	r3, [sp, #20]
 80038f8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80038fc:	331c      	adds	r3, #28
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003904:	3318      	adds	r3, #24
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800390c:	3308      	adds	r3, #8
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003914:	3306      	adds	r3, #6
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800391c:	3304      	adds	r3, #4
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	460b      	mov	r3, r1
 8003922:	492d      	ldr	r1, [pc, #180]	; (80039d8 <main+0x2d0>)
 8003924:	f8d7 04f8 	ldr.w	r0, [r7, #1272]	; 0x4f8
 8003928:	f00d f92a 	bl	8010b80 <siscanf>
					  &GPSData.UTC_Hour,&GPSData.UTC_Min,&GPSData.UTC_Sec,&GPSData.UTC_MicroSec,&GPSData.Latitude,
					  &GPSData.NS_Indicator,&GPSData.Longitude,&GPSData.EW_Indicator,&GPSData.PositionFixIndicator,
					  &GPSData.SatellitesUsed,&GPSData.HDOP,&GPSData.MSL_Altitude,&GPSData.MSL_Units,&GPSData.Geoid_Separation,
					  &GPSData.Geoid_Units,GPSData.CheckSum);

			  if(GPSData.NS_Indicator==0)
 800392c:	f897 34c0 	ldrb.w	r3, [r7, #1216]	; 0x4c0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <main+0x232>
				  GPSData.NS_Indicator='-';
 8003934:	232d      	movs	r3, #45	; 0x2d
 8003936:	f887 34c0 	strb.w	r3, [r7, #1216]	; 0x4c0
			  if(GPSData.EW_Indicator==0)
 800393a:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <main+0x240>
				  GPSData.EW_Indicator='-';
 8003942:	232d      	movs	r3, #45	; 0x2d
 8003944:	f887 34d0 	strb.w	r3, [r7, #1232]	; 0x4d0
			  if(GPSData.Geoid_Units==0)
 8003948:	f897 34e8 	ldrb.w	r3, [r7, #1256]	; 0x4e8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <main+0x24e>
				  GPSData.Geoid_Units='-';
 8003950:	232d      	movs	r3, #45	; 0x2d
 8003952:	f887 34e8 	strb.w	r3, [r7, #1256]	; 0x4e8
			  if(GPSData.MSL_Units==0)
 8003956:	f897 34e0 	ldrb.w	r3, [r7, #1248]	; 0x4e0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <main+0x25c>
				  GPSData.MSL_Units='-';
 800395e:	232d      	movs	r3, #45	; 0x2d
 8003960:	f887 34e0 	strb.w	r3, [r7, #1248]	; 0x4e0

			  GPSData.LatitudeDecimal=convertDegMinToDecDeg(GPSData.Latitude);
 8003964:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fba9 	bl	80040c0 <_Z21convertDegMinToDecDegf>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8003976:	e9c1 2300 	strd	r2, r3, [r1]
			  GPSData.LongitudeDecimal=convertDegMinToDecDeg(GPSData.Longitude);
 800397a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fb9e 	bl	80040c0 <_Z21convertDegMinToDecDegf>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800398c:	e9c1 2300 	strd	r2, r3, [r1]

			  if(GPSData.SatellitesUsed > 3) HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_SET);
 8003990:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8003994:	2b03      	cmp	r3, #3
 8003996:	d923      	bls.n	80039e0 <main+0x2d8>
 8003998:	2201      	movs	r2, #1
 800399a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800399e:	480f      	ldr	r0, [pc, #60]	; (80039dc <main+0x2d4>)
 80039a0:	f002 fd01 	bl	80063a6 <HAL_GPIO_WritePin>
 80039a4:	e022      	b.n	80039ec <main+0x2e4>
 80039a6:	bf00      	nop
 80039a8:	200006e0 	.word	0x200006e0
 80039ac:	2000043c 	.word	0x2000043c
 80039b0:	40004400 	.word	0x40004400
 80039b4:	20000648 	.word	0x20000648
 80039b8:	40013800 	.word	0x40013800
 80039bc:	20000608 	.word	0x20000608
 80039c0:	200004d4 	.word	0x200004d4
 80039c4:	40020400 	.word	0x40020400
 80039c8:	002b2b2b 	.word	0x002b2b2b
 80039cc:	08014cd8 	.word	0x08014cd8
 80039d0:	2000042c 	.word	0x2000042c
 80039d4:	08014cf4 	.word	0x08014cf4
 80039d8:	08014cfc 	.word	0x08014cfc
 80039dc:	40020000 	.word	0x40020000
			  else HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_RESET);
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e6:	4894      	ldr	r0, [pc, #592]	; (8003c38 <main+0x530>)
 80039e8:	f002 fcdd 	bl	80063a6 <HAL_GPIO_WritePin>

			  memset(buff, '\0', sizeof(buff));
 80039ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80039f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00c f91c 	bl	800fc34 <memset>
		  }
	  }
	  if(ble.readLine(buff, sizeof(buff), 50)) {
 80039fc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003a00:	2332      	movs	r3, #50	; 0x32
 8003a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a06:	488d      	ldr	r0, [pc, #564]	; (8003c3c <main+0x534>)
 8003a08:	f7fd fe50 	bl	80016ac <_ZN4UART8readLineEPhim>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01c      	beq.n	8003a56 <main+0x34e>
		  //ble.getData(buff, sizeof(buff));
		  strcpy(msg, (char*)buff);
 8003a1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f00d f919 	bl	8010c5e <strcpy>
		  sprintf((char*)buff, "\r\n\r\nBLE MSG: %s\r\n\r\n",msg);
 8003a2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003a30:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a34:	4982      	ldr	r1, [pc, #520]	; (8003c40 <main+0x538>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00d f882 	bl	8010b40 <siprintf>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
 8003a3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fb9d 	bl	8000180 <strlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f00a fe17 	bl	800e684 <CDC_Transmit_FS>
	  }


	  if(++count >= overlap) {
 8003a56:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8003a60:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8003a64:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	bfac      	ite	ge
 8003a6c:	2301      	movge	r3, #1
 8003a6e:	2300      	movlt	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01c      	beq.n	8003ab0 <main+0x3a8>
		  HAL_GPIO_TogglePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin);
 8003a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a7a:	4872      	ldr	r0, [pc, #456]	; (8003c44 <main+0x53c>)
 8003a7c:	f002 fcab 	bl	80063d6 <HAL_GPIO_TogglePin>
		  //ble.sendData(buff, strlen((char*)buff), 100);

		  //strcpy((char*)buff, "AT+getAddr\r\n");
		  //ble.sendData(buff, strlen((char*)buff), 100);

		  strcpy((char*)buff, "AT+getInfo\r\n");
 8003a80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a84:	4a70      	ldr	r2, [pc, #448]	; (8003c48 <main+0x540>)
 8003a86:	461c      	mov	r4, r3
 8003a88:	4613      	mov	r3, r2
 8003a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a8c:	c407      	stmia	r4!, {r0, r1, r2}
 8003a8e:	7023      	strb	r3, [r4, #0]
		  ble.sendData(buff, strlen((char*)buff), 100);
 8003a90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fb73 	bl	8000180 <strlen>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003aa2:	2364      	movs	r3, #100	; 0x64
 8003aa4:	4865      	ldr	r0, [pc, #404]	; (8003c3c <main+0x534>)
 8003aa6:	f7fd fee5 	bl	8001874 <_ZN4UART8sendDataEPhii>
		  count = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
	  }

	  if(HAL_GPIO_ReadPin(BLE_STATUS_GPIO_Port, BLE_STATUS_Pin) == GPIO_PIN_SET) overlap = 10;
 8003ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ab4:	4865      	ldr	r0, [pc, #404]	; (8003c4c <main+0x544>)
 8003ab6:	f002 fc5f 	bl	8006378 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <main+0x3ca>
 8003aca:	230a      	movs	r3, #10
 8003acc:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8003ad0:	e002      	b.n	8003ad8 <main+0x3d0>
	  else overlap = 50;
 8003ad2:	2332      	movs	r3, #50	; 0x32
 8003ad4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc

	  MPU6050_Read_All(&hi2c1, &mpu6050);
 8003ad8:	495d      	ldr	r1, [pc, #372]	; (8003c50 <main+0x548>)
 8003ada:	485e      	ldr	r0, [pc, #376]	; (8003c54 <main+0x54c>)
 8003adc:	f000 fc2c 	bl	8004338 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>

	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
			  "\u001b[0m\u001b[1mRoll: \u001b[0m%8.3f | \u001b[0m\u001b[1mPitch: \u001b[0m%8.3f | \u001b[0m\u001b[1mAX: \u001b[0m%8.3f | \u001b[0m\u001b[1mAY: \u001b[0m%8.3f | \u001b[0m\u001b[1mGX: \u001b[0m%8.3f | \u001b[0m\u001b[1mGY: \u001b[0m%8.3f\033[1B\r\u001b[0m\u001b[1m"
			  "\u001b[0m\u001b[1mTime: \u001b[0m%hu:%hu:%hu (UTC) | \u001b[0m\u001b[1mLatitude: \u001b[0m%f %c | \u001b[0m\u001b[1mLongitude: \u001b[0m%f %c | \u001b[0m\u001b[1mSatellites Fixed: \u001b[0m%d\033[1A\033[1A\r",

			  adcValue[0]*3.3/4096, adcValue[1]*3.3/4096,
 8003ae0:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <main+0x550>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fc95 	bl	8000414 <__aeabi_ui2d>
 8003aea:	a351      	add	r3, pc, #324	; (adr r3, 8003c30 <main+0x528>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fd0a 	bl	8000508 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <main+0x554>)
 8003b02:	f7fc fe2b 	bl	800075c <__aeabi_ddiv>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			  adcValue[0]*3.3/4096, adcValue[1]*3.3/4096,
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <main+0x550>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fc7e 	bl	8000414 <__aeabi_ui2d>
 8003b18:	a345      	add	r3, pc, #276	; (adr r3, 8003c30 <main+0x528>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc fcf3 	bl	8000508 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <main+0x554>)
 8003b30:	f7fc fe14 	bl	800075c <__aeabi_ddiv>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003b3c:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <main+0x548>)
 8003b3e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003b42:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <main+0x548>)
 8003b44:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003b48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b4c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8003b50:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <main+0x548>)
 8003b52:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8003b56:	e9c7 1208 	strd	r1, r2, [r7, #32]
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <main+0x548>)
 8003b5c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003b60:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003b64:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <main+0x548>)
 8003b66:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003b6a:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003b6e:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <main+0x548>)
 8003b70:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
			  mpu6050.KalmanAngleX, mpu6050.KalmanAngleY, mpu6050.Ax, mpu6050.Ay, mpu6050.Gx, mpu6050.Gy,
			  GPSData.UTC_Hour, GPSData.UTC_Min, GPSData.UTC_Sec,
 8003b74:	f8b7 34a8 	ldrh.w	r3, [r7, #1192]	; 0x4a8
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b78:	60fb      	str	r3, [r7, #12]
			  GPSData.UTC_Hour, GPSData.UTC_Min, GPSData.UTC_Sec,
 8003b7a:	f8b7 34aa 	ldrh.w	r3, [r7, #1194]	; 0x4aa
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b7e:	60bb      	str	r3, [r7, #8]
			  GPSData.UTC_Hour, GPSData.UTC_Min, GPSData.UTC_Sec,
 8003b80:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b84:	607b      	str	r3, [r7, #4]
			  GPSData.Latitude, GPSData.NS_Indicator,
 8003b86:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fc64 	bl	8000458 <__aeabi_f2d>
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
			  GPSData.Latitude, GPSData.NS_Indicator,
 8003b94:	f897 34c0 	ldrb.w	r3, [r7, #1216]	; 0x4c0
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b98:	603b      	str	r3, [r7, #0]
			  GPSData.Longitude, GPSData.EW_Indicator,
 8003b9a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fc5a 	bl	8000458 <__aeabi_f2d>
			  GPSData.Longitude, GPSData.EW_Indicator,
 8003ba4:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003ba8:	461a      	mov	r2, r3
			  GPSData.SatellitesUsed);
 8003baa:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
	  sprintf((char*)buff, "\u001b[0m\u001b[1mADC1: \u001b[0m%8.3f | \u001b[0m\u001b[1mADC2: \u001b[0m%8.3f                                                                \033[1B\r\u001b[0m\u001b[1m"
 8003bae:	f107 06a8 	add.w	r6, r7, #168	; 0xa8
 8003bb2:	9319      	str	r3, [sp, #100]	; 0x64
 8003bb4:	9218      	str	r2, [sp, #96]	; 0x60
 8003bb6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8003bba:	6839      	ldr	r1, [r7, #0]
 8003bbc:	9114      	str	r1, [sp, #80]	; 0x50
 8003bbe:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	9110      	str	r1, [sp, #64]	; 0x40
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	930e      	str	r3, [sp, #56]	; 0x38
 8003bce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003bd2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bd6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003bda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003be2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003be6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8003bea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003bee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003bf2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003bf6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003bfa:	e9cd 3400 	strd	r3, r4, [sp]
 8003bfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c02:	4917      	ldr	r1, [pc, #92]	; (8003c60 <main+0x558>)
 8003c04:	4630      	mov	r0, r6
 8003c06:	f00c ff9b 	bl	8010b40 <siprintf>
	  CDC_Transmit_FS(buff, strlen((char*)buff));
 8003c0a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc fab6 	bl	8000180 <strlen>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00a fd30 	bl	800e684 <CDC_Transmit_FS>

	  HAL_Delay(10);
 8003c24:	200a      	movs	r0, #10
 8003c26:	f001 faf9 	bl	800521c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003c2a:	e600      	b.n	800382e <main+0x126>
 8003c2c:	f3af 8000 	nop.w
 8003c30:	66666666 	.word	0x66666666
 8003c34:	400a6666 	.word	0x400a6666
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	20000648 	.word	0x20000648
 8003c40:	08014d40 	.word	0x08014d40
 8003c44:	40020800 	.word	0x40020800
 8003c48:	08014d54 	.word	0x08014d54
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	20000688 	.word	0x20000688
 8003c54:	200004d4 	.word	0x200004d4
 8003c58:	200006e0 	.word	0x200006e0
 8003c5c:	40b00000 	.word	0x40b00000
 8003c60:	08014d64 	.word	0x08014d64

08003c64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b092      	sub	sp, #72	; 0x48
 8003c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	2234      	movs	r2, #52	; 0x34
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00b ffde 	bl	800fc34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c78:	463b      	mov	r3, r7
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c86:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <_Z18SystemClock_Configv+0xb0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <_Z18SystemClock_Configv+0xb0>)
 8003c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c94:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003c96:	2303      	movs	r3, #3
 8003c98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8003cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f004 ff8b 	bl	8008bdc <HAL_RCC_OscConfig>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003cd6:	f000 fa51 	bl	800417c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cda:	230f      	movs	r3, #15
 8003cdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003cee:	463b      	mov	r3, r7
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f005 faa2 	bl	800923c <HAL_RCC_ClockConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8003d08:	f000 fa38 	bl	800417c <Error_Handler>
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3748      	adds	r7, #72	; 0x48
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40007000 	.word	0x40007000

08003d18 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <_ZL11MX_ADC_Initv+0xe8>)
 8003d2c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003d46:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8003d52:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d76:	2210      	movs	r2, #16
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003d88:	481c      	ldr	r0, [pc, #112]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003d8a:	f001 fa69 	bl	8005260 <HAL_ADC_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 8003d9e:	f000 f9ed 	bl	800417c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003da2:	2309      	movs	r3, #9
 8003da4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4812      	ldr	r0, [pc, #72]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003db4:	f001 fc44 	bl	8005640 <HAL_ADC_ConfigChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 8003dc8:	f000 f9d8 	bl	800417c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4808      	ldr	r0, [pc, #32]	; (8003dfc <_ZL11MX_ADC_Initv+0xe4>)
 8003dda:	f001 fc31 	bl	8005640 <HAL_ADC_ConfigChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <_ZL11MX_ADC_Initv+0xda>
  {
    Error_Handler();
 8003dee:	f000 f9c5 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	2000043c 	.word	0x2000043c
 8003e00:	40012400 	.word	0x40012400

08003e04 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e0a:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <_ZL12MX_I2C1_Initv+0x60>)
 8003e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <_ZL12MX_I2C1_Initv+0x64>)
 8003e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <_ZL12MX_I2C1_Initv+0x5c>)
 8003e42:	f002 fae1 	bl	8006408 <HAL_I2C_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003e56:	f000 f991 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200004d4 	.word	0x200004d4
 8003e64:	40005400 	.word	0x40005400
 8003e68:	00061a80 	.word	0x00061a80

08003e6c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <_ZL12MX_SPI1_Initv+0x74>)
 8003e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003eb8:	220a      	movs	r2, #10
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ebc:	4807      	ldr	r0, [pc, #28]	; (8003edc <_ZL12MX_SPI1_Initv+0x70>)
 8003ebe:	f005 fc59 	bl	8009774 <HAL_SPI_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8003ed2:	f000 f953 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000528 	.word	0x20000528
 8003ee0:	40013000 	.word	0x40013000

08003ee4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <_ZL11MX_DMA_Initv+0x38>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <_ZL11MX_DMA_Initv+0x38>)
 8003ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef4:	61d3      	str	r3, [r2, #28]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <_ZL11MX_DMA_Initv+0x38>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	200b      	movs	r0, #11
 8003f08:	f001 fe77 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003f0c:	200b      	movs	r0, #11
 8003f0e:	f001 fe90 	bl	8005c32 <HAL_NVIC_EnableIRQ>

}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800

08003f20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f36:	4b46      	ldr	r3, [pc, #280]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a45      	ldr	r2, [pc, #276]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	61d3      	str	r3, [r2, #28]
 8003f42:	4b43      	ldr	r3, [pc, #268]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f4e:	4b40      	ldr	r3, [pc, #256]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f54:	f043 0320 	orr.w	r3, r3, #32
 8003f58:	61d3      	str	r3, [r2, #28]
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a39      	ldr	r2, [pc, #228]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	61d3      	str	r3, [r2, #28]
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4a33      	ldr	r2, [pc, #204]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	61d3      	str	r3, [r2, #28]
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <_ZL12MX_GPIO_Initv+0x130>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 8003f96:	2200      	movs	r2, #0
 8003f98:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003f9c:	482d      	ldr	r0, [pc, #180]	; (8004054 <_ZL12MX_GPIO_Initv+0x134>)
 8003f9e:	f002 fa02 	bl	80063a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f240 1103 	movw	r1, #259	; 0x103
 8003fa8:	482b      	ldr	r0, [pc, #172]	; (8004058 <_ZL12MX_GPIO_Initv+0x138>)
 8003faa:	f002 f9fc 	bl	80063a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f64d 2101 	movw	r1, #55809	; 0xda01
 8003fb4:	4829      	ldr	r0, [pc, #164]	; (800405c <_ZL12MX_GPIO_Initv+0x13c>)
 8003fb6:	f002 f9f6 	bl	80063a6 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin|PWR_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 8003fba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4820      	ldr	r0, [pc, #128]	; (8004054 <_ZL12MX_GPIO_Initv+0x134>)
 8003fd4:	f002 f850 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_G_Pin PWR_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin;
 8003fd8:	f240 1303 	movw	r3, #259	; 0x103
 8003fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4819      	ldr	r0, [pc, #100]	; (8004058 <_ZL12MX_GPIO_Initv+0x138>)
 8003ff2:	f002 f841 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BAT_P_Pin */
  GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4619      	mov	r1, r3
 8004008:	4813      	ldr	r0, [pc, #76]	; (8004058 <_ZL12MX_GPIO_Initv+0x138>)
 800400a:	f002 f835 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SD_CS_Pin MLX_TRIG_Pin SD_LED_G_Pin BLE_STATUS_Pin
                           BLE_EN_Pin PWR_LED_B_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 800400e:	f64d 2301 	movw	r3, #55809	; 0xda01
 8004012:	617b      	str	r3, [r7, #20]
                          |BLE_EN_Pin|PWR_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004014:	2301      	movs	r3, #1
 8004016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4619      	mov	r1, r3
 8004026:	480d      	ldr	r0, [pc, #52]	; (800405c <_ZL12MX_GPIO_Initv+0x13c>)
 8004028:	f002 f826 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MLX_RDY_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MLX_RDY_Pin|BLE_INT_Pin;
 800402c:	f242 4304 	movw	r3, #9220	; 0x2404
 8004030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	4806      	ldr	r0, [pc, #24]	; (800405c <_ZL12MX_GPIO_Initv+0x13c>)
 8004042:	f002 f819 	bl	8006078 <HAL_GPIO_Init>

}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	; 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	40020800 	.word	0x40020800
 8004058:	40020000 	.word	0x40020000
 800405c:	40020400 	.word	0x40020400

08004060 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	std::map<USART_TypeDef*, UART*>::iterator it;
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd fcc1 	bl	80019f4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = UART::objectMap.find(huart->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4619      	mov	r1, r3
 8004076:	4811      	ldr	r0, [pc, #68]	; (80040bc <HAL_UART_RxCpltCallback+0x5c>)
 8004078:	f7fd fcc9 	bl	8001a0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 800407c:	4603      	mov	r3, r0
 800407e:	60bb      	str	r3, [r7, #8]
	if(it != UART::objectMap.end())
 8004080:	480e      	ldr	r0, [pc, #56]	; (80040bc <HAL_UART_RxCpltCallback+0x5c>)
 8004082:	f7fd fcd3 	bl	8001a2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8004086:	4603      	mov	r3, r0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	f107 020c 	add.w	r2, r7, #12
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7fd fcd6 	bl	8001a46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_UART_RxCpltCallback+0x54>
		it->second->memberIRQ();
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f86e 	bl	8004186 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>
 80040aa:	4603      	mov	r3, r0
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fbf4 	bl	800189c <_ZN4UART9memberIRQEv>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000414 	.word	0x20000414

080040c0 <_Z21convertDegMinToDecDegf>:

double convertDegMinToDecDeg (float degMin)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  double min = 0.0;
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fc f9b9 	bl	8000458 <__aeabi_f2d>
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <_Z21convertDegMinToDecDegf+0x8c>)
 80040ec:	f00b fa3c 	bl	800f568 <fmod>
 80040f0:	e9c7 0104 	strd	r0, r1, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <_Z21convertDegMinToDecDegf+0x90>)
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc ff10 	bl	8000f1c <__aeabi_fdiv>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc ffa8 	bl	8001054 <__aeabi_f2iz>
 8004104:	4603      	mov	r3, r0
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fe00 	bl	8000d0c <__aeabi_i2f>
 800410c:	4603      	mov	r3, r0
 800410e:	607b      	str	r3, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fc f9a1 	bl	8000458 <__aeabi_f2d>
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <_Z21convertDegMinToDecDegf+0x94>)
 8004120:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004124:	f7fc fb1a 	bl	800075c <__aeabi_ddiv>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4620      	mov	r0, r4
 800412e:	4629      	mov	r1, r5
 8004130:	f7fc f834 	bl	800019c <__adddf3>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 800413c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bdb0      	pop	{r4, r5, r7, pc}
 800414a:	bf00      	nop
 800414c:	40590000 	.word	0x40590000
 8004150:	42c80000 	.word	0x42c80000
 8004154:	404e0000 	.word	0x404e0000

08004158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800416a:	f001 f83b 	bl	80051e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40011000 	.word	0x40011000

0800417c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004180:	b672      	cpsid	i
}
 8004182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004184:	e7fe      	b.n	8004184 <Error_Handler+0x8>

08004186 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe ffaa 	bl	80030ec <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8004198:	4603      	mov	r3, r0
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d10c      	bne.n	80041ce <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d107      	bne.n	80041ce <_Z41__static_initialization_and_destruction_0ii+0x2a>
UART gps(&huart1), ble(&huart2);
 80041be:	490d      	ldr	r1, [pc, #52]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80041c0:	480d      	ldr	r0, [pc, #52]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80041c2:	f7fd f997 	bl	80014f4 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 80041c6:	490d      	ldr	r1, [pc, #52]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80041c8:	480d      	ldr	r0, [pc, #52]	; (8004200 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80041ca:	f7fd f993 	bl	80014f4 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <_Z41__static_initialization_and_destruction_0ii+0x46>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041da:	4293      	cmp	r3, r2
 80041dc:	d105      	bne.n	80041ea <_Z41__static_initialization_and_destruction_0ii+0x46>
 80041de:	4808      	ldr	r0, [pc, #32]	; (8004200 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80041e0:	f7fd f9a6 	bl	8001530 <_ZN4UARTD1Ev>
 80041e4:	4804      	ldr	r0, [pc, #16]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80041e6:	f7fd f9a3 	bl	8001530 <_ZN4UARTD1Ev>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000580 	.word	0x20000580
 80041f8:	20000608 	.word	0x20000608
 80041fc:	200005c4 	.word	0x200005c4
 8004200:	20000648 	.word	0x20000648

08004204 <_GLOBAL__sub_I_usbBuffer>:
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
 8004208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800420c:	2001      	movs	r0, #1
 800420e:	f7ff ffc9 	bl	80041a4 <_Z41__static_initialization_and_destruction_0ii>
 8004212:	bd80      	pop	{r7, pc}

08004214 <_GLOBAL__sub_D_usbBuffer>:
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
 8004218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800421c:	2000      	movs	r0, #0
 800421e:	f7ff ffc1 	bl	80041a4 <_Z41__static_initialization_and_destruction_0ii>
 8004222:	bd80      	pop	{r7, pc}

08004224 <_Z12MPU6050_InitP17I2C_HandleTypeDef>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af04      	add	r7, sp, #16
 800422a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800422c:	2364      	movs	r3, #100	; 0x64
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	2301      	movs	r3, #1
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	f107 030f 	add.w	r3, r7, #15
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	2275      	movs	r2, #117	; 0x75
 800423e:	21d0      	movs	r1, #208	; 0xd0
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f002 fb1f 	bl	8006884 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b68      	cmp	r3, #104	; 0x68
 800424a:	d13d      	bne.n	80042c8 <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004250:	2364      	movs	r3, #100	; 0x64
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	2301      	movs	r3, #1
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	f107 030e 	add.w	r3, r7, #14
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2301      	movs	r3, #1
 8004260:	226b      	movs	r2, #107	; 0x6b
 8004262:	21d0      	movs	r1, #208	; 0xd0
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f002 fa13 	bl	8006690 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800426a:	2307      	movs	r3, #7
 800426c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800426e:	2364      	movs	r3, #100	; 0x64
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	2301      	movs	r3, #1
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	f107 030e 	add.w	r3, r7, #14
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2301      	movs	r3, #1
 800427e:	2219      	movs	r2, #25
 8004280:	21d0      	movs	r1, #208	; 0xd0
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f002 fa04 	bl	8006690 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8004288:	2300      	movs	r3, #0
 800428a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800428c:	2364      	movs	r3, #100	; 0x64
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	2301      	movs	r3, #1
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	f107 030e 	add.w	r3, r7, #14
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2301      	movs	r3, #1
 800429c:	221c      	movs	r2, #28
 800429e:	21d0      	movs	r1, #208	; 0xd0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f002 f9f5 	bl	8006690 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80042aa:	2364      	movs	r3, #100	; 0x64
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	2301      	movs	r3, #1
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	f107 030e 	add.w	r3, r7, #14
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2301      	movs	r3, #1
 80042ba:	221b      	movs	r2, #27
 80042bc:	21d0      	movs	r1, #208	; 0xd0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f002 f9e6 	bl	8006690 <HAL_I2C_Mem_Write>
        return 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xa6>
    }
    return 1;
 80042c8:	2301      	movs	r3, #1
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc f8aa 	bl	8000434 <__aeabi_i2d>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	f00b f974 	bl	800f5d4 <sqrt>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80042fa:	b5b0      	push	{r4, r5, r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc f894 	bl	8000434 <__aeabi_i2d>
 800430c:	4604      	mov	r4, r0
 800430e:	460d      	mov	r5, r1
 8004310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc f88d 	bl	8000434 <__aeabi_i2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4620      	mov	r0, r4
 8004320:	4629      	mov	r1, r5
 8004322:	f00b f91e 	bl	800f562 <atan2>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
    }
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bdb0      	pop	{r4, r5, r7, pc}
 8004334:	0000      	movs	r0, r0
	...

08004338 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8004338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800433c:	b094      	sub	sp, #80	; 0x50
 800433e:	af04      	add	r7, sp, #16
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8004344:	2364      	movs	r3, #100	; 0x64
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	230e      	movs	r3, #14
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	f107 0308 	add.w	r3, r7, #8
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	223b      	movs	r2, #59	; 0x3b
 8004356:	21d0      	movs	r1, #208	; 0xd0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f002 fa93 	bl	8006884 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800435e:	7a3b      	ldrb	r3, [r7, #8]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	b21a      	sxth	r2, r3
 8004364:	7a7b      	ldrb	r3, [r7, #9]
 8004366:	b21b      	sxth	r3, r3
 8004368:	4313      	orrs	r3, r2
 800436a:	b21a      	sxth	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8004370:	7abb      	ldrb	r3, [r7, #10]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	b21a      	sxth	r2, r3
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	b21b      	sxth	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b21a      	sxth	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	b21a      	sxth	r2, r3
 8004388:	7b7b      	ldrb	r3, [r7, #13]
 800438a:	b21b      	sxth	r3, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	b21a      	sxth	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8004394:	7bbb      	ldrb	r3, [r7, #14]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	b21a      	sxth	r2, r3
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	b21b      	sxth	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80043a2:	7c3b      	ldrb	r3, [r7, #16]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	7c7b      	ldrb	r3, [r7, #17]
 80043aa:	b21b      	sxth	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b21a      	sxth	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80043b4:	7cbb      	ldrb	r3, [r7, #18]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	b21a      	sxth	r2, r3
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	b21b      	sxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80043c6:	7d3b      	ldrb	r3, [r7, #20]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	7d7b      	ldrb	r3, [r7, #21]
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	b21a      	sxth	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc f828 	bl	8000434 <__aeabi_i2d>
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	4baf      	ldr	r3, [pc, #700]	; (80046a8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 80043ea:	f7fc f9b7 	bl	800075c <__aeabi_ddiv>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f818 	bl	8000434 <__aeabi_i2d>
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	4ba7      	ldr	r3, [pc, #668]	; (80046a8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 800440a:	f7fc f9a7 	bl	800075c <__aeabi_ddiv>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f808 	bl	8000434 <__aeabi_i2d>
 8004424:	a39a      	add	r3, pc, #616	; (adr r3, 8004690 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x358>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fc f997 	bl	800075c <__aeabi_ddiv>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8004438:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fc65 	bl	8000d0c <__aeabi_i2f>
 8004442:	4603      	mov	r3, r0
 8004444:	4999      	ldr	r1, [pc, #612]	; (80046ac <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x374>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fd68 	bl	8000f1c <__aeabi_fdiv>
 800444c:	4603      	mov	r3, r0
 800444e:	4998      	ldr	r1, [pc, #608]	; (80046b0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x378>)
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc fba7 	bl	8000ba4 <__addsf3>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fb ffe5 	bl	8000434 <__aeabi_i2d>
 800446a:	a38b      	add	r3, pc, #556	; (adr r3, 8004698 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f974 	bl	800075c <__aeabi_ddiv>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004484:	4618      	mov	r0, r3
 8004486:	f7fb ffd5 	bl	8000434 <__aeabi_i2d>
 800448a:	a383      	add	r3, pc, #524	; (adr r3, 8004698 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f964 	bl	800075c <__aeabi_ddiv>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb ffc5 	bl	8000434 <__aeabi_i2d>
 80044aa:	a37b      	add	r3, pc, #492	; (adr r3, 8004698 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f954 	bl	800075c <__aeabi_ddiv>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80044be:	f000 fea3 	bl	8005208 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fb ffa2 	bl	8000414 <__aeabi_ui2d>
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x380>)
 80044d6:	f7fc f941 	bl	800075c <__aeabi_ddiv>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80044e2:	f000 fe91 	bl	8005208 <HAL_GetTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4a72      	ldr	r2, [pc, #456]	; (80046b4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 80044ea:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f2:	461a      	mov	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fa:	fb03 f202 	mul.w	r2, r3, r2
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004504:	4619      	mov	r1, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800450c:	fb03 f301 	mul.w	r3, r3, r1
    double roll_sqrt = sqrt(
 8004510:	4413      	add	r3, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fedd 	bl	80042d2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8004518:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004528:	f7fc fa56 	bl	80009d8 <__aeabi_dcmpeq>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d119      	bne.n	8004566 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x22e>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb ff7b 	bl	8000434 <__aeabi_i2d>
 800453e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004542:	f7fc f90b 	bl	800075c <__aeabi_ddiv>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	f00a fe7b 	bl	800f248 <atan>
 8004552:	a353      	add	r3, pc, #332	; (adr r3, 80046a0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fb ffd6 	bl	8000508 <__aeabi_dmul>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004564:	e005      	b.n	8004572 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x23a>
    }
    else
    {
        roll = 0.0;
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004578:	425a      	negs	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7ff feb9 	bl	80042fa <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004588:	a345      	add	r3, pc, #276	; (adr r3, 80046a0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fb ffbb 	bl	8000508 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 80045a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045a4:	f7fc fa22 	bl	80009ec <__aeabi_dcmplt>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x28c>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 80045ba:	f7fc fa35 	bl	8000a28 <__aeabi_dcmpgt>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d114      	bne.n	80045ee <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2b6>
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 80045ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045ce:	f7fc fa2b 	bl	8000a28 <__aeabi_dcmpgt>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2cc>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	4b36      	ldr	r3, [pc, #216]	; (80046bc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 80045e4:	f7fc fa02 	bl	80009ec <__aeabi_dcmplt>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2cc>
    {
        KalmanY.angle = pitch;
 80045ee:	4935      	ldr	r1, [pc, #212]	; (80046c4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 80045f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004602:	e012      	b.n	800462a <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2f2>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800460a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800460e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004612:	e9cd 2300 	strd	r2, r3, [sp]
 8004616:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461a:	482a      	ldr	r0, [pc, #168]	; (80046c4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 800461c:	f000 f856 	bl	80046cc <_Z15Kalman_getAngleP8Kalman_tddd>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004630:	4690      	mov	r8, r2
 8004632:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fc f9f2 	bl	8000a28 <__aeabi_dcmpgt>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x324>
        DataStruct->Gx = -DataStruct->Gx;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004650:	4614      	mov	r4, r2
 8004652:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800466a:	e9cd 2300 	strd	r2, r3, [sp]
 800466e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004672:	4815      	ldr	r0, [pc, #84]	; (80046c8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x390>)
 8004674:	f000 f82a 	bl	80046cc <_Z15Kalman_getAngleP8Kalman_tddd>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8004682:	bf00      	nop
 8004684:	3740      	adds	r7, #64	; 0x40
 8004686:	46bd      	mov	sp, r7
 8004688:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800468c:	f3af 8000 	nop.w
 8004690:	00000000 	.word	0x00000000
 8004694:	40cc2900 	.word	0x40cc2900
 8004698:	00000000 	.word	0x00000000
 800469c:	40606000 	.word	0x40606000
 80046a0:	1a63c1f8 	.word	0x1a63c1f8
 80046a4:	404ca5dc 	.word	0x404ca5dc
 80046a8:	40d00000 	.word	0x40d00000
 80046ac:	43aa0000 	.word	0x43aa0000
 80046b0:	42121eb8 	.word	0x42121eb8
 80046b4:	200006e8 	.word	0x200006e8
 80046b8:	408f4000 	.word	0x408f4000
 80046bc:	c0568000 	.word	0xc0568000
 80046c0:	40568000 	.word	0x40568000
 80046c4:	20000048 	.word	0x20000048
 80046c8:	20000000 	.word	0x20000000

080046cc <_Z15Kalman_getAngleP8Kalman_tddd>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b092      	sub	sp, #72	; 0x48
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046e2:	f7fb fd59 	bl	8000198 <__aeabi_dsub>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80046f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046fc:	f7fb ff04 	bl	8000508 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7fb fd48 	bl	800019c <__adddf3>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004722:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004726:	f7fb feef 	bl	8000508 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004738:	f7fb fd2e 	bl	8000198 <__aeabi_dsub>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800474a:	f7fb fd25 	bl	8000198 <__aeabi_dsub>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f7fb fd1e 	bl	800019c <__adddf3>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800476c:	f7fb fecc 	bl	8000508 <__aeabi_dmul>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	f7fb fd10 	bl	800019c <__adddf3>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004792:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004796:	f7fb feb7 	bl	8000508 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fcf9 	bl	8000198 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80047bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80047c0:	f7fb fea2 	bl	8000508 <__aeabi_dmul>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4620      	mov	r0, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	f7fb fce4 	bl	8000198 <__aeabi_dsub>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80047ea:	f7fb fe8d 	bl	8000508 <__aeabi_dmul>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4620      	mov	r0, r4
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7fb fcd1 	bl	800019c <__adddf3>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004810:	f7fb fcc4 	bl	800019c <__adddf3>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004822:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004826:	f7fb ff99 	bl	800075c <__aeabi_ddiv>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800483c:	f7fb ff8e 	bl	800075c <__aeabi_ddiv>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800484e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004852:	f7fb fca1 	bl	8000198 <__aeabi_dsub>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004868:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800486c:	f7fb fe4c 	bl	8000508 <__aeabi_dmul>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fb fc90 	bl	800019c <__adddf3>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800488c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004890:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004894:	f7fb fe38 	bl	8000508 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fc7c 	bl	800019c <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80048b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80048be:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80048c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048d0:	f7fb fe1a 	bl	8000508 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fb fc5c 	bl	8000198 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80048f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048f8:	f7fb fe06 	bl	8000508 <__aeabi_dmul>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4620      	mov	r0, r4
 8004902:	4629      	mov	r1, r5
 8004904:	f7fb fc48 	bl	8000198 <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8004918:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800491c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004920:	f7fb fdf2 	bl	8000508 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fc34 	bl	8000198 <__aeabi_dsub>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8004940:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004944:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004948:	f7fb fdde 	bl	8000508 <__aeabi_dmul>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4620      	mov	r0, r4
 8004952:	4629      	mov	r1, r5
 8004954:	f7fb fc20 	bl	8000198 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	3748      	adds	r7, #72	; 0x48
 800496e:	46bd      	mov	sp, r7
 8004970:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_MspInit+0x58>)
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	4a13      	ldr	r2, [pc, #76]	; (80049cc <HAL_MspInit+0x58>)
 8004980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004984:	6253      	str	r3, [r2, #36]	; 0x24
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <HAL_MspInit+0x58>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_MspInit+0x58>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <HAL_MspInit+0x58>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6213      	str	r3, [r2, #32]
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_MspInit+0x58>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <HAL_MspInit+0x58>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_MspInit+0x58>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6253      	str	r3, [r2, #36]	; 0x24
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_MspInit+0x58>)
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	40023800 	.word	0x40023800

080049d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a35      	ldr	r2, [pc, #212]	; (8004ac4 <HAL_ADC_MspInit+0xf4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d163      	bne.n	8004aba <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049f2:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4a34      	ldr	r2, [pc, #208]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 80049f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fc:	6213      	str	r3, [r2, #32]
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	61d3      	str	r3, [r2, #28]
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <HAL_ADC_MspInit+0xf8>)
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8004a46:	f107 0314 	add.w	r3, r7, #20
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	481f      	ldr	r0, [pc, #124]	; (8004acc <HAL_ADC_MspInit+0xfc>)
 8004a4e:	f001 fb13 	bl	8006078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 8004a52:	2302      	movs	r3, #2
 8004a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a56:	2303      	movs	r3, #3
 8004a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	4619      	mov	r1, r3
 8004a64:	481a      	ldr	r0, [pc, #104]	; (8004ad0 <HAL_ADC_MspInit+0x100>)
 8004a66:	f001 fb07 	bl	8006078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <HAL_ADC_MspInit+0x108>)
 8004a6e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a88:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a94:	2220      	movs	r2, #32
 8004a96:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004a9e:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004aa0:	f001 f8d6 	bl	8005c50 <HAL_DMA_Init>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8004aaa:	f7ff fb67 	bl	800417c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab4:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <HAL_ADC_MspInit+0x104>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004aba:	bf00      	nop
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40012400 	.word	0x40012400
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020000 	.word	0x40020000
 8004ad0:	40020400 	.word	0x40020400
 8004ad4:	20000490 	.word	0x20000490
 8004ad8:	40026008 	.word	0x40026008

08004adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_I2C_MspInit+0x7c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d127      	bne.n	8004b4e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	61d3      	str	r3, [r2, #28]
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b16:	23c0      	movs	r3, #192	; 0xc0
 8004b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b1a:	2312      	movs	r3, #18
 8004b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b22:	2303      	movs	r3, #3
 8004b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b26:	2304      	movs	r3, #4
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	4619      	mov	r1, r3
 8004b30:	480b      	ldr	r0, [pc, #44]	; (8004b60 <HAL_I2C_MspInit+0x84>)
 8004b32:	f001 faa1 	bl	8006078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b40:	6253      	str	r3, [r2, #36]	; 0x24
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_I2C_MspInit+0x80>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b4e:	bf00      	nop
 8004b50:	3728      	adds	r7, #40	; 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40005400 	.word	0x40005400
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40020400 	.word	0x40020400

08004b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_SPI_MspInit+0x7c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d127      	bne.n	8004bd6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b90:	6213      	str	r3, [r2, #32]
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	61d3      	str	r3, [r2, #28]
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_SPI_MspInit+0x80>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004bb6:	23e0      	movs	r3, #224	; 0xe0
 8004bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4805      	ldr	r0, [pc, #20]	; (8004be8 <HAL_SPI_MspInit+0x84>)
 8004bd2:	f001 fa51 	bl	8006078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004bd6:	bf00      	nop
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40013000 	.word	0x40013000
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40020000 	.word	0x40020000

08004bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf4:	f107 031c 	add.w	r3, r7, #28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a36      	ldr	r2, [pc, #216]	; (8004ce4 <HAL_UART_MspInit+0xf8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d131      	bne.n	8004c72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c18:	6213      	str	r3, [r2, #32]
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	61d3      	str	r3, [r2, #28]
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c50:	2307      	movs	r3, #7
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4824      	ldr	r0, [pc, #144]	; (8004cec <HAL_UART_MspInit+0x100>)
 8004c5c:	f001 fa0c 	bl	8006078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2025      	movs	r0, #37	; 0x25
 8004c66:	f000 ffc8 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c6a:	2025      	movs	r0, #37	; 0x25
 8004c6c:	f000 ffe1 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c70:	e034      	b.n	8004cdc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <HAL_UART_MspInit+0x104>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d12f      	bne.n	8004cdc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c86:	6253      	str	r3, [r2, #36]	; 0x24
 8004c88:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	61d3      	str	r3, [r2, #28]
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004cac:	230c      	movs	r3, #12
 8004cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cbc:	2307      	movs	r3, #7
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc0:	f107 031c 	add.w	r3, r7, #28
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4809      	ldr	r0, [pc, #36]	; (8004cec <HAL_UART_MspInit+0x100>)
 8004cc8:	f001 f9d6 	bl	8006078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	2026      	movs	r0, #38	; 0x26
 8004cd2:	f000 ff92 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cd6:	2026      	movs	r0, #38	; 0x26
 8004cd8:	f000 ffab 	bl	8005c32 <HAL_NVIC_EnableIRQ>
}
 8004cdc:	bf00      	nop
 8004cde:	3730      	adds	r7, #48	; 0x30
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40020000 	.word	0x40020000
 8004cf0:	40004400 	.word	0x40004400

08004cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	201b      	movs	r0, #27
 8004d0a:	f000 ff76 	bl	8005bfa <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8004d0e:	201b      	movs	r0, #27
 8004d10:	f000 ff8f 	bl	8005c32 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_InitTick+0x9c>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <HAL_InitTick+0x9c>)
 8004d1a:	f043 0310 	orr.w	r3, r3, #16
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_InitTick+0x9c>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d2c:	f107 0210 	add.w	r2, r7, #16
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 fc8c 	bl	8009654 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f004 fc76 	bl	800962c <HAL_RCC_GetPCLK2Freq>
 8004d40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <HAL_InitTick+0xa0>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	0c9b      	lsrs	r3, r3, #18
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <HAL_InitTick+0xa8>)
 8004d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d5c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8004d70:	4809      	ldr	r0, [pc, #36]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d72:	f004 fd7b 	bl	800986c <HAL_TIM_Base_Init>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8004d7c:	4806      	ldr	r0, [pc, #24]	; (8004d98 <HAL_InitTick+0xa4>)
 8004d7e:	f004 fdbd 	bl	80098fc <HAL_TIM_Base_Start_IT>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e000      	b.n	8004d88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	; 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	431bde83 	.word	0x431bde83
 8004d98:	20000938 	.word	0x20000938
 8004d9c:	40011000 	.word	0x40011000

08004da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004da4:	e7fe      	b.n	8004da4 <NMI_Handler+0x4>

08004da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004daa:	e7fe      	b.n	8004daa <HardFault_Handler+0x4>

08004dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004db0:	e7fe      	b.n	8004db0 <MemManage_Handler+0x4>

08004db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004db2:	b480      	push	{r7}
 8004db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db6:	e7fe      	b.n	8004db6 <BusFault_Handler+0x4>

08004db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dbc:	e7fe      	b.n	8004dbc <UsageFault_Handler+0x4>

08004dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
	...

08004df0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <DMA1_Channel1_IRQHandler+0x10>)
 8004df6:	f001 f861 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000490 	.word	0x20000490

08004e04 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <USB_LP_IRQHandler+0x10>)
 8004e0a:	f002 fbbf 	bl	800758c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20001a60 	.word	0x20001a60

08004e18 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004e1c:	4802      	ldr	r0, [pc, #8]	; (8004e28 <TIM11_IRQHandler+0x10>)
 8004e1e:	f004 fdbf 	bl	80099a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000938 	.word	0x20000938

08004e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e30:	4802      	ldr	r0, [pc, #8]	; (8004e3c <USART1_IRQHandler+0x10>)
 8004e32:	f005 f891 	bl	8009f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000580 	.word	0x20000580

08004e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e44:	4802      	ldr	r0, [pc, #8]	; (8004e50 <USART2_IRQHandler+0x10>)
 8004e46:	f005 f887 	bl	8009f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200005c4 	.word	0x200005c4

08004e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
	return 1;
 8004e58:	2301      	movs	r3, #1
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <_kill>:

int _kill(int pid, int sig)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e6c:	f00a fe80 	bl	800fb70 <__errno>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2216      	movs	r2, #22
 8004e74:	601a      	str	r2, [r3, #0]
	return -1;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_exit>:

void _exit (int status)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffe7 	bl	8004e62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e94:	e7fe      	b.n	8004e94 <_exit+0x12>

08004e96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e00a      	b.n	8004ebe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ea8:	f3af 8000 	nop.w
 8004eac:	4601      	mov	r1, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	60ba      	str	r2, [r7, #8]
 8004eb4:	b2ca      	uxtb	r2, r1
 8004eb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dbf0      	blt.n	8004ea8 <_read+0x12>
	}

return len;
 8004ec6:	687b      	ldr	r3, [r7, #4]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e009      	b.n	8004ef6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	60ba      	str	r2, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	dbf1      	blt.n	8004ee2 <_write+0x12>
	}
	return len;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_close>:

int _close(int file)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	return -1;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr

08004f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <_isatty>:

int _isatty(int file)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <_sbrk+0x5c>)
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <_sbrk+0x60>)
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <_sbrk+0x64>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <_sbrk+0x64>)
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <_sbrk+0x68>)
 8004f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <_sbrk+0x64>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d207      	bcs.n	8004fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f98:	f00a fdea 	bl	800fb70 <__errno>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	220c      	movs	r2, #12
 8004fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa6:	e009      	b.n	8004fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <_sbrk+0x64>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <_sbrk+0x64>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <_sbrk+0x64>)
 8004fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20004000 	.word	0x20004000
 8004fc8:	00000400 	.word	0x00000400
 8004fcc:	200006ec 	.word	0x200006ec
 8004fd0:	20001d50 	.word	0x20001d50

08004fd4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fe0:	480c      	ldr	r0, [pc, #48]	; (8005014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fe2:	490d      	ldr	r1, [pc, #52]	; (8005018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	; (800501c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fe8:	e002      	b.n	8004ff0 <LoopCopyDataInit>

08004fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fee:	3304      	adds	r3, #4

08004ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ff4:	d3f9      	bcc.n	8004fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ff6:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ff8:	4c0a      	ldr	r4, [pc, #40]	; (8005024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ffc:	e001      	b.n	8005002 <LoopFillZerobss>

08004ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005000:	3204      	adds	r2, #4

08005002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005004:	d3fb      	bcc.n	8004ffe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005006:	f7ff ffe5 	bl	8004fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800500a:	f00a fdb7 	bl	800fb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800500e:	f7fe fb7b 	bl	8003708 <main>
  bx lr
 8005012:	4770      	bx	lr
  ldr r0, =_sdata
 8005014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005018:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 800501c:	08015504 	.word	0x08015504
  ldr r2, =_sbss
 8005020:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8005024:	20001d50 	.word	0x20001d50

08005028 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005028:	e7fe      	b.n	8005028 <ADC1_IRQHandler>

0800502a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005038:	b672      	cpsid	i
}
 800503a:	bf00      	nop
 800503c:	f7ff f89e 	bl	800417c <Error_Handler>
 8005040:	e7fe      	b.n	8005040 <stm32_lock_init+0x16>
  lock->flag = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	705a      	strb	r2, [r3, #1]
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	60bb      	str	r3, [r7, #8]
  return(result);
 8005064:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800506e:	b672      	cpsid	i
}
 8005070:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005072:	f3bf 8f4f 	dsb	sy
}
 8005076:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005078:	f3bf 8f6f 	isb	sy
}
 800507c:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8005084:	b672      	cpsid	i
}
 8005086:	bf00      	nop
 8005088:	f7ff f878 	bl	800417c <Error_Handler>
 800508c:	e7fe      	b.n	800508c <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e008      	b.n	80050b0 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2bff      	cmp	r3, #255	; 0xff
 80050a4:	d104      	bne.n	80050b0 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80050a6:	b672      	cpsid	i
}
 80050a8:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80050aa:	f7ff f867 	bl	800417c <Error_Handler>
 80050ae:	e7fe      	b.n	80050ae <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	3301      	adds	r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	705a      	strb	r2, [r3, #1]
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80050d2:	b672      	cpsid	i
}
 80050d4:	bf00      	nop
 80050d6:	f7ff f851 	bl	800417c <Error_Handler>
 80050da:	e7fe      	b.n	80050da <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80050e4:	b672      	cpsid	i
}
 80050e6:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80050e8:	f7ff f848 	bl	800417c <Error_Handler>
 80050ec:	e7fe      	b.n	80050ec <stm32_lock_release+0x28>
  }
  lock->counter--;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <stm32_lock_release+0x4a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800510a:	b662      	cpsie	i
}
 800510c:	bf00      	nop
  {
    __enable_irq();
  }
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8005124:	f00a fd24 	bl	800fb70 <__errno>
 8005128:	4603      	mov	r3, r0
 800512a:	2216      	movs	r2, #22
 800512c:	601a      	str	r2, [r3, #0]
    return;
 800512e:	e015      	b.n	800515c <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005130:	2002      	movs	r0, #2
 8005132:	f00a fd47 	bl	800fbc4 <malloc>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff6d 	bl	800502a <stm32_lock_init>
    return;
 8005150:	e004      	b.n	800515c <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8005152:	b672      	cpsid	i
}
 8005154:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005156:	f7ff f811 	bl	800417c <Error_Handler>
 800515a:	e7fe      	b.n	800515a <__retarget_lock_init_recursive+0x44>
}
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005170:	b672      	cpsid	i
}
 8005172:	bf00      	nop
 8005174:	f7ff f802 	bl	800417c <Error_Handler>
 8005178:	e7fe      	b.n	8005178 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff6a 	bl	8005056 <stm32_lock_acquire>
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005198:	b672      	cpsid	i
}
 800519a:	bf00      	nop
 800519c:	f7fe ffee 	bl	800417c <Error_Handler>
 80051a0:	e7fe      	b.n	80051a0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff ff8d 	bl	80050c4 <stm32_lock_release>
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051bc:	2003      	movs	r0, #3
 80051be:	f000 fd11 	bl	8005be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051c2:	200f      	movs	r0, #15
 80051c4:	f7ff fd96 	bl	8004cf4 <HAL_InitTick>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	e001      	b.n	80051d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051d4:	f7ff fbce 	bl	8004974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051d8:	79fb      	ldrb	r3, [r7, #7]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_IncTick+0x1c>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_IncTick+0x20>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	4a03      	ldr	r2, [pc, #12]	; (8005200 <HAL_IncTick+0x1c>)
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000978 	.word	0x20000978
 8005204:	20000098 	.word	0x20000098

08005208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <HAL_GetTick+0x10>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	20000978 	.word	0x20000978

0800521c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005224:	f7ff fff0 	bl	8005208 <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d004      	beq.n	8005240 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_Delay+0x40>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005240:	bf00      	nop
 8005242:	f7ff ffe1 	bl	8005208 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	429a      	cmp	r2, r3
 8005250:	d8f7      	bhi.n	8005242 <HAL_Delay+0x26>
  {
  }
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000098 	.word	0x20000098

08005260 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	; 0x38
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e127      	b.n	80054d0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d115      	bne.n	80052ba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529c:	4b8e      	ldr	r3, [pc, #568]	; (80054d8 <HAL_ADC_Init+0x278>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a8d      	ldr	r2, [pc, #564]	; (80054d8 <HAL_ADC_Init+0x278>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	4b8b      	ldr	r3, [pc, #556]	; (80054d8 <HAL_ADC_Init+0x278>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fb8b 	bl	80049d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 80ff 	bne.w	80054c6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052d0:	f023 0302 	bic.w	r3, r3, #2
 80052d4:	f043 0202 	orr.w	r2, r3, #2
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80052dc:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <HAL_ADC_Init+0x27c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	497c      	ldr	r1, [pc, #496]	; (80054dc <HAL_ADC_Init+0x27c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80052f6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fe:	4619      	mov	r1, r3
 8005300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005304:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	fa93 f3a3 	rbit	r3, r3
 800530c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	b2db      	uxtb	r3, r3
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800531a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005320:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005328:	4619      	mov	r1, r3
 800532a:	2302      	movs	r3, #2
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	fa93 f3a3 	rbit	r3, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8005342:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005346:	4313      	orrs	r3, r2
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	2b10      	cmp	r3, #16
 8005350:	d007      	beq.n	8005362 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800535a:	4313      	orrs	r3, r2
 800535c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535e:	4313      	orrs	r3, r2
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d04f      	beq.n	8005410 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005376:	4313      	orrs	r3, r2
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005382:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6912      	ldr	r2, [r2, #16]
 8005388:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800538c:	d003      	beq.n	8005396 <HAL_ADC_Init+0x136>
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6912      	ldr	r2, [r2, #16]
 8005392:	2a01      	cmp	r2, #1
 8005394:	d102      	bne.n	800539c <HAL_ADC_Init+0x13c>
 8005396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800539a:	e000      	b.n	800539e <HAL_ADC_Init+0x13e>
 800539c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800539e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	4313      	orrs	r3, r2
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d125      	bne.n	80053fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d114      	bne.n	80053e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	3b01      	subs	r3, #1
 80053c0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80053c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	fa92 f2a2 	rbit	r2, r2
 80053cc:	617a      	str	r2, [r7, #20]
  return result;
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	fab2 f282 	clz	r2, r2
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	4093      	lsls	r3, r2
 80053d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053de:	4313      	orrs	r3, r2
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
 80053e2:	e00b      	b.n	80053fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <HAL_ADC_Init+0x280>)
 8005404:	4013      	ands	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540c:	430b      	orrs	r3, r1
 800540e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <HAL_ADC_Init+0x284>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005420:	430b      	orrs	r3, r1
 8005422:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542c:	d003      	beq.n	8005436 <HAL_ADC_Init+0x1d6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d119      	bne.n	800546a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800544a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	fa92 f2a2 	rbit	r2, r2
 8005452:	60fa      	str	r2, [r7, #12]
  return result;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	fab2 f282 	clz	r2, r2
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	fa03 f202 	lsl.w	r2, r3, r2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
 8005468:	e007      	b.n	800547a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_ADC_Init+0x288>)
 8005482:	4013      	ands	r3, r2
 8005484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005486:	429a      	cmp	r2, r3
 8005488:	d10b      	bne.n	80054a2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c
 80054a0:	e014      	b.n	80054cc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	f023 0312 	bic.w	r3, r3, #18
 80054aa:	f043 0210 	orr.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80054c4:	e002      	b.n	80054cc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80054cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3738      	adds	r7, #56	; 0x38
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40012700 	.word	0x40012700
 80054e0:	fcfc16ff 	.word	0xfcfc16ff
 80054e4:	c0fff18d 	.word	0xc0fff18d
 80054e8:	bf80fffe 	.word	0xbf80fffe

080054ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_ADC_Start_DMA+0x1e>
 8005506:	2302      	movs	r3, #2
 8005508:	e074      	b.n	80055f4 <HAL_ADC_Start_DMA+0x108>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f9e4 	bl	80058e0 <ADC_Enable>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d167      	bne.n	80055f2 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800554c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005560:	d106      	bne.n	8005570 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005566:	f023 0206 	bic.w	r2, r3, #6
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	651a      	str	r2, [r3, #80]	; 0x50
 800556e:	e002      	b.n	8005576 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_ADC_Start_DMA+0x110>)
 8005584:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	4a1d      	ldr	r2, [pc, #116]	; (8005600 <HAL_ADC_Start_DMA+0x114>)
 800558c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <HAL_ADC_Start_DMA+0x118>)
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800559e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3358      	adds	r3, #88	; 0x58
 80055ca:	4619      	mov	r1, r3
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f000 fb96 	bl	8005d00 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055f0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08005999 	.word	0x08005999
 8005600:	08005a41 	.word	0x08005a41
 8005604:	08005a5d 	.word	0x08005a5d

08005608 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
	...

08005640 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x20>
 800565c:	2302      	movs	r3, #2
 800565e:	e134      	b.n	80058ca <HAL_ADC_ConfigChannel+0x28a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b06      	cmp	r3, #6
 800566e:	d81c      	bhi.n	80056aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	3b05      	subs	r3, #5
 8005682:	221f      	movs	r2, #31
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	4019      	ands	r1, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	3b05      	subs	r3, #5
 800569c:	fa00 f203 	lsl.w	r2, r0, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40
 80056a8:	e07e      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d81c      	bhi.n	80056ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	3b23      	subs	r3, #35	; 0x23
 80056c4:	221f      	movs	r2, #31
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	4019      	ands	r1, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	3b23      	subs	r3, #35	; 0x23
 80056de:	fa00 f203 	lsl.w	r2, r0, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80056ea:	e05d      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b12      	cmp	r3, #18
 80056f2:	d81c      	bhi.n	800572e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	3b41      	subs	r3, #65	; 0x41
 8005706:	221f      	movs	r2, #31
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	4019      	ands	r1, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	3b41      	subs	r3, #65	; 0x41
 8005720:	fa00 f203 	lsl.w	r2, r0, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
 800572c:	e03c      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b18      	cmp	r3, #24
 8005734:	d81c      	bhi.n	8005770 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	3b5f      	subs	r3, #95	; 0x5f
 8005748:	221f      	movs	r2, #31
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	4019      	ands	r1, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	3b5f      	subs	r3, #95	; 0x5f
 8005762:	fa00 f203 	lsl.w	r2, r0, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	635a      	str	r2, [r3, #52]	; 0x34
 800576e:	e01b      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	3b7d      	subs	r3, #125	; 0x7d
 8005782:	221f      	movs	r2, #31
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	4019      	ands	r1, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	3b7d      	subs	r3, #125	; 0x7d
 800579c:	fa00 f203 	lsl.w	r2, r0, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b09      	cmp	r3, #9
 80057ae:	d81a      	bhi.n	80057e6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6959      	ldr	r1, [r3, #20]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4413      	add	r3, r2
 80057c0:	2207      	movs	r2, #7
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	4019      	ands	r1, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6898      	ldr	r0, [r3, #8]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	fa00 f203 	lsl.w	r2, r0, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	615a      	str	r2, [r3, #20]
 80057e4:	e042      	b.n	800586c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b13      	cmp	r3, #19
 80057ec:	d81c      	bhi.n	8005828 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6919      	ldr	r1, [r3, #16]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	3b1e      	subs	r3, #30
 8005800:	2207      	movs	r2, #7
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	4019      	ands	r1, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6898      	ldr	r0, [r3, #8]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	3b1e      	subs	r3, #30
 800581a:	fa00 f203 	lsl.w	r2, r0, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	e021      	b.n	800586c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b1a      	cmp	r3, #26
 800582e:	d81c      	bhi.n	800586a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	3b3c      	subs	r3, #60	; 0x3c
 8005842:	2207      	movs	r2, #7
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	4019      	ands	r1, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6898      	ldr	r0, [r3, #8]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	3b3c      	subs	r3, #60	; 0x3c
 800585c:	fa00 f203 	lsl.w	r2, r0, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	e000      	b.n	800586c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800586a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b10      	cmp	r3, #16
 8005872:	d003      	beq.n	800587c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005878:	2b11      	cmp	r3, #17
 800587a:	d121      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_ADC_ConfigChannel+0x294>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11b      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <HAL_ADC_ConfigChannel+0x294>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <HAL_ADC_ConfigChannel+0x294>)
 800588e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005892:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b10      	cmp	r3, #16
 800589a:	d111      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <HAL_ADC_ConfigChannel+0x298>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <HAL_ADC_ConfigChannel+0x29c>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	0c9a      	lsrs	r2, r3, #18
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80058b2:	e002      	b.n	80058ba <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f9      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	40012700 	.word	0x40012700
 80058d8:	20000090 	.word	0x20000090
 80058dc:	431bde83 	.word	0x431bde83

080058e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d043      	beq.n	8005986 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800590e:	4b20      	ldr	r3, [pc, #128]	; (8005990 <ADC_Enable+0xb0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a20      	ldr	r2, [pc, #128]	; (8005994 <ADC_Enable+0xb4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	0c9a      	lsrs	r2, r3, #18
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005922:	e002      	b.n	800592a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	3b01      	subs	r3, #1
 8005928:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f9      	bne.n	8005924 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005930:	f7ff fc6a 	bl	8005208 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005936:	e01f      	b.n	8005978 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005938:	f7ff fc66 	bl	8005208 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d918      	bls.n	8005978 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d011      	beq.n	8005978 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	f043 0210 	orr.w	r2, r3, #16
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e007      	b.n	8005988 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d1d8      	bne.n	8005938 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000090 	.word	0x20000090
 8005994:	431bde83 	.word	0x431bde83

08005998 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d13d      	bne.n	8005a2e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d12c      	bne.n	8005a26 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d127      	bne.n	8005a26 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0220 	bic.w	r2, r2, #32
 8005a00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fdee 	bl	8005608 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005a2c:	e004      	b.n	8005a38 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f7ff fde3 	bl	800561a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7a:	f043 0204 	orr.w	r2, r3, #4
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff fdd2 	bl	800562c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aac:	4013      	ands	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	60d3      	str	r3, [r2, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 0307 	and.w	r3, r3, #7
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db0b      	blt.n	8005b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	f003 021f 	and.w	r2, r3, #31
 8005b0c:	4906      	ldr	r1, [pc, #24]	; (8005b28 <__NVIC_EnableIRQ+0x34>)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2001      	movs	r0, #1
 8005b16:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	e000e100 	.word	0xe000e100

08005b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	6039      	str	r1, [r7, #0]
 8005b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	db0a      	blt.n	8005b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	490c      	ldr	r1, [pc, #48]	; (8005b78 <__NVIC_SetPriority+0x4c>)
 8005b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4a:	0112      	lsls	r2, r2, #4
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	440b      	add	r3, r1
 8005b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b54:	e00a      	b.n	8005b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4908      	ldr	r1, [pc, #32]	; (8005b7c <__NVIC_SetPriority+0x50>)
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	3b04      	subs	r3, #4
 8005b64:	0112      	lsls	r2, r2, #4
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	440b      	add	r3, r1
 8005b6a:	761a      	strb	r2, [r3, #24]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000e100 	.word	0xe000e100
 8005b7c:	e000ed00 	.word	0xe000ed00

08005b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f1c3 0307 	rsb	r3, r3, #7
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	bf28      	it	cs
 8005b9e:	2304      	movcs	r3, #4
 8005ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	2b06      	cmp	r3, #6
 8005ba8:	d902      	bls.n	8005bb0 <NVIC_EncodePriority+0x30>
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3b03      	subs	r3, #3
 8005bae:	e000      	b.n	8005bb2 <NVIC_EncodePriority+0x32>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	43d9      	mvns	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd8:	4313      	orrs	r3, r2
         );
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3724      	adds	r7, #36	; 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff4f 	bl	8005a90 <__NVIC_SetPriorityGrouping>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	4603      	mov	r3, r0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c0c:	f7ff ff64 	bl	8005ad8 <__NVIC_GetPriorityGrouping>
 8005c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f7ff ffb2 	bl	8005b80 <NVIC_EncodePriority>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff81 	bl	8005b2c <__NVIC_SetPriority>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff57 	bl	8005af4 <__NVIC_EnableIRQ>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e043      	b.n	8005cea <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <HAL_DMA_Init+0xa4>)
 8005c6a:	4413      	add	r3, r2
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <HAL_DMA_Init+0xa8>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	009a      	lsls	r2, r3, #2
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <HAL_DMA_Init+0xac>)
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	bffd9ff8 	.word	0xbffd9ff8
 8005cf8:	cccccccd 	.word	0xcccccccd
 8005cfc:	40026000 	.word	0x40026000

08005d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_DMA_Start_IT+0x20>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e04b      	b.n	8005db8 <HAL_DMA_Start_IT+0xb8>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d13a      	bne.n	8005daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f95e 	bl	800601a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 020e 	orr.w	r2, r2, #14
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	e00f      	b.n	8005d98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 020a 	orr.w	r2, r2, #10
 8005d96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e005      	b.n	8005db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
 8005db4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d008      	beq.n	8005dea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e022      	b.n	8005e30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 020e 	bic.w	r2, r2, #14
 8005df8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 021c 	and.w	r2, r3, #28
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	2101      	movs	r1, #1
 8005e18:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d005      	beq.n	8005e5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2204      	movs	r2, #4
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e029      	b.n	8005eb2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 020e 	bic.w	r2, r2, #14
 8005e6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f003 021c 	and.w	r2, r3, #28
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
    }
  }
  return status;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f003 031c 	and.w	r3, r3, #28
 8005edc:	2204      	movs	r2, #4
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d026      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x7a>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d021      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0204 	bic.w	r2, r2, #4
 8005f0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	f003 021c 	and.w	r2, r3, #28
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1c:	2104      	movs	r1, #4
 8005f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f22:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d071      	beq.n	8006010 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005f34:	e06c      	b.n	8006010 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 031c 	and.w	r3, r3, #28
 8005f3e:	2202      	movs	r2, #2
 8005f40:	409a      	lsls	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02e      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xec>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d029      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 020a 	bic.w	r2, r2, #10
 8005f70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f003 021c 	and.w	r2, r3, #28
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	2102      	movs	r1, #2
 8005f88:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d038      	beq.n	8006010 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005fa6:	e033      	b.n	8006010 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f003 031c 	and.w	r3, r3, #28
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02a      	beq.n	8006012 <HAL_DMA_IRQHandler+0x156>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d025      	beq.n	8006012 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 020e 	bic.w	r2, r2, #14
 8005fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 021c 	and.w	r2, r3, #28
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006010:	bf00      	nop
 8006012:	bf00      	nop
}
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f003 021c 	and.w	r2, r3, #28
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f202 	lsl.w	r2, r1, r2
 800603a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b10      	cmp	r3, #16
 800604a:	d108      	bne.n	800605e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800605c:	e007      	b.n	800606e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	60da      	str	r2, [r3, #12]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800608e:	e154      	b.n	800633a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	2101      	movs	r1, #1
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	4013      	ands	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8146 	beq.w	8006334 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d005      	beq.n	80060c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d130      	bne.n	8006122 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	2203      	movs	r2, #3
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4013      	ands	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80060f6:	2201      	movs	r2, #1
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	43db      	mvns	r3, r3
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4013      	ands	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0201 	and.w	r2, r3, #1
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d017      	beq.n	800615e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	2203      	movs	r2, #3
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4013      	ands	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d123      	bne.n	80061b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	08da      	lsrs	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3208      	adds	r2, #8
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	220f      	movs	r2, #15
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43db      	mvns	r3, r3
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4013      	ands	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	08da      	lsrs	r2, r3, #3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3208      	adds	r2, #8
 80061ac:	6939      	ldr	r1, [r7, #16]
 80061ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	2203      	movs	r2, #3
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4013      	ands	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 0203 	and.w	r2, r3, #3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80a0 	beq.w	8006334 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061f4:	4b58      	ldr	r3, [pc, #352]	; (8006358 <HAL_GPIO_Init+0x2e0>)
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	4a57      	ldr	r2, [pc, #348]	; (8006358 <HAL_GPIO_Init+0x2e0>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6213      	str	r3, [r2, #32]
 8006200:	4b55      	ldr	r3, [pc, #340]	; (8006358 <HAL_GPIO_Init+0x2e0>)
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800620c:	4a53      	ldr	r2, [pc, #332]	; (800635c <HAL_GPIO_Init+0x2e4>)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	089b      	lsrs	r3, r3, #2
 8006212:	3302      	adds	r3, #2
 8006214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	220f      	movs	r2, #15
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	43db      	mvns	r3, r3
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4013      	ands	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a4b      	ldr	r2, [pc, #300]	; (8006360 <HAL_GPIO_Init+0x2e8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d019      	beq.n	800626c <HAL_GPIO_Init+0x1f4>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a4a      	ldr	r2, [pc, #296]	; (8006364 <HAL_GPIO_Init+0x2ec>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_GPIO_Init+0x1f0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a49      	ldr	r2, [pc, #292]	; (8006368 <HAL_GPIO_Init+0x2f0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00d      	beq.n	8006264 <HAL_GPIO_Init+0x1ec>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a48      	ldr	r2, [pc, #288]	; (800636c <HAL_GPIO_Init+0x2f4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <HAL_GPIO_Init+0x1e8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a47      	ldr	r2, [pc, #284]	; (8006370 <HAL_GPIO_Init+0x2f8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d101      	bne.n	800625c <HAL_GPIO_Init+0x1e4>
 8006258:	2304      	movs	r3, #4
 800625a:	e008      	b.n	800626e <HAL_GPIO_Init+0x1f6>
 800625c:	2305      	movs	r3, #5
 800625e:	e006      	b.n	800626e <HAL_GPIO_Init+0x1f6>
 8006260:	2303      	movs	r3, #3
 8006262:	e004      	b.n	800626e <HAL_GPIO_Init+0x1f6>
 8006264:	2302      	movs	r3, #2
 8006266:	e002      	b.n	800626e <HAL_GPIO_Init+0x1f6>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <HAL_GPIO_Init+0x1f6>
 800626c:	2300      	movs	r3, #0
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	f002 0203 	and.w	r2, r2, #3
 8006274:	0092      	lsls	r2, r2, #2
 8006276:	4093      	lsls	r3, r2
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800627e:	4937      	ldr	r1, [pc, #220]	; (800635c <HAL_GPIO_Init+0x2e4>)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800628c:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	43db      	mvns	r3, r3
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4013      	ands	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80062b0:	4a30      	ldr	r2, [pc, #192]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062b6:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	43db      	mvns	r3, r3
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4013      	ands	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80062da:	4a26      	ldr	r2, [pc, #152]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062e0:	4b24      	ldr	r3, [pc, #144]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4013      	ands	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	43db      	mvns	r3, r3
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4013      	ands	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800632e:	4a11      	ldr	r2, [pc, #68]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3301      	adds	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	f47f aea3 	bne.w	8006090 <HAL_GPIO_Init+0x18>
  }
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40023800 	.word	0x40023800
 800635c:	40010000 	.word	0x40010000
 8006360:	40020000 	.word	0x40020000
 8006364:	40020400 	.word	0x40020400
 8006368:	40020800 	.word	0x40020800
 800636c:	40020c00 	.word	0x40020c00
 8006370:	40021000 	.word	0x40021000
 8006374:	40010400 	.word	0x40010400

08006378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	887b      	ldrh	r3, [r7, #2]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e001      	b.n	800639a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	807b      	strh	r3, [r7, #2]
 80063b2:	4613      	mov	r3, r2
 80063b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063b6:	787b      	ldrb	r3, [r7, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063bc:	887a      	ldrh	r2, [r7, #2]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80063c2:	e003      	b.n	80063cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80063c4:	887b      	ldrh	r3, [r7, #2]
 80063c6:	041a      	lsls	r2, r3, #16
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	619a      	str	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063e8:	887a      	ldrh	r2, [r7, #2]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4013      	ands	r3, r2
 80063ee:	041a      	lsls	r2, r3, #16
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	43d9      	mvns	r1, r3
 80063f4:	887b      	ldrh	r3, [r7, #2]
 80063f6:	400b      	ands	r3, r1
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	619a      	str	r2, [r3, #24]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e12b      	b.n	8006672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fe fb54 	bl	8004adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800645a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800646a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800646c:	f003 f8ca 	bl	8009604 <HAL_RCC_GetPCLK1Freq>
 8006470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4a81      	ldr	r2, [pc, #516]	; (800667c <HAL_I2C_Init+0x274>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d807      	bhi.n	800648c <HAL_I2C_Init+0x84>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a80      	ldr	r2, [pc, #512]	; (8006680 <HAL_I2C_Init+0x278>)
 8006480:	4293      	cmp	r3, r2
 8006482:	bf94      	ite	ls
 8006484:	2301      	movls	r3, #1
 8006486:	2300      	movhi	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e006      	b.n	800649a <HAL_I2C_Init+0x92>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a7d      	ldr	r2, [pc, #500]	; (8006684 <HAL_I2C_Init+0x27c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	bf94      	ite	ls
 8006494:	2301      	movls	r3, #1
 8006496:	2300      	movhi	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e0e7      	b.n	8006672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a78      	ldr	r2, [pc, #480]	; (8006688 <HAL_I2C_Init+0x280>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0c9b      	lsrs	r3, r3, #18
 80064ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a6a      	ldr	r2, [pc, #424]	; (800667c <HAL_I2C_Init+0x274>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d802      	bhi.n	80064dc <HAL_I2C_Init+0xd4>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3301      	adds	r3, #1
 80064da:	e009      	b.n	80064f0 <HAL_I2C_Init+0xe8>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	4a69      	ldr	r2, [pc, #420]	; (800668c <HAL_I2C_Init+0x284>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	099b      	lsrs	r3, r3, #6
 80064ee:	3301      	adds	r3, #1
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	495c      	ldr	r1, [pc, #368]	; (800667c <HAL_I2C_Init+0x274>)
 800650c:	428b      	cmp	r3, r1
 800650e:	d819      	bhi.n	8006544 <HAL_I2C_Init+0x13c>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	1e59      	subs	r1, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	fbb1 f3f3 	udiv	r3, r1, r3
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006524:	400b      	ands	r3, r1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_I2C_Init+0x138>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1e59      	subs	r1, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	fbb1 f3f3 	udiv	r3, r1, r3
 8006538:	3301      	adds	r3, #1
 800653a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653e:	e051      	b.n	80065e4 <HAL_I2C_Init+0x1dc>
 8006540:	2304      	movs	r3, #4
 8006542:	e04f      	b.n	80065e4 <HAL_I2C_Init+0x1dc>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d111      	bne.n	8006570 <HAL_I2C_Init+0x168>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	1e58      	subs	r0, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	440b      	add	r3, r1
 800655a:	fbb0 f3f3 	udiv	r3, r0, r3
 800655e:	3301      	adds	r3, #1
 8006560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006564:	2b00      	cmp	r3, #0
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e012      	b.n	8006596 <HAL_I2C_Init+0x18e>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	1e58      	subs	r0, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6859      	ldr	r1, [r3, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	0099      	lsls	r1, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	fbb0 f3f3 	udiv	r3, r0, r3
 8006586:	3301      	adds	r3, #1
 8006588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800658c:	2b00      	cmp	r3, #0
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_I2C_Init+0x196>
 800659a:	2301      	movs	r3, #1
 800659c:	e022      	b.n	80065e4 <HAL_I2C_Init+0x1dc>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10e      	bne.n	80065c4 <HAL_I2C_Init+0x1bc>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1e58      	subs	r0, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	440b      	add	r3, r1
 80065b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b8:	3301      	adds	r3, #1
 80065ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c2:	e00f      	b.n	80065e4 <HAL_I2C_Init+0x1dc>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1e58      	subs	r0, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6859      	ldr	r1, [r3, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	0099      	lsls	r1, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065da:	3301      	adds	r3, #1
 80065dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	6809      	ldr	r1, [r1, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6911      	ldr	r1, [r2, #16]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68d2      	ldr	r2, [r2, #12]
 800661e:	4311      	orrs	r1, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	430b      	orrs	r3, r1
 8006626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	000186a0 	.word	0x000186a0
 8006680:	001e847f 	.word	0x001e847f
 8006684:	003d08ff 	.word	0x003d08ff
 8006688:	431bde83 	.word	0x431bde83
 800668c:	10624dd3 	.word	0x10624dd3

08006690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	461a      	mov	r2, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	817b      	strh	r3, [r7, #10]
 80066a2:	460b      	mov	r3, r1
 80066a4:	813b      	strh	r3, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066aa:	f7fe fdad 	bl	8005208 <HAL_GetTick>
 80066ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	f040 80d9 	bne.w	8006870 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	2319      	movs	r3, #25
 80066c4:	2201      	movs	r2, #1
 80066c6:	496d      	ldr	r1, [pc, #436]	; (800687c <HAL_I2C_Mem_Write+0x1ec>)
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fc7f 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0cc      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_I2C_Mem_Write+0x56>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0c5      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d007      	beq.n	800670c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800671a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2221      	movs	r2, #33	; 0x21
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2240      	movs	r2, #64	; 0x40
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800673c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a4d      	ldr	r2, [pc, #308]	; (8006880 <HAL_I2C_Mem_Write+0x1f0>)
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800674e:	88f8      	ldrh	r0, [r7, #6]
 8006750:	893a      	ldrh	r2, [r7, #8]
 8006752:	8979      	ldrh	r1, [r7, #10]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4603      	mov	r3, r0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fab6 	bl	8006cd0 <I2C_RequestMemoryWrite>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d052      	beq.n	8006810 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e081      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fd00 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	2b04      	cmp	r3, #4
 8006784:	d107      	bne.n	8006796 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e06b      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d11b      	bne.n	8006810 <HAL_I2C_Mem_Write+0x180>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d017      	beq.n	8006810 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1aa      	bne.n	800676e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fcec 	bl	80071fa <I2C_WaitOnBTFFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00d      	beq.n	8006844 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	2b04      	cmp	r3, #4
 800682e:	d107      	bne.n	8006840 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e016      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	e000      	b.n	8006872 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006870:	2302      	movs	r3, #2
  }
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	00100002 	.word	0x00100002
 8006880:	ffff0000 	.word	0xffff0000

08006884 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08c      	sub	sp, #48	; 0x30
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	4608      	mov	r0, r1
 800688e:	4611      	mov	r1, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4603      	mov	r3, r0
 8006894:	817b      	strh	r3, [r7, #10]
 8006896:	460b      	mov	r3, r1
 8006898:	813b      	strh	r3, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800689e:	f7fe fcb3 	bl	8005208 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	f040 8208 	bne.w	8006cc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2319      	movs	r3, #25
 80068b8:	2201      	movs	r2, #1
 80068ba:	497b      	ldr	r1, [pc, #492]	; (8006aa8 <HAL_I2C_Mem_Read+0x224>)
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fb85 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
 80068ca:	e1fb      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_I2C_Mem_Read+0x56>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e1f4      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d007      	beq.n	8006900 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800690e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2222      	movs	r2, #34	; 0x22
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a5b      	ldr	r2, [pc, #364]	; (8006aac <HAL_I2C_Mem_Read+0x228>)
 8006940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006942:	88f8      	ldrh	r0, [r7, #6]
 8006944:	893a      	ldrh	r2, [r7, #8]
 8006946:	8979      	ldrh	r1, [r7, #10]
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	9301      	str	r3, [sp, #4]
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4603      	mov	r3, r0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fa52 	bl	8006dfc <I2C_RequestMemoryRead>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e1b0      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d113      	bne.n	8006992 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696a:	2300      	movs	r3, #0
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e184      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	2b01      	cmp	r3, #1
 8006998:	d11b      	bne.n	80069d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e164      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d11b      	bne.n	8006a12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	e144      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a28:	e138      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	f200 80f1 	bhi.w	8006c16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d123      	bne.n	8006a84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fc1b 	bl	800727c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e139      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a82:	e10b      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d14e      	bne.n	8006b2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	2200      	movs	r2, #0
 8006a94:	4906      	ldr	r1, [pc, #24]	; (8006ab0 <HAL_I2C_Mem_Read+0x22c>)
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fa98 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e10e      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
 8006aa6:	bf00      	nop
 8006aa8:	00100002 	.word	0x00100002
 8006aac:	ffff0000 	.word	0xffff0000
 8006ab0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b28:	e0b8      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	2200      	movs	r2, #0
 8006b32:	4966      	ldr	r1, [pc, #408]	; (8006ccc <HAL_I2C_Mem_Read+0x448>)
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fa49 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0bf      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	494f      	ldr	r1, [pc, #316]	; (8006ccc <HAL_I2C_Mem_Read+0x448>)
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fa1b 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e091      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c14:	e042      	b.n	8006c9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fb2e 	bl	800727c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e04c      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d118      	bne.n	8006c9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f aec2 	bne.w	8006a2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e000      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3728      	adds	r7, #40	; 0x28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	00010004 	.word	0x00010004

08006cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	817b      	strh	r3, [r7, #10]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	813b      	strh	r3, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f960 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d20:	d103      	bne.n	8006d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e05f      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d2e:	897b      	ldrh	r3, [r7, #10]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	492d      	ldr	r1, [pc, #180]	; (8006df8 <I2C_RequestMemoryWrite+0x128>)
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f998 	bl	800707a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e04c      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	6a39      	ldr	r1, [r7, #32]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fa02 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d107      	bne.n	8006d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e02b      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d105      	bne.n	8006da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d9c:	893b      	ldrh	r3, [r7, #8]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	611a      	str	r2, [r3, #16]
 8006da6:	e021      	b.n	8006dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006da8:	893b      	ldrh	r3, [r7, #8]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6a39      	ldr	r1, [r7, #32]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f9dc 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d107      	bne.n	8006dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e005      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	00010002 	.word	0x00010002

08006dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	817b      	strh	r3, [r7, #10]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	813b      	strh	r3, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f8c2 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00d      	beq.n	8006e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5c:	d103      	bne.n	8006e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e0aa      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	4952      	ldr	r1, [pc, #328]	; (8006fc8 <I2C_RequestMemoryRead+0x1cc>)
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f8fa 	bl	800707a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e097      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea8:	6a39      	ldr	r1, [r7, #32]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f964 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d107      	bne.n	8006ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e076      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d105      	bne.n	8006ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ed8:	893b      	ldrh	r3, [r7, #8]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	611a      	str	r2, [r3, #16]
 8006ee2:	e021      	b.n	8006f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ee4:	893b      	ldrh	r3, [r7, #8]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f93e 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d107      	bne.n	8006f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e050      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f1e:	893b      	ldrh	r3, [r7, #8]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	6a39      	ldr	r1, [r7, #32]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f923 	bl	8007178 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d107      	bne.n	8006f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e035      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f82b 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d103      	bne.n	8006f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e013      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f98:	897b      	ldrh	r3, [r7, #10]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	6a3a      	ldr	r2, [r7, #32]
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <I2C_RequestMemoryRead+0x1cc>)
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f863 	bl	800707a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	00010002 	.word	0x00010002

08006fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fdc:	e025      	b.n	800702a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe4:	d021      	beq.n	800702a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fe f90f 	bl	8005208 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d116      	bne.n	800702a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e023      	b.n	8007072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d10d      	bne.n	8007050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	43da      	mvns	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4013      	ands	r3, r2
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf0c      	ite	eq
 8007046:	2301      	moveq	r3, #1
 8007048:	2300      	movne	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	e00c      	b.n	800706a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	43da      	mvns	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d0b6      	beq.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007088:	e051      	b.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d123      	bne.n	80070e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f043 0204 	orr.w	r2, r3, #4
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e046      	b.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e8:	d021      	beq.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ea:	f7fe f88d 	bl	8005208 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d302      	bcc.n	8007100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d116      	bne.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f043 0220 	orr.w	r2, r3, #32
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e020      	b.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d10c      	bne.n	8007152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	43da      	mvns	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4013      	ands	r3, r2
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf14      	ite	ne
 800714a:	2301      	movne	r3, #1
 800714c:	2300      	moveq	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	e00b      	b.n	800716a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	43da      	mvns	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d18d      	bne.n	800708a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007184:	e02d      	b.n	80071e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f8ce 	bl	8007328 <I2C_IsAcknowledgeFailed>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e02d      	b.n	80071f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d021      	beq.n	80071e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719e:	f7fe f833 	bl	8005208 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d302      	bcc.n	80071b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d116      	bne.n	80071e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f043 0220 	orr.w	r2, r3, #32
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e007      	b.n	80071f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d1ca      	bne.n	8007186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007206:	e02d      	b.n	8007264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f88d 	bl	8007328 <I2C_IsAcknowledgeFailed>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e02d      	b.n	8007274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800721e:	d021      	beq.n	8007264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007220:	f7fd fff2 	bl	8005208 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	429a      	cmp	r2, r3
 800722e:	d302      	bcc.n	8007236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d116      	bne.n	8007264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e007      	b.n	8007274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b04      	cmp	r3, #4
 8007270:	d1ca      	bne.n	8007208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007288:	e042      	b.n	8007310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b10      	cmp	r3, #16
 8007296:	d119      	bne.n	80072cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0210 	mvn.w	r2, #16
 80072a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e029      	b.n	8007320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072cc:	f7fd ff9c 	bl	8005208 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d302      	bcc.n	80072e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d116      	bne.n	8007310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e007      	b.n	8007320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d1b5      	bne.n	800728a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733e:	d11b      	bne.n	8007378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	f043 0204 	orr.w	r2, r3, #4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007386:	b08b      	sub	sp, #44	; 0x2c
 8007388:	af06      	add	r7, sp, #24
 800738a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e0d0      	b.n	8007538 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f007 fafc 	bl	800e9a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2203      	movs	r2, #3
 80073b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f003 fa81 	bl	800a8c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
 80073c6:	e04c      	b.n	8007462 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	440b      	add	r3, r1
 80073d8:	3301      	adds	r3, #1
 80073da:	2201      	movs	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	440b      	add	r3, r1
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	b298      	uxth	r0, r3
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	440b      	add	r3, r1
 8007404:	3336      	adds	r3, #54	; 0x36
 8007406:	4602      	mov	r2, r0
 8007408:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	440b      	add	r3, r1
 800741a:	3303      	adds	r3, #3
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007420:	7bfa      	ldrb	r2, [r7, #15]
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	440b      	add	r3, r1
 800742e:	3338      	adds	r3, #56	; 0x38
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	440b      	add	r3, r1
 8007442:	333c      	adds	r3, #60	; 0x3c
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	3340      	adds	r3, #64	; 0x40
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	3301      	adds	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]
 8007462:	7bfa      	ldrb	r2, [r7, #15]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d3ad      	bcc.n	80073c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	e044      	b.n	80074fc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007488:	7bfa      	ldrb	r2, [r7, #15]
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	440b      	add	r3, r1
 8007496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800749a:	7bfa      	ldrb	r2, [r7, #15]
 800749c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	440b      	add	r3, r1
 80074ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074b4:	7bfa      	ldrb	r2, [r7, #15]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	440b      	add	r3, r1
 80074c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074ca:	7bfa      	ldrb	r2, [r7, #15]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	440b      	add	r3, r1
 80074d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	440b      	add	r3, r1
 80074ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3301      	adds	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d3b5      	bcc.n	8007472 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	687e      	ldr	r6, [r7, #4]
 800750e:	466d      	mov	r5, sp
 8007510:	f106 0410 	add.w	r4, r6, #16
 8007514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	1d33      	adds	r3, r6, #4
 800751e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007520:	6838      	ldr	r0, [r7, #0]
 8007522:	f003 f9e9 	bl	800a8f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_PCD_Start+0x16>
 8007552:	2302      	movs	r3, #2
 8007554:	e016      	b.n	8007584 <HAL_PCD_Start+0x44>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f003 f998 	bl	800a898 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007568:	2101      	movs	r1, #1
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f007 f9fe 	bl	800e96c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f005 fb3c 	bl	800cbf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f005 fb34 	bl	800cc06 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a8:	d102      	bne.n	80075b0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 faf5 	bl	8007b9a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f005 fb26 	bl	800cc06 <USB_ReadInterrupts>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c4:	d112      	bne.n	80075ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d8:	b292      	uxth	r2, r2
 80075da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f007 fa5d 	bl	800ea9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8c7 	bl	800777a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f005 fb08 	bl	800cc06 <USB_ReadInterrupts>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007600:	d10b      	bne.n	800761a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007614:	b292      	uxth	r2, r2
 8007616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f005 faf1 	bl	800cc06 <USB_ReadInterrupts>
 8007624:	4603      	mov	r3, r0
 8007626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800762a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762e:	d10b      	bne.n	8007648 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007642:	b292      	uxth	r2, r2
 8007644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f005 fada 	bl	800cc06 <USB_ReadInterrupts>
 8007652:	4603      	mov	r3, r0
 8007654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765c:	d126      	bne.n	80076ac <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0204 	bic.w	r2, r2, #4
 8007670:	b292      	uxth	r2, r2
 8007672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0208 	bic.w	r2, r2, #8
 8007688:	b292      	uxth	r2, r2
 800768a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f007 fa3e 	bl	800eb10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076a6:	b292      	uxth	r2, r2
 80076a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f005 faa8 	bl	800cc06 <USB_ReadInterrupts>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c0:	d126      	bne.n	8007710 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0208 	orr.w	r2, r2, #8
 80076d4:	b292      	uxth	r2, r2
 80076d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ec:	b292      	uxth	r2, r2
 80076ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0204 	orr.w	r2, r2, #4
 8007704:	b292      	uxth	r2, r2
 8007706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f007 f9e6 	bl	800eadc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f005 fa76 	bl	800cc06 <USB_ReadInterrupts>
 800771a:	4603      	mov	r3, r0
 800771c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d10e      	bne.n	8007744 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007738:	b292      	uxth	r2, r2
 800773a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f007 f99f 	bl	800ea82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f005 fa5c 	bl	800cc06 <USB_ReadInterrupts>
 800774e:	4603      	mov	r3, r0
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007758:	d10b      	bne.n	8007772 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800776c:	b292      	uxth	r2, r2
 800776e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_PCD_SetAddress+0x1a>
 8007790:	2302      	movs	r3, #2
 8007792:	e013      	b.n	80077bc <HAL_PCD_SetAddress+0x42>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	4611      	mov	r1, r2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f005 fa0d 	bl	800cbcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	70fb      	strb	r3, [r7, #3]
 80077d6:	460b      	mov	r3, r1
 80077d8:	803b      	strh	r3, [r7, #0]
 80077da:	4613      	mov	r3, r2
 80077dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da0e      	bge.n	8007808 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	705a      	strb	r2, [r3, #1]
 8007806:	e00e      	b.n	8007826 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f003 0207 	and.w	r2, r3, #7
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	b2da      	uxtb	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007832:	883a      	ldrh	r2, [r7, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	78ba      	ldrb	r2, [r7, #2]
 800783c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007850:	78bb      	ldrb	r3, [r7, #2]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d102      	bne.n	800785c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_PCD_EP_Open+0xa6>
 8007866:	2302      	movs	r3, #2
 8007868:	e00e      	b.n	8007888 <HAL_PCD_EP_Open+0xc4>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	4618      	mov	r0, r3
 800787a:	f003 f85d 	bl	800a938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007886:	7afb      	ldrb	r3, [r7, #11]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800789c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da0e      	bge.n	80078c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	705a      	strb	r2, [r3, #1]
 80078c0:	e00e      	b.n	80078e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	f003 0207 	and.w	r2, r3, #7
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_PCD_EP_Close+0x6a>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e00e      	b.n	8007918 <HAL_PCD_EP_Close+0x88>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	4618      	mov	r0, r3
 800790a:	f003 fb7f 	bl	800b00c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	460b      	mov	r3, r1
 800792e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	f003 0207 	and.w	r2, r3, #7
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2200      	movs	r2, #0
 8007958:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	b2da      	uxtb	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6979      	ldr	r1, [r7, #20]
 800797c:	4618      	mov	r0, r3
 800797e:	f003 fd31 	bl	800b3e4 <USB_EPStartXfer>
 8007982:	e005      	b.n	8007990 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6979      	ldr	r1, [r7, #20]
 800798a:	4618      	mov	r0, r3
 800798c:	f003 fd2a 	bl	800b3e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	f003 0207 	and.w	r2, r3, #7
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	440b      	add	r3, r1
 80079b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80079bc:	681b      	ldr	r3, [r3, #0]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bc80      	pop	{r7}
 80079c6:	4770      	bx	lr

080079c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	460b      	mov	r3, r1
 80079d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2201      	movs	r2, #1
 8007a12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f003 fcd7 	bl	800b3e4 <USB_EPStartXfer>
 8007a36:	e005      	b.n	8007a44 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6979      	ldr	r1, [r7, #20]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f003 fcd0 	bl	800b3e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	f003 0207 	and.w	r2, r3, #7
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d901      	bls.n	8007a6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e03e      	b.n	8007aea <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0e      	bge.n	8007a92 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	705a      	strb	r2, [r3, #1]
 8007a90:	e00c      	b.n	8007aac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_PCD_EP_SetStall+0x7e>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e00e      	b.n	8007aea <HAL_PCD_EP_SetStall+0x9c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f004 ff79 	bl	800c9d2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d901      	bls.n	8007b10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e040      	b.n	8007b92 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da0e      	bge.n	8007b36 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	705a      	strb	r2, [r3, #1]
 8007b34:	e00e      	b.n	8007b54 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	f003 0207 	and.w	r2, r3, #7
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_PCD_EP_ClrStall+0x82>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e00e      	b.n	8007b92 <HAL_PCD_EP_ClrStall+0xa0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68f9      	ldr	r1, [r7, #12]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f004 ff75 	bl	800ca72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b08e      	sub	sp, #56	; 0x38
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ba2:	e2ec      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8007bba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f040 8161 	bne.w	8007e86 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007bc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d152      	bne.n	8007c74 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bde:	81fb      	strh	r3, [r7, #14]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3328      	adds	r3, #40	; 0x28
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007c32:	2100      	movs	r1, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f006 ff0a 	bl	800ea4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 829b 	beq.w	800817e <PCD_EP_ISR_Handler+0x5e4>
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 8296 	bne.w	800817e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b292      	uxth	r2, r2
 8007c66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007c72:	e284      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007c84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d034      	beq.n	8007cf8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3306      	adds	r3, #6
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f004 ffee 	bl	800ccae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007cde:	4013      	ands	r3, r2
 8007ce0:	823b      	strh	r3, [r7, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	8a3a      	ldrh	r2, [r7, #16]
 8007ce8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cec:	b292      	uxth	r2, r2
 8007cee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f006 fe7f 	bl	800e9f4 <HAL_PCD_SetupStageCallback>
 8007cf6:	e242      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007cf8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f280 823e 	bge.w	800817e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007d0e:	4013      	ands	r3, r2
 8007d10:	83bb      	strh	r3, [r7, #28]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	8bba      	ldrh	r2, [r7, #28]
 8007d18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	3306      	adds	r3, #6
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d019      	beq.n	8007d88 <PCD_EP_ISR_Handler+0x1ee>
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d015      	beq.n	8007d88 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	6959      	ldr	r1, [r3, #20]
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f004 ff9e 	bl	800ccae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	695a      	ldr	r2, [r3, #20]
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	441a      	add	r2, r3
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f006 fe48 	bl	800ea18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 81f2 	bne.w	800817e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	4413      	add	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d112      	bne.n	8007de8 <PCD_EP_ISR_Handler+0x24e>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e02f      	b.n	8007e48 <PCD_EP_ISR_Handler+0x2ae>
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b3e      	cmp	r3, #62	; 0x3e
 8007dee:	d813      	bhi.n	8007e18 <PCD_EP_ISR_Handler+0x27e>
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <PCD_EP_ISR_Handler+0x270>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	3301      	adds	r3, #1
 8007e08:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	029b      	lsls	r3, r3, #10
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e017      	b.n	8007e48 <PCD_EP_ISR_Handler+0x2ae>
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <PCD_EP_ISR_Handler+0x298>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e58:	827b      	strh	r3, [r7, #18]
 8007e5a:	8a7b      	ldrh	r3, [r7, #18]
 8007e5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e60:	827b      	strh	r3, [r7, #18]
 8007e62:	8a7b      	ldrh	r3, [r7, #18]
 8007e64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e68:	827b      	strh	r3, [r7, #18]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	8a7b      	ldrh	r3, [r7, #18]
 8007e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
 8007e84:	e17b      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e98:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f280 80ea 	bge.w	8008076 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007eb8:	4013      	ands	r3, r2
 8007eba:	853b      	strh	r3, [r7, #40]	; 0x28
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007ed4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	7b1b      	ldrb	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d122      	bne.n	8007f38 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	4413      	add	r3, r2
 8007f06:	3306      	adds	r3, #6
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8007f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8087 	beq.w	8008032 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	6959      	ldr	r1, [r3, #20]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	88da      	ldrh	r2, [r3, #6]
 8007f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f32:	f004 febc 	bl	800ccae <USB_ReadPMA>
 8007f36:	e07c      	b.n	8008032 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	78db      	ldrb	r3, [r3, #3]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d108      	bne.n	8007f52 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f42:	461a      	mov	r2, r3
 8007f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f927 	bl	800819a <HAL_PCD_EP_DB_Receive>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007f50:	e06f      	b.n	8008032 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	441a      	add	r2, r3
 8007f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d021      	beq.n	8007ff0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007fd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02a      	beq.n	8008032 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	6959      	ldr	r1, [r3, #20]
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	891a      	ldrh	r2, [r3, #8]
 8007fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fea:	f004 fe60 	bl	800ccae <USB_ReadPMA>
 8007fee:	e020      	b.n	8008032 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	4413      	add	r3, r2
 8008004:	3306      	adds	r3, #6
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008018:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800801a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	6959      	ldr	r1, [r3, #20]
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	895a      	ldrh	r2, [r3, #10]
 800802c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800802e:	f004 fe3e 	bl	800ccae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	69da      	ldr	r2, [r3, #28]
 8008036:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008038:	441a      	add	r2, r3
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	695a      	ldr	r2, [r3, #20]
 8008042:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008044:	441a      	add	r2, r3
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <PCD_EP_ISR_Handler+0x4c2>
 8008052:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d206      	bcs.n	800806a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f006 fcd8 	bl	800ea18 <HAL_PCD_DataOutStageCallback>
 8008068:	e005      	b.n	8008076 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008070:	4618      	mov	r0, r3
 8008072:	f003 f9b7 	bl	800b3e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807c:	2b00      	cmp	r3, #0
 800807e:	d07e      	beq.n	800817e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8008080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	843b      	strh	r3, [r7, #32]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	8c3b      	ldrh	r3, [r7, #32]
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	78db      	ldrb	r3, [r3, #3]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d00c      	beq.n	80080ee <PCD_EP_ISR_Handler+0x554>
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	78db      	ldrb	r3, [r3, #3]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d146      	bne.n	8008172 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80080e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d141      	bne.n	8008172 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	3302      	adds	r3, #2
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008116:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	8bfb      	ldrh	r3, [r7, #30]
 800811e:	429a      	cmp	r2, r3
 8008120:	d906      	bls.n	8008130 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	8bfb      	ldrh	r3, [r7, #30]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	619a      	str	r2, [r3, #24]
 800812e:	e002      	b.n	8008136 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	2200      	movs	r2, #0
 8008134:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f006 fc82 	bl	800ea4e <HAL_PCD_DataInStageCallback>
 800814a:	e018      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	695a      	ldr	r2, [r3, #20]
 8008150:	8bfb      	ldrh	r3, [r7, #30]
 8008152:	441a      	add	r2, r3
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	8bfb      	ldrh	r3, [r7, #30]
 800815e:	441a      	add	r2, r3
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800816a:	4618      	mov	r0, r3
 800816c:	f003 f93a 	bl	800b3e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8008170:	e005      	b.n	800817e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008174:	461a      	mov	r2, r3
 8008176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f91b 	bl	80083b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008186:	b29b      	uxth	r3, r3
 8008188:	b21b      	sxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	f6ff ad0a 	blt.w	8007ba4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3738      	adds	r7, #56	; 0x38
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b088      	sub	sp, #32
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	4613      	mov	r3, r2
 80081a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d07e      	beq.n	80082b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	4413      	add	r3, r2
 80081c6:	3302      	adds	r3, #2
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	8b7b      	ldrh	r3, [r7, #26]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d306      	bcc.n	80081f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	8b7b      	ldrh	r3, [r7, #26]
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e002      	b.n	80081fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2200      	movs	r2, #0
 80081f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d123      	bne.n	800824a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	833b      	strh	r3, [r7, #24]
 800821e:	8b3b      	ldrh	r3, [r7, #24]
 8008220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008224:	833b      	strh	r3, [r7, #24]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	8b3b      	ldrh	r3, [r7, #24]
 8008236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01f      	beq.n	8008294 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	82fb      	strh	r3, [r7, #22]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	8afb      	ldrh	r3, [r7, #22]
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008294:	8b7b      	ldrh	r3, [r7, #26]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8087 	beq.w	80083aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6959      	ldr	r1, [r3, #20]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	891a      	ldrh	r2, [r3, #8]
 80082a8:	8b7b      	ldrh	r3, [r7, #26]
 80082aa:	f004 fd00 	bl	800ccae <USB_ReadPMA>
 80082ae:	e07c      	b.n	80083aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4413      	add	r3, r2
 80082c4:	3306      	adds	r3, #6
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	8b7b      	ldrh	r3, [r7, #26]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d306      	bcc.n	80082f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	8b7b      	ldrh	r3, [r7, #26]
 80082ea:	1ad2      	subs	r2, r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	619a      	str	r2, [r3, #24]
 80082f0:	e002      	b.n	80082f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d123      	bne.n	8008348 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	83fb      	strh	r3, [r7, #30]
 800831c:	8bfb      	ldrh	r3, [r7, #30]
 800831e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008322:	83fb      	strh	r3, [r7, #30]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	8bfb      	ldrh	r3, [r7, #30]
 8008334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	b29b      	uxth	r3, r3
 8008346:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d11f      	bne.n	8008392 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836c:	83bb      	strh	r3, [r7, #28]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	8bbb      	ldrh	r3, [r7, #28]
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008392:	8b7b      	ldrh	r3, [r7, #26]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d008      	beq.n	80083aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6959      	ldr	r1, [r3, #20]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	895a      	ldrh	r2, [r3, #10]
 80083a4:	8b7b      	ldrh	r3, [r7, #26]
 80083a6:	f004 fc82 	bl	800ccae <USB_ReadPMA>
    }
  }

  return count;
 80083aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b0a2      	sub	sp, #136	; 0x88
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 81c7 	beq.w	800875c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	3302      	adds	r3, #2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008402:	429a      	cmp	r2, r3
 8008404:	d907      	bls.n	8008416 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	619a      	str	r2, [r3, #24]
 8008414:	e002      	b.n	800841c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 80b9 	bne.w	8008598 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d126      	bne.n	800847c <HAL_PCD_EP_DB_Transmit+0xc8>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843c:	b29b      	uxth	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	4413      	add	r3, r2
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	011a      	lsls	r2, r3, #4
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	4413      	add	r3, r2
 8008450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008460:	b29a      	uxth	r2, r3
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008474:	b29a      	uxth	r2, r3
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e01a      	b.n	80084b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d116      	bne.n	80084b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	633b      	str	r3, [r7, #48]	; 0x30
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008492:	b29b      	uxth	r3, r3
 8008494:	461a      	mov	r2, r3
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	4413      	add	r3, r2
 800849a:	633b      	str	r3, [r7, #48]	; 0x30
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	011a      	lsls	r2, r3, #4
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	4413      	add	r3, r2
 80084a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2200      	movs	r2, #0
 80084b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d126      	bne.n	800850e <HAL_PCD_EP_DB_Transmit+0x15a>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	4413      	add	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	011a      	lsls	r2, r3, #4
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4413      	add	r3, r2
 80084e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008506:	b29a      	uxth	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	e017      	b.n	800853e <HAL_PCD_EP_DB_Transmit+0x18a>
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d113      	bne.n	800853e <HAL_PCD_EP_DB_Transmit+0x18a>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851e:	b29b      	uxth	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	4413      	add	r3, r2
 8008526:	623b      	str	r3, [r7, #32]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	4413      	add	r3, r2
 8008532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2200      	movs	r2, #0
 800853c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	4619      	mov	r1, r3
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f006 fa82 	bl	800ea4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 82d4 	beq.w	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008570:	827b      	strh	r3, [r7, #18]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	8a7b      	ldrh	r3, [r7, #18]
 8008582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800858e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008592:	b29b      	uxth	r3, r3
 8008594:	8013      	strh	r3, [r2, #0]
 8008596:	e2b2      	b.n	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008598:	88fb      	ldrh	r3, [r7, #6]
 800859a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d021      	beq.n	80085e6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	441a      	add	r2, r3
 80085ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f040 8286 	bne.w	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085fa:	441a      	add	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008608:	441a      	add	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	429a      	cmp	r2, r3
 8008618:	d309      	bcc.n	800862e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	621a      	str	r2, [r3, #32]
 800862c:	e015      	b.n	800865a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8008636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800863a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008644:	e009      	b.n	800865a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d155      	bne.n	800870e <HAL_PCD_EP_DB_Transmit+0x35a>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008670:	b29b      	uxth	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	4413      	add	r3, r2
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	011a      	lsls	r2, r3, #4
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	4413      	add	r3, r2
 8008684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
 800868a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868c:	2b00      	cmp	r3, #0
 800868e:	d112      	bne.n	80086b6 <HAL_PCD_EP_DB_Transmit+0x302>
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800869a:	b29a      	uxth	r2, r3
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e047      	b.n	8008746 <HAL_PCD_EP_DB_Transmit+0x392>
 80086b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b8:	2b3e      	cmp	r3, #62	; 0x3e
 80086ba:	d811      	bhi.n	80086e0 <HAL_PCD_EP_DB_Transmit+0x32c>
 80086bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086be:	085b      	lsrs	r3, r3, #1
 80086c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80086cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ce:	3301      	adds	r3, #1
 80086d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	029b      	lsls	r3, r3, #10
 80086d8:	b29a      	uxth	r2, r3
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	e032      	b.n	8008746 <HAL_PCD_EP_DB_Transmit+0x392>
 80086e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <HAL_PCD_EP_DB_Transmit+0x342>
 80086f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f2:	3b01      	subs	r3, #1
 80086f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008706:	b29a      	uxth	r2, r3
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	e01b      	b.n	8008746 <HAL_PCD_EP_DB_Transmit+0x392>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d117      	bne.n	8008746 <HAL_PCD_EP_DB_Transmit+0x392>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	643b      	str	r3, [r7, #64]	; 0x40
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008724:	b29b      	uxth	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872a:	4413      	add	r3, r2
 800872c:	643b      	str	r3, [r7, #64]	; 0x40
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	011a      	lsls	r2, r3, #4
 8008734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008736:	4413      	add	r3, r2
 8008738:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008740:	b29a      	uxth	r2, r3
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6959      	ldr	r1, [r3, #20]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	891a      	ldrh	r2, [r3, #8]
 8008752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008754:	b29b      	uxth	r3, r3
 8008756:	f004 fa65 	bl	800cc24 <USB_WritePMA>
 800875a:	e1d0      	b.n	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008764:	b29b      	uxth	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	3306      	adds	r3, #6
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	6812      	ldr	r2, [r2, #0]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008784:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008790:	429a      	cmp	r2, r3
 8008792:	d307      	bcc.n	80087a4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	619a      	str	r2, [r3, #24]
 80087a2:	e002      	b.n	80087aa <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f040 80c4 	bne.w	800893c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d126      	bne.n	800880a <HAL_PCD_EP_DB_Transmit+0x456>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	4413      	add	r3, r2
 80087d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	011a      	lsls	r2, r3, #4
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	4413      	add	r3, r2
 80087de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008802:	b29a      	uxth	r2, r3
 8008804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	e01a      	b.n	8008840 <HAL_PCD_EP_DB_Transmit+0x48c>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d116      	bne.n	8008840 <HAL_PCD_EP_DB_Transmit+0x48c>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	677b      	str	r3, [r7, #116]	; 0x74
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008820:	b29b      	uxth	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008826:	4413      	add	r3, r2
 8008828:	677b      	str	r3, [r7, #116]	; 0x74
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	011a      	lsls	r2, r3, #4
 8008830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008832:	4413      	add	r3, r2
 8008834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008838:	673b      	str	r3, [r7, #112]	; 0x70
 800883a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800883c:	2200      	movs	r2, #0
 800883e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	67bb      	str	r3, [r7, #120]	; 0x78
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12f      	bne.n	80088ae <HAL_PCD_EP_DB_Transmit+0x4fa>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885e:	b29b      	uxth	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008866:	4413      	add	r3, r2
 8008868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	011a      	lsls	r2, r3, #4
 8008872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008876:	4413      	add	r3, r2
 8008878:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800887c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	b29b      	uxth	r3, r3
 800889c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088aa:	801a      	strh	r2, [r3, #0]
 80088ac:	e017      	b.n	80088de <HAL_PCD_EP_DB_Transmit+0x52a>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d113      	bne.n	80088de <HAL_PCD_EP_DB_Transmit+0x52a>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c4:	4413      	add	r3, r2
 80088c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	011a      	lsls	r2, r3, #4
 80088ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088da:	2200      	movs	r2, #0
 80088dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f006 f8b2 	bl	800ea4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80088ea:	88fb      	ldrh	r3, [r7, #6]
 80088ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 8104 	bne.w	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008910:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	441a      	add	r2, r3
 8008922:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800892a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008936:	b29b      	uxth	r3, r3
 8008938:	8013      	strh	r3, [r2, #0]
 800893a:	e0e0      	b.n	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d121      	bne.n	800898a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008960:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008990:	2b01      	cmp	r3, #1
 8008992:	f040 80b4 	bne.w	8008afe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800899e:	441a      	add	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089ac:	441a      	add	r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d309      	bcc.n	80089d2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6a1a      	ldr	r2, [r3, #32]
 80089c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	621a      	str	r2, [r3, #32]
 80089d0:	e015      	b.n	80089fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80089da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80089e8:	e009      	b.n	80089fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	667b      	str	r3, [r7, #100]	; 0x64
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d155      	bne.n	8008ab8 <HAL_PCD_EP_DB_Transmit+0x704>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a20:	4413      	add	r3, r2
 8008a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	011a      	lsls	r2, r3, #4
 8008a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a32:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d112      	bne.n	8008a60 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8008a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	e044      	b.n	8008aea <HAL_PCD_EP_DB_Transmit+0x736>
 8008a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a62:	2b3e      	cmp	r3, #62	; 0x3e
 8008a64:	d811      	bhi.n	8008a8a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8008a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a78:	3301      	adds	r3, #1
 8008a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	029b      	lsls	r3, r3, #10
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a86:	801a      	strh	r2, [r3, #0]
 8008a88:	e02f      	b.n	8008aea <HAL_PCD_EP_DB_Transmit+0x736>
 8008a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a8c:	095b      	lsrs	r3, r3, #5
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8008a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	e018      	b.n	8008aea <HAL_PCD_EP_DB_Transmit+0x736>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d114      	bne.n	8008aea <HAL_PCD_EP_DB_Transmit+0x736>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ace:	4413      	add	r3, r2
 8008ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	011a      	lsls	r2, r3, #4
 8008ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ada:	4413      	add	r3, r2
 8008adc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	895a      	ldrh	r2, [r3, #10]
 8008af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f004 f893 	bl	800cc24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b18:	823b      	strh	r3, [r7, #16]
 8008b1a:	8a3b      	ldrh	r3, [r7, #16]
 8008b1c:	f083 0310 	eor.w	r3, r3, #16
 8008b20:	823b      	strh	r3, [r7, #16]
 8008b22:	8a3b      	ldrh	r3, [r7, #16]
 8008b24:	f083 0320 	eor.w	r3, r3, #32
 8008b28:	823b      	strh	r3, [r7, #16]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	441a      	add	r2, r3
 8008b38:	8a3b      	ldrh	r3, [r7, #16]
 8008b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3788      	adds	r7, #136	; 0x88
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	817b      	strh	r3, [r7, #10]
 8008b66:	4613      	mov	r3, r2
 8008b68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008b6a:	897b      	ldrh	r3, [r7, #10]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00b      	beq.n	8008b8e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b76:	897b      	ldrh	r3, [r7, #10]
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e009      	b.n	8008ba2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b8e:	897a      	ldrh	r2, [r7, #10]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2200      	movs	r2, #0
 8008bac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	80da      	strh	r2, [r3, #6]
 8008bb6:	e00b      	b.n	8008bd0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e31d      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bee:	4b94      	ldr	r3, [pc, #592]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
 8008bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bf8:	4b91      	ldr	r3, [pc, #580]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c00:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d07b      	beq.n	8008d06 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d006      	beq.n	8008c22 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b0c      	cmp	r3, #12
 8008c18:	d10f      	bne.n	8008c3a <HAL_RCC_OscConfig+0x5e>
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c20:	d10b      	bne.n	8008c3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c22:	4b87      	ldr	r3, [pc, #540]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d06a      	beq.n	8008d04 <HAL_RCC_OscConfig+0x128>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d166      	bne.n	8008d04 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e2f7      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d106      	bne.n	8008c50 <HAL_RCC_OscConfig+0x74>
 8008c42:	4b7f      	ldr	r3, [pc, #508]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a7e      	ldr	r2, [pc, #504]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	e02d      	b.n	8008cac <HAL_RCC_OscConfig+0xd0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10c      	bne.n	8008c72 <HAL_RCC_OscConfig+0x96>
 8008c58:	4b79      	ldr	r3, [pc, #484]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a78      	ldr	r2, [pc, #480]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4b76      	ldr	r3, [pc, #472]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a75      	ldr	r2, [pc, #468]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	e01c      	b.n	8008cac <HAL_RCC_OscConfig+0xd0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d10c      	bne.n	8008c94 <HAL_RCC_OscConfig+0xb8>
 8008c7a:	4b71      	ldr	r3, [pc, #452]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a70      	ldr	r2, [pc, #448]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b6e      	ldr	r3, [pc, #440]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a6d      	ldr	r2, [pc, #436]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e00b      	b.n	8008cac <HAL_RCC_OscConfig+0xd0>
 8008c94:	4b6a      	ldr	r3, [pc, #424]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a69      	ldr	r2, [pc, #420]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4b67      	ldr	r3, [pc, #412]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a66      	ldr	r2, [pc, #408]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb4:	f7fc faa8 	bl	8005208 <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cbc:	f7fc faa4 	bl	8005208 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b64      	cmp	r3, #100	; 0x64
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e2ad      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cce:	4b5c      	ldr	r3, [pc, #368]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCC_OscConfig+0xe0>
 8008cda:	e014      	b.n	8008d06 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cdc:	f7fc fa94 	bl	8005208 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ce4:	f7fc fa90 	bl	8005208 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b64      	cmp	r3, #100	; 0x64
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e299      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cf6:	4b52      	ldr	r3, [pc, #328]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x108>
 8008d02:	e000      	b.n	8008d06 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d05a      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d005      	beq.n	8008d24 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b0c      	cmp	r3, #12
 8008d1c:	d119      	bne.n	8008d52 <HAL_RCC_OscConfig+0x176>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d116      	bne.n	8008d52 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d24:	4b46      	ldr	r3, [pc, #280]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <HAL_RCC_OscConfig+0x160>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d001      	beq.n	8008d3c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e276      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3c:	4b40      	ldr	r3, [pc, #256]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	493d      	ldr	r1, [pc, #244]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d50:	e03a      	b.n	8008dc8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d020      	beq.n	8008d9c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d5a:	4b3a      	ldr	r3, [pc, #232]	; (8008e44 <HAL_RCC_OscConfig+0x268>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d60:	f7fc fa52 	bl	8005208 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d68:	f7fc fa4e 	bl	8005208 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e257      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d7a:	4b31      	ldr	r3, [pc, #196]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f0      	beq.n	8008d68 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d86:	4b2e      	ldr	r3, [pc, #184]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	492a      	ldr	r1, [pc, #168]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	604b      	str	r3, [r1, #4]
 8008d9a:	e015      	b.n	8008dc8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d9c:	4b29      	ldr	r3, [pc, #164]	; (8008e44 <HAL_RCC_OscConfig+0x268>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da2:	f7fc fa31 	bl	8005208 <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008daa:	f7fc fa2d 	bl	8005208 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e236      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dbc:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1f0      	bne.n	8008daa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80b8 	beq.w	8008f46 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d170      	bne.n	8008ebe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ddc:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_RCC_OscConfig+0x218>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e21a      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d921      	bls.n	8008e48 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fc53 	bl	80096b4 <RCC_SetFlashLatencyFromMSIRange>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e208      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e18:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	4906      	ldr	r1, [pc, #24]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e2a:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	061b      	lsls	r3, r3, #24
 8008e38:	4901      	ldr	r1, [pc, #4]	; (8008e40 <HAL_RCC_OscConfig+0x264>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	604b      	str	r3, [r1, #4]
 8008e3e:	e020      	b.n	8008e82 <HAL_RCC_OscConfig+0x2a6>
 8008e40:	40023800 	.word	0x40023800
 8008e44:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e48:	4ba4      	ldr	r3, [pc, #656]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	49a1      	ldr	r1, [pc, #644]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e5a:	4ba0      	ldr	r3, [pc, #640]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	499c      	ldr	r1, [pc, #624]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fc1e 	bl	80096b4 <RCC_SetFlashLatencyFromMSIRange>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e1d3      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	0b5b      	lsrs	r3, r3, #13
 8008e88:	3301      	adds	r3, #1
 8008e8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008e8e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008e92:	4a92      	ldr	r2, [pc, #584]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008e94:	6892      	ldr	r2, [r2, #8]
 8008e96:	0912      	lsrs	r2, r2, #4
 8008e98:	f002 020f 	and.w	r2, r2, #15
 8008e9c:	4990      	ldr	r1, [pc, #576]	; (80090e0 <HAL_RCC_OscConfig+0x504>)
 8008e9e:	5c8a      	ldrb	r2, [r1, r2]
 8008ea0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008ea2:	4a90      	ldr	r2, [pc, #576]	; (80090e4 <HAL_RCC_OscConfig+0x508>)
 8008ea4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008ea6:	4b90      	ldr	r3, [pc, #576]	; (80090e8 <HAL_RCC_OscConfig+0x50c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fb ff22 	bl	8004cf4 <HAL_InitTick>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d045      	beq.n	8008f46 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	e1b5      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d029      	beq.n	8008f1a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008ec6:	4b89      	ldr	r3, [pc, #548]	; (80090ec <HAL_RCC_OscConfig+0x510>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ecc:	f7fc f99c 	bl	8005208 <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ed4:	f7fc f998 	bl	8005208 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e1a1      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008ee6:	4b7d      	ldr	r3, [pc, #500]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f0      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ef2:	4b7a      	ldr	r3, [pc, #488]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	4977      	ldr	r1, [pc, #476]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f04:	4b75      	ldr	r3, [pc, #468]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	061b      	lsls	r3, r3, #24
 8008f12:	4972      	ldr	r1, [pc, #456]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	604b      	str	r3, [r1, #4]
 8008f18:	e015      	b.n	8008f46 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008f1a:	4b74      	ldr	r3, [pc, #464]	; (80090ec <HAL_RCC_OscConfig+0x510>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f20:	f7fc f972 	bl	8005208 <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f28:	f7fc f96e 	bl	8005208 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e177      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f3a:	4b68      	ldr	r3, [pc, #416]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f0      	bne.n	8008f28 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d030      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d016      	beq.n	8008f88 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f5a:	4b65      	ldr	r3, [pc, #404]	; (80090f0 <HAL_RCC_OscConfig+0x514>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f60:	f7fc f952 	bl	8005208 <HAL_GetTick>
 8008f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f68:	f7fc f94e 	bl	8005208 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e157      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f7a:	4b58      	ldr	r3, [pc, #352]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f0      	beq.n	8008f68 <HAL_RCC_OscConfig+0x38c>
 8008f86:	e015      	b.n	8008fb4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f88:	4b59      	ldr	r3, [pc, #356]	; (80090f0 <HAL_RCC_OscConfig+0x514>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f8e:	f7fc f93b 	bl	8005208 <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f94:	e008      	b.n	8008fa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f96:	f7fc f937 	bl	8005208 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e140      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fa8:	4b4c      	ldr	r3, [pc, #304]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fac:	f003 0302 	and.w	r3, r3, #2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f0      	bne.n	8008f96 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 80b5 	beq.w	800912c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fc6:	4b45      	ldr	r3, [pc, #276]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10d      	bne.n	8008fee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b42      	ldr	r3, [pc, #264]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	4a41      	ldr	r2, [pc, #260]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6253      	str	r3, [r2, #36]	; 0x24
 8008fde:	4b3f      	ldr	r3, [pc, #252]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fea:	2301      	movs	r3, #1
 8008fec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fee:	4b41      	ldr	r3, [pc, #260]	; (80090f4 <HAL_RCC_OscConfig+0x518>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d118      	bne.n	800902c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ffa:	4b3e      	ldr	r3, [pc, #248]	; (80090f4 <HAL_RCC_OscConfig+0x518>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3d      	ldr	r2, [pc, #244]	; (80090f4 <HAL_RCC_OscConfig+0x518>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009006:	f7fc f8ff 	bl	8005208 <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800900e:	f7fc f8fb 	bl	8005208 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b64      	cmp	r3, #100	; 0x64
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e104      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009020:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <HAL_RCC_OscConfig+0x518>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f0      	beq.n	800900e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <HAL_RCC_OscConfig+0x466>
 8009034:	4b29      	ldr	r3, [pc, #164]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	4a28      	ldr	r2, [pc, #160]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800903a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800903e:	6353      	str	r3, [r2, #52]	; 0x34
 8009040:	e02d      	b.n	800909e <HAL_RCC_OscConfig+0x4c2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10c      	bne.n	8009064 <HAL_RCC_OscConfig+0x488>
 800904a:	4b24      	ldr	r3, [pc, #144]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800904c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904e:	4a23      	ldr	r2, [pc, #140]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009054:	6353      	str	r3, [r2, #52]	; 0x34
 8009056:	4b21      	ldr	r3, [pc, #132]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	4a20      	ldr	r2, [pc, #128]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800905c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009060:	6353      	str	r3, [r2, #52]	; 0x34
 8009062:	e01c      	b.n	800909e <HAL_RCC_OscConfig+0x4c2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b05      	cmp	r3, #5
 800906a:	d10c      	bne.n	8009086 <HAL_RCC_OscConfig+0x4aa>
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800906e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009070:	4a1a      	ldr	r2, [pc, #104]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009076:	6353      	str	r3, [r2, #52]	; 0x34
 8009078:	4b18      	ldr	r3, [pc, #96]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800907a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907c:	4a17      	ldr	r2, [pc, #92]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800907e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009082:	6353      	str	r3, [r2, #52]	; 0x34
 8009084:	e00b      	b.n	800909e <HAL_RCC_OscConfig+0x4c2>
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	4a14      	ldr	r2, [pc, #80]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 800908c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009090:	6353      	str	r3, [r2, #52]	; 0x34
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	4a11      	ldr	r2, [pc, #68]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 8009098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800909c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d015      	beq.n	80090d2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090a6:	f7fc f8af 	bl	8005208 <HAL_GetTick>
 80090aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090ae:	f7fc f8ab 	bl	8005208 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090bc:	4293      	cmp	r3, r2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e0b2      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <HAL_RCC_OscConfig+0x500>)
 80090c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0ee      	beq.n	80090ae <HAL_RCC_OscConfig+0x4d2>
 80090d0:	e023      	b.n	800911a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090d2:	f7fc f899 	bl	8005208 <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090d8:	e019      	b.n	800910e <HAL_RCC_OscConfig+0x532>
 80090da:	bf00      	nop
 80090dc:	40023800 	.word	0x40023800
 80090e0:	08014f80 	.word	0x08014f80
 80090e4:	20000090 	.word	0x20000090
 80090e8:	20000094 	.word	0x20000094
 80090ec:	42470020 	.word	0x42470020
 80090f0:	42470680 	.word	0x42470680
 80090f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090f8:	f7fc f886 	bl	8005208 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	f241 3288 	movw	r2, #5000	; 0x1388
 8009106:	4293      	cmp	r3, r2
 8009108:	d901      	bls.n	800910e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e08d      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800910e:	4b49      	ldr	r3, [pc, #292]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1ee      	bne.n	80090f8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800911a:	7ffb      	ldrb	r3, [r7, #31]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d105      	bne.n	800912c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009120:	4b44      	ldr	r3, [pc, #272]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	4a43      	ldr	r2, [pc, #268]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800912a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d079      	beq.n	8009228 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b0c      	cmp	r3, #12
 8009138:	d056      	beq.n	80091e8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	2b02      	cmp	r3, #2
 8009140:	d13b      	bne.n	80091ba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009142:	4b3d      	ldr	r3, [pc, #244]	; (8009238 <HAL_RCC_OscConfig+0x65c>)
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009148:	f7fc f85e 	bl	8005208 <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009150:	f7fc f85a 	bl	8005208 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e063      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009162:	4b34      	ldr	r3, [pc, #208]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f0      	bne.n	8009150 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800916e:	4b31      	ldr	r3, [pc, #196]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	4319      	orrs	r1, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	430b      	orrs	r3, r1
 8009186:	492b      	ldr	r1, [pc, #172]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 8009188:	4313      	orrs	r3, r2
 800918a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800918c:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <HAL_RCC_OscConfig+0x65c>)
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009192:	f7fc f839 	bl	8005208 <HAL_GetTick>
 8009196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800919a:	f7fc f835 	bl	8005208 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e03e      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0f0      	beq.n	800919a <HAL_RCC_OscConfig+0x5be>
 80091b8:	e036      	b.n	8009228 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091ba:	4b1f      	ldr	r3, [pc, #124]	; (8009238 <HAL_RCC_OscConfig+0x65c>)
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c0:	f7fc f822 	bl	8005208 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091c8:	f7fc f81e 	bl	8005208 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e027      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091da:	4b16      	ldr	r3, [pc, #88]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f0      	bne.n	80091c8 <HAL_RCC_OscConfig+0x5ec>
 80091e6:	e01f      	b.n	8009228 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e01a      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <HAL_RCC_OscConfig+0x658>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	429a      	cmp	r2, r3
 8009206:	d10d      	bne.n	8009224 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009212:	429a      	cmp	r2, r3
 8009214:	d106      	bne.n	8009224 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009220:	429a      	cmp	r2, r3
 8009222:	d001      	beq.n	8009228 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40023800 	.word	0x40023800
 8009238:	42470060 	.word	0x42470060

0800923c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e11a      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009250:	4b8f      	ldr	r3, [pc, #572]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d919      	bls.n	8009292 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d105      	bne.n	8009270 <HAL_RCC_ClockConfig+0x34>
 8009264:	4b8a      	ldr	r3, [pc, #552]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a89      	ldr	r2, [pc, #548]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 800926a:	f043 0304 	orr.w	r3, r3, #4
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	4b87      	ldr	r3, [pc, #540]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f023 0201 	bic.w	r2, r3, #1
 8009278:	4985      	ldr	r1, [pc, #532]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	4313      	orrs	r3, r2
 800927e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009280:	4b83      	ldr	r3, [pc, #524]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d001      	beq.n	8009292 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0f9      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800929e:	4b7d      	ldr	r3, [pc, #500]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	497a      	ldr	r1, [pc, #488]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 808e 	beq.w	80093da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d107      	bne.n	80092d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092c6:	4b73      	ldr	r3, [pc, #460]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d121      	bne.n	8009316 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e0d7      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d107      	bne.n	80092ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092de:	4b6d      	ldr	r3, [pc, #436]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d115      	bne.n	8009316 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e0cb      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092f6:	4b67      	ldr	r3, [pc, #412]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0bf      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009306:	4b63      	ldr	r3, [pc, #396]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e0b7      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009316:	4b5f      	ldr	r3, [pc, #380]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f023 0203 	bic.w	r2, r3, #3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	495c      	ldr	r1, [pc, #368]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009324:	4313      	orrs	r3, r2
 8009326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009328:	f7fb ff6e 	bl	8005208 <HAL_GetTick>
 800932c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d112      	bne.n	800935c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009336:	e00a      	b.n	800934e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009338:	f7fb ff66 	bl	8005208 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f241 3288 	movw	r2, #5000	; 0x1388
 8009346:	4293      	cmp	r3, r2
 8009348:	d901      	bls.n	800934e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e09b      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800934e:	4b51      	ldr	r3, [pc, #324]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 030c 	and.w	r3, r3, #12
 8009356:	2b08      	cmp	r3, #8
 8009358:	d1ee      	bne.n	8009338 <HAL_RCC_ClockConfig+0xfc>
 800935a:	e03e      	b.n	80093da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d112      	bne.n	800938a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009364:	e00a      	b.n	800937c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009366:	f7fb ff4f 	bl	8005208 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	f241 3288 	movw	r2, #5000	; 0x1388
 8009374:	4293      	cmp	r3, r2
 8009376:	d901      	bls.n	800937c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e084      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800937c:	4b45      	ldr	r3, [pc, #276]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 030c 	and.w	r3, r3, #12
 8009384:	2b0c      	cmp	r3, #12
 8009386:	d1ee      	bne.n	8009366 <HAL_RCC_ClockConfig+0x12a>
 8009388:	e027      	b.n	80093da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d11d      	bne.n	80093ce <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009392:	e00a      	b.n	80093aa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009394:	f7fb ff38 	bl	8005208 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e06d      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80093aa:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 030c 	and.w	r3, r3, #12
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d1ee      	bne.n	8009394 <HAL_RCC_ClockConfig+0x158>
 80093b6:	e010      	b.n	80093da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b8:	f7fb ff26 	bl	8005208 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d901      	bls.n	80093ce <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e05b      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093ce:	4b31      	ldr	r3, [pc, #196]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 030c 	and.w	r3, r3, #12
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1ee      	bne.n	80093b8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093da:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d219      	bcs.n	800941c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d105      	bne.n	80093fa <HAL_RCC_ClockConfig+0x1be>
 80093ee:	4b28      	ldr	r3, [pc, #160]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a27      	ldr	r2, [pc, #156]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 80093f4:	f043 0304 	orr.w	r3, r3, #4
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4b25      	ldr	r3, [pc, #148]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f023 0201 	bic.w	r2, r3, #1
 8009402:	4923      	ldr	r1, [pc, #140]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	4313      	orrs	r3, r2
 8009408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800940a:	4b21      	ldr	r3, [pc, #132]	; (8009490 <HAL_RCC_ClockConfig+0x254>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d001      	beq.n	800941c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e034      	b.n	8009486 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009428:	4b1a      	ldr	r3, [pc, #104]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	4917      	ldr	r1, [pc, #92]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009436:	4313      	orrs	r3, r2
 8009438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	490f      	ldr	r1, [pc, #60]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009456:	4313      	orrs	r3, r2
 8009458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800945a:	f000 f823 	bl	80094a4 <HAL_RCC_GetSysClockFreq>
 800945e:	4602      	mov	r2, r0
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <HAL_RCC_ClockConfig+0x258>)
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	091b      	lsrs	r3, r3, #4
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	490b      	ldr	r1, [pc, #44]	; (8009498 <HAL_RCC_ClockConfig+0x25c>)
 800946c:	5ccb      	ldrb	r3, [r1, r3]
 800946e:	fa22 f303 	lsr.w	r3, r2, r3
 8009472:	4a0a      	ldr	r2, [pc, #40]	; (800949c <HAL_RCC_ClockConfig+0x260>)
 8009474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <HAL_RCC_ClockConfig+0x264>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f7fb fc3a 	bl	8004cf4 <HAL_InitTick>
 8009480:	4603      	mov	r3, r0
 8009482:	72fb      	strb	r3, [r7, #11]

  return status;
 8009484:	7afb      	ldrb	r3, [r7, #11]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40023c00 	.word	0x40023c00
 8009494:	40023800 	.word	0x40023800
 8009498:	08014f80 	.word	0x08014f80
 800949c:	20000090 	.word	0x20000090
 80094a0:	20000094 	.word	0x20000094

080094a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a4:	b5b0      	push	{r4, r5, r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80094aa:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 030c 	and.w	r3, r3, #12
 80094b6:	2b0c      	cmp	r3, #12
 80094b8:	d00c      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0x30>
 80094ba:	2b0c      	cmp	r3, #12
 80094bc:	d87c      	bhi.n	80095b8 <HAL_RCC_GetSysClockFreq+0x114>
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d002      	beq.n	80094c8 <HAL_RCC_GetSysClockFreq+0x24>
 80094c2:	2b08      	cmp	r3, #8
 80094c4:	d003      	beq.n	80094ce <HAL_RCC_GetSysClockFreq+0x2a>
 80094c6:	e077      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094c8:	4b46      	ldr	r3, [pc, #280]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80094ca:	613b      	str	r3, [r7, #16]
      break;
 80094cc:	e082      	b.n	80095d4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80094ce:	4b46      	ldr	r3, [pc, #280]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x144>)
 80094d0:	613b      	str	r3, [r7, #16]
      break;
 80094d2:	e07f      	b.n	80095d4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	0c9b      	lsrs	r3, r3, #18
 80094d8:	f003 030f 	and.w	r3, r3, #15
 80094dc:	4a43      	ldr	r2, [pc, #268]	; (80095ec <HAL_RCC_GetSysClockFreq+0x148>)
 80094de:	5cd3      	ldrb	r3, [r2, r3]
 80094e0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	0d9b      	lsrs	r3, r3, #22
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	3301      	adds	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094ee:	4b3c      	ldr	r3, [pc, #240]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01a      	beq.n	8009530 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	461a      	mov	r2, r3
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	4939      	ldr	r1, [pc, #228]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8009504:	fb01 f003 	mul.w	r0, r1, r3
 8009508:	2100      	movs	r1, #0
 800950a:	fb01 f102 	mul.w	r1, r1, r2
 800950e:	1844      	adds	r4, r0, r1
 8009510:	4935      	ldr	r1, [pc, #212]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8009512:	fba2 0101 	umull	r0, r1, r2, r1
 8009516:	1863      	adds	r3, r4, r1
 8009518:	4619      	mov	r1, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	461a      	mov	r2, r3
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	f7f7 fdbd 	bl	80010a0 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4613      	mov	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	e040      	b.n	80095b2 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	461c      	mov	r4, r3
 8009534:	f04f 0500 	mov.w	r5, #0
 8009538:	4620      	mov	r0, r4
 800953a:	4629      	mov	r1, r5
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	014b      	lsls	r3, r1, #5
 8009546:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800954a:	0142      	lsls	r2, r0, #5
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	1b00      	subs	r0, r0, r4
 8009552:	eb61 0105 	sbc.w	r1, r1, r5
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	018b      	lsls	r3, r1, #6
 8009560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009564:	0182      	lsls	r2, r0, #6
 8009566:	1a12      	subs	r2, r2, r0
 8009568:	eb63 0301 	sbc.w	r3, r3, r1
 800956c:	f04f 0000 	mov.w	r0, #0
 8009570:	f04f 0100 	mov.w	r1, #0
 8009574:	00d9      	lsls	r1, r3, #3
 8009576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800957a:	00d0      	lsls	r0, r2, #3
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	1912      	adds	r2, r2, r4
 8009582:	eb45 0303 	adc.w	r3, r5, r3
 8009586:	f04f 0000 	mov.w	r0, #0
 800958a:	f04f 0100 	mov.w	r1, #0
 800958e:	0299      	lsls	r1, r3, #10
 8009590:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009594:	0290      	lsls	r0, r2, #10
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4610      	mov	r0, r2
 800959c:	4619      	mov	r1, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	461a      	mov	r2, r3
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	f7f7 fd7b 	bl	80010a0 <__aeabi_uldivmod>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4613      	mov	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	613b      	str	r3, [r7, #16]
      break;
 80095b6:	e00d      	b.n	80095d4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80095b8:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	0b5b      	lsrs	r3, r3, #13
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	3301      	adds	r3, #1
 80095c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
 80095d0:	613b      	str	r3, [r7, #16]
      break;
 80095d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095d4:	693b      	ldr	r3, [r7, #16]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bdb0      	pop	{r4, r5, r7, pc}
 80095de:	bf00      	nop
 80095e0:	40023800 	.word	0x40023800
 80095e4:	00f42400 	.word	0x00f42400
 80095e8:	016e3600 	.word	0x016e3600
 80095ec:	08014f74 	.word	0x08014f74

080095f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <HAL_RCC_GetHCLKFreq+0x10>)
 80095f6:	681b      	ldr	r3, [r3, #0]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr
 8009600:	20000090 	.word	0x20000090

08009604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009608:	f7ff fff2 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 800960c:	4602      	mov	r2, r0
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	4903      	ldr	r1, [pc, #12]	; (8009628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800961a:	5ccb      	ldrb	r3, [r1, r3]
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009620:	4618      	mov	r0, r3
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40023800 	.word	0x40023800
 8009628:	08014f90 	.word	0x08014f90

0800962c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009630:	f7ff ffde 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 8009634:	4602      	mov	r2, r0
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	0adb      	lsrs	r3, r3, #11
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	4903      	ldr	r1, [pc, #12]	; (8009650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009642:	5ccb      	ldrb	r3, [r1, r3]
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd80      	pop	{r7, pc}
 800964c:	40023800 	.word	0x40023800
 8009650:	08014f90 	.word	0x08014f90

08009654 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	220f      	movs	r2, #15
 8009662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009664:	4b11      	ldr	r3, [pc, #68]	; (80096ac <HAL_RCC_GetClockConfig+0x58>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f003 0203 	and.w	r2, r3, #3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <HAL_RCC_GetClockConfig+0x58>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800967c:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <HAL_RCC_GetClockConfig+0x58>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009688:	4b08      	ldr	r3, [pc, #32]	; (80096ac <HAL_RCC_GetClockConfig+0x58>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	08db      	lsrs	r3, r3, #3
 800968e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0201 	and.w	r2, r3, #1
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr
 80096ac:	40023800 	.word	0x40023800
 80096b0:	40023c00 	.word	0x40023c00

080096b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80096c0:	4b29      	ldr	r3, [pc, #164]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d12c      	bne.n	8009726 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80096cc:	4b26      	ldr	r3, [pc, #152]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80096d8:	4b24      	ldr	r3, [pc, #144]	; (800976c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e016      	b.n	8009712 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096e4:	4b20      	ldr	r3, [pc, #128]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	4a1f      	ldr	r2, [pc, #124]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ee:	6253      	str	r3, [r2, #36]	; 0x24
 80096f0:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80096fc:	4b1b      	ldr	r3, [pc, #108]	; (800976c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8009704:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	4a17      	ldr	r2, [pc, #92]	; (8009768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800970c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009710:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009718:	d105      	bne.n	8009726 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009720:	d101      	bne.n	8009726 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8009722:	2301      	movs	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d105      	bne.n	8009738 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800972c:	4b10      	ldr	r3, [pc, #64]	; (8009770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a0f      	ldr	r2, [pc, #60]	; (8009770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009732:	f043 0304 	orr.w	r3, r3, #4
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f023 0201 	bic.w	r2, r3, #1
 8009740:	490b      	ldr	r1, [pc, #44]	; (8009770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009748:	4b09      	ldr	r3, [pc, #36]	; (8009770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	429a      	cmp	r2, r3
 8009754:	d001      	beq.n	800975a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40023800 	.word	0x40023800
 800976c:	40007000 	.word	0x40007000
 8009770:	40023c00 	.word	0x40023c00

08009774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e06e      	b.n	8009864 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d108      	bne.n	80097a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009796:	d009      	beq.n	80097ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	61da      	str	r2, [r3, #28]
 800979e:	e005      	b.n	80097ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fb f9cc 	bl	8004b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	431a      	orrs	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009830:	ea42 0103 	orr.w	r1, r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	0c1a      	lsrs	r2, r3, #16
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f002 0204 	and.w	r2, r2, #4
 8009852:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e031      	b.n	80098e2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f829 	bl	80098ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f000 f978 	bl	8009ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e03a      	b.n	800998a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009934:	d00e      	beq.n	8009954 <HAL_TIM_Base_Start_IT+0x58>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a16      	ldr	r2, [pc, #88]	; (8009994 <HAL_TIM_Base_Start_IT+0x98>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d009      	beq.n	8009954 <HAL_TIM_Base_Start_IT+0x58>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a14      	ldr	r2, [pc, #80]	; (8009998 <HAL_TIM_Base_Start_IT+0x9c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d004      	beq.n	8009954 <HAL_TIM_Base_Start_IT+0x58>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a13      	ldr	r2, [pc, #76]	; (800999c <HAL_TIM_Base_Start_IT+0xa0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d111      	bne.n	8009978 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b06      	cmp	r3, #6
 8009964:	d010      	beq.n	8009988 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f042 0201 	orr.w	r2, r2, #1
 8009974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009976:	e007      	b.n	8009988 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40010800 	.word	0x40010800

080099a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d122      	bne.n	80099fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d11b      	bne.n	80099fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f06f 0202 	mvn.w	r2, #2
 80099cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f8c1 	bl	8009b6a <HAL_TIM_IC_CaptureCallback>
 80099e8:	e005      	b.n	80099f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f8b4 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f8c3 	bl	8009b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d122      	bne.n	8009a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d11b      	bne.n	8009a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0204 	mvn.w	r2, #4
 8009a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f897 	bl	8009b6a <HAL_TIM_IC_CaptureCallback>
 8009a3c:	e005      	b.n	8009a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f88a 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f899 	bl	8009b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b08      	cmp	r3, #8
 8009a5c:	d122      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d11b      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0208 	mvn.w	r2, #8
 8009a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2204      	movs	r2, #4
 8009a7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f86d 	bl	8009b6a <HAL_TIM_IC_CaptureCallback>
 8009a90:	e005      	b.n	8009a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f860 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f86f 	bl	8009b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0310 	and.w	r3, r3, #16
 8009aae:	2b10      	cmp	r3, #16
 8009ab0:	d122      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0310 	and.w	r3, r3, #16
 8009abc:	2b10      	cmp	r3, #16
 8009abe:	d11b      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f06f 0210 	mvn.w	r2, #16
 8009ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2208      	movs	r2, #8
 8009ace:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f843 	bl	8009b6a <HAL_TIM_IC_CaptureCallback>
 8009ae4:	e005      	b.n	8009af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f836 	bl	8009b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f845 	bl	8009b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d10e      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d107      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0201 	mvn.w	r2, #1
 8009b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fa fb1a 	bl	8004158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d10e      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3c:	2b40      	cmp	r3, #64	; 0x40
 8009b3e:	d107      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f81f 	bl	8009b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr

08009b6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr

08009b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr

08009ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb6:	d007      	beq.n	8009bc8 <TIM_Base_SetConfig+0x28>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a25      	ldr	r2, [pc, #148]	; (8009c50 <TIM_Base_SetConfig+0xb0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d003      	beq.n	8009bc8 <TIM_Base_SetConfig+0x28>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a24      	ldr	r2, [pc, #144]	; (8009c54 <TIM_Base_SetConfig+0xb4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d108      	bne.n	8009bda <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be0:	d013      	beq.n	8009c0a <TIM_Base_SetConfig+0x6a>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a1a      	ldr	r2, [pc, #104]	; (8009c50 <TIM_Base_SetConfig+0xb0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00f      	beq.n	8009c0a <TIM_Base_SetConfig+0x6a>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <TIM_Base_SetConfig+0xb4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d00b      	beq.n	8009c0a <TIM_Base_SetConfig+0x6a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <TIM_Base_SetConfig+0xb8>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d007      	beq.n	8009c0a <TIM_Base_SetConfig+0x6a>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <TIM_Base_SetConfig+0xbc>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <TIM_Base_SetConfig+0x6a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <TIM_Base_SetConfig+0xc0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d108      	bne.n	8009c1c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	615a      	str	r2, [r3, #20]
}
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr
 8009c50:	40000400 	.word	0x40000400
 8009c54:	40000800 	.word	0x40000800
 8009c58:	40010800 	.word	0x40010800
 8009c5c:	40010c00 	.word	0x40010c00
 8009c60:	40011000 	.word	0x40011000

08009c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e03f      	b.n	8009cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7fa ffae 	bl	8004bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2224      	movs	r2, #36	; 0x24
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fd11 	bl	800a6d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	695a      	ldr	r2, [r3, #20]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b08a      	sub	sp, #40	; 0x28
 8009d02:	af02      	add	r7, sp, #8
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	603b      	str	r3, [r7, #0]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d17c      	bne.n	8009e18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <HAL_UART_Transmit+0x2c>
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e075      	b.n	8009e1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_UART_Transmit+0x3e>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e06e      	b.n	8009e1a <HAL_UART_Transmit+0x11c>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2221      	movs	r2, #33	; 0x21
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d52:	f7fb fa59 	bl	8005208 <HAL_GetTick>
 8009d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	88fa      	ldrh	r2, [r7, #6]
 8009d5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	88fa      	ldrh	r2, [r7, #6]
 8009d62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6c:	d108      	bne.n	8009d80 <HAL_UART_Transmit+0x82>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d104      	bne.n	8009d80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	e003      	b.n	8009d88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d90:	e02a      	b.n	8009de8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2180      	movs	r1, #128	; 0x80
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 faab 	bl	800a2f8 <UART_WaitOnFlagUntilTimeout>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e036      	b.n	8009e1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	e007      	b.n	8009dda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	781a      	ldrb	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1cf      	bne.n	8009d92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2140      	movs	r1, #64	; 0x40
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fa7b 	bl	800a2f8 <UART_WaitOnFlagUntilTimeout>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e006      	b.n	8009e1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	e000      	b.n	8009e1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e18:	2302      	movs	r3, #2
  }
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3720      	adds	r7, #32
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d11d      	bne.n	8009e78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_UART_Receive_IT+0x26>
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e016      	b.n	8009e7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_UART_Receive_IT+0x38>
 8009e56:	2302      	movs	r3, #2
 8009e58:	e00f      	b.n	8009e7a <HAL_UART_Receive_IT+0x58>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fa8c 	bl	800a38c <UART_Start_Receive_IT>
 8009e74:	4603      	mov	r3, r0
 8009e76:	e000      	b.n	8009e7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f022 0201 	bic.w	r2, r2, #1
 8009eaa:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d107      	bne.n	8009ec4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0210 	bic.w	r2, r2, #16
 8009ec2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d12d      	bne.n	8009f2e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	695a      	ldr	r2, [r3, #20]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ee0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d013      	beq.n	8009f12 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	4a19      	ldr	r2, [pc, #100]	; (8009f54 <HAL_UART_AbortReceive_IT+0xd0>)
 8009ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fb ff9f 	bl	8005e3a <HAL_DMA_Abort_IT>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d022      	beq.n	8009f48 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	e01a      	b.n	8009f48 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f9d2 	bl	800a2d0 <HAL_UART_AbortReceiveCpltCallback>
 8009f2c:	e00c      	b.n	8009f48 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2220      	movs	r2, #32
 8009f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f9c4 	bl	800a2d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	0800a47f 	.word	0x0800a47f

08009f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	f003 030f 	and.w	r3, r3, #15
 8009f86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10d      	bne.n	8009faa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <HAL_UART_IRQHandler+0x52>
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 faea 	bl	800a57c <UART_Receive_IT>
      return;
 8009fa8:	e17b      	b.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 80b1 	beq.w	800a114 <HAL_UART_IRQHandler+0x1bc>
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d105      	bne.n	8009fc8 <HAL_UART_IRQHandler+0x70>
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 80a6 	beq.w	800a114 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x90>
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe0:	f043 0201 	orr.w	r2, r3, #1
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <HAL_UART_IRQHandler+0xb0>
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d005      	beq.n	800a008 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	f043 0202 	orr.w	r2, r3, #2
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <HAL_UART_IRQHandler+0xd0>
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a020:	f043 0204 	orr.w	r2, r3, #4
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00f      	beq.n	800a052 <HAL_UART_IRQHandler+0xfa>
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <HAL_UART_IRQHandler+0xee>
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	f043 0208 	orr.w	r2, r3, #8
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 811e 	beq.w	800a298 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d007      	beq.n	800a076 <HAL_UART_IRQHandler+0x11e>
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa83 	bl	800a57c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a080:	2b40      	cmp	r3, #64	; 0x40
 800a082:	bf0c      	ite	eq
 800a084:	2301      	moveq	r3, #1
 800a086:	2300      	movne	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <HAL_UART_IRQHandler+0x146>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d031      	beq.n	800a102 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f9ad 	bl	800a3fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ae:	2b40      	cmp	r3, #64	; 0x40
 800a0b0:	d123      	bne.n	800a0fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	695a      	ldr	r2, [r3, #20]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d013      	beq.n	800a0f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	4a76      	ldr	r2, [pc, #472]	; (800a2a8 <HAL_UART_IRQHandler+0x350>)
 800a0d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fb feaf 	bl	8005e3a <HAL_DMA_Abort_IT>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d016      	beq.n	800a110 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f0:	e00e      	b.n	800a110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f8e3 	bl	800a2be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	e00a      	b.n	800a110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f8df 	bl	800a2be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a100:	e006      	b.n	800a110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8db 	bl	800a2be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a10e:	e0c3      	b.n	800a298 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a110:	bf00      	nop
    return;
 800a112:	e0c1      	b.n	800a298 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	2b01      	cmp	r3, #1
 800a11a:	f040 80a1 	bne.w	800a260 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 809b 	beq.w	800a260 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8095 	beq.w	800a260 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d14e      	bne.n	800a1f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a164:	8a3b      	ldrh	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8098 	beq.w	800a29c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a170:	8a3a      	ldrh	r2, [r7, #16]
 800a172:	429a      	cmp	r2, r3
 800a174:	f080 8092 	bcs.w	800a29c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	8a3a      	ldrh	r2, [r7, #16]
 800a17c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b20      	cmp	r3, #32
 800a186:	d02b      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a196:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	695a      	ldr	r2, [r3, #20]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0201 	bic.w	r2, r2, #1
 800a1a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	695a      	ldr	r2, [r3, #20]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0210 	bic.w	r2, r2, #16
 800a1d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fb fdf0 	bl	8005dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f876 	bl	800a2e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a1f6:	e051      	b.n	800a29c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a200:	b29b      	uxth	r3, r3
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d047      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a210:	8a7b      	ldrh	r3, [r7, #18]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d044      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a224:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	695a      	ldr	r2, [r3, #20]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2220      	movs	r2, #32
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f022 0210 	bic.w	r2, r2, #16
 800a252:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a254:	8a7b      	ldrh	r3, [r7, #18]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f842 	bl	800a2e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a25e:	e01f      	b.n	800a2a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d008      	beq.n	800a27c <HAL_UART_IRQHandler+0x324>
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f91a 	bl	800a4ae <UART_Transmit_IT>
    return;
 800a27a:	e012      	b.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d008      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f95b 	bl	800a54c <UART_EndTransmit_IT>
    return;
 800a296:	e004      	b.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
    return;
 800a298:	bf00      	nop
 800a29a:	e002      	b.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800a2a0:	bf00      	nop
  }
}
 800a2a2:	3728      	adds	r7, #40	; 0x28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	0800a457 	.word	0x0800a457

0800a2ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bc80      	pop	{r7}
 800a2bc:	4770      	bx	lr

0800a2be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bc80      	pop	{r7}
 800a2f6:	4770      	bx	lr

0800a2f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a308:	e02c      	b.n	800a364 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a310:	d028      	beq.n	800a364 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <UART_WaitOnFlagUntilTimeout+0x30>
 800a318:	f7fa ff76 	bl	8005208 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	429a      	cmp	r2, r3
 800a326:	d21d      	bcs.n	800a364 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a336:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695a      	ldr	r2, [r3, #20]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0201 	bic.w	r2, r2, #1
 800a346:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2220      	movs	r2, #32
 800a354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e00f      	b.n	800a384 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4013      	ands	r3, r2
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	429a      	cmp	r2, r3
 800a372:	bf0c      	ite	eq
 800a374:	2301      	moveq	r3, #1
 800a376:	2300      	movne	r3, #0
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d0c3      	beq.n	800a30a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	88fa      	ldrh	r2, [r7, #6]
 800a3aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2222      	movs	r2, #34	; 0x22
 800a3b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f042 0201 	orr.w	r2, r2, #1
 800a3e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0220 	orr.w	r2, r2, #32
 800a3f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68da      	ldr	r2, [r3, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a414:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	695a      	ldr	r2, [r3, #20]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0201 	bic.w	r2, r2, #1
 800a424:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d107      	bne.n	800a43e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 0210 	bic.w	r2, r2, #16
 800a43c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2220      	movs	r2, #32
 800a442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr

0800a456 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff ff24 	bl	800a2be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a476:	bf00      	nop
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2220      	movs	r2, #32
 800a496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff ff15 	bl	800a2d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b21      	cmp	r3, #33	; 0x21
 800a4c0:	d13e      	bne.n	800a540 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ca:	d114      	bne.n	800a4f6 <UART_Transmit_IT+0x48>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d110      	bne.n	800a4f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	621a      	str	r2, [r3, #32]
 800a4f4:	e008      	b.n	800a508 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	1c59      	adds	r1, r3, #1
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6211      	str	r1, [r2, #32]
 800a500:	781a      	ldrb	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29b      	uxth	r3, r3
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4619      	mov	r1, r3
 800a516:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10f      	bne.n	800a53c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a52a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a53a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	e000      	b.n	800a542 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a540:	2302      	movs	r3, #2
  }
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	bc80      	pop	{r7}
 800a54a:	4770      	bx	lr

0800a54c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a562:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff fe9d 	bl	800a2ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b22      	cmp	r3, #34	; 0x22
 800a58e:	f040 8099 	bne.w	800a6c4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a59a:	d117      	bne.n	800a5cc <UART_Receive_IT+0x50>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d113      	bne.n	800a5cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	1c9a      	adds	r2, r3, #2
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	629a      	str	r2, [r3, #40]	; 0x28
 800a5ca:	e026      	b.n	800a61a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5de:	d007      	beq.n	800a5f0 <UART_Receive_IT+0x74>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <UART_Receive_IT+0x82>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e008      	b.n	800a610 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61e:	b29b      	uxth	r3, r3
 800a620:	3b01      	subs	r3, #1
 800a622:	b29b      	uxth	r3, r3
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4619      	mov	r1, r3
 800a628:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d148      	bne.n	800a6c0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0220 	bic.w	r2, r2, #32
 800a63c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a64c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d123      	bne.n	800a6b6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0210 	bic.w	r2, r2, #16
 800a682:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d10a      	bne.n	800a6a8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fe17 	bl	800a2e2 <HAL_UARTEx_RxEventCallback>
 800a6b4:	e002      	b.n	800a6bc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7f9 fcd2 	bl	8004060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e002      	b.n	800a6c6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e000      	b.n	800a6c6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a6c4:	2302      	movs	r3, #2
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	4313      	orrs	r3, r2
 800a704:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a710:	f023 030c 	bic.w	r3, r3, #12
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	430b      	orrs	r3, r1
 800a71c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699a      	ldr	r2, [r3, #24]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a55      	ldr	r2, [pc, #340]	; (800a890 <UART_SetConfig+0x1c0>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d103      	bne.n	800a746 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a73e:	f7fe ff75 	bl	800962c <HAL_RCC_GetPCLK2Freq>
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	e002      	b.n	800a74c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a746:	f7fe ff5d 	bl	8009604 <HAL_RCC_GetPCLK1Freq>
 800a74a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a754:	d14c      	bne.n	800a7f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009a      	lsls	r2, r3, #2
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76c:	4a49      	ldr	r2, [pc, #292]	; (800a894 <UART_SetConfig+0x1c4>)
 800a76e:	fba2 2303 	umull	r2, r3, r2, r3
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	0119      	lsls	r1, r3, #4
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	4613      	mov	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	009a      	lsls	r2, r3, #2
 800a780:	441a      	add	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	fbb2 f2f3 	udiv	r2, r2, r3
 800a78c:	4b41      	ldr	r3, [pc, #260]	; (800a894 <UART_SetConfig+0x1c4>)
 800a78e:	fba3 0302 	umull	r0, r3, r3, r2
 800a792:	095b      	lsrs	r3, r3, #5
 800a794:	2064      	movs	r0, #100	; 0x64
 800a796:	fb00 f303 	mul.w	r3, r0, r3
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	3332      	adds	r3, #50	; 0x32
 800a7a0:	4a3c      	ldr	r2, [pc, #240]	; (800a894 <UART_SetConfig+0x1c4>)
 800a7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a6:	095b      	lsrs	r3, r3, #5
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7ae:	4419      	add	r1, r3
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009a      	lsls	r2, r3, #2
 800a7ba:	441a      	add	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7c6:	4b33      	ldr	r3, [pc, #204]	; (800a894 <UART_SetConfig+0x1c4>)
 800a7c8:	fba3 0302 	umull	r0, r3, r3, r2
 800a7cc:	095b      	lsrs	r3, r3, #5
 800a7ce:	2064      	movs	r0, #100	; 0x64
 800a7d0:	fb00 f303 	mul.w	r3, r0, r3
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	3332      	adds	r3, #50	; 0x32
 800a7da:	4a2e      	ldr	r2, [pc, #184]	; (800a894 <UART_SetConfig+0x1c4>)
 800a7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e0:	095b      	lsrs	r3, r3, #5
 800a7e2:	f003 0207 	and.w	r2, r3, #7
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7ee:	e04a      	b.n	800a886 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009a      	lsls	r2, r3, #2
 800a7fa:	441a      	add	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	fbb2 f3f3 	udiv	r3, r2, r3
 800a806:	4a23      	ldr	r2, [pc, #140]	; (800a894 <UART_SetConfig+0x1c4>)
 800a808:	fba2 2303 	umull	r2, r3, r2, r3
 800a80c:	095b      	lsrs	r3, r3, #5
 800a80e:	0119      	lsls	r1, r3, #4
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009a      	lsls	r2, r3, #2
 800a81a:	441a      	add	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	fbb2 f2f3 	udiv	r2, r2, r3
 800a826:	4b1b      	ldr	r3, [pc, #108]	; (800a894 <UART_SetConfig+0x1c4>)
 800a828:	fba3 0302 	umull	r0, r3, r3, r2
 800a82c:	095b      	lsrs	r3, r3, #5
 800a82e:	2064      	movs	r0, #100	; 0x64
 800a830:	fb00 f303 	mul.w	r3, r0, r3
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	3332      	adds	r3, #50	; 0x32
 800a83a:	4a16      	ldr	r2, [pc, #88]	; (800a894 <UART_SetConfig+0x1c4>)
 800a83c:	fba2 2303 	umull	r2, r3, r2, r3
 800a840:	095b      	lsrs	r3, r3, #5
 800a842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a846:	4419      	add	r1, r3
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009a      	lsls	r2, r3, #2
 800a852:	441a      	add	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a85e:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <UART_SetConfig+0x1c4>)
 800a860:	fba3 0302 	umull	r0, r3, r3, r2
 800a864:	095b      	lsrs	r3, r3, #5
 800a866:	2064      	movs	r0, #100	; 0x64
 800a868:	fb00 f303 	mul.w	r3, r0, r3
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	011b      	lsls	r3, r3, #4
 800a870:	3332      	adds	r3, #50	; 0x32
 800a872:	4a08      	ldr	r2, [pc, #32]	; (800a894 <UART_SetConfig+0x1c4>)
 800a874:	fba2 2303 	umull	r2, r3, r2, r3
 800a878:	095b      	lsrs	r3, r3, #5
 800a87a:	f003 020f 	and.w	r2, r3, #15
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	440a      	add	r2, r1
 800a884:	609a      	str	r2, [r3, #8]
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	40013800 	.word	0x40013800
 800a894:	51eb851f 	.word	0x51eb851f

0800a898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a8a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a8ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bc80      	pop	{r7}
 800a8c2:	4770      	bx	lr

0800a8c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a8cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a8d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr

0800a8f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	f107 0014 	add.w	r0, r7, #20
 800a906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	bc80      	pop	{r7}
 800a934:	b004      	add	sp, #16
 800a936:	4770      	bx	lr

0800a938 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a938:	b480      	push	{r7}
 800a93a:	b09b      	sub	sp, #108	; 0x6c
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	b29b      	uxth	r3, r3
 800a956:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a95e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	78db      	ldrb	r3, [r3, #3]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d81f      	bhi.n	800a9aa <USB_ActivateEndpoint+0x72>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <USB_ActivateEndpoint+0x38>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a981 	.word	0x0800a981
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a9b3 	.word	0x0800a9b3
 800a97c:	0800a98f 	.word	0x0800a98f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a980:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a988:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a98c:	e012      	b.n	800a9b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a98e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a992:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a99a:	e00b      	b.n	800a9b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a99c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a9a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a9a8:	e004      	b.n	800a9b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a9b0:	e000      	b.n	800a9b4 <USB_ActivateEndpoint+0x7c>
      break;
 800a9b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	441a      	add	r2, r3
 800a9be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a9c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800aa08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	7b1b      	ldrb	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8149 	bne.w	800acb8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8084 	beq.w	800ab38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	4413      	add	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	011a      	lsls	r2, r3, #4
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa52:	613b      	str	r3, [r7, #16]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	88db      	ldrh	r3, [r3, #6]
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	81fb      	strh	r3, [r7, #14]
 800aa72:	89fb      	ldrh	r3, [r7, #14]
 800aa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01b      	beq.n	800aab4 <USB_ActivateEndpoint+0x17c>
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa92:	81bb      	strh	r3, [r7, #12]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	441a      	add	r2, r3
 800aa9e:	89bb      	ldrh	r3, [r7, #12]
 800aaa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	78db      	ldrb	r3, [r3, #3]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d020      	beq.n	800aafe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad2:	813b      	strh	r3, [r7, #8]
 800aad4:	893b      	ldrh	r3, [r7, #8]
 800aad6:	f083 0320 	eor.w	r3, r3, #32
 800aada:	813b      	strh	r3, [r7, #8]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	441a      	add	r2, r3
 800aae6:	893b      	ldrh	r3, [r7, #8]
 800aae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	8013      	strh	r3, [r2, #0]
 800aafc:	e27f      	b.n	800affe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab14:	817b      	strh	r3, [r7, #10]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	441a      	add	r2, r3
 800ab20:	897b      	ldrh	r3, [r7, #10]
 800ab22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	8013      	strh	r3, [r2, #0]
 800ab36:	e262      	b.n	800affe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	461a      	mov	r2, r3
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	4413      	add	r3, r2
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	011a      	lsls	r2, r3, #4
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	88db      	ldrh	r3, [r3, #6]
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	4413      	add	r3, r2
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	011a      	lsls	r2, r3, #4
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	4413      	add	r3, r2
 800ab8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab8e:	623b      	str	r3, [r7, #32]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d112      	bne.n	800abbe <USB_ActivateEndpoint+0x286>
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	801a      	strh	r2, [r3, #0]
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	801a      	strh	r2, [r3, #0]
 800abbc:	e02f      	b.n	800ac1e <USB_ActivateEndpoint+0x2e6>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b3e      	cmp	r3, #62	; 0x3e
 800abc4:	d813      	bhi.n	800abee <USB_ActivateEndpoint+0x2b6>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	663b      	str	r3, [r7, #96]	; 0x60
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <USB_ActivateEndpoint+0x2a8>
 800abda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abdc:	3301      	adds	r3, #1
 800abde:	663b      	str	r3, [r7, #96]	; 0x60
 800abe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	029b      	lsls	r3, r3, #10
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e017      	b.n	800ac1e <USB_ActivateEndpoint+0x2e6>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	095b      	lsrs	r3, r3, #5
 800abf4:	663b      	str	r3, [r7, #96]	; 0x60
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f003 031f 	and.w	r3, r3, #31
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <USB_ActivateEndpoint+0x2d0>
 800ac02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac04:	3b01      	subs	r3, #1
 800ac06:	663b      	str	r3, [r7, #96]	; 0x60
 800ac08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	029b      	lsls	r3, r3, #10
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	83fb      	strh	r3, [r7, #30]
 800ac2c:	8bfb      	ldrh	r3, [r7, #30]
 800ac2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01b      	beq.n	800ac6e <USB_ActivateEndpoint+0x336>
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac4c:	83bb      	strh	r3, [r7, #28]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	441a      	add	r2, r3
 800ac58:	8bbb      	ldrh	r3, [r7, #28]
 800ac5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac84:	837b      	strh	r3, [r7, #26]
 800ac86:	8b7b      	ldrh	r3, [r7, #26]
 800ac88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac8c:	837b      	strh	r3, [r7, #26]
 800ac8e:	8b7b      	ldrh	r3, [r7, #26]
 800ac90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac94:	837b      	strh	r3, [r7, #26]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	441a      	add	r2, r3
 800aca0:	8b7b      	ldrh	r3, [r7, #26]
 800aca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	8013      	strh	r3, [r2, #0]
 800acb6:	e1a2      	b.n	800affe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	441a      	add	r2, r3
 800acdc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ace0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800acec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad04:	4413      	add	r3, r2
 800ad06:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	011a      	lsls	r2, r3, #4
 800ad0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad16:	657b      	str	r3, [r7, #84]	; 0x54
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	891b      	ldrh	r3, [r3, #8]
 800ad1c:	085b      	lsrs	r3, r3, #1
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad26:	801a      	strh	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	461a      	mov	r2, r3
 800ad36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad38:	4413      	add	r3, r2
 800ad3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	011a      	lsls	r2, r3, #4
 800ad42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ad4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	895b      	ldrh	r3, [r3, #10]
 800ad50:	085b      	lsrs	r3, r3, #1
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f040 8091 	bne.w	800ae88 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ad74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01b      	beq.n	800adb6 <USB_ActivateEndpoint+0x47e>
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad94:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	441a      	add	r2, r3
 800ada0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ada2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	873b      	strh	r3, [r7, #56]	; 0x38
 800adc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800adc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d01b      	beq.n	800ae06 <USB_ActivateEndpoint+0x4ce>
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	b29b      	uxth	r3, r3
 800addc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	441a      	add	r2, r3
 800adf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ae1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae24:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ae26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	441a      	add	r2, r3
 800ae38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae64:	867b      	strh	r3, [r7, #50]	; 0x32
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	441a      	add	r2, r3
 800ae70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	8013      	strh	r3, [r2, #0]
 800ae86:	e0ba      	b.n	800affe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ae98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01d      	beq.n	800aee0 <USB_ActivateEndpoint+0x5a8>
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	441a      	add	r2, r3
 800aec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800aecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aedc:	b29b      	uxth	r3, r3
 800aede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aef0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01d      	beq.n	800af38 <USB_ActivateEndpoint+0x600>
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	441a      	add	r2, r3
 800af20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af34:	b29b      	uxth	r3, r3
 800af36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	78db      	ldrb	r3, [r3, #3]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d024      	beq.n	800af8a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af5e:	f083 0320 	eor.w	r3, r3, #32
 800af62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	441a      	add	r2, r3
 800af70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]
 800af88:	e01d      	b.n	800afc6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	b29b      	uxth	r3, r3
 800af98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	441a      	add	r2, r3
 800afe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affa:	b29b      	uxth	r3, r3
 800affc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800affe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b002:	4618      	mov	r0, r3
 800b004:	376c      	adds	r7, #108	; 0x6c
 800b006:	46bd      	mov	sp, r7
 800b008:	bc80      	pop	{r7}
 800b00a:	4770      	bx	lr

0800b00c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b08d      	sub	sp, #52	; 0x34
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	7b1b      	ldrb	r3, [r3, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f040 808e 	bne.w	800b13c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d044      	beq.n	800b0b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	81bb      	strh	r3, [r7, #12]
 800b036:	89bb      	ldrh	r3, [r7, #12]
 800b038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01b      	beq.n	800b078 <USB_DeactivateEndpoint+0x6c>
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b056:	817b      	strh	r3, [r7, #10]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	441a      	add	r2, r3
 800b062:	897b      	ldrh	r3, [r7, #10]
 800b064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b06c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b074:	b29b      	uxth	r3, r3
 800b076:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	b29b      	uxth	r3, r3
 800b086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08e:	813b      	strh	r3, [r7, #8]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	441a      	add	r2, r3
 800b09a:	893b      	ldrh	r3, [r7, #8]
 800b09c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	8013      	strh	r3, [r2, #0]
 800b0b0:	e192      	b.n	800b3d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	827b      	strh	r3, [r7, #18]
 800b0c0:	8a7b      	ldrh	r3, [r7, #18]
 800b0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d01b      	beq.n	800b102 <USB_DeactivateEndpoint+0xf6>
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0e0:	823b      	strh	r3, [r7, #16]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	441a      	add	r2, r3
 800b0ec:	8a3b      	ldrh	r3, [r7, #16]
 800b0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b118:	81fb      	strh	r3, [r7, #14]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	441a      	add	r2, r3
 800b124:	89fb      	ldrh	r3, [r7, #14]
 800b126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b12a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b12e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b136:	b29b      	uxth	r3, r3
 800b138:	8013      	strh	r3, [r2, #0]
 800b13a:	e14d      	b.n	800b3d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 80a5 	bne.w	800b290 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	843b      	strh	r3, [r7, #32]
 800b154:	8c3b      	ldrh	r3, [r7, #32]
 800b156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01b      	beq.n	800b196 <USB_DeactivateEndpoint+0x18a>
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b174:	83fb      	strh	r3, [r7, #30]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	441a      	add	r2, r3
 800b180:	8bfb      	ldrh	r3, [r7, #30]
 800b182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b192:	b29b      	uxth	r3, r3
 800b194:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	83bb      	strh	r3, [r7, #28]
 800b1a4:	8bbb      	ldrh	r3, [r7, #28]
 800b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01b      	beq.n	800b1e6 <USB_DeactivateEndpoint+0x1da>
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c4:	837b      	strh	r3, [r7, #26]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	441a      	add	r2, r3
 800b1d0:	8b7b      	ldrh	r3, [r7, #26]
 800b1d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fc:	833b      	strh	r3, [r7, #24]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	441a      	add	r2, r3
 800b208:	8b3b      	ldrh	r3, [r7, #24]
 800b20a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b20e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b234:	82fb      	strh	r3, [r7, #22]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	441a      	add	r2, r3
 800b240:	8afb      	ldrh	r3, [r7, #22]
 800b242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b24a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b252:	b29b      	uxth	r3, r3
 800b254:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	b29b      	uxth	r3, r3
 800b264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b26c:	82bb      	strh	r3, [r7, #20]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	441a      	add	r2, r3
 800b278:	8abb      	ldrh	r3, [r7, #20]
 800b27a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b27e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	8013      	strh	r3, [r2, #0]
 800b28e:	e0a3      	b.n	800b3d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b29e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01b      	beq.n	800b2e0 <USB_DeactivateEndpoint+0x2d4>
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	441a      	add	r2, r3
 800b2ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b2ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01b      	beq.n	800b330 <USB_DeactivateEndpoint+0x324>
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	b29b      	uxth	r3, r3
 800b306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b30e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	441a      	add	r2, r3
 800b31a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b31c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b346:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	441a      	add	r2, r3
 800b352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b35c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b364:	b29b      	uxth	r3, r3
 800b366:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b29b      	uxth	r3, r3
 800b376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b37e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	441a      	add	r2, r3
 800b38a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b38c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b6:	847b      	strh	r3, [r7, #34]	; 0x22
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	441a      	add	r2, r3
 800b3c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3734      	adds	r7, #52	; 0x34
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr

0800b3e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b0cc      	sub	sp, #304	; 0x130
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	1d3b      	adds	r3, r7, #4
 800b3ec:	6018      	str	r0, [r3, #0]
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3f2:	463b      	mov	r3, r7
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	785b      	ldrb	r3, [r3, #1]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	f040 872e 	bne.w	800c25a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b3fe:	463b      	mov	r3, r7
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	699a      	ldr	r2, [r3, #24]
 800b404:	463b      	mov	r3, r7
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d905      	bls.n	800b41a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800b40e:	463b      	mov	r3, r7
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b418:	e004      	b.n	800b424 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b41a:	463b      	mov	r3, r7
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b424:	463b      	mov	r3, r7
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	7b1b      	ldrb	r3, [r3, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d134      	bne.n	800b498 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b42e:	463b      	mov	r3, r7
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6959      	ldr	r1, [r3, #20]
 800b434:	463b      	mov	r3, r7
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	88da      	ldrh	r2, [r3, #6]
 800b43a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b43e:	b29b      	uxth	r3, r3
 800b440:	1d38      	adds	r0, r7, #4
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	f001 fbee 	bl	800cc24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	1d3a      	adds	r2, r7, #4
 800b44e:	6812      	ldr	r2, [r2, #0]
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	1d3b      	adds	r3, r7, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4619      	mov	r1, r3
 800b45e:	f107 0310 	add.w	r3, r7, #16
 800b462:	f107 0210 	add.w	r2, r7, #16
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	440a      	add	r2, r1
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	463b      	mov	r3, r7
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	011a      	lsls	r2, r3, #4
 800b474:	f107 0310 	add.w	r3, r7, #16
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4413      	add	r3, r2
 800b47c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b480:	f107 030c 	add.w	r3, r7, #12
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	f107 030c 	add.w	r3, r7, #12
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	801a      	strh	r2, [r3, #0]
 800b494:	f000 beac 	b.w	800c1f0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b498:	463b      	mov	r3, r7
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	f040 838c 	bne.w	800bbbc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b4a4:	463b      	mov	r3, r7
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6a1a      	ldr	r2, [r3, #32]
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	f240 8330 	bls.w	800bb16 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b4b6:	1d3b      	adds	r3, r7, #4
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b4d4:	1d3b      	adds	r3, r7, #4
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	463b      	mov	r3, r7
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	441a      	add	r2, r3
 800b4e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b4e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6a1a      	ldr	r2, [r3, #32]
 800b500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b504:	1ad2      	subs	r2, r2, r3
 800b506:	463b      	mov	r3, r7
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b50c:	1d3b      	adds	r3, r7, #4
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	463b      	mov	r3, r7
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 819e 	beq.w	800b864 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b52c:	1d3a      	adds	r2, r7, #4
 800b52e:	6812      	ldr	r2, [r2, #0]
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	463b      	mov	r3, r7
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d17a      	bne.n	800b632 <USB_EPStartXfer+0x24e>
 800b53c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b540:	1d3a      	adds	r2, r7, #4
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	1d3b      	adds	r3, r7, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4619      	mov	r1, r3
 800b552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b55a:	6812      	ldr	r2, [r2, #0]
 800b55c:	440a      	add	r2, r1
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	463b      	mov	r3, r7
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	011a      	lsls	r2, r3, #4
 800b568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4413      	add	r3, r2
 800b570:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d11a      	bne.n	800b5b8 <USB_EPStartXfer+0x1d4>
 800b582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b590:	b29a      	uxth	r2, r3
 800b592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	801a      	strh	r2, [r3, #0]
 800b59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	801a      	strh	r2, [r3, #0]
 800b5b6:	e062      	b.n	800b67e <USB_EPStartXfer+0x29a>
 800b5b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5bc:	2b3e      	cmp	r3, #62	; 0x3e
 800b5be:	d819      	bhi.n	800b5f4 <USB_EPStartXfer+0x210>
 800b5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5c4:	085b      	lsrs	r3, r3, #1
 800b5c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b5ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d004      	beq.n	800b5e0 <USB_EPStartXfer+0x1fc>
 800b5d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5da:	3301      	adds	r3, #1
 800b5dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b5e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	029b      	lsls	r3, r3, #10
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	801a      	strh	r2, [r3, #0]
 800b5f2:	e044      	b.n	800b67e <USB_EPStartXfer+0x29a>
 800b5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f8:	095b      	lsrs	r3, r3, #5
 800b5fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b602:	f003 031f 	and.w	r3, r3, #31
 800b606:	2b00      	cmp	r3, #0
 800b608:	d104      	bne.n	800b614 <USB_EPStartXfer+0x230>
 800b60a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b60e:	3b01      	subs	r3, #1
 800b610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b618:	b29b      	uxth	r3, r3
 800b61a:	029b      	lsls	r3, r3, #10
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b626:	b29a      	uxth	r2, r3
 800b628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	801a      	strh	r2, [r3, #0]
 800b630:	e025      	b.n	800b67e <USB_EPStartXfer+0x29a>
 800b632:	463b      	mov	r3, r7
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	785b      	ldrb	r3, [r3, #1]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d120      	bne.n	800b67e <USB_EPStartXfer+0x29a>
 800b63c:	1d3b      	adds	r3, r7, #4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b644:	b29b      	uxth	r3, r3
 800b646:	4619      	mov	r1, r3
 800b648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b64c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	440a      	add	r2, r1
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	463b      	mov	r3, r7
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	011a      	lsls	r2, r3, #4
 800b65e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4413      	add	r3, r2
 800b666:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800b66a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b674:	b29a      	uxth	r2, r3
 800b676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b67e:	463b      	mov	r3, r7
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	895b      	ldrh	r3, [r3, #10]
 800b684:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b688:	463b      	mov	r3, r7
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6959      	ldr	r1, [r3, #20]
 800b68e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b692:	b29b      	uxth	r3, r3
 800b694:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b698:	1d38      	adds	r0, r7, #4
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	f001 fac2 	bl	800cc24 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6a0:	463b      	mov	r3, r7
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	695a      	ldr	r2, [r3, #20]
 800b6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6aa:	441a      	add	r2, r3
 800b6ac:	463b      	mov	r3, r7
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6a1a      	ldr	r2, [r3, #32]
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d909      	bls.n	800b6d6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a1a      	ldr	r2, [r3, #32]
 800b6c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6cc:	1ad2      	subs	r2, r2, r3
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	621a      	str	r2, [r3, #32]
 800b6d4:	e008      	b.n	800b6e8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800b6d6:	463b      	mov	r3, r7
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b6e0:	463b      	mov	r3, r7
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6e8:	463b      	mov	r3, r7
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	785b      	ldrb	r3, [r3, #1]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d17a      	bne.n	800b7e8 <USB_EPStartXfer+0x404>
 800b6f2:	f107 0318 	add.w	r3, r7, #24
 800b6f6:	1d3a      	adds	r2, r7, #4
 800b6f8:	6812      	ldr	r2, [r2, #0]
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	1d3b      	adds	r3, r7, #4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b704:	b29b      	uxth	r3, r3
 800b706:	4619      	mov	r1, r3
 800b708:	f107 0318 	add.w	r3, r7, #24
 800b70c:	f107 0218 	add.w	r2, r7, #24
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	440a      	add	r2, r1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	463b      	mov	r3, r7
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	011a      	lsls	r2, r3, #4
 800b71e:	f107 0318 	add.w	r3, r7, #24
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4413      	add	r3, r2
 800b726:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b72a:	f107 0314 	add.w	r3, r7, #20
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d11a      	bne.n	800b76e <USB_EPStartXfer+0x38a>
 800b738:	f107 0314 	add.w	r3, r7, #20
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b29b      	uxth	r3, r3
 800b742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b746:	b29a      	uxth	r2, r3
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	801a      	strh	r2, [r3, #0]
 800b750:	f107 0314 	add.w	r3, r7, #20
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b75e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b762:	b29a      	uxth	r2, r3
 800b764:	f107 0314 	add.w	r3, r7, #20
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	e067      	b.n	800b83e <USB_EPStartXfer+0x45a>
 800b76e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b772:	2b3e      	cmp	r3, #62	; 0x3e
 800b774:	d819      	bhi.n	800b7aa <USB_EPStartXfer+0x3c6>
 800b776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b77a:	085b      	lsrs	r3, r3, #1
 800b77c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d004      	beq.n	800b796 <USB_EPStartXfer+0x3b2>
 800b78c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b790:	3301      	adds	r3, #1
 800b792:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	029b      	lsls	r3, r3, #10
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	801a      	strh	r2, [r3, #0]
 800b7a8:	e049      	b.n	800b83e <USB_EPStartXfer+0x45a>
 800b7aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7ae:	095b      	lsrs	r3, r3, #5
 800b7b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b8:	f003 031f 	and.w	r3, r3, #31
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <USB_EPStartXfer+0x3e6>
 800b7c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b7ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	029b      	lsls	r3, r3, #10
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	f107 0314 	add.w	r3, r7, #20
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	e02a      	b.n	800b83e <USB_EPStartXfer+0x45a>
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d125      	bne.n	800b83e <USB_EPStartXfer+0x45a>
 800b7f2:	f107 0320 	add.w	r3, r7, #32
 800b7f6:	1d3a      	adds	r2, r7, #4
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	1d3b      	adds	r3, r7, #4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b804:	b29b      	uxth	r3, r3
 800b806:	4619      	mov	r1, r3
 800b808:	f107 0320 	add.w	r3, r7, #32
 800b80c:	f107 0220 	add.w	r2, r7, #32
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	440a      	add	r2, r1
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	463b      	mov	r3, r7
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	011a      	lsls	r2, r3, #4
 800b81e:	f107 0320 	add.w	r3, r7, #32
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4413      	add	r3, r2
 800b826:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b82a:	f107 031c 	add.w	r3, r7, #28
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b834:	b29a      	uxth	r2, r3
 800b836:	f107 031c 	add.w	r3, r7, #28
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b83e:	463b      	mov	r3, r7
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	891b      	ldrh	r3, [r3, #8]
 800b844:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b848:	463b      	mov	r3, r7
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6959      	ldr	r1, [r3, #20]
 800b84e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b852:	b29b      	uxth	r3, r3
 800b854:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b858:	1d38      	adds	r0, r7, #4
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	f001 f9e2 	bl	800cc24 <USB_WritePMA>
 800b860:	f000 bcc6 	b.w	800c1f0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b864:	463b      	mov	r3, r7
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d164      	bne.n	800b938 <USB_EPStartXfer+0x554>
 800b86e:	1d3b      	adds	r3, r7, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	64bb      	str	r3, [r7, #72]	; 0x48
 800b874:	1d3b      	adds	r3, r7, #4
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b882:	4413      	add	r3, r2
 800b884:	64bb      	str	r3, [r7, #72]	; 0x48
 800b886:	463b      	mov	r3, r7
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	011a      	lsls	r2, r3, #4
 800b88e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b890:	4413      	add	r3, r2
 800b892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b896:	647b      	str	r3, [r7, #68]	; 0x44
 800b898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d112      	bne.n	800b8c6 <USB_EPStartXfer+0x4e2>
 800b8a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c2:	801a      	strh	r2, [r3, #0]
 800b8c4:	e057      	b.n	800b976 <USB_EPStartXfer+0x592>
 800b8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b8cc:	d817      	bhi.n	800b8fe <USB_EPStartXfer+0x51a>
 800b8ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d2:	085b      	lsrs	r3, r3, #1
 800b8d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d004      	beq.n	800b8ee <USB_EPStartXfer+0x50a>
 800b8e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	029b      	lsls	r3, r3, #10
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8fa:	801a      	strh	r2, [r3, #0]
 800b8fc:	e03b      	b.n	800b976 <USB_EPStartXfer+0x592>
 800b8fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b902:	095b      	lsrs	r3, r3, #5
 800b904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b90c:	f003 031f 	and.w	r3, r3, #31
 800b910:	2b00      	cmp	r3, #0
 800b912:	d104      	bne.n	800b91e <USB_EPStartXfer+0x53a>
 800b914:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b918:	3b01      	subs	r3, #1
 800b91a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b91e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b922:	b29b      	uxth	r3, r3
 800b924:	029b      	lsls	r3, r3, #10
 800b926:	b29b      	uxth	r3, r3
 800b928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b92c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b930:	b29a      	uxth	r2, r3
 800b932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b934:	801a      	strh	r2, [r3, #0]
 800b936:	e01e      	b.n	800b976 <USB_EPStartXfer+0x592>
 800b938:	463b      	mov	r3, r7
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	785b      	ldrb	r3, [r3, #1]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d119      	bne.n	800b976 <USB_EPStartXfer+0x592>
 800b942:	1d3b      	adds	r3, r7, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	653b      	str	r3, [r7, #80]	; 0x50
 800b948:	1d3b      	adds	r3, r7, #4
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b950:	b29b      	uxth	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b956:	4413      	add	r3, r2
 800b958:	653b      	str	r3, [r7, #80]	; 0x50
 800b95a:	463b      	mov	r3, r7
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	011a      	lsls	r2, r3, #4
 800b962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b964:	4413      	add	r3, r2
 800b966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b96a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b96c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b970:	b29a      	uxth	r2, r3
 800b972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b976:	463b      	mov	r3, r7
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	891b      	ldrh	r3, [r3, #8]
 800b97c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b980:	463b      	mov	r3, r7
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6959      	ldr	r1, [r3, #20]
 800b986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b990:	1d38      	adds	r0, r7, #4
 800b992:	6800      	ldr	r0, [r0, #0]
 800b994:	f001 f946 	bl	800cc24 <USB_WritePMA>
            ep->xfer_buff += len;
 800b998:	463b      	mov	r3, r7
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	695a      	ldr	r2, [r3, #20]
 800b99e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9a2:	441a      	add	r2, r3
 800b9a4:	463b      	mov	r3, r7
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6a1a      	ldr	r2, [r3, #32]
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d909      	bls.n	800b9ce <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800b9ba:	463b      	mov	r3, r7
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6a1a      	ldr	r2, [r3, #32]
 800b9c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	621a      	str	r2, [r3, #32]
 800b9cc:	e008      	b.n	800b9e0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b9d8:	463b      	mov	r3, r7
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9e0:	1d3b      	adds	r3, r7, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	785b      	ldrb	r3, [r3, #1]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d164      	bne.n	800baba <USB_EPStartXfer+0x6d6>
 800b9f0:	1d3b      	adds	r3, r7, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f6:	1d3b      	adds	r3, r7, #4
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	461a      	mov	r2, r3
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	4413      	add	r3, r2
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba08:	463b      	mov	r3, r7
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	011a      	lsls	r2, r3, #4
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	4413      	add	r3, r2
 800ba14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d112      	bne.n	800ba48 <USB_EPStartXfer+0x664>
 800ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	801a      	strh	r2, [r3, #0]
 800ba32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba44:	801a      	strh	r2, [r3, #0]
 800ba46:	e054      	b.n	800baf2 <USB_EPStartXfer+0x70e>
 800ba48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba4c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba4e:	d817      	bhi.n	800ba80 <USB_EPStartXfer+0x69c>
 800ba50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba54:	085b      	lsrs	r3, r3, #1
 800ba56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d004      	beq.n	800ba70 <USB_EPStartXfer+0x68c>
 800ba66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	029b      	lsls	r3, r3, #10
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7c:	801a      	strh	r2, [r3, #0]
 800ba7e:	e038      	b.n	800baf2 <USB_EPStartXfer+0x70e>
 800ba80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba84:	095b      	lsrs	r3, r3, #5
 800ba86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba8e:	f003 031f 	and.w	r3, r3, #31
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d104      	bne.n	800baa0 <USB_EPStartXfer+0x6bc>
 800ba96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800baa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	029b      	lsls	r3, r3, #10
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab6:	801a      	strh	r2, [r3, #0]
 800bab8:	e01b      	b.n	800baf2 <USB_EPStartXfer+0x70e>
 800baba:	463b      	mov	r3, r7
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	785b      	ldrb	r3, [r3, #1]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d116      	bne.n	800baf2 <USB_EPStartXfer+0x70e>
 800bac4:	1d3b      	adds	r3, r7, #4
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bacc:	b29b      	uxth	r3, r3
 800bace:	461a      	mov	r2, r3
 800bad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad2:	4413      	add	r3, r2
 800bad4:	643b      	str	r3, [r7, #64]	; 0x40
 800bad6:	463b      	mov	r3, r7
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	011a      	lsls	r2, r3, #4
 800bade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae0:	4413      	add	r3, r2
 800bae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baec:	b29a      	uxth	r2, r3
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800baf2:	463b      	mov	r3, r7
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	895b      	ldrh	r3, [r3, #10]
 800baf8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bafc:	463b      	mov	r3, r7
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6959      	ldr	r1, [r3, #20]
 800bb02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bb0c:	1d38      	adds	r0, r7, #4
 800bb0e:	6800      	ldr	r0, [r0, #0]
 800bb10:	f001 f888 	bl	800cc24 <USB_WritePMA>
 800bb14:	e36c      	b.n	800c1f0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bb16:	463b      	mov	r3, r7
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bb20:	1d3b      	adds	r3, r7, #4
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	463b      	mov	r3, r7
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	881b      	ldrh	r3, [r3, #0]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bb36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bb3e:	1d3b      	adds	r3, r7, #4
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	463b      	mov	r3, r7
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	441a      	add	r2, r3
 800bb4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bb50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb64:	1d3b      	adds	r3, r7, #4
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb6a:	1d3b      	adds	r3, r7, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	461a      	mov	r2, r3
 800bb76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb78:	4413      	add	r3, r2
 800bb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	011a      	lsls	r2, r3, #4
 800bb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb86:	4413      	add	r3, r2
 800bb88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bb98:	463b      	mov	r3, r7
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	891b      	ldrh	r3, [r3, #8]
 800bb9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bba2:	463b      	mov	r3, r7
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6959      	ldr	r1, [r3, #20]
 800bba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bbb2:	1d38      	adds	r0, r7, #4
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	f001 f835 	bl	800cc24 <USB_WritePMA>
 800bbba:	e319      	b.n	800c1f0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bbbc:	1d3b      	adds	r3, r7, #4
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800bbda:	1d3b      	adds	r3, r7, #4
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	463b      	mov	r3, r7
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	441a      	add	r2, r3
 800bbe8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800bbec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbf4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bc00:	463b      	mov	r3, r7
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6a1a      	ldr	r2, [r3, #32]
 800bc06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc0a:	1ad2      	subs	r2, r2, r3
 800bc0c:	463b      	mov	r3, r7
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc12:	1d3b      	adds	r3, r7, #4
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	463b      	mov	r3, r7
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 8162 	beq.w	800bef2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc2e:	1d3b      	adds	r3, r7, #4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc36:	463b      	mov	r3, r7
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d164      	bne.n	800bd0a <USB_EPStartXfer+0x926>
 800bc40:	1d3b      	adds	r3, r7, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc46:	1d3b      	adds	r3, r7, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc54:	4413      	add	r3, r2
 800bc56:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc58:	463b      	mov	r3, r7
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	011a      	lsls	r2, r3, #4
 800bc60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc62:	4413      	add	r3, r2
 800bc64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc68:	677b      	str	r3, [r7, #116]	; 0x74
 800bc6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d112      	bne.n	800bc98 <USB_EPStartXfer+0x8b4>
 800bc72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc80:	801a      	strh	r2, [r3, #0]
 800bc82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc94:	801a      	strh	r2, [r3, #0]
 800bc96:	e057      	b.n	800bd48 <USB_EPStartXfer+0x964>
 800bc98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc9c:	2b3e      	cmp	r3, #62	; 0x3e
 800bc9e:	d817      	bhi.n	800bcd0 <USB_EPStartXfer+0x8ec>
 800bca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bca4:	085b      	lsrs	r3, r3, #1
 800bca6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bcaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d004      	beq.n	800bcc0 <USB_EPStartXfer+0x8dc>
 800bcb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bcba:	3301      	adds	r3, #1
 800bcbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bcc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	029b      	lsls	r3, r3, #10
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bccc:	801a      	strh	r2, [r3, #0]
 800bcce:	e03b      	b.n	800bd48 <USB_EPStartXfer+0x964>
 800bcd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcd4:	095b      	lsrs	r3, r3, #5
 800bcd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bcda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcde:	f003 031f 	and.w	r3, r3, #31
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d104      	bne.n	800bcf0 <USB_EPStartXfer+0x90c>
 800bce6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bcea:	3b01      	subs	r3, #1
 800bcec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800bcf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	029b      	lsls	r3, r3, #10
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd06:	801a      	strh	r2, [r3, #0]
 800bd08:	e01e      	b.n	800bd48 <USB_EPStartXfer+0x964>
 800bd0a:	463b      	mov	r3, r7
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	785b      	ldrb	r3, [r3, #1]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d119      	bne.n	800bd48 <USB_EPStartXfer+0x964>
 800bd14:	1d3b      	adds	r3, r7, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd24:	4413      	add	r3, r2
 800bd26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd2a:	463b      	mov	r3, r7
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	011a      	lsls	r2, r3, #4
 800bd32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd36:	4413      	add	r3, r2
 800bd38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bd48:	463b      	mov	r3, r7
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	895b      	ldrh	r3, [r3, #10]
 800bd4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd52:	463b      	mov	r3, r7
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6959      	ldr	r1, [r3, #20]
 800bd58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bd62:	1d38      	adds	r0, r7, #4
 800bd64:	6800      	ldr	r0, [r0, #0]
 800bd66:	f000 ff5d 	bl	800cc24 <USB_WritePMA>
          ep->xfer_buff += len;
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	695a      	ldr	r2, [r3, #20]
 800bd70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd74:	441a      	add	r2, r3
 800bd76:	463b      	mov	r3, r7
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6a1a      	ldr	r2, [r3, #32]
 800bd82:	463b      	mov	r3, r7
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d909      	bls.n	800bda0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6a1a      	ldr	r2, [r3, #32]
 800bd92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd96:	1ad2      	subs	r2, r2, r3
 800bd98:	463b      	mov	r3, r7
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	621a      	str	r2, [r3, #32]
 800bd9e:	e008      	b.n	800bdb2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800bda0:	463b      	mov	r3, r7
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800bdaa:	463b      	mov	r3, r7
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800bdb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 821a 	beq.w	800c1f0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bdbc:	463b      	mov	r3, r7
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	785b      	ldrb	r3, [r3, #1]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d164      	bne.n	800be90 <USB_EPStartXfer+0xaac>
 800bdc6:	1d3b      	adds	r3, r7, #4
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdcc:	1d3b      	adds	r3, r7, #4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdda:	4413      	add	r3, r2
 800bddc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdde:	463b      	mov	r3, r7
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	011a      	lsls	r2, r3, #4
 800bde6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bde8:	4413      	add	r3, r2
 800bdea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bdee:	667b      	str	r3, [r7, #100]	; 0x64
 800bdf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d112      	bne.n	800be1e <USB_EPStartXfer+0xa3a>
 800bdf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be02:	b29a      	uxth	r2, r3
 800be04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be06:	801a      	strh	r2, [r3, #0]
 800be08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be16:	b29a      	uxth	r2, r3
 800be18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be1a:	801a      	strh	r2, [r3, #0]
 800be1c:	e057      	b.n	800bece <USB_EPStartXfer+0xaea>
 800be1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be22:	2b3e      	cmp	r3, #62	; 0x3e
 800be24:	d817      	bhi.n	800be56 <USB_EPStartXfer+0xa72>
 800be26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be2a:	085b      	lsrs	r3, r3, #1
 800be2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <USB_EPStartXfer+0xa62>
 800be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be40:	3301      	adds	r3, #1
 800be42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	029b      	lsls	r3, r3, #10
 800be4e:	b29a      	uxth	r2, r3
 800be50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be52:	801a      	strh	r2, [r3, #0]
 800be54:	e03b      	b.n	800bece <USB_EPStartXfer+0xaea>
 800be56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be5a:	095b      	lsrs	r3, r3, #5
 800be5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be64:	f003 031f 	and.w	r3, r3, #31
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d104      	bne.n	800be76 <USB_EPStartXfer+0xa92>
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	3b01      	subs	r3, #1
 800be72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	029b      	lsls	r3, r3, #10
 800be7e:	b29b      	uxth	r3, r3
 800be80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be88:	b29a      	uxth	r2, r3
 800be8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	e01e      	b.n	800bece <USB_EPStartXfer+0xaea>
 800be90:	463b      	mov	r3, r7
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d119      	bne.n	800bece <USB_EPStartXfer+0xaea>
 800be9a:	1d3b      	adds	r3, r7, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	673b      	str	r3, [r7, #112]	; 0x70
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	461a      	mov	r2, r3
 800beac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800beae:	4413      	add	r3, r2
 800beb0:	673b      	str	r3, [r7, #112]	; 0x70
 800beb2:	463b      	mov	r3, r7
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	011a      	lsls	r2, r3, #4
 800beba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bebc:	4413      	add	r3, r2
 800bebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bec8:	b29a      	uxth	r2, r3
 800beca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800becc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bece:	463b      	mov	r3, r7
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	891b      	ldrh	r3, [r3, #8]
 800bed4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bed8:	463b      	mov	r3, r7
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6959      	ldr	r1, [r3, #20]
 800bede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bee8:	1d38      	adds	r0, r7, #4
 800beea:	6800      	ldr	r0, [r0, #0]
 800beec:	f000 fe9a 	bl	800cc24 <USB_WritePMA>
 800bef0:	e17e      	b.n	800c1f0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bef2:	463b      	mov	r3, r7
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d16f      	bne.n	800bfdc <USB_EPStartXfer+0xbf8>
 800befc:	1d3b      	adds	r3, r7, #4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf04:	1d3b      	adds	r3, r7, #4
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf14:	4413      	add	r3, r2
 800bf16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	011a      	lsls	r2, r3, #4
 800bf22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf26:	4413      	add	r3, r2
 800bf28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d116      	bne.n	800bf66 <USB_EPStartXfer+0xb82>
 800bf38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf62:	801a      	strh	r2, [r3, #0]
 800bf64:	e05f      	b.n	800c026 <USB_EPStartXfer+0xc42>
 800bf66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf6a:	2b3e      	cmp	r3, #62	; 0x3e
 800bf6c:	d818      	bhi.n	800bfa0 <USB_EPStartXfer+0xbbc>
 800bf6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf72:	085b      	lsrs	r3, r3, #1
 800bf74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bf78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d004      	beq.n	800bf8e <USB_EPStartXfer+0xbaa>
 800bf84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf88:	3301      	adds	r3, #1
 800bf8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bf8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	029b      	lsls	r3, r3, #10
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf9c:	801a      	strh	r2, [r3, #0]
 800bf9e:	e042      	b.n	800c026 <USB_EPStartXfer+0xc42>
 800bfa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfa4:	095b      	lsrs	r3, r3, #5
 800bfa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bfaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfae:	f003 031f 	and.w	r3, r3, #31
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d104      	bne.n	800bfc0 <USB_EPStartXfer+0xbdc>
 800bfb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bfc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	029b      	lsls	r3, r3, #10
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfd8:	801a      	strh	r2, [r3, #0]
 800bfda:	e024      	b.n	800c026 <USB_EPStartXfer+0xc42>
 800bfdc:	463b      	mov	r3, r7
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d11f      	bne.n	800c026 <USB_EPStartXfer+0xc42>
 800bfe6:	1d3b      	adds	r3, r7, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bfee:	1d3b      	adds	r3, r7, #4
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	461a      	mov	r2, r3
 800bffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bffe:	4413      	add	r3, r2
 800c000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c004:	463b      	mov	r3, r7
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	011a      	lsls	r2, r3, #4
 800c00c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c010:	4413      	add	r3, r2
 800c012:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c01a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c01e:	b29a      	uxth	r2, r3
 800c020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c024:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c026:	463b      	mov	r3, r7
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	891b      	ldrh	r3, [r3, #8]
 800c02c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c030:	463b      	mov	r3, r7
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6959      	ldr	r1, [r3, #20]
 800c036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c040:	1d38      	adds	r0, r7, #4
 800c042:	6800      	ldr	r0, [r0, #0]
 800c044:	f000 fdee 	bl	800cc24 <USB_WritePMA>
          ep->xfer_buff += len;
 800c048:	463b      	mov	r3, r7
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	695a      	ldr	r2, [r3, #20]
 800c04e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c052:	441a      	add	r2, r3
 800c054:	463b      	mov	r3, r7
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c05a:	463b      	mov	r3, r7
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6a1a      	ldr	r2, [r3, #32]
 800c060:	463b      	mov	r3, r7
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	d909      	bls.n	800c07e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800c06a:	463b      	mov	r3, r7
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6a1a      	ldr	r2, [r3, #32]
 800c070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c074:	1ad2      	subs	r2, r2, r3
 800c076:	463b      	mov	r3, r7
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	621a      	str	r2, [r3, #32]
 800c07c:	e008      	b.n	800c090 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800c07e:	463b      	mov	r3, r7
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800c088:	463b      	mov	r3, r7
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2200      	movs	r2, #0
 800c08e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800c090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 80ab 	beq.w	800c1f0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c09a:	1d3b      	adds	r3, r7, #4
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	785b      	ldrb	r3, [r3, #1]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d16f      	bne.n	800c18c <USB_EPStartXfer+0xda8>
 800c0ac:	1d3b      	adds	r3, r7, #4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0b4:	1d3b      	adds	r3, r7, #4
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0ca:	463b      	mov	r3, r7
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	011a      	lsls	r2, r3, #4
 800c0d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c0dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d116      	bne.n	800c116 <USB_EPStartXfer+0xd32>
 800c0e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0fa:	801a      	strh	r2, [r3, #0]
 800c0fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	b29b      	uxth	r3, r3
 800c104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c112:	801a      	strh	r2, [r3, #0]
 800c114:	e05b      	b.n	800c1ce <USB_EPStartXfer+0xdea>
 800c116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c11a:	2b3e      	cmp	r3, #62	; 0x3e
 800c11c:	d818      	bhi.n	800c150 <USB_EPStartXfer+0xd6c>
 800c11e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c122:	085b      	lsrs	r3, r3, #1
 800c124:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <USB_EPStartXfer+0xd5a>
 800c134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c138:	3301      	adds	r3, #1
 800c13a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c142:	b29b      	uxth	r3, r3
 800c144:	029b      	lsls	r3, r3, #10
 800c146:	b29a      	uxth	r2, r3
 800c148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c14c:	801a      	strh	r2, [r3, #0]
 800c14e:	e03e      	b.n	800c1ce <USB_EPStartXfer+0xdea>
 800c150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c154:	095b      	lsrs	r3, r3, #5
 800c156:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c15e:	f003 031f 	and.w	r3, r3, #31
 800c162:	2b00      	cmp	r3, #0
 800c164:	d104      	bne.n	800c170 <USB_EPStartXfer+0xd8c>
 800c166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c16a:	3b01      	subs	r3, #1
 800c16c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c174:	b29b      	uxth	r3, r3
 800c176:	029b      	lsls	r3, r3, #10
 800c178:	b29b      	uxth	r3, r3
 800c17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c182:	b29a      	uxth	r2, r3
 800c184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c188:	801a      	strh	r2, [r3, #0]
 800c18a:	e020      	b.n	800c1ce <USB_EPStartXfer+0xdea>
 800c18c:	463b      	mov	r3, r7
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	785b      	ldrb	r3, [r3, #1]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d11b      	bne.n	800c1ce <USB_EPStartXfer+0xdea>
 800c196:	1d3b      	adds	r3, r7, #4
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1ac:	463b      	mov	r3, r7
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	011a      	lsls	r2, r3, #4
 800c1b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c1be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c1c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	895b      	ldrh	r3, [r3, #10]
 800c1d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1d8:	463b      	mov	r3, r7
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6959      	ldr	r1, [r3, #20]
 800c1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c1e8:	1d38      	adds	r0, r7, #4
 800c1ea:	6800      	ldr	r0, [r0, #0]
 800c1ec:	f000 fd1a 	bl	800cc24 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c1f0:	1d3b      	adds	r3, r7, #4
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	463b      	mov	r3, r7
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	b29b      	uxth	r3, r3
 800c202:	f107 020a 	add.w	r2, r7, #10
 800c206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c20e:	8013      	strh	r3, [r2, #0]
 800c210:	f107 030a 	add.w	r3, r7, #10
 800c214:	f107 020a 	add.w	r2, r7, #10
 800c218:	8812      	ldrh	r2, [r2, #0]
 800c21a:	f082 0210 	eor.w	r2, r2, #16
 800c21e:	801a      	strh	r2, [r3, #0]
 800c220:	f107 030a 	add.w	r3, r7, #10
 800c224:	f107 020a 	add.w	r2, r7, #10
 800c228:	8812      	ldrh	r2, [r2, #0]
 800c22a:	f082 0220 	eor.w	r2, r2, #32
 800c22e:	801a      	strh	r2, [r3, #0]
 800c230:	1d3b      	adds	r3, r7, #4
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	463b      	mov	r3, r7
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	441a      	add	r2, r3
 800c23e:	f107 030a 	add.w	r3, r7, #10
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c24c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c254:	b29b      	uxth	r3, r3
 800c256:	8013      	strh	r3, [r2, #0]
 800c258:	e3b5      	b.n	800c9c6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c25a:	463b      	mov	r3, r7
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	7b1b      	ldrb	r3, [r3, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	f040 8090 	bne.w	800c386 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c266:	463b      	mov	r3, r7
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	699a      	ldr	r2, [r3, #24]
 800c26c:	463b      	mov	r3, r7
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	429a      	cmp	r2, r3
 800c274:	d90e      	bls.n	800c294 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800c276:	463b      	mov	r3, r7
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800c280:	463b      	mov	r3, r7
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699a      	ldr	r2, [r3, #24]
 800c286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c28a:	1ad2      	subs	r2, r2, r3
 800c28c:	463b      	mov	r3, r7
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	619a      	str	r2, [r3, #24]
 800c292:	e008      	b.n	800c2a6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800c294:	463b      	mov	r3, r7
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800c29e:	463b      	mov	r3, r7
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c2a6:	1d3b      	adds	r3, r7, #4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2ae:	1d3b      	adds	r3, r7, #4
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c2be:	4413      	add	r3, r2
 800c2c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	011a      	lsls	r2, r3, #4
 800c2cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c2d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d116      	bne.n	800c310 <USB_EPStartXfer+0xf2c>
 800c2e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c306:	b29a      	uxth	r2, r3
 800c308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c30c:	801a      	strh	r2, [r3, #0]
 800c30e:	e32c      	b.n	800c96a <USB_EPStartXfer+0x1586>
 800c310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c314:	2b3e      	cmp	r3, #62	; 0x3e
 800c316:	d818      	bhi.n	800c34a <USB_EPStartXfer+0xf66>
 800c318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c31c:	085b      	lsrs	r3, r3, #1
 800c31e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <USB_EPStartXfer+0xf54>
 800c32e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c332:	3301      	adds	r3, #1
 800c334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	029b      	lsls	r3, r3, #10
 800c340:	b29a      	uxth	r2, r3
 800c342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c346:	801a      	strh	r2, [r3, #0]
 800c348:	e30f      	b.n	800c96a <USB_EPStartXfer+0x1586>
 800c34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c358:	f003 031f 	and.w	r3, r3, #31
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d104      	bne.n	800c36a <USB_EPStartXfer+0xf86>
 800c360:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c364:	3b01      	subs	r3, #1
 800c366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c36a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c36e:	b29b      	uxth	r3, r3
 800c370:	029b      	lsls	r3, r3, #10
 800c372:	b29b      	uxth	r3, r3
 800c374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c382:	801a      	strh	r2, [r3, #0]
 800c384:	e2f1      	b.n	800c96a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c386:	463b      	mov	r3, r7
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	78db      	ldrb	r3, [r3, #3]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	f040 818f 	bne.w	800c6b0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c392:	463b      	mov	r3, r7
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	785b      	ldrb	r3, [r3, #1]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d175      	bne.n	800c488 <USB_EPStartXfer+0x10a4>
 800c39c:	1d3b      	adds	r3, r7, #4
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3a4:	1d3b      	adds	r3, r7, #4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3ba:	463b      	mov	r3, r7
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	011a      	lsls	r2, r3, #4
 800c3c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c3cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3d0:	463b      	mov	r3, r7
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d116      	bne.n	800c408 <USB_EPStartXfer+0x1024>
 800c3da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3ec:	801a      	strh	r2, [r3, #0]
 800c3ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c404:	801a      	strh	r2, [r3, #0]
 800c406:	e065      	b.n	800c4d4 <USB_EPStartXfer+0x10f0>
 800c408:	463b      	mov	r3, r7
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b3e      	cmp	r3, #62	; 0x3e
 800c410:	d81a      	bhi.n	800c448 <USB_EPStartXfer+0x1064>
 800c412:	463b      	mov	r3, r7
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	085b      	lsrs	r3, r3, #1
 800c41a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c41e:	463b      	mov	r3, r7
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <USB_EPStartXfer+0x1052>
 800c42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c430:	3301      	adds	r3, #1
 800c432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	029b      	lsls	r3, r3, #10
 800c43e:	b29a      	uxth	r2, r3
 800c440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c444:	801a      	strh	r2, [r3, #0]
 800c446:	e045      	b.n	800c4d4 <USB_EPStartXfer+0x10f0>
 800c448:	463b      	mov	r3, r7
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	095b      	lsrs	r3, r3, #5
 800c450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c454:	463b      	mov	r3, r7
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	f003 031f 	and.w	r3, r3, #31
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <USB_EPStartXfer+0x1088>
 800c462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c466:	3b01      	subs	r3, #1
 800c468:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c470:	b29b      	uxth	r3, r3
 800c472:	029b      	lsls	r3, r3, #10
 800c474:	b29b      	uxth	r3, r3
 800c476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c47e:	b29a      	uxth	r2, r3
 800c480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c484:	801a      	strh	r2, [r3, #0]
 800c486:	e025      	b.n	800c4d4 <USB_EPStartXfer+0x10f0>
 800c488:	463b      	mov	r3, r7
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	785b      	ldrb	r3, [r3, #1]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d120      	bne.n	800c4d4 <USB_EPStartXfer+0x10f0>
 800c492:	1d3b      	adds	r3, r7, #4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c49a:	1d3b      	adds	r3, r7, #4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4b0:	463b      	mov	r3, r7
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	011a      	lsls	r2, r3, #4
 800c4b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4bc:	4413      	add	r3, r2
 800c4be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c4c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c4d2:	801a      	strh	r2, [r3, #0]
 800c4d4:	1d3b      	adds	r3, r7, #4
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4dc:	463b      	mov	r3, r7
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	785b      	ldrb	r3, [r3, #1]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d175      	bne.n	800c5d2 <USB_EPStartXfer+0x11ee>
 800c4e6:	1d3b      	adds	r3, r7, #4
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4ee:	1d3b      	adds	r3, r7, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4fe:	4413      	add	r3, r2
 800c500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c504:	463b      	mov	r3, r7
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	011a      	lsls	r2, r3, #4
 800c50c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c510:	4413      	add	r3, r2
 800c512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c516:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c51a:	463b      	mov	r3, r7
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d116      	bne.n	800c552 <USB_EPStartXfer+0x116e>
 800c524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c530:	b29a      	uxth	r2, r3
 800c532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c536:	801a      	strh	r2, [r3, #0]
 800c538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c548:	b29a      	uxth	r2, r3
 800c54a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c54e:	801a      	strh	r2, [r3, #0]
 800c550:	e061      	b.n	800c616 <USB_EPStartXfer+0x1232>
 800c552:	463b      	mov	r3, r7
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	2b3e      	cmp	r3, #62	; 0x3e
 800c55a:	d81a      	bhi.n	800c592 <USB_EPStartXfer+0x11ae>
 800c55c:	463b      	mov	r3, r7
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	085b      	lsrs	r3, r3, #1
 800c564:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c568:	463b      	mov	r3, r7
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d004      	beq.n	800c580 <USB_EPStartXfer+0x119c>
 800c576:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c57a:	3301      	adds	r3, #1
 800c57c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c580:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c584:	b29b      	uxth	r3, r3
 800c586:	029b      	lsls	r3, r3, #10
 800c588:	b29a      	uxth	r2, r3
 800c58a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c58e:	801a      	strh	r2, [r3, #0]
 800c590:	e041      	b.n	800c616 <USB_EPStartXfer+0x1232>
 800c592:	463b      	mov	r3, r7
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	095b      	lsrs	r3, r3, #5
 800c59a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c59e:	463b      	mov	r3, r7
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	f003 031f 	and.w	r3, r3, #31
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d104      	bne.n	800c5b6 <USB_EPStartXfer+0x11d2>
 800c5ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c5b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	029b      	lsls	r3, r3, #10
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5ce:	801a      	strh	r2, [r3, #0]
 800c5d0:	e021      	b.n	800c616 <USB_EPStartXfer+0x1232>
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	785b      	ldrb	r3, [r3, #1]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d11c      	bne.n	800c616 <USB_EPStartXfer+0x1232>
 800c5dc:	1d3b      	adds	r3, r7, #4
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5ec:	4413      	add	r3, r2
 800c5ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	011a      	lsls	r2, r3, #4
 800c5fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5fe:	4413      	add	r3, r2
 800c600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c608:	463b      	mov	r3, r7
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	b29a      	uxth	r2, r3
 800c610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c614:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c616:	463b      	mov	r3, r7
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 81a4 	beq.w	800c96a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c622:	1d3b      	adds	r3, r7, #4
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	463b      	mov	r3, r7
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c636:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c63a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <USB_EPStartXfer+0x126a>
 800c642:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10d      	bne.n	800c66a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c64e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c656:	2b00      	cmp	r3, #0
 800c658:	f040 8187 	bne.w	800c96a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c65c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800c660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 8180 	bne.w	800c96a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c66a:	1d3b      	adds	r3, r7, #4
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	463b      	mov	r3, r7
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c684:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800c688:	1d3b      	adds	r3, r7, #4
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	463b      	mov	r3, r7
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	441a      	add	r2, r3
 800c696:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800c69a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c69e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	8013      	strh	r3, [r2, #0]
 800c6ae:	e15c      	b.n	800c96a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	78db      	ldrb	r3, [r3, #3]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	f040 8155 	bne.w	800c966 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c6bc:	463b      	mov	r3, r7
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699a      	ldr	r2, [r3, #24]
 800c6c2:	463b      	mov	r3, r7
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d90e      	bls.n	800c6ea <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800c6cc:	463b      	mov	r3, r7
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800c6d6:	463b      	mov	r3, r7
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	699a      	ldr	r2, [r3, #24]
 800c6dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6e0:	1ad2      	subs	r2, r2, r3
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	619a      	str	r2, [r3, #24]
 800c6e8:	e008      	b.n	800c6fc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800c6ea:	463b      	mov	r3, r7
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d16f      	bne.n	800c7e6 <USB_EPStartXfer+0x1402>
 800c706:	1d3b      	adds	r3, r7, #4
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c70e:	1d3b      	adds	r3, r7, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c716:	b29b      	uxth	r3, r3
 800c718:	461a      	mov	r2, r3
 800c71a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c71e:	4413      	add	r3, r2
 800c720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c724:	463b      	mov	r3, r7
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	011a      	lsls	r2, r3, #4
 800c72c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c730:	4413      	add	r3, r2
 800c732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c73a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d116      	bne.n	800c770 <USB_EPStartXfer+0x138c>
 800c742:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c74e:	b29a      	uxth	r2, r3
 800c750:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c754:	801a      	strh	r2, [r3, #0]
 800c756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c766:	b29a      	uxth	r2, r3
 800c768:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c76c:	801a      	strh	r2, [r3, #0]
 800c76e:	e05f      	b.n	800c830 <USB_EPStartXfer+0x144c>
 800c770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c774:	2b3e      	cmp	r3, #62	; 0x3e
 800c776:	d818      	bhi.n	800c7aa <USB_EPStartXfer+0x13c6>
 800c778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c77c:	085b      	lsrs	r3, r3, #1
 800c77e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d004      	beq.n	800c798 <USB_EPStartXfer+0x13b4>
 800c78e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c792:	3301      	adds	r3, #1
 800c794:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	029b      	lsls	r3, r3, #10
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c7a6:	801a      	strh	r2, [r3, #0]
 800c7a8:	e042      	b.n	800c830 <USB_EPStartXfer+0x144c>
 800c7aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ae:	095b      	lsrs	r3, r3, #5
 800c7b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7b8:	f003 031f 	and.w	r3, r3, #31
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d104      	bne.n	800c7ca <USB_EPStartXfer+0x13e6>
 800c7c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c7ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	029b      	lsls	r3, r3, #10
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c7e2:	801a      	strh	r2, [r3, #0]
 800c7e4:	e024      	b.n	800c830 <USB_EPStartXfer+0x144c>
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	785b      	ldrb	r3, [r3, #1]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d11f      	bne.n	800c830 <USB_EPStartXfer+0x144c>
 800c7f0:	1d3b      	adds	r3, r7, #4
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c7f8:	1d3b      	adds	r3, r7, #4
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c800:	b29b      	uxth	r3, r3
 800c802:	461a      	mov	r2, r3
 800c804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c808:	4413      	add	r3, r2
 800c80a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c80e:	463b      	mov	r3, r7
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	011a      	lsls	r2, r3, #4
 800c816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c81a:	4413      	add	r3, r2
 800c81c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c820:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	1d3b      	adds	r3, r7, #4
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c838:	463b      	mov	r3, r7
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d16f      	bne.n	800c922 <USB_EPStartXfer+0x153e>
 800c842:	1d3b      	adds	r3, r7, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c84a:	1d3b      	adds	r3, r7, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c852:	b29b      	uxth	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c85a:	4413      	add	r3, r2
 800c85c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c860:	463b      	mov	r3, r7
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	011a      	lsls	r2, r3, #4
 800c868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c86c:	4413      	add	r3, r2
 800c86e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d116      	bne.n	800c8ac <USB_EPStartXfer+0x14c8>
 800c87e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	b29b      	uxth	r3, r3
 800c886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c890:	801a      	strh	r2, [r3, #0]
 800c892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c89e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8a8:	801a      	strh	r2, [r3, #0]
 800c8aa:	e05e      	b.n	800c96a <USB_EPStartXfer+0x1586>
 800c8ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8b0:	2b3e      	cmp	r3, #62	; 0x3e
 800c8b2:	d818      	bhi.n	800c8e6 <USB_EPStartXfer+0x1502>
 800c8b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8b8:	085b      	lsrs	r3, r3, #1
 800c8ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <USB_EPStartXfer+0x14f0>
 800c8ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c8d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	029b      	lsls	r3, r3, #10
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8e2:	801a      	strh	r2, [r3, #0]
 800c8e4:	e041      	b.n	800c96a <USB_EPStartXfer+0x1586>
 800c8e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8ea:	095b      	lsrs	r3, r3, #5
 800c8ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c8f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8f4:	f003 031f 	and.w	r3, r3, #31
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d104      	bne.n	800c906 <USB_EPStartXfer+0x1522>
 800c8fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c900:	3b01      	subs	r3, #1
 800c902:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	b29b      	uxth	r3, r3
 800c910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c918:	b29a      	uxth	r2, r3
 800c91a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c91e:	801a      	strh	r2, [r3, #0]
 800c920:	e023      	b.n	800c96a <USB_EPStartXfer+0x1586>
 800c922:	463b      	mov	r3, r7
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d11e      	bne.n	800c96a <USB_EPStartXfer+0x1586>
 800c92c:	1d3b      	adds	r3, r7, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c934:	b29b      	uxth	r3, r3
 800c936:	461a      	mov	r2, r3
 800c938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c93c:	4413      	add	r3, r2
 800c93e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c942:	463b      	mov	r3, r7
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	011a      	lsls	r2, r3, #4
 800c94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c94e:	4413      	add	r3, r2
 800c950:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c962:	801a      	strh	r2, [r3, #0]
 800c964:	e001      	b.n	800c96a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e02e      	b.n	800c9c8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c96a:	1d3b      	adds	r3, r7, #4
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	463b      	mov	r3, r7
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c984:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c988:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c98c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c990:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c994:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c998:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c99c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c9a0:	1d3b      	adds	r3, r7, #4
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	463b      	mov	r3, r7
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	441a      	add	r2, r3
 800c9ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c9b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	785b      	ldrb	r3, [r3, #1]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d020      	beq.n	800ca26 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9fa:	81bb      	strh	r3, [r7, #12]
 800c9fc:	89bb      	ldrh	r3, [r7, #12]
 800c9fe:	f083 0310 	eor.w	r3, r3, #16
 800ca02:	81bb      	strh	r3, [r7, #12]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	441a      	add	r2, r3
 800ca0e:	89bb      	ldrh	r3, [r7, #12]
 800ca10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	8013      	strh	r3, [r2, #0]
 800ca24:	e01f      	b.n	800ca66 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca3c:	81fb      	strh	r3, [r7, #14]
 800ca3e:	89fb      	ldrh	r3, [r7, #14]
 800ca40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca44:	81fb      	strh	r3, [r7, #14]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	441a      	add	r2, r3
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bc80      	pop	{r7}
 800ca70:	4770      	bx	lr

0800ca72 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b087      	sub	sp, #28
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	7b1b      	ldrb	r3, [r3, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f040 809d 	bne.w	800cbc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	785b      	ldrb	r3, [r3, #1]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d04c      	beq.n	800cb28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	823b      	strh	r3, [r7, #16]
 800ca9c:	8a3b      	ldrh	r3, [r7, #16]
 800ca9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d01b      	beq.n	800cade <USB_EPClearStall+0x6c>
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cabc:	81fb      	strh	r3, [r7, #14]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	441a      	add	r2, r3
 800cac8:	89fb      	ldrh	r3, [r7, #14]
 800caca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cada:	b29b      	uxth	r3, r3
 800cadc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	78db      	ldrb	r3, [r3, #3]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d06c      	beq.n	800cbc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cafc:	81bb      	strh	r3, [r7, #12]
 800cafe:	89bb      	ldrh	r3, [r7, #12]
 800cb00:	f083 0320 	eor.w	r3, r3, #32
 800cb04:	81bb      	strh	r3, [r7, #12]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	441a      	add	r2, r3
 800cb10:	89bb      	ldrh	r3, [r7, #12]
 800cb12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	8013      	strh	r3, [r2, #0]
 800cb26:	e04b      	b.n	800cbc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	82fb      	strh	r3, [r7, #22]
 800cb36:	8afb      	ldrh	r3, [r7, #22]
 800cb38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01b      	beq.n	800cb78 <USB_EPClearStall+0x106>
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb56:	82bb      	strh	r3, [r7, #20]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	441a      	add	r2, r3
 800cb62:	8abb      	ldrh	r3, [r7, #20]
 800cb64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb8e:	827b      	strh	r3, [r7, #18]
 800cb90:	8a7b      	ldrh	r3, [r7, #18]
 800cb92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb96:	827b      	strh	r3, [r7, #18]
 800cb98:	8a7b      	ldrh	r3, [r7, #18]
 800cb9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb9e:	827b      	strh	r3, [r7, #18]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	441a      	add	r2, r3
 800cbaa:	8a7b      	ldrh	r3, [r7, #18]
 800cbac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	371c      	adds	r7, #28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr

0800cbcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2280      	movs	r2, #128	; 0x80
 800cbe2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr

0800cbf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b083      	sub	sp, #12
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bc80      	pop	{r7}
 800cc04:	4770      	bx	lr

0800cc06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cc06:	b480      	push	{r7}
 800cc08:	b085      	sub	sp, #20
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cc18:	68fb      	ldr	r3, [r7, #12]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr

0800cc24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b08d      	sub	sp, #52	; 0x34
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4611      	mov	r1, r2
 800cc30:	461a      	mov	r2, r3
 800cc32:	460b      	mov	r3, r1
 800cc34:	80fb      	strh	r3, [r7, #6]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cc3a:	88bb      	ldrh	r3, [r7, #4]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	085b      	lsrs	r3, r3, #1
 800cc40:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	005a      	lsls	r2, r3, #1
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc5c:	e01e      	b.n	800cc9c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	3301      	adds	r3, #1
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	461a      	mov	r2, r3
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	3302      	adds	r3, #2
 800cc88:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	3301      	adds	r3, #1
 800cc94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1dd      	bne.n	800cc5e <USB_WritePMA+0x3a>
  }
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	3734      	adds	r7, #52	; 0x34
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bc80      	pop	{r7}
 800ccac:	4770      	bx	lr

0800ccae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b08b      	sub	sp, #44	; 0x2c
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	461a      	mov	r2, r3
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	80fb      	strh	r3, [r7, #6]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ccc4:	88bb      	ldrh	r3, [r7, #4]
 800ccc6:	085b      	lsrs	r3, r3, #1
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	005a      	lsls	r2, r3, #1
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cce0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
 800cce6:	e01b      	b.n	800cd20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	3302      	adds	r3, #2
 800ccf4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	3301      	adds	r3, #1
 800cd02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	0a1b      	lsrs	r3, r3, #8
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	3301      	adds	r3, #1
 800cd12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	3302      	adds	r3, #2
 800cd18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e0      	bne.n	800cce8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800cd26:	88bb      	ldrh	r3, [r7, #4]
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d007      	beq.n	800cd42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	701a      	strb	r2, [r3, #0]
  }
}
 800cd42:	bf00      	nop
 800cd44:	372c      	adds	r7, #44	; 0x2c
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bc80      	pop	{r7}
 800cd4a:	4770      	bx	lr

0800cd4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cd50:	4904      	ldr	r1, [pc, #16]	; (800cd64 <MX_FATFS_Init+0x18>)
 800cd52:	4805      	ldr	r0, [pc, #20]	; (800cd68 <MX_FATFS_Init+0x1c>)
 800cd54:	f001 fba0 	bl	800e498 <FATFS_LinkDriver>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4b03      	ldr	r3, [pc, #12]	; (800cd6c <MX_FATFS_Init+0x20>)
 800cd5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cd60:	bf00      	nop
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	2000097c 	.word	0x2000097c
 800cd68:	200000a0 	.word	0x200000a0
 800cd6c:	20000980 	.word	0x20000980

0800cd70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800cd7a:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <USER_initialize+0x20>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cd80:	4b03      	ldr	r3, [pc, #12]	; (800cd90 <USER_initialize+0x20>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc80      	pop	{r7}
 800cd8e:	4770      	bx	lr
 800cd90:	2000009c 	.word	0x2000009c

0800cd94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800cd9e:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <USER_status+0x20>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cda4:	4b03      	ldr	r3, [pc, #12]	; (800cdb4 <USER_status+0x20>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr
 800cdb4:	2000009c 	.word	0x2000009c

0800cdb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800cdc8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bc80      	pop	{r7}
 800cdd2:	4770      	bx	lr

0800cdd4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	607a      	str	r2, [r7, #4]
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800cde4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3714      	adds	r7, #20
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bc80      	pop	{r7}
 800cdee:	4770      	bx	lr

0800cdf0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	603a      	str	r2, [r7, #0]
 800cdfa:	71fb      	strb	r3, [r7, #7]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	73fb      	strb	r3, [r7, #15]
    return res;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3714      	adds	r7, #20
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bc80      	pop	{r7}
 800ce0e:	4770      	bx	lr

0800ce10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7c1b      	ldrb	r3, [r3, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d115      	bne.n	800ce54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	2181      	movs	r1, #129	; 0x81
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 fef0 	bl	800ec16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ce3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce40:	2202      	movs	r2, #2
 800ce42:	2101      	movs	r1, #1
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f001 fee6 	bl	800ec16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800ce52:	e012      	b.n	800ce7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce54:	2340      	movs	r3, #64	; 0x40
 800ce56:	2202      	movs	r2, #2
 800ce58:	2181      	movs	r1, #129	; 0x81
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 fedb 	bl	800ec16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ce66:	2340      	movs	r3, #64	; 0x40
 800ce68:	2202      	movs	r2, #2
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f001 fed2 	bl	800ec16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce7a:	2308      	movs	r3, #8
 800ce7c:	2203      	movs	r2, #3
 800ce7e:	2182      	movs	r1, #130	; 0x82
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f001 fec8 	bl	800ec16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ce8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ce90:	f001 ffe8 	bl	800ee64 <USBD_static_malloc>
 800ce94:	4602      	mov	r2, r0
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800cea6:	2301      	movs	r3, #1
 800cea8:	73fb      	strb	r3, [r7, #15]
 800ceaa:	e026      	b.n	800cefa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ceb2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7c1b      	ldrb	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d109      	bne.n	800ceea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cedc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cee0:	2101      	movs	r1, #1
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f001 ff88 	bl	800edf8 <USBD_LL_PrepareReceive>
 800cee8:	e007      	b.n	800cefa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cef0:	2340      	movs	r3, #64	; 0x40
 800cef2:	2101      	movs	r1, #1
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f001 ff7f 	bl	800edf8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cf14:	2181      	movs	r1, #129	; 0x81
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f001 fea3 	bl	800ec62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cf22:	2101      	movs	r1, #1
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f001 fe9c 	bl	800ec62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cf32:	2182      	movs	r1, #130	; 0x82
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f001 fe94 	bl	800ec62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00e      	beq.n	800cf68 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f001 ff8e 	bl	800ee7c <USBD_static_free>
    pdev->pClassData = NULL;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b086      	sub	sp, #24
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf82:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d039      	beq.n	800d010 <USBD_CDC_Setup+0x9e>
 800cf9c:	2b20      	cmp	r3, #32
 800cf9e:	d17f      	bne.n	800d0a0 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	88db      	ldrh	r3, [r3, #6]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d029      	beq.n	800cffc <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	b25b      	sxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	da11      	bge.n	800cfd6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800cfbe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	88d2      	ldrh	r2, [r2, #6]
 800cfc4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cfc6:	6939      	ldr	r1, [r7, #16]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	88db      	ldrh	r3, [r3, #6]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 f993 	bl	800e2fa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800cfd4:	e06b      	b.n	800d0ae <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	785a      	ldrb	r2, [r3, #1]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	88db      	ldrh	r3, [r3, #6]
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cfec:	6939      	ldr	r1, [r7, #16]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	88db      	ldrh	r3, [r3, #6]
 800cff2:	461a      	mov	r2, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f001 f9ae 	bl	800e356 <USBD_CtlPrepareRx>
    break;
 800cffa:	e058      	b.n	800d0ae <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	7850      	ldrb	r0, [r2, #1]
 800d008:	2200      	movs	r2, #0
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	4798      	blx	r3
    break;
 800d00e:	e04e      	b.n	800d0ae <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	785b      	ldrb	r3, [r3, #1]
 800d014:	2b0b      	cmp	r3, #11
 800d016:	d02e      	beq.n	800d076 <USBD_CDC_Setup+0x104>
 800d018:	2b0b      	cmp	r3, #11
 800d01a:	dc38      	bgt.n	800d08e <USBD_CDC_Setup+0x11c>
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <USBD_CDC_Setup+0xb4>
 800d020:	2b0a      	cmp	r3, #10
 800d022:	d014      	beq.n	800d04e <USBD_CDC_Setup+0xdc>
 800d024:	e033      	b.n	800d08e <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d107      	bne.n	800d040 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d030:	f107 030c 	add.w	r3, r7, #12
 800d034:	2202      	movs	r2, #2
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f95e 	bl	800e2fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d03e:	e02e      	b.n	800d09e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f001 f8ef 	bl	800e226 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d048:	2302      	movs	r3, #2
 800d04a:	75fb      	strb	r3, [r7, #23]
      break;
 800d04c:	e027      	b.n	800d09e <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d054:	2b03      	cmp	r3, #3
 800d056:	d107      	bne.n	800d068 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d058:	f107 030f 	add.w	r3, r7, #15
 800d05c:	2201      	movs	r2, #1
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f001 f94a 	bl	800e2fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d066:	e01a      	b.n	800d09e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f001 f8db 	bl	800e226 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d070:	2302      	movs	r3, #2
 800d072:	75fb      	strb	r3, [r7, #23]
      break;
 800d074:	e013      	b.n	800d09e <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d00d      	beq.n	800d09c <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 f8cf 	bl	800e226 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d088:	2302      	movs	r3, #2
 800d08a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d08c:	e006      	b.n	800d09c <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 f8c8 	bl	800e226 <USBD_CtlError>
      ret = USBD_FAIL;
 800d096:	2302      	movs	r3, #2
 800d098:	75fb      	strb	r3, [r7, #23]
      break;
 800d09a:	e000      	b.n	800d09e <USBD_CDC_Setup+0x12c>
      break;
 800d09c:	bf00      	nop
    }
    break;
 800d09e:	e006      	b.n	800d0ae <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f001 f8bf 	bl	800e226 <USBD_CtlError>
    ret = USBD_FAIL;
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	75fb      	strb	r3, [r7, #23]
    break;
 800d0ac:	bf00      	nop
  }

  return ret;
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3718      	adds	r7, #24
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d0d2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d03a      	beq.n	800d154 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d0de:	78fa      	ldrb	r2, [r7, #3]
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	440b      	add	r3, r1
 800d0ec:	331c      	adds	r3, #28
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d029      	beq.n	800d148 <USBD_CDC_DataIn+0x90>
 800d0f4:	78fa      	ldrb	r2, [r7, #3]
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	331c      	adds	r3, #28
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	78f9      	ldrb	r1, [r7, #3]
 800d108:	68b8      	ldr	r0, [r7, #8]
 800d10a:	460b      	mov	r3, r1
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	00db      	lsls	r3, r3, #3
 800d112:	4403      	add	r3, r0
 800d114:	3338      	adds	r3, #56	; 0x38
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	fbb2 f1f3 	udiv	r1, r2, r3
 800d11c:	fb03 f301 	mul.w	r3, r3, r1
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d110      	bne.n	800d148 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d126:	78fa      	ldrb	r2, [r7, #3]
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	4613      	mov	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4413      	add	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	440b      	add	r3, r1
 800d134:	331c      	adds	r3, #28
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d13a:	78f9      	ldrb	r1, [r7, #3]
 800d13c:	2300      	movs	r3, #0
 800d13e:	2200      	movs	r2, #0
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 fe36 	bl	800edb2 <USBD_LL_Transmit>
 800d146:	e003      	b.n	800d150 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	e000      	b.n	800d156 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d154:	2302      	movs	r3, #2
  }
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d170:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d172:	78fb      	ldrb	r3, [r7, #3]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 fe61 	bl	800ee3e <USBD_LL_GetRxDataSize>
 800d17c:	4602      	mov	r2, r0
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00d      	beq.n	800d1aa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4798      	blx	r3

    return USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e000      	b.n	800d1ac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d1aa:	2302      	movs	r3, #2
  }
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d1c2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d015      	beq.n	800d1fa <USBD_CDC_EP0_RxReady+0x46>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d1d4:	2bff      	cmp	r3, #255	; 0xff
 800d1d6:	d010      	beq.n	800d1fa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d1e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d1ee:	b292      	uxth	r2, r2
 800d1f0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	22ff      	movs	r2, #255	; 0xff
 800d1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2243      	movs	r2, #67	; 0x43
 800d210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d212:	4b03      	ldr	r3, [pc, #12]	; (800d220 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	bc80      	pop	{r7}
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	2000013c 	.word	0x2000013c

0800d224 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2243      	movs	r2, #67	; 0x43
 800d230:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d232:	4b03      	ldr	r3, [pc, #12]	; (800d240 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	bc80      	pop	{r7}
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	200000f8 	.word	0x200000f8

0800d244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2243      	movs	r2, #67	; 0x43
 800d250:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d252:	4b03      	ldr	r3, [pc, #12]	; (800d260 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d254:	4618      	mov	r0, r3
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	bc80      	pop	{r7}
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20000180 	.word	0x20000180

0800d264 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	220a      	movs	r2, #10
 800d270:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d272:	4b03      	ldr	r3, [pc, #12]	; (800d280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	200000b4 	.word	0x200000b4

0800d284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d28e:	2302      	movs	r3, #2
 800d290:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d005      	beq.n	800d2a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bc80      	pop	{r7}
 800d2ae:	4770      	bx	lr

0800d2b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d2ce:	88fa      	ldrh	r2, [r7, #6]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	371c      	adds	r7, #28
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bc80      	pop	{r7}
 800d2e0:	4770      	bx	lr

0800d2e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b085      	sub	sp, #20
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	bc80      	pop	{r7}
 800d306:	4770      	bx	lr

0800d308 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d316:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d01c      	beq.n	800d35c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d115      	bne.n	800d358 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2201      	movs	r2, #1
 800d330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	2181      	movs	r1, #129	; 0x81
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f001 fd2f 	bl	800edb2 <USBD_LL_Transmit>

      return USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	e002      	b.n	800d35e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d358:	2301      	movs	r3, #1
 800d35a:	e000      	b.n	800d35e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d35c:	2302      	movs	r3, #2
  }
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b084      	sub	sp, #16
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d374:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d017      	beq.n	800d3b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7c1b      	ldrb	r3, [r3, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d38e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d392:	2101      	movs	r1, #1
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f001 fd2f 	bl	800edf8 <USBD_LL_PrepareReceive>
 800d39a:	e007      	b.n	800d3ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	2101      	movs	r1, #1
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f001 fd26 	bl	800edf8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e000      	b.n	800d3b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d3b0:	2302      	movs	r3, #2
  }
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	e01a      	b.n	800d408 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d003      	beq.n	800d3f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	79fa      	ldrb	r2, [r7, #7]
 800d3fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f001 fb93 	bl	800eb2c <USBD_LL_Init>

  return USBD_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d006      	beq.n	800d432 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e001      	b.n	800d436 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d432:	2302      	movs	r3, #2
 800d434:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d436:	7bfb      	ldrb	r3, [r7, #15]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bc80      	pop	{r7}
 800d440:	4770      	bx	lr

0800d442 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f001 fbc8 	bl	800ebe0 <USBD_LL_Start>

  return USBD_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d45a:	b480      	push	{r7}
 800d45c:	b083      	sub	sp, #12
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	bc80      	pop	{r7}
 800d46c:	4770      	bx	lr

0800d46e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d47a:	2302      	movs	r3, #2
 800d47c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00c      	beq.n	800d4a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	78fa      	ldrb	r2, [r7, #3]
 800d492:	4611      	mov	r1, r2
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	4798      	blx	r3
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	78fa      	ldrb	r2, [r7, #3]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	4798      	blx	r3
  return USBD_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fe62 	bl	800e1ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d506:	f003 031f 	and.w	r3, r3, #31
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d016      	beq.n	800d53c <USBD_LL_SetupStage+0x6a>
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d81c      	bhi.n	800d54c <USBD_LL_SetupStage+0x7a>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <USBD_LL_SetupStage+0x4a>
 800d516:	2b01      	cmp	r3, #1
 800d518:	d008      	beq.n	800d52c <USBD_LL_SetupStage+0x5a>
 800d51a:	e017      	b.n	800d54c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f9c5 	bl	800d8b4 <USBD_StdDevReq>
    break;
 800d52a:	e01a      	b.n	800d562 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fa27 	bl	800d988 <USBD_StdItfReq>
    break;
 800d53a:	e012      	b.n	800d562 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 fa67 	bl	800da18 <USBD_StdEPReq>
    break;
 800d54a:	e00a      	b.n	800d562 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d552:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d556:	b2db      	uxtb	r3, r3
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 fba0 	bl	800eca0 <USBD_LL_StallEP>
    break;
 800d560:	bf00      	nop
  }

  return USBD_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	460b      	mov	r3, r1
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d14b      	bne.n	800d618 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d586:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d58e:	2b03      	cmp	r3, #3
 800d590:	d134      	bne.n	800d5fc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	68da      	ldr	r2, [r3, #12]
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d919      	bls.n	800d5d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	1ad2      	subs	r2, r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	68da      	ldr	r2, [r3, #12]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d203      	bcs.n	800d5c0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	e002      	b.n	800d5c6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f000 fee1 	bl	800e392 <USBD_CtlContinueRx>
 800d5d0:	e038      	b.n	800d644 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00a      	beq.n	800d5f4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d105      	bne.n	800d5f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 fede 	bl	800e3b6 <USBD_CtlSendStatus>
 800d5fa:	e023      	b.n	800d644 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d602:	2b05      	cmp	r3, #5
 800d604:	d11e      	bne.n	800d644 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2200      	movs	r2, #0
 800d60a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d60e:	2100      	movs	r1, #0
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f001 fb45 	bl	800eca0 <USBD_LL_StallEP>
 800d616:	e015      	b.n	800d644 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00d      	beq.n	800d640 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d108      	bne.n	800d640 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	7afa      	ldrb	r2, [r7, #11]
 800d638:	4611      	mov	r1, r2
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	4798      	blx	r3
 800d63e:	e001      	b.n	800d644 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d640:	2302      	movs	r3, #2
 800d642:	e000      	b.n	800d646 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b086      	sub	sp, #24
 800d652:	af00      	add	r7, sp, #0
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	460b      	mov	r3, r1
 800d658:	607a      	str	r2, [r7, #4]
 800d65a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d65c:	7afb      	ldrb	r3, [r7, #11]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d17f      	bne.n	800d762 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3314      	adds	r3, #20
 800d666:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d15c      	bne.n	800d72c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	68da      	ldr	r2, [r3, #12]
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d915      	bls.n	800d6aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	1ad2      	subs	r2, r2, r3
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	b29b      	uxth	r3, r3
 800d692:	461a      	mov	r2, r3
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 fe4b 	bl	800e332 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d69c:	2300      	movs	r3, #0
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f001 fba8 	bl	800edf8 <USBD_LL_PrepareReceive>
 800d6a8:	e04e      	b.n	800d748 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	6912      	ldr	r2, [r2, #16]
 800d6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6b6:	fb02 f201 	mul.w	r2, r2, r1
 800d6ba:	1a9b      	subs	r3, r3, r2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d11c      	bne.n	800d6fa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	689a      	ldr	r2, [r3, #8]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d316      	bcc.n	800d6fa <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	689a      	ldr	r2, [r3, #8]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d20f      	bcs.n	800d6fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 fe27 	bl	800e332 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f001 fb80 	bl	800edf8 <USBD_LL_PrepareReceive>
 800d6f8:	e026      	b.n	800d748 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d105      	bne.n	800d71c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d71c:	2180      	movs	r1, #128	; 0x80
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f001 fabe 	bl	800eca0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 fe59 	bl	800e3dc <USBD_CtlReceiveStatus>
 800d72a:	e00d      	b.n	800d748 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d732:	2b04      	cmp	r3, #4
 800d734:	d004      	beq.n	800d740 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d740:	2180      	movs	r1, #128	; 0x80
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f001 faac 	bl	800eca0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d11d      	bne.n	800d78e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f7ff fe81 	bl	800d45a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d760:	e015      	b.n	800d78e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d768:	695b      	ldr	r3, [r3, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00d      	beq.n	800d78a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d774:	2b03      	cmp	r3, #3
 800d776:	d108      	bne.n	800d78a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	7afa      	ldrb	r2, [r7, #11]
 800d782:	4611      	mov	r1, r2
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	4798      	blx	r3
 800d788:	e001      	b.n	800d78e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d78a:	2302      	movs	r3, #2
 800d78c:	e000      	b.n	800d790 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f001 fa35 	bl	800ec16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2240      	movs	r2, #64	; 0x40
 800d7b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7bc:	2340      	movs	r3, #64	; 0x40
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2180      	movs	r1, #128	; 0x80
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f001 fa27 	bl	800ec16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2240      	movs	r2, #64	; 0x40
 800d7d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d009      	beq.n	800d810 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	6852      	ldr	r2, [r2, #4]
 800d808:	b2d2      	uxtb	r2, r2
 800d80a:	4611      	mov	r1, r2
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	4798      	blx	r3
  }

  return USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d81a:	b480      	push	{r7}
 800d81c:	b083      	sub	sp, #12
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	78fa      	ldrb	r2, [r7, #3]
 800d82a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	370c      	adds	r7, #12
 800d832:	46bd      	mov	sp, r7
 800d834:	bc80      	pop	{r7}
 800d836:	4770      	bx	lr

0800d838 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2204      	movs	r2, #4
 800d850:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bc80      	pop	{r7}
 800d85e:	4770      	bx	lr

0800d860 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bc80      	pop	{r7}
 800d87e:	4770      	bx	lr

0800d880 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d10b      	bne.n	800d8aa <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d005      	beq.n	800d8aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ca:	2b40      	cmp	r3, #64	; 0x40
 800d8cc:	d005      	beq.n	800d8da <USBD_StdDevReq+0x26>
 800d8ce:	2b40      	cmp	r3, #64	; 0x40
 800d8d0:	d84f      	bhi.n	800d972 <USBD_StdDevReq+0xbe>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d009      	beq.n	800d8ea <USBD_StdDevReq+0x36>
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d14b      	bne.n	800d972 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	4798      	blx	r3
    break;
 800d8e8:	e048      	b.n	800d97c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	785b      	ldrb	r3, [r3, #1]
 800d8ee:	2b09      	cmp	r3, #9
 800d8f0:	d839      	bhi.n	800d966 <USBD_StdDevReq+0xb2>
 800d8f2:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <USBD_StdDevReq+0x44>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d949 	.word	0x0800d949
 800d8fc:	0800d95d 	.word	0x0800d95d
 800d900:	0800d967 	.word	0x0800d967
 800d904:	0800d953 	.word	0x0800d953
 800d908:	0800d967 	.word	0x0800d967
 800d90c:	0800d92b 	.word	0x0800d92b
 800d910:	0800d921 	.word	0x0800d921
 800d914:	0800d967 	.word	0x0800d967
 800d918:	0800d93f 	.word	0x0800d93f
 800d91c:	0800d935 	.word	0x0800d935
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f9da 	bl	800dcdc <USBD_GetDescriptor>
      break;
 800d928:	e022      	b.n	800d970 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 facf 	bl	800ded0 <USBD_SetAddress>
      break;
 800d932:	e01d      	b.n	800d970 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fb0e 	bl	800df58 <USBD_SetConfig>
      break;
 800d93c:	e018      	b.n	800d970 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d93e:	6839      	ldr	r1, [r7, #0]
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fb97 	bl	800e074 <USBD_GetConfig>
      break;
 800d946:	e013      	b.n	800d970 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fbc7 	bl	800e0de <USBD_GetStatus>
      break;
 800d950:	e00e      	b.n	800d970 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fbf5 	bl	800e144 <USBD_SetFeature>
      break;
 800d95a:	e009      	b.n	800d970 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fc04 	bl	800e16c <USBD_ClrFeature>
      break;
 800d964:	e004      	b.n	800d970 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fc5c 	bl	800e226 <USBD_CtlError>
      break;
 800d96e:	bf00      	nop
    }
    break;
 800d970:	e004      	b.n	800d97c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fc56 	bl	800e226 <USBD_CtlError>
    break;
 800d97a:	bf00      	nop
  }

  return ret;
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop

0800d988 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d99e:	2b40      	cmp	r3, #64	; 0x40
 800d9a0:	d005      	beq.n	800d9ae <USBD_StdItfReq+0x26>
 800d9a2:	2b40      	cmp	r3, #64	; 0x40
 800d9a4:	d82e      	bhi.n	800da04 <USBD_StdItfReq+0x7c>
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <USBD_StdItfReq+0x26>
 800d9aa:	2b20      	cmp	r3, #32
 800d9ac:	d12a      	bne.n	800da04 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d81d      	bhi.n	800d9f6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	889b      	ldrh	r3, [r3, #4]
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d813      	bhi.n	800d9ec <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	4798      	blx	r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	88db      	ldrh	r3, [r3, #6]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d110      	bne.n	800da00 <USBD_StdItfReq+0x78>
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10d      	bne.n	800da00 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fce6 	bl	800e3b6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d9ea:	e009      	b.n	800da00 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 fc19 	bl	800e226 <USBD_CtlError>
      break;
 800d9f4:	e004      	b.n	800da00 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fc14 	bl	800e226 <USBD_CtlError>
      break;
 800d9fe:	e000      	b.n	800da02 <USBD_StdItfReq+0x7a>
      break;
 800da00:	bf00      	nop
    }
    break;
 800da02:	e004      	b.n	800da0e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800da04:	6839      	ldr	r1, [r7, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fc0d 	bl	800e226 <USBD_CtlError>
    break;
 800da0c:	bf00      	nop
  }

  return USBD_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	889b      	ldrh	r3, [r3, #4]
 800da2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	d007      	beq.n	800da48 <USBD_StdEPReq+0x30>
 800da38:	2b40      	cmp	r3, #64	; 0x40
 800da3a:	f200 8144 	bhi.w	800dcc6 <USBD_StdEPReq+0x2ae>
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00a      	beq.n	800da58 <USBD_StdEPReq+0x40>
 800da42:	2b20      	cmp	r3, #32
 800da44:	f040 813f 	bne.w	800dcc6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	4798      	blx	r3
    break;
 800da56:	e13b      	b.n	800dcd0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da60:	2b20      	cmp	r3, #32
 800da62:	d10a      	bne.n	800da7a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	4798      	blx	r3
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]

      return ret;
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	e12b      	b.n	800dcd2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	785b      	ldrb	r3, [r3, #1]
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d007      	beq.n	800da92 <USBD_StdEPReq+0x7a>
 800da82:	2b03      	cmp	r3, #3
 800da84:	f300 8119 	bgt.w	800dcba <USBD_StdEPReq+0x2a2>
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d072      	beq.n	800db72 <USBD_StdEPReq+0x15a>
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d03a      	beq.n	800db06 <USBD_StdEPReq+0xee>
 800da90:	e113      	b.n	800dcba <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d002      	beq.n	800daa2 <USBD_StdEPReq+0x8a>
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d015      	beq.n	800dacc <USBD_StdEPReq+0xb4>
 800daa0:	e02b      	b.n	800dafa <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00c      	beq.n	800dac2 <USBD_StdEPReq+0xaa>
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	2b80      	cmp	r3, #128	; 0x80
 800daac:	d009      	beq.n	800dac2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f001 f8f4 	bl	800eca0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800dab8:	2180      	movs	r1, #128	; 0x80
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 f8f0 	bl	800eca0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dac0:	e020      	b.n	800db04 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fbae 	bl	800e226 <USBD_CtlError>
        break;
 800daca:	e01b      	b.n	800db04 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	885b      	ldrh	r3, [r3, #2]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10e      	bne.n	800daf2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00b      	beq.n	800daf2 <USBD_StdEPReq+0xda>
 800dada:	7bbb      	ldrb	r3, [r7, #14]
 800dadc:	2b80      	cmp	r3, #128	; 0x80
 800dade:	d008      	beq.n	800daf2 <USBD_StdEPReq+0xda>
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	88db      	ldrh	r3, [r3, #6]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d104      	bne.n	800daf2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 f8d7 	bl	800eca0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fc5f 	bl	800e3b6 <USBD_CtlSendStatus>

        break;
 800daf8:	e004      	b.n	800db04 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fb92 	bl	800e226 <USBD_CtlError>
        break;
 800db02:	bf00      	nop
      }
      break;
 800db04:	e0de      	b.n	800dcc4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d002      	beq.n	800db16 <USBD_StdEPReq+0xfe>
 800db10:	2b03      	cmp	r3, #3
 800db12:	d015      	beq.n	800db40 <USBD_StdEPReq+0x128>
 800db14:	e026      	b.n	800db64 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00c      	beq.n	800db36 <USBD_StdEPReq+0x11e>
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	2b80      	cmp	r3, #128	; 0x80
 800db20:	d009      	beq.n	800db36 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800db22:	7bbb      	ldrb	r3, [r7, #14]
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 f8ba 	bl	800eca0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800db2c:	2180      	movs	r1, #128	; 0x80
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f001 f8b6 	bl	800eca0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800db34:	e01c      	b.n	800db70 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb74 	bl	800e226 <USBD_CtlError>
        break;
 800db3e:	e017      	b.n	800db70 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	885b      	ldrh	r3, [r3, #2]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d112      	bne.n	800db6e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800db48:	7bbb      	ldrb	r3, [r7, #14]
 800db4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f001 f8c1 	bl	800ecde <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fc2a 	bl	800e3b6 <USBD_CtlSendStatus>
        }
        break;
 800db62:	e004      	b.n	800db6e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fb5d 	bl	800e226 <USBD_CtlError>
        break;
 800db6c:	e000      	b.n	800db70 <USBD_StdEPReq+0x158>
        break;
 800db6e:	bf00      	nop
      }
      break;
 800db70:	e0a8      	b.n	800dcc4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d002      	beq.n	800db82 <USBD_StdEPReq+0x16a>
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	d031      	beq.n	800dbe4 <USBD_StdEPReq+0x1cc>
 800db80:	e095      	b.n	800dcae <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <USBD_StdEPReq+0x180>
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	2b80      	cmp	r3, #128	; 0x80
 800db8c:	d004      	beq.n	800db98 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fb48 	bl	800e226 <USBD_CtlError>
          break;
 800db96:	e08f      	b.n	800dcb8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800db98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	da0b      	bge.n	800dbb8 <USBD_StdEPReq+0x1a0>
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
 800dba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dba6:	4613      	mov	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	3310      	adds	r3, #16
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	e00a      	b.n	800dbce <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	4413      	add	r3, r2
 800dbce:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fb8c 	bl	800e2fa <USBD_CtlSendData>
          break;
 800dbe2:	e069      	b.n	800dcb8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800dbe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	da11      	bge.n	800dc10 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	f003 020f 	and.w	r2, r3, #15
 800dbf2:	6879      	ldr	r1, [r7, #4]
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	440b      	add	r3, r1
 800dbfe:	3318      	adds	r3, #24
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d117      	bne.n	800dc36 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fb0c 	bl	800e226 <USBD_CtlError>
            break;
 800dc0e:	e053      	b.n	800dcb8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	f003 020f 	and.w	r2, r3, #15
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4413      	add	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	440b      	add	r3, r1
 800dc22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d104      	bne.n	800dc36 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 faf9 	bl	800e226 <USBD_CtlError>
            break;
 800dc34:	e040      	b.n	800dcb8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dc36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da0b      	bge.n	800dc56 <USBD_StdEPReq+0x23e>
 800dc3e:	7bbb      	ldrb	r3, [r7, #14]
 800dc40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc44:	4613      	mov	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	4413      	add	r3, r2
 800dc52:	3304      	adds	r3, #4
 800dc54:	e00a      	b.n	800dc6c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dc56:	7bbb      	ldrb	r3, [r7, #14]
 800dc58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <USBD_StdEPReq+0x262>
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
 800dc76:	2b80      	cmp	r3, #128	; 0x80
 800dc78:	d103      	bne.n	800dc82 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	e00e      	b.n	800dca0 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f001 f848 	bl	800ed1c <USBD_LL_IsStallEP>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2201      	movs	r2, #1
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	e002      	b.n	800dca0 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2202      	movs	r2, #2
 800dca4:	4619      	mov	r1, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fb27 	bl	800e2fa <USBD_CtlSendData>
          break;
 800dcac:	e004      	b.n	800dcb8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fab8 	bl	800e226 <USBD_CtlError>
        break;
 800dcb6:	bf00      	nop
      }
      break;
 800dcb8:	e004      	b.n	800dcc4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fab2 	bl	800e226 <USBD_CtlError>
      break;
 800dcc2:	bf00      	nop
    }
    break;
 800dcc4:	e004      	b.n	800dcd0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 faac 	bl	800e226 <USBD_CtlError>
    break;
 800dcce:	bf00      	nop
  }

  return ret;
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
	...

0800dcdc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	885b      	ldrh	r3, [r3, #2]
 800dcea:	0a1b      	lsrs	r3, r3, #8
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	2b06      	cmp	r3, #6
 800dcf2:	f200 80c9 	bhi.w	800de88 <USBD_GetDescriptor+0x1ac>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <USBD_GetDescriptor+0x20>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd19 	.word	0x0800dd19
 800dd00:	0800dd31 	.word	0x0800dd31
 800dd04:	0800dd71 	.word	0x0800dd71
 800dd08:	0800de89 	.word	0x0800de89
 800dd0c:	0800de89 	.word	0x0800de89
 800dd10:	0800de35 	.word	0x0800de35
 800dd14:	0800de5b 	.word	0x0800de5b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	7c12      	ldrb	r2, [r2, #16]
 800dd24:	f107 010a 	add.w	r1, r7, #10
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	60f8      	str	r0, [r7, #12]
    break;
 800dd2e:	e0b0      	b.n	800de92 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7c1b      	ldrb	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10d      	bne.n	800dd54 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd40:	f107 020a 	add.w	r2, r7, #10
 800dd44:	4610      	mov	r0, r2
 800dd46:	4798      	blx	r3
 800dd48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	2202      	movs	r2, #2
 800dd50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800dd52:	e09e      	b.n	800de92 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	f107 020a 	add.w	r2, r7, #10
 800dd60:	4610      	mov	r0, r2
 800dd62:	4798      	blx	r3
 800dd64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	701a      	strb	r2, [r3, #0]
    break;
 800dd6e:	e090      	b.n	800de92 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	885b      	ldrh	r3, [r3, #2]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d856      	bhi.n	800de28 <USBD_GetDescriptor+0x14c>
 800dd7a:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <USBD_GetDescriptor+0xa4>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800dd99 	.word	0x0800dd99
 800dd84:	0800ddb1 	.word	0x0800ddb1
 800dd88:	0800ddc9 	.word	0x0800ddc9
 800dd8c:	0800dde1 	.word	0x0800dde1
 800dd90:	0800ddf9 	.word	0x0800ddf9
 800dd94:	0800de11 	.word	0x0800de11
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	7c12      	ldrb	r2, [r2, #16]
 800dda4:	f107 010a 	add.w	r1, r7, #10
 800dda8:	4610      	mov	r0, r2
 800ddaa:	4798      	blx	r3
 800ddac:	60f8      	str	r0, [r7, #12]
      break;
 800ddae:	e040      	b.n	800de32 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7c12      	ldrb	r2, [r2, #16]
 800ddbc:	f107 010a 	add.w	r1, r7, #10
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4798      	blx	r3
 800ddc4:	60f8      	str	r0, [r7, #12]
      break;
 800ddc6:	e034      	b.n	800de32 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	7c12      	ldrb	r2, [r2, #16]
 800ddd4:	f107 010a 	add.w	r1, r7, #10
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4798      	blx	r3
 800dddc:	60f8      	str	r0, [r7, #12]
      break;
 800ddde:	e028      	b.n	800de32 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	7c12      	ldrb	r2, [r2, #16]
 800ddec:	f107 010a 	add.w	r1, r7, #10
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	4798      	blx	r3
 800ddf4:	60f8      	str	r0, [r7, #12]
      break;
 800ddf6:	e01c      	b.n	800de32 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	7c12      	ldrb	r2, [r2, #16]
 800de04:	f107 010a 	add.w	r1, r7, #10
 800de08:	4610      	mov	r0, r2
 800de0a:	4798      	blx	r3
 800de0c:	60f8      	str	r0, [r7, #12]
      break;
 800de0e:	e010      	b.n	800de32 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	7c12      	ldrb	r2, [r2, #16]
 800de1c:	f107 010a 	add.w	r1, r7, #10
 800de20:	4610      	mov	r0, r2
 800de22:	4798      	blx	r3
 800de24:	60f8      	str	r0, [r7, #12]
      break;
 800de26:	e004      	b.n	800de32 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f9fb 	bl	800e226 <USBD_CtlError>
      return;
 800de30:	e04b      	b.n	800deca <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800de32:	e02e      	b.n	800de92 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7c1b      	ldrb	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d109      	bne.n	800de50 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de44:	f107 020a 	add.w	r2, r7, #10
 800de48:	4610      	mov	r0, r2
 800de4a:	4798      	blx	r3
 800de4c:	60f8      	str	r0, [r7, #12]
      break;
 800de4e:	e020      	b.n	800de92 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f9e7 	bl	800e226 <USBD_CtlError>
      return;
 800de58:	e037      	b.n	800deca <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7c1b      	ldrb	r3, [r3, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10d      	bne.n	800de7e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de6a:	f107 020a 	add.w	r2, r7, #10
 800de6e:	4610      	mov	r0, r2
 800de70:	4798      	blx	r3
 800de72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3301      	adds	r3, #1
 800de78:	2207      	movs	r2, #7
 800de7a:	701a      	strb	r2, [r3, #0]
      break;
 800de7c:	e009      	b.n	800de92 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f9d0 	bl	800e226 <USBD_CtlError>
      return;
 800de86:	e020      	b.n	800deca <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800de88:	6839      	ldr	r1, [r7, #0]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 f9cb 	bl	800e226 <USBD_CtlError>
    return;
 800de90:	e01b      	b.n	800deca <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800de92:	897b      	ldrh	r3, [r7, #10]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d011      	beq.n	800debc <USBD_GetDescriptor+0x1e0>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	88db      	ldrh	r3, [r3, #6]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00d      	beq.n	800debc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	88da      	ldrh	r2, [r3, #6]
 800dea4:	897b      	ldrh	r3, [r7, #10]
 800dea6:	4293      	cmp	r3, r2
 800dea8:	bf28      	it	cs
 800deaa:	4613      	movcs	r3, r2
 800deac:	b29b      	uxth	r3, r3
 800deae:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800deb0:	897b      	ldrh	r3, [r7, #10]
 800deb2:	461a      	mov	r2, r3
 800deb4:	68f9      	ldr	r1, [r7, #12]
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fa1f 	bl	800e2fa <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	88db      	ldrh	r3, [r3, #6]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d102      	bne.n	800deca <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 fa76 	bl	800e3b6 <USBD_CtlSendStatus>
  }
}
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	889b      	ldrh	r3, [r3, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d130      	bne.n	800df44 <USBD_SetAddress+0x74>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	88db      	ldrh	r3, [r3, #6]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d12c      	bne.n	800df44 <USBD_SetAddress+0x74>
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	885b      	ldrh	r3, [r3, #2]
 800deee:	2b7f      	cmp	r3, #127	; 0x7f
 800def0:	d828      	bhi.n	800df44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	885b      	ldrh	r3, [r3, #2]
 800def6:	b2db      	uxtb	r3, r3
 800def8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df04:	2b03      	cmp	r3, #3
 800df06:	d104      	bne.n	800df12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f98b 	bl	800e226 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df10:	e01d      	b.n	800df4e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7bfa      	ldrb	r2, [r7, #15]
 800df16:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 ff28 	bl	800ed74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fa46 	bl	800e3b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df38:	e009      	b.n	800df4e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df42:	e004      	b.n	800df4e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f96d 	bl	800e226 <USBD_CtlError>
  }
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	885b      	ldrh	r3, [r3, #2]
 800df66:	b2da      	uxtb	r2, r3
 800df68:	4b41      	ldr	r3, [pc, #260]	; (800e070 <USBD_SetConfig+0x118>)
 800df6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df6c:	4b40      	ldr	r3, [pc, #256]	; (800e070 <USBD_SetConfig+0x118>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d904      	bls.n	800df7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f955 	bl	800e226 <USBD_CtlError>
 800df7c:	e075      	b.n	800e06a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df84:	2b02      	cmp	r3, #2
 800df86:	d002      	beq.n	800df8e <USBD_SetConfig+0x36>
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d023      	beq.n	800dfd4 <USBD_SetConfig+0x7c>
 800df8c:	e062      	b.n	800e054 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800df8e:	4b38      	ldr	r3, [pc, #224]	; (800e070 <USBD_SetConfig+0x118>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01a      	beq.n	800dfcc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800df96:	4b36      	ldr	r3, [pc, #216]	; (800e070 <USBD_SetConfig+0x118>)
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2203      	movs	r2, #3
 800dfa4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dfa8:	4b31      	ldr	r3, [pc, #196]	; (800e070 <USBD_SetConfig+0x118>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff fa5d 	bl	800d46e <USBD_SetClassConfig>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d104      	bne.n	800dfc4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f932 	bl	800e226 <USBD_CtlError>
          return;
 800dfc2:	e052      	b.n	800e06a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f9f6 	bl	800e3b6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800dfca:	e04e      	b.n	800e06a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f9f2 	bl	800e3b6 <USBD_CtlSendStatus>
      break;
 800dfd2:	e04a      	b.n	800e06a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dfd4:	4b26      	ldr	r3, [pc, #152]	; (800e070 <USBD_SetConfig+0x118>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d112      	bne.n	800e002 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800dfe4:	4b22      	ldr	r3, [pc, #136]	; (800e070 <USBD_SetConfig+0x118>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800dfee:	4b20      	ldr	r3, [pc, #128]	; (800e070 <USBD_SetConfig+0x118>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff fa59 	bl	800d4ac <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 f9db 	bl	800e3b6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e000:	e033      	b.n	800e06a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e002:	4b1b      	ldr	r3, [pc, #108]	; (800e070 <USBD_SetConfig+0x118>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d01d      	beq.n	800e04c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	b2db      	uxtb	r3, r3
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff fa47 	bl	800d4ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e01e:	4b14      	ldr	r3, [pc, #80]	; (800e070 <USBD_SetConfig+0x118>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e028:	4b11      	ldr	r3, [pc, #68]	; (800e070 <USBD_SetConfig+0x118>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff fa1d 	bl	800d46e <USBD_SetClassConfig>
 800e034:	4603      	mov	r3, r0
 800e036:	2b02      	cmp	r3, #2
 800e038:	d104      	bne.n	800e044 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 f8f2 	bl	800e226 <USBD_CtlError>
          return;
 800e042:	e012      	b.n	800e06a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f9b6 	bl	800e3b6 <USBD_CtlSendStatus>
      break;
 800e04a:	e00e      	b.n	800e06a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f9b2 	bl	800e3b6 <USBD_CtlSendStatus>
      break;
 800e052:	e00a      	b.n	800e06a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f8e5 	bl	800e226 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e05c:	4b04      	ldr	r3, [pc, #16]	; (800e070 <USBD_SetConfig+0x118>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fa22 	bl	800d4ac <USBD_ClrClassConfig>
      break;
 800e068:	bf00      	nop
    }
  }
}
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	200006fa 	.word	0x200006fa

0800e074 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	88db      	ldrh	r3, [r3, #6]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d004      	beq.n	800e090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f8cc 	bl	800e226 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e08e:	e022      	b.n	800e0d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e096:	2b02      	cmp	r3, #2
 800e098:	dc02      	bgt.n	800e0a0 <USBD_GetConfig+0x2c>
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	dc03      	bgt.n	800e0a6 <USBD_GetConfig+0x32>
 800e09e:	e015      	b.n	800e0cc <USBD_GetConfig+0x58>
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d00b      	beq.n	800e0bc <USBD_GetConfig+0x48>
 800e0a4:	e012      	b.n	800e0cc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f920 	bl	800e2fa <USBD_CtlSendData>
      break;
 800e0ba:	e00c      	b.n	800e0d6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f918 	bl	800e2fa <USBD_CtlSendData>
      break;
 800e0ca:	e004      	b.n	800e0d6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f8a9 	bl	800e226 <USBD_CtlError>
      break;
 800e0d4:	bf00      	nop
}
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d81e      	bhi.n	800e132 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	88db      	ldrh	r3, [r3, #6]
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d004      	beq.n	800e106 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f891 	bl	800e226 <USBD_CtlError>
      break;
 800e104:	e01a      	b.n	800e13c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e112:	2b00      	cmp	r3, #0
 800e114:	d005      	beq.n	800e122 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f043 0202 	orr.w	r2, r3, #2
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	330c      	adds	r3, #12
 800e126:	2202      	movs	r2, #2
 800e128:	4619      	mov	r1, r3
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f8e5 	bl	800e2fa <USBD_CtlSendData>
    break;
 800e130:	e004      	b.n	800e13c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e132:	6839      	ldr	r1, [r7, #0]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f876 	bl	800e226 <USBD_CtlError>
    break;
 800e13a:	bf00      	nop
  }
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	885b      	ldrh	r3, [r3, #2]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d106      	bne.n	800e164 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f929 	bl	800e3b6 <USBD_CtlSendStatus>
  }

}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e17c:	3b01      	subs	r3, #1
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d80b      	bhi.n	800e19a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	885b      	ldrh	r3, [r3, #2]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d10c      	bne.n	800e1a4 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f90f 	bl	800e3b6 <USBD_CtlSendStatus>
    }
    break;
 800e198:	e004      	b.n	800e1a4 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f842 	bl	800e226 <USBD_CtlError>
    break;
 800e1a2:	e000      	b.n	800e1a6 <USBD_ClrFeature+0x3a>
    break;
 800e1a4:	bf00      	nop
  }
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b083      	sub	sp, #12
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781a      	ldrb	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	785a      	ldrb	r2, [r3, #1]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	3302      	adds	r3, #2
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	3303      	adds	r3, #3
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	021b      	lsls	r3, r3, #8
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	4413      	add	r3, r2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	3305      	adds	r3, #5
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	4413      	add	r3, r2
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	3306      	adds	r3, #6
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	b29a      	uxth	r2, r3
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	3307      	adds	r3, #7
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	021b      	lsls	r3, r3, #8
 800e212:	b29b      	uxth	r3, r3
 800e214:	4413      	add	r3, r2
 800e216:	b29a      	uxth	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	80da      	strh	r2, [r3, #6]

}
 800e21c:	bf00      	nop
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	bc80      	pop	{r7}
 800e224:	4770      	bx	lr

0800e226 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e230:	2180      	movs	r1, #128	; 0x80
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fd34 	bl	800eca0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e238:	2100      	movs	r1, #0
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fd30 	bl	800eca0 <USBD_LL_StallEP>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e254:	2300      	movs	r3, #0
 800e256:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d032      	beq.n	800e2c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f000 f834 	bl	800e2cc <USBD_GetLen>
 800e264:	4603      	mov	r3, r0
 800e266:	3301      	adds	r3, #1
 800e268:	b29b      	uxth	r3, r3
 800e26a:	005b      	lsls	r3, r3, #1
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	75fa      	strb	r2, [r7, #23]
 800e278:	461a      	mov	r2, r3
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	7812      	ldrb	r2, [r2, #0]
 800e282:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e284:	7dfb      	ldrb	r3, [r7, #23]
 800e286:	1c5a      	adds	r2, r3, #1
 800e288:	75fa      	strb	r2, [r7, #23]
 800e28a:	461a      	mov	r2, r3
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	4413      	add	r3, r2
 800e290:	2203      	movs	r2, #3
 800e292:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e294:	e012      	b.n	800e2bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	60fa      	str	r2, [r7, #12]
 800e29c:	7dfa      	ldrb	r2, [r7, #23]
 800e29e:	1c51      	adds	r1, r2, #1
 800e2a0:	75f9      	strb	r1, [r7, #23]
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	440a      	add	r2, r1
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	1c5a      	adds	r2, r3, #1
 800e2b0:	75fa      	strb	r2, [r7, #23]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1e8      	bne.n	800e296 <USBD_GetString+0x4e>
    }
  }
}
 800e2c4:	bf00      	nop
 800e2c6:	3718      	adds	r7, #24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e2d8:	e005      	b.n	800e2e6 <USBD_GetLen+0x1a>
    {
        len++;
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1f5      	bne.n	800e2da <USBD_GetLen+0xe>
    }

    return len;
 800e2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bc80      	pop	{r7}
 800e2f8:	4770      	bx	lr

0800e2fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	60b9      	str	r1, [r7, #8]
 800e304:	4613      	mov	r3, r2
 800e306:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2202      	movs	r2, #2
 800e30c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e310:	88fa      	ldrh	r2, [r7, #6]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e316:	88fa      	ldrh	r2, [r7, #6]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e31c:	88fb      	ldrh	r3, [r7, #6]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	2100      	movs	r1, #0
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 fd45 	bl	800edb2 <USBD_LL_Transmit>

  return USBD_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	4613      	mov	r3, r2
 800e33e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	2100      	movs	r1, #0
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f000 fd33 	bl	800edb2 <USBD_LL_Transmit>

  return USBD_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	4613      	mov	r3, r2
 800e362:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2203      	movs	r2, #3
 800e368:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e36c:	88fa      	ldrh	r2, [r7, #6]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e374:	88fa      	ldrh	r2, [r7, #6]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	2100      	movs	r1, #0
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fd38 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	4613      	mov	r3, r2
 800e39e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3a0:	88fb      	ldrh	r3, [r7, #6]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 fd26 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fcf0 	bl	800edb2 <USBD_LL_Transmit>

  return USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fd00 	bl	800edf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
	...

0800e404 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e404:	b480      	push	{r7}
 800e406:	b087      	sub	sp, #28
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	4613      	mov	r3, r2
 800e410:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e412:	2301      	movs	r3, #1
 800e414:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e41a:	4b1e      	ldr	r3, [pc, #120]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e41c:	7a5b      	ldrb	r3, [r3, #9]
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	d131      	bne.n	800e488 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e424:	4b1b      	ldr	r3, [pc, #108]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e426:	7a5b      	ldrb	r3, [r3, #9]
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	461a      	mov	r2, r3
 800e42c:	4b19      	ldr	r3, [pc, #100]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e42e:	2100      	movs	r1, #0
 800e430:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e432:	4b18      	ldr	r3, [pc, #96]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e434:	7a5b      	ldrb	r3, [r3, #9]
 800e436:	b2db      	uxtb	r3, r3
 800e438:	4a16      	ldr	r2, [pc, #88]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e442:	4b14      	ldr	r3, [pc, #80]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e444:	7a5b      	ldrb	r3, [r3, #9]
 800e446:	b2db      	uxtb	r3, r3
 800e448:	461a      	mov	r2, r3
 800e44a:	4b12      	ldr	r3, [pc, #72]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e44c:	4413      	add	r3, r2
 800e44e:	79fa      	ldrb	r2, [r7, #7]
 800e450:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e452:	4b10      	ldr	r3, [pc, #64]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e454:	7a5b      	ldrb	r3, [r3, #9]
 800e456:	b2db      	uxtb	r3, r3
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	b2d1      	uxtb	r1, r2
 800e45c:	4a0d      	ldr	r2, [pc, #52]	; (800e494 <FATFS_LinkDriverEx+0x90>)
 800e45e:	7251      	strb	r1, [r2, #9]
 800e460:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e462:	7dbb      	ldrb	r3, [r7, #22]
 800e464:	3330      	adds	r3, #48	; 0x30
 800e466:	b2da      	uxtb	r2, r3
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	3301      	adds	r3, #1
 800e470:	223a      	movs	r2, #58	; 0x3a
 800e472:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	3302      	adds	r3, #2
 800e478:	222f      	movs	r2, #47	; 0x2f
 800e47a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	3303      	adds	r3, #3
 800e480:	2200      	movs	r2, #0
 800e482:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e488:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	371c      	adds	r7, #28
 800e48e:	46bd      	mov	sp, r7
 800e490:	bc80      	pop	{r7}
 800e492:	4770      	bx	lr
 800e494:	200006fc 	.word	0x200006fc

0800e498 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7ff ffac 	bl	800e404 <FATFS_LinkDriverEx>
 800e4ac:	4603      	mov	r3, r0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
	...

0800e4b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4912      	ldr	r1, [pc, #72]	; (800e508 <MX_USB_DEVICE_Init+0x50>)
 800e4c0:	4812      	ldr	r0, [pc, #72]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4c2:	f7fe ff7a 	bl	800d3ba <USBD_Init>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4cc:	f7f5 fe56 	bl	800417c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e4d0:	490f      	ldr	r1, [pc, #60]	; (800e510 <MX_USB_DEVICE_Init+0x58>)
 800e4d2:	480e      	ldr	r0, [pc, #56]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4d4:	f7fe ff9c 	bl	800d410 <USBD_RegisterClass>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4de:	f7f5 fe4d 	bl	800417c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4e2:	490c      	ldr	r1, [pc, #48]	; (800e514 <MX_USB_DEVICE_Init+0x5c>)
 800e4e4:	4809      	ldr	r0, [pc, #36]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4e6:	f7fe fecd 	bl	800d284 <USBD_CDC_RegisterInterface>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4f0:	f7f5 fe44 	bl	800417c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4f4:	4805      	ldr	r0, [pc, #20]	; (800e50c <MX_USB_DEVICE_Init+0x54>)
 800e4f6:	f7fe ffa4 	bl	800d442 <USBD_Start>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d001      	beq.n	800e504 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e500:	f7f5 fe3c 	bl	800417c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e504:	bf00      	nop
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200001d4 	.word	0x200001d4
 800e50c:	20000de4 	.word	0x20000de4
 800e510:	200000c0 	.word	0x200000c0
 800e514:	200001c4 	.word	0x200001c4

0800e518 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e51c:	2200      	movs	r2, #0
 800e51e:	4905      	ldr	r1, [pc, #20]	; (800e534 <CDC_Init_FS+0x1c>)
 800e520:	4805      	ldr	r0, [pc, #20]	; (800e538 <CDC_Init_FS+0x20>)
 800e522:	f7fe fec5 	bl	800d2b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e526:	4905      	ldr	r1, [pc, #20]	; (800e53c <CDC_Init_FS+0x24>)
 800e528:	4803      	ldr	r0, [pc, #12]	; (800e538 <CDC_Init_FS+0x20>)
 800e52a:	f7fe feda 	bl	800d2e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e52e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e530:	4618      	mov	r0, r3
 800e532:	bd80      	pop	{r7, pc}
 800e534:	20001468 	.word	0x20001468
 800e538:	20000de4 	.word	0x20000de4
 800e53c:	20001080 	.word	0x20001080

0800e540 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e540:	b480      	push	{r7}
 800e542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e544:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e546:	4618      	mov	r0, r3
 800e548:	46bd      	mov	sp, r7
 800e54a:	bc80      	pop	{r7}
 800e54c:	4770      	bx	lr
	...

0800e550 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
 800e55c:	4613      	mov	r3, r2
 800e55e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	2b23      	cmp	r3, #35	; 0x23
 800e564:	d84a      	bhi.n	800e5fc <CDC_Control_FS+0xac>
 800e566:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <CDC_Control_FS+0x1c>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e5fd 	.word	0x0800e5fd
 800e570:	0800e5fd 	.word	0x0800e5fd
 800e574:	0800e5fd 	.word	0x0800e5fd
 800e578:	0800e5fd 	.word	0x0800e5fd
 800e57c:	0800e5fd 	.word	0x0800e5fd
 800e580:	0800e5fd 	.word	0x0800e5fd
 800e584:	0800e5fd 	.word	0x0800e5fd
 800e588:	0800e5fd 	.word	0x0800e5fd
 800e58c:	0800e5fd 	.word	0x0800e5fd
 800e590:	0800e5fd 	.word	0x0800e5fd
 800e594:	0800e5fd 	.word	0x0800e5fd
 800e598:	0800e5fd 	.word	0x0800e5fd
 800e59c:	0800e5fd 	.word	0x0800e5fd
 800e5a0:	0800e5fd 	.word	0x0800e5fd
 800e5a4:	0800e5fd 	.word	0x0800e5fd
 800e5a8:	0800e5fd 	.word	0x0800e5fd
 800e5ac:	0800e5fd 	.word	0x0800e5fd
 800e5b0:	0800e5fd 	.word	0x0800e5fd
 800e5b4:	0800e5fd 	.word	0x0800e5fd
 800e5b8:	0800e5fd 	.word	0x0800e5fd
 800e5bc:	0800e5fd 	.word	0x0800e5fd
 800e5c0:	0800e5fd 	.word	0x0800e5fd
 800e5c4:	0800e5fd 	.word	0x0800e5fd
 800e5c8:	0800e5fd 	.word	0x0800e5fd
 800e5cc:	0800e5fd 	.word	0x0800e5fd
 800e5d0:	0800e5fd 	.word	0x0800e5fd
 800e5d4:	0800e5fd 	.word	0x0800e5fd
 800e5d8:	0800e5fd 	.word	0x0800e5fd
 800e5dc:	0800e5fd 	.word	0x0800e5fd
 800e5e0:	0800e5fd 	.word	0x0800e5fd
 800e5e4:	0800e5fd 	.word	0x0800e5fd
 800e5e8:	0800e5fd 	.word	0x0800e5fd
 800e5ec:	0800e5fd 	.word	0x0800e5fd
 800e5f0:	0800e5fd 	.word	0x0800e5fd
 800e5f4:	0800e5fd 	.word	0x0800e5fd
 800e5f8:	0800e5fd 	.word	0x0800e5fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5fc:	bf00      	nop
  }

  return (USBD_OK);
 800e5fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	bc80      	pop	{r7}
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop

0800e60c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	4816      	ldr	r0, [pc, #88]	; (800e674 <CDC_Receive_FS+0x68>)
 800e61a:	f7fe fe62 	bl	800d2e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e61e:	4815      	ldr	r0, [pc, #84]	; (800e674 <CDC_Receive_FS+0x68>)
 800e620:	f7fe fea1 	bl	800d366 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	73fb      	strb	r3, [r7, #15]

  memcpy(buffer+length, Buf, len);
 800e62a:	4b13      	ldr	r3, [pc, #76]	; (800e678 <CDC_Receive_FS+0x6c>)
 800e62c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e630:	461a      	mov	r2, r3
 800e632:	4b12      	ldr	r3, [pc, #72]	; (800e67c <CDC_Receive_FS+0x70>)
 800e634:	4413      	add	r3, r2
 800e636:	7bfa      	ldrb	r2, [r7, #15]
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f001 fad2 	bl	800fbe4 <memcpy>
  memset(Buf, '\0', 16);
 800e640:	2210      	movs	r2, #16
 800e642:	2100      	movs	r1, #0
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f001 faf5 	bl	800fc34 <memset>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800e64a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e64e:	480c      	ldr	r0, [pc, #48]	; (800e680 <CDC_Receive_FS+0x74>)
 800e650:	f7f7 fec1 	bl	80063d6 <HAL_GPIO_TogglePin>

  length += len;
 800e654:	7bfb      	ldrb	r3, [r7, #15]
 800e656:	b29a      	uxth	r2, r3
 800e658:	4b07      	ldr	r3, [pc, #28]	; (800e678 <CDC_Receive_FS+0x6c>)
 800e65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	4413      	add	r3, r2
 800e662:	b29b      	uxth	r3, r3
 800e664:	b21a      	sxth	r2, r3
 800e666:	4b04      	ldr	r3, [pc, #16]	; (800e678 <CDC_Receive_FS+0x6c>)
 800e668:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e66a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	20000de4 	.word	0x20000de4
 800e678:	20000708 	.word	0x20000708
 800e67c:	20001850 	.word	0x20001850
 800e680:	40020800 	.word	0x40020800

0800e684 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e694:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <CDC_Transmit_FS+0x50>)
 800e696:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e69a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e010      	b.n	800e6cc <CDC_Transmit_FS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e6aa:	887b      	ldrh	r3, [r7, #2]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	6879      	ldr	r1, [r7, #4]
 800e6b0:	4808      	ldr	r0, [pc, #32]	; (800e6d4 <CDC_Transmit_FS+0x50>)
 800e6b2:	f7fe fdfd 	bl	800d2b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e6b6:	4807      	ldr	r0, [pc, #28]	; (800e6d4 <CDC_Transmit_FS+0x50>)
 800e6b8:	f7fe fe26 	bl	800d308 <USBD_CDC_TransmitPacket>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800e6c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e6c4:	4804      	ldr	r0, [pc, #16]	; (800e6d8 <CDC_Transmit_FS+0x54>)
 800e6c6:	f7f7 fe86 	bl	80063d6 <HAL_GPIO_TogglePin>

  /* USER CODE END 7 */
  return result;
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	20000de4 	.word	0x20000de4
 800e6d8:	40020800 	.word	0x40020800

0800e6dc <CDC_ReadLine>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadLine(uint8_t* Buf)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
	memset(Buf, '\0', 16);
 800e6e4:	2210      	movs	r2, #16
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f001 faa3 	bl	800fc34 <memset>

	while(buffer[length-1] != '\n') {
 800e6ee:	bf00      	nop
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	; (800e724 <CDC_ReadLine+0x48>)
 800e6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	4a0b      	ldr	r2, [pc, #44]	; (800e728 <CDC_ReadLine+0x4c>)
 800e6fa:	5cd3      	ldrb	r3, [r2, r3]
 800e6fc:	2b0a      	cmp	r3, #10
 800e6fe:	d001      	beq.n	800e704 <CDC_ReadLine+0x28>
		return 0;
 800e700:	2300      	movs	r3, #0
 800e702:	e00b      	b.n	800e71c <CDC_ReadLine+0x40>
	}

	memcpy(Buf, buffer, length*sizeof(uint8_t));
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <CDC_ReadLine+0x48>)
 800e706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e70a:	461a      	mov	r2, r3
 800e70c:	4906      	ldr	r1, [pc, #24]	; (800e728 <CDC_ReadLine+0x4c>)
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 fa68 	bl	800fbe4 <memcpy>
	return length;
 800e714:	4b03      	ldr	r3, [pc, #12]	; (800e724 <CDC_ReadLine+0x48>)
 800e716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e71a:	b2db      	uxtb	r3, r3
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	20000708 	.word	0x20000708
 800e728:	20001850 	.word	0x20001850

0800e72c <CDC_ClearBuffer>:
	return length;
}


uint8_t CDC_ClearBuffer()
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	af00      	add	r7, sp, #0
	memset(buffer, '\0', 16);
 800e730:	2210      	movs	r2, #16
 800e732:	2100      	movs	r1, #0
 800e734:	4804      	ldr	r0, [pc, #16]	; (800e748 <CDC_ClearBuffer+0x1c>)
 800e736:	f001 fa7d 	bl	800fc34 <memset>
	length = 0;
 800e73a:	4b04      	ldr	r3, [pc, #16]	; (800e74c <CDC_ClearBuffer+0x20>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	801a      	strh	r2, [r3, #0]
}
 800e740:	bf00      	nop
 800e742:	4618      	mov	r0, r3
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20001850 	.word	0x20001850
 800e74c:	20000708 	.word	0x20000708

0800e750 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2212      	movs	r2, #18
 800e760:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e762:	4b03      	ldr	r3, [pc, #12]	; (800e770 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	bc80      	pop	{r7}
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	200001f0 	.word	0x200001f0

0800e774 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	6039      	str	r1, [r7, #0]
 800e77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2204      	movs	r2, #4
 800e784:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e786:	4b03      	ldr	r3, [pc, #12]	; (800e794 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bc80      	pop	{r7}
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	20000204 	.word	0x20000204

0800e798 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	6039      	str	r1, [r7, #0]
 800e7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7a4:	79fb      	ldrb	r3, [r7, #7]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d105      	bne.n	800e7b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	4907      	ldr	r1, [pc, #28]	; (800e7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800e7ae:	4808      	ldr	r0, [pc, #32]	; (800e7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7b0:	f7ff fd4a 	bl	800e248 <USBD_GetString>
 800e7b4:	e004      	b.n	800e7c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	4904      	ldr	r1, [pc, #16]	; (800e7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800e7ba:	4805      	ldr	r0, [pc, #20]	; (800e7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7bc:	f7ff fd44 	bl	800e248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7c0:	4b02      	ldr	r3, [pc, #8]	; (800e7cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20001860 	.word	0x20001860
 800e7d0:	08014f10 	.word	0x08014f10

0800e7d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	4603      	mov	r3, r0
 800e7dc:	6039      	str	r1, [r7, #0]
 800e7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	4904      	ldr	r1, [pc, #16]	; (800e7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e7e4:	4804      	ldr	r0, [pc, #16]	; (800e7f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e7e6:	f7ff fd2f 	bl	800e248 <USBD_GetString>
  return USBD_StrDesc;
 800e7ea:	4b02      	ldr	r3, [pc, #8]	; (800e7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20001860 	.word	0x20001860
 800e7f8:	08014f28 	.word	0x08014f28

0800e7fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	221a      	movs	r2, #26
 800e80c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e80e:	f000 f843 	bl	800e898 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e812:	4b02      	ldr	r3, [pc, #8]	; (800e81c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e814:	4618      	mov	r0, r3
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20000208 	.word	0x20000208

0800e820 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	6039      	str	r1, [r7, #0]
 800e82a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d105      	bne.n	800e83e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	4907      	ldr	r1, [pc, #28]	; (800e854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e836:	4808      	ldr	r0, [pc, #32]	; (800e858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e838:	f7ff fd06 	bl	800e248 <USBD_GetString>
 800e83c:	e004      	b.n	800e848 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	4904      	ldr	r1, [pc, #16]	; (800e854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e842:	4805      	ldr	r0, [pc, #20]	; (800e858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e844:	f7ff fd00 	bl	800e248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e848:	4b02      	ldr	r3, [pc, #8]	; (800e854 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	20001860 	.word	0x20001860
 800e858:	08014f3c 	.word	0x08014f3c

0800e85c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	6039      	str	r1, [r7, #0]
 800e866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d105      	bne.n	800e87a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	4907      	ldr	r1, [pc, #28]	; (800e890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e872:	4808      	ldr	r0, [pc, #32]	; (800e894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e874:	f7ff fce8 	bl	800e248 <USBD_GetString>
 800e878:	e004      	b.n	800e884 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	4904      	ldr	r1, [pc, #16]	; (800e890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e87e:	4805      	ldr	r0, [pc, #20]	; (800e894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e880:	f7ff fce2 	bl	800e248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e884:	4b02      	ldr	r3, [pc, #8]	; (800e890 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20001860 	.word	0x20001860
 800e894:	08014f48 	.word	0x08014f48

0800e898 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e89e:	4b0f      	ldr	r3, [pc, #60]	; (800e8dc <Get_SerialNum+0x44>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e8a4:	4b0e      	ldr	r3, [pc, #56]	; (800e8e0 <Get_SerialNum+0x48>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e8aa:	4b0e      	ldr	r3, [pc, #56]	; (800e8e4 <Get_SerialNum+0x4c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d009      	beq.n	800e8d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e8be:	2208      	movs	r2, #8
 800e8c0:	4909      	ldr	r1, [pc, #36]	; (800e8e8 <Get_SerialNum+0x50>)
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f000 f814 	bl	800e8f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e8c8:	2204      	movs	r2, #4
 800e8ca:	4908      	ldr	r1, [pc, #32]	; (800e8ec <Get_SerialNum+0x54>)
 800e8cc:	68b8      	ldr	r0, [r7, #8]
 800e8ce:	f000 f80f 	bl	800e8f0 <IntToUnicode>
  }
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	1ff80050 	.word	0x1ff80050
 800e8e0:	1ff80054 	.word	0x1ff80054
 800e8e4:	1ff80058 	.word	0x1ff80058
 800e8e8:	2000020a 	.word	0x2000020a
 800e8ec:	2000021a 	.word	0x2000021a

0800e8f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b087      	sub	sp, #28
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e902:	2300      	movs	r3, #0
 800e904:	75fb      	strb	r3, [r7, #23]
 800e906:	e027      	b.n	800e958 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	0f1b      	lsrs	r3, r3, #28
 800e90c:	2b09      	cmp	r3, #9
 800e90e:	d80b      	bhi.n	800e928 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	0f1b      	lsrs	r3, r3, #28
 800e914:	b2da      	uxtb	r2, r3
 800e916:	7dfb      	ldrb	r3, [r7, #23]
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4619      	mov	r1, r3
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	440b      	add	r3, r1
 800e920:	3230      	adds	r2, #48	; 0x30
 800e922:	b2d2      	uxtb	r2, r2
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e00a      	b.n	800e93e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	0f1b      	lsrs	r3, r3, #28
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	4619      	mov	r1, r3
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	440b      	add	r3, r1
 800e938:	3237      	adds	r2, #55	; 0x37
 800e93a:	b2d2      	uxtb	r2, r2
 800e93c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	011b      	lsls	r3, r3, #4
 800e942:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e944:	7dfb      	ldrb	r3, [r7, #23]
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	3301      	adds	r3, #1
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	4413      	add	r3, r2
 800e94e:	2200      	movs	r2, #0
 800e950:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	3301      	adds	r3, #1
 800e956:	75fb      	strb	r3, [r7, #23]
 800e958:	7dfa      	ldrb	r2, [r7, #23]
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d3d3      	bcc.n	800e908 <IntToUnicode+0x18>
  }
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	371c      	adds	r7, #28
 800e966:	46bd      	mov	sp, r7
 800e968:	bc80      	pop	{r7}
 800e96a:	4770      	bx	lr

0800e96c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800e978:	78fb      	ldrb	r3, [r7, #3]
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d106      	bne.n	800e98c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800e97e:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <HAL_PCDEx_SetConnectionState+0x38>)
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	4a08      	ldr	r2, [pc, #32]	; (800e9a4 <HAL_PCDEx_SetConnectionState+0x38>)
 800e984:	f043 0301 	orr.w	r3, r3, #1
 800e988:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800e98a:	e005      	b.n	800e998 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <HAL_PCDEx_SetConnectionState+0x38>)
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <HAL_PCDEx_SetConnectionState+0x38>)
 800e992:	f023 0301 	bic.w	r3, r3, #1
 800e996:	6053      	str	r3, [r2, #4]
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bc80      	pop	{r7}
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	40010000 	.word	0x40010000

0800e9a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a0d      	ldr	r2, [pc, #52]	; (800e9ec <HAL_PCD_MspInit+0x44>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d113      	bne.n	800e9e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <HAL_PCD_MspInit+0x48>)
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9be:	4a0c      	ldr	r2, [pc, #48]	; (800e9f0 <HAL_PCD_MspInit+0x48>)
 800e9c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9c4:	6253      	str	r3, [r2, #36]	; 0x24
 800e9c6:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <HAL_PCD_MspInit+0x48>)
 800e9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9ce:	60fb      	str	r3, [r7, #12]
 800e9d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	2014      	movs	r0, #20
 800e9d8:	f7f7 f90f 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e9dc:	2014      	movs	r0, #20
 800e9de:	f7f7 f928 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e9e2:	bf00      	nop
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	40005c00 	.word	0x40005c00
 800e9f0:	40023800 	.word	0x40023800

0800e9f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7fe fd61 	bl	800d4d2 <USBD_LL_SetupStage>
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ea2a:	78fa      	ldrb	r2, [r7, #3]
 800ea2c:	6879      	ldr	r1, [r7, #4]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	00db      	lsls	r3, r3, #3
 800ea36:	440b      	add	r3, r1
 800ea38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	78fb      	ldrb	r3, [r7, #3]
 800ea40:	4619      	mov	r1, r3
 800ea42:	f7fe fd93 	bl	800d56c <USBD_LL_DataOutStage>
}
 800ea46:	bf00      	nop
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	460b      	mov	r3, r1
 800ea58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ea60:	78fa      	ldrb	r2, [r7, #3]
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	4613      	mov	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4413      	add	r3, r2
 800ea6a:	00db      	lsls	r3, r3, #3
 800ea6c:	440b      	add	r3, r1
 800ea6e:	333c      	adds	r3, #60	; 0x3c
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	78fb      	ldrb	r3, [r7, #3]
 800ea74:	4619      	mov	r1, r3
 800ea76:	f7fe fdea 	bl	800d64e <USBD_LL_DataInStage>
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fe fef5 	bl	800d880 <USBD_LL_SOF>
}
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d001      	beq.n	800eab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eab2:	f7f5 fb63 	bl	800417c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eabc:	7bfa      	ldrb	r2, [r7, #15]
 800eabe:	4611      	mov	r1, r2
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe feaa 	bl	800d81a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe fe63 	bl	800d798 <USBD_LL_Reset>
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fe fea4 	bl	800d838 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d005      	beq.n	800eb04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaf8:	4b04      	ldr	r3, [pc, #16]	; (800eb0c <HAL_PCD_SuspendCallback+0x30>)
 800eafa:	691b      	ldr	r3, [r3, #16]
 800eafc:	4a03      	ldr	r2, [pc, #12]	; (800eb0c <HAL_PCD_SuspendCallback+0x30>)
 800eafe:	f043 0306 	orr.w	r3, r3, #6
 800eb02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	e000ed00 	.word	0xe000ed00

0800eb10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fe9e 	bl	800d860 <USBD_LL_Resume>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eb34:	4a28      	ldr	r2, [pc, #160]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a26      	ldr	r2, [pc, #152]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800eb44:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb46:	4a25      	ldr	r2, [pc, #148]	; (800ebdc <USBD_LL_Init+0xb0>)
 800eb48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eb4a:	4b23      	ldr	r3, [pc, #140]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb50:	4b21      	ldr	r3, [pc, #132]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb52:	2202      	movs	r2, #2
 800eb54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb56:	4b20      	ldr	r3, [pc, #128]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb58:	2202      	movs	r2, #2
 800eb5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb5c:	4b1e      	ldr	r3, [pc, #120]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb62:	4b1d      	ldr	r3, [pc, #116]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eb68:	481b      	ldr	r0, [pc, #108]	; (800ebd8 <USBD_LL_Init+0xac>)
 800eb6a:	f7f8 fc0b 	bl	8007384 <HAL_PCD_Init>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800eb74:	f7f5 fb02 	bl	800417c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eb7e:	2318      	movs	r3, #24
 800eb80:	2200      	movs	r2, #0
 800eb82:	2100      	movs	r1, #0
 800eb84:	f7f9 ffe8 	bl	8008b58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eb8e:	2358      	movs	r3, #88	; 0x58
 800eb90:	2200      	movs	r2, #0
 800eb92:	2180      	movs	r1, #128	; 0x80
 800eb94:	f7f9 ffe0 	bl	8008b58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800eb9e:	23c0      	movs	r3, #192	; 0xc0
 800eba0:	2200      	movs	r2, #0
 800eba2:	2181      	movs	r1, #129	; 0x81
 800eba4:	f7f9 ffd8 	bl	8008b58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ebae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	f7f9 ffcf 	bl	8008b58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ebc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2182      	movs	r1, #130	; 0x82
 800ebc8:	f7f9 ffc6 	bl	8008b58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20001a60 	.word	0x20001a60
 800ebdc:	40005c00 	.word	0x40005c00

0800ebe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f8 fca2 	bl	8007540 <HAL_PCD_Start>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 f944 	bl	800ee90 <USBD_Get_USB_Status>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	4608      	mov	r0, r1
 800ec20:	4611      	mov	r1, r2
 800ec22:	461a      	mov	r2, r3
 800ec24:	4603      	mov	r3, r0
 800ec26:	70fb      	strb	r3, [r7, #3]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70bb      	strb	r3, [r7, #2]
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec34:	2300      	movs	r3, #0
 800ec36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ec3e:	78bb      	ldrb	r3, [r7, #2]
 800ec40:	883a      	ldrh	r2, [r7, #0]
 800ec42:	78f9      	ldrb	r1, [r7, #3]
 800ec44:	f7f8 fdbe 	bl	80077c4 <HAL_PCD_EP_Open>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f91e 	bl	800ee90 <USBD_Get_USB_Status>
 800ec54:	4603      	mov	r3, r0
 800ec56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b084      	sub	sp, #16
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ec7c:	78fa      	ldrb	r2, [r7, #3]
 800ec7e:	4611      	mov	r1, r2
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f8 fe05 	bl	8007890 <HAL_PCD_EP_Close>
 800ec86:	4603      	mov	r3, r0
 800ec88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 f8ff 	bl	800ee90 <USBD_Get_USB_Status>
 800ec92:	4603      	mov	r3, r0
 800ec94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3710      	adds	r7, #16
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecac:	2300      	movs	r3, #0
 800ecae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ecba:	78fa      	ldrb	r2, [r7, #3]
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f8 fec5 	bl	8007a4e <HAL_PCD_EP_SetStall>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 f8e0 	bl	800ee90 <USBD_Get_USB_Status>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	460b      	mov	r3, r1
 800ece8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ecf8:	78fa      	ldrb	r2, [r7, #3]
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7f8 fef8 	bl	8007af2 <HAL_PCD_EP_ClrStall>
 800ed02:	4603      	mov	r3, r0
 800ed04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed06:	7bfb      	ldrb	r3, [r7, #15]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f000 f8c1 	bl	800ee90 <USBD_Get_USB_Status>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ed2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	da0c      	bge.n	800ed52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	4613      	mov	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	00db      	lsls	r3, r3, #3
 800ed4a:	440b      	add	r3, r1
 800ed4c:	3302      	adds	r3, #2
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	e00b      	b.n	800ed6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed58:	68f9      	ldr	r1, [r7, #12]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	440b      	add	r3, r1
 800ed64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ed68:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bc80      	pop	{r7}
 800ed72:	4770      	bx	lr

0800ed74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	4611      	mov	r1, r2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f8 fcf1 	bl	800777a <HAL_PCD_SetAddress>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f876 	bl	800ee90 <USBD_Get_USB_Status>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b086      	sub	sp, #24
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	60f8      	str	r0, [r7, #12]
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	461a      	mov	r2, r3
 800edbe:	460b      	mov	r3, r1
 800edc0:	72fb      	strb	r3, [r7, #11]
 800edc2:	4613      	mov	r3, r2
 800edc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edca:	2300      	movs	r3, #0
 800edcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800edd4:	893b      	ldrh	r3, [r7, #8]
 800edd6:	7af9      	ldrb	r1, [r7, #11]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	f7f8 fdf5 	bl	80079c8 <HAL_PCD_EP_Transmit>
 800edde:	4603      	mov	r3, r0
 800ede0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 f853 	bl	800ee90 <USBD_Get_USB_Status>
 800edea:	4603      	mov	r3, r0
 800edec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edee:	7dbb      	ldrb	r3, [r7, #22]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	607a      	str	r2, [r7, #4]
 800ee02:	461a      	mov	r2, r3
 800ee04:	460b      	mov	r3, r1
 800ee06:	72fb      	strb	r3, [r7, #11]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee1a:	893b      	ldrh	r3, [r7, #8]
 800ee1c:	7af9      	ldrb	r1, [r7, #11]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f7f8 fd7e 	bl	8007920 <HAL_PCD_EP_Receive>
 800ee24:	4603      	mov	r3, r0
 800ee26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 f830 	bl	800ee90 <USBD_Get_USB_Status>
 800ee30:	4603      	mov	r3, r0
 800ee32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	4611      	mov	r1, r2
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7f8 fda0 	bl	800799a <HAL_PCD_EP_GetRxCount>
 800ee5a:	4603      	mov	r3, r0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee6c:	4b02      	ldr	r3, [pc, #8]	; (800ee78 <USBD_static_malloc+0x14>)
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bc80      	pop	{r7}
 800ee76:	4770      	bx	lr
 800ee78:	2000070c 	.word	0x2000070c

0800ee7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]

}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bc80      	pop	{r7}
 800ee8c:	4770      	bx	lr
	...

0800ee90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	d817      	bhi.n	800eed4 <USBD_Get_USB_Status+0x44>
 800eea4:	a201      	add	r2, pc, #4	; (adr r2, 800eeac <USBD_Get_USB_Status+0x1c>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800eebd 	.word	0x0800eebd
 800eeb0:	0800eec3 	.word	0x0800eec3
 800eeb4:	0800eec9 	.word	0x0800eec9
 800eeb8:	0800eecf 	.word	0x0800eecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eebc:	2300      	movs	r3, #0
 800eebe:	73fb      	strb	r3, [r7, #15]
    break;
 800eec0:	e00b      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eec2:	2302      	movs	r3, #2
 800eec4:	73fb      	strb	r3, [r7, #15]
    break;
 800eec6:	e008      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eec8:	2301      	movs	r3, #1
 800eeca:	73fb      	strb	r3, [r7, #15]
    break;
 800eecc:	e005      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eece:	2302      	movs	r3, #2
 800eed0:	73fb      	strb	r3, [r7, #15]
    break;
 800eed2:	e002      	b.n	800eeda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eed4:	2302      	movs	r3, #2
 800eed6:	73fb      	strb	r3, [r7, #15]
    break;
 800eed8:	bf00      	nop
  }
  return usb_status;
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bc80      	pop	{r7}
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop

0800eee8 <_ZdlPv>:
 800eee8:	f000 be74 	b.w	800fbd4 <free>

0800eeec <_ZdlPvj>:
 800eeec:	f7ff bffc 	b.w	800eee8 <_ZdlPv>

0800eef0 <_Znwj>:
 800eef0:	2801      	cmp	r0, #1
 800eef2:	bf38      	it	cc
 800eef4:	2001      	movcc	r0, #1
 800eef6:	b510      	push	{r4, lr}
 800eef8:	4604      	mov	r4, r0
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fe62 	bl	800fbc4 <malloc>
 800ef00:	b930      	cbnz	r0, 800ef10 <_Znwj+0x20>
 800ef02:	f000 f999 	bl	800f238 <_ZSt15get_new_handlerv>
 800ef06:	b908      	cbnz	r0, 800ef0c <_Znwj+0x1c>
 800ef08:	f000 fe22 	bl	800fb50 <abort>
 800ef0c:	4780      	blx	r0
 800ef0e:	e7f4      	b.n	800eefa <_Znwj+0xa>
 800ef10:	bd10      	pop	{r4, pc}

0800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800ef12:	68c3      	ldr	r3, [r0, #12]
 800ef14:	b510      	push	{r4, lr}
 800ef16:	689a      	ldr	r2, [r3, #8]
 800ef18:	60c2      	str	r2, [r0, #12]
 800ef1a:	b102      	cbz	r2, 800ef1e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800ef1c:	6050      	str	r0, [r2, #4]
 800ef1e:	6842      	ldr	r2, [r0, #4]
 800ef20:	605a      	str	r2, [r3, #4]
 800ef22:	680c      	ldr	r4, [r1, #0]
 800ef24:	4284      	cmp	r4, r0
 800ef26:	d103      	bne.n	800ef30 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800ef28:	600b      	str	r3, [r1, #0]
 800ef2a:	6098      	str	r0, [r3, #8]
 800ef2c:	6043      	str	r3, [r0, #4]
 800ef2e:	bd10      	pop	{r4, pc}
 800ef30:	6891      	ldr	r1, [r2, #8]
 800ef32:	4281      	cmp	r1, r0
 800ef34:	bf0c      	ite	eq
 800ef36:	6093      	streq	r3, [r2, #8]
 800ef38:	60d3      	strne	r3, [r2, #12]
 800ef3a:	e7f6      	b.n	800ef2a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800ef3c:	6883      	ldr	r3, [r0, #8]
 800ef3e:	b510      	push	{r4, lr}
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	6082      	str	r2, [r0, #8]
 800ef44:	b102      	cbz	r2, 800ef48 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800ef46:	6050      	str	r0, [r2, #4]
 800ef48:	6842      	ldr	r2, [r0, #4]
 800ef4a:	605a      	str	r2, [r3, #4]
 800ef4c:	680c      	ldr	r4, [r1, #0]
 800ef4e:	4284      	cmp	r4, r0
 800ef50:	d103      	bne.n	800ef5a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800ef52:	600b      	str	r3, [r1, #0]
 800ef54:	60d8      	str	r0, [r3, #12]
 800ef56:	6043      	str	r3, [r0, #4]
 800ef58:	bd10      	pop	{r4, pc}
 800ef5a:	68d1      	ldr	r1, [r2, #12]
 800ef5c:	4281      	cmp	r1, r0
 800ef5e:	bf0c      	ite	eq
 800ef60:	60d3      	streq	r3, [r2, #12]
 800ef62:	6093      	strne	r3, [r2, #8]
 800ef64:	e7f6      	b.n	800ef54 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800ef66 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800ef66:	7802      	ldrb	r2, [r0, #0]
 800ef68:	4603      	mov	r3, r0
 800ef6a:	b92a      	cbnz	r2, 800ef78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800ef6c:	6842      	ldr	r2, [r0, #4]
 800ef6e:	6852      	ldr	r2, [r2, #4]
 800ef70:	4282      	cmp	r2, r0
 800ef72:	d101      	bne.n	800ef78 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800ef74:	68d0      	ldr	r0, [r2, #12]
 800ef76:	4770      	bx	lr
 800ef78:	689a      	ldr	r2, [r3, #8]
 800ef7a:	b122      	cbz	r2, 800ef86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	68d2      	ldr	r2, [r2, #12]
 800ef80:	2a00      	cmp	r2, #0
 800ef82:	d1fb      	bne.n	800ef7c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800ef84:	4770      	bx	lr
 800ef86:	6858      	ldr	r0, [r3, #4]
 800ef88:	6882      	ldr	r2, [r0, #8]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d102      	bne.n	800ef94 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	6840      	ldr	r0, [r0, #4]
 800ef92:	e7f9      	b.n	800ef88 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 800ef94:	4770      	bx	lr

0800ef96 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800ef96:	68c3      	ldr	r3, [r0, #12]
 800ef98:	b123      	cbz	r3, 800efa4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1fb      	bne.n	800ef9a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800efa2:	4770      	bx	lr
 800efa4:	6843      	ldr	r3, [r0, #4]
 800efa6:	68da      	ldr	r2, [r3, #12]
 800efa8:	4282      	cmp	r2, r0
 800efaa:	d102      	bne.n	800efb2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800efac:	4618      	mov	r0, r3
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	e7f9      	b.n	800efa6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800efb2:	68c2      	ldr	r2, [r0, #12]
 800efb4:	4293      	cmp	r3, r2
 800efb6:	bf18      	it	ne
 800efb8:	4618      	movne	r0, r3
 800efba:	4770      	bx	lr

0800efbc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800efbc:	f7ff bfd3 	b.w	800ef66 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800efc0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800efc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc4:	461e      	mov	r6, r3
 800efc6:	f103 0804 	add.w	r8, r3, #4
 800efca:	2300      	movs	r3, #0
 800efcc:	460c      	mov	r4, r1
 800efce:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800efd2:	604a      	str	r2, [r1, #4]
 800efd4:	700b      	strb	r3, [r1, #0]
 800efd6:	b300      	cbz	r0, 800f01a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 800efd8:	4296      	cmp	r6, r2
 800efda:	6091      	str	r1, [r2, #8]
 800efdc:	d118      	bne.n	800f010 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800efde:	6071      	str	r1, [r6, #4]
 800efe0:	60f4      	str	r4, [r6, #12]
 800efe2:	2701      	movs	r7, #1
 800efe4:	f04f 0900 	mov.w	r9, #0
 800efe8:	6873      	ldr	r3, [r6, #4]
 800efea:	42a3      	cmp	r3, r4
 800efec:	d03f      	beq.n	800f06e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800efee:	6860      	ldr	r0, [r4, #4]
 800eff0:	7802      	ldrb	r2, [r0, #0]
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	d13c      	bne.n	800f070 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 800eff6:	6845      	ldr	r5, [r0, #4]
 800eff8:	68ab      	ldr	r3, [r5, #8]
 800effa:	4298      	cmp	r0, r3
 800effc:	d123      	bne.n	800f046 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800effe:	68eb      	ldr	r3, [r5, #12]
 800f000:	b183      	cbz	r3, 800f024 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800f002:	781a      	ldrb	r2, [r3, #0]
 800f004:	b972      	cbnz	r2, 800f024 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800f006:	7007      	strb	r7, [r0, #0]
 800f008:	701f      	strb	r7, [r3, #0]
 800f00a:	702a      	strb	r2, [r5, #0]
 800f00c:	462c      	mov	r4, r5
 800f00e:	e7eb      	b.n	800efe8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800f010:	68b3      	ldr	r3, [r6, #8]
 800f012:	4293      	cmp	r3, r2
 800f014:	d1e5      	bne.n	800efe2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800f016:	60b1      	str	r1, [r6, #8]
 800f018:	e7e3      	b.n	800efe2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800f01a:	60d1      	str	r1, [r2, #12]
 800f01c:	68f3      	ldr	r3, [r6, #12]
 800f01e:	4293      	cmp	r3, r2
 800f020:	d1df      	bne.n	800efe2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800f022:	e7dd      	b.n	800efe0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800f024:	68c3      	ldr	r3, [r0, #12]
 800f026:	42a3      	cmp	r3, r4
 800f028:	d103      	bne.n	800f032 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800f02a:	4641      	mov	r1, r8
 800f02c:	f7ff ff71 	bl	800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800f030:	4604      	mov	r4, r0
 800f032:	6863      	ldr	r3, [r4, #4]
 800f034:	4641      	mov	r1, r8
 800f036:	701f      	strb	r7, [r3, #0]
 800f038:	4628      	mov	r0, r5
 800f03a:	f885 9000 	strb.w	r9, [r5]
 800f03e:	f7ff ff7d 	bl	800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800f042:	4625      	mov	r5, r4
 800f044:	e7e2      	b.n	800f00c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 800f046:	b113      	cbz	r3, 800f04e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 800f048:	781a      	ldrb	r2, [r3, #0]
 800f04a:	2a00      	cmp	r2, #0
 800f04c:	d0db      	beq.n	800f006 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800f04e:	6883      	ldr	r3, [r0, #8]
 800f050:	42a3      	cmp	r3, r4
 800f052:	d103      	bne.n	800f05c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800f054:	4641      	mov	r1, r8
 800f056:	f7ff ff71 	bl	800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800f05a:	4604      	mov	r4, r0
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	4641      	mov	r1, r8
 800f060:	701f      	strb	r7, [r3, #0]
 800f062:	4628      	mov	r0, r5
 800f064:	f885 9000 	strb.w	r9, [r5]
 800f068:	f7ff ff53 	bl	800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800f06c:	e7e9      	b.n	800f042 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800f06e:	4623      	mov	r3, r4
 800f070:	2201      	movs	r2, #1
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f078 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 800f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f07c:	460f      	mov	r7, r1
 800f07e:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 800f082:	4604      	mov	r4, r0
 800f084:	2e00      	cmp	r6, #0
 800f086:	d03e      	beq.n	800f106 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 800f088:	2900      	cmp	r1, #0
 800f08a:	d03d      	beq.n	800f108 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800f08c:	460a      	mov	r2, r1
 800f08e:	4613      	mov	r3, r2
 800f090:	6892      	ldr	r2, [r2, #8]
 800f092:	2a00      	cmp	r2, #0
 800f094:	d1fb      	bne.n	800f08e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 800f096:	42a3      	cmp	r3, r4
 800f098:	68da      	ldr	r2, [r3, #12]
 800f09a:	d04b      	beq.n	800f134 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 800f09c:	4299      	cmp	r1, r3
 800f09e:	6073      	str	r3, [r6, #4]
 800f0a0:	609e      	str	r6, [r3, #8]
 800f0a2:	d027      	beq.n	800f0f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 800f0a4:	685d      	ldr	r5, [r3, #4]
 800f0a6:	b102      	cbz	r2, 800f0aa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 800f0a8:	6055      	str	r5, [r2, #4]
 800f0aa:	6858      	ldr	r0, [r3, #4]
 800f0ac:	6082      	str	r2, [r0, #8]
 800f0ae:	60d9      	str	r1, [r3, #12]
 800f0b0:	68e1      	ldr	r1, [r4, #12]
 800f0b2:	604b      	str	r3, [r1, #4]
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	42a1      	cmp	r1, r4
 800f0b8:	d11e      	bne.n	800f0f8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 800f0ba:	607b      	str	r3, [r7, #4]
 800f0bc:	4616      	mov	r6, r2
 800f0be:	6861      	ldr	r1, [r4, #4]
 800f0c0:	7820      	ldrb	r0, [r4, #0]
 800f0c2:	6059      	str	r1, [r3, #4]
 800f0c4:	7819      	ldrb	r1, [r3, #0]
 800f0c6:	7018      	strb	r0, [r3, #0]
 800f0c8:	7021      	strb	r1, [r4, #0]
 800f0ca:	7823      	ldrb	r3, [r4, #0]
 800f0cc:	b17b      	cbz	r3, 800f0ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800f0ce:	f04f 0800 	mov.w	r8, #0
 800f0d2:	f04f 0901 	mov.w	r9, #1
 800f0d6:	f107 0a04 	add.w	sl, r7, #4
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	42b3      	cmp	r3, r6
 800f0de:	d075      	beq.n	800f1cc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>
 800f0e0:	2e00      	cmp	r6, #0
 800f0e2:	d03e      	beq.n	800f162 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800f0e4:	7833      	ldrb	r3, [r6, #0]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d03b      	beq.n	800f162 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	7033      	strb	r3, [r6, #0]
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f4:	461d      	mov	r5, r3
 800f0f6:	e7dd      	b.n	800f0b4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 800f0f8:	6861      	ldr	r1, [r4, #4]
 800f0fa:	6888      	ldr	r0, [r1, #8]
 800f0fc:	42a0      	cmp	r0, r4
 800f0fe:	bf0c      	ite	eq
 800f100:	608b      	streq	r3, [r1, #8]
 800f102:	60cb      	strne	r3, [r1, #12]
 800f104:	e7da      	b.n	800f0bc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 800f106:	460e      	mov	r6, r1
 800f108:	6865      	ldr	r5, [r4, #4]
 800f10a:	b106      	cbz	r6, 800f10e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 800f10c:	6075      	str	r5, [r6, #4]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	42a3      	cmp	r3, r4
 800f112:	d111      	bne.n	800f138 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 800f114:	607e      	str	r6, [r7, #4]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	42a3      	cmp	r3, r4
 800f11a:	d103      	bne.n	800f124 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800f11c:	68e3      	ldr	r3, [r4, #12]
 800f11e:	b993      	cbnz	r3, 800f146 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 800f120:	6863      	ldr	r3, [r4, #4]
 800f122:	60bb      	str	r3, [r7, #8]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	42a3      	cmp	r3, r4
 800f128:	d1cf      	bne.n	800f0ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800f12a:	68a3      	ldr	r3, [r4, #8]
 800f12c:	b993      	cbnz	r3, 800f154 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 800f12e:	6863      	ldr	r3, [r4, #4]
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	e7ca      	b.n	800f0ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800f134:	4616      	mov	r6, r2
 800f136:	e7e7      	b.n	800f108 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800f138:	6863      	ldr	r3, [r4, #4]
 800f13a:	689a      	ldr	r2, [r3, #8]
 800f13c:	42a2      	cmp	r2, r4
 800f13e:	bf0c      	ite	eq
 800f140:	609e      	streq	r6, [r3, #8]
 800f142:	60de      	strne	r6, [r3, #12]
 800f144:	e7e7      	b.n	800f116 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 800f146:	4633      	mov	r3, r6
 800f148:	461a      	mov	r2, r3
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1fb      	bne.n	800f148 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 800f150:	60ba      	str	r2, [r7, #8]
 800f152:	e7e7      	b.n	800f124 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800f154:	4633      	mov	r3, r6
 800f156:	461a      	mov	r2, r3
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1fb      	bne.n	800f156 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 800f15e:	60fa      	str	r2, [r7, #12]
 800f160:	e7b3      	b.n	800f0ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800f162:	68a8      	ldr	r0, [r5, #8]
 800f164:	42b0      	cmp	r0, r6
 800f166:	d134      	bne.n	800f1d2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15a>
 800f168:	68e8      	ldr	r0, [r5, #12]
 800f16a:	7803      	ldrb	r3, [r0, #0]
 800f16c:	b93b      	cbnz	r3, 800f17e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x106>
 800f16e:	f880 9000 	strb.w	r9, [r0]
 800f172:	4651      	mov	r1, sl
 800f174:	4628      	mov	r0, r5
 800f176:	702b      	strb	r3, [r5, #0]
 800f178:	f7ff fecb 	bl	800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800f17c:	68e8      	ldr	r0, [r5, #12]
 800f17e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f182:	b112      	cbz	r2, 800f18a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x112>
 800f184:	7811      	ldrb	r1, [r2, #0]
 800f186:	2901      	cmp	r1, #1
 800f188:	d109      	bne.n	800f19e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800f18a:	b113      	cbz	r3, 800f192 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800f18c:	7819      	ldrb	r1, [r3, #0]
 800f18e:	2901      	cmp	r1, #1
 800f190:	d105      	bne.n	800f19e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800f192:	686b      	ldr	r3, [r5, #4]
 800f194:	462e      	mov	r6, r5
 800f196:	f880 8000 	strb.w	r8, [r0]
 800f19a:	461d      	mov	r5, r3
 800f19c:	e79d      	b.n	800f0da <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x62>
 800f19e:	b113      	cbz	r3, 800f1a6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12e>
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d107      	bne.n	800f1b6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13e>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	7013      	strb	r3, [r2, #0]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	4651      	mov	r1, sl
 800f1ae:	7003      	strb	r3, [r0, #0]
 800f1b0:	f7ff fec4 	bl	800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800f1b4:	68e8      	ldr	r0, [r5, #12]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	782b      	ldrb	r3, [r5, #0]
 800f1ba:	7003      	strb	r3, [r0, #0]
 800f1bc:	68c3      	ldr	r3, [r0, #12]
 800f1be:	702a      	strb	r2, [r5, #0]
 800f1c0:	b103      	cbz	r3, 800f1c4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14c>
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f7ff fea3 	bl	800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800f1cc:	2e00      	cmp	r6, #0
 800f1ce:	d18c      	bne.n	800f0ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x72>
 800f1d0:	e78d      	b.n	800f0ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800f1d2:	7803      	ldrb	r3, [r0, #0]
 800f1d4:	b93b      	cbnz	r3, 800f1e6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16e>
 800f1d6:	f880 9000 	strb.w	r9, [r0]
 800f1da:	4651      	mov	r1, sl
 800f1dc:	4628      	mov	r0, r5
 800f1de:	702b      	strb	r3, [r5, #0]
 800f1e0:	f7ff feac 	bl	800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800f1e4:	68a8      	ldr	r0, [r5, #8]
 800f1e6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f1ea:	b112      	cbz	r2, 800f1f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 800f1ec:	7811      	ldrb	r1, [r2, #0]
 800f1ee:	2901      	cmp	r1, #1
 800f1f0:	d104      	bne.n	800f1fc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x184>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d0cd      	beq.n	800f192 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800f1f6:	7819      	ldrb	r1, [r3, #0]
 800f1f8:	2901      	cmp	r1, #1
 800f1fa:	d0ca      	beq.n	800f192 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800f1fc:	b113      	cbz	r3, 800f204 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18c>
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d107      	bne.n	800f214 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19c>
 800f204:	2301      	movs	r3, #1
 800f206:	7013      	strb	r3, [r2, #0]
 800f208:	2300      	movs	r3, #0
 800f20a:	4651      	mov	r1, sl
 800f20c:	7003      	strb	r3, [r0, #0]
 800f20e:	f7ff fe80 	bl	800ef12 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800f212:	68a8      	ldr	r0, [r5, #8]
 800f214:	2201      	movs	r2, #1
 800f216:	782b      	ldrb	r3, [r5, #0]
 800f218:	7003      	strb	r3, [r0, #0]
 800f21a:	6883      	ldr	r3, [r0, #8]
 800f21c:	702a      	strb	r2, [r5, #0]
 800f21e:	b103      	cbz	r3, 800f222 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	4651      	mov	r1, sl
 800f224:	4628      	mov	r0, r5
 800f226:	f7ff fe89 	bl	800ef3c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800f22a:	e7cf      	b.n	800f1cc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>

0800f22c <_ZSt17__throw_bad_allocv>:
 800f22c:	b508      	push	{r3, lr}
 800f22e:	f000 fc8f 	bl	800fb50 <abort>

0800f232 <_ZSt20__throw_length_errorPKc>:
 800f232:	b508      	push	{r3, lr}
 800f234:	f000 fc8c 	bl	800fb50 <abort>

0800f238 <_ZSt15get_new_handlerv>:
 800f238:	4b02      	ldr	r3, [pc, #8]	; (800f244 <_ZSt15get_new_handlerv+0xc>)
 800f23a:	6818      	ldr	r0, [r3, #0]
 800f23c:	f3bf 8f5b 	dmb	ish
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	2000092c 	.word	0x2000092c

0800f248 <atan>:
 800f248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	4bb6      	ldr	r3, [pc, #728]	; (800f528 <atan+0x2e0>)
 800f24e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f252:	429e      	cmp	r6, r3
 800f254:	4604      	mov	r4, r0
 800f256:	460d      	mov	r5, r1
 800f258:	468b      	mov	fp, r1
 800f25a:	dd17      	ble.n	800f28c <atan+0x44>
 800f25c:	4bb3      	ldr	r3, [pc, #716]	; (800f52c <atan+0x2e4>)
 800f25e:	429e      	cmp	r6, r3
 800f260:	dc01      	bgt.n	800f266 <atan+0x1e>
 800f262:	d109      	bne.n	800f278 <atan+0x30>
 800f264:	b140      	cbz	r0, 800f278 <atan+0x30>
 800f266:	4622      	mov	r2, r4
 800f268:	462b      	mov	r3, r5
 800f26a:	4620      	mov	r0, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	f7f0 ff95 	bl	800019c <__adddf3>
 800f272:	4604      	mov	r4, r0
 800f274:	460d      	mov	r5, r1
 800f276:	e005      	b.n	800f284 <atan+0x3c>
 800f278:	f1bb 0f00 	cmp.w	fp, #0
 800f27c:	4cac      	ldr	r4, [pc, #688]	; (800f530 <atan+0x2e8>)
 800f27e:	f300 8121 	bgt.w	800f4c4 <atan+0x27c>
 800f282:	4dac      	ldr	r5, [pc, #688]	; (800f534 <atan+0x2ec>)
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28c:	4baa      	ldr	r3, [pc, #680]	; (800f538 <atan+0x2f0>)
 800f28e:	429e      	cmp	r6, r3
 800f290:	dc11      	bgt.n	800f2b6 <atan+0x6e>
 800f292:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f296:	429e      	cmp	r6, r3
 800f298:	dc0a      	bgt.n	800f2b0 <atan+0x68>
 800f29a:	a38b      	add	r3, pc, #556	; (adr r3, 800f4c8 <atan+0x280>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	f7f0 ff7c 	bl	800019c <__adddf3>
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	4ba5      	ldr	r3, [pc, #660]	; (800f53c <atan+0x2f4>)
 800f2a8:	f7f1 fbbe 	bl	8000a28 <__aeabi_dcmpgt>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1e9      	bne.n	800f284 <atan+0x3c>
 800f2b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f2b4:	e027      	b.n	800f306 <atan+0xbe>
 800f2b6:	f000 f951 	bl	800f55c <fabs>
 800f2ba:	4ba1      	ldr	r3, [pc, #644]	; (800f540 <atan+0x2f8>)
 800f2bc:	4604      	mov	r4, r0
 800f2be:	429e      	cmp	r6, r3
 800f2c0:	460d      	mov	r5, r1
 800f2c2:	f300 80b8 	bgt.w	800f436 <atan+0x1ee>
 800f2c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f2ca:	429e      	cmp	r6, r3
 800f2cc:	f300 809c 	bgt.w	800f408 <atan+0x1c0>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	f7f0 ff62 	bl	800019c <__adddf3>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	4b98      	ldr	r3, [pc, #608]	; (800f53c <atan+0x2f4>)
 800f2dc:	f7f0 ff5c 	bl	8000198 <__aeabi_dsub>
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	460f      	mov	r7, r1
 800f2e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	f7f0 ff55 	bl	800019c <__adddf3>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	4639      	mov	r1, r7
 800f2fa:	f7f1 fa2f 	bl	800075c <__aeabi_ddiv>
 800f2fe:	f04f 0a00 	mov.w	sl, #0
 800f302:	4604      	mov	r4, r0
 800f304:	460d      	mov	r5, r1
 800f306:	4622      	mov	r2, r4
 800f308:	462b      	mov	r3, r5
 800f30a:	4620      	mov	r0, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	f7f1 f8fb 	bl	8000508 <__aeabi_dmul>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4680      	mov	r8, r0
 800f318:	4689      	mov	r9, r1
 800f31a:	f7f1 f8f5 	bl	8000508 <__aeabi_dmul>
 800f31e:	a36c      	add	r3, pc, #432	; (adr r3, 800f4d0 <atan+0x288>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	4606      	mov	r6, r0
 800f326:	460f      	mov	r7, r1
 800f328:	f7f1 f8ee 	bl	8000508 <__aeabi_dmul>
 800f32c:	a36a      	add	r3, pc, #424	; (adr r3, 800f4d8 <atan+0x290>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	f7f0 ff33 	bl	800019c <__adddf3>
 800f336:	4632      	mov	r2, r6
 800f338:	463b      	mov	r3, r7
 800f33a:	f7f1 f8e5 	bl	8000508 <__aeabi_dmul>
 800f33e:	a368      	add	r3, pc, #416	; (adr r3, 800f4e0 <atan+0x298>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f7f0 ff2a 	bl	800019c <__adddf3>
 800f348:	4632      	mov	r2, r6
 800f34a:	463b      	mov	r3, r7
 800f34c:	f7f1 f8dc 	bl	8000508 <__aeabi_dmul>
 800f350:	a365      	add	r3, pc, #404	; (adr r3, 800f4e8 <atan+0x2a0>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f0 ff21 	bl	800019c <__adddf3>
 800f35a:	4632      	mov	r2, r6
 800f35c:	463b      	mov	r3, r7
 800f35e:	f7f1 f8d3 	bl	8000508 <__aeabi_dmul>
 800f362:	a363      	add	r3, pc, #396	; (adr r3, 800f4f0 <atan+0x2a8>)
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	f7f0 ff18 	bl	800019c <__adddf3>
 800f36c:	4632      	mov	r2, r6
 800f36e:	463b      	mov	r3, r7
 800f370:	f7f1 f8ca 	bl	8000508 <__aeabi_dmul>
 800f374:	a360      	add	r3, pc, #384	; (adr r3, 800f4f8 <atan+0x2b0>)
 800f376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37a:	f7f0 ff0f 	bl	800019c <__adddf3>
 800f37e:	4642      	mov	r2, r8
 800f380:	464b      	mov	r3, r9
 800f382:	f7f1 f8c1 	bl	8000508 <__aeabi_dmul>
 800f386:	a35e      	add	r3, pc, #376	; (adr r3, 800f500 <atan+0x2b8>)
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	4680      	mov	r8, r0
 800f38e:	4689      	mov	r9, r1
 800f390:	4630      	mov	r0, r6
 800f392:	4639      	mov	r1, r7
 800f394:	f7f1 f8b8 	bl	8000508 <__aeabi_dmul>
 800f398:	a35b      	add	r3, pc, #364	; (adr r3, 800f508 <atan+0x2c0>)
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	f7f0 fefb 	bl	8000198 <__aeabi_dsub>
 800f3a2:	4632      	mov	r2, r6
 800f3a4:	463b      	mov	r3, r7
 800f3a6:	f7f1 f8af 	bl	8000508 <__aeabi_dmul>
 800f3aa:	a359      	add	r3, pc, #356	; (adr r3, 800f510 <atan+0x2c8>)
 800f3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b0:	f7f0 fef2 	bl	8000198 <__aeabi_dsub>
 800f3b4:	4632      	mov	r2, r6
 800f3b6:	463b      	mov	r3, r7
 800f3b8:	f7f1 f8a6 	bl	8000508 <__aeabi_dmul>
 800f3bc:	a356      	add	r3, pc, #344	; (adr r3, 800f518 <atan+0x2d0>)
 800f3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c2:	f7f0 fee9 	bl	8000198 <__aeabi_dsub>
 800f3c6:	4632      	mov	r2, r6
 800f3c8:	463b      	mov	r3, r7
 800f3ca:	f7f1 f89d 	bl	8000508 <__aeabi_dmul>
 800f3ce:	a354      	add	r3, pc, #336	; (adr r3, 800f520 <atan+0x2d8>)
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f7f0 fee0 	bl	8000198 <__aeabi_dsub>
 800f3d8:	4632      	mov	r2, r6
 800f3da:	463b      	mov	r3, r7
 800f3dc:	f7f1 f894 	bl	8000508 <__aeabi_dmul>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	f7f0 fed8 	bl	800019c <__adddf3>
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	462b      	mov	r3, r5
 800f3f0:	f7f1 f88a 	bl	8000508 <__aeabi_dmul>
 800f3f4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	d144      	bne.n	800f488 <atan+0x240>
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	f7f0 fec9 	bl	8000198 <__aeabi_dsub>
 800f406:	e734      	b.n	800f272 <atan+0x2a>
 800f408:	2200      	movs	r2, #0
 800f40a:	4b4c      	ldr	r3, [pc, #304]	; (800f53c <atan+0x2f4>)
 800f40c:	f7f0 fec4 	bl	8000198 <__aeabi_dsub>
 800f410:	2200      	movs	r2, #0
 800f412:	4606      	mov	r6, r0
 800f414:	460f      	mov	r7, r1
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	4b48      	ldr	r3, [pc, #288]	; (800f53c <atan+0x2f4>)
 800f41c:	f7f0 febe 	bl	800019c <__adddf3>
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	4630      	mov	r0, r6
 800f426:	4639      	mov	r1, r7
 800f428:	f7f1 f998 	bl	800075c <__aeabi_ddiv>
 800f42c:	f04f 0a01 	mov.w	sl, #1
 800f430:	4604      	mov	r4, r0
 800f432:	460d      	mov	r5, r1
 800f434:	e767      	b.n	800f306 <atan+0xbe>
 800f436:	4b43      	ldr	r3, [pc, #268]	; (800f544 <atan+0x2fc>)
 800f438:	429e      	cmp	r6, r3
 800f43a:	da1a      	bge.n	800f472 <atan+0x22a>
 800f43c:	2200      	movs	r2, #0
 800f43e:	4b42      	ldr	r3, [pc, #264]	; (800f548 <atan+0x300>)
 800f440:	f7f0 feaa 	bl	8000198 <__aeabi_dsub>
 800f444:	2200      	movs	r2, #0
 800f446:	4606      	mov	r6, r0
 800f448:	460f      	mov	r7, r1
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	4b3e      	ldr	r3, [pc, #248]	; (800f548 <atan+0x300>)
 800f450:	f7f1 f85a 	bl	8000508 <__aeabi_dmul>
 800f454:	2200      	movs	r2, #0
 800f456:	4b39      	ldr	r3, [pc, #228]	; (800f53c <atan+0x2f4>)
 800f458:	f7f0 fea0 	bl	800019c <__adddf3>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f7f1 f97a 	bl	800075c <__aeabi_ddiv>
 800f468:	f04f 0a02 	mov.w	sl, #2
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	e749      	b.n	800f306 <atan+0xbe>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	2000      	movs	r0, #0
 800f478:	4934      	ldr	r1, [pc, #208]	; (800f54c <atan+0x304>)
 800f47a:	f7f1 f96f 	bl	800075c <__aeabi_ddiv>
 800f47e:	f04f 0a03 	mov.w	sl, #3
 800f482:	4604      	mov	r4, r0
 800f484:	460d      	mov	r5, r1
 800f486:	e73e      	b.n	800f306 <atan+0xbe>
 800f488:	4b31      	ldr	r3, [pc, #196]	; (800f550 <atan+0x308>)
 800f48a:	4e32      	ldr	r6, [pc, #200]	; (800f554 <atan+0x30c>)
 800f48c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f490:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f494:	e9da 2300 	ldrd	r2, r3, [sl]
 800f498:	f7f0 fe7e 	bl	8000198 <__aeabi_dsub>
 800f49c:	4622      	mov	r2, r4
 800f49e:	462b      	mov	r3, r5
 800f4a0:	f7f0 fe7a 	bl	8000198 <__aeabi_dsub>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f4ac:	f7f0 fe74 	bl	8000198 <__aeabi_dsub>
 800f4b0:	f1bb 0f00 	cmp.w	fp, #0
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	f6bf aee4 	bge.w	800f284 <atan+0x3c>
 800f4bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4c0:	461d      	mov	r5, r3
 800f4c2:	e6df      	b.n	800f284 <atan+0x3c>
 800f4c4:	4d24      	ldr	r5, [pc, #144]	; (800f558 <atan+0x310>)
 800f4c6:	e6dd      	b.n	800f284 <atan+0x3c>
 800f4c8:	8800759c 	.word	0x8800759c
 800f4cc:	7e37e43c 	.word	0x7e37e43c
 800f4d0:	e322da11 	.word	0xe322da11
 800f4d4:	3f90ad3a 	.word	0x3f90ad3a
 800f4d8:	24760deb 	.word	0x24760deb
 800f4dc:	3fa97b4b 	.word	0x3fa97b4b
 800f4e0:	a0d03d51 	.word	0xa0d03d51
 800f4e4:	3fb10d66 	.word	0x3fb10d66
 800f4e8:	c54c206e 	.word	0xc54c206e
 800f4ec:	3fb745cd 	.word	0x3fb745cd
 800f4f0:	920083ff 	.word	0x920083ff
 800f4f4:	3fc24924 	.word	0x3fc24924
 800f4f8:	5555550d 	.word	0x5555550d
 800f4fc:	3fd55555 	.word	0x3fd55555
 800f500:	2c6a6c2f 	.word	0x2c6a6c2f
 800f504:	bfa2b444 	.word	0xbfa2b444
 800f508:	52defd9a 	.word	0x52defd9a
 800f50c:	3fadde2d 	.word	0x3fadde2d
 800f510:	af749a6d 	.word	0xaf749a6d
 800f514:	3fb3b0f2 	.word	0x3fb3b0f2
 800f518:	fe231671 	.word	0xfe231671
 800f51c:	3fbc71c6 	.word	0x3fbc71c6
 800f520:	9998ebc4 	.word	0x9998ebc4
 800f524:	3fc99999 	.word	0x3fc99999
 800f528:	440fffff 	.word	0x440fffff
 800f52c:	7ff00000 	.word	0x7ff00000
 800f530:	54442d18 	.word	0x54442d18
 800f534:	bff921fb 	.word	0xbff921fb
 800f538:	3fdbffff 	.word	0x3fdbffff
 800f53c:	3ff00000 	.word	0x3ff00000
 800f540:	3ff2ffff 	.word	0x3ff2ffff
 800f544:	40038000 	.word	0x40038000
 800f548:	3ff80000 	.word	0x3ff80000
 800f54c:	bff00000 	.word	0xbff00000
 800f550:	08014fb8 	.word	0x08014fb8
 800f554:	08014f98 	.word	0x08014f98
 800f558:	3ff921fb 	.word	0x3ff921fb

0800f55c <fabs>:
 800f55c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f560:	4770      	bx	lr

0800f562 <atan2>:
 800f562:	f000 b865 	b.w	800f630 <__ieee754_atan2>
	...

0800f568 <fmod>:
 800f568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f56c:	461f      	mov	r7, r3
 800f56e:	4680      	mov	r8, r0
 800f570:	4689      	mov	r9, r1
 800f572:	4616      	mov	r6, r2
 800f574:	f000 f92e 	bl	800f7d4 <__ieee754_fmod>
 800f578:	4b15      	ldr	r3, [pc, #84]	; (800f5d0 <fmod+0x68>)
 800f57a:	4604      	mov	r4, r0
 800f57c:	f993 3000 	ldrsb.w	r3, [r3]
 800f580:	460d      	mov	r5, r1
 800f582:	3301      	adds	r3, #1
 800f584:	d020      	beq.n	800f5c8 <fmod+0x60>
 800f586:	4632      	mov	r2, r6
 800f588:	463b      	mov	r3, r7
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f1 fa55 	bl	8000a3c <__aeabi_dcmpun>
 800f592:	b9c8      	cbnz	r0, 800f5c8 <fmod+0x60>
 800f594:	4642      	mov	r2, r8
 800f596:	464b      	mov	r3, r9
 800f598:	4640      	mov	r0, r8
 800f59a:	4649      	mov	r1, r9
 800f59c:	f7f1 fa4e 	bl	8000a3c <__aeabi_dcmpun>
 800f5a0:	b990      	cbnz	r0, 800f5c8 <fmod+0x60>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	4639      	mov	r1, r7
 800f5aa:	f7f1 fa15 	bl	80009d8 <__aeabi_dcmpeq>
 800f5ae:	b158      	cbz	r0, 800f5c8 <fmod+0x60>
 800f5b0:	f000 fade 	bl	800fb70 <__errno>
 800f5b4:	2321      	movs	r3, #33	; 0x21
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	6003      	str	r3, [r0, #0]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4619      	mov	r1, r3
 800f5c0:	f7f1 f8cc 	bl	800075c <__aeabi_ddiv>
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d0:	20000222 	.word	0x20000222

0800f5d4 <sqrt>:
 800f5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	460f      	mov	r7, r1
 800f5da:	f000 fa0d 	bl	800f9f8 <__ieee754_sqrt>
 800f5de:	4b12      	ldr	r3, [pc, #72]	; (800f628 <sqrt+0x54>)
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	f993 3000 	ldrsb.w	r3, [r3]
 800f5e6:	460d      	mov	r5, r1
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	d019      	beq.n	800f620 <sqrt+0x4c>
 800f5ec:	4632      	mov	r2, r6
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	f7f1 fa22 	bl	8000a3c <__aeabi_dcmpun>
 800f5f8:	b990      	cbnz	r0, 800f620 <sqrt+0x4c>
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f1 f9f3 	bl	80009ec <__aeabi_dcmplt>
 800f606:	b158      	cbz	r0, 800f620 <sqrt+0x4c>
 800f608:	f000 fab2 	bl	800fb70 <__errno>
 800f60c:	2321      	movs	r3, #33	; 0x21
 800f60e:	2200      	movs	r2, #0
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	2300      	movs	r3, #0
 800f614:	4610      	mov	r0, r2
 800f616:	4619      	mov	r1, r3
 800f618:	f7f1 f8a0 	bl	800075c <__aeabi_ddiv>
 800f61c:	4604      	mov	r4, r0
 800f61e:	460d      	mov	r5, r1
 800f620:	4620      	mov	r0, r4
 800f622:	4629      	mov	r1, r5
 800f624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f626:	bf00      	nop
 800f628:	20000222 	.word	0x20000222
 800f62c:	00000000 	.word	0x00000000

0800f630 <__ieee754_atan2>:
 800f630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	4692      	mov	sl, r2
 800f636:	4699      	mov	r9, r3
 800f638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f63c:	461f      	mov	r7, r3
 800f63e:	f1ca 0300 	rsb	r3, sl, #0
 800f642:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800f7d0 <__ieee754_atan2+0x1a0>
 800f646:	ea43 030a 	orr.w	r3, r3, sl
 800f64a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f64e:	4573      	cmp	r3, lr
 800f650:	4604      	mov	r4, r0
 800f652:	460d      	mov	r5, r1
 800f654:	d808      	bhi.n	800f668 <__ieee754_atan2+0x38>
 800f656:	4246      	negs	r6, r0
 800f658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f65c:	4306      	orrs	r6, r0
 800f65e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800f662:	4576      	cmp	r6, lr
 800f664:	468c      	mov	ip, r1
 800f666:	d908      	bls.n	800f67a <__ieee754_atan2+0x4a>
 800f668:	4652      	mov	r2, sl
 800f66a:	464b      	mov	r3, r9
 800f66c:	4620      	mov	r0, r4
 800f66e:	4629      	mov	r1, r5
 800f670:	f7f0 fd94 	bl	800019c <__adddf3>
 800f674:	4604      	mov	r4, r0
 800f676:	460d      	mov	r5, r1
 800f678:	e019      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f67a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800f67e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800f682:	ea56 060a 	orrs.w	r6, r6, sl
 800f686:	d103      	bne.n	800f690 <__ieee754_atan2+0x60>
 800f688:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	f7ff bddc 	b.w	800f248 <atan>
 800f690:	17be      	asrs	r6, r7, #30
 800f692:	f006 0602 	and.w	r6, r6, #2
 800f696:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800f69a:	ea53 0100 	orrs.w	r1, r3, r0
 800f69e:	d10a      	bne.n	800f6b6 <__ieee754_atan2+0x86>
 800f6a0:	2e02      	cmp	r6, #2
 800f6a2:	d067      	beq.n	800f774 <__ieee754_atan2+0x144>
 800f6a4:	2e03      	cmp	r6, #3
 800f6a6:	d102      	bne.n	800f6ae <__ieee754_atan2+0x7e>
 800f6a8:	a53b      	add	r5, pc, #236	; (adr r5, 800f798 <__ieee754_atan2+0x168>)
 800f6aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b6:	ea52 010a 	orrs.w	r1, r2, sl
 800f6ba:	d106      	bne.n	800f6ca <__ieee754_atan2+0x9a>
 800f6bc:	f1bc 0f00 	cmp.w	ip, #0
 800f6c0:	da63      	bge.n	800f78a <__ieee754_atan2+0x15a>
 800f6c2:	a537      	add	r5, pc, #220	; (adr r5, 800f7a0 <__ieee754_atan2+0x170>)
 800f6c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f6c8:	e7f1      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f6ca:	4572      	cmp	r2, lr
 800f6cc:	d10f      	bne.n	800f6ee <__ieee754_atan2+0xbe>
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800f6d4:	d107      	bne.n	800f6e6 <__ieee754_atan2+0xb6>
 800f6d6:	2e02      	cmp	r6, #2
 800f6d8:	d850      	bhi.n	800f77c <__ieee754_atan2+0x14c>
 800f6da:	4b3b      	ldr	r3, [pc, #236]	; (800f7c8 <__ieee754_atan2+0x198>)
 800f6dc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f6e0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800f6e4:	e7e3      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f6e6:	2e02      	cmp	r6, #2
 800f6e8:	d84c      	bhi.n	800f784 <__ieee754_atan2+0x154>
 800f6ea:	4b38      	ldr	r3, [pc, #224]	; (800f7cc <__ieee754_atan2+0x19c>)
 800f6ec:	e7f6      	b.n	800f6dc <__ieee754_atan2+0xac>
 800f6ee:	4573      	cmp	r3, lr
 800f6f0:	d0e4      	beq.n	800f6bc <__ieee754_atan2+0x8c>
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f6f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6fc:	da20      	bge.n	800f740 <__ieee754_atan2+0x110>
 800f6fe:	2f00      	cmp	r7, #0
 800f700:	da01      	bge.n	800f706 <__ieee754_atan2+0xd6>
 800f702:	323c      	adds	r2, #60	; 0x3c
 800f704:	db20      	blt.n	800f748 <__ieee754_atan2+0x118>
 800f706:	4652      	mov	r2, sl
 800f708:	464b      	mov	r3, r9
 800f70a:	4620      	mov	r0, r4
 800f70c:	4629      	mov	r1, r5
 800f70e:	f7f1 f825 	bl	800075c <__aeabi_ddiv>
 800f712:	f7ff ff23 	bl	800f55c <fabs>
 800f716:	f7ff fd97 	bl	800f248 <atan>
 800f71a:	4604      	mov	r4, r0
 800f71c:	460d      	mov	r5, r1
 800f71e:	2e01      	cmp	r6, #1
 800f720:	d015      	beq.n	800f74e <__ieee754_atan2+0x11e>
 800f722:	2e02      	cmp	r6, #2
 800f724:	d017      	beq.n	800f756 <__ieee754_atan2+0x126>
 800f726:	2e00      	cmp	r6, #0
 800f728:	d0c1      	beq.n	800f6ae <__ieee754_atan2+0x7e>
 800f72a:	a31f      	add	r3, pc, #124	; (adr r3, 800f7a8 <__ieee754_atan2+0x178>)
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	4620      	mov	r0, r4
 800f732:	4629      	mov	r1, r5
 800f734:	f7f0 fd30 	bl	8000198 <__aeabi_dsub>
 800f738:	a31d      	add	r3, pc, #116	; (adr r3, 800f7b0 <__ieee754_atan2+0x180>)
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	e016      	b.n	800f76e <__ieee754_atan2+0x13e>
 800f740:	a51d      	add	r5, pc, #116	; (adr r5, 800f7b8 <__ieee754_atan2+0x188>)
 800f742:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f746:	e7ea      	b.n	800f71e <__ieee754_atan2+0xee>
 800f748:	2400      	movs	r4, #0
 800f74a:	2500      	movs	r5, #0
 800f74c:	e7e7      	b.n	800f71e <__ieee754_atan2+0xee>
 800f74e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f752:	461d      	mov	r5, r3
 800f754:	e7ab      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f756:	a314      	add	r3, pc, #80	; (adr r3, 800f7a8 <__ieee754_atan2+0x178>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	4620      	mov	r0, r4
 800f75e:	4629      	mov	r1, r5
 800f760:	f7f0 fd1a 	bl	8000198 <__aeabi_dsub>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	a111      	add	r1, pc, #68	; (adr r1, 800f7b0 <__ieee754_atan2+0x180>)
 800f76a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f76e:	f7f0 fd13 	bl	8000198 <__aeabi_dsub>
 800f772:	e77f      	b.n	800f674 <__ieee754_atan2+0x44>
 800f774:	a50e      	add	r5, pc, #56	; (adr r5, 800f7b0 <__ieee754_atan2+0x180>)
 800f776:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f77a:	e798      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f77c:	a510      	add	r5, pc, #64	; (adr r5, 800f7c0 <__ieee754_atan2+0x190>)
 800f77e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f782:	e794      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f784:	2400      	movs	r4, #0
 800f786:	2500      	movs	r5, #0
 800f788:	e791      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f78a:	a50b      	add	r5, pc, #44	; (adr r5, 800f7b8 <__ieee754_atan2+0x188>)
 800f78c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f790:	e78d      	b.n	800f6ae <__ieee754_atan2+0x7e>
 800f792:	bf00      	nop
 800f794:	f3af 8000 	nop.w
 800f798:	54442d18 	.word	0x54442d18
 800f79c:	c00921fb 	.word	0xc00921fb
 800f7a0:	54442d18 	.word	0x54442d18
 800f7a4:	bff921fb 	.word	0xbff921fb
 800f7a8:	33145c07 	.word	0x33145c07
 800f7ac:	3ca1a626 	.word	0x3ca1a626
 800f7b0:	54442d18 	.word	0x54442d18
 800f7b4:	400921fb 	.word	0x400921fb
 800f7b8:	54442d18 	.word	0x54442d18
 800f7bc:	3ff921fb 	.word	0x3ff921fb
 800f7c0:	54442d18 	.word	0x54442d18
 800f7c4:	3fe921fb 	.word	0x3fe921fb
 800f7c8:	08014fd8 	.word	0x08014fd8
 800f7cc:	08014ff0 	.word	0x08014ff0
 800f7d0:	7ff00000 	.word	0x7ff00000

0800f7d4 <__ieee754_fmod>:
 800f7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d8:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800f7dc:	4607      	mov	r7, r0
 800f7de:	461d      	mov	r5, r3
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	ea58 0302 	orrs.w	r3, r8, r2
 800f7e6:	460e      	mov	r6, r1
 800f7e8:	4614      	mov	r4, r2
 800f7ea:	4694      	mov	ip, r2
 800f7ec:	4696      	mov	lr, r2
 800f7ee:	d00d      	beq.n	800f80c <__ieee754_fmod+0x38>
 800f7f0:	4a7b      	ldr	r2, [pc, #492]	; (800f9e0 <__ieee754_fmod+0x20c>)
 800f7f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	468a      	mov	sl, r1
 800f7fa:	dc07      	bgt.n	800f80c <__ieee754_fmod+0x38>
 800f7fc:	4262      	negs	r2, r4
 800f7fe:	4979      	ldr	r1, [pc, #484]	; (800f9e4 <__ieee754_fmod+0x210>)
 800f800:	4322      	orrs	r2, r4
 800f802:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800f806:	428a      	cmp	r2, r1
 800f808:	460a      	mov	r2, r1
 800f80a:	d90c      	bls.n	800f826 <__ieee754_fmod+0x52>
 800f80c:	4603      	mov	r3, r0
 800f80e:	4622      	mov	r2, r4
 800f810:	4638      	mov	r0, r7
 800f812:	4631      	mov	r1, r6
 800f814:	f7f0 fe78 	bl	8000508 <__aeabi_dmul>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	f7f0 ff9e 	bl	800075c <__aeabi_ddiv>
 800f820:	4607      	mov	r7, r0
 800f822:	460e      	mov	r6, r1
 800f824:	e00f      	b.n	800f846 <__ieee754_fmod+0x72>
 800f826:	4543      	cmp	r3, r8
 800f828:	46b9      	mov	r9, r7
 800f82a:	4639      	mov	r1, r7
 800f82c:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800f830:	dc0d      	bgt.n	800f84e <__ieee754_fmod+0x7a>
 800f832:	db08      	blt.n	800f846 <__ieee754_fmod+0x72>
 800f834:	4567      	cmp	r7, ip
 800f836:	d306      	bcc.n	800f846 <__ieee754_fmod+0x72>
 800f838:	d109      	bne.n	800f84e <__ieee754_fmod+0x7a>
 800f83a:	4a6b      	ldr	r2, [pc, #428]	; (800f9e8 <__ieee754_fmod+0x214>)
 800f83c:	0fe4      	lsrs	r4, r4, #31
 800f83e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800f842:	e9d4 7600 	ldrd	r7, r6, [r4]
 800f846:	4638      	mov	r0, r7
 800f848:	4631      	mov	r1, r6
 800f84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f84e:	ea1a 0f02 	tst.w	sl, r2
 800f852:	d14a      	bne.n	800f8ea <__ieee754_fmod+0x116>
 800f854:	2b00      	cmp	r3, #0
 800f856:	d141      	bne.n	800f8dc <__ieee754_fmod+0x108>
 800f858:	464a      	mov	r2, r9
 800f85a:	4864      	ldr	r0, [pc, #400]	; (800f9ec <__ieee754_fmod+0x218>)
 800f85c:	2a00      	cmp	r2, #0
 800f85e:	dc3a      	bgt.n	800f8d6 <__ieee754_fmod+0x102>
 800f860:	4a60      	ldr	r2, [pc, #384]	; (800f9e4 <__ieee754_fmod+0x210>)
 800f862:	402a      	ands	r2, r5
 800f864:	2a00      	cmp	r2, #0
 800f866:	d14f      	bne.n	800f908 <__ieee754_fmod+0x134>
 800f868:	f1b8 0f00 	cmp.w	r8, #0
 800f86c:	d144      	bne.n	800f8f8 <__ieee754_fmod+0x124>
 800f86e:	4666      	mov	r6, ip
 800f870:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f874:	2e00      	cmp	r6, #0
 800f876:	dc3c      	bgt.n	800f8f2 <__ieee754_fmod+0x11e>
 800f878:	4e5d      	ldr	r6, [pc, #372]	; (800f9f0 <__ieee754_fmod+0x21c>)
 800f87a:	42b0      	cmp	r0, r6
 800f87c:	db49      	blt.n	800f912 <__ieee754_fmod+0x13e>
 800f87e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800f882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f886:	4e5a      	ldr	r6, [pc, #360]	; (800f9f0 <__ieee754_fmod+0x21c>)
 800f888:	42b2      	cmp	r2, r6
 800f88a:	db54      	blt.n	800f936 <__ieee754_fmod+0x162>
 800f88c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f890:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800f894:	1a80      	subs	r0, r0, r2
 800f896:	1b5e      	subs	r6, r3, r5
 800f898:	eba1 070e 	sub.w	r7, r1, lr
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d161      	bne.n	800f964 <__ieee754_fmod+0x190>
 800f8a0:	4571      	cmp	r1, lr
 800f8a2:	bf38      	it	cc
 800f8a4:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800f8a8:	2e00      	cmp	r6, #0
 800f8aa:	bfa4      	itt	ge
 800f8ac:	4639      	movge	r1, r7
 800f8ae:	4633      	movge	r3, r6
 800f8b0:	ea53 0001 	orrs.w	r0, r3, r1
 800f8b4:	d0c1      	beq.n	800f83a <__ieee754_fmod+0x66>
 800f8b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8ba:	db68      	blt.n	800f98e <__ieee754_fmod+0x1ba>
 800f8bc:	484c      	ldr	r0, [pc, #304]	; (800f9f0 <__ieee754_fmod+0x21c>)
 800f8be:	4282      	cmp	r2, r0
 800f8c0:	db6b      	blt.n	800f99a <__ieee754_fmod+0x1c6>
 800f8c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8c6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800f8ca:	431c      	orrs	r4, r3
 800f8cc:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	464e      	mov	r6, r9
 800f8d4:	e7b7      	b.n	800f846 <__ieee754_fmod+0x72>
 800f8d6:	3801      	subs	r0, #1
 800f8d8:	0052      	lsls	r2, r2, #1
 800f8da:	e7bf      	b.n	800f85c <__ieee754_fmod+0x88>
 800f8dc:	4844      	ldr	r0, [pc, #272]	; (800f9f0 <__ieee754_fmod+0x21c>)
 800f8de:	02da      	lsls	r2, r3, #11
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	ddbd      	ble.n	800f860 <__ieee754_fmod+0x8c>
 800f8e4:	3801      	subs	r0, #1
 800f8e6:	0052      	lsls	r2, r2, #1
 800f8e8:	e7fa      	b.n	800f8e0 <__ieee754_fmod+0x10c>
 800f8ea:	1518      	asrs	r0, r3, #20
 800f8ec:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800f8f0:	e7b6      	b.n	800f860 <__ieee754_fmod+0x8c>
 800f8f2:	3a01      	subs	r2, #1
 800f8f4:	0076      	lsls	r6, r6, #1
 800f8f6:	e7bd      	b.n	800f874 <__ieee754_fmod+0xa0>
 800f8f8:	4a3d      	ldr	r2, [pc, #244]	; (800f9f0 <__ieee754_fmod+0x21c>)
 800f8fa:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	ddba      	ble.n	800f878 <__ieee754_fmod+0xa4>
 800f902:	3a01      	subs	r2, #1
 800f904:	0076      	lsls	r6, r6, #1
 800f906:	e7fa      	b.n	800f8fe <__ieee754_fmod+0x12a>
 800f908:	ea4f 5228 	mov.w	r2, r8, asr #20
 800f90c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f910:	e7b2      	b.n	800f878 <__ieee754_fmod+0xa4>
 800f912:	1a31      	subs	r1, r6, r0
 800f914:	291f      	cmp	r1, #31
 800f916:	dc08      	bgt.n	800f92a <__ieee754_fmod+0x156>
 800f918:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800f91c:	408b      	lsls	r3, r1
 800f91e:	fa29 f606 	lsr.w	r6, r9, r6
 800f922:	4333      	orrs	r3, r6
 800f924:	fa09 f101 	lsl.w	r1, r9, r1
 800f928:	e7ad      	b.n	800f886 <__ieee754_fmod+0xb2>
 800f92a:	4b32      	ldr	r3, [pc, #200]	; (800f9f4 <__ieee754_fmod+0x220>)
 800f92c:	2100      	movs	r1, #0
 800f92e:	1a1b      	subs	r3, r3, r0
 800f930:	fa09 f303 	lsl.w	r3, r9, r3
 800f934:	e7a7      	b.n	800f886 <__ieee754_fmod+0xb2>
 800f936:	eba6 0e02 	sub.w	lr, r6, r2
 800f93a:	f1be 0f1f 	cmp.w	lr, #31
 800f93e:	dc0a      	bgt.n	800f956 <__ieee754_fmod+0x182>
 800f940:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800f944:	fa08 f80e 	lsl.w	r8, r8, lr
 800f948:	fa2c f505 	lsr.w	r5, ip, r5
 800f94c:	ea45 0508 	orr.w	r5, r5, r8
 800f950:	fa0c fe0e 	lsl.w	lr, ip, lr
 800f954:	e79e      	b.n	800f894 <__ieee754_fmod+0xc0>
 800f956:	4d27      	ldr	r5, [pc, #156]	; (800f9f4 <__ieee754_fmod+0x220>)
 800f958:	f04f 0e00 	mov.w	lr, #0
 800f95c:	1aad      	subs	r5, r5, r2
 800f95e:	fa0c f505 	lsl.w	r5, ip, r5
 800f962:	e797      	b.n	800f894 <__ieee754_fmod+0xc0>
 800f964:	4571      	cmp	r1, lr
 800f966:	bf38      	it	cc
 800f968:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800f96c:	2e00      	cmp	r6, #0
 800f96e:	da05      	bge.n	800f97c <__ieee754_fmod+0x1a8>
 800f970:	0fce      	lsrs	r6, r1, #31
 800f972:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800f976:	0049      	lsls	r1, r1, #1
 800f978:	3801      	subs	r0, #1
 800f97a:	e78c      	b.n	800f896 <__ieee754_fmod+0xc2>
 800f97c:	ea56 0307 	orrs.w	r3, r6, r7
 800f980:	f43f af5b 	beq.w	800f83a <__ieee754_fmod+0x66>
 800f984:	0ffb      	lsrs	r3, r7, #31
 800f986:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800f98a:	0079      	lsls	r1, r7, #1
 800f98c:	e7f4      	b.n	800f978 <__ieee754_fmod+0x1a4>
 800f98e:	0fc8      	lsrs	r0, r1, #31
 800f990:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f994:	0049      	lsls	r1, r1, #1
 800f996:	3a01      	subs	r2, #1
 800f998:	e78d      	b.n	800f8b6 <__ieee754_fmod+0xe2>
 800f99a:	1a80      	subs	r0, r0, r2
 800f99c:	2814      	cmp	r0, #20
 800f99e:	dc0a      	bgt.n	800f9b6 <__ieee754_fmod+0x1e2>
 800f9a0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800f9a4:	fa03 f202 	lsl.w	r2, r3, r2
 800f9a8:	40c1      	lsrs	r1, r0
 800f9aa:	430a      	orrs	r2, r1
 800f9ac:	4103      	asrs	r3, r0
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	ea43 0104 	orr.w	r1, r3, r4
 800f9b4:	e734      	b.n	800f820 <__ieee754_fmod+0x4c>
 800f9b6:	281f      	cmp	r0, #31
 800f9b8:	dc07      	bgt.n	800f9ca <__ieee754_fmod+0x1f6>
 800f9ba:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800f9be:	40c1      	lsrs	r1, r0
 800f9c0:	fa03 f202 	lsl.w	r2, r3, r2
 800f9c4:	430a      	orrs	r2, r1
 800f9c6:	4623      	mov	r3, r4
 800f9c8:	e7f1      	b.n	800f9ae <__ieee754_fmod+0x1da>
 800f9ca:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800f9ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f9d2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800f9d6:	32e2      	adds	r2, #226	; 0xe2
 800f9d8:	fa43 f202 	asr.w	r2, r3, r2
 800f9dc:	e7f3      	b.n	800f9c6 <__ieee754_fmod+0x1f2>
 800f9de:	bf00      	nop
 800f9e0:	7fefffff 	.word	0x7fefffff
 800f9e4:	7ff00000 	.word	0x7ff00000
 800f9e8:	08015008 	.word	0x08015008
 800f9ec:	fffffbed 	.word	0xfffffbed
 800f9f0:	fffffc02 	.word	0xfffffc02
 800f9f4:	fffffbe2 	.word	0xfffffbe2

0800f9f8 <__ieee754_sqrt>:
 800f9f8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800fb4c <__ieee754_sqrt+0x154>
 800f9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa00:	ea3c 0c01 	bics.w	ip, ip, r1
 800fa04:	460b      	mov	r3, r1
 800fa06:	4606      	mov	r6, r0
 800fa08:	460d      	mov	r5, r1
 800fa0a:	460a      	mov	r2, r1
 800fa0c:	4607      	mov	r7, r0
 800fa0e:	4604      	mov	r4, r0
 800fa10:	d10e      	bne.n	800fa30 <__ieee754_sqrt+0x38>
 800fa12:	4602      	mov	r2, r0
 800fa14:	f7f0 fd78 	bl	8000508 <__aeabi_dmul>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	4629      	mov	r1, r5
 800fa20:	f7f0 fbbc 	bl	800019c <__adddf3>
 800fa24:	4606      	mov	r6, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa30:	2900      	cmp	r1, #0
 800fa32:	dc0d      	bgt.n	800fa50 <__ieee754_sqrt+0x58>
 800fa34:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800fa38:	ea5c 0707 	orrs.w	r7, ip, r7
 800fa3c:	d0f4      	beq.n	800fa28 <__ieee754_sqrt+0x30>
 800fa3e:	b139      	cbz	r1, 800fa50 <__ieee754_sqrt+0x58>
 800fa40:	4602      	mov	r2, r0
 800fa42:	f7f0 fba9 	bl	8000198 <__aeabi_dsub>
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	f7f0 fe87 	bl	800075c <__aeabi_ddiv>
 800fa4e:	e7e9      	b.n	800fa24 <__ieee754_sqrt+0x2c>
 800fa50:	1512      	asrs	r2, r2, #20
 800fa52:	d074      	beq.n	800fb3e <__ieee754_sqrt+0x146>
 800fa54:	2000      	movs	r0, #0
 800fa56:	07d5      	lsls	r5, r2, #31
 800fa58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa5c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800fa60:	bf5e      	ittt	pl
 800fa62:	0fe3      	lsrpl	r3, r4, #31
 800fa64:	0064      	lslpl	r4, r4, #1
 800fa66:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800fa6a:	0fe3      	lsrs	r3, r4, #31
 800fa6c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fa70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800fa74:	2516      	movs	r5, #22
 800fa76:	4601      	mov	r1, r0
 800fa78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fa7c:	1076      	asrs	r6, r6, #1
 800fa7e:	0064      	lsls	r4, r4, #1
 800fa80:	188f      	adds	r7, r1, r2
 800fa82:	429f      	cmp	r7, r3
 800fa84:	bfde      	ittt	le
 800fa86:	1bdb      	suble	r3, r3, r7
 800fa88:	18b9      	addle	r1, r7, r2
 800fa8a:	1880      	addle	r0, r0, r2
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	3d01      	subs	r5, #1
 800fa90:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800fa94:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fa98:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800fa9c:	d1f0      	bne.n	800fa80 <__ieee754_sqrt+0x88>
 800fa9e:	462a      	mov	r2, r5
 800faa0:	f04f 0e20 	mov.w	lr, #32
 800faa4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800faa8:	428b      	cmp	r3, r1
 800faaa:	eb07 0c05 	add.w	ip, r7, r5
 800faae:	dc02      	bgt.n	800fab6 <__ieee754_sqrt+0xbe>
 800fab0:	d113      	bne.n	800fada <__ieee754_sqrt+0xe2>
 800fab2:	45a4      	cmp	ip, r4
 800fab4:	d811      	bhi.n	800fada <__ieee754_sqrt+0xe2>
 800fab6:	f1bc 0f00 	cmp.w	ip, #0
 800faba:	eb0c 0507 	add.w	r5, ip, r7
 800fabe:	da43      	bge.n	800fb48 <__ieee754_sqrt+0x150>
 800fac0:	2d00      	cmp	r5, #0
 800fac2:	db41      	blt.n	800fb48 <__ieee754_sqrt+0x150>
 800fac4:	f101 0801 	add.w	r8, r1, #1
 800fac8:	1a5b      	subs	r3, r3, r1
 800faca:	4641      	mov	r1, r8
 800facc:	45a4      	cmp	ip, r4
 800face:	bf88      	it	hi
 800fad0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800fad4:	eba4 040c 	sub.w	r4, r4, ip
 800fad8:	443a      	add	r2, r7
 800fada:	005b      	lsls	r3, r3, #1
 800fadc:	f1be 0e01 	subs.w	lr, lr, #1
 800fae0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800fae4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800fae8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800faec:	d1dc      	bne.n	800faa8 <__ieee754_sqrt+0xb0>
 800faee:	4323      	orrs	r3, r4
 800faf0:	d006      	beq.n	800fb00 <__ieee754_sqrt+0x108>
 800faf2:	1c54      	adds	r4, r2, #1
 800faf4:	bf0b      	itete	eq
 800faf6:	4672      	moveq	r2, lr
 800faf8:	3201      	addne	r2, #1
 800fafa:	3001      	addeq	r0, #1
 800fafc:	f022 0201 	bicne.w	r2, r2, #1
 800fb00:	1043      	asrs	r3, r0, #1
 800fb02:	07c1      	lsls	r1, r0, #31
 800fb04:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fb08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fb0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fb10:	bf48      	it	mi
 800fb12:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fb16:	4610      	mov	r0, r2
 800fb18:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800fb1c:	e782      	b.n	800fa24 <__ieee754_sqrt+0x2c>
 800fb1e:	0ae3      	lsrs	r3, r4, #11
 800fb20:	3915      	subs	r1, #21
 800fb22:	0564      	lsls	r4, r4, #21
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d0fa      	beq.n	800fb1e <__ieee754_sqrt+0x126>
 800fb28:	02de      	lsls	r6, r3, #11
 800fb2a:	d50a      	bpl.n	800fb42 <__ieee754_sqrt+0x14a>
 800fb2c:	f1c2 0020 	rsb	r0, r2, #32
 800fb30:	fa24 f000 	lsr.w	r0, r4, r0
 800fb34:	1e55      	subs	r5, r2, #1
 800fb36:	4094      	lsls	r4, r2
 800fb38:	4303      	orrs	r3, r0
 800fb3a:	1b4a      	subs	r2, r1, r5
 800fb3c:	e78a      	b.n	800fa54 <__ieee754_sqrt+0x5c>
 800fb3e:	4611      	mov	r1, r2
 800fb40:	e7f0      	b.n	800fb24 <__ieee754_sqrt+0x12c>
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	3201      	adds	r2, #1
 800fb46:	e7ef      	b.n	800fb28 <__ieee754_sqrt+0x130>
 800fb48:	4688      	mov	r8, r1
 800fb4a:	e7bd      	b.n	800fac8 <__ieee754_sqrt+0xd0>
 800fb4c:	7ff00000 	.word	0x7ff00000

0800fb50 <abort>:
 800fb50:	2006      	movs	r0, #6
 800fb52:	b508      	push	{r3, lr}
 800fb54:	f000 ffd8 	bl	8010b08 <raise>
 800fb58:	2001      	movs	r0, #1
 800fb5a:	f7f5 f992 	bl	8004e82 <_exit>
	...

0800fb60 <calloc>:
 800fb60:	4b02      	ldr	r3, [pc, #8]	; (800fb6c <calloc+0xc>)
 800fb62:	460a      	mov	r2, r1
 800fb64:	4601      	mov	r1, r0
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	f000 b86c 	b.w	800fc44 <_calloc_r>
 800fb6c:	20000224 	.word	0x20000224

0800fb70 <__errno>:
 800fb70:	4b01      	ldr	r3, [pc, #4]	; (800fb78 <__errno+0x8>)
 800fb72:	6818      	ldr	r0, [r3, #0]
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	20000224 	.word	0x20000224

0800fb7c <__libc_init_array>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	2600      	movs	r6, #0
 800fb80:	4d0c      	ldr	r5, [pc, #48]	; (800fbb4 <__libc_init_array+0x38>)
 800fb82:	4c0d      	ldr	r4, [pc, #52]	; (800fbb8 <__libc_init_array+0x3c>)
 800fb84:	1b64      	subs	r4, r4, r5
 800fb86:	10a4      	asrs	r4, r4, #2
 800fb88:	42a6      	cmp	r6, r4
 800fb8a:	d109      	bne.n	800fba0 <__libc_init_array+0x24>
 800fb8c:	f005 f87e 	bl	8014c8c <_init>
 800fb90:	2600      	movs	r6, #0
 800fb92:	4d0a      	ldr	r5, [pc, #40]	; (800fbbc <__libc_init_array+0x40>)
 800fb94:	4c0a      	ldr	r4, [pc, #40]	; (800fbc0 <__libc_init_array+0x44>)
 800fb96:	1b64      	subs	r4, r4, r5
 800fb98:	10a4      	asrs	r4, r4, #2
 800fb9a:	42a6      	cmp	r6, r4
 800fb9c:	d105      	bne.n	800fbaa <__libc_init_array+0x2e>
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba4:	4798      	blx	r3
 800fba6:	3601      	adds	r6, #1
 800fba8:	e7ee      	b.n	800fb88 <__libc_init_array+0xc>
 800fbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbae:	4798      	blx	r3
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	e7f2      	b.n	800fb9a <__libc_init_array+0x1e>
 800fbb4:	080154ec 	.word	0x080154ec
 800fbb8:	080154ec 	.word	0x080154ec
 800fbbc:	080154ec 	.word	0x080154ec
 800fbc0:	080154f8 	.word	0x080154f8

0800fbc4 <malloc>:
 800fbc4:	4b02      	ldr	r3, [pc, #8]	; (800fbd0 <malloc+0xc>)
 800fbc6:	4601      	mov	r1, r0
 800fbc8:	6818      	ldr	r0, [r3, #0]
 800fbca:	f000 b895 	b.w	800fcf8 <_malloc_r>
 800fbce:	bf00      	nop
 800fbd0:	20000224 	.word	0x20000224

0800fbd4 <free>:
 800fbd4:	4b02      	ldr	r3, [pc, #8]	; (800fbe0 <free+0xc>)
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	6818      	ldr	r0, [r3, #0]
 800fbda:	f000 b841 	b.w	800fc60 <_free_r>
 800fbde:	bf00      	nop
 800fbe0:	20000224 	.word	0x20000224

0800fbe4 <memcpy>:
 800fbe4:	440a      	add	r2, r1
 800fbe6:	4291      	cmp	r1, r2
 800fbe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbec:	d100      	bne.n	800fbf0 <memcpy+0xc>
 800fbee:	4770      	bx	lr
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbf6:	4291      	cmp	r1, r2
 800fbf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbfc:	d1f9      	bne.n	800fbf2 <memcpy+0xe>
 800fbfe:	bd10      	pop	{r4, pc}

0800fc00 <memmove>:
 800fc00:	4288      	cmp	r0, r1
 800fc02:	b510      	push	{r4, lr}
 800fc04:	eb01 0402 	add.w	r4, r1, r2
 800fc08:	d902      	bls.n	800fc10 <memmove+0x10>
 800fc0a:	4284      	cmp	r4, r0
 800fc0c:	4623      	mov	r3, r4
 800fc0e:	d807      	bhi.n	800fc20 <memmove+0x20>
 800fc10:	1e43      	subs	r3, r0, #1
 800fc12:	42a1      	cmp	r1, r4
 800fc14:	d008      	beq.n	800fc28 <memmove+0x28>
 800fc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc1e:	e7f8      	b.n	800fc12 <memmove+0x12>
 800fc20:	4601      	mov	r1, r0
 800fc22:	4402      	add	r2, r0
 800fc24:	428a      	cmp	r2, r1
 800fc26:	d100      	bne.n	800fc2a <memmove+0x2a>
 800fc28:	bd10      	pop	{r4, pc}
 800fc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc32:	e7f7      	b.n	800fc24 <memmove+0x24>

0800fc34 <memset>:
 800fc34:	4603      	mov	r3, r0
 800fc36:	4402      	add	r2, r0
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d100      	bne.n	800fc3e <memset+0xa>
 800fc3c:	4770      	bx	lr
 800fc3e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc42:	e7f9      	b.n	800fc38 <memset+0x4>

0800fc44 <_calloc_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	fb02 f501 	mul.w	r5, r2, r1
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	f000 f854 	bl	800fcf8 <_malloc_r>
 800fc50:	4604      	mov	r4, r0
 800fc52:	b118      	cbz	r0, 800fc5c <_calloc_r+0x18>
 800fc54:	462a      	mov	r2, r5
 800fc56:	2100      	movs	r1, #0
 800fc58:	f7ff ffec 	bl	800fc34 <memset>
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}

0800fc60 <_free_r>:
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4605      	mov	r5, r0
 800fc64:	2900      	cmp	r1, #0
 800fc66:	d043      	beq.n	800fcf0 <_free_r+0x90>
 800fc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc6c:	1f0c      	subs	r4, r1, #4
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	bfb8      	it	lt
 800fc72:	18e4      	addlt	r4, r4, r3
 800fc74:	f003 f8f2 	bl	8012e5c <__malloc_lock>
 800fc78:	4a1e      	ldr	r2, [pc, #120]	; (800fcf4 <_free_r+0x94>)
 800fc7a:	6813      	ldr	r3, [r2, #0]
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	b933      	cbnz	r3, 800fc8e <_free_r+0x2e>
 800fc80:	6063      	str	r3, [r4, #4]
 800fc82:	6014      	str	r4, [r2, #0]
 800fc84:	4628      	mov	r0, r5
 800fc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8a:	f003 b8ed 	b.w	8012e68 <__malloc_unlock>
 800fc8e:	42a3      	cmp	r3, r4
 800fc90:	d90a      	bls.n	800fca8 <_free_r+0x48>
 800fc92:	6821      	ldr	r1, [r4, #0]
 800fc94:	1862      	adds	r2, r4, r1
 800fc96:	4293      	cmp	r3, r2
 800fc98:	bf01      	itttt	eq
 800fc9a:	681a      	ldreq	r2, [r3, #0]
 800fc9c:	685b      	ldreq	r3, [r3, #4]
 800fc9e:	1852      	addeq	r2, r2, r1
 800fca0:	6022      	streq	r2, [r4, #0]
 800fca2:	6063      	str	r3, [r4, #4]
 800fca4:	6004      	str	r4, [r0, #0]
 800fca6:	e7ed      	b.n	800fc84 <_free_r+0x24>
 800fca8:	461a      	mov	r2, r3
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	b10b      	cbz	r3, 800fcb2 <_free_r+0x52>
 800fcae:	42a3      	cmp	r3, r4
 800fcb0:	d9fa      	bls.n	800fca8 <_free_r+0x48>
 800fcb2:	6811      	ldr	r1, [r2, #0]
 800fcb4:	1850      	adds	r0, r2, r1
 800fcb6:	42a0      	cmp	r0, r4
 800fcb8:	d10b      	bne.n	800fcd2 <_free_r+0x72>
 800fcba:	6820      	ldr	r0, [r4, #0]
 800fcbc:	4401      	add	r1, r0
 800fcbe:	1850      	adds	r0, r2, r1
 800fcc0:	4283      	cmp	r3, r0
 800fcc2:	6011      	str	r1, [r2, #0]
 800fcc4:	d1de      	bne.n	800fc84 <_free_r+0x24>
 800fcc6:	6818      	ldr	r0, [r3, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	4401      	add	r1, r0
 800fccc:	6011      	str	r1, [r2, #0]
 800fcce:	6053      	str	r3, [r2, #4]
 800fcd0:	e7d8      	b.n	800fc84 <_free_r+0x24>
 800fcd2:	d902      	bls.n	800fcda <_free_r+0x7a>
 800fcd4:	230c      	movs	r3, #12
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	e7d4      	b.n	800fc84 <_free_r+0x24>
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	1821      	adds	r1, r4, r0
 800fcde:	428b      	cmp	r3, r1
 800fce0:	bf01      	itttt	eq
 800fce2:	6819      	ldreq	r1, [r3, #0]
 800fce4:	685b      	ldreq	r3, [r3, #4]
 800fce6:	1809      	addeq	r1, r1, r0
 800fce8:	6021      	streq	r1, [r4, #0]
 800fcea:	6063      	str	r3, [r4, #4]
 800fcec:	6054      	str	r4, [r2, #4]
 800fcee:	e7c9      	b.n	800fc84 <_free_r+0x24>
 800fcf0:	bd38      	pop	{r3, r4, r5, pc}
 800fcf2:	bf00      	nop
 800fcf4:	20000930 	.word	0x20000930

0800fcf8 <_malloc_r>:
 800fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfa:	1ccd      	adds	r5, r1, #3
 800fcfc:	f025 0503 	bic.w	r5, r5, #3
 800fd00:	3508      	adds	r5, #8
 800fd02:	2d0c      	cmp	r5, #12
 800fd04:	bf38      	it	cc
 800fd06:	250c      	movcc	r5, #12
 800fd08:	2d00      	cmp	r5, #0
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	db01      	blt.n	800fd12 <_malloc_r+0x1a>
 800fd0e:	42a9      	cmp	r1, r5
 800fd10:	d903      	bls.n	800fd1a <_malloc_r+0x22>
 800fd12:	230c      	movs	r3, #12
 800fd14:	6033      	str	r3, [r6, #0]
 800fd16:	2000      	movs	r0, #0
 800fd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd1a:	f003 f89f 	bl	8012e5c <__malloc_lock>
 800fd1e:	4921      	ldr	r1, [pc, #132]	; (800fda4 <_malloc_r+0xac>)
 800fd20:	680a      	ldr	r2, [r1, #0]
 800fd22:	4614      	mov	r4, r2
 800fd24:	b99c      	cbnz	r4, 800fd4e <_malloc_r+0x56>
 800fd26:	4f20      	ldr	r7, [pc, #128]	; (800fda8 <_malloc_r+0xb0>)
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	b923      	cbnz	r3, 800fd36 <_malloc_r+0x3e>
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f000 feae 	bl	8010a90 <_sbrk_r>
 800fd34:	6038      	str	r0, [r7, #0]
 800fd36:	4629      	mov	r1, r5
 800fd38:	4630      	mov	r0, r6
 800fd3a:	f000 fea9 	bl	8010a90 <_sbrk_r>
 800fd3e:	1c43      	adds	r3, r0, #1
 800fd40:	d123      	bne.n	800fd8a <_malloc_r+0x92>
 800fd42:	230c      	movs	r3, #12
 800fd44:	4630      	mov	r0, r6
 800fd46:	6033      	str	r3, [r6, #0]
 800fd48:	f003 f88e 	bl	8012e68 <__malloc_unlock>
 800fd4c:	e7e3      	b.n	800fd16 <_malloc_r+0x1e>
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	1b5b      	subs	r3, r3, r5
 800fd52:	d417      	bmi.n	800fd84 <_malloc_r+0x8c>
 800fd54:	2b0b      	cmp	r3, #11
 800fd56:	d903      	bls.n	800fd60 <_malloc_r+0x68>
 800fd58:	6023      	str	r3, [r4, #0]
 800fd5a:	441c      	add	r4, r3
 800fd5c:	6025      	str	r5, [r4, #0]
 800fd5e:	e004      	b.n	800fd6a <_malloc_r+0x72>
 800fd60:	6863      	ldr	r3, [r4, #4]
 800fd62:	42a2      	cmp	r2, r4
 800fd64:	bf0c      	ite	eq
 800fd66:	600b      	streq	r3, [r1, #0]
 800fd68:	6053      	strne	r3, [r2, #4]
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f003 f87c 	bl	8012e68 <__malloc_unlock>
 800fd70:	f104 000b 	add.w	r0, r4, #11
 800fd74:	1d23      	adds	r3, r4, #4
 800fd76:	f020 0007 	bic.w	r0, r0, #7
 800fd7a:	1ac2      	subs	r2, r0, r3
 800fd7c:	d0cc      	beq.n	800fd18 <_malloc_r+0x20>
 800fd7e:	1a1b      	subs	r3, r3, r0
 800fd80:	50a3      	str	r3, [r4, r2]
 800fd82:	e7c9      	b.n	800fd18 <_malloc_r+0x20>
 800fd84:	4622      	mov	r2, r4
 800fd86:	6864      	ldr	r4, [r4, #4]
 800fd88:	e7cc      	b.n	800fd24 <_malloc_r+0x2c>
 800fd8a:	1cc4      	adds	r4, r0, #3
 800fd8c:	f024 0403 	bic.w	r4, r4, #3
 800fd90:	42a0      	cmp	r0, r4
 800fd92:	d0e3      	beq.n	800fd5c <_malloc_r+0x64>
 800fd94:	1a21      	subs	r1, r4, r0
 800fd96:	4630      	mov	r0, r6
 800fd98:	f000 fe7a 	bl	8010a90 <_sbrk_r>
 800fd9c:	3001      	adds	r0, #1
 800fd9e:	d1dd      	bne.n	800fd5c <_malloc_r+0x64>
 800fda0:	e7cf      	b.n	800fd42 <_malloc_r+0x4a>
 800fda2:	bf00      	nop
 800fda4:	20000930 	.word	0x20000930
 800fda8:	20000934 	.word	0x20000934

0800fdac <__cvt>:
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb2:	461f      	mov	r7, r3
 800fdb4:	bfbb      	ittet	lt
 800fdb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fdba:	461f      	movlt	r7, r3
 800fdbc:	2300      	movge	r3, #0
 800fdbe:	232d      	movlt	r3, #45	; 0x2d
 800fdc0:	b088      	sub	sp, #32
 800fdc2:	4614      	mov	r4, r2
 800fdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fdc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fdc8:	7013      	strb	r3, [r2, #0]
 800fdca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fdd0:	f023 0820 	bic.w	r8, r3, #32
 800fdd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fdd8:	d005      	beq.n	800fde6 <__cvt+0x3a>
 800fdda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fdde:	d100      	bne.n	800fde2 <__cvt+0x36>
 800fde0:	3501      	adds	r5, #1
 800fde2:	2302      	movs	r3, #2
 800fde4:	e000      	b.n	800fde8 <__cvt+0x3c>
 800fde6:	2303      	movs	r3, #3
 800fde8:	aa07      	add	r2, sp, #28
 800fdea:	9204      	str	r2, [sp, #16]
 800fdec:	aa06      	add	r2, sp, #24
 800fdee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fdf2:	e9cd 3500 	strd	r3, r5, [sp]
 800fdf6:	4622      	mov	r2, r4
 800fdf8:	463b      	mov	r3, r7
 800fdfa:	f001 fea5 	bl	8011b48 <_dtoa_r>
 800fdfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fe02:	4606      	mov	r6, r0
 800fe04:	d102      	bne.n	800fe0c <__cvt+0x60>
 800fe06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe08:	07db      	lsls	r3, r3, #31
 800fe0a:	d522      	bpl.n	800fe52 <__cvt+0xa6>
 800fe0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe10:	eb06 0905 	add.w	r9, r6, r5
 800fe14:	d110      	bne.n	800fe38 <__cvt+0x8c>
 800fe16:	7833      	ldrb	r3, [r6, #0]
 800fe18:	2b30      	cmp	r3, #48	; 0x30
 800fe1a:	d10a      	bne.n	800fe32 <__cvt+0x86>
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2300      	movs	r3, #0
 800fe20:	4620      	mov	r0, r4
 800fe22:	4639      	mov	r1, r7
 800fe24:	f7f0 fdd8 	bl	80009d8 <__aeabi_dcmpeq>
 800fe28:	b918      	cbnz	r0, 800fe32 <__cvt+0x86>
 800fe2a:	f1c5 0501 	rsb	r5, r5, #1
 800fe2e:	f8ca 5000 	str.w	r5, [sl]
 800fe32:	f8da 3000 	ldr.w	r3, [sl]
 800fe36:	4499      	add	r9, r3
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	4639      	mov	r1, r7
 800fe40:	f7f0 fdca 	bl	80009d8 <__aeabi_dcmpeq>
 800fe44:	b108      	cbz	r0, 800fe4a <__cvt+0x9e>
 800fe46:	f8cd 901c 	str.w	r9, [sp, #28]
 800fe4a:	2230      	movs	r2, #48	; 0x30
 800fe4c:	9b07      	ldr	r3, [sp, #28]
 800fe4e:	454b      	cmp	r3, r9
 800fe50:	d307      	bcc.n	800fe62 <__cvt+0xb6>
 800fe52:	4630      	mov	r0, r6
 800fe54:	9b07      	ldr	r3, [sp, #28]
 800fe56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fe58:	1b9b      	subs	r3, r3, r6
 800fe5a:	6013      	str	r3, [r2, #0]
 800fe5c:	b008      	add	sp, #32
 800fe5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe62:	1c59      	adds	r1, r3, #1
 800fe64:	9107      	str	r1, [sp, #28]
 800fe66:	701a      	strb	r2, [r3, #0]
 800fe68:	e7f0      	b.n	800fe4c <__cvt+0xa0>

0800fe6a <__exponent>:
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe6e:	2900      	cmp	r1, #0
 800fe70:	f803 2b02 	strb.w	r2, [r3], #2
 800fe74:	bfb6      	itet	lt
 800fe76:	222d      	movlt	r2, #45	; 0x2d
 800fe78:	222b      	movge	r2, #43	; 0x2b
 800fe7a:	4249      	neglt	r1, r1
 800fe7c:	2909      	cmp	r1, #9
 800fe7e:	7042      	strb	r2, [r0, #1]
 800fe80:	dd2b      	ble.n	800feda <__exponent+0x70>
 800fe82:	f10d 0407 	add.w	r4, sp, #7
 800fe86:	46a4      	mov	ip, r4
 800fe88:	270a      	movs	r7, #10
 800fe8a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe8e:	460a      	mov	r2, r1
 800fe90:	46a6      	mov	lr, r4
 800fe92:	fb07 1516 	mls	r5, r7, r6, r1
 800fe96:	2a63      	cmp	r2, #99	; 0x63
 800fe98:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fe9c:	4631      	mov	r1, r6
 800fe9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fea2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fea6:	dcf0      	bgt.n	800fe8a <__exponent+0x20>
 800fea8:	3130      	adds	r1, #48	; 0x30
 800feaa:	f1ae 0502 	sub.w	r5, lr, #2
 800feae:	f804 1c01 	strb.w	r1, [r4, #-1]
 800feb2:	4629      	mov	r1, r5
 800feb4:	1c44      	adds	r4, r0, #1
 800feb6:	4561      	cmp	r1, ip
 800feb8:	d30a      	bcc.n	800fed0 <__exponent+0x66>
 800feba:	f10d 0209 	add.w	r2, sp, #9
 800febe:	eba2 020e 	sub.w	r2, r2, lr
 800fec2:	4565      	cmp	r5, ip
 800fec4:	bf88      	it	hi
 800fec6:	2200      	movhi	r2, #0
 800fec8:	4413      	add	r3, r2
 800feca:	1a18      	subs	r0, r3, r0
 800fecc:	b003      	add	sp, #12
 800fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fed4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fed8:	e7ed      	b.n	800feb6 <__exponent+0x4c>
 800feda:	2330      	movs	r3, #48	; 0x30
 800fedc:	3130      	adds	r1, #48	; 0x30
 800fede:	7083      	strb	r3, [r0, #2]
 800fee0:	70c1      	strb	r1, [r0, #3]
 800fee2:	1d03      	adds	r3, r0, #4
 800fee4:	e7f1      	b.n	800feca <__exponent+0x60>
	...

0800fee8 <_printf_float>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	b091      	sub	sp, #68	; 0x44
 800feee:	460c      	mov	r4, r1
 800fef0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fef4:	4616      	mov	r6, r2
 800fef6:	461f      	mov	r7, r3
 800fef8:	4605      	mov	r5, r0
 800fefa:	f002 ff79 	bl	8012df0 <_localeconv_r>
 800fefe:	6803      	ldr	r3, [r0, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	9309      	str	r3, [sp, #36]	; 0x24
 800ff04:	f7f0 f93c 	bl	8000180 <strlen>
 800ff08:	2300      	movs	r3, #0
 800ff0a:	930e      	str	r3, [sp, #56]	; 0x38
 800ff0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff10:	900a      	str	r0, [sp, #40]	; 0x28
 800ff12:	3307      	adds	r3, #7
 800ff14:	f023 0307 	bic.w	r3, r3, #7
 800ff18:	f103 0208 	add.w	r2, r3, #8
 800ff1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ff20:	f8d4 b000 	ldr.w	fp, [r4]
 800ff24:	f8c8 2000 	str.w	r2, [r8]
 800ff28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ff30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ff34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ff38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff3e:	4640      	mov	r0, r8
 800ff40:	4b9c      	ldr	r3, [pc, #624]	; (80101b4 <_printf_float+0x2cc>)
 800ff42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff44:	f7f0 fd7a 	bl	8000a3c <__aeabi_dcmpun>
 800ff48:	bb70      	cbnz	r0, 800ffa8 <_printf_float+0xc0>
 800ff4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4e:	4640      	mov	r0, r8
 800ff50:	4b98      	ldr	r3, [pc, #608]	; (80101b4 <_printf_float+0x2cc>)
 800ff52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff54:	f7f0 fd54 	bl	8000a00 <__aeabi_dcmple>
 800ff58:	bb30      	cbnz	r0, 800ffa8 <_printf_float+0xc0>
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4640      	mov	r0, r8
 800ff60:	4651      	mov	r1, sl
 800ff62:	f7f0 fd43 	bl	80009ec <__aeabi_dcmplt>
 800ff66:	b110      	cbz	r0, 800ff6e <_printf_float+0x86>
 800ff68:	232d      	movs	r3, #45	; 0x2d
 800ff6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff6e:	4b92      	ldr	r3, [pc, #584]	; (80101b8 <_printf_float+0x2d0>)
 800ff70:	4892      	ldr	r0, [pc, #584]	; (80101bc <_printf_float+0x2d4>)
 800ff72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ff76:	bf94      	ite	ls
 800ff78:	4698      	movls	r8, r3
 800ff7a:	4680      	movhi	r8, r0
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	f04f 0a00 	mov.w	sl, #0
 800ff82:	6123      	str	r3, [r4, #16]
 800ff84:	f02b 0304 	bic.w	r3, fp, #4
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	4633      	mov	r3, r6
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	9700      	str	r7, [sp, #0]
 800ff92:	aa0f      	add	r2, sp, #60	; 0x3c
 800ff94:	f000 f9d4 	bl	8010340 <_printf_common>
 800ff98:	3001      	adds	r0, #1
 800ff9a:	f040 8090 	bne.w	80100be <_printf_float+0x1d6>
 800ff9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffa2:	b011      	add	sp, #68	; 0x44
 800ffa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	4653      	mov	r3, sl
 800ffac:	4640      	mov	r0, r8
 800ffae:	4651      	mov	r1, sl
 800ffb0:	f7f0 fd44 	bl	8000a3c <__aeabi_dcmpun>
 800ffb4:	b148      	cbz	r0, 800ffca <_printf_float+0xe2>
 800ffb6:	f1ba 0f00 	cmp.w	sl, #0
 800ffba:	bfb8      	it	lt
 800ffbc:	232d      	movlt	r3, #45	; 0x2d
 800ffbe:	4880      	ldr	r0, [pc, #512]	; (80101c0 <_printf_float+0x2d8>)
 800ffc0:	bfb8      	it	lt
 800ffc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ffc6:	4b7f      	ldr	r3, [pc, #508]	; (80101c4 <_printf_float+0x2dc>)
 800ffc8:	e7d3      	b.n	800ff72 <_printf_float+0x8a>
 800ffca:	6863      	ldr	r3, [r4, #4]
 800ffcc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ffd0:	1c5a      	adds	r2, r3, #1
 800ffd2:	d142      	bne.n	801005a <_printf_float+0x172>
 800ffd4:	2306      	movs	r3, #6
 800ffd6:	6063      	str	r3, [r4, #4]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	9206      	str	r2, [sp, #24]
 800ffdc:	aa0e      	add	r2, sp, #56	; 0x38
 800ffde:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ffe2:	aa0d      	add	r2, sp, #52	; 0x34
 800ffe4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ffe8:	9203      	str	r2, [sp, #12]
 800ffea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ffee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fff2:	6023      	str	r3, [r4, #0]
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	4642      	mov	r2, r8
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	4628      	mov	r0, r5
 800fffc:	4653      	mov	r3, sl
 800fffe:	910b      	str	r1, [sp, #44]	; 0x2c
 8010000:	f7ff fed4 	bl	800fdac <__cvt>
 8010004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010006:	4680      	mov	r8, r0
 8010008:	2947      	cmp	r1, #71	; 0x47
 801000a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801000c:	d108      	bne.n	8010020 <_printf_float+0x138>
 801000e:	1cc8      	adds	r0, r1, #3
 8010010:	db02      	blt.n	8010018 <_printf_float+0x130>
 8010012:	6863      	ldr	r3, [r4, #4]
 8010014:	4299      	cmp	r1, r3
 8010016:	dd40      	ble.n	801009a <_printf_float+0x1b2>
 8010018:	f1a9 0902 	sub.w	r9, r9, #2
 801001c:	fa5f f989 	uxtb.w	r9, r9
 8010020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010024:	d81f      	bhi.n	8010066 <_printf_float+0x17e>
 8010026:	464a      	mov	r2, r9
 8010028:	3901      	subs	r1, #1
 801002a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801002e:	910d      	str	r1, [sp, #52]	; 0x34
 8010030:	f7ff ff1b 	bl	800fe6a <__exponent>
 8010034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010036:	4682      	mov	sl, r0
 8010038:	1813      	adds	r3, r2, r0
 801003a:	2a01      	cmp	r2, #1
 801003c:	6123      	str	r3, [r4, #16]
 801003e:	dc02      	bgt.n	8010046 <_printf_float+0x15e>
 8010040:	6822      	ldr	r2, [r4, #0]
 8010042:	07d2      	lsls	r2, r2, #31
 8010044:	d501      	bpl.n	801004a <_printf_float+0x162>
 8010046:	3301      	adds	r3, #1
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801004e:	2b00      	cmp	r3, #0
 8010050:	d09b      	beq.n	800ff8a <_printf_float+0xa2>
 8010052:	232d      	movs	r3, #45	; 0x2d
 8010054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010058:	e797      	b.n	800ff8a <_printf_float+0xa2>
 801005a:	2947      	cmp	r1, #71	; 0x47
 801005c:	d1bc      	bne.n	800ffd8 <_printf_float+0xf0>
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1ba      	bne.n	800ffd8 <_printf_float+0xf0>
 8010062:	2301      	movs	r3, #1
 8010064:	e7b7      	b.n	800ffd6 <_printf_float+0xee>
 8010066:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801006a:	d118      	bne.n	801009e <_printf_float+0x1b6>
 801006c:	2900      	cmp	r1, #0
 801006e:	6863      	ldr	r3, [r4, #4]
 8010070:	dd0b      	ble.n	801008a <_printf_float+0x1a2>
 8010072:	6121      	str	r1, [r4, #16]
 8010074:	b913      	cbnz	r3, 801007c <_printf_float+0x194>
 8010076:	6822      	ldr	r2, [r4, #0]
 8010078:	07d0      	lsls	r0, r2, #31
 801007a:	d502      	bpl.n	8010082 <_printf_float+0x19a>
 801007c:	3301      	adds	r3, #1
 801007e:	440b      	add	r3, r1
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	f04f 0a00 	mov.w	sl, #0
 8010086:	65a1      	str	r1, [r4, #88]	; 0x58
 8010088:	e7df      	b.n	801004a <_printf_float+0x162>
 801008a:	b913      	cbnz	r3, 8010092 <_printf_float+0x1aa>
 801008c:	6822      	ldr	r2, [r4, #0]
 801008e:	07d2      	lsls	r2, r2, #31
 8010090:	d501      	bpl.n	8010096 <_printf_float+0x1ae>
 8010092:	3302      	adds	r3, #2
 8010094:	e7f4      	b.n	8010080 <_printf_float+0x198>
 8010096:	2301      	movs	r3, #1
 8010098:	e7f2      	b.n	8010080 <_printf_float+0x198>
 801009a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801009e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100a0:	4299      	cmp	r1, r3
 80100a2:	db05      	blt.n	80100b0 <_printf_float+0x1c8>
 80100a4:	6823      	ldr	r3, [r4, #0]
 80100a6:	6121      	str	r1, [r4, #16]
 80100a8:	07d8      	lsls	r0, r3, #31
 80100aa:	d5ea      	bpl.n	8010082 <_printf_float+0x19a>
 80100ac:	1c4b      	adds	r3, r1, #1
 80100ae:	e7e7      	b.n	8010080 <_printf_float+0x198>
 80100b0:	2900      	cmp	r1, #0
 80100b2:	bfcc      	ite	gt
 80100b4:	2201      	movgt	r2, #1
 80100b6:	f1c1 0202 	rsble	r2, r1, #2
 80100ba:	4413      	add	r3, r2
 80100bc:	e7e0      	b.n	8010080 <_printf_float+0x198>
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	055a      	lsls	r2, r3, #21
 80100c2:	d407      	bmi.n	80100d4 <_printf_float+0x1ec>
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	4642      	mov	r2, r8
 80100c8:	4631      	mov	r1, r6
 80100ca:	4628      	mov	r0, r5
 80100cc:	47b8      	blx	r7
 80100ce:	3001      	adds	r0, #1
 80100d0:	d12b      	bne.n	801012a <_printf_float+0x242>
 80100d2:	e764      	b.n	800ff9e <_printf_float+0xb6>
 80100d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80100d8:	f240 80dd 	bls.w	8010296 <_printf_float+0x3ae>
 80100dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100e0:	2200      	movs	r2, #0
 80100e2:	2300      	movs	r3, #0
 80100e4:	f7f0 fc78 	bl	80009d8 <__aeabi_dcmpeq>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d033      	beq.n	8010154 <_printf_float+0x26c>
 80100ec:	2301      	movs	r3, #1
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	4a35      	ldr	r2, [pc, #212]	; (80101c8 <_printf_float+0x2e0>)
 80100f4:	47b8      	blx	r7
 80100f6:	3001      	adds	r0, #1
 80100f8:	f43f af51 	beq.w	800ff9e <_printf_float+0xb6>
 80100fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010100:	429a      	cmp	r2, r3
 8010102:	db02      	blt.n	801010a <_printf_float+0x222>
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	07d8      	lsls	r0, r3, #31
 8010108:	d50f      	bpl.n	801012a <_printf_float+0x242>
 801010a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801010e:	4631      	mov	r1, r6
 8010110:	4628      	mov	r0, r5
 8010112:	47b8      	blx	r7
 8010114:	3001      	adds	r0, #1
 8010116:	f43f af42 	beq.w	800ff9e <_printf_float+0xb6>
 801011a:	f04f 0800 	mov.w	r8, #0
 801011e:	f104 091a 	add.w	r9, r4, #26
 8010122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010124:	3b01      	subs	r3, #1
 8010126:	4543      	cmp	r3, r8
 8010128:	dc09      	bgt.n	801013e <_printf_float+0x256>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	079b      	lsls	r3, r3, #30
 801012e:	f100 8102 	bmi.w	8010336 <_printf_float+0x44e>
 8010132:	68e0      	ldr	r0, [r4, #12]
 8010134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010136:	4298      	cmp	r0, r3
 8010138:	bfb8      	it	lt
 801013a:	4618      	movlt	r0, r3
 801013c:	e731      	b.n	800ffa2 <_printf_float+0xba>
 801013e:	2301      	movs	r3, #1
 8010140:	464a      	mov	r2, r9
 8010142:	4631      	mov	r1, r6
 8010144:	4628      	mov	r0, r5
 8010146:	47b8      	blx	r7
 8010148:	3001      	adds	r0, #1
 801014a:	f43f af28 	beq.w	800ff9e <_printf_float+0xb6>
 801014e:	f108 0801 	add.w	r8, r8, #1
 8010152:	e7e6      	b.n	8010122 <_printf_float+0x23a>
 8010154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010156:	2b00      	cmp	r3, #0
 8010158:	dc38      	bgt.n	80101cc <_printf_float+0x2e4>
 801015a:	2301      	movs	r3, #1
 801015c:	4631      	mov	r1, r6
 801015e:	4628      	mov	r0, r5
 8010160:	4a19      	ldr	r2, [pc, #100]	; (80101c8 <_printf_float+0x2e0>)
 8010162:	47b8      	blx	r7
 8010164:	3001      	adds	r0, #1
 8010166:	f43f af1a 	beq.w	800ff9e <_printf_float+0xb6>
 801016a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801016e:	4313      	orrs	r3, r2
 8010170:	d102      	bne.n	8010178 <_printf_float+0x290>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	07d9      	lsls	r1, r3, #31
 8010176:	d5d8      	bpl.n	801012a <_printf_float+0x242>
 8010178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	47b8      	blx	r7
 8010182:	3001      	adds	r0, #1
 8010184:	f43f af0b 	beq.w	800ff9e <_printf_float+0xb6>
 8010188:	f04f 0900 	mov.w	r9, #0
 801018c:	f104 0a1a 	add.w	sl, r4, #26
 8010190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010192:	425b      	negs	r3, r3
 8010194:	454b      	cmp	r3, r9
 8010196:	dc01      	bgt.n	801019c <_printf_float+0x2b4>
 8010198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801019a:	e794      	b.n	80100c6 <_printf_float+0x1de>
 801019c:	2301      	movs	r3, #1
 801019e:	4652      	mov	r2, sl
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f43f aef9 	beq.w	800ff9e <_printf_float+0xb6>
 80101ac:	f109 0901 	add.w	r9, r9, #1
 80101b0:	e7ee      	b.n	8010190 <_printf_float+0x2a8>
 80101b2:	bf00      	nop
 80101b4:	7fefffff 	.word	0x7fefffff
 80101b8:	0801501c 	.word	0x0801501c
 80101bc:	08015020 	.word	0x08015020
 80101c0:	08015028 	.word	0x08015028
 80101c4:	08015024 	.word	0x08015024
 80101c8:	08015431 	.word	0x08015431
 80101cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101d0:	429a      	cmp	r2, r3
 80101d2:	bfa8      	it	ge
 80101d4:	461a      	movge	r2, r3
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	4691      	mov	r9, r2
 80101da:	dc37      	bgt.n	801024c <_printf_float+0x364>
 80101dc:	f04f 0b00 	mov.w	fp, #0
 80101e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101e4:	f104 021a 	add.w	r2, r4, #26
 80101e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80101ec:	ebaa 0309 	sub.w	r3, sl, r9
 80101f0:	455b      	cmp	r3, fp
 80101f2:	dc33      	bgt.n	801025c <_printf_float+0x374>
 80101f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80101f8:	429a      	cmp	r2, r3
 80101fa:	db3b      	blt.n	8010274 <_printf_float+0x38c>
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	07da      	lsls	r2, r3, #31
 8010200:	d438      	bmi.n	8010274 <_printf_float+0x38c>
 8010202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010204:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010206:	eba2 030a 	sub.w	r3, r2, sl
 801020a:	eba2 0901 	sub.w	r9, r2, r1
 801020e:	4599      	cmp	r9, r3
 8010210:	bfa8      	it	ge
 8010212:	4699      	movge	r9, r3
 8010214:	f1b9 0f00 	cmp.w	r9, #0
 8010218:	dc34      	bgt.n	8010284 <_printf_float+0x39c>
 801021a:	f04f 0800 	mov.w	r8, #0
 801021e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010222:	f104 0a1a 	add.w	sl, r4, #26
 8010226:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	eba3 0309 	sub.w	r3, r3, r9
 8010230:	4543      	cmp	r3, r8
 8010232:	f77f af7a 	ble.w	801012a <_printf_float+0x242>
 8010236:	2301      	movs	r3, #1
 8010238:	4652      	mov	r2, sl
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	f43f aeac 	beq.w	800ff9e <_printf_float+0xb6>
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	e7ec      	b.n	8010226 <_printf_float+0x33e>
 801024c:	4613      	mov	r3, r2
 801024e:	4631      	mov	r1, r6
 8010250:	4642      	mov	r2, r8
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	d1c0      	bne.n	80101dc <_printf_float+0x2f4>
 801025a:	e6a0      	b.n	800ff9e <_printf_float+0xb6>
 801025c:	2301      	movs	r3, #1
 801025e:	4631      	mov	r1, r6
 8010260:	4628      	mov	r0, r5
 8010262:	920b      	str	r2, [sp, #44]	; 0x2c
 8010264:	47b8      	blx	r7
 8010266:	3001      	adds	r0, #1
 8010268:	f43f ae99 	beq.w	800ff9e <_printf_float+0xb6>
 801026c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801026e:	f10b 0b01 	add.w	fp, fp, #1
 8010272:	e7b9      	b.n	80101e8 <_printf_float+0x300>
 8010274:	4631      	mov	r1, r6
 8010276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801027a:	4628      	mov	r0, r5
 801027c:	47b8      	blx	r7
 801027e:	3001      	adds	r0, #1
 8010280:	d1bf      	bne.n	8010202 <_printf_float+0x31a>
 8010282:	e68c      	b.n	800ff9e <_printf_float+0xb6>
 8010284:	464b      	mov	r3, r9
 8010286:	4631      	mov	r1, r6
 8010288:	4628      	mov	r0, r5
 801028a:	eb08 020a 	add.w	r2, r8, sl
 801028e:	47b8      	blx	r7
 8010290:	3001      	adds	r0, #1
 8010292:	d1c2      	bne.n	801021a <_printf_float+0x332>
 8010294:	e683      	b.n	800ff9e <_printf_float+0xb6>
 8010296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010298:	2a01      	cmp	r2, #1
 801029a:	dc01      	bgt.n	80102a0 <_printf_float+0x3b8>
 801029c:	07db      	lsls	r3, r3, #31
 801029e:	d537      	bpl.n	8010310 <_printf_float+0x428>
 80102a0:	2301      	movs	r3, #1
 80102a2:	4642      	mov	r2, r8
 80102a4:	4631      	mov	r1, r6
 80102a6:	4628      	mov	r0, r5
 80102a8:	47b8      	blx	r7
 80102aa:	3001      	adds	r0, #1
 80102ac:	f43f ae77 	beq.w	800ff9e <_printf_float+0xb6>
 80102b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102b4:	4631      	mov	r1, r6
 80102b6:	4628      	mov	r0, r5
 80102b8:	47b8      	blx	r7
 80102ba:	3001      	adds	r0, #1
 80102bc:	f43f ae6f 	beq.w	800ff9e <_printf_float+0xb6>
 80102c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102c4:	2200      	movs	r2, #0
 80102c6:	2300      	movs	r3, #0
 80102c8:	f7f0 fb86 	bl	80009d8 <__aeabi_dcmpeq>
 80102cc:	b9d8      	cbnz	r0, 8010306 <_printf_float+0x41e>
 80102ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102d0:	f108 0201 	add.w	r2, r8, #1
 80102d4:	3b01      	subs	r3, #1
 80102d6:	4631      	mov	r1, r6
 80102d8:	4628      	mov	r0, r5
 80102da:	47b8      	blx	r7
 80102dc:	3001      	adds	r0, #1
 80102de:	d10e      	bne.n	80102fe <_printf_float+0x416>
 80102e0:	e65d      	b.n	800ff9e <_printf_float+0xb6>
 80102e2:	2301      	movs	r3, #1
 80102e4:	464a      	mov	r2, r9
 80102e6:	4631      	mov	r1, r6
 80102e8:	4628      	mov	r0, r5
 80102ea:	47b8      	blx	r7
 80102ec:	3001      	adds	r0, #1
 80102ee:	f43f ae56 	beq.w	800ff9e <_printf_float+0xb6>
 80102f2:	f108 0801 	add.w	r8, r8, #1
 80102f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102f8:	3b01      	subs	r3, #1
 80102fa:	4543      	cmp	r3, r8
 80102fc:	dcf1      	bgt.n	80102e2 <_printf_float+0x3fa>
 80102fe:	4653      	mov	r3, sl
 8010300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010304:	e6e0      	b.n	80100c8 <_printf_float+0x1e0>
 8010306:	f04f 0800 	mov.w	r8, #0
 801030a:	f104 091a 	add.w	r9, r4, #26
 801030e:	e7f2      	b.n	80102f6 <_printf_float+0x40e>
 8010310:	2301      	movs	r3, #1
 8010312:	4642      	mov	r2, r8
 8010314:	e7df      	b.n	80102d6 <_printf_float+0x3ee>
 8010316:	2301      	movs	r3, #1
 8010318:	464a      	mov	r2, r9
 801031a:	4631      	mov	r1, r6
 801031c:	4628      	mov	r0, r5
 801031e:	47b8      	blx	r7
 8010320:	3001      	adds	r0, #1
 8010322:	f43f ae3c 	beq.w	800ff9e <_printf_float+0xb6>
 8010326:	f108 0801 	add.w	r8, r8, #1
 801032a:	68e3      	ldr	r3, [r4, #12]
 801032c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801032e:	1a5b      	subs	r3, r3, r1
 8010330:	4543      	cmp	r3, r8
 8010332:	dcf0      	bgt.n	8010316 <_printf_float+0x42e>
 8010334:	e6fd      	b.n	8010132 <_printf_float+0x24a>
 8010336:	f04f 0800 	mov.w	r8, #0
 801033a:	f104 0919 	add.w	r9, r4, #25
 801033e:	e7f4      	b.n	801032a <_printf_float+0x442>

08010340 <_printf_common>:
 8010340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010344:	4616      	mov	r6, r2
 8010346:	4699      	mov	r9, r3
 8010348:	688a      	ldr	r2, [r1, #8]
 801034a:	690b      	ldr	r3, [r1, #16]
 801034c:	4607      	mov	r7, r0
 801034e:	4293      	cmp	r3, r2
 8010350:	bfb8      	it	lt
 8010352:	4613      	movlt	r3, r2
 8010354:	6033      	str	r3, [r6, #0]
 8010356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801035a:	460c      	mov	r4, r1
 801035c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010360:	b10a      	cbz	r2, 8010366 <_printf_common+0x26>
 8010362:	3301      	adds	r3, #1
 8010364:	6033      	str	r3, [r6, #0]
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	0699      	lsls	r1, r3, #26
 801036a:	bf42      	ittt	mi
 801036c:	6833      	ldrmi	r3, [r6, #0]
 801036e:	3302      	addmi	r3, #2
 8010370:	6033      	strmi	r3, [r6, #0]
 8010372:	6825      	ldr	r5, [r4, #0]
 8010374:	f015 0506 	ands.w	r5, r5, #6
 8010378:	d106      	bne.n	8010388 <_printf_common+0x48>
 801037a:	f104 0a19 	add.w	sl, r4, #25
 801037e:	68e3      	ldr	r3, [r4, #12]
 8010380:	6832      	ldr	r2, [r6, #0]
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	42ab      	cmp	r3, r5
 8010386:	dc28      	bgt.n	80103da <_printf_common+0x9a>
 8010388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801038c:	1e13      	subs	r3, r2, #0
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	bf18      	it	ne
 8010392:	2301      	movne	r3, #1
 8010394:	0692      	lsls	r2, r2, #26
 8010396:	d42d      	bmi.n	80103f4 <_printf_common+0xb4>
 8010398:	4649      	mov	r1, r9
 801039a:	4638      	mov	r0, r7
 801039c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103a0:	47c0      	blx	r8
 80103a2:	3001      	adds	r0, #1
 80103a4:	d020      	beq.n	80103e8 <_printf_common+0xa8>
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	68e5      	ldr	r5, [r4, #12]
 80103aa:	f003 0306 	and.w	r3, r3, #6
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	bf18      	it	ne
 80103b2:	2500      	movne	r5, #0
 80103b4:	6832      	ldr	r2, [r6, #0]
 80103b6:	f04f 0600 	mov.w	r6, #0
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	bf08      	it	eq
 80103be:	1aad      	subeq	r5, r5, r2
 80103c0:	6922      	ldr	r2, [r4, #16]
 80103c2:	bf08      	it	eq
 80103c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103c8:	4293      	cmp	r3, r2
 80103ca:	bfc4      	itt	gt
 80103cc:	1a9b      	subgt	r3, r3, r2
 80103ce:	18ed      	addgt	r5, r5, r3
 80103d0:	341a      	adds	r4, #26
 80103d2:	42b5      	cmp	r5, r6
 80103d4:	d11a      	bne.n	801040c <_printf_common+0xcc>
 80103d6:	2000      	movs	r0, #0
 80103d8:	e008      	b.n	80103ec <_printf_common+0xac>
 80103da:	2301      	movs	r3, #1
 80103dc:	4652      	mov	r2, sl
 80103de:	4649      	mov	r1, r9
 80103e0:	4638      	mov	r0, r7
 80103e2:	47c0      	blx	r8
 80103e4:	3001      	adds	r0, #1
 80103e6:	d103      	bne.n	80103f0 <_printf_common+0xb0>
 80103e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f0:	3501      	adds	r5, #1
 80103f2:	e7c4      	b.n	801037e <_printf_common+0x3e>
 80103f4:	2030      	movs	r0, #48	; 0x30
 80103f6:	18e1      	adds	r1, r4, r3
 80103f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010402:	4422      	add	r2, r4
 8010404:	3302      	adds	r3, #2
 8010406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801040a:	e7c5      	b.n	8010398 <_printf_common+0x58>
 801040c:	2301      	movs	r3, #1
 801040e:	4622      	mov	r2, r4
 8010410:	4649      	mov	r1, r9
 8010412:	4638      	mov	r0, r7
 8010414:	47c0      	blx	r8
 8010416:	3001      	adds	r0, #1
 8010418:	d0e6      	beq.n	80103e8 <_printf_common+0xa8>
 801041a:	3601      	adds	r6, #1
 801041c:	e7d9      	b.n	80103d2 <_printf_common+0x92>
	...

08010420 <_printf_i>:
 8010420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	460c      	mov	r4, r1
 8010426:	7e27      	ldrb	r7, [r4, #24]
 8010428:	4691      	mov	r9, r2
 801042a:	2f78      	cmp	r7, #120	; 0x78
 801042c:	4680      	mov	r8, r0
 801042e:	469a      	mov	sl, r3
 8010430:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010436:	d807      	bhi.n	8010448 <_printf_i+0x28>
 8010438:	2f62      	cmp	r7, #98	; 0x62
 801043a:	d80a      	bhi.n	8010452 <_printf_i+0x32>
 801043c:	2f00      	cmp	r7, #0
 801043e:	f000 80d9 	beq.w	80105f4 <_printf_i+0x1d4>
 8010442:	2f58      	cmp	r7, #88	; 0x58
 8010444:	f000 80a4 	beq.w	8010590 <_printf_i+0x170>
 8010448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801044c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010450:	e03a      	b.n	80104c8 <_printf_i+0xa8>
 8010452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010456:	2b15      	cmp	r3, #21
 8010458:	d8f6      	bhi.n	8010448 <_printf_i+0x28>
 801045a:	a001      	add	r0, pc, #4	; (adr r0, 8010460 <_printf_i+0x40>)
 801045c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010460:	080104b9 	.word	0x080104b9
 8010464:	080104cd 	.word	0x080104cd
 8010468:	08010449 	.word	0x08010449
 801046c:	08010449 	.word	0x08010449
 8010470:	08010449 	.word	0x08010449
 8010474:	08010449 	.word	0x08010449
 8010478:	080104cd 	.word	0x080104cd
 801047c:	08010449 	.word	0x08010449
 8010480:	08010449 	.word	0x08010449
 8010484:	08010449 	.word	0x08010449
 8010488:	08010449 	.word	0x08010449
 801048c:	080105db 	.word	0x080105db
 8010490:	080104fd 	.word	0x080104fd
 8010494:	080105bd 	.word	0x080105bd
 8010498:	08010449 	.word	0x08010449
 801049c:	08010449 	.word	0x08010449
 80104a0:	080105fd 	.word	0x080105fd
 80104a4:	08010449 	.word	0x08010449
 80104a8:	080104fd 	.word	0x080104fd
 80104ac:	08010449 	.word	0x08010449
 80104b0:	08010449 	.word	0x08010449
 80104b4:	080105c5 	.word	0x080105c5
 80104b8:	680b      	ldr	r3, [r1, #0]
 80104ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104be:	1d1a      	adds	r2, r3, #4
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	600a      	str	r2, [r1, #0]
 80104c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104c8:	2301      	movs	r3, #1
 80104ca:	e0a4      	b.n	8010616 <_printf_i+0x1f6>
 80104cc:	6825      	ldr	r5, [r4, #0]
 80104ce:	6808      	ldr	r0, [r1, #0]
 80104d0:	062e      	lsls	r6, r5, #24
 80104d2:	f100 0304 	add.w	r3, r0, #4
 80104d6:	d50a      	bpl.n	80104ee <_printf_i+0xce>
 80104d8:	6805      	ldr	r5, [r0, #0]
 80104da:	600b      	str	r3, [r1, #0]
 80104dc:	2d00      	cmp	r5, #0
 80104de:	da03      	bge.n	80104e8 <_printf_i+0xc8>
 80104e0:	232d      	movs	r3, #45	; 0x2d
 80104e2:	426d      	negs	r5, r5
 80104e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104e8:	230a      	movs	r3, #10
 80104ea:	485e      	ldr	r0, [pc, #376]	; (8010664 <_printf_i+0x244>)
 80104ec:	e019      	b.n	8010522 <_printf_i+0x102>
 80104ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80104f2:	6805      	ldr	r5, [r0, #0]
 80104f4:	600b      	str	r3, [r1, #0]
 80104f6:	bf18      	it	ne
 80104f8:	b22d      	sxthne	r5, r5
 80104fa:	e7ef      	b.n	80104dc <_printf_i+0xbc>
 80104fc:	680b      	ldr	r3, [r1, #0]
 80104fe:	6825      	ldr	r5, [r4, #0]
 8010500:	1d18      	adds	r0, r3, #4
 8010502:	6008      	str	r0, [r1, #0]
 8010504:	0628      	lsls	r0, r5, #24
 8010506:	d501      	bpl.n	801050c <_printf_i+0xec>
 8010508:	681d      	ldr	r5, [r3, #0]
 801050a:	e002      	b.n	8010512 <_printf_i+0xf2>
 801050c:	0669      	lsls	r1, r5, #25
 801050e:	d5fb      	bpl.n	8010508 <_printf_i+0xe8>
 8010510:	881d      	ldrh	r5, [r3, #0]
 8010512:	2f6f      	cmp	r7, #111	; 0x6f
 8010514:	bf0c      	ite	eq
 8010516:	2308      	moveq	r3, #8
 8010518:	230a      	movne	r3, #10
 801051a:	4852      	ldr	r0, [pc, #328]	; (8010664 <_printf_i+0x244>)
 801051c:	2100      	movs	r1, #0
 801051e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010522:	6866      	ldr	r6, [r4, #4]
 8010524:	2e00      	cmp	r6, #0
 8010526:	bfa8      	it	ge
 8010528:	6821      	ldrge	r1, [r4, #0]
 801052a:	60a6      	str	r6, [r4, #8]
 801052c:	bfa4      	itt	ge
 801052e:	f021 0104 	bicge.w	r1, r1, #4
 8010532:	6021      	strge	r1, [r4, #0]
 8010534:	b90d      	cbnz	r5, 801053a <_printf_i+0x11a>
 8010536:	2e00      	cmp	r6, #0
 8010538:	d04d      	beq.n	80105d6 <_printf_i+0x1b6>
 801053a:	4616      	mov	r6, r2
 801053c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010540:	fb03 5711 	mls	r7, r3, r1, r5
 8010544:	5dc7      	ldrb	r7, [r0, r7]
 8010546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801054a:	462f      	mov	r7, r5
 801054c:	42bb      	cmp	r3, r7
 801054e:	460d      	mov	r5, r1
 8010550:	d9f4      	bls.n	801053c <_printf_i+0x11c>
 8010552:	2b08      	cmp	r3, #8
 8010554:	d10b      	bne.n	801056e <_printf_i+0x14e>
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	07df      	lsls	r7, r3, #31
 801055a:	d508      	bpl.n	801056e <_printf_i+0x14e>
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	6861      	ldr	r1, [r4, #4]
 8010560:	4299      	cmp	r1, r3
 8010562:	bfde      	ittt	le
 8010564:	2330      	movle	r3, #48	; 0x30
 8010566:	f806 3c01 	strble.w	r3, [r6, #-1]
 801056a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801056e:	1b92      	subs	r2, r2, r6
 8010570:	6122      	str	r2, [r4, #16]
 8010572:	464b      	mov	r3, r9
 8010574:	4621      	mov	r1, r4
 8010576:	4640      	mov	r0, r8
 8010578:	f8cd a000 	str.w	sl, [sp]
 801057c:	aa03      	add	r2, sp, #12
 801057e:	f7ff fedf 	bl	8010340 <_printf_common>
 8010582:	3001      	adds	r0, #1
 8010584:	d14c      	bne.n	8010620 <_printf_i+0x200>
 8010586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801058a:	b004      	add	sp, #16
 801058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010590:	4834      	ldr	r0, [pc, #208]	; (8010664 <_printf_i+0x244>)
 8010592:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010596:	680e      	ldr	r6, [r1, #0]
 8010598:	6823      	ldr	r3, [r4, #0]
 801059a:	f856 5b04 	ldr.w	r5, [r6], #4
 801059e:	061f      	lsls	r7, r3, #24
 80105a0:	600e      	str	r6, [r1, #0]
 80105a2:	d514      	bpl.n	80105ce <_printf_i+0x1ae>
 80105a4:	07d9      	lsls	r1, r3, #31
 80105a6:	bf44      	itt	mi
 80105a8:	f043 0320 	orrmi.w	r3, r3, #32
 80105ac:	6023      	strmi	r3, [r4, #0]
 80105ae:	b91d      	cbnz	r5, 80105b8 <_printf_i+0x198>
 80105b0:	6823      	ldr	r3, [r4, #0]
 80105b2:	f023 0320 	bic.w	r3, r3, #32
 80105b6:	6023      	str	r3, [r4, #0]
 80105b8:	2310      	movs	r3, #16
 80105ba:	e7af      	b.n	801051c <_printf_i+0xfc>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	f043 0320 	orr.w	r3, r3, #32
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	2378      	movs	r3, #120	; 0x78
 80105c6:	4828      	ldr	r0, [pc, #160]	; (8010668 <_printf_i+0x248>)
 80105c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105cc:	e7e3      	b.n	8010596 <_printf_i+0x176>
 80105ce:	065e      	lsls	r6, r3, #25
 80105d0:	bf48      	it	mi
 80105d2:	b2ad      	uxthmi	r5, r5
 80105d4:	e7e6      	b.n	80105a4 <_printf_i+0x184>
 80105d6:	4616      	mov	r6, r2
 80105d8:	e7bb      	b.n	8010552 <_printf_i+0x132>
 80105da:	680b      	ldr	r3, [r1, #0]
 80105dc:	6826      	ldr	r6, [r4, #0]
 80105de:	1d1d      	adds	r5, r3, #4
 80105e0:	6960      	ldr	r0, [r4, #20]
 80105e2:	600d      	str	r5, [r1, #0]
 80105e4:	0635      	lsls	r5, r6, #24
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	d501      	bpl.n	80105ee <_printf_i+0x1ce>
 80105ea:	6018      	str	r0, [r3, #0]
 80105ec:	e002      	b.n	80105f4 <_printf_i+0x1d4>
 80105ee:	0671      	lsls	r1, r6, #25
 80105f0:	d5fb      	bpl.n	80105ea <_printf_i+0x1ca>
 80105f2:	8018      	strh	r0, [r3, #0]
 80105f4:	2300      	movs	r3, #0
 80105f6:	4616      	mov	r6, r2
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	e7ba      	b.n	8010572 <_printf_i+0x152>
 80105fc:	680b      	ldr	r3, [r1, #0]
 80105fe:	1d1a      	adds	r2, r3, #4
 8010600:	600a      	str	r2, [r1, #0]
 8010602:	681e      	ldr	r6, [r3, #0]
 8010604:	2100      	movs	r1, #0
 8010606:	4630      	mov	r0, r6
 8010608:	6862      	ldr	r2, [r4, #4]
 801060a:	f002 fc19 	bl	8012e40 <memchr>
 801060e:	b108      	cbz	r0, 8010614 <_printf_i+0x1f4>
 8010610:	1b80      	subs	r0, r0, r6
 8010612:	6060      	str	r0, [r4, #4]
 8010614:	6863      	ldr	r3, [r4, #4]
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	2300      	movs	r3, #0
 801061a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801061e:	e7a8      	b.n	8010572 <_printf_i+0x152>
 8010620:	4632      	mov	r2, r6
 8010622:	4649      	mov	r1, r9
 8010624:	4640      	mov	r0, r8
 8010626:	6923      	ldr	r3, [r4, #16]
 8010628:	47d0      	blx	sl
 801062a:	3001      	adds	r0, #1
 801062c:	d0ab      	beq.n	8010586 <_printf_i+0x166>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	079b      	lsls	r3, r3, #30
 8010632:	d413      	bmi.n	801065c <_printf_i+0x23c>
 8010634:	68e0      	ldr	r0, [r4, #12]
 8010636:	9b03      	ldr	r3, [sp, #12]
 8010638:	4298      	cmp	r0, r3
 801063a:	bfb8      	it	lt
 801063c:	4618      	movlt	r0, r3
 801063e:	e7a4      	b.n	801058a <_printf_i+0x16a>
 8010640:	2301      	movs	r3, #1
 8010642:	4632      	mov	r2, r6
 8010644:	4649      	mov	r1, r9
 8010646:	4640      	mov	r0, r8
 8010648:	47d0      	blx	sl
 801064a:	3001      	adds	r0, #1
 801064c:	d09b      	beq.n	8010586 <_printf_i+0x166>
 801064e:	3501      	adds	r5, #1
 8010650:	68e3      	ldr	r3, [r4, #12]
 8010652:	9903      	ldr	r1, [sp, #12]
 8010654:	1a5b      	subs	r3, r3, r1
 8010656:	42ab      	cmp	r3, r5
 8010658:	dcf2      	bgt.n	8010640 <_printf_i+0x220>
 801065a:	e7eb      	b.n	8010634 <_printf_i+0x214>
 801065c:	2500      	movs	r5, #0
 801065e:	f104 0619 	add.w	r6, r4, #25
 8010662:	e7f5      	b.n	8010650 <_printf_i+0x230>
 8010664:	0801502c 	.word	0x0801502c
 8010668:	0801503d 	.word	0x0801503d

0801066c <_scanf_float>:
 801066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	b087      	sub	sp, #28
 8010672:	9303      	str	r3, [sp, #12]
 8010674:	688b      	ldr	r3, [r1, #8]
 8010676:	4617      	mov	r7, r2
 8010678:	1e5a      	subs	r2, r3, #1
 801067a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801067e:	bf85      	ittet	hi
 8010680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010684:	195b      	addhi	r3, r3, r5
 8010686:	2300      	movls	r3, #0
 8010688:	9302      	strhi	r3, [sp, #8]
 801068a:	bf88      	it	hi
 801068c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010690:	468b      	mov	fp, r1
 8010692:	f04f 0500 	mov.w	r5, #0
 8010696:	bf8c      	ite	hi
 8010698:	608b      	strhi	r3, [r1, #8]
 801069a:	9302      	strls	r3, [sp, #8]
 801069c:	680b      	ldr	r3, [r1, #0]
 801069e:	4680      	mov	r8, r0
 80106a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80106a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80106a8:	460c      	mov	r4, r1
 80106aa:	465e      	mov	r6, fp
 80106ac:	46aa      	mov	sl, r5
 80106ae:	46a9      	mov	r9, r5
 80106b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80106b4:	9501      	str	r5, [sp, #4]
 80106b6:	68a2      	ldr	r2, [r4, #8]
 80106b8:	b152      	cbz	r2, 80106d0 <_scanf_float+0x64>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	2b4e      	cmp	r3, #78	; 0x4e
 80106c0:	d864      	bhi.n	801078c <_scanf_float+0x120>
 80106c2:	2b40      	cmp	r3, #64	; 0x40
 80106c4:	d83c      	bhi.n	8010740 <_scanf_float+0xd4>
 80106c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80106ca:	b2c8      	uxtb	r0, r1
 80106cc:	280e      	cmp	r0, #14
 80106ce:	d93a      	bls.n	8010746 <_scanf_float+0xda>
 80106d0:	f1b9 0f00 	cmp.w	r9, #0
 80106d4:	d003      	beq.n	80106de <_scanf_float+0x72>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80106e2:	f1ba 0f01 	cmp.w	sl, #1
 80106e6:	f200 8113 	bhi.w	8010910 <_scanf_float+0x2a4>
 80106ea:	455e      	cmp	r6, fp
 80106ec:	f200 8105 	bhi.w	80108fa <_scanf_float+0x28e>
 80106f0:	2501      	movs	r5, #1
 80106f2:	4628      	mov	r0, r5
 80106f4:	b007      	add	sp, #28
 80106f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80106fe:	2a0d      	cmp	r2, #13
 8010700:	d8e6      	bhi.n	80106d0 <_scanf_float+0x64>
 8010702:	a101      	add	r1, pc, #4	; (adr r1, 8010708 <_scanf_float+0x9c>)
 8010704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010708:	08010847 	.word	0x08010847
 801070c:	080106d1 	.word	0x080106d1
 8010710:	080106d1 	.word	0x080106d1
 8010714:	080106d1 	.word	0x080106d1
 8010718:	080108a7 	.word	0x080108a7
 801071c:	0801087f 	.word	0x0801087f
 8010720:	080106d1 	.word	0x080106d1
 8010724:	080106d1 	.word	0x080106d1
 8010728:	08010855 	.word	0x08010855
 801072c:	080106d1 	.word	0x080106d1
 8010730:	080106d1 	.word	0x080106d1
 8010734:	080106d1 	.word	0x080106d1
 8010738:	080106d1 	.word	0x080106d1
 801073c:	0801080d 	.word	0x0801080d
 8010740:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010744:	e7db      	b.n	80106fe <_scanf_float+0x92>
 8010746:	290e      	cmp	r1, #14
 8010748:	d8c2      	bhi.n	80106d0 <_scanf_float+0x64>
 801074a:	a001      	add	r0, pc, #4	; (adr r0, 8010750 <_scanf_float+0xe4>)
 801074c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010750:	080107ff 	.word	0x080107ff
 8010754:	080106d1 	.word	0x080106d1
 8010758:	080107ff 	.word	0x080107ff
 801075c:	08010893 	.word	0x08010893
 8010760:	080106d1 	.word	0x080106d1
 8010764:	080107ad 	.word	0x080107ad
 8010768:	080107e9 	.word	0x080107e9
 801076c:	080107e9 	.word	0x080107e9
 8010770:	080107e9 	.word	0x080107e9
 8010774:	080107e9 	.word	0x080107e9
 8010778:	080107e9 	.word	0x080107e9
 801077c:	080107e9 	.word	0x080107e9
 8010780:	080107e9 	.word	0x080107e9
 8010784:	080107e9 	.word	0x080107e9
 8010788:	080107e9 	.word	0x080107e9
 801078c:	2b6e      	cmp	r3, #110	; 0x6e
 801078e:	d809      	bhi.n	80107a4 <_scanf_float+0x138>
 8010790:	2b60      	cmp	r3, #96	; 0x60
 8010792:	d8b2      	bhi.n	80106fa <_scanf_float+0x8e>
 8010794:	2b54      	cmp	r3, #84	; 0x54
 8010796:	d077      	beq.n	8010888 <_scanf_float+0x21c>
 8010798:	2b59      	cmp	r3, #89	; 0x59
 801079a:	d199      	bne.n	80106d0 <_scanf_float+0x64>
 801079c:	2d07      	cmp	r5, #7
 801079e:	d197      	bne.n	80106d0 <_scanf_float+0x64>
 80107a0:	2508      	movs	r5, #8
 80107a2:	e029      	b.n	80107f8 <_scanf_float+0x18c>
 80107a4:	2b74      	cmp	r3, #116	; 0x74
 80107a6:	d06f      	beq.n	8010888 <_scanf_float+0x21c>
 80107a8:	2b79      	cmp	r3, #121	; 0x79
 80107aa:	e7f6      	b.n	801079a <_scanf_float+0x12e>
 80107ac:	6821      	ldr	r1, [r4, #0]
 80107ae:	05c8      	lsls	r0, r1, #23
 80107b0:	d51a      	bpl.n	80107e8 <_scanf_float+0x17c>
 80107b2:	9b02      	ldr	r3, [sp, #8]
 80107b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80107b8:	6021      	str	r1, [r4, #0]
 80107ba:	f109 0901 	add.w	r9, r9, #1
 80107be:	b11b      	cbz	r3, 80107c8 <_scanf_float+0x15c>
 80107c0:	3b01      	subs	r3, #1
 80107c2:	3201      	adds	r2, #1
 80107c4:	9302      	str	r3, [sp, #8]
 80107c6:	60a2      	str	r2, [r4, #8]
 80107c8:	68a3      	ldr	r3, [r4, #8]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	60a3      	str	r3, [r4, #8]
 80107ce:	6923      	ldr	r3, [r4, #16]
 80107d0:	3301      	adds	r3, #1
 80107d2:	6123      	str	r3, [r4, #16]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3b01      	subs	r3, #1
 80107d8:	2b00      	cmp	r3, #0
 80107da:	607b      	str	r3, [r7, #4]
 80107dc:	f340 8084 	ble.w	80108e8 <_scanf_float+0x27c>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	3301      	adds	r3, #1
 80107e4:	603b      	str	r3, [r7, #0]
 80107e6:	e766      	b.n	80106b6 <_scanf_float+0x4a>
 80107e8:	eb1a 0f05 	cmn.w	sl, r5
 80107ec:	f47f af70 	bne.w	80106d0 <_scanf_float+0x64>
 80107f0:	6822      	ldr	r2, [r4, #0]
 80107f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80107f6:	6022      	str	r2, [r4, #0]
 80107f8:	f806 3b01 	strb.w	r3, [r6], #1
 80107fc:	e7e4      	b.n	80107c8 <_scanf_float+0x15c>
 80107fe:	6822      	ldr	r2, [r4, #0]
 8010800:	0610      	lsls	r0, r2, #24
 8010802:	f57f af65 	bpl.w	80106d0 <_scanf_float+0x64>
 8010806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801080a:	e7f4      	b.n	80107f6 <_scanf_float+0x18a>
 801080c:	f1ba 0f00 	cmp.w	sl, #0
 8010810:	d10e      	bne.n	8010830 <_scanf_float+0x1c4>
 8010812:	f1b9 0f00 	cmp.w	r9, #0
 8010816:	d10e      	bne.n	8010836 <_scanf_float+0x1ca>
 8010818:	6822      	ldr	r2, [r4, #0]
 801081a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801081e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010822:	d108      	bne.n	8010836 <_scanf_float+0x1ca>
 8010824:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010828:	f04f 0a01 	mov.w	sl, #1
 801082c:	6022      	str	r2, [r4, #0]
 801082e:	e7e3      	b.n	80107f8 <_scanf_float+0x18c>
 8010830:	f1ba 0f02 	cmp.w	sl, #2
 8010834:	d055      	beq.n	80108e2 <_scanf_float+0x276>
 8010836:	2d01      	cmp	r5, #1
 8010838:	d002      	beq.n	8010840 <_scanf_float+0x1d4>
 801083a:	2d04      	cmp	r5, #4
 801083c:	f47f af48 	bne.w	80106d0 <_scanf_float+0x64>
 8010840:	3501      	adds	r5, #1
 8010842:	b2ed      	uxtb	r5, r5
 8010844:	e7d8      	b.n	80107f8 <_scanf_float+0x18c>
 8010846:	f1ba 0f01 	cmp.w	sl, #1
 801084a:	f47f af41 	bne.w	80106d0 <_scanf_float+0x64>
 801084e:	f04f 0a02 	mov.w	sl, #2
 8010852:	e7d1      	b.n	80107f8 <_scanf_float+0x18c>
 8010854:	b97d      	cbnz	r5, 8010876 <_scanf_float+0x20a>
 8010856:	f1b9 0f00 	cmp.w	r9, #0
 801085a:	f47f af3c 	bne.w	80106d6 <_scanf_float+0x6a>
 801085e:	6822      	ldr	r2, [r4, #0]
 8010860:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010864:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010868:	f47f af39 	bne.w	80106de <_scanf_float+0x72>
 801086c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010870:	2501      	movs	r5, #1
 8010872:	6022      	str	r2, [r4, #0]
 8010874:	e7c0      	b.n	80107f8 <_scanf_float+0x18c>
 8010876:	2d03      	cmp	r5, #3
 8010878:	d0e2      	beq.n	8010840 <_scanf_float+0x1d4>
 801087a:	2d05      	cmp	r5, #5
 801087c:	e7de      	b.n	801083c <_scanf_float+0x1d0>
 801087e:	2d02      	cmp	r5, #2
 8010880:	f47f af26 	bne.w	80106d0 <_scanf_float+0x64>
 8010884:	2503      	movs	r5, #3
 8010886:	e7b7      	b.n	80107f8 <_scanf_float+0x18c>
 8010888:	2d06      	cmp	r5, #6
 801088a:	f47f af21 	bne.w	80106d0 <_scanf_float+0x64>
 801088e:	2507      	movs	r5, #7
 8010890:	e7b2      	b.n	80107f8 <_scanf_float+0x18c>
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	0591      	lsls	r1, r2, #22
 8010896:	f57f af1b 	bpl.w	80106d0 <_scanf_float+0x64>
 801089a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801089e:	6022      	str	r2, [r4, #0]
 80108a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80108a4:	e7a8      	b.n	80107f8 <_scanf_float+0x18c>
 80108a6:	6822      	ldr	r2, [r4, #0]
 80108a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80108ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80108b0:	d006      	beq.n	80108c0 <_scanf_float+0x254>
 80108b2:	0550      	lsls	r0, r2, #21
 80108b4:	f57f af0c 	bpl.w	80106d0 <_scanf_float+0x64>
 80108b8:	f1b9 0f00 	cmp.w	r9, #0
 80108bc:	f43f af0f 	beq.w	80106de <_scanf_float+0x72>
 80108c0:	0591      	lsls	r1, r2, #22
 80108c2:	bf58      	it	pl
 80108c4:	9901      	ldrpl	r1, [sp, #4]
 80108c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80108ca:	bf58      	it	pl
 80108cc:	eba9 0101 	subpl.w	r1, r9, r1
 80108d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80108d4:	f04f 0900 	mov.w	r9, #0
 80108d8:	bf58      	it	pl
 80108da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80108de:	6022      	str	r2, [r4, #0]
 80108e0:	e78a      	b.n	80107f8 <_scanf_float+0x18c>
 80108e2:	f04f 0a03 	mov.w	sl, #3
 80108e6:	e787      	b.n	80107f8 <_scanf_float+0x18c>
 80108e8:	4639      	mov	r1, r7
 80108ea:	4640      	mov	r0, r8
 80108ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108f0:	4798      	blx	r3
 80108f2:	2800      	cmp	r0, #0
 80108f4:	f43f aedf 	beq.w	80106b6 <_scanf_float+0x4a>
 80108f8:	e6ea      	b.n	80106d0 <_scanf_float+0x64>
 80108fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108fe:	463a      	mov	r2, r7
 8010900:	4640      	mov	r0, r8
 8010902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010906:	4798      	blx	r3
 8010908:	6923      	ldr	r3, [r4, #16]
 801090a:	3b01      	subs	r3, #1
 801090c:	6123      	str	r3, [r4, #16]
 801090e:	e6ec      	b.n	80106ea <_scanf_float+0x7e>
 8010910:	1e6b      	subs	r3, r5, #1
 8010912:	2b06      	cmp	r3, #6
 8010914:	d825      	bhi.n	8010962 <_scanf_float+0x2f6>
 8010916:	2d02      	cmp	r5, #2
 8010918:	d836      	bhi.n	8010988 <_scanf_float+0x31c>
 801091a:	455e      	cmp	r6, fp
 801091c:	f67f aee8 	bls.w	80106f0 <_scanf_float+0x84>
 8010920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010924:	463a      	mov	r2, r7
 8010926:	4640      	mov	r0, r8
 8010928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801092c:	4798      	blx	r3
 801092e:	6923      	ldr	r3, [r4, #16]
 8010930:	3b01      	subs	r3, #1
 8010932:	6123      	str	r3, [r4, #16]
 8010934:	e7f1      	b.n	801091a <_scanf_float+0x2ae>
 8010936:	9802      	ldr	r0, [sp, #8]
 8010938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801093c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010940:	463a      	mov	r2, r7
 8010942:	9002      	str	r0, [sp, #8]
 8010944:	4640      	mov	r0, r8
 8010946:	4798      	blx	r3
 8010948:	6923      	ldr	r3, [r4, #16]
 801094a:	3b01      	subs	r3, #1
 801094c:	6123      	str	r3, [r4, #16]
 801094e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010952:	fa5f fa8a 	uxtb.w	sl, sl
 8010956:	f1ba 0f02 	cmp.w	sl, #2
 801095a:	d1ec      	bne.n	8010936 <_scanf_float+0x2ca>
 801095c:	3d03      	subs	r5, #3
 801095e:	b2ed      	uxtb	r5, r5
 8010960:	1b76      	subs	r6, r6, r5
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	05da      	lsls	r2, r3, #23
 8010966:	d52f      	bpl.n	80109c8 <_scanf_float+0x35c>
 8010968:	055b      	lsls	r3, r3, #21
 801096a:	d510      	bpl.n	801098e <_scanf_float+0x322>
 801096c:	455e      	cmp	r6, fp
 801096e:	f67f aebf 	bls.w	80106f0 <_scanf_float+0x84>
 8010972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010976:	463a      	mov	r2, r7
 8010978:	4640      	mov	r0, r8
 801097a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801097e:	4798      	blx	r3
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	3b01      	subs	r3, #1
 8010984:	6123      	str	r3, [r4, #16]
 8010986:	e7f1      	b.n	801096c <_scanf_float+0x300>
 8010988:	46aa      	mov	sl, r5
 801098a:	9602      	str	r6, [sp, #8]
 801098c:	e7df      	b.n	801094e <_scanf_float+0x2e2>
 801098e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010992:	6923      	ldr	r3, [r4, #16]
 8010994:	2965      	cmp	r1, #101	; 0x65
 8010996:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801099a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801099e:	6123      	str	r3, [r4, #16]
 80109a0:	d00c      	beq.n	80109bc <_scanf_float+0x350>
 80109a2:	2945      	cmp	r1, #69	; 0x45
 80109a4:	d00a      	beq.n	80109bc <_scanf_float+0x350>
 80109a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109aa:	463a      	mov	r2, r7
 80109ac:	4640      	mov	r0, r8
 80109ae:	4798      	blx	r3
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80109b6:	3b01      	subs	r3, #1
 80109b8:	1eb5      	subs	r5, r6, #2
 80109ba:	6123      	str	r3, [r4, #16]
 80109bc:	463a      	mov	r2, r7
 80109be:	4640      	mov	r0, r8
 80109c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109c4:	4798      	blx	r3
 80109c6:	462e      	mov	r6, r5
 80109c8:	6825      	ldr	r5, [r4, #0]
 80109ca:	f015 0510 	ands.w	r5, r5, #16
 80109ce:	d159      	bne.n	8010a84 <_scanf_float+0x418>
 80109d0:	7035      	strb	r5, [r6, #0]
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80109d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109dc:	d11c      	bne.n	8010a18 <_scanf_float+0x3ac>
 80109de:	9b01      	ldr	r3, [sp, #4]
 80109e0:	454b      	cmp	r3, r9
 80109e2:	eba3 0209 	sub.w	r2, r3, r9
 80109e6:	d124      	bne.n	8010a32 <_scanf_float+0x3c6>
 80109e8:	2200      	movs	r2, #0
 80109ea:	4659      	mov	r1, fp
 80109ec:	4640      	mov	r0, r8
 80109ee:	f000 ff6b 	bl	80118c8 <_strtod_r>
 80109f2:	f8d4 c000 	ldr.w	ip, [r4]
 80109f6:	9b03      	ldr	r3, [sp, #12]
 80109f8:	f01c 0f02 	tst.w	ip, #2
 80109fc:	4606      	mov	r6, r0
 80109fe:	460f      	mov	r7, r1
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	d021      	beq.n	8010a48 <_scanf_float+0x3dc>
 8010a04:	9903      	ldr	r1, [sp, #12]
 8010a06:	1d1a      	adds	r2, r3, #4
 8010a08:	600a      	str	r2, [r1, #0]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	e9c3 6700 	strd	r6, r7, [r3]
 8010a10:	68e3      	ldr	r3, [r4, #12]
 8010a12:	3301      	adds	r3, #1
 8010a14:	60e3      	str	r3, [r4, #12]
 8010a16:	e66c      	b.n	80106f2 <_scanf_float+0x86>
 8010a18:	9b04      	ldr	r3, [sp, #16]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0e4      	beq.n	80109e8 <_scanf_float+0x37c>
 8010a1e:	9905      	ldr	r1, [sp, #20]
 8010a20:	230a      	movs	r3, #10
 8010a22:	462a      	mov	r2, r5
 8010a24:	4640      	mov	r0, r8
 8010a26:	3101      	adds	r1, #1
 8010a28:	f000 ffda 	bl	80119e0 <_strtol_r>
 8010a2c:	9b04      	ldr	r3, [sp, #16]
 8010a2e:	9e05      	ldr	r6, [sp, #20]
 8010a30:	1ac2      	subs	r2, r0, r3
 8010a32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010a36:	429e      	cmp	r6, r3
 8010a38:	bf28      	it	cs
 8010a3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010a3e:	4630      	mov	r0, r6
 8010a40:	4911      	ldr	r1, [pc, #68]	; (8010a88 <_scanf_float+0x41c>)
 8010a42:	f000 f87d 	bl	8010b40 <siprintf>
 8010a46:	e7cf      	b.n	80109e8 <_scanf_float+0x37c>
 8010a48:	f01c 0f04 	tst.w	ip, #4
 8010a4c:	f103 0e04 	add.w	lr, r3, #4
 8010a50:	d003      	beq.n	8010a5a <_scanf_float+0x3ee>
 8010a52:	9903      	ldr	r1, [sp, #12]
 8010a54:	f8c1 e000 	str.w	lr, [r1]
 8010a58:	e7d7      	b.n	8010a0a <_scanf_float+0x39e>
 8010a5a:	9a03      	ldr	r2, [sp, #12]
 8010a5c:	f8c2 e000 	str.w	lr, [r2]
 8010a60:	f8d3 8000 	ldr.w	r8, [r3]
 8010a64:	4602      	mov	r2, r0
 8010a66:	460b      	mov	r3, r1
 8010a68:	f7ef ffe8 	bl	8000a3c <__aeabi_dcmpun>
 8010a6c:	b128      	cbz	r0, 8010a7a <_scanf_float+0x40e>
 8010a6e:	4807      	ldr	r0, [pc, #28]	; (8010a8c <_scanf_float+0x420>)
 8010a70:	f000 f81e 	bl	8010ab0 <nanf>
 8010a74:	f8c8 0000 	str.w	r0, [r8]
 8010a78:	e7ca      	b.n	8010a10 <_scanf_float+0x3a4>
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	4639      	mov	r1, r7
 8010a7e:	f7f0 f83b 	bl	8000af8 <__aeabi_d2f>
 8010a82:	e7f7      	b.n	8010a74 <_scanf_float+0x408>
 8010a84:	2500      	movs	r5, #0
 8010a86:	e634      	b.n	80106f2 <_scanf_float+0x86>
 8010a88:	0801504e 	.word	0x0801504e
 8010a8c:	08015483 	.word	0x08015483

08010a90 <_sbrk_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	2300      	movs	r3, #0
 8010a94:	4d05      	ldr	r5, [pc, #20]	; (8010aac <_sbrk_r+0x1c>)
 8010a96:	4604      	mov	r4, r0
 8010a98:	4608      	mov	r0, r1
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	f7f4 fa64 	bl	8004f68 <_sbrk>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d102      	bne.n	8010aaa <_sbrk_r+0x1a>
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	b103      	cbz	r3, 8010aaa <_sbrk_r+0x1a>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	20001d4c 	.word	0x20001d4c

08010ab0 <nanf>:
 8010ab0:	4800      	ldr	r0, [pc, #0]	; (8010ab4 <nanf+0x4>)
 8010ab2:	4770      	bx	lr
 8010ab4:	7fc00000 	.word	0x7fc00000

08010ab8 <_raise_r>:
 8010ab8:	291f      	cmp	r1, #31
 8010aba:	b538      	push	{r3, r4, r5, lr}
 8010abc:	4604      	mov	r4, r0
 8010abe:	460d      	mov	r5, r1
 8010ac0:	d904      	bls.n	8010acc <_raise_r+0x14>
 8010ac2:	2316      	movs	r3, #22
 8010ac4:	6003      	str	r3, [r0, #0]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ace:	b112      	cbz	r2, 8010ad6 <_raise_r+0x1e>
 8010ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ad4:	b94b      	cbnz	r3, 8010aea <_raise_r+0x32>
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f830 	bl	8010b3c <_getpid_r>
 8010adc:	462a      	mov	r2, r5
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae6:	f000 b817 	b.w	8010b18 <_kill_r>
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d00a      	beq.n	8010b04 <_raise_r+0x4c>
 8010aee:	1c59      	adds	r1, r3, #1
 8010af0:	d103      	bne.n	8010afa <_raise_r+0x42>
 8010af2:	2316      	movs	r3, #22
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	2001      	movs	r0, #1
 8010af8:	e7e7      	b.n	8010aca <_raise_r+0x12>
 8010afa:	2400      	movs	r4, #0
 8010afc:	4628      	mov	r0, r5
 8010afe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b02:	4798      	blx	r3
 8010b04:	2000      	movs	r0, #0
 8010b06:	e7e0      	b.n	8010aca <_raise_r+0x12>

08010b08 <raise>:
 8010b08:	4b02      	ldr	r3, [pc, #8]	; (8010b14 <raise+0xc>)
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	f7ff bfd3 	b.w	8010ab8 <_raise_r>
 8010b12:	bf00      	nop
 8010b14:	20000224 	.word	0x20000224

08010b18 <_kill_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	4d06      	ldr	r5, [pc, #24]	; (8010b38 <_kill_r+0x20>)
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4608      	mov	r0, r1
 8010b22:	4611      	mov	r1, r2
 8010b24:	602b      	str	r3, [r5, #0]
 8010b26:	f7f4 f99c 	bl	8004e62 <_kill>
 8010b2a:	1c43      	adds	r3, r0, #1
 8010b2c:	d102      	bne.n	8010b34 <_kill_r+0x1c>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b103      	cbz	r3, 8010b34 <_kill_r+0x1c>
 8010b32:	6023      	str	r3, [r4, #0]
 8010b34:	bd38      	pop	{r3, r4, r5, pc}
 8010b36:	bf00      	nop
 8010b38:	20001d4c 	.word	0x20001d4c

08010b3c <_getpid_r>:
 8010b3c:	f7f4 b98a 	b.w	8004e54 <_getpid>

08010b40 <siprintf>:
 8010b40:	b40e      	push	{r1, r2, r3}
 8010b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b46:	b500      	push	{lr}
 8010b48:	b09c      	sub	sp, #112	; 0x70
 8010b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8010b4c:	9002      	str	r0, [sp, #8]
 8010b4e:	9006      	str	r0, [sp, #24]
 8010b50:	9107      	str	r1, [sp, #28]
 8010b52:	9104      	str	r1, [sp, #16]
 8010b54:	4808      	ldr	r0, [pc, #32]	; (8010b78 <siprintf+0x38>)
 8010b56:	4909      	ldr	r1, [pc, #36]	; (8010b7c <siprintf+0x3c>)
 8010b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b5c:	9105      	str	r1, [sp, #20]
 8010b5e:	6800      	ldr	r0, [r0, #0]
 8010b60:	a902      	add	r1, sp, #8
 8010b62:	9301      	str	r3, [sp, #4]
 8010b64:	f002 fe9a 	bl	801389c <_svfiprintf_r>
 8010b68:	2200      	movs	r2, #0
 8010b6a:	9b02      	ldr	r3, [sp, #8]
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	b01c      	add	sp, #112	; 0x70
 8010b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b74:	b003      	add	sp, #12
 8010b76:	4770      	bx	lr
 8010b78:	20000224 	.word	0x20000224
 8010b7c:	ffff0208 	.word	0xffff0208

08010b80 <siscanf>:
 8010b80:	b40e      	push	{r1, r2, r3}
 8010b82:	f44f 7201 	mov.w	r2, #516	; 0x204
 8010b86:	b530      	push	{r4, r5, lr}
 8010b88:	b09c      	sub	sp, #112	; 0x70
 8010b8a:	ac1f      	add	r4, sp, #124	; 0x7c
 8010b8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8010b90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010b94:	9002      	str	r0, [sp, #8]
 8010b96:	9006      	str	r0, [sp, #24]
 8010b98:	f7ef faf2 	bl	8000180 <strlen>
 8010b9c:	4b0b      	ldr	r3, [pc, #44]	; (8010bcc <siscanf+0x4c>)
 8010b9e:	9003      	str	r0, [sp, #12]
 8010ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ba6:	9314      	str	r3, [sp, #80]	; 0x50
 8010ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bac:	9007      	str	r0, [sp, #28]
 8010bae:	4808      	ldr	r0, [pc, #32]	; (8010bd0 <siscanf+0x50>)
 8010bb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010bb4:	462a      	mov	r2, r5
 8010bb6:	4623      	mov	r3, r4
 8010bb8:	a902      	add	r1, sp, #8
 8010bba:	6800      	ldr	r0, [r0, #0]
 8010bbc:	9401      	str	r4, [sp, #4]
 8010bbe:	f002 ffc7 	bl	8013b50 <__ssvfiscanf_r>
 8010bc2:	b01c      	add	sp, #112	; 0x70
 8010bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bc8:	b003      	add	sp, #12
 8010bca:	4770      	bx	lr
 8010bcc:	08010bf7 	.word	0x08010bf7
 8010bd0:	20000224 	.word	0x20000224

08010bd4 <__sread>:
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bdc:	f003 fa7c 	bl	80140d8 <_read_r>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	bfab      	itete	ge
 8010be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010be6:	89a3      	ldrhlt	r3, [r4, #12]
 8010be8:	181b      	addge	r3, r3, r0
 8010bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010bee:	bfac      	ite	ge
 8010bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010bf2:	81a3      	strhlt	r3, [r4, #12]
 8010bf4:	bd10      	pop	{r4, pc}

08010bf6 <__seofread>:
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	4770      	bx	lr

08010bfa <__swrite>:
 8010bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfe:	461f      	mov	r7, r3
 8010c00:	898b      	ldrh	r3, [r1, #12]
 8010c02:	4605      	mov	r5, r0
 8010c04:	05db      	lsls	r3, r3, #23
 8010c06:	460c      	mov	r4, r1
 8010c08:	4616      	mov	r6, r2
 8010c0a:	d505      	bpl.n	8010c18 <__swrite+0x1e>
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c14:	f002 f8f0 	bl	8012df8 <_lseek_r>
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	4632      	mov	r2, r6
 8010c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c20:	81a3      	strh	r3, [r4, #12]
 8010c22:	4628      	mov	r0, r5
 8010c24:	463b      	mov	r3, r7
 8010c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2e:	f000 bed9 	b.w	80119e4 <_write_r>

08010c32 <__sseek>:
 8010c32:	b510      	push	{r4, lr}
 8010c34:	460c      	mov	r4, r1
 8010c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c3a:	f002 f8dd 	bl	8012df8 <_lseek_r>
 8010c3e:	1c43      	adds	r3, r0, #1
 8010c40:	89a3      	ldrh	r3, [r4, #12]
 8010c42:	bf15      	itete	ne
 8010c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c4e:	81a3      	strheq	r3, [r4, #12]
 8010c50:	bf18      	it	ne
 8010c52:	81a3      	strhne	r3, [r4, #12]
 8010c54:	bd10      	pop	{r4, pc}

08010c56 <__sclose>:
 8010c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c5a:	f000 bed5 	b.w	8011a08 <_close_r>

08010c5e <strcpy>:
 8010c5e:	4603      	mov	r3, r0
 8010c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c64:	f803 2b01 	strb.w	r2, [r3], #1
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	d1f9      	bne.n	8010c60 <strcpy+0x2>
 8010c6c:	4770      	bx	lr

08010c6e <strstr>:
 8010c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c70:	780c      	ldrb	r4, [r1, #0]
 8010c72:	b164      	cbz	r4, 8010c8e <strstr+0x20>
 8010c74:	4603      	mov	r3, r0
 8010c76:	781a      	ldrb	r2, [r3, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	1c5e      	adds	r6, r3, #1
 8010c7c:	b90a      	cbnz	r2, 8010c82 <strstr+0x14>
 8010c7e:	4610      	mov	r0, r2
 8010c80:	e005      	b.n	8010c8e <strstr+0x20>
 8010c82:	4294      	cmp	r4, r2
 8010c84:	d108      	bne.n	8010c98 <strstr+0x2a>
 8010c86:	460d      	mov	r5, r1
 8010c88:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010c8c:	b902      	cbnz	r2, 8010c90 <strstr+0x22>
 8010c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c90:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8010c94:	4297      	cmp	r7, r2
 8010c96:	d0f7      	beq.n	8010c88 <strstr+0x1a>
 8010c98:	4633      	mov	r3, r6
 8010c9a:	e7ec      	b.n	8010c76 <strstr+0x8>

08010c9c <sulp>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	460f      	mov	r7, r1
 8010ca2:	4690      	mov	r8, r2
 8010ca4:	f002 fc56 	bl	8013554 <__ulp>
 8010ca8:	4604      	mov	r4, r0
 8010caa:	460d      	mov	r5, r1
 8010cac:	f1b8 0f00 	cmp.w	r8, #0
 8010cb0:	d011      	beq.n	8010cd6 <sulp+0x3a>
 8010cb2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8010cb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	dd0b      	ble.n	8010cd6 <sulp+0x3a>
 8010cbe:	2400      	movs	r4, #0
 8010cc0:	051b      	lsls	r3, r3, #20
 8010cc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010cc6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010cca:	4622      	mov	r2, r4
 8010ccc:	462b      	mov	r3, r5
 8010cce:	f7ef fc1b 	bl	8000508 <__aeabi_dmul>
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	4629      	mov	r1, r5
 8010cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010ce0 <_strtod_l>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	469b      	mov	fp, r3
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	b0a1      	sub	sp, #132	; 0x84
 8010cea:	931c      	str	r3, [sp, #112]	; 0x70
 8010cec:	4ba1      	ldr	r3, [pc, #644]	; (8010f74 <_strtod_l+0x294>)
 8010cee:	4682      	mov	sl, r0
 8010cf0:	681f      	ldr	r7, [r3, #0]
 8010cf2:	460e      	mov	r6, r1
 8010cf4:	4638      	mov	r0, r7
 8010cf6:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cf8:	f7ef fa42 	bl	8000180 <strlen>
 8010cfc:	f04f 0800 	mov.w	r8, #0
 8010d00:	4604      	mov	r4, r0
 8010d02:	f04f 0900 	mov.w	r9, #0
 8010d06:	961b      	str	r6, [sp, #108]	; 0x6c
 8010d08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d0a:	781a      	ldrb	r2, [r3, #0]
 8010d0c:	2a2b      	cmp	r2, #43	; 0x2b
 8010d0e:	d04c      	beq.n	8010daa <_strtod_l+0xca>
 8010d10:	d83a      	bhi.n	8010d88 <_strtod_l+0xa8>
 8010d12:	2a0d      	cmp	r2, #13
 8010d14:	d833      	bhi.n	8010d7e <_strtod_l+0x9e>
 8010d16:	2a08      	cmp	r2, #8
 8010d18:	d833      	bhi.n	8010d82 <_strtod_l+0xa2>
 8010d1a:	2a00      	cmp	r2, #0
 8010d1c:	d03d      	beq.n	8010d9a <_strtod_l+0xba>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	930c      	str	r3, [sp, #48]	; 0x30
 8010d22:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010d24:	782b      	ldrb	r3, [r5, #0]
 8010d26:	2b30      	cmp	r3, #48	; 0x30
 8010d28:	f040 80af 	bne.w	8010e8a <_strtod_l+0x1aa>
 8010d2c:	786b      	ldrb	r3, [r5, #1]
 8010d2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d32:	2b58      	cmp	r3, #88	; 0x58
 8010d34:	d16c      	bne.n	8010e10 <_strtod_l+0x130>
 8010d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d38:	4650      	mov	r0, sl
 8010d3a:	9301      	str	r3, [sp, #4]
 8010d3c:	ab1c      	add	r3, sp, #112	; 0x70
 8010d3e:	9300      	str	r3, [sp, #0]
 8010d40:	4a8d      	ldr	r2, [pc, #564]	; (8010f78 <_strtod_l+0x298>)
 8010d42:	f8cd b008 	str.w	fp, [sp, #8]
 8010d46:	ab1d      	add	r3, sp, #116	; 0x74
 8010d48:	a91b      	add	r1, sp, #108	; 0x6c
 8010d4a:	f001 fd53 	bl	80127f4 <__gethex>
 8010d4e:	f010 0607 	ands.w	r6, r0, #7
 8010d52:	4604      	mov	r4, r0
 8010d54:	d005      	beq.n	8010d62 <_strtod_l+0x82>
 8010d56:	2e06      	cmp	r6, #6
 8010d58:	d129      	bne.n	8010dae <_strtod_l+0xce>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	951b      	str	r5, [sp, #108]	; 0x6c
 8010d60:	930c      	str	r3, [sp, #48]	; 0x30
 8010d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f040 8596 	bne.w	8011896 <_strtod_l+0xbb6>
 8010d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d6c:	b1d3      	cbz	r3, 8010da4 <_strtod_l+0xc4>
 8010d6e:	4642      	mov	r2, r8
 8010d70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d74:	4610      	mov	r0, r2
 8010d76:	4619      	mov	r1, r3
 8010d78:	b021      	add	sp, #132	; 0x84
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	2a20      	cmp	r2, #32
 8010d80:	d1cd      	bne.n	8010d1e <_strtod_l+0x3e>
 8010d82:	3301      	adds	r3, #1
 8010d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8010d86:	e7bf      	b.n	8010d08 <_strtod_l+0x28>
 8010d88:	2a2d      	cmp	r2, #45	; 0x2d
 8010d8a:	d1c8      	bne.n	8010d1e <_strtod_l+0x3e>
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	920c      	str	r2, [sp, #48]	; 0x30
 8010d90:	1c5a      	adds	r2, r3, #1
 8010d92:	921b      	str	r2, [sp, #108]	; 0x6c
 8010d94:	785b      	ldrb	r3, [r3, #1]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1c3      	bne.n	8010d22 <_strtod_l+0x42>
 8010d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f040 8577 	bne.w	8011892 <_strtod_l+0xbb2>
 8010da4:	4642      	mov	r2, r8
 8010da6:	464b      	mov	r3, r9
 8010da8:	e7e4      	b.n	8010d74 <_strtod_l+0x94>
 8010daa:	2200      	movs	r2, #0
 8010dac:	e7ef      	b.n	8010d8e <_strtod_l+0xae>
 8010dae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010db0:	b13a      	cbz	r2, 8010dc2 <_strtod_l+0xe2>
 8010db2:	2135      	movs	r1, #53	; 0x35
 8010db4:	a81e      	add	r0, sp, #120	; 0x78
 8010db6:	f002 fcd1 	bl	801375c <__copybits>
 8010dba:	4650      	mov	r0, sl
 8010dbc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010dbe:	f002 f899 	bl	8012ef4 <_Bfree>
 8010dc2:	3e01      	subs	r6, #1
 8010dc4:	2e05      	cmp	r6, #5
 8010dc6:	d807      	bhi.n	8010dd8 <_strtod_l+0xf8>
 8010dc8:	e8df f006 	tbb	[pc, r6]
 8010dcc:	1d180b0e 	.word	0x1d180b0e
 8010dd0:	030e      	.short	0x030e
 8010dd2:	f04f 0900 	mov.w	r9, #0
 8010dd6:	46c8      	mov	r8, r9
 8010dd8:	0721      	lsls	r1, r4, #28
 8010dda:	d5c2      	bpl.n	8010d62 <_strtod_l+0x82>
 8010ddc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8010de0:	e7bf      	b.n	8010d62 <_strtod_l+0x82>
 8010de2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8010de6:	e7f7      	b.n	8010dd8 <_strtod_l+0xf8>
 8010de8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010dea:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8010dee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010df6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010dfa:	e7ed      	b.n	8010dd8 <_strtod_l+0xf8>
 8010dfc:	f04f 0800 	mov.w	r8, #0
 8010e00:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010f7c <_strtod_l+0x29c>
 8010e04:	e7e8      	b.n	8010dd8 <_strtod_l+0xf8>
 8010e06:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010e0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010e0e:	e7e3      	b.n	8010dd8 <_strtod_l+0xf8>
 8010e10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	921b      	str	r2, [sp, #108]	; 0x6c
 8010e16:	785b      	ldrb	r3, [r3, #1]
 8010e18:	2b30      	cmp	r3, #48	; 0x30
 8010e1a:	d0f9      	beq.n	8010e10 <_strtod_l+0x130>
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d0a0      	beq.n	8010d62 <_strtod_l+0x82>
 8010e20:	2301      	movs	r3, #1
 8010e22:	9307      	str	r3, [sp, #28]
 8010e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e26:	220a      	movs	r2, #10
 8010e28:	9308      	str	r3, [sp, #32]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	469b      	mov	fp, r3
 8010e2e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010e32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010e34:	7805      	ldrb	r5, [r0, #0]
 8010e36:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8010e3a:	b2d9      	uxtb	r1, r3
 8010e3c:	2909      	cmp	r1, #9
 8010e3e:	d926      	bls.n	8010e8e <_strtod_l+0x1ae>
 8010e40:	4622      	mov	r2, r4
 8010e42:	4639      	mov	r1, r7
 8010e44:	f003 f99a 	bl	801417c <strncmp>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d032      	beq.n	8010eb2 <_strtod_l+0x1d2>
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	462b      	mov	r3, r5
 8010e50:	465c      	mov	r4, fp
 8010e52:	4602      	mov	r2, r0
 8010e54:	9004      	str	r0, [sp, #16]
 8010e56:	2b65      	cmp	r3, #101	; 0x65
 8010e58:	d001      	beq.n	8010e5e <_strtod_l+0x17e>
 8010e5a:	2b45      	cmp	r3, #69	; 0x45
 8010e5c:	d113      	bne.n	8010e86 <_strtod_l+0x1a6>
 8010e5e:	b91c      	cbnz	r4, 8010e68 <_strtod_l+0x188>
 8010e60:	9b07      	ldr	r3, [sp, #28]
 8010e62:	4303      	orrs	r3, r0
 8010e64:	d099      	beq.n	8010d9a <_strtod_l+0xba>
 8010e66:	2400      	movs	r4, #0
 8010e68:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010e6a:	1c73      	adds	r3, r6, #1
 8010e6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8010e6e:	7873      	ldrb	r3, [r6, #1]
 8010e70:	2b2b      	cmp	r3, #43	; 0x2b
 8010e72:	d078      	beq.n	8010f66 <_strtod_l+0x286>
 8010e74:	2b2d      	cmp	r3, #45	; 0x2d
 8010e76:	d07b      	beq.n	8010f70 <_strtod_l+0x290>
 8010e78:	2700      	movs	r7, #0
 8010e7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010e7e:	2909      	cmp	r1, #9
 8010e80:	f240 8082 	bls.w	8010f88 <_strtod_l+0x2a8>
 8010e84:	961b      	str	r6, [sp, #108]	; 0x6c
 8010e86:	2500      	movs	r5, #0
 8010e88:	e09e      	b.n	8010fc8 <_strtod_l+0x2e8>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e7c9      	b.n	8010e22 <_strtod_l+0x142>
 8010e8e:	f1bb 0f08 	cmp.w	fp, #8
 8010e92:	bfd5      	itete	le
 8010e94:	9906      	ldrle	r1, [sp, #24]
 8010e96:	9905      	ldrgt	r1, [sp, #20]
 8010e98:	fb02 3301 	mlale	r3, r2, r1, r3
 8010e9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010ea0:	f100 0001 	add.w	r0, r0, #1
 8010ea4:	bfd4      	ite	le
 8010ea6:	9306      	strle	r3, [sp, #24]
 8010ea8:	9305      	strgt	r3, [sp, #20]
 8010eaa:	f10b 0b01 	add.w	fp, fp, #1
 8010eae:	901b      	str	r0, [sp, #108]	; 0x6c
 8010eb0:	e7bf      	b.n	8010e32 <_strtod_l+0x152>
 8010eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010eb4:	191a      	adds	r2, r3, r4
 8010eb6:	921b      	str	r2, [sp, #108]	; 0x6c
 8010eb8:	5d1b      	ldrb	r3, [r3, r4]
 8010eba:	f1bb 0f00 	cmp.w	fp, #0
 8010ebe:	d036      	beq.n	8010f2e <_strtod_l+0x24e>
 8010ec0:	465c      	mov	r4, fp
 8010ec2:	9004      	str	r0, [sp, #16]
 8010ec4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010ec8:	2a09      	cmp	r2, #9
 8010eca:	d912      	bls.n	8010ef2 <_strtod_l+0x212>
 8010ecc:	2201      	movs	r2, #1
 8010ece:	e7c2      	b.n	8010e56 <_strtod_l+0x176>
 8010ed0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	1c5a      	adds	r2, r3, #1
 8010ed6:	921b      	str	r2, [sp, #108]	; 0x6c
 8010ed8:	785b      	ldrb	r3, [r3, #1]
 8010eda:	2b30      	cmp	r3, #48	; 0x30
 8010edc:	d0f8      	beq.n	8010ed0 <_strtod_l+0x1f0>
 8010ede:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010ee2:	2a08      	cmp	r2, #8
 8010ee4:	f200 84dc 	bhi.w	80118a0 <_strtod_l+0xbc0>
 8010ee8:	9004      	str	r0, [sp, #16]
 8010eea:	2000      	movs	r0, #0
 8010eec:	4604      	mov	r4, r0
 8010eee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010ef0:	9208      	str	r2, [sp, #32]
 8010ef2:	3b30      	subs	r3, #48	; 0x30
 8010ef4:	f100 0201 	add.w	r2, r0, #1
 8010ef8:	d013      	beq.n	8010f22 <_strtod_l+0x242>
 8010efa:	9904      	ldr	r1, [sp, #16]
 8010efc:	1905      	adds	r5, r0, r4
 8010efe:	4411      	add	r1, r2
 8010f00:	9104      	str	r1, [sp, #16]
 8010f02:	4622      	mov	r2, r4
 8010f04:	210a      	movs	r1, #10
 8010f06:	42aa      	cmp	r2, r5
 8010f08:	d113      	bne.n	8010f32 <_strtod_l+0x252>
 8010f0a:	1822      	adds	r2, r4, r0
 8010f0c:	2a08      	cmp	r2, #8
 8010f0e:	f104 0401 	add.w	r4, r4, #1
 8010f12:	4404      	add	r4, r0
 8010f14:	dc1b      	bgt.n	8010f4e <_strtod_l+0x26e>
 8010f16:	220a      	movs	r2, #10
 8010f18:	9906      	ldr	r1, [sp, #24]
 8010f1a:	fb02 3301 	mla	r3, r2, r1, r3
 8010f1e:	9306      	str	r3, [sp, #24]
 8010f20:	2200      	movs	r2, #0
 8010f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f24:	4610      	mov	r0, r2
 8010f26:	1c59      	adds	r1, r3, #1
 8010f28:	911b      	str	r1, [sp, #108]	; 0x6c
 8010f2a:	785b      	ldrb	r3, [r3, #1]
 8010f2c:	e7ca      	b.n	8010ec4 <_strtod_l+0x1e4>
 8010f2e:	4658      	mov	r0, fp
 8010f30:	e7d3      	b.n	8010eda <_strtod_l+0x1fa>
 8010f32:	2a08      	cmp	r2, #8
 8010f34:	dc04      	bgt.n	8010f40 <_strtod_l+0x260>
 8010f36:	9f06      	ldr	r7, [sp, #24]
 8010f38:	434f      	muls	r7, r1
 8010f3a:	9706      	str	r7, [sp, #24]
 8010f3c:	3201      	adds	r2, #1
 8010f3e:	e7e2      	b.n	8010f06 <_strtod_l+0x226>
 8010f40:	1c57      	adds	r7, r2, #1
 8010f42:	2f10      	cmp	r7, #16
 8010f44:	bfde      	ittt	le
 8010f46:	9f05      	ldrle	r7, [sp, #20]
 8010f48:	434f      	mulle	r7, r1
 8010f4a:	9705      	strle	r7, [sp, #20]
 8010f4c:	e7f6      	b.n	8010f3c <_strtod_l+0x25c>
 8010f4e:	2c10      	cmp	r4, #16
 8010f50:	bfdf      	itttt	le
 8010f52:	220a      	movle	r2, #10
 8010f54:	9905      	ldrle	r1, [sp, #20]
 8010f56:	fb02 3301 	mlale	r3, r2, r1, r3
 8010f5a:	9305      	strle	r3, [sp, #20]
 8010f5c:	e7e0      	b.n	8010f20 <_strtod_l+0x240>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	2201      	movs	r2, #1
 8010f62:	9304      	str	r3, [sp, #16]
 8010f64:	e77c      	b.n	8010e60 <_strtod_l+0x180>
 8010f66:	2700      	movs	r7, #0
 8010f68:	1cb3      	adds	r3, r6, #2
 8010f6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f6c:	78b3      	ldrb	r3, [r6, #2]
 8010f6e:	e784      	b.n	8010e7a <_strtod_l+0x19a>
 8010f70:	2701      	movs	r7, #1
 8010f72:	e7f9      	b.n	8010f68 <_strtod_l+0x288>
 8010f74:	080152a8 	.word	0x080152a8
 8010f78:	08015054 	.word	0x08015054
 8010f7c:	7ff00000 	.word	0x7ff00000
 8010f80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f82:	1c59      	adds	r1, r3, #1
 8010f84:	911b      	str	r1, [sp, #108]	; 0x6c
 8010f86:	785b      	ldrb	r3, [r3, #1]
 8010f88:	2b30      	cmp	r3, #48	; 0x30
 8010f8a:	d0f9      	beq.n	8010f80 <_strtod_l+0x2a0>
 8010f8c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010f90:	2908      	cmp	r1, #8
 8010f92:	f63f af78 	bhi.w	8010e86 <_strtod_l+0x1a6>
 8010f96:	f04f 0e0a 	mov.w	lr, #10
 8010f9a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8010f9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010fa4:	1c59      	adds	r1, r3, #1
 8010fa6:	911b      	str	r1, [sp, #108]	; 0x6c
 8010fa8:	785b      	ldrb	r3, [r3, #1]
 8010faa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8010fae:	2d09      	cmp	r5, #9
 8010fb0:	d935      	bls.n	801101e <_strtod_l+0x33e>
 8010fb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010fb4:	1b49      	subs	r1, r1, r5
 8010fb6:	2908      	cmp	r1, #8
 8010fb8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010fbc:	dc02      	bgt.n	8010fc4 <_strtod_l+0x2e4>
 8010fbe:	4565      	cmp	r5, ip
 8010fc0:	bfa8      	it	ge
 8010fc2:	4665      	movge	r5, ip
 8010fc4:	b107      	cbz	r7, 8010fc8 <_strtod_l+0x2e8>
 8010fc6:	426d      	negs	r5, r5
 8010fc8:	2c00      	cmp	r4, #0
 8010fca:	d14c      	bne.n	8011066 <_strtod_l+0x386>
 8010fcc:	9907      	ldr	r1, [sp, #28]
 8010fce:	4301      	orrs	r1, r0
 8010fd0:	f47f aec7 	bne.w	8010d62 <_strtod_l+0x82>
 8010fd4:	2a00      	cmp	r2, #0
 8010fd6:	f47f aee0 	bne.w	8010d9a <_strtod_l+0xba>
 8010fda:	2b69      	cmp	r3, #105	; 0x69
 8010fdc:	d026      	beq.n	801102c <_strtod_l+0x34c>
 8010fde:	dc23      	bgt.n	8011028 <_strtod_l+0x348>
 8010fe0:	2b49      	cmp	r3, #73	; 0x49
 8010fe2:	d023      	beq.n	801102c <_strtod_l+0x34c>
 8010fe4:	2b4e      	cmp	r3, #78	; 0x4e
 8010fe6:	f47f aed8 	bne.w	8010d9a <_strtod_l+0xba>
 8010fea:	499c      	ldr	r1, [pc, #624]	; (801125c <_strtod_l+0x57c>)
 8010fec:	a81b      	add	r0, sp, #108	; 0x6c
 8010fee:	f001 fe4f 	bl	8012c90 <__match>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	f43f aed1 	beq.w	8010d9a <_strtod_l+0xba>
 8010ff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	2b28      	cmp	r3, #40	; 0x28
 8010ffe:	d12c      	bne.n	801105a <_strtod_l+0x37a>
 8011000:	4997      	ldr	r1, [pc, #604]	; (8011260 <_strtod_l+0x580>)
 8011002:	aa1e      	add	r2, sp, #120	; 0x78
 8011004:	a81b      	add	r0, sp, #108	; 0x6c
 8011006:	f001 fe57 	bl	8012cb8 <__hexnan>
 801100a:	2805      	cmp	r0, #5
 801100c:	d125      	bne.n	801105a <_strtod_l+0x37a>
 801100e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011010:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011014:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011018:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801101c:	e6a1      	b.n	8010d62 <_strtod_l+0x82>
 801101e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8011022:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011026:	e7bc      	b.n	8010fa2 <_strtod_l+0x2c2>
 8011028:	2b6e      	cmp	r3, #110	; 0x6e
 801102a:	e7dc      	b.n	8010fe6 <_strtod_l+0x306>
 801102c:	498d      	ldr	r1, [pc, #564]	; (8011264 <_strtod_l+0x584>)
 801102e:	a81b      	add	r0, sp, #108	; 0x6c
 8011030:	f001 fe2e 	bl	8012c90 <__match>
 8011034:	2800      	cmp	r0, #0
 8011036:	f43f aeb0 	beq.w	8010d9a <_strtod_l+0xba>
 801103a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801103c:	498a      	ldr	r1, [pc, #552]	; (8011268 <_strtod_l+0x588>)
 801103e:	3b01      	subs	r3, #1
 8011040:	a81b      	add	r0, sp, #108	; 0x6c
 8011042:	931b      	str	r3, [sp, #108]	; 0x6c
 8011044:	f001 fe24 	bl	8012c90 <__match>
 8011048:	b910      	cbnz	r0, 8011050 <_strtod_l+0x370>
 801104a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801104c:	3301      	adds	r3, #1
 801104e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011050:	f04f 0800 	mov.w	r8, #0
 8011054:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8011278 <_strtod_l+0x598>
 8011058:	e683      	b.n	8010d62 <_strtod_l+0x82>
 801105a:	4884      	ldr	r0, [pc, #528]	; (801126c <_strtod_l+0x58c>)
 801105c:	f003 f84e 	bl	80140fc <nan>
 8011060:	4680      	mov	r8, r0
 8011062:	4689      	mov	r9, r1
 8011064:	e67d      	b.n	8010d62 <_strtod_l+0x82>
 8011066:	9b04      	ldr	r3, [sp, #16]
 8011068:	f1bb 0f00 	cmp.w	fp, #0
 801106c:	bf08      	it	eq
 801106e:	46a3      	moveq	fp, r4
 8011070:	1aeb      	subs	r3, r5, r3
 8011072:	2c10      	cmp	r4, #16
 8011074:	9806      	ldr	r0, [sp, #24]
 8011076:	4626      	mov	r6, r4
 8011078:	9307      	str	r3, [sp, #28]
 801107a:	bfa8      	it	ge
 801107c:	2610      	movge	r6, #16
 801107e:	f7ef f9c9 	bl	8000414 <__aeabi_ui2d>
 8011082:	2c09      	cmp	r4, #9
 8011084:	4680      	mov	r8, r0
 8011086:	4689      	mov	r9, r1
 8011088:	dd13      	ble.n	80110b2 <_strtod_l+0x3d2>
 801108a:	4b79      	ldr	r3, [pc, #484]	; (8011270 <_strtod_l+0x590>)
 801108c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011090:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011094:	f7ef fa38 	bl	8000508 <__aeabi_dmul>
 8011098:	4680      	mov	r8, r0
 801109a:	9805      	ldr	r0, [sp, #20]
 801109c:	4689      	mov	r9, r1
 801109e:	f7ef f9b9 	bl	8000414 <__aeabi_ui2d>
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	f7ef f877 	bl	800019c <__adddf3>
 80110ae:	4680      	mov	r8, r0
 80110b0:	4689      	mov	r9, r1
 80110b2:	2c0f      	cmp	r4, #15
 80110b4:	dc36      	bgt.n	8011124 <_strtod_l+0x444>
 80110b6:	9b07      	ldr	r3, [sp, #28]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f43f ae52 	beq.w	8010d62 <_strtod_l+0x82>
 80110be:	dd22      	ble.n	8011106 <_strtod_l+0x426>
 80110c0:	2b16      	cmp	r3, #22
 80110c2:	dc09      	bgt.n	80110d8 <_strtod_l+0x3f8>
 80110c4:	4c6a      	ldr	r4, [pc, #424]	; (8011270 <_strtod_l+0x590>)
 80110c6:	4642      	mov	r2, r8
 80110c8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80110cc:	464b      	mov	r3, r9
 80110ce:	e9d4 0100 	ldrd	r0, r1, [r4]
 80110d2:	f7ef fa19 	bl	8000508 <__aeabi_dmul>
 80110d6:	e7c3      	b.n	8011060 <_strtod_l+0x380>
 80110d8:	9a07      	ldr	r2, [sp, #28]
 80110da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80110de:	4293      	cmp	r3, r2
 80110e0:	db20      	blt.n	8011124 <_strtod_l+0x444>
 80110e2:	4d63      	ldr	r5, [pc, #396]	; (8011270 <_strtod_l+0x590>)
 80110e4:	f1c4 040f 	rsb	r4, r4, #15
 80110e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80110ec:	4642      	mov	r2, r8
 80110ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110f2:	464b      	mov	r3, r9
 80110f4:	f7ef fa08 	bl	8000508 <__aeabi_dmul>
 80110f8:	9b07      	ldr	r3, [sp, #28]
 80110fa:	1b1c      	subs	r4, r3, r4
 80110fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011104:	e7e5      	b.n	80110d2 <_strtod_l+0x3f2>
 8011106:	9b07      	ldr	r3, [sp, #28]
 8011108:	3316      	adds	r3, #22
 801110a:	db0b      	blt.n	8011124 <_strtod_l+0x444>
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	4a58      	ldr	r2, [pc, #352]	; (8011270 <_strtod_l+0x590>)
 8011110:	1b5d      	subs	r5, r3, r5
 8011112:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011116:	4640      	mov	r0, r8
 8011118:	e9d5 2300 	ldrd	r2, r3, [r5]
 801111c:	4649      	mov	r1, r9
 801111e:	f7ef fb1d 	bl	800075c <__aeabi_ddiv>
 8011122:	e79d      	b.n	8011060 <_strtod_l+0x380>
 8011124:	9b07      	ldr	r3, [sp, #28]
 8011126:	1ba6      	subs	r6, r4, r6
 8011128:	441e      	add	r6, r3
 801112a:	2e00      	cmp	r6, #0
 801112c:	dd71      	ble.n	8011212 <_strtod_l+0x532>
 801112e:	f016 030f 	ands.w	r3, r6, #15
 8011132:	d00a      	beq.n	801114a <_strtod_l+0x46a>
 8011134:	494e      	ldr	r1, [pc, #312]	; (8011270 <_strtod_l+0x590>)
 8011136:	4642      	mov	r2, r8
 8011138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801113c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011140:	464b      	mov	r3, r9
 8011142:	f7ef f9e1 	bl	8000508 <__aeabi_dmul>
 8011146:	4680      	mov	r8, r0
 8011148:	4689      	mov	r9, r1
 801114a:	f036 060f 	bics.w	r6, r6, #15
 801114e:	d050      	beq.n	80111f2 <_strtod_l+0x512>
 8011150:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8011154:	dd27      	ble.n	80111a6 <_strtod_l+0x4c6>
 8011156:	f04f 0b00 	mov.w	fp, #0
 801115a:	f8cd b010 	str.w	fp, [sp, #16]
 801115e:	f8cd b020 	str.w	fp, [sp, #32]
 8011162:	f8cd b018 	str.w	fp, [sp, #24]
 8011166:	2322      	movs	r3, #34	; 0x22
 8011168:	f04f 0800 	mov.w	r8, #0
 801116c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011278 <_strtod_l+0x598>
 8011170:	f8ca 3000 	str.w	r3, [sl]
 8011174:	9b08      	ldr	r3, [sp, #32]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f43f adf3 	beq.w	8010d62 <_strtod_l+0x82>
 801117c:	4650      	mov	r0, sl
 801117e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011180:	f001 feb8 	bl	8012ef4 <_Bfree>
 8011184:	4650      	mov	r0, sl
 8011186:	9906      	ldr	r1, [sp, #24]
 8011188:	f001 feb4 	bl	8012ef4 <_Bfree>
 801118c:	4650      	mov	r0, sl
 801118e:	9904      	ldr	r1, [sp, #16]
 8011190:	f001 feb0 	bl	8012ef4 <_Bfree>
 8011194:	4650      	mov	r0, sl
 8011196:	9908      	ldr	r1, [sp, #32]
 8011198:	f001 feac 	bl	8012ef4 <_Bfree>
 801119c:	4659      	mov	r1, fp
 801119e:	4650      	mov	r0, sl
 80111a0:	f001 fea8 	bl	8012ef4 <_Bfree>
 80111a4:	e5dd      	b.n	8010d62 <_strtod_l+0x82>
 80111a6:	2300      	movs	r3, #0
 80111a8:	4640      	mov	r0, r8
 80111aa:	4649      	mov	r1, r9
 80111ac:	461f      	mov	r7, r3
 80111ae:	1136      	asrs	r6, r6, #4
 80111b0:	2e01      	cmp	r6, #1
 80111b2:	dc21      	bgt.n	80111f8 <_strtod_l+0x518>
 80111b4:	b10b      	cbz	r3, 80111ba <_strtod_l+0x4da>
 80111b6:	4680      	mov	r8, r0
 80111b8:	4689      	mov	r9, r1
 80111ba:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <_strtod_l+0x594>)
 80111bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80111c0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80111c4:	4642      	mov	r2, r8
 80111c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80111ca:	464b      	mov	r3, r9
 80111cc:	f7ef f99c 	bl	8000508 <__aeabi_dmul>
 80111d0:	4b29      	ldr	r3, [pc, #164]	; (8011278 <_strtod_l+0x598>)
 80111d2:	460a      	mov	r2, r1
 80111d4:	400b      	ands	r3, r1
 80111d6:	4929      	ldr	r1, [pc, #164]	; (801127c <_strtod_l+0x59c>)
 80111d8:	4680      	mov	r8, r0
 80111da:	428b      	cmp	r3, r1
 80111dc:	d8bb      	bhi.n	8011156 <_strtod_l+0x476>
 80111de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80111e2:	428b      	cmp	r3, r1
 80111e4:	bf86      	itte	hi
 80111e6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80111ea:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8011280 <_strtod_l+0x5a0>
 80111ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80111f2:	2300      	movs	r3, #0
 80111f4:	9305      	str	r3, [sp, #20]
 80111f6:	e07e      	b.n	80112f6 <_strtod_l+0x616>
 80111f8:	07f2      	lsls	r2, r6, #31
 80111fa:	d507      	bpl.n	801120c <_strtod_l+0x52c>
 80111fc:	4b1d      	ldr	r3, [pc, #116]	; (8011274 <_strtod_l+0x594>)
 80111fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ef f97f 	bl	8000508 <__aeabi_dmul>
 801120a:	2301      	movs	r3, #1
 801120c:	3701      	adds	r7, #1
 801120e:	1076      	asrs	r6, r6, #1
 8011210:	e7ce      	b.n	80111b0 <_strtod_l+0x4d0>
 8011212:	d0ee      	beq.n	80111f2 <_strtod_l+0x512>
 8011214:	4276      	negs	r6, r6
 8011216:	f016 020f 	ands.w	r2, r6, #15
 801121a:	d00a      	beq.n	8011232 <_strtod_l+0x552>
 801121c:	4b14      	ldr	r3, [pc, #80]	; (8011270 <_strtod_l+0x590>)
 801121e:	4640      	mov	r0, r8
 8011220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011224:	4649      	mov	r1, r9
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef fa97 	bl	800075c <__aeabi_ddiv>
 801122e:	4680      	mov	r8, r0
 8011230:	4689      	mov	r9, r1
 8011232:	1136      	asrs	r6, r6, #4
 8011234:	d0dd      	beq.n	80111f2 <_strtod_l+0x512>
 8011236:	2e1f      	cmp	r6, #31
 8011238:	dd24      	ble.n	8011284 <_strtod_l+0x5a4>
 801123a:	f04f 0b00 	mov.w	fp, #0
 801123e:	f8cd b010 	str.w	fp, [sp, #16]
 8011242:	f8cd b020 	str.w	fp, [sp, #32]
 8011246:	f8cd b018 	str.w	fp, [sp, #24]
 801124a:	2322      	movs	r3, #34	; 0x22
 801124c:	f04f 0800 	mov.w	r8, #0
 8011250:	f04f 0900 	mov.w	r9, #0
 8011254:	f8ca 3000 	str.w	r3, [sl]
 8011258:	e78c      	b.n	8011174 <_strtod_l+0x494>
 801125a:	bf00      	nop
 801125c:	08015029 	.word	0x08015029
 8011260:	08015068 	.word	0x08015068
 8011264:	08015021 	.word	0x08015021
 8011268:	080151ac 	.word	0x080151ac
 801126c:	08015483 	.word	0x08015483
 8011270:	08015348 	.word	0x08015348
 8011274:	08015320 	.word	0x08015320
 8011278:	7ff00000 	.word	0x7ff00000
 801127c:	7ca00000 	.word	0x7ca00000
 8011280:	7fefffff 	.word	0x7fefffff
 8011284:	f016 0310 	ands.w	r3, r6, #16
 8011288:	bf18      	it	ne
 801128a:	236a      	movne	r3, #106	; 0x6a
 801128c:	4640      	mov	r0, r8
 801128e:	9305      	str	r3, [sp, #20]
 8011290:	4649      	mov	r1, r9
 8011292:	2300      	movs	r3, #0
 8011294:	4fb2      	ldr	r7, [pc, #712]	; (8011560 <_strtod_l+0x880>)
 8011296:	07f2      	lsls	r2, r6, #31
 8011298:	d504      	bpl.n	80112a4 <_strtod_l+0x5c4>
 801129a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801129e:	f7ef f933 	bl	8000508 <__aeabi_dmul>
 80112a2:	2301      	movs	r3, #1
 80112a4:	1076      	asrs	r6, r6, #1
 80112a6:	f107 0708 	add.w	r7, r7, #8
 80112aa:	d1f4      	bne.n	8011296 <_strtod_l+0x5b6>
 80112ac:	b10b      	cbz	r3, 80112b2 <_strtod_l+0x5d2>
 80112ae:	4680      	mov	r8, r0
 80112b0:	4689      	mov	r9, r1
 80112b2:	9b05      	ldr	r3, [sp, #20]
 80112b4:	b1bb      	cbz	r3, 80112e6 <_strtod_l+0x606>
 80112b6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80112ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80112be:	2b00      	cmp	r3, #0
 80112c0:	4649      	mov	r1, r9
 80112c2:	dd10      	ble.n	80112e6 <_strtod_l+0x606>
 80112c4:	2b1f      	cmp	r3, #31
 80112c6:	f340 812b 	ble.w	8011520 <_strtod_l+0x840>
 80112ca:	2b34      	cmp	r3, #52	; 0x34
 80112cc:	bfd8      	it	le
 80112ce:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80112d2:	f04f 0800 	mov.w	r8, #0
 80112d6:	bfcf      	iteee	gt
 80112d8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80112dc:	3b20      	suble	r3, #32
 80112de:	fa02 f303 	lslle.w	r3, r2, r3
 80112e2:	ea03 0901 	andle.w	r9, r3, r1
 80112e6:	2200      	movs	r2, #0
 80112e8:	2300      	movs	r3, #0
 80112ea:	4640      	mov	r0, r8
 80112ec:	4649      	mov	r1, r9
 80112ee:	f7ef fb73 	bl	80009d8 <__aeabi_dcmpeq>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d1a1      	bne.n	801123a <_strtod_l+0x55a>
 80112f6:	9b06      	ldr	r3, [sp, #24]
 80112f8:	465a      	mov	r2, fp
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	4650      	mov	r0, sl
 80112fe:	4623      	mov	r3, r4
 8011300:	9908      	ldr	r1, [sp, #32]
 8011302:	f001 fe63 	bl	8012fcc <__s2b>
 8011306:	9008      	str	r0, [sp, #32]
 8011308:	2800      	cmp	r0, #0
 801130a:	f43f af24 	beq.w	8011156 <_strtod_l+0x476>
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	f04f 0b00 	mov.w	fp, #0
 8011314:	1b5d      	subs	r5, r3, r5
 8011316:	9b07      	ldr	r3, [sp, #28]
 8011318:	f8cd b010 	str.w	fp, [sp, #16]
 801131c:	2b00      	cmp	r3, #0
 801131e:	bfb4      	ite	lt
 8011320:	462b      	movlt	r3, r5
 8011322:	2300      	movge	r3, #0
 8011324:	930e      	str	r3, [sp, #56]	; 0x38
 8011326:	9b07      	ldr	r3, [sp, #28]
 8011328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801132c:	9316      	str	r3, [sp, #88]	; 0x58
 801132e:	9b08      	ldr	r3, [sp, #32]
 8011330:	4650      	mov	r0, sl
 8011332:	6859      	ldr	r1, [r3, #4]
 8011334:	f001 fd9e 	bl	8012e74 <_Balloc>
 8011338:	9006      	str	r0, [sp, #24]
 801133a:	2800      	cmp	r0, #0
 801133c:	f43f af13 	beq.w	8011166 <_strtod_l+0x486>
 8011340:	9b08      	ldr	r3, [sp, #32]
 8011342:	300c      	adds	r0, #12
 8011344:	691a      	ldr	r2, [r3, #16]
 8011346:	f103 010c 	add.w	r1, r3, #12
 801134a:	3202      	adds	r2, #2
 801134c:	0092      	lsls	r2, r2, #2
 801134e:	f7fe fc49 	bl	800fbe4 <memcpy>
 8011352:	ab1e      	add	r3, sp, #120	; 0x78
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	ab1d      	add	r3, sp, #116	; 0x74
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	4642      	mov	r2, r8
 801135c:	464b      	mov	r3, r9
 801135e:	4650      	mov	r0, sl
 8011360:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8011364:	f002 f970 	bl	8013648 <__d2b>
 8011368:	901c      	str	r0, [sp, #112]	; 0x70
 801136a:	2800      	cmp	r0, #0
 801136c:	f43f aefb 	beq.w	8011166 <_strtod_l+0x486>
 8011370:	2101      	movs	r1, #1
 8011372:	4650      	mov	r0, sl
 8011374:	f001 fec2 	bl	80130fc <__i2b>
 8011378:	4603      	mov	r3, r0
 801137a:	9004      	str	r0, [sp, #16]
 801137c:	2800      	cmp	r0, #0
 801137e:	f43f aef2 	beq.w	8011166 <_strtod_l+0x486>
 8011382:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8011384:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011386:	2d00      	cmp	r5, #0
 8011388:	bfab      	itete	ge
 801138a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801138c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801138e:	18ee      	addge	r6, r5, r3
 8011390:	1b5c      	sublt	r4, r3, r5
 8011392:	9b05      	ldr	r3, [sp, #20]
 8011394:	bfa8      	it	ge
 8011396:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8011398:	eba5 0503 	sub.w	r5, r5, r3
 801139c:	4415      	add	r5, r2
 801139e:	4b71      	ldr	r3, [pc, #452]	; (8011564 <_strtod_l+0x884>)
 80113a0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80113a4:	bfb8      	it	lt
 80113a6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80113a8:	429d      	cmp	r5, r3
 80113aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113ae:	f280 80c9 	bge.w	8011544 <_strtod_l+0x864>
 80113b2:	1b5b      	subs	r3, r3, r5
 80113b4:	2b1f      	cmp	r3, #31
 80113b6:	f04f 0701 	mov.w	r7, #1
 80113ba:	eba2 0203 	sub.w	r2, r2, r3
 80113be:	f300 80b6 	bgt.w	801152e <_strtod_l+0x84e>
 80113c2:	2500      	movs	r5, #0
 80113c4:	fa07 f303 	lsl.w	r3, r7, r3
 80113c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80113ca:	18b7      	adds	r7, r6, r2
 80113cc:	9b05      	ldr	r3, [sp, #20]
 80113ce:	42be      	cmp	r6, r7
 80113d0:	4414      	add	r4, r2
 80113d2:	441c      	add	r4, r3
 80113d4:	4633      	mov	r3, r6
 80113d6:	bfa8      	it	ge
 80113d8:	463b      	movge	r3, r7
 80113da:	42a3      	cmp	r3, r4
 80113dc:	bfa8      	it	ge
 80113de:	4623      	movge	r3, r4
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	bfc2      	ittt	gt
 80113e4:	1aff      	subgt	r7, r7, r3
 80113e6:	1ae4      	subgt	r4, r4, r3
 80113e8:	1af6      	subgt	r6, r6, r3
 80113ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	dd17      	ble.n	8011420 <_strtod_l+0x740>
 80113f0:	461a      	mov	r2, r3
 80113f2:	4650      	mov	r0, sl
 80113f4:	9904      	ldr	r1, [sp, #16]
 80113f6:	f001 ff3b 	bl	8013270 <__pow5mult>
 80113fa:	9004      	str	r0, [sp, #16]
 80113fc:	2800      	cmp	r0, #0
 80113fe:	f43f aeb2 	beq.w	8011166 <_strtod_l+0x486>
 8011402:	4601      	mov	r1, r0
 8011404:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011406:	4650      	mov	r0, sl
 8011408:	f001 fe8e 	bl	8013128 <__multiply>
 801140c:	9009      	str	r0, [sp, #36]	; 0x24
 801140e:	2800      	cmp	r0, #0
 8011410:	f43f aea9 	beq.w	8011166 <_strtod_l+0x486>
 8011414:	4650      	mov	r0, sl
 8011416:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011418:	f001 fd6c 	bl	8012ef4 <_Bfree>
 801141c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801141e:	931c      	str	r3, [sp, #112]	; 0x70
 8011420:	2f00      	cmp	r7, #0
 8011422:	f300 8093 	bgt.w	801154c <_strtod_l+0x86c>
 8011426:	9b07      	ldr	r3, [sp, #28]
 8011428:	2b00      	cmp	r3, #0
 801142a:	dd08      	ble.n	801143e <_strtod_l+0x75e>
 801142c:	4650      	mov	r0, sl
 801142e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011430:	9906      	ldr	r1, [sp, #24]
 8011432:	f001 ff1d 	bl	8013270 <__pow5mult>
 8011436:	9006      	str	r0, [sp, #24]
 8011438:	2800      	cmp	r0, #0
 801143a:	f43f ae94 	beq.w	8011166 <_strtod_l+0x486>
 801143e:	2c00      	cmp	r4, #0
 8011440:	dd08      	ble.n	8011454 <_strtod_l+0x774>
 8011442:	4622      	mov	r2, r4
 8011444:	4650      	mov	r0, sl
 8011446:	9906      	ldr	r1, [sp, #24]
 8011448:	f001 ff6c 	bl	8013324 <__lshift>
 801144c:	9006      	str	r0, [sp, #24]
 801144e:	2800      	cmp	r0, #0
 8011450:	f43f ae89 	beq.w	8011166 <_strtod_l+0x486>
 8011454:	2e00      	cmp	r6, #0
 8011456:	dd08      	ble.n	801146a <_strtod_l+0x78a>
 8011458:	4632      	mov	r2, r6
 801145a:	4650      	mov	r0, sl
 801145c:	9904      	ldr	r1, [sp, #16]
 801145e:	f001 ff61 	bl	8013324 <__lshift>
 8011462:	9004      	str	r0, [sp, #16]
 8011464:	2800      	cmp	r0, #0
 8011466:	f43f ae7e 	beq.w	8011166 <_strtod_l+0x486>
 801146a:	4650      	mov	r0, sl
 801146c:	9a06      	ldr	r2, [sp, #24]
 801146e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011470:	f001 ffe0 	bl	8013434 <__mdiff>
 8011474:	4683      	mov	fp, r0
 8011476:	2800      	cmp	r0, #0
 8011478:	f43f ae75 	beq.w	8011166 <_strtod_l+0x486>
 801147c:	2400      	movs	r4, #0
 801147e:	68c3      	ldr	r3, [r0, #12]
 8011480:	9904      	ldr	r1, [sp, #16]
 8011482:	60c4      	str	r4, [r0, #12]
 8011484:	930d      	str	r3, [sp, #52]	; 0x34
 8011486:	f001 ffb9 	bl	80133fc <__mcmp>
 801148a:	42a0      	cmp	r0, r4
 801148c:	da70      	bge.n	8011570 <_strtod_l+0x890>
 801148e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011490:	ea53 0308 	orrs.w	r3, r3, r8
 8011494:	f040 8096 	bne.w	80115c4 <_strtod_l+0x8e4>
 8011498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801149c:	2b00      	cmp	r3, #0
 801149e:	f040 8091 	bne.w	80115c4 <_strtod_l+0x8e4>
 80114a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114a6:	0d1b      	lsrs	r3, r3, #20
 80114a8:	051b      	lsls	r3, r3, #20
 80114aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114ae:	f240 8089 	bls.w	80115c4 <_strtod_l+0x8e4>
 80114b2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80114b6:	b923      	cbnz	r3, 80114c2 <_strtod_l+0x7e2>
 80114b8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	f340 8081 	ble.w	80115c4 <_strtod_l+0x8e4>
 80114c2:	4659      	mov	r1, fp
 80114c4:	2201      	movs	r2, #1
 80114c6:	4650      	mov	r0, sl
 80114c8:	f001 ff2c 	bl	8013324 <__lshift>
 80114cc:	9904      	ldr	r1, [sp, #16]
 80114ce:	4683      	mov	fp, r0
 80114d0:	f001 ff94 	bl	80133fc <__mcmp>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	dd75      	ble.n	80115c4 <_strtod_l+0x8e4>
 80114d8:	9905      	ldr	r1, [sp, #20]
 80114da:	464b      	mov	r3, r9
 80114dc:	4a22      	ldr	r2, [pc, #136]	; (8011568 <_strtod_l+0x888>)
 80114de:	2900      	cmp	r1, #0
 80114e0:	f000 8091 	beq.w	8011606 <_strtod_l+0x926>
 80114e4:	ea02 0109 	and.w	r1, r2, r9
 80114e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80114ec:	f300 808b 	bgt.w	8011606 <_strtod_l+0x926>
 80114f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80114f4:	f77f aea9 	ble.w	801124a <_strtod_l+0x56a>
 80114f8:	2300      	movs	r3, #0
 80114fa:	4a1c      	ldr	r2, [pc, #112]	; (801156c <_strtod_l+0x88c>)
 80114fc:	4640      	mov	r0, r8
 80114fe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011502:	4649      	mov	r1, r9
 8011504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011508:	f7ee fffe 	bl	8000508 <__aeabi_dmul>
 801150c:	460b      	mov	r3, r1
 801150e:	4303      	orrs	r3, r0
 8011510:	bf08      	it	eq
 8011512:	2322      	moveq	r3, #34	; 0x22
 8011514:	4680      	mov	r8, r0
 8011516:	4689      	mov	r9, r1
 8011518:	bf08      	it	eq
 801151a:	f8ca 3000 	streq.w	r3, [sl]
 801151e:	e62d      	b.n	801117c <_strtod_l+0x49c>
 8011520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011524:	fa02 f303 	lsl.w	r3, r2, r3
 8011528:	ea03 0808 	and.w	r8, r3, r8
 801152c:	e6db      	b.n	80112e6 <_strtod_l+0x606>
 801152e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8011532:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8011536:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801153a:	35e2      	adds	r5, #226	; 0xe2
 801153c:	fa07 f505 	lsl.w	r5, r7, r5
 8011540:	970f      	str	r7, [sp, #60]	; 0x3c
 8011542:	e742      	b.n	80113ca <_strtod_l+0x6ea>
 8011544:	2301      	movs	r3, #1
 8011546:	2500      	movs	r5, #0
 8011548:	930f      	str	r3, [sp, #60]	; 0x3c
 801154a:	e73e      	b.n	80113ca <_strtod_l+0x6ea>
 801154c:	463a      	mov	r2, r7
 801154e:	4650      	mov	r0, sl
 8011550:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011552:	f001 fee7 	bl	8013324 <__lshift>
 8011556:	901c      	str	r0, [sp, #112]	; 0x70
 8011558:	2800      	cmp	r0, #0
 801155a:	f47f af64 	bne.w	8011426 <_strtod_l+0x746>
 801155e:	e602      	b.n	8011166 <_strtod_l+0x486>
 8011560:	08015080 	.word	0x08015080
 8011564:	fffffc02 	.word	0xfffffc02
 8011568:	7ff00000 	.word	0x7ff00000
 801156c:	39500000 	.word	0x39500000
 8011570:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011574:	d166      	bne.n	8011644 <_strtod_l+0x964>
 8011576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801157c:	b35a      	cbz	r2, 80115d6 <_strtod_l+0x8f6>
 801157e:	4a9c      	ldr	r2, [pc, #624]	; (80117f0 <_strtod_l+0xb10>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d12c      	bne.n	80115de <_strtod_l+0x8fe>
 8011584:	9b05      	ldr	r3, [sp, #20]
 8011586:	4640      	mov	r0, r8
 8011588:	b303      	cbz	r3, 80115cc <_strtod_l+0x8ec>
 801158a:	464b      	mov	r3, r9
 801158c:	4a99      	ldr	r2, [pc, #612]	; (80117f4 <_strtod_l+0xb14>)
 801158e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011592:	401a      	ands	r2, r3
 8011594:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011598:	d81b      	bhi.n	80115d2 <_strtod_l+0x8f2>
 801159a:	0d12      	lsrs	r2, r2, #20
 801159c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80115a0:	fa01 f303 	lsl.w	r3, r1, r3
 80115a4:	4298      	cmp	r0, r3
 80115a6:	d11a      	bne.n	80115de <_strtod_l+0x8fe>
 80115a8:	4b93      	ldr	r3, [pc, #588]	; (80117f8 <_strtod_l+0xb18>)
 80115aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d102      	bne.n	80115b6 <_strtod_l+0x8d6>
 80115b0:	3001      	adds	r0, #1
 80115b2:	f43f add8 	beq.w	8011166 <_strtod_l+0x486>
 80115b6:	f04f 0800 	mov.w	r8, #0
 80115ba:	4b8e      	ldr	r3, [pc, #568]	; (80117f4 <_strtod_l+0xb14>)
 80115bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115be:	401a      	ands	r2, r3
 80115c0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80115c4:	9b05      	ldr	r3, [sp, #20]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d196      	bne.n	80114f8 <_strtod_l+0x818>
 80115ca:	e5d7      	b.n	801117c <_strtod_l+0x49c>
 80115cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115d0:	e7e8      	b.n	80115a4 <_strtod_l+0x8c4>
 80115d2:	460b      	mov	r3, r1
 80115d4:	e7e6      	b.n	80115a4 <_strtod_l+0x8c4>
 80115d6:	ea53 0308 	orrs.w	r3, r3, r8
 80115da:	f43f af7d 	beq.w	80114d8 <_strtod_l+0x7f8>
 80115de:	b1e5      	cbz	r5, 801161a <_strtod_l+0x93a>
 80115e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e2:	421d      	tst	r5, r3
 80115e4:	d0ee      	beq.n	80115c4 <_strtod_l+0x8e4>
 80115e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115e8:	4640      	mov	r0, r8
 80115ea:	4649      	mov	r1, r9
 80115ec:	9a05      	ldr	r2, [sp, #20]
 80115ee:	b1c3      	cbz	r3, 8011622 <_strtod_l+0x942>
 80115f0:	f7ff fb54 	bl	8010c9c <sulp>
 80115f4:	4602      	mov	r2, r0
 80115f6:	460b      	mov	r3, r1
 80115f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80115fc:	f7ee fdce 	bl	800019c <__adddf3>
 8011600:	4680      	mov	r8, r0
 8011602:	4689      	mov	r9, r1
 8011604:	e7de      	b.n	80115c4 <_strtod_l+0x8e4>
 8011606:	4013      	ands	r3, r2
 8011608:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801160c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011610:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011614:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011618:	e7d4      	b.n	80115c4 <_strtod_l+0x8e4>
 801161a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801161c:	ea13 0f08 	tst.w	r3, r8
 8011620:	e7e0      	b.n	80115e4 <_strtod_l+0x904>
 8011622:	f7ff fb3b 	bl	8010c9c <sulp>
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801162e:	f7ee fdb3 	bl	8000198 <__aeabi_dsub>
 8011632:	2200      	movs	r2, #0
 8011634:	2300      	movs	r3, #0
 8011636:	4680      	mov	r8, r0
 8011638:	4689      	mov	r9, r1
 801163a:	f7ef f9cd 	bl	80009d8 <__aeabi_dcmpeq>
 801163e:	2800      	cmp	r0, #0
 8011640:	d0c0      	beq.n	80115c4 <_strtod_l+0x8e4>
 8011642:	e602      	b.n	801124a <_strtod_l+0x56a>
 8011644:	4658      	mov	r0, fp
 8011646:	9904      	ldr	r1, [sp, #16]
 8011648:	f002 f85a 	bl	8013700 <__ratio>
 801164c:	2200      	movs	r2, #0
 801164e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011652:	4606      	mov	r6, r0
 8011654:	460f      	mov	r7, r1
 8011656:	f7ef f9d3 	bl	8000a00 <__aeabi_dcmple>
 801165a:	2800      	cmp	r0, #0
 801165c:	d075      	beq.n	801174a <_strtod_l+0xa6a>
 801165e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011660:	2b00      	cmp	r3, #0
 8011662:	d047      	beq.n	80116f4 <_strtod_l+0xa14>
 8011664:	2600      	movs	r6, #0
 8011666:	4f65      	ldr	r7, [pc, #404]	; (80117fc <_strtod_l+0xb1c>)
 8011668:	4d64      	ldr	r5, [pc, #400]	; (80117fc <_strtod_l+0xb1c>)
 801166a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801166c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011670:	0d1b      	lsrs	r3, r3, #20
 8011672:	051b      	lsls	r3, r3, #20
 8011674:	930f      	str	r3, [sp, #60]	; 0x3c
 8011676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011678:	4b61      	ldr	r3, [pc, #388]	; (8011800 <_strtod_l+0xb20>)
 801167a:	429a      	cmp	r2, r3
 801167c:	f040 80c8 	bne.w	8011810 <_strtod_l+0xb30>
 8011680:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011684:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801168a:	4640      	mov	r0, r8
 801168c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8011690:	4649      	mov	r1, r9
 8011692:	f001 ff5f 	bl	8013554 <__ulp>
 8011696:	4602      	mov	r2, r0
 8011698:	460b      	mov	r3, r1
 801169a:	4630      	mov	r0, r6
 801169c:	4639      	mov	r1, r7
 801169e:	f7ee ff33 	bl	8000508 <__aeabi_dmul>
 80116a2:	4642      	mov	r2, r8
 80116a4:	464b      	mov	r3, r9
 80116a6:	f7ee fd79 	bl	800019c <__adddf3>
 80116aa:	460b      	mov	r3, r1
 80116ac:	4951      	ldr	r1, [pc, #324]	; (80117f4 <_strtod_l+0xb14>)
 80116ae:	4a55      	ldr	r2, [pc, #340]	; (8011804 <_strtod_l+0xb24>)
 80116b0:	4019      	ands	r1, r3
 80116b2:	4291      	cmp	r1, r2
 80116b4:	4680      	mov	r8, r0
 80116b6:	d95e      	bls.n	8011776 <_strtod_l+0xa96>
 80116b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80116be:	4293      	cmp	r3, r2
 80116c0:	d103      	bne.n	80116ca <_strtod_l+0x9ea>
 80116c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116c4:	3301      	adds	r3, #1
 80116c6:	f43f ad4e 	beq.w	8011166 <_strtod_l+0x486>
 80116ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80116ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80117f8 <_strtod_l+0xb18>
 80116d2:	4650      	mov	r0, sl
 80116d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80116d6:	f001 fc0d 	bl	8012ef4 <_Bfree>
 80116da:	4650      	mov	r0, sl
 80116dc:	9906      	ldr	r1, [sp, #24]
 80116de:	f001 fc09 	bl	8012ef4 <_Bfree>
 80116e2:	4650      	mov	r0, sl
 80116e4:	9904      	ldr	r1, [sp, #16]
 80116e6:	f001 fc05 	bl	8012ef4 <_Bfree>
 80116ea:	4659      	mov	r1, fp
 80116ec:	4650      	mov	r0, sl
 80116ee:	f001 fc01 	bl	8012ef4 <_Bfree>
 80116f2:	e61c      	b.n	801132e <_strtod_l+0x64e>
 80116f4:	f1b8 0f00 	cmp.w	r8, #0
 80116f8:	d119      	bne.n	801172e <_strtod_l+0xa4e>
 80116fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011700:	b9e3      	cbnz	r3, 801173c <_strtod_l+0xa5c>
 8011702:	2200      	movs	r2, #0
 8011704:	4630      	mov	r0, r6
 8011706:	4639      	mov	r1, r7
 8011708:	4b3c      	ldr	r3, [pc, #240]	; (80117fc <_strtod_l+0xb1c>)
 801170a:	f7ef f96f 	bl	80009ec <__aeabi_dcmplt>
 801170e:	b9c8      	cbnz	r0, 8011744 <_strtod_l+0xa64>
 8011710:	2200      	movs	r2, #0
 8011712:	4630      	mov	r0, r6
 8011714:	4639      	mov	r1, r7
 8011716:	4b3c      	ldr	r3, [pc, #240]	; (8011808 <_strtod_l+0xb28>)
 8011718:	f7ee fef6 	bl	8000508 <__aeabi_dmul>
 801171c:	4604      	mov	r4, r0
 801171e:	460d      	mov	r5, r1
 8011720:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011724:	9418      	str	r4, [sp, #96]	; 0x60
 8011726:	9319      	str	r3, [sp, #100]	; 0x64
 8011728:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801172c:	e79d      	b.n	801166a <_strtod_l+0x98a>
 801172e:	f1b8 0f01 	cmp.w	r8, #1
 8011732:	d103      	bne.n	801173c <_strtod_l+0xa5c>
 8011734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011736:	2b00      	cmp	r3, #0
 8011738:	f43f ad87 	beq.w	801124a <_strtod_l+0x56a>
 801173c:	2600      	movs	r6, #0
 801173e:	2400      	movs	r4, #0
 8011740:	4f32      	ldr	r7, [pc, #200]	; (801180c <_strtod_l+0xb2c>)
 8011742:	e791      	b.n	8011668 <_strtod_l+0x988>
 8011744:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8011746:	4d30      	ldr	r5, [pc, #192]	; (8011808 <_strtod_l+0xb28>)
 8011748:	e7ea      	b.n	8011720 <_strtod_l+0xa40>
 801174a:	4b2f      	ldr	r3, [pc, #188]	; (8011808 <_strtod_l+0xb28>)
 801174c:	2200      	movs	r2, #0
 801174e:	4630      	mov	r0, r6
 8011750:	4639      	mov	r1, r7
 8011752:	f7ee fed9 	bl	8000508 <__aeabi_dmul>
 8011756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011758:	4604      	mov	r4, r0
 801175a:	460d      	mov	r5, r1
 801175c:	b933      	cbnz	r3, 801176c <_strtod_l+0xa8c>
 801175e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011762:	9010      	str	r0, [sp, #64]	; 0x40
 8011764:	9311      	str	r3, [sp, #68]	; 0x44
 8011766:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801176a:	e77e      	b.n	801166a <_strtod_l+0x98a>
 801176c:	4602      	mov	r2, r0
 801176e:	460b      	mov	r3, r1
 8011770:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011774:	e7f7      	b.n	8011766 <_strtod_l+0xa86>
 8011776:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801177a:	9b05      	ldr	r3, [sp, #20]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1a8      	bne.n	80116d2 <_strtod_l+0x9f2>
 8011780:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011786:	0d1b      	lsrs	r3, r3, #20
 8011788:	051b      	lsls	r3, r3, #20
 801178a:	429a      	cmp	r2, r3
 801178c:	d1a1      	bne.n	80116d2 <_strtod_l+0x9f2>
 801178e:	4620      	mov	r0, r4
 8011790:	4629      	mov	r1, r5
 8011792:	f7ef fc9d 	bl	80010d0 <__aeabi_d2lz>
 8011796:	f7ee fe89 	bl	80004ac <__aeabi_l2d>
 801179a:	4602      	mov	r2, r0
 801179c:	460b      	mov	r3, r1
 801179e:	4620      	mov	r0, r4
 80117a0:	4629      	mov	r1, r5
 80117a2:	f7ee fcf9 	bl	8000198 <__aeabi_dsub>
 80117a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117ac:	ea43 0308 	orr.w	r3, r3, r8
 80117b0:	4313      	orrs	r3, r2
 80117b2:	4604      	mov	r4, r0
 80117b4:	460d      	mov	r5, r1
 80117b6:	d066      	beq.n	8011886 <_strtod_l+0xba6>
 80117b8:	a309      	add	r3, pc, #36	; (adr r3, 80117e0 <_strtod_l+0xb00>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	f7ef f915 	bl	80009ec <__aeabi_dcmplt>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	f47f acda 	bne.w	801117c <_strtod_l+0x49c>
 80117c8:	a307      	add	r3, pc, #28	; (adr r3, 80117e8 <_strtod_l+0xb08>)
 80117ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ce:	4620      	mov	r0, r4
 80117d0:	4629      	mov	r1, r5
 80117d2:	f7ef f929 	bl	8000a28 <__aeabi_dcmpgt>
 80117d6:	2800      	cmp	r0, #0
 80117d8:	f43f af7b 	beq.w	80116d2 <_strtod_l+0x9f2>
 80117dc:	e4ce      	b.n	801117c <_strtod_l+0x49c>
 80117de:	bf00      	nop
 80117e0:	94a03595 	.word	0x94a03595
 80117e4:	3fdfffff 	.word	0x3fdfffff
 80117e8:	35afe535 	.word	0x35afe535
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	000fffff 	.word	0x000fffff
 80117f4:	7ff00000 	.word	0x7ff00000
 80117f8:	7fefffff 	.word	0x7fefffff
 80117fc:	3ff00000 	.word	0x3ff00000
 8011800:	7fe00000 	.word	0x7fe00000
 8011804:	7c9fffff 	.word	0x7c9fffff
 8011808:	3fe00000 	.word	0x3fe00000
 801180c:	bff00000 	.word	0xbff00000
 8011810:	9b05      	ldr	r3, [sp, #20]
 8011812:	b313      	cbz	r3, 801185a <_strtod_l+0xb7a>
 8011814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011816:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801181a:	d81e      	bhi.n	801185a <_strtod_l+0xb7a>
 801181c:	a326      	add	r3, pc, #152	; (adr r3, 80118b8 <_strtod_l+0xbd8>)
 801181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011822:	4620      	mov	r0, r4
 8011824:	4629      	mov	r1, r5
 8011826:	f7ef f8eb 	bl	8000a00 <__aeabi_dcmple>
 801182a:	b190      	cbz	r0, 8011852 <_strtod_l+0xb72>
 801182c:	4629      	mov	r1, r5
 801182e:	4620      	mov	r0, r4
 8011830:	f7ef f942 	bl	8000ab8 <__aeabi_d2uiz>
 8011834:	2801      	cmp	r0, #1
 8011836:	bf38      	it	cc
 8011838:	2001      	movcc	r0, #1
 801183a:	f7ee fdeb 	bl	8000414 <__aeabi_ui2d>
 801183e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011840:	4604      	mov	r4, r0
 8011842:	460d      	mov	r5, r1
 8011844:	b9d3      	cbnz	r3, 801187c <_strtod_l+0xb9c>
 8011846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801184a:	9012      	str	r0, [sp, #72]	; 0x48
 801184c:	9313      	str	r3, [sp, #76]	; 0x4c
 801184e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8011852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011854:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8011858:	1a9f      	subs	r7, r3, r2
 801185a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801185e:	f001 fe79 	bl	8013554 <__ulp>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fe4d 	bl	8000508 <__aeabi_dmul>
 801186e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011872:	f7ee fc93 	bl	800019c <__adddf3>
 8011876:	4680      	mov	r8, r0
 8011878:	4689      	mov	r9, r1
 801187a:	e77e      	b.n	801177a <_strtod_l+0xa9a>
 801187c:	4602      	mov	r2, r0
 801187e:	460b      	mov	r3, r1
 8011880:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8011884:	e7e3      	b.n	801184e <_strtod_l+0xb6e>
 8011886:	a30e      	add	r3, pc, #56	; (adr r3, 80118c0 <_strtod_l+0xbe0>)
 8011888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188c:	f7ef f8ae 	bl	80009ec <__aeabi_dcmplt>
 8011890:	e7a1      	b.n	80117d6 <_strtod_l+0xaf6>
 8011892:	2300      	movs	r3, #0
 8011894:	930c      	str	r3, [sp, #48]	; 0x30
 8011896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011898:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	f7ff ba65 	b.w	8010d6a <_strtod_l+0x8a>
 80118a0:	2b65      	cmp	r3, #101	; 0x65
 80118a2:	f43f ab5c 	beq.w	8010f5e <_strtod_l+0x27e>
 80118a6:	2b45      	cmp	r3, #69	; 0x45
 80118a8:	f43f ab59 	beq.w	8010f5e <_strtod_l+0x27e>
 80118ac:	2201      	movs	r2, #1
 80118ae:	f7ff bb8d 	b.w	8010fcc <_strtod_l+0x2ec>
 80118b2:	bf00      	nop
 80118b4:	f3af 8000 	nop.w
 80118b8:	ffc00000 	.word	0xffc00000
 80118bc:	41dfffff 	.word	0x41dfffff
 80118c0:	94a03595 	.word	0x94a03595
 80118c4:	3fcfffff 	.word	0x3fcfffff

080118c8 <_strtod_r>:
 80118c8:	4b01      	ldr	r3, [pc, #4]	; (80118d0 <_strtod_r+0x8>)
 80118ca:	f7ff ba09 	b.w	8010ce0 <_strtod_l>
 80118ce:	bf00      	nop
 80118d0:	2000028c 	.word	0x2000028c

080118d4 <_strtol_l.isra.0>:
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118da:	4686      	mov	lr, r0
 80118dc:	d001      	beq.n	80118e2 <_strtol_l.isra.0+0xe>
 80118de:	2b24      	cmp	r3, #36	; 0x24
 80118e0:	d906      	bls.n	80118f0 <_strtol_l.isra.0+0x1c>
 80118e2:	f7fe f945 	bl	800fb70 <__errno>
 80118e6:	2316      	movs	r3, #22
 80118e8:	6003      	str	r3, [r0, #0]
 80118ea:	2000      	movs	r0, #0
 80118ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f0:	468c      	mov	ip, r1
 80118f2:	4e3a      	ldr	r6, [pc, #232]	; (80119dc <_strtol_l.isra.0+0x108>)
 80118f4:	4660      	mov	r0, ip
 80118f6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80118fa:	5da5      	ldrb	r5, [r4, r6]
 80118fc:	f015 0508 	ands.w	r5, r5, #8
 8011900:	d1f8      	bne.n	80118f4 <_strtol_l.isra.0+0x20>
 8011902:	2c2d      	cmp	r4, #45	; 0x2d
 8011904:	d133      	bne.n	801196e <_strtol_l.isra.0+0x9a>
 8011906:	f04f 0801 	mov.w	r8, #1
 801190a:	f89c 4000 	ldrb.w	r4, [ip]
 801190e:	f100 0c02 	add.w	ip, r0, #2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d05d      	beq.n	80119d2 <_strtol_l.isra.0+0xfe>
 8011916:	2b10      	cmp	r3, #16
 8011918:	d10c      	bne.n	8011934 <_strtol_l.isra.0+0x60>
 801191a:	2c30      	cmp	r4, #48	; 0x30
 801191c:	d10a      	bne.n	8011934 <_strtol_l.isra.0+0x60>
 801191e:	f89c 0000 	ldrb.w	r0, [ip]
 8011922:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011926:	2858      	cmp	r0, #88	; 0x58
 8011928:	d14e      	bne.n	80119c8 <_strtol_l.isra.0+0xf4>
 801192a:	2310      	movs	r3, #16
 801192c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8011930:	f10c 0c02 	add.w	ip, ip, #2
 8011934:	2500      	movs	r5, #0
 8011936:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801193a:	3f01      	subs	r7, #1
 801193c:	fbb7 f9f3 	udiv	r9, r7, r3
 8011940:	4628      	mov	r0, r5
 8011942:	fb03 7a19 	mls	sl, r3, r9, r7
 8011946:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801194a:	2e09      	cmp	r6, #9
 801194c:	d818      	bhi.n	8011980 <_strtol_l.isra.0+0xac>
 801194e:	4634      	mov	r4, r6
 8011950:	42a3      	cmp	r3, r4
 8011952:	dd24      	ble.n	801199e <_strtol_l.isra.0+0xca>
 8011954:	2d00      	cmp	r5, #0
 8011956:	db1f      	blt.n	8011998 <_strtol_l.isra.0+0xc4>
 8011958:	4581      	cmp	r9, r0
 801195a:	d31d      	bcc.n	8011998 <_strtol_l.isra.0+0xc4>
 801195c:	d101      	bne.n	8011962 <_strtol_l.isra.0+0x8e>
 801195e:	45a2      	cmp	sl, r4
 8011960:	db1a      	blt.n	8011998 <_strtol_l.isra.0+0xc4>
 8011962:	2501      	movs	r5, #1
 8011964:	fb00 4003 	mla	r0, r0, r3, r4
 8011968:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801196c:	e7eb      	b.n	8011946 <_strtol_l.isra.0+0x72>
 801196e:	2c2b      	cmp	r4, #43	; 0x2b
 8011970:	bf08      	it	eq
 8011972:	f89c 4000 	ldrbeq.w	r4, [ip]
 8011976:	46a8      	mov	r8, r5
 8011978:	bf08      	it	eq
 801197a:	f100 0c02 	addeq.w	ip, r0, #2
 801197e:	e7c8      	b.n	8011912 <_strtol_l.isra.0+0x3e>
 8011980:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8011984:	2e19      	cmp	r6, #25
 8011986:	d801      	bhi.n	801198c <_strtol_l.isra.0+0xb8>
 8011988:	3c37      	subs	r4, #55	; 0x37
 801198a:	e7e1      	b.n	8011950 <_strtol_l.isra.0+0x7c>
 801198c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8011990:	2e19      	cmp	r6, #25
 8011992:	d804      	bhi.n	801199e <_strtol_l.isra.0+0xca>
 8011994:	3c57      	subs	r4, #87	; 0x57
 8011996:	e7db      	b.n	8011950 <_strtol_l.isra.0+0x7c>
 8011998:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801199c:	e7e4      	b.n	8011968 <_strtol_l.isra.0+0x94>
 801199e:	2d00      	cmp	r5, #0
 80119a0:	da08      	bge.n	80119b4 <_strtol_l.isra.0+0xe0>
 80119a2:	2322      	movs	r3, #34	; 0x22
 80119a4:	4638      	mov	r0, r7
 80119a6:	f8ce 3000 	str.w	r3, [lr]
 80119aa:	2a00      	cmp	r2, #0
 80119ac:	d09e      	beq.n	80118ec <_strtol_l.isra.0+0x18>
 80119ae:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80119b2:	e007      	b.n	80119c4 <_strtol_l.isra.0+0xf0>
 80119b4:	f1b8 0f00 	cmp.w	r8, #0
 80119b8:	d000      	beq.n	80119bc <_strtol_l.isra.0+0xe8>
 80119ba:	4240      	negs	r0, r0
 80119bc:	2a00      	cmp	r2, #0
 80119be:	d095      	beq.n	80118ec <_strtol_l.isra.0+0x18>
 80119c0:	2d00      	cmp	r5, #0
 80119c2:	d1f4      	bne.n	80119ae <_strtol_l.isra.0+0xda>
 80119c4:	6011      	str	r1, [r2, #0]
 80119c6:	e791      	b.n	80118ec <_strtol_l.isra.0+0x18>
 80119c8:	2430      	movs	r4, #48	; 0x30
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d1b2      	bne.n	8011934 <_strtol_l.isra.0+0x60>
 80119ce:	2308      	movs	r3, #8
 80119d0:	e7b0      	b.n	8011934 <_strtol_l.isra.0+0x60>
 80119d2:	2c30      	cmp	r4, #48	; 0x30
 80119d4:	d0a3      	beq.n	801191e <_strtol_l.isra.0+0x4a>
 80119d6:	230a      	movs	r3, #10
 80119d8:	e7ac      	b.n	8011934 <_strtol_l.isra.0+0x60>
 80119da:	bf00      	nop
 80119dc:	080150a9 	.word	0x080150a9

080119e0 <_strtol_r>:
 80119e0:	f7ff bf78 	b.w	80118d4 <_strtol_l.isra.0>

080119e4 <_write_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4604      	mov	r4, r0
 80119e8:	4608      	mov	r0, r1
 80119ea:	4611      	mov	r1, r2
 80119ec:	2200      	movs	r2, #0
 80119ee:	4d05      	ldr	r5, [pc, #20]	; (8011a04 <_write_r+0x20>)
 80119f0:	602a      	str	r2, [r5, #0]
 80119f2:	461a      	mov	r2, r3
 80119f4:	f7f3 fa6c 	bl	8004ed0 <_write>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_write_r+0x1e>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_write_r+0x1e>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	20001d4c 	.word	0x20001d4c

08011a08 <_close_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	4d05      	ldr	r5, [pc, #20]	; (8011a24 <_close_r+0x1c>)
 8011a0e:	4604      	mov	r4, r0
 8011a10:	4608      	mov	r0, r1
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	f7f3 fa78 	bl	8004f08 <_close>
 8011a18:	1c43      	adds	r3, r0, #1
 8011a1a:	d102      	bne.n	8011a22 <_close_r+0x1a>
 8011a1c:	682b      	ldr	r3, [r5, #0]
 8011a1e:	b103      	cbz	r3, 8011a22 <_close_r+0x1a>
 8011a20:	6023      	str	r3, [r4, #0]
 8011a22:	bd38      	pop	{r3, r4, r5, pc}
 8011a24:	20001d4c 	.word	0x20001d4c

08011a28 <quorem>:
 8011a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	6903      	ldr	r3, [r0, #16]
 8011a2e:	690c      	ldr	r4, [r1, #16]
 8011a30:	4607      	mov	r7, r0
 8011a32:	42a3      	cmp	r3, r4
 8011a34:	f2c0 8083 	blt.w	8011b3e <quorem+0x116>
 8011a38:	3c01      	subs	r4, #1
 8011a3a:	f100 0514 	add.w	r5, r0, #20
 8011a3e:	f101 0814 	add.w	r8, r1, #20
 8011a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a50:	3301      	adds	r3, #1
 8011a52:	429a      	cmp	r2, r3
 8011a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a60:	d332      	bcc.n	8011ac8 <quorem+0xa0>
 8011a62:	f04f 0e00 	mov.w	lr, #0
 8011a66:	4640      	mov	r0, r8
 8011a68:	46ac      	mov	ip, r5
 8011a6a:	46f2      	mov	sl, lr
 8011a6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a70:	b293      	uxth	r3, r2
 8011a72:	fb06 e303 	mla	r3, r6, r3, lr
 8011a76:	0c12      	lsrs	r2, r2, #16
 8011a78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a7c:	fb06 e202 	mla	r2, r6, r2, lr
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	ebaa 0303 	sub.w	r3, sl, r3
 8011a86:	f8dc a000 	ldr.w	sl, [ip]
 8011a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a8e:	fa1f fa8a 	uxth.w	sl, sl
 8011a92:	4453      	add	r3, sl
 8011a94:	fa1f fa82 	uxth.w	sl, r2
 8011a98:	f8dc 2000 	ldr.w	r2, [ip]
 8011a9c:	4581      	cmp	r9, r0
 8011a9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011aa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ab0:	f84c 3b04 	str.w	r3, [ip], #4
 8011ab4:	d2da      	bcs.n	8011a6c <quorem+0x44>
 8011ab6:	f855 300b 	ldr.w	r3, [r5, fp]
 8011aba:	b92b      	cbnz	r3, 8011ac8 <quorem+0xa0>
 8011abc:	9b01      	ldr	r3, [sp, #4]
 8011abe:	3b04      	subs	r3, #4
 8011ac0:	429d      	cmp	r5, r3
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	d32f      	bcc.n	8011b26 <quorem+0xfe>
 8011ac6:	613c      	str	r4, [r7, #16]
 8011ac8:	4638      	mov	r0, r7
 8011aca:	f001 fc97 	bl	80133fc <__mcmp>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	db25      	blt.n	8011b1e <quorem+0xf6>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	f04f 0c00 	mov.w	ip, #0
 8011ad8:	3601      	adds	r6, #1
 8011ada:	f858 1b04 	ldr.w	r1, [r8], #4
 8011ade:	f8d0 e000 	ldr.w	lr, [r0]
 8011ae2:	b28b      	uxth	r3, r1
 8011ae4:	ebac 0303 	sub.w	r3, ip, r3
 8011ae8:	fa1f f28e 	uxth.w	r2, lr
 8011aec:	4413      	add	r3, r2
 8011aee:	0c0a      	lsrs	r2, r1, #16
 8011af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011afe:	45c1      	cmp	r9, r8
 8011b00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011b04:	f840 3b04 	str.w	r3, [r0], #4
 8011b08:	d2e7      	bcs.n	8011ada <quorem+0xb2>
 8011b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b12:	b922      	cbnz	r2, 8011b1e <quorem+0xf6>
 8011b14:	3b04      	subs	r3, #4
 8011b16:	429d      	cmp	r5, r3
 8011b18:	461a      	mov	r2, r3
 8011b1a:	d30a      	bcc.n	8011b32 <quorem+0x10a>
 8011b1c:	613c      	str	r4, [r7, #16]
 8011b1e:	4630      	mov	r0, r6
 8011b20:	b003      	add	sp, #12
 8011b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b26:	6812      	ldr	r2, [r2, #0]
 8011b28:	3b04      	subs	r3, #4
 8011b2a:	2a00      	cmp	r2, #0
 8011b2c:	d1cb      	bne.n	8011ac6 <quorem+0x9e>
 8011b2e:	3c01      	subs	r4, #1
 8011b30:	e7c6      	b.n	8011ac0 <quorem+0x98>
 8011b32:	6812      	ldr	r2, [r2, #0]
 8011b34:	3b04      	subs	r3, #4
 8011b36:	2a00      	cmp	r2, #0
 8011b38:	d1f0      	bne.n	8011b1c <quorem+0xf4>
 8011b3a:	3c01      	subs	r4, #1
 8011b3c:	e7eb      	b.n	8011b16 <quorem+0xee>
 8011b3e:	2000      	movs	r0, #0
 8011b40:	e7ee      	b.n	8011b20 <quorem+0xf8>
 8011b42:	0000      	movs	r0, r0
 8011b44:	0000      	movs	r0, r0
	...

08011b48 <_dtoa_r>:
 8011b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	4616      	mov	r6, r2
 8011b4e:	461f      	mov	r7, r3
 8011b50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011b52:	b099      	sub	sp, #100	; 0x64
 8011b54:	4605      	mov	r5, r0
 8011b56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011b5e:	b974      	cbnz	r4, 8011b7e <_dtoa_r+0x36>
 8011b60:	2010      	movs	r0, #16
 8011b62:	f7fe f82f 	bl	800fbc4 <malloc>
 8011b66:	4602      	mov	r2, r0
 8011b68:	6268      	str	r0, [r5, #36]	; 0x24
 8011b6a:	b920      	cbnz	r0, 8011b76 <_dtoa_r+0x2e>
 8011b6c:	21ea      	movs	r1, #234	; 0xea
 8011b6e:	4bae      	ldr	r3, [pc, #696]	; (8011e28 <_dtoa_r+0x2e0>)
 8011b70:	48ae      	ldr	r0, [pc, #696]	; (8011e2c <_dtoa_r+0x2e4>)
 8011b72:	f002 fbd9 	bl	8014328 <__assert_func>
 8011b76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b7a:	6004      	str	r4, [r0, #0]
 8011b7c:	60c4      	str	r4, [r0, #12]
 8011b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b80:	6819      	ldr	r1, [r3, #0]
 8011b82:	b151      	cbz	r1, 8011b9a <_dtoa_r+0x52>
 8011b84:	685a      	ldr	r2, [r3, #4]
 8011b86:	2301      	movs	r3, #1
 8011b88:	4093      	lsls	r3, r2
 8011b8a:	604a      	str	r2, [r1, #4]
 8011b8c:	608b      	str	r3, [r1, #8]
 8011b8e:	4628      	mov	r0, r5
 8011b90:	f001 f9b0 	bl	8012ef4 <_Bfree>
 8011b94:	2200      	movs	r2, #0
 8011b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b98:	601a      	str	r2, [r3, #0]
 8011b9a:	1e3b      	subs	r3, r7, #0
 8011b9c:	bfaf      	iteee	ge
 8011b9e:	2300      	movge	r3, #0
 8011ba0:	2201      	movlt	r2, #1
 8011ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011ba6:	9305      	strlt	r3, [sp, #20]
 8011ba8:	bfa8      	it	ge
 8011baa:	f8c8 3000 	strge.w	r3, [r8]
 8011bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011bb2:	4b9f      	ldr	r3, [pc, #636]	; (8011e30 <_dtoa_r+0x2e8>)
 8011bb4:	bfb8      	it	lt
 8011bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8011bba:	ea33 0309 	bics.w	r3, r3, r9
 8011bbe:	d119      	bne.n	8011bf4 <_dtoa_r+0xac>
 8011bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011bc6:	6013      	str	r3, [r2, #0]
 8011bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011bcc:	4333      	orrs	r3, r6
 8011bce:	f000 8580 	beq.w	80126d2 <_dtoa_r+0xb8a>
 8011bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011bd4:	b953      	cbnz	r3, 8011bec <_dtoa_r+0xa4>
 8011bd6:	4b97      	ldr	r3, [pc, #604]	; (8011e34 <_dtoa_r+0x2ec>)
 8011bd8:	e022      	b.n	8011c20 <_dtoa_r+0xd8>
 8011bda:	4b97      	ldr	r3, [pc, #604]	; (8011e38 <_dtoa_r+0x2f0>)
 8011bdc:	9308      	str	r3, [sp, #32]
 8011bde:	3308      	adds	r3, #8
 8011be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011be2:	6013      	str	r3, [r2, #0]
 8011be4:	9808      	ldr	r0, [sp, #32]
 8011be6:	b019      	add	sp, #100	; 0x64
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	4b91      	ldr	r3, [pc, #580]	; (8011e34 <_dtoa_r+0x2ec>)
 8011bee:	9308      	str	r3, [sp, #32]
 8011bf0:	3303      	adds	r3, #3
 8011bf2:	e7f5      	b.n	8011be0 <_dtoa_r+0x98>
 8011bf4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011bf8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c00:	2200      	movs	r2, #0
 8011c02:	2300      	movs	r3, #0
 8011c04:	f7ee fee8 	bl	80009d8 <__aeabi_dcmpeq>
 8011c08:	4680      	mov	r8, r0
 8011c0a:	b158      	cbz	r0, 8011c24 <_dtoa_r+0xdc>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011c10:	6013      	str	r3, [r2, #0]
 8011c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f000 8559 	beq.w	80126cc <_dtoa_r+0xb84>
 8011c1a:	4888      	ldr	r0, [pc, #544]	; (8011e3c <_dtoa_r+0x2f4>)
 8011c1c:	6018      	str	r0, [r3, #0]
 8011c1e:	1e43      	subs	r3, r0, #1
 8011c20:	9308      	str	r3, [sp, #32]
 8011c22:	e7df      	b.n	8011be4 <_dtoa_r+0x9c>
 8011c24:	ab16      	add	r3, sp, #88	; 0x58
 8011c26:	9301      	str	r3, [sp, #4]
 8011c28:	ab17      	add	r3, sp, #92	; 0x5c
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011c32:	f001 fd09 	bl	8013648 <__d2b>
 8011c36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011c3a:	4682      	mov	sl, r0
 8011c3c:	2c00      	cmp	r4, #0
 8011c3e:	d07e      	beq.n	8011d3e <_dtoa_r+0x1f6>
 8011c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011c52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011c56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	4b78      	ldr	r3, [pc, #480]	; (8011e40 <_dtoa_r+0x2f8>)
 8011c5e:	f7ee fa9b 	bl	8000198 <__aeabi_dsub>
 8011c62:	a36b      	add	r3, pc, #428	; (adr r3, 8011e10 <_dtoa_r+0x2c8>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fc4e 	bl	8000508 <__aeabi_dmul>
 8011c6c:	a36a      	add	r3, pc, #424	; (adr r3, 8011e18 <_dtoa_r+0x2d0>)
 8011c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c72:	f7ee fa93 	bl	800019c <__adddf3>
 8011c76:	4606      	mov	r6, r0
 8011c78:	4620      	mov	r0, r4
 8011c7a:	460f      	mov	r7, r1
 8011c7c:	f7ee fbda 	bl	8000434 <__aeabi_i2d>
 8011c80:	a367      	add	r3, pc, #412	; (adr r3, 8011e20 <_dtoa_r+0x2d8>)
 8011c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c86:	f7ee fc3f 	bl	8000508 <__aeabi_dmul>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	4630      	mov	r0, r6
 8011c90:	4639      	mov	r1, r7
 8011c92:	f7ee fa83 	bl	800019c <__adddf3>
 8011c96:	4606      	mov	r6, r0
 8011c98:	460f      	mov	r7, r1
 8011c9a:	f7ee fee5 	bl	8000a68 <__aeabi_d2iz>
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	4681      	mov	r9, r0
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	f7ee fea0 	bl	80009ec <__aeabi_dcmplt>
 8011cac:	b148      	cbz	r0, 8011cc2 <_dtoa_r+0x17a>
 8011cae:	4648      	mov	r0, r9
 8011cb0:	f7ee fbc0 	bl	8000434 <__aeabi_i2d>
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	463b      	mov	r3, r7
 8011cb8:	f7ee fe8e 	bl	80009d8 <__aeabi_dcmpeq>
 8011cbc:	b908      	cbnz	r0, 8011cc2 <_dtoa_r+0x17a>
 8011cbe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011cc2:	f1b9 0f16 	cmp.w	r9, #22
 8011cc6:	d857      	bhi.n	8011d78 <_dtoa_r+0x230>
 8011cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ccc:	4b5d      	ldr	r3, [pc, #372]	; (8011e44 <_dtoa_r+0x2fc>)
 8011cce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	f7ee fe89 	bl	80009ec <__aeabi_dcmplt>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d04e      	beq.n	8011d7c <_dtoa_r+0x234>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ce6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ce8:	1b1c      	subs	r4, r3, r4
 8011cea:	1e63      	subs	r3, r4, #1
 8011cec:	9309      	str	r3, [sp, #36]	; 0x24
 8011cee:	bf49      	itett	mi
 8011cf0:	f1c4 0301 	rsbmi	r3, r4, #1
 8011cf4:	2300      	movpl	r3, #0
 8011cf6:	9306      	strmi	r3, [sp, #24]
 8011cf8:	2300      	movmi	r3, #0
 8011cfa:	bf54      	ite	pl
 8011cfc:	9306      	strpl	r3, [sp, #24]
 8011cfe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8011d00:	f1b9 0f00 	cmp.w	r9, #0
 8011d04:	db3c      	blt.n	8011d80 <_dtoa_r+0x238>
 8011d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011d0c:	444b      	add	r3, r9
 8011d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d10:	2300      	movs	r3, #0
 8011d12:	930a      	str	r3, [sp, #40]	; 0x28
 8011d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d16:	2b09      	cmp	r3, #9
 8011d18:	d86c      	bhi.n	8011df4 <_dtoa_r+0x2ac>
 8011d1a:	2b05      	cmp	r3, #5
 8011d1c:	bfc4      	itt	gt
 8011d1e:	3b04      	subgt	r3, #4
 8011d20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8011d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d24:	bfc8      	it	gt
 8011d26:	2400      	movgt	r4, #0
 8011d28:	f1a3 0302 	sub.w	r3, r3, #2
 8011d2c:	bfd8      	it	le
 8011d2e:	2401      	movle	r4, #1
 8011d30:	2b03      	cmp	r3, #3
 8011d32:	f200 808b 	bhi.w	8011e4c <_dtoa_r+0x304>
 8011d36:	e8df f003 	tbb	[pc, r3]
 8011d3a:	4f2d      	.short	0x4f2d
 8011d3c:	5b4d      	.short	0x5b4d
 8011d3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8011d42:	441c      	add	r4, r3
 8011d44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8011d48:	2b20      	cmp	r3, #32
 8011d4a:	bfc3      	ittte	gt
 8011d4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8011d54:	fa09 f303 	lslgt.w	r3, r9, r3
 8011d58:	f1c3 0320 	rsble	r3, r3, #32
 8011d5c:	bfc6      	itte	gt
 8011d5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d62:	4318      	orrgt	r0, r3
 8011d64:	fa06 f003 	lslle.w	r0, r6, r3
 8011d68:	f7ee fb54 	bl	8000414 <__aeabi_ui2d>
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011d72:	3c01      	subs	r4, #1
 8011d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d76:	e770      	b.n	8011c5a <_dtoa_r+0x112>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e7b3      	b.n	8011ce4 <_dtoa_r+0x19c>
 8011d7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8011d7e:	e7b2      	b.n	8011ce6 <_dtoa_r+0x19e>
 8011d80:	9b06      	ldr	r3, [sp, #24]
 8011d82:	eba3 0309 	sub.w	r3, r3, r9
 8011d86:	9306      	str	r3, [sp, #24]
 8011d88:	f1c9 0300 	rsb	r3, r9, #0
 8011d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8011d8e:	2300      	movs	r3, #0
 8011d90:	930e      	str	r3, [sp, #56]	; 0x38
 8011d92:	e7bf      	b.n	8011d14 <_dtoa_r+0x1cc>
 8011d94:	2300      	movs	r3, #0
 8011d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	dc59      	bgt.n	8011e52 <_dtoa_r+0x30a>
 8011d9e:	f04f 0b01 	mov.w	fp, #1
 8011da2:	465b      	mov	r3, fp
 8011da4:	f8cd b008 	str.w	fp, [sp, #8]
 8011da8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8011dac:	2200      	movs	r2, #0
 8011dae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011db0:	6042      	str	r2, [r0, #4]
 8011db2:	2204      	movs	r2, #4
 8011db4:	f102 0614 	add.w	r6, r2, #20
 8011db8:	429e      	cmp	r6, r3
 8011dba:	6841      	ldr	r1, [r0, #4]
 8011dbc:	d94f      	bls.n	8011e5e <_dtoa_r+0x316>
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f001 f858 	bl	8012e74 <_Balloc>
 8011dc4:	9008      	str	r0, [sp, #32]
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d14d      	bne.n	8011e66 <_dtoa_r+0x31e>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011dd0:	4b1d      	ldr	r3, [pc, #116]	; (8011e48 <_dtoa_r+0x300>)
 8011dd2:	e6cd      	b.n	8011b70 <_dtoa_r+0x28>
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e7de      	b.n	8011d96 <_dtoa_r+0x24e>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011dde:	eb09 0b03 	add.w	fp, r9, r3
 8011de2:	f10b 0301 	add.w	r3, fp, #1
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	9302      	str	r3, [sp, #8]
 8011dea:	bfb8      	it	lt
 8011dec:	2301      	movlt	r3, #1
 8011dee:	e7dd      	b.n	8011dac <_dtoa_r+0x264>
 8011df0:	2301      	movs	r3, #1
 8011df2:	e7f2      	b.n	8011dda <_dtoa_r+0x292>
 8011df4:	2401      	movs	r4, #1
 8011df6:	2300      	movs	r3, #0
 8011df8:	940b      	str	r4, [sp, #44]	; 0x2c
 8011dfa:	9322      	str	r3, [sp, #136]	; 0x88
 8011dfc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011e00:	2200      	movs	r2, #0
 8011e02:	2312      	movs	r3, #18
 8011e04:	f8cd b008 	str.w	fp, [sp, #8]
 8011e08:	9223      	str	r2, [sp, #140]	; 0x8c
 8011e0a:	e7cf      	b.n	8011dac <_dtoa_r+0x264>
 8011e0c:	f3af 8000 	nop.w
 8011e10:	636f4361 	.word	0x636f4361
 8011e14:	3fd287a7 	.word	0x3fd287a7
 8011e18:	8b60c8b3 	.word	0x8b60c8b3
 8011e1c:	3fc68a28 	.word	0x3fc68a28
 8011e20:	509f79fb 	.word	0x509f79fb
 8011e24:	3fd34413 	.word	0x3fd34413
 8011e28:	080151b6 	.word	0x080151b6
 8011e2c:	080151cd 	.word	0x080151cd
 8011e30:	7ff00000 	.word	0x7ff00000
 8011e34:	080151b2 	.word	0x080151b2
 8011e38:	080151a9 	.word	0x080151a9
 8011e3c:	08015432 	.word	0x08015432
 8011e40:	3ff80000 	.word	0x3ff80000
 8011e44:	08015348 	.word	0x08015348
 8011e48:	0801522c 	.word	0x0801522c
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e50:	e7d4      	b.n	8011dfc <_dtoa_r+0x2b4>
 8011e52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8011e56:	465b      	mov	r3, fp
 8011e58:	f8cd b008 	str.w	fp, [sp, #8]
 8011e5c:	e7a6      	b.n	8011dac <_dtoa_r+0x264>
 8011e5e:	3101      	adds	r1, #1
 8011e60:	6041      	str	r1, [r0, #4]
 8011e62:	0052      	lsls	r2, r2, #1
 8011e64:	e7a6      	b.n	8011db4 <_dtoa_r+0x26c>
 8011e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e68:	9a08      	ldr	r2, [sp, #32]
 8011e6a:	601a      	str	r2, [r3, #0]
 8011e6c:	9b02      	ldr	r3, [sp, #8]
 8011e6e:	2b0e      	cmp	r3, #14
 8011e70:	f200 80a8 	bhi.w	8011fc4 <_dtoa_r+0x47c>
 8011e74:	2c00      	cmp	r4, #0
 8011e76:	f000 80a5 	beq.w	8011fc4 <_dtoa_r+0x47c>
 8011e7a:	f1b9 0f00 	cmp.w	r9, #0
 8011e7e:	dd34      	ble.n	8011eea <_dtoa_r+0x3a2>
 8011e80:	4a9a      	ldr	r2, [pc, #616]	; (80120ec <_dtoa_r+0x5a4>)
 8011e82:	f009 030f 	and.w	r3, r9, #15
 8011e86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8011e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011e92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011e96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8011e9a:	d016      	beq.n	8011eca <_dtoa_r+0x382>
 8011e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ea0:	4b93      	ldr	r3, [pc, #588]	; (80120f0 <_dtoa_r+0x5a8>)
 8011ea2:	2703      	movs	r7, #3
 8011ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011ea8:	f7ee fc58 	bl	800075c <__aeabi_ddiv>
 8011eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011eb0:	f004 040f 	and.w	r4, r4, #15
 8011eb4:	4e8e      	ldr	r6, [pc, #568]	; (80120f0 <_dtoa_r+0x5a8>)
 8011eb6:	b954      	cbnz	r4, 8011ece <_dtoa_r+0x386>
 8011eb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ec0:	f7ee fc4c 	bl	800075c <__aeabi_ddiv>
 8011ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ec8:	e029      	b.n	8011f1e <_dtoa_r+0x3d6>
 8011eca:	2702      	movs	r7, #2
 8011ecc:	e7f2      	b.n	8011eb4 <_dtoa_r+0x36c>
 8011ece:	07e1      	lsls	r1, r4, #31
 8011ed0:	d508      	bpl.n	8011ee4 <_dtoa_r+0x39c>
 8011ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011ed6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011eda:	f7ee fb15 	bl	8000508 <__aeabi_dmul>
 8011ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011ee2:	3701      	adds	r7, #1
 8011ee4:	1064      	asrs	r4, r4, #1
 8011ee6:	3608      	adds	r6, #8
 8011ee8:	e7e5      	b.n	8011eb6 <_dtoa_r+0x36e>
 8011eea:	f000 80a5 	beq.w	8012038 <_dtoa_r+0x4f0>
 8011eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ef2:	f1c9 0400 	rsb	r4, r9, #0
 8011ef6:	4b7d      	ldr	r3, [pc, #500]	; (80120ec <_dtoa_r+0x5a4>)
 8011ef8:	f004 020f 	and.w	r2, r4, #15
 8011efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f04:	f7ee fb00 	bl	8000508 <__aeabi_dmul>
 8011f08:	2702      	movs	r7, #2
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f10:	4e77      	ldr	r6, [pc, #476]	; (80120f0 <_dtoa_r+0x5a8>)
 8011f12:	1124      	asrs	r4, r4, #4
 8011f14:	2c00      	cmp	r4, #0
 8011f16:	f040 8084 	bne.w	8012022 <_dtoa_r+0x4da>
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d1d2      	bne.n	8011ec4 <_dtoa_r+0x37c>
 8011f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f000 808b 	beq.w	801203c <_dtoa_r+0x4f4>
 8011f26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011f2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011f2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f32:	2200      	movs	r2, #0
 8011f34:	4b6f      	ldr	r3, [pc, #444]	; (80120f4 <_dtoa_r+0x5ac>)
 8011f36:	f7ee fd59 	bl	80009ec <__aeabi_dcmplt>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d07e      	beq.n	801203c <_dtoa_r+0x4f4>
 8011f3e:	9b02      	ldr	r3, [sp, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d07b      	beq.n	801203c <_dtoa_r+0x4f4>
 8011f44:	f1bb 0f00 	cmp.w	fp, #0
 8011f48:	dd38      	ble.n	8011fbc <_dtoa_r+0x474>
 8011f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f4e:	2200      	movs	r2, #0
 8011f50:	4b69      	ldr	r3, [pc, #420]	; (80120f8 <_dtoa_r+0x5b0>)
 8011f52:	f7ee fad9 	bl	8000508 <__aeabi_dmul>
 8011f56:	465c      	mov	r4, fp
 8011f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f5c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8011f60:	3701      	adds	r7, #1
 8011f62:	4638      	mov	r0, r7
 8011f64:	f7ee fa66 	bl	8000434 <__aeabi_i2d>
 8011f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f6c:	f7ee facc 	bl	8000508 <__aeabi_dmul>
 8011f70:	2200      	movs	r2, #0
 8011f72:	4b62      	ldr	r3, [pc, #392]	; (80120fc <_dtoa_r+0x5b4>)
 8011f74:	f7ee f912 	bl	800019c <__adddf3>
 8011f78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011f7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011f80:	9611      	str	r6, [sp, #68]	; 0x44
 8011f82:	2c00      	cmp	r4, #0
 8011f84:	d15d      	bne.n	8012042 <_dtoa_r+0x4fa>
 8011f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	4b5c      	ldr	r3, [pc, #368]	; (8012100 <_dtoa_r+0x5b8>)
 8011f8e:	f7ee f903 	bl	8000198 <__aeabi_dsub>
 8011f92:	4602      	mov	r2, r0
 8011f94:	460b      	mov	r3, r1
 8011f96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f9a:	4633      	mov	r3, r6
 8011f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f9e:	f7ee fd43 	bl	8000a28 <__aeabi_dcmpgt>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f040 829e 	bne.w	80124e4 <_dtoa_r+0x99c>
 8011fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011fb2:	f7ee fd1b 	bl	80009ec <__aeabi_dcmplt>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f040 8292 	bne.w	80124e0 <_dtoa_r+0x998>
 8011fbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011fc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f2c0 8153 	blt.w	8012272 <_dtoa_r+0x72a>
 8011fcc:	f1b9 0f0e 	cmp.w	r9, #14
 8011fd0:	f300 814f 	bgt.w	8012272 <_dtoa_r+0x72a>
 8011fd4:	4b45      	ldr	r3, [pc, #276]	; (80120ec <_dtoa_r+0x5a4>)
 8011fd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011fde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011fe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f280 80db 	bge.w	80121a0 <_dtoa_r+0x658>
 8011fea:	9b02      	ldr	r3, [sp, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f300 80d7 	bgt.w	80121a0 <_dtoa_r+0x658>
 8011ff2:	f040 8274 	bne.w	80124de <_dtoa_r+0x996>
 8011ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4b40      	ldr	r3, [pc, #256]	; (8012100 <_dtoa_r+0x5b8>)
 8011ffe:	f7ee fa83 	bl	8000508 <__aeabi_dmul>
 8012002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012006:	f7ee fd05 	bl	8000a14 <__aeabi_dcmpge>
 801200a:	9c02      	ldr	r4, [sp, #8]
 801200c:	4626      	mov	r6, r4
 801200e:	2800      	cmp	r0, #0
 8012010:	f040 824a 	bne.w	80124a8 <_dtoa_r+0x960>
 8012014:	2331      	movs	r3, #49	; 0x31
 8012016:	9f08      	ldr	r7, [sp, #32]
 8012018:	f109 0901 	add.w	r9, r9, #1
 801201c:	f807 3b01 	strb.w	r3, [r7], #1
 8012020:	e246      	b.n	80124b0 <_dtoa_r+0x968>
 8012022:	07e2      	lsls	r2, r4, #31
 8012024:	d505      	bpl.n	8012032 <_dtoa_r+0x4ea>
 8012026:	e9d6 2300 	ldrd	r2, r3, [r6]
 801202a:	f7ee fa6d 	bl	8000508 <__aeabi_dmul>
 801202e:	2301      	movs	r3, #1
 8012030:	3701      	adds	r7, #1
 8012032:	1064      	asrs	r4, r4, #1
 8012034:	3608      	adds	r6, #8
 8012036:	e76d      	b.n	8011f14 <_dtoa_r+0x3cc>
 8012038:	2702      	movs	r7, #2
 801203a:	e770      	b.n	8011f1e <_dtoa_r+0x3d6>
 801203c:	46c8      	mov	r8, r9
 801203e:	9c02      	ldr	r4, [sp, #8]
 8012040:	e78f      	b.n	8011f62 <_dtoa_r+0x41a>
 8012042:	9908      	ldr	r1, [sp, #32]
 8012044:	4b29      	ldr	r3, [pc, #164]	; (80120ec <_dtoa_r+0x5a4>)
 8012046:	4421      	add	r1, r4
 8012048:	9112      	str	r1, [sp, #72]	; 0x48
 801204a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801204c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012050:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012054:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012058:	2900      	cmp	r1, #0
 801205a:	d055      	beq.n	8012108 <_dtoa_r+0x5c0>
 801205c:	2000      	movs	r0, #0
 801205e:	4929      	ldr	r1, [pc, #164]	; (8012104 <_dtoa_r+0x5bc>)
 8012060:	f7ee fb7c 	bl	800075c <__aeabi_ddiv>
 8012064:	463b      	mov	r3, r7
 8012066:	4632      	mov	r2, r6
 8012068:	f7ee f896 	bl	8000198 <__aeabi_dsub>
 801206c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012070:	9f08      	ldr	r7, [sp, #32]
 8012072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012076:	f7ee fcf7 	bl	8000a68 <__aeabi_d2iz>
 801207a:	4604      	mov	r4, r0
 801207c:	f7ee f9da 	bl	8000434 <__aeabi_i2d>
 8012080:	4602      	mov	r2, r0
 8012082:	460b      	mov	r3, r1
 8012084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012088:	f7ee f886 	bl	8000198 <__aeabi_dsub>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	3430      	adds	r4, #48	; 0x30
 8012092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801209a:	f807 4b01 	strb.w	r4, [r7], #1
 801209e:	f7ee fca5 	bl	80009ec <__aeabi_dcmplt>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d174      	bne.n	8012190 <_dtoa_r+0x648>
 80120a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120aa:	2000      	movs	r0, #0
 80120ac:	4911      	ldr	r1, [pc, #68]	; (80120f4 <_dtoa_r+0x5ac>)
 80120ae:	f7ee f873 	bl	8000198 <__aeabi_dsub>
 80120b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80120b6:	f7ee fc99 	bl	80009ec <__aeabi_dcmplt>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	f040 80b6 	bne.w	801222c <_dtoa_r+0x6e4>
 80120c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120c2:	429f      	cmp	r7, r3
 80120c4:	f43f af7a 	beq.w	8011fbc <_dtoa_r+0x474>
 80120c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80120cc:	2200      	movs	r2, #0
 80120ce:	4b0a      	ldr	r3, [pc, #40]	; (80120f8 <_dtoa_r+0x5b0>)
 80120d0:	f7ee fa1a 	bl	8000508 <__aeabi_dmul>
 80120d4:	2200      	movs	r2, #0
 80120d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80120da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120de:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <_dtoa_r+0x5b0>)
 80120e0:	f7ee fa12 	bl	8000508 <__aeabi_dmul>
 80120e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120e8:	e7c3      	b.n	8012072 <_dtoa_r+0x52a>
 80120ea:	bf00      	nop
 80120ec:	08015348 	.word	0x08015348
 80120f0:	08015320 	.word	0x08015320
 80120f4:	3ff00000 	.word	0x3ff00000
 80120f8:	40240000 	.word	0x40240000
 80120fc:	401c0000 	.word	0x401c0000
 8012100:	40140000 	.word	0x40140000
 8012104:	3fe00000 	.word	0x3fe00000
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee f9fc 	bl	8000508 <__aeabi_dmul>
 8012110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012112:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012116:	9c08      	ldr	r4, [sp, #32]
 8012118:	9314      	str	r3, [sp, #80]	; 0x50
 801211a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801211e:	f7ee fca3 	bl	8000a68 <__aeabi_d2iz>
 8012122:	9015      	str	r0, [sp, #84]	; 0x54
 8012124:	f7ee f986 	bl	8000434 <__aeabi_i2d>
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012130:	f7ee f832 	bl	8000198 <__aeabi_dsub>
 8012134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012136:	4606      	mov	r6, r0
 8012138:	3330      	adds	r3, #48	; 0x30
 801213a:	f804 3b01 	strb.w	r3, [r4], #1
 801213e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012140:	460f      	mov	r7, r1
 8012142:	429c      	cmp	r4, r3
 8012144:	f04f 0200 	mov.w	r2, #0
 8012148:	d124      	bne.n	8012194 <_dtoa_r+0x64c>
 801214a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801214e:	4bb3      	ldr	r3, [pc, #716]	; (801241c <_dtoa_r+0x8d4>)
 8012150:	f7ee f824 	bl	800019c <__adddf3>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	4630      	mov	r0, r6
 801215a:	4639      	mov	r1, r7
 801215c:	f7ee fc64 	bl	8000a28 <__aeabi_dcmpgt>
 8012160:	2800      	cmp	r0, #0
 8012162:	d162      	bne.n	801222a <_dtoa_r+0x6e2>
 8012164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012168:	2000      	movs	r0, #0
 801216a:	49ac      	ldr	r1, [pc, #688]	; (801241c <_dtoa_r+0x8d4>)
 801216c:	f7ee f814 	bl	8000198 <__aeabi_dsub>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4630      	mov	r0, r6
 8012176:	4639      	mov	r1, r7
 8012178:	f7ee fc38 	bl	80009ec <__aeabi_dcmplt>
 801217c:	2800      	cmp	r0, #0
 801217e:	f43f af1d 	beq.w	8011fbc <_dtoa_r+0x474>
 8012182:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012184:	1e7b      	subs	r3, r7, #1
 8012186:	9314      	str	r3, [sp, #80]	; 0x50
 8012188:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801218c:	2b30      	cmp	r3, #48	; 0x30
 801218e:	d0f8      	beq.n	8012182 <_dtoa_r+0x63a>
 8012190:	46c1      	mov	r9, r8
 8012192:	e03a      	b.n	801220a <_dtoa_r+0x6c2>
 8012194:	4ba2      	ldr	r3, [pc, #648]	; (8012420 <_dtoa_r+0x8d8>)
 8012196:	f7ee f9b7 	bl	8000508 <__aeabi_dmul>
 801219a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801219e:	e7bc      	b.n	801211a <_dtoa_r+0x5d2>
 80121a0:	9f08      	ldr	r7, [sp, #32]
 80121a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121aa:	f7ee fad7 	bl	800075c <__aeabi_ddiv>
 80121ae:	f7ee fc5b 	bl	8000a68 <__aeabi_d2iz>
 80121b2:	4604      	mov	r4, r0
 80121b4:	f7ee f93e 	bl	8000434 <__aeabi_i2d>
 80121b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121bc:	f7ee f9a4 	bl	8000508 <__aeabi_dmul>
 80121c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80121c4:	460b      	mov	r3, r1
 80121c6:	4602      	mov	r2, r0
 80121c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121cc:	f7ed ffe4 	bl	8000198 <__aeabi_dsub>
 80121d0:	f807 6b01 	strb.w	r6, [r7], #1
 80121d4:	9e08      	ldr	r6, [sp, #32]
 80121d6:	9b02      	ldr	r3, [sp, #8]
 80121d8:	1bbe      	subs	r6, r7, r6
 80121da:	42b3      	cmp	r3, r6
 80121dc:	d13a      	bne.n	8012254 <_dtoa_r+0x70c>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	f7ed ffdb 	bl	800019c <__adddf3>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121f2:	f7ee fc19 	bl	8000a28 <__aeabi_dcmpgt>
 80121f6:	bb58      	cbnz	r0, 8012250 <_dtoa_r+0x708>
 80121f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012200:	f7ee fbea 	bl	80009d8 <__aeabi_dcmpeq>
 8012204:	b108      	cbz	r0, 801220a <_dtoa_r+0x6c2>
 8012206:	07e1      	lsls	r1, r4, #31
 8012208:	d422      	bmi.n	8012250 <_dtoa_r+0x708>
 801220a:	4628      	mov	r0, r5
 801220c:	4651      	mov	r1, sl
 801220e:	f000 fe71 	bl	8012ef4 <_Bfree>
 8012212:	2300      	movs	r3, #0
 8012214:	703b      	strb	r3, [r7, #0]
 8012216:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012218:	f109 0001 	add.w	r0, r9, #1
 801221c:	6018      	str	r0, [r3, #0]
 801221e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012220:	2b00      	cmp	r3, #0
 8012222:	f43f acdf 	beq.w	8011be4 <_dtoa_r+0x9c>
 8012226:	601f      	str	r7, [r3, #0]
 8012228:	e4dc      	b.n	8011be4 <_dtoa_r+0x9c>
 801222a:	4627      	mov	r7, r4
 801222c:	463b      	mov	r3, r7
 801222e:	461f      	mov	r7, r3
 8012230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012234:	2a39      	cmp	r2, #57	; 0x39
 8012236:	d107      	bne.n	8012248 <_dtoa_r+0x700>
 8012238:	9a08      	ldr	r2, [sp, #32]
 801223a:	429a      	cmp	r2, r3
 801223c:	d1f7      	bne.n	801222e <_dtoa_r+0x6e6>
 801223e:	2230      	movs	r2, #48	; 0x30
 8012240:	9908      	ldr	r1, [sp, #32]
 8012242:	f108 0801 	add.w	r8, r8, #1
 8012246:	700a      	strb	r2, [r1, #0]
 8012248:	781a      	ldrb	r2, [r3, #0]
 801224a:	3201      	adds	r2, #1
 801224c:	701a      	strb	r2, [r3, #0]
 801224e:	e79f      	b.n	8012190 <_dtoa_r+0x648>
 8012250:	46c8      	mov	r8, r9
 8012252:	e7eb      	b.n	801222c <_dtoa_r+0x6e4>
 8012254:	2200      	movs	r2, #0
 8012256:	4b72      	ldr	r3, [pc, #456]	; (8012420 <_dtoa_r+0x8d8>)
 8012258:	f7ee f956 	bl	8000508 <__aeabi_dmul>
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012264:	2200      	movs	r2, #0
 8012266:	2300      	movs	r3, #0
 8012268:	f7ee fbb6 	bl	80009d8 <__aeabi_dcmpeq>
 801226c:	2800      	cmp	r0, #0
 801226e:	d098      	beq.n	80121a2 <_dtoa_r+0x65a>
 8012270:	e7cb      	b.n	801220a <_dtoa_r+0x6c2>
 8012272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012274:	2a00      	cmp	r2, #0
 8012276:	f000 80cd 	beq.w	8012414 <_dtoa_r+0x8cc>
 801227a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801227c:	2a01      	cmp	r2, #1
 801227e:	f300 80af 	bgt.w	80123e0 <_dtoa_r+0x898>
 8012282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012284:	2a00      	cmp	r2, #0
 8012286:	f000 80a7 	beq.w	80123d8 <_dtoa_r+0x890>
 801228a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801228e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012290:	9f06      	ldr	r7, [sp, #24]
 8012292:	9a06      	ldr	r2, [sp, #24]
 8012294:	2101      	movs	r1, #1
 8012296:	441a      	add	r2, r3
 8012298:	9206      	str	r2, [sp, #24]
 801229a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801229c:	4628      	mov	r0, r5
 801229e:	441a      	add	r2, r3
 80122a0:	9209      	str	r2, [sp, #36]	; 0x24
 80122a2:	f000 ff2b 	bl	80130fc <__i2b>
 80122a6:	4606      	mov	r6, r0
 80122a8:	2f00      	cmp	r7, #0
 80122aa:	dd0c      	ble.n	80122c6 <_dtoa_r+0x77e>
 80122ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	dd09      	ble.n	80122c6 <_dtoa_r+0x77e>
 80122b2:	42bb      	cmp	r3, r7
 80122b4:	bfa8      	it	ge
 80122b6:	463b      	movge	r3, r7
 80122b8:	9a06      	ldr	r2, [sp, #24]
 80122ba:	1aff      	subs	r7, r7, r3
 80122bc:	1ad2      	subs	r2, r2, r3
 80122be:	9206      	str	r2, [sp, #24]
 80122c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122c2:	1ad3      	subs	r3, r2, r3
 80122c4:	9309      	str	r3, [sp, #36]	; 0x24
 80122c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122c8:	b1f3      	cbz	r3, 8012308 <_dtoa_r+0x7c0>
 80122ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f000 80a9 	beq.w	8012424 <_dtoa_r+0x8dc>
 80122d2:	2c00      	cmp	r4, #0
 80122d4:	dd10      	ble.n	80122f8 <_dtoa_r+0x7b0>
 80122d6:	4631      	mov	r1, r6
 80122d8:	4622      	mov	r2, r4
 80122da:	4628      	mov	r0, r5
 80122dc:	f000 ffc8 	bl	8013270 <__pow5mult>
 80122e0:	4652      	mov	r2, sl
 80122e2:	4601      	mov	r1, r0
 80122e4:	4606      	mov	r6, r0
 80122e6:	4628      	mov	r0, r5
 80122e8:	f000 ff1e 	bl	8013128 <__multiply>
 80122ec:	4680      	mov	r8, r0
 80122ee:	4651      	mov	r1, sl
 80122f0:	4628      	mov	r0, r5
 80122f2:	f000 fdff 	bl	8012ef4 <_Bfree>
 80122f6:	46c2      	mov	sl, r8
 80122f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122fa:	1b1a      	subs	r2, r3, r4
 80122fc:	d004      	beq.n	8012308 <_dtoa_r+0x7c0>
 80122fe:	4651      	mov	r1, sl
 8012300:	4628      	mov	r0, r5
 8012302:	f000 ffb5 	bl	8013270 <__pow5mult>
 8012306:	4682      	mov	sl, r0
 8012308:	2101      	movs	r1, #1
 801230a:	4628      	mov	r0, r5
 801230c:	f000 fef6 	bl	80130fc <__i2b>
 8012310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012312:	4604      	mov	r4, r0
 8012314:	2b00      	cmp	r3, #0
 8012316:	f340 8087 	ble.w	8012428 <_dtoa_r+0x8e0>
 801231a:	461a      	mov	r2, r3
 801231c:	4601      	mov	r1, r0
 801231e:	4628      	mov	r0, r5
 8012320:	f000 ffa6 	bl	8013270 <__pow5mult>
 8012324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012326:	4604      	mov	r4, r0
 8012328:	2b01      	cmp	r3, #1
 801232a:	f340 8080 	ble.w	801242e <_dtoa_r+0x8e6>
 801232e:	f04f 0800 	mov.w	r8, #0
 8012332:	6923      	ldr	r3, [r4, #16]
 8012334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012338:	6918      	ldr	r0, [r3, #16]
 801233a:	f000 fe91 	bl	8013060 <__hi0bits>
 801233e:	f1c0 0020 	rsb	r0, r0, #32
 8012342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012344:	4418      	add	r0, r3
 8012346:	f010 001f 	ands.w	r0, r0, #31
 801234a:	f000 8092 	beq.w	8012472 <_dtoa_r+0x92a>
 801234e:	f1c0 0320 	rsb	r3, r0, #32
 8012352:	2b04      	cmp	r3, #4
 8012354:	f340 808a 	ble.w	801246c <_dtoa_r+0x924>
 8012358:	f1c0 001c 	rsb	r0, r0, #28
 801235c:	9b06      	ldr	r3, [sp, #24]
 801235e:	4407      	add	r7, r0
 8012360:	4403      	add	r3, r0
 8012362:	9306      	str	r3, [sp, #24]
 8012364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012366:	4403      	add	r3, r0
 8012368:	9309      	str	r3, [sp, #36]	; 0x24
 801236a:	9b06      	ldr	r3, [sp, #24]
 801236c:	2b00      	cmp	r3, #0
 801236e:	dd05      	ble.n	801237c <_dtoa_r+0x834>
 8012370:	4651      	mov	r1, sl
 8012372:	461a      	mov	r2, r3
 8012374:	4628      	mov	r0, r5
 8012376:	f000 ffd5 	bl	8013324 <__lshift>
 801237a:	4682      	mov	sl, r0
 801237c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801237e:	2b00      	cmp	r3, #0
 8012380:	dd05      	ble.n	801238e <_dtoa_r+0x846>
 8012382:	4621      	mov	r1, r4
 8012384:	461a      	mov	r2, r3
 8012386:	4628      	mov	r0, r5
 8012388:	f000 ffcc 	bl	8013324 <__lshift>
 801238c:	4604      	mov	r4, r0
 801238e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012390:	2b00      	cmp	r3, #0
 8012392:	d070      	beq.n	8012476 <_dtoa_r+0x92e>
 8012394:	4621      	mov	r1, r4
 8012396:	4650      	mov	r0, sl
 8012398:	f001 f830 	bl	80133fc <__mcmp>
 801239c:	2800      	cmp	r0, #0
 801239e:	da6a      	bge.n	8012476 <_dtoa_r+0x92e>
 80123a0:	2300      	movs	r3, #0
 80123a2:	4651      	mov	r1, sl
 80123a4:	220a      	movs	r2, #10
 80123a6:	4628      	mov	r0, r5
 80123a8:	f000 fdc6 	bl	8012f38 <__multadd>
 80123ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ae:	4682      	mov	sl, r0
 80123b0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 8193 	beq.w	80126e0 <_dtoa_r+0xb98>
 80123ba:	4631      	mov	r1, r6
 80123bc:	2300      	movs	r3, #0
 80123be:	220a      	movs	r2, #10
 80123c0:	4628      	mov	r0, r5
 80123c2:	f000 fdb9 	bl	8012f38 <__multadd>
 80123c6:	f1bb 0f00 	cmp.w	fp, #0
 80123ca:	4606      	mov	r6, r0
 80123cc:	f300 8093 	bgt.w	80124f6 <_dtoa_r+0x9ae>
 80123d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	dc57      	bgt.n	8012486 <_dtoa_r+0x93e>
 80123d6:	e08e      	b.n	80124f6 <_dtoa_r+0x9ae>
 80123d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80123de:	e756      	b.n	801228e <_dtoa_r+0x746>
 80123e0:	9b02      	ldr	r3, [sp, #8]
 80123e2:	1e5c      	subs	r4, r3, #1
 80123e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123e6:	42a3      	cmp	r3, r4
 80123e8:	bfb7      	itett	lt
 80123ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123ec:	1b1c      	subge	r4, r3, r4
 80123ee:	1ae2      	sublt	r2, r4, r3
 80123f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80123f2:	bfbe      	ittt	lt
 80123f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80123f6:	189b      	addlt	r3, r3, r2
 80123f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80123fa:	9b02      	ldr	r3, [sp, #8]
 80123fc:	bfb8      	it	lt
 80123fe:	2400      	movlt	r4, #0
 8012400:	2b00      	cmp	r3, #0
 8012402:	bfbb      	ittet	lt
 8012404:	9b06      	ldrlt	r3, [sp, #24]
 8012406:	9a02      	ldrlt	r2, [sp, #8]
 8012408:	9f06      	ldrge	r7, [sp, #24]
 801240a:	1a9f      	sublt	r7, r3, r2
 801240c:	bfac      	ite	ge
 801240e:	9b02      	ldrge	r3, [sp, #8]
 8012410:	2300      	movlt	r3, #0
 8012412:	e73e      	b.n	8012292 <_dtoa_r+0x74a>
 8012414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012416:	9f06      	ldr	r7, [sp, #24]
 8012418:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801241a:	e745      	b.n	80122a8 <_dtoa_r+0x760>
 801241c:	3fe00000 	.word	0x3fe00000
 8012420:	40240000 	.word	0x40240000
 8012424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012426:	e76a      	b.n	80122fe <_dtoa_r+0x7b6>
 8012428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801242a:	2b01      	cmp	r3, #1
 801242c:	dc19      	bgt.n	8012462 <_dtoa_r+0x91a>
 801242e:	9b04      	ldr	r3, [sp, #16]
 8012430:	b9bb      	cbnz	r3, 8012462 <_dtoa_r+0x91a>
 8012432:	9b05      	ldr	r3, [sp, #20]
 8012434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012438:	b99b      	cbnz	r3, 8012462 <_dtoa_r+0x91a>
 801243a:	9b05      	ldr	r3, [sp, #20]
 801243c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012440:	0d1b      	lsrs	r3, r3, #20
 8012442:	051b      	lsls	r3, r3, #20
 8012444:	b183      	cbz	r3, 8012468 <_dtoa_r+0x920>
 8012446:	f04f 0801 	mov.w	r8, #1
 801244a:	9b06      	ldr	r3, [sp, #24]
 801244c:	3301      	adds	r3, #1
 801244e:	9306      	str	r3, [sp, #24]
 8012450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012452:	3301      	adds	r3, #1
 8012454:	9309      	str	r3, [sp, #36]	; 0x24
 8012456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012458:	2b00      	cmp	r3, #0
 801245a:	f47f af6a 	bne.w	8012332 <_dtoa_r+0x7ea>
 801245e:	2001      	movs	r0, #1
 8012460:	e76f      	b.n	8012342 <_dtoa_r+0x7fa>
 8012462:	f04f 0800 	mov.w	r8, #0
 8012466:	e7f6      	b.n	8012456 <_dtoa_r+0x90e>
 8012468:	4698      	mov	r8, r3
 801246a:	e7f4      	b.n	8012456 <_dtoa_r+0x90e>
 801246c:	f43f af7d 	beq.w	801236a <_dtoa_r+0x822>
 8012470:	4618      	mov	r0, r3
 8012472:	301c      	adds	r0, #28
 8012474:	e772      	b.n	801235c <_dtoa_r+0x814>
 8012476:	9b02      	ldr	r3, [sp, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	dc36      	bgt.n	80124ea <_dtoa_r+0x9a2>
 801247c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801247e:	2b02      	cmp	r3, #2
 8012480:	dd33      	ble.n	80124ea <_dtoa_r+0x9a2>
 8012482:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012486:	f1bb 0f00 	cmp.w	fp, #0
 801248a:	d10d      	bne.n	80124a8 <_dtoa_r+0x960>
 801248c:	4621      	mov	r1, r4
 801248e:	465b      	mov	r3, fp
 8012490:	2205      	movs	r2, #5
 8012492:	4628      	mov	r0, r5
 8012494:	f000 fd50 	bl	8012f38 <__multadd>
 8012498:	4601      	mov	r1, r0
 801249a:	4604      	mov	r4, r0
 801249c:	4650      	mov	r0, sl
 801249e:	f000 ffad 	bl	80133fc <__mcmp>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	f73f adb6 	bgt.w	8012014 <_dtoa_r+0x4cc>
 80124a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80124aa:	9f08      	ldr	r7, [sp, #32]
 80124ac:	ea6f 0903 	mvn.w	r9, r3
 80124b0:	f04f 0800 	mov.w	r8, #0
 80124b4:	4621      	mov	r1, r4
 80124b6:	4628      	mov	r0, r5
 80124b8:	f000 fd1c 	bl	8012ef4 <_Bfree>
 80124bc:	2e00      	cmp	r6, #0
 80124be:	f43f aea4 	beq.w	801220a <_dtoa_r+0x6c2>
 80124c2:	f1b8 0f00 	cmp.w	r8, #0
 80124c6:	d005      	beq.n	80124d4 <_dtoa_r+0x98c>
 80124c8:	45b0      	cmp	r8, r6
 80124ca:	d003      	beq.n	80124d4 <_dtoa_r+0x98c>
 80124cc:	4641      	mov	r1, r8
 80124ce:	4628      	mov	r0, r5
 80124d0:	f000 fd10 	bl	8012ef4 <_Bfree>
 80124d4:	4631      	mov	r1, r6
 80124d6:	4628      	mov	r0, r5
 80124d8:	f000 fd0c 	bl	8012ef4 <_Bfree>
 80124dc:	e695      	b.n	801220a <_dtoa_r+0x6c2>
 80124de:	2400      	movs	r4, #0
 80124e0:	4626      	mov	r6, r4
 80124e2:	e7e1      	b.n	80124a8 <_dtoa_r+0x960>
 80124e4:	46c1      	mov	r9, r8
 80124e6:	4626      	mov	r6, r4
 80124e8:	e594      	b.n	8012014 <_dtoa_r+0x4cc>
 80124ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f000 80fc 	beq.w	80126ee <_dtoa_r+0xba6>
 80124f6:	2f00      	cmp	r7, #0
 80124f8:	dd05      	ble.n	8012506 <_dtoa_r+0x9be>
 80124fa:	4631      	mov	r1, r6
 80124fc:	463a      	mov	r2, r7
 80124fe:	4628      	mov	r0, r5
 8012500:	f000 ff10 	bl	8013324 <__lshift>
 8012504:	4606      	mov	r6, r0
 8012506:	f1b8 0f00 	cmp.w	r8, #0
 801250a:	d05c      	beq.n	80125c6 <_dtoa_r+0xa7e>
 801250c:	4628      	mov	r0, r5
 801250e:	6871      	ldr	r1, [r6, #4]
 8012510:	f000 fcb0 	bl	8012e74 <_Balloc>
 8012514:	4607      	mov	r7, r0
 8012516:	b928      	cbnz	r0, 8012524 <_dtoa_r+0x9dc>
 8012518:	4602      	mov	r2, r0
 801251a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801251e:	4b7e      	ldr	r3, [pc, #504]	; (8012718 <_dtoa_r+0xbd0>)
 8012520:	f7ff bb26 	b.w	8011b70 <_dtoa_r+0x28>
 8012524:	6932      	ldr	r2, [r6, #16]
 8012526:	f106 010c 	add.w	r1, r6, #12
 801252a:	3202      	adds	r2, #2
 801252c:	0092      	lsls	r2, r2, #2
 801252e:	300c      	adds	r0, #12
 8012530:	f7fd fb58 	bl	800fbe4 <memcpy>
 8012534:	2201      	movs	r2, #1
 8012536:	4639      	mov	r1, r7
 8012538:	4628      	mov	r0, r5
 801253a:	f000 fef3 	bl	8013324 <__lshift>
 801253e:	46b0      	mov	r8, r6
 8012540:	4606      	mov	r6, r0
 8012542:	9b08      	ldr	r3, [sp, #32]
 8012544:	3301      	adds	r3, #1
 8012546:	9302      	str	r3, [sp, #8]
 8012548:	9b08      	ldr	r3, [sp, #32]
 801254a:	445b      	add	r3, fp
 801254c:	930a      	str	r3, [sp, #40]	; 0x28
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	f003 0301 	and.w	r3, r3, #1
 8012554:	9309      	str	r3, [sp, #36]	; 0x24
 8012556:	9b02      	ldr	r3, [sp, #8]
 8012558:	4621      	mov	r1, r4
 801255a:	4650      	mov	r0, sl
 801255c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8012560:	f7ff fa62 	bl	8011a28 <quorem>
 8012564:	4603      	mov	r3, r0
 8012566:	4641      	mov	r1, r8
 8012568:	3330      	adds	r3, #48	; 0x30
 801256a:	9004      	str	r0, [sp, #16]
 801256c:	4650      	mov	r0, sl
 801256e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012570:	f000 ff44 	bl	80133fc <__mcmp>
 8012574:	4632      	mov	r2, r6
 8012576:	9006      	str	r0, [sp, #24]
 8012578:	4621      	mov	r1, r4
 801257a:	4628      	mov	r0, r5
 801257c:	f000 ff5a 	bl	8013434 <__mdiff>
 8012580:	68c2      	ldr	r2, [r0, #12]
 8012582:	4607      	mov	r7, r0
 8012584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012586:	bb02      	cbnz	r2, 80125ca <_dtoa_r+0xa82>
 8012588:	4601      	mov	r1, r0
 801258a:	4650      	mov	r0, sl
 801258c:	f000 ff36 	bl	80133fc <__mcmp>
 8012590:	4602      	mov	r2, r0
 8012592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012594:	4639      	mov	r1, r7
 8012596:	4628      	mov	r0, r5
 8012598:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801259c:	f000 fcaa 	bl	8012ef4 <_Bfree>
 80125a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80125a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125a4:	9f02      	ldr	r7, [sp, #8]
 80125a6:	ea43 0102 	orr.w	r1, r3, r2
 80125aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ac:	430b      	orrs	r3, r1
 80125ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125b0:	d10d      	bne.n	80125ce <_dtoa_r+0xa86>
 80125b2:	2b39      	cmp	r3, #57	; 0x39
 80125b4:	d027      	beq.n	8012606 <_dtoa_r+0xabe>
 80125b6:	9a06      	ldr	r2, [sp, #24]
 80125b8:	2a00      	cmp	r2, #0
 80125ba:	dd01      	ble.n	80125c0 <_dtoa_r+0xa78>
 80125bc:	9b04      	ldr	r3, [sp, #16]
 80125be:	3331      	adds	r3, #49	; 0x31
 80125c0:	f88b 3000 	strb.w	r3, [fp]
 80125c4:	e776      	b.n	80124b4 <_dtoa_r+0x96c>
 80125c6:	4630      	mov	r0, r6
 80125c8:	e7b9      	b.n	801253e <_dtoa_r+0x9f6>
 80125ca:	2201      	movs	r2, #1
 80125cc:	e7e2      	b.n	8012594 <_dtoa_r+0xa4c>
 80125ce:	9906      	ldr	r1, [sp, #24]
 80125d0:	2900      	cmp	r1, #0
 80125d2:	db04      	blt.n	80125de <_dtoa_r+0xa96>
 80125d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80125d6:	4301      	orrs	r1, r0
 80125d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125da:	4301      	orrs	r1, r0
 80125dc:	d120      	bne.n	8012620 <_dtoa_r+0xad8>
 80125de:	2a00      	cmp	r2, #0
 80125e0:	ddee      	ble.n	80125c0 <_dtoa_r+0xa78>
 80125e2:	4651      	mov	r1, sl
 80125e4:	2201      	movs	r2, #1
 80125e6:	4628      	mov	r0, r5
 80125e8:	9302      	str	r3, [sp, #8]
 80125ea:	f000 fe9b 	bl	8013324 <__lshift>
 80125ee:	4621      	mov	r1, r4
 80125f0:	4682      	mov	sl, r0
 80125f2:	f000 ff03 	bl	80133fc <__mcmp>
 80125f6:	2800      	cmp	r0, #0
 80125f8:	9b02      	ldr	r3, [sp, #8]
 80125fa:	dc02      	bgt.n	8012602 <_dtoa_r+0xaba>
 80125fc:	d1e0      	bne.n	80125c0 <_dtoa_r+0xa78>
 80125fe:	07da      	lsls	r2, r3, #31
 8012600:	d5de      	bpl.n	80125c0 <_dtoa_r+0xa78>
 8012602:	2b39      	cmp	r3, #57	; 0x39
 8012604:	d1da      	bne.n	80125bc <_dtoa_r+0xa74>
 8012606:	2339      	movs	r3, #57	; 0x39
 8012608:	f88b 3000 	strb.w	r3, [fp]
 801260c:	463b      	mov	r3, r7
 801260e:	461f      	mov	r7, r3
 8012610:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8012614:	3b01      	subs	r3, #1
 8012616:	2a39      	cmp	r2, #57	; 0x39
 8012618:	d050      	beq.n	80126bc <_dtoa_r+0xb74>
 801261a:	3201      	adds	r2, #1
 801261c:	701a      	strb	r2, [r3, #0]
 801261e:	e749      	b.n	80124b4 <_dtoa_r+0x96c>
 8012620:	2a00      	cmp	r2, #0
 8012622:	dd03      	ble.n	801262c <_dtoa_r+0xae4>
 8012624:	2b39      	cmp	r3, #57	; 0x39
 8012626:	d0ee      	beq.n	8012606 <_dtoa_r+0xabe>
 8012628:	3301      	adds	r3, #1
 801262a:	e7c9      	b.n	80125c0 <_dtoa_r+0xa78>
 801262c:	9a02      	ldr	r2, [sp, #8]
 801262e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012630:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012634:	428a      	cmp	r2, r1
 8012636:	d02a      	beq.n	801268e <_dtoa_r+0xb46>
 8012638:	4651      	mov	r1, sl
 801263a:	2300      	movs	r3, #0
 801263c:	220a      	movs	r2, #10
 801263e:	4628      	mov	r0, r5
 8012640:	f000 fc7a 	bl	8012f38 <__multadd>
 8012644:	45b0      	cmp	r8, r6
 8012646:	4682      	mov	sl, r0
 8012648:	f04f 0300 	mov.w	r3, #0
 801264c:	f04f 020a 	mov.w	r2, #10
 8012650:	4641      	mov	r1, r8
 8012652:	4628      	mov	r0, r5
 8012654:	d107      	bne.n	8012666 <_dtoa_r+0xb1e>
 8012656:	f000 fc6f 	bl	8012f38 <__multadd>
 801265a:	4680      	mov	r8, r0
 801265c:	4606      	mov	r6, r0
 801265e:	9b02      	ldr	r3, [sp, #8]
 8012660:	3301      	adds	r3, #1
 8012662:	9302      	str	r3, [sp, #8]
 8012664:	e777      	b.n	8012556 <_dtoa_r+0xa0e>
 8012666:	f000 fc67 	bl	8012f38 <__multadd>
 801266a:	4631      	mov	r1, r6
 801266c:	4680      	mov	r8, r0
 801266e:	2300      	movs	r3, #0
 8012670:	220a      	movs	r2, #10
 8012672:	4628      	mov	r0, r5
 8012674:	f000 fc60 	bl	8012f38 <__multadd>
 8012678:	4606      	mov	r6, r0
 801267a:	e7f0      	b.n	801265e <_dtoa_r+0xb16>
 801267c:	f1bb 0f00 	cmp.w	fp, #0
 8012680:	bfcc      	ite	gt
 8012682:	465f      	movgt	r7, fp
 8012684:	2701      	movle	r7, #1
 8012686:	f04f 0800 	mov.w	r8, #0
 801268a:	9a08      	ldr	r2, [sp, #32]
 801268c:	4417      	add	r7, r2
 801268e:	4651      	mov	r1, sl
 8012690:	2201      	movs	r2, #1
 8012692:	4628      	mov	r0, r5
 8012694:	9302      	str	r3, [sp, #8]
 8012696:	f000 fe45 	bl	8013324 <__lshift>
 801269a:	4621      	mov	r1, r4
 801269c:	4682      	mov	sl, r0
 801269e:	f000 fead 	bl	80133fc <__mcmp>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	dcb2      	bgt.n	801260c <_dtoa_r+0xac4>
 80126a6:	d102      	bne.n	80126ae <_dtoa_r+0xb66>
 80126a8:	9b02      	ldr	r3, [sp, #8]
 80126aa:	07db      	lsls	r3, r3, #31
 80126ac:	d4ae      	bmi.n	801260c <_dtoa_r+0xac4>
 80126ae:	463b      	mov	r3, r7
 80126b0:	461f      	mov	r7, r3
 80126b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126b6:	2a30      	cmp	r2, #48	; 0x30
 80126b8:	d0fa      	beq.n	80126b0 <_dtoa_r+0xb68>
 80126ba:	e6fb      	b.n	80124b4 <_dtoa_r+0x96c>
 80126bc:	9a08      	ldr	r2, [sp, #32]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d1a5      	bne.n	801260e <_dtoa_r+0xac6>
 80126c2:	2331      	movs	r3, #49	; 0x31
 80126c4:	f109 0901 	add.w	r9, r9, #1
 80126c8:	7013      	strb	r3, [r2, #0]
 80126ca:	e6f3      	b.n	80124b4 <_dtoa_r+0x96c>
 80126cc:	4b13      	ldr	r3, [pc, #76]	; (801271c <_dtoa_r+0xbd4>)
 80126ce:	f7ff baa7 	b.w	8011c20 <_dtoa_r+0xd8>
 80126d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f47f aa80 	bne.w	8011bda <_dtoa_r+0x92>
 80126da:	4b11      	ldr	r3, [pc, #68]	; (8012720 <_dtoa_r+0xbd8>)
 80126dc:	f7ff baa0 	b.w	8011c20 <_dtoa_r+0xd8>
 80126e0:	f1bb 0f00 	cmp.w	fp, #0
 80126e4:	dc03      	bgt.n	80126ee <_dtoa_r+0xba6>
 80126e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	f73f aecc 	bgt.w	8012486 <_dtoa_r+0x93e>
 80126ee:	9f08      	ldr	r7, [sp, #32]
 80126f0:	4621      	mov	r1, r4
 80126f2:	4650      	mov	r0, sl
 80126f4:	f7ff f998 	bl	8011a28 <quorem>
 80126f8:	9a08      	ldr	r2, [sp, #32]
 80126fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80126fe:	f807 3b01 	strb.w	r3, [r7], #1
 8012702:	1aba      	subs	r2, r7, r2
 8012704:	4593      	cmp	fp, r2
 8012706:	ddb9      	ble.n	801267c <_dtoa_r+0xb34>
 8012708:	4651      	mov	r1, sl
 801270a:	2300      	movs	r3, #0
 801270c:	220a      	movs	r2, #10
 801270e:	4628      	mov	r0, r5
 8012710:	f000 fc12 	bl	8012f38 <__multadd>
 8012714:	4682      	mov	sl, r0
 8012716:	e7eb      	b.n	80126f0 <_dtoa_r+0xba8>
 8012718:	0801522c 	.word	0x0801522c
 801271c:	08015431 	.word	0x08015431
 8012720:	080151a9 	.word	0x080151a9

08012724 <rshift>:
 8012724:	6903      	ldr	r3, [r0, #16]
 8012726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801272a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801272e:	f100 0414 	add.w	r4, r0, #20
 8012732:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012736:	dd46      	ble.n	80127c6 <rshift+0xa2>
 8012738:	f011 011f 	ands.w	r1, r1, #31
 801273c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012740:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012744:	d10c      	bne.n	8012760 <rshift+0x3c>
 8012746:	4629      	mov	r1, r5
 8012748:	f100 0710 	add.w	r7, r0, #16
 801274c:	42b1      	cmp	r1, r6
 801274e:	d335      	bcc.n	80127bc <rshift+0x98>
 8012750:	1a9b      	subs	r3, r3, r2
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	1eea      	subs	r2, r5, #3
 8012756:	4296      	cmp	r6, r2
 8012758:	bf38      	it	cc
 801275a:	2300      	movcc	r3, #0
 801275c:	4423      	add	r3, r4
 801275e:	e015      	b.n	801278c <rshift+0x68>
 8012760:	46a1      	mov	r9, r4
 8012762:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012766:	f1c1 0820 	rsb	r8, r1, #32
 801276a:	40cf      	lsrs	r7, r1
 801276c:	f105 0e04 	add.w	lr, r5, #4
 8012770:	4576      	cmp	r6, lr
 8012772:	46f4      	mov	ip, lr
 8012774:	d816      	bhi.n	80127a4 <rshift+0x80>
 8012776:	1a9b      	subs	r3, r3, r2
 8012778:	009a      	lsls	r2, r3, #2
 801277a:	3a04      	subs	r2, #4
 801277c:	3501      	adds	r5, #1
 801277e:	42ae      	cmp	r6, r5
 8012780:	bf38      	it	cc
 8012782:	2200      	movcc	r2, #0
 8012784:	18a3      	adds	r3, r4, r2
 8012786:	50a7      	str	r7, [r4, r2]
 8012788:	b107      	cbz	r7, 801278c <rshift+0x68>
 801278a:	3304      	adds	r3, #4
 801278c:	42a3      	cmp	r3, r4
 801278e:	eba3 0204 	sub.w	r2, r3, r4
 8012792:	bf08      	it	eq
 8012794:	2300      	moveq	r3, #0
 8012796:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801279a:	6102      	str	r2, [r0, #16]
 801279c:	bf08      	it	eq
 801279e:	6143      	streq	r3, [r0, #20]
 80127a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127a4:	f8dc c000 	ldr.w	ip, [ip]
 80127a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80127ac:	ea4c 0707 	orr.w	r7, ip, r7
 80127b0:	f849 7b04 	str.w	r7, [r9], #4
 80127b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80127b8:	40cf      	lsrs	r7, r1
 80127ba:	e7d9      	b.n	8012770 <rshift+0x4c>
 80127bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80127c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80127c4:	e7c2      	b.n	801274c <rshift+0x28>
 80127c6:	4623      	mov	r3, r4
 80127c8:	e7e0      	b.n	801278c <rshift+0x68>

080127ca <__hexdig_fun>:
 80127ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80127ce:	2b09      	cmp	r3, #9
 80127d0:	d802      	bhi.n	80127d8 <__hexdig_fun+0xe>
 80127d2:	3820      	subs	r0, #32
 80127d4:	b2c0      	uxtb	r0, r0
 80127d6:	4770      	bx	lr
 80127d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80127dc:	2b05      	cmp	r3, #5
 80127de:	d801      	bhi.n	80127e4 <__hexdig_fun+0x1a>
 80127e0:	3847      	subs	r0, #71	; 0x47
 80127e2:	e7f7      	b.n	80127d4 <__hexdig_fun+0xa>
 80127e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80127e8:	2b05      	cmp	r3, #5
 80127ea:	d801      	bhi.n	80127f0 <__hexdig_fun+0x26>
 80127ec:	3827      	subs	r0, #39	; 0x27
 80127ee:	e7f1      	b.n	80127d4 <__hexdig_fun+0xa>
 80127f0:	2000      	movs	r0, #0
 80127f2:	4770      	bx	lr

080127f4 <__gethex>:
 80127f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f8:	b08b      	sub	sp, #44	; 0x2c
 80127fa:	9306      	str	r3, [sp, #24]
 80127fc:	4bb9      	ldr	r3, [pc, #740]	; (8012ae4 <__gethex+0x2f0>)
 80127fe:	9002      	str	r0, [sp, #8]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	468b      	mov	fp, r1
 8012804:	4618      	mov	r0, r3
 8012806:	4690      	mov	r8, r2
 8012808:	9303      	str	r3, [sp, #12]
 801280a:	f7ed fcb9 	bl	8000180 <strlen>
 801280e:	4682      	mov	sl, r0
 8012810:	9b03      	ldr	r3, [sp, #12]
 8012812:	f8db 2000 	ldr.w	r2, [fp]
 8012816:	4403      	add	r3, r0
 8012818:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801281c:	9307      	str	r3, [sp, #28]
 801281e:	1c93      	adds	r3, r2, #2
 8012820:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012824:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012828:	32fe      	adds	r2, #254	; 0xfe
 801282a:	18d1      	adds	r1, r2, r3
 801282c:	461f      	mov	r7, r3
 801282e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012832:	9101      	str	r1, [sp, #4]
 8012834:	2830      	cmp	r0, #48	; 0x30
 8012836:	d0f8      	beq.n	801282a <__gethex+0x36>
 8012838:	f7ff ffc7 	bl	80127ca <__hexdig_fun>
 801283c:	4604      	mov	r4, r0
 801283e:	2800      	cmp	r0, #0
 8012840:	d13a      	bne.n	80128b8 <__gethex+0xc4>
 8012842:	4652      	mov	r2, sl
 8012844:	4638      	mov	r0, r7
 8012846:	9903      	ldr	r1, [sp, #12]
 8012848:	f001 fc98 	bl	801417c <strncmp>
 801284c:	4605      	mov	r5, r0
 801284e:	2800      	cmp	r0, #0
 8012850:	d166      	bne.n	8012920 <__gethex+0x12c>
 8012852:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012856:	eb07 060a 	add.w	r6, r7, sl
 801285a:	f7ff ffb6 	bl	80127ca <__hexdig_fun>
 801285e:	2800      	cmp	r0, #0
 8012860:	d060      	beq.n	8012924 <__gethex+0x130>
 8012862:	4633      	mov	r3, r6
 8012864:	7818      	ldrb	r0, [r3, #0]
 8012866:	461f      	mov	r7, r3
 8012868:	2830      	cmp	r0, #48	; 0x30
 801286a:	f103 0301 	add.w	r3, r3, #1
 801286e:	d0f9      	beq.n	8012864 <__gethex+0x70>
 8012870:	f7ff ffab 	bl	80127ca <__hexdig_fun>
 8012874:	2301      	movs	r3, #1
 8012876:	fab0 f480 	clz	r4, r0
 801287a:	4635      	mov	r5, r6
 801287c:	0964      	lsrs	r4, r4, #5
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	463a      	mov	r2, r7
 8012882:	4616      	mov	r6, r2
 8012884:	7830      	ldrb	r0, [r6, #0]
 8012886:	3201      	adds	r2, #1
 8012888:	f7ff ff9f 	bl	80127ca <__hexdig_fun>
 801288c:	2800      	cmp	r0, #0
 801288e:	d1f8      	bne.n	8012882 <__gethex+0x8e>
 8012890:	4652      	mov	r2, sl
 8012892:	4630      	mov	r0, r6
 8012894:	9903      	ldr	r1, [sp, #12]
 8012896:	f001 fc71 	bl	801417c <strncmp>
 801289a:	b980      	cbnz	r0, 80128be <__gethex+0xca>
 801289c:	b94d      	cbnz	r5, 80128b2 <__gethex+0xbe>
 801289e:	eb06 050a 	add.w	r5, r6, sl
 80128a2:	462a      	mov	r2, r5
 80128a4:	4616      	mov	r6, r2
 80128a6:	7830      	ldrb	r0, [r6, #0]
 80128a8:	3201      	adds	r2, #1
 80128aa:	f7ff ff8e 	bl	80127ca <__hexdig_fun>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d1f8      	bne.n	80128a4 <__gethex+0xb0>
 80128b2:	1bad      	subs	r5, r5, r6
 80128b4:	00ad      	lsls	r5, r5, #2
 80128b6:	e004      	b.n	80128c2 <__gethex+0xce>
 80128b8:	2400      	movs	r4, #0
 80128ba:	4625      	mov	r5, r4
 80128bc:	e7e0      	b.n	8012880 <__gethex+0x8c>
 80128be:	2d00      	cmp	r5, #0
 80128c0:	d1f7      	bne.n	80128b2 <__gethex+0xbe>
 80128c2:	7833      	ldrb	r3, [r6, #0]
 80128c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80128c8:	2b50      	cmp	r3, #80	; 0x50
 80128ca:	d139      	bne.n	8012940 <__gethex+0x14c>
 80128cc:	7873      	ldrb	r3, [r6, #1]
 80128ce:	2b2b      	cmp	r3, #43	; 0x2b
 80128d0:	d02a      	beq.n	8012928 <__gethex+0x134>
 80128d2:	2b2d      	cmp	r3, #45	; 0x2d
 80128d4:	d02c      	beq.n	8012930 <__gethex+0x13c>
 80128d6:	f04f 0900 	mov.w	r9, #0
 80128da:	1c71      	adds	r1, r6, #1
 80128dc:	7808      	ldrb	r0, [r1, #0]
 80128de:	f7ff ff74 	bl	80127ca <__hexdig_fun>
 80128e2:	1e43      	subs	r3, r0, #1
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	2b18      	cmp	r3, #24
 80128e8:	d82a      	bhi.n	8012940 <__gethex+0x14c>
 80128ea:	f1a0 0210 	sub.w	r2, r0, #16
 80128ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80128f2:	f7ff ff6a 	bl	80127ca <__hexdig_fun>
 80128f6:	1e43      	subs	r3, r0, #1
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b18      	cmp	r3, #24
 80128fc:	d91b      	bls.n	8012936 <__gethex+0x142>
 80128fe:	f1b9 0f00 	cmp.w	r9, #0
 8012902:	d000      	beq.n	8012906 <__gethex+0x112>
 8012904:	4252      	negs	r2, r2
 8012906:	4415      	add	r5, r2
 8012908:	f8cb 1000 	str.w	r1, [fp]
 801290c:	b1d4      	cbz	r4, 8012944 <__gethex+0x150>
 801290e:	9b01      	ldr	r3, [sp, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	bf14      	ite	ne
 8012914:	2700      	movne	r7, #0
 8012916:	2706      	moveq	r7, #6
 8012918:	4638      	mov	r0, r7
 801291a:	b00b      	add	sp, #44	; 0x2c
 801291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012920:	463e      	mov	r6, r7
 8012922:	4625      	mov	r5, r4
 8012924:	2401      	movs	r4, #1
 8012926:	e7cc      	b.n	80128c2 <__gethex+0xce>
 8012928:	f04f 0900 	mov.w	r9, #0
 801292c:	1cb1      	adds	r1, r6, #2
 801292e:	e7d5      	b.n	80128dc <__gethex+0xe8>
 8012930:	f04f 0901 	mov.w	r9, #1
 8012934:	e7fa      	b.n	801292c <__gethex+0x138>
 8012936:	230a      	movs	r3, #10
 8012938:	fb03 0202 	mla	r2, r3, r2, r0
 801293c:	3a10      	subs	r2, #16
 801293e:	e7d6      	b.n	80128ee <__gethex+0xfa>
 8012940:	4631      	mov	r1, r6
 8012942:	e7e1      	b.n	8012908 <__gethex+0x114>
 8012944:	4621      	mov	r1, r4
 8012946:	1bf3      	subs	r3, r6, r7
 8012948:	3b01      	subs	r3, #1
 801294a:	2b07      	cmp	r3, #7
 801294c:	dc0a      	bgt.n	8012964 <__gethex+0x170>
 801294e:	9802      	ldr	r0, [sp, #8]
 8012950:	f000 fa90 	bl	8012e74 <_Balloc>
 8012954:	4604      	mov	r4, r0
 8012956:	b940      	cbnz	r0, 801296a <__gethex+0x176>
 8012958:	4602      	mov	r2, r0
 801295a:	21de      	movs	r1, #222	; 0xde
 801295c:	4b62      	ldr	r3, [pc, #392]	; (8012ae8 <__gethex+0x2f4>)
 801295e:	4863      	ldr	r0, [pc, #396]	; (8012aec <__gethex+0x2f8>)
 8012960:	f001 fce2 	bl	8014328 <__assert_func>
 8012964:	3101      	adds	r1, #1
 8012966:	105b      	asrs	r3, r3, #1
 8012968:	e7ef      	b.n	801294a <__gethex+0x156>
 801296a:	f04f 0b00 	mov.w	fp, #0
 801296e:	f100 0914 	add.w	r9, r0, #20
 8012972:	f1ca 0301 	rsb	r3, sl, #1
 8012976:	f8cd 9010 	str.w	r9, [sp, #16]
 801297a:	f8cd b004 	str.w	fp, [sp, #4]
 801297e:	9308      	str	r3, [sp, #32]
 8012980:	42b7      	cmp	r7, r6
 8012982:	d33f      	bcc.n	8012a04 <__gethex+0x210>
 8012984:	9f04      	ldr	r7, [sp, #16]
 8012986:	9b01      	ldr	r3, [sp, #4]
 8012988:	f847 3b04 	str.w	r3, [r7], #4
 801298c:	eba7 0709 	sub.w	r7, r7, r9
 8012990:	10bf      	asrs	r7, r7, #2
 8012992:	6127      	str	r7, [r4, #16]
 8012994:	4618      	mov	r0, r3
 8012996:	f000 fb63 	bl	8013060 <__hi0bits>
 801299a:	017f      	lsls	r7, r7, #5
 801299c:	f8d8 6000 	ldr.w	r6, [r8]
 80129a0:	1a3f      	subs	r7, r7, r0
 80129a2:	42b7      	cmp	r7, r6
 80129a4:	dd62      	ble.n	8012a6c <__gethex+0x278>
 80129a6:	1bbf      	subs	r7, r7, r6
 80129a8:	4639      	mov	r1, r7
 80129aa:	4620      	mov	r0, r4
 80129ac:	f000 fef9 	bl	80137a2 <__any_on>
 80129b0:	4682      	mov	sl, r0
 80129b2:	b1a8      	cbz	r0, 80129e0 <__gethex+0x1ec>
 80129b4:	f04f 0a01 	mov.w	sl, #1
 80129b8:	1e7b      	subs	r3, r7, #1
 80129ba:	1159      	asrs	r1, r3, #5
 80129bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80129c0:	f003 021f 	and.w	r2, r3, #31
 80129c4:	fa0a f202 	lsl.w	r2, sl, r2
 80129c8:	420a      	tst	r2, r1
 80129ca:	d009      	beq.n	80129e0 <__gethex+0x1ec>
 80129cc:	4553      	cmp	r3, sl
 80129ce:	dd05      	ble.n	80129dc <__gethex+0x1e8>
 80129d0:	4620      	mov	r0, r4
 80129d2:	1eb9      	subs	r1, r7, #2
 80129d4:	f000 fee5 	bl	80137a2 <__any_on>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d144      	bne.n	8012a66 <__gethex+0x272>
 80129dc:	f04f 0a02 	mov.w	sl, #2
 80129e0:	4639      	mov	r1, r7
 80129e2:	4620      	mov	r0, r4
 80129e4:	f7ff fe9e 	bl	8012724 <rshift>
 80129e8:	443d      	add	r5, r7
 80129ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129ee:	42ab      	cmp	r3, r5
 80129f0:	da4a      	bge.n	8012a88 <__gethex+0x294>
 80129f2:	4621      	mov	r1, r4
 80129f4:	9802      	ldr	r0, [sp, #8]
 80129f6:	f000 fa7d 	bl	8012ef4 <_Bfree>
 80129fa:	2300      	movs	r3, #0
 80129fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80129fe:	27a3      	movs	r7, #163	; 0xa3
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	e789      	b.n	8012918 <__gethex+0x124>
 8012a04:	1e73      	subs	r3, r6, #1
 8012a06:	9a07      	ldr	r2, [sp, #28]
 8012a08:	9305      	str	r3, [sp, #20]
 8012a0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	d019      	beq.n	8012a46 <__gethex+0x252>
 8012a12:	f1bb 0f20 	cmp.w	fp, #32
 8012a16:	d107      	bne.n	8012a28 <__gethex+0x234>
 8012a18:	9b04      	ldr	r3, [sp, #16]
 8012a1a:	9a01      	ldr	r2, [sp, #4]
 8012a1c:	f843 2b04 	str.w	r2, [r3], #4
 8012a20:	9304      	str	r3, [sp, #16]
 8012a22:	2300      	movs	r3, #0
 8012a24:	469b      	mov	fp, r3
 8012a26:	9301      	str	r3, [sp, #4]
 8012a28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012a2c:	f7ff fecd 	bl	80127ca <__hexdig_fun>
 8012a30:	9b01      	ldr	r3, [sp, #4]
 8012a32:	f000 000f 	and.w	r0, r0, #15
 8012a36:	fa00 f00b 	lsl.w	r0, r0, fp
 8012a3a:	4303      	orrs	r3, r0
 8012a3c:	9301      	str	r3, [sp, #4]
 8012a3e:	f10b 0b04 	add.w	fp, fp, #4
 8012a42:	9b05      	ldr	r3, [sp, #20]
 8012a44:	e00d      	b.n	8012a62 <__gethex+0x26e>
 8012a46:	9b05      	ldr	r3, [sp, #20]
 8012a48:	9a08      	ldr	r2, [sp, #32]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	42bb      	cmp	r3, r7
 8012a4e:	d3e0      	bcc.n	8012a12 <__gethex+0x21e>
 8012a50:	4618      	mov	r0, r3
 8012a52:	4652      	mov	r2, sl
 8012a54:	9903      	ldr	r1, [sp, #12]
 8012a56:	9309      	str	r3, [sp, #36]	; 0x24
 8012a58:	f001 fb90 	bl	801417c <strncmp>
 8012a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d1d7      	bne.n	8012a12 <__gethex+0x21e>
 8012a62:	461e      	mov	r6, r3
 8012a64:	e78c      	b.n	8012980 <__gethex+0x18c>
 8012a66:	f04f 0a03 	mov.w	sl, #3
 8012a6a:	e7b9      	b.n	80129e0 <__gethex+0x1ec>
 8012a6c:	da09      	bge.n	8012a82 <__gethex+0x28e>
 8012a6e:	1bf7      	subs	r7, r6, r7
 8012a70:	4621      	mov	r1, r4
 8012a72:	463a      	mov	r2, r7
 8012a74:	9802      	ldr	r0, [sp, #8]
 8012a76:	f000 fc55 	bl	8013324 <__lshift>
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	1bed      	subs	r5, r5, r7
 8012a7e:	f100 0914 	add.w	r9, r0, #20
 8012a82:	f04f 0a00 	mov.w	sl, #0
 8012a86:	e7b0      	b.n	80129ea <__gethex+0x1f6>
 8012a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012a8c:	42a8      	cmp	r0, r5
 8012a8e:	dd71      	ble.n	8012b74 <__gethex+0x380>
 8012a90:	1b45      	subs	r5, r0, r5
 8012a92:	42ae      	cmp	r6, r5
 8012a94:	dc34      	bgt.n	8012b00 <__gethex+0x30c>
 8012a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a9a:	2b02      	cmp	r3, #2
 8012a9c:	d028      	beq.n	8012af0 <__gethex+0x2fc>
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d02a      	beq.n	8012af8 <__gethex+0x304>
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d115      	bne.n	8012ad2 <__gethex+0x2de>
 8012aa6:	42ae      	cmp	r6, r5
 8012aa8:	d113      	bne.n	8012ad2 <__gethex+0x2de>
 8012aaa:	2e01      	cmp	r6, #1
 8012aac:	d10b      	bne.n	8012ac6 <__gethex+0x2d2>
 8012aae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ab2:	9a06      	ldr	r2, [sp, #24]
 8012ab4:	2762      	movs	r7, #98	; 0x62
 8012ab6:	6013      	str	r3, [r2, #0]
 8012ab8:	2301      	movs	r3, #1
 8012aba:	6123      	str	r3, [r4, #16]
 8012abc:	f8c9 3000 	str.w	r3, [r9]
 8012ac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ac2:	601c      	str	r4, [r3, #0]
 8012ac4:	e728      	b.n	8012918 <__gethex+0x124>
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	1e71      	subs	r1, r6, #1
 8012aca:	f000 fe6a 	bl	80137a2 <__any_on>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d1ed      	bne.n	8012aae <__gethex+0x2ba>
 8012ad2:	4621      	mov	r1, r4
 8012ad4:	9802      	ldr	r0, [sp, #8]
 8012ad6:	f000 fa0d 	bl	8012ef4 <_Bfree>
 8012ada:	2300      	movs	r3, #0
 8012adc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ade:	2750      	movs	r7, #80	; 0x50
 8012ae0:	6013      	str	r3, [r2, #0]
 8012ae2:	e719      	b.n	8012918 <__gethex+0x124>
 8012ae4:	080152a8 	.word	0x080152a8
 8012ae8:	0801522c 	.word	0x0801522c
 8012aec:	0801523d 	.word	0x0801523d
 8012af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1ed      	bne.n	8012ad2 <__gethex+0x2de>
 8012af6:	e7da      	b.n	8012aae <__gethex+0x2ba>
 8012af8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1d7      	bne.n	8012aae <__gethex+0x2ba>
 8012afe:	e7e8      	b.n	8012ad2 <__gethex+0x2de>
 8012b00:	1e6f      	subs	r7, r5, #1
 8012b02:	f1ba 0f00 	cmp.w	sl, #0
 8012b06:	d132      	bne.n	8012b6e <__gethex+0x37a>
 8012b08:	b127      	cbz	r7, 8012b14 <__gethex+0x320>
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f000 fe48 	bl	80137a2 <__any_on>
 8012b12:	4682      	mov	sl, r0
 8012b14:	2101      	movs	r1, #1
 8012b16:	117b      	asrs	r3, r7, #5
 8012b18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012b1c:	f007 071f 	and.w	r7, r7, #31
 8012b20:	fa01 f707 	lsl.w	r7, r1, r7
 8012b24:	421f      	tst	r7, r3
 8012b26:	f04f 0702 	mov.w	r7, #2
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	bf18      	it	ne
 8012b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8012b34:	1b76      	subs	r6, r6, r5
 8012b36:	f7ff fdf5 	bl	8012724 <rshift>
 8012b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b3e:	f1ba 0f00 	cmp.w	sl, #0
 8012b42:	d048      	beq.n	8012bd6 <__gethex+0x3e2>
 8012b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b48:	2b02      	cmp	r3, #2
 8012b4a:	d015      	beq.n	8012b78 <__gethex+0x384>
 8012b4c:	2b03      	cmp	r3, #3
 8012b4e:	d017      	beq.n	8012b80 <__gethex+0x38c>
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d109      	bne.n	8012b68 <__gethex+0x374>
 8012b54:	f01a 0f02 	tst.w	sl, #2
 8012b58:	d006      	beq.n	8012b68 <__gethex+0x374>
 8012b5a:	f8d9 0000 	ldr.w	r0, [r9]
 8012b5e:	ea4a 0a00 	orr.w	sl, sl, r0
 8012b62:	f01a 0f01 	tst.w	sl, #1
 8012b66:	d10e      	bne.n	8012b86 <__gethex+0x392>
 8012b68:	f047 0710 	orr.w	r7, r7, #16
 8012b6c:	e033      	b.n	8012bd6 <__gethex+0x3e2>
 8012b6e:	f04f 0a01 	mov.w	sl, #1
 8012b72:	e7cf      	b.n	8012b14 <__gethex+0x320>
 8012b74:	2701      	movs	r7, #1
 8012b76:	e7e2      	b.n	8012b3e <__gethex+0x34a>
 8012b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b7a:	f1c3 0301 	rsb	r3, r3, #1
 8012b7e:	9315      	str	r3, [sp, #84]	; 0x54
 8012b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d0f0      	beq.n	8012b68 <__gethex+0x374>
 8012b86:	f04f 0c00 	mov.w	ip, #0
 8012b8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012b8e:	f104 0314 	add.w	r3, r4, #20
 8012b92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012b96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012ba4:	d01c      	beq.n	8012be0 <__gethex+0x3ec>
 8012ba6:	3201      	adds	r2, #1
 8012ba8:	6002      	str	r2, [r0, #0]
 8012baa:	2f02      	cmp	r7, #2
 8012bac:	f104 0314 	add.w	r3, r4, #20
 8012bb0:	d13d      	bne.n	8012c2e <__gethex+0x43a>
 8012bb2:	f8d8 2000 	ldr.w	r2, [r8]
 8012bb6:	3a01      	subs	r2, #1
 8012bb8:	42b2      	cmp	r2, r6
 8012bba:	d10a      	bne.n	8012bd2 <__gethex+0x3de>
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	1171      	asrs	r1, r6, #5
 8012bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bc4:	f006 061f 	and.w	r6, r6, #31
 8012bc8:	fa02 f606 	lsl.w	r6, r2, r6
 8012bcc:	421e      	tst	r6, r3
 8012bce:	bf18      	it	ne
 8012bd0:	4617      	movne	r7, r2
 8012bd2:	f047 0720 	orr.w	r7, r7, #32
 8012bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bd8:	601c      	str	r4, [r3, #0]
 8012bda:	9b06      	ldr	r3, [sp, #24]
 8012bdc:	601d      	str	r5, [r3, #0]
 8012bde:	e69b      	b.n	8012918 <__gethex+0x124>
 8012be0:	4299      	cmp	r1, r3
 8012be2:	f843 cc04 	str.w	ip, [r3, #-4]
 8012be6:	d8d8      	bhi.n	8012b9a <__gethex+0x3a6>
 8012be8:	68a3      	ldr	r3, [r4, #8]
 8012bea:	459b      	cmp	fp, r3
 8012bec:	db17      	blt.n	8012c1e <__gethex+0x42a>
 8012bee:	6861      	ldr	r1, [r4, #4]
 8012bf0:	9802      	ldr	r0, [sp, #8]
 8012bf2:	3101      	adds	r1, #1
 8012bf4:	f000 f93e 	bl	8012e74 <_Balloc>
 8012bf8:	4681      	mov	r9, r0
 8012bfa:	b918      	cbnz	r0, 8012c04 <__gethex+0x410>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	2184      	movs	r1, #132	; 0x84
 8012c00:	4b19      	ldr	r3, [pc, #100]	; (8012c68 <__gethex+0x474>)
 8012c02:	e6ac      	b.n	801295e <__gethex+0x16a>
 8012c04:	6922      	ldr	r2, [r4, #16]
 8012c06:	f104 010c 	add.w	r1, r4, #12
 8012c0a:	3202      	adds	r2, #2
 8012c0c:	0092      	lsls	r2, r2, #2
 8012c0e:	300c      	adds	r0, #12
 8012c10:	f7fc ffe8 	bl	800fbe4 <memcpy>
 8012c14:	4621      	mov	r1, r4
 8012c16:	9802      	ldr	r0, [sp, #8]
 8012c18:	f000 f96c 	bl	8012ef4 <_Bfree>
 8012c1c:	464c      	mov	r4, r9
 8012c1e:	6923      	ldr	r3, [r4, #16]
 8012c20:	1c5a      	adds	r2, r3, #1
 8012c22:	6122      	str	r2, [r4, #16]
 8012c24:	2201      	movs	r2, #1
 8012c26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012c2a:	615a      	str	r2, [r3, #20]
 8012c2c:	e7bd      	b.n	8012baa <__gethex+0x3b6>
 8012c2e:	6922      	ldr	r2, [r4, #16]
 8012c30:	455a      	cmp	r2, fp
 8012c32:	dd0b      	ble.n	8012c4c <__gethex+0x458>
 8012c34:	2101      	movs	r1, #1
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7ff fd74 	bl	8012724 <rshift>
 8012c3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c40:	3501      	adds	r5, #1
 8012c42:	42ab      	cmp	r3, r5
 8012c44:	f6ff aed5 	blt.w	80129f2 <__gethex+0x1fe>
 8012c48:	2701      	movs	r7, #1
 8012c4a:	e7c2      	b.n	8012bd2 <__gethex+0x3de>
 8012c4c:	f016 061f 	ands.w	r6, r6, #31
 8012c50:	d0fa      	beq.n	8012c48 <__gethex+0x454>
 8012c52:	449a      	add	sl, r3
 8012c54:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012c58:	f000 fa02 	bl	8013060 <__hi0bits>
 8012c5c:	f1c6 0620 	rsb	r6, r6, #32
 8012c60:	42b0      	cmp	r0, r6
 8012c62:	dbe7      	blt.n	8012c34 <__gethex+0x440>
 8012c64:	e7f0      	b.n	8012c48 <__gethex+0x454>
 8012c66:	bf00      	nop
 8012c68:	0801522c 	.word	0x0801522c

08012c6c <L_shift>:
 8012c6c:	f1c2 0208 	rsb	r2, r2, #8
 8012c70:	0092      	lsls	r2, r2, #2
 8012c72:	b570      	push	{r4, r5, r6, lr}
 8012c74:	f1c2 0620 	rsb	r6, r2, #32
 8012c78:	6843      	ldr	r3, [r0, #4]
 8012c7a:	6804      	ldr	r4, [r0, #0]
 8012c7c:	fa03 f506 	lsl.w	r5, r3, r6
 8012c80:	432c      	orrs	r4, r5
 8012c82:	40d3      	lsrs	r3, r2
 8012c84:	6004      	str	r4, [r0, #0]
 8012c86:	f840 3f04 	str.w	r3, [r0, #4]!
 8012c8a:	4288      	cmp	r0, r1
 8012c8c:	d3f4      	bcc.n	8012c78 <L_shift+0xc>
 8012c8e:	bd70      	pop	{r4, r5, r6, pc}

08012c90 <__match>:
 8012c90:	b530      	push	{r4, r5, lr}
 8012c92:	6803      	ldr	r3, [r0, #0]
 8012c94:	3301      	adds	r3, #1
 8012c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c9a:	b914      	cbnz	r4, 8012ca2 <__match+0x12>
 8012c9c:	6003      	str	r3, [r0, #0]
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	bd30      	pop	{r4, r5, pc}
 8012ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ca6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012caa:	2d19      	cmp	r5, #25
 8012cac:	bf98      	it	ls
 8012cae:	3220      	addls	r2, #32
 8012cb0:	42a2      	cmp	r2, r4
 8012cb2:	d0f0      	beq.n	8012c96 <__match+0x6>
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e7f3      	b.n	8012ca0 <__match+0x10>

08012cb8 <__hexnan>:
 8012cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cbc:	2500      	movs	r5, #0
 8012cbe:	680b      	ldr	r3, [r1, #0]
 8012cc0:	4682      	mov	sl, r0
 8012cc2:	115e      	asrs	r6, r3, #5
 8012cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012cc8:	f013 031f 	ands.w	r3, r3, #31
 8012ccc:	bf18      	it	ne
 8012cce:	3604      	addne	r6, #4
 8012cd0:	1f37      	subs	r7, r6, #4
 8012cd2:	4690      	mov	r8, r2
 8012cd4:	46b9      	mov	r9, r7
 8012cd6:	463c      	mov	r4, r7
 8012cd8:	46ab      	mov	fp, r5
 8012cda:	b087      	sub	sp, #28
 8012cdc:	6801      	ldr	r1, [r0, #0]
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	f846 5c04 	str.w	r5, [r6, #-4]
 8012ce4:	9502      	str	r5, [sp, #8]
 8012ce6:	784a      	ldrb	r2, [r1, #1]
 8012ce8:	1c4b      	adds	r3, r1, #1
 8012cea:	9303      	str	r3, [sp, #12]
 8012cec:	b342      	cbz	r2, 8012d40 <__hexnan+0x88>
 8012cee:	4610      	mov	r0, r2
 8012cf0:	9105      	str	r1, [sp, #20]
 8012cf2:	9204      	str	r2, [sp, #16]
 8012cf4:	f7ff fd69 	bl	80127ca <__hexdig_fun>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d14f      	bne.n	8012d9c <__hexnan+0xe4>
 8012cfc:	9a04      	ldr	r2, [sp, #16]
 8012cfe:	9905      	ldr	r1, [sp, #20]
 8012d00:	2a20      	cmp	r2, #32
 8012d02:	d818      	bhi.n	8012d36 <__hexnan+0x7e>
 8012d04:	9b02      	ldr	r3, [sp, #8]
 8012d06:	459b      	cmp	fp, r3
 8012d08:	dd13      	ble.n	8012d32 <__hexnan+0x7a>
 8012d0a:	454c      	cmp	r4, r9
 8012d0c:	d206      	bcs.n	8012d1c <__hexnan+0x64>
 8012d0e:	2d07      	cmp	r5, #7
 8012d10:	dc04      	bgt.n	8012d1c <__hexnan+0x64>
 8012d12:	462a      	mov	r2, r5
 8012d14:	4649      	mov	r1, r9
 8012d16:	4620      	mov	r0, r4
 8012d18:	f7ff ffa8 	bl	8012c6c <L_shift>
 8012d1c:	4544      	cmp	r4, r8
 8012d1e:	d950      	bls.n	8012dc2 <__hexnan+0x10a>
 8012d20:	2300      	movs	r3, #0
 8012d22:	f1a4 0904 	sub.w	r9, r4, #4
 8012d26:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d2a:	461d      	mov	r5, r3
 8012d2c:	464c      	mov	r4, r9
 8012d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8012d32:	9903      	ldr	r1, [sp, #12]
 8012d34:	e7d7      	b.n	8012ce6 <__hexnan+0x2e>
 8012d36:	2a29      	cmp	r2, #41	; 0x29
 8012d38:	d156      	bne.n	8012de8 <__hexnan+0x130>
 8012d3a:	3102      	adds	r1, #2
 8012d3c:	f8ca 1000 	str.w	r1, [sl]
 8012d40:	f1bb 0f00 	cmp.w	fp, #0
 8012d44:	d050      	beq.n	8012de8 <__hexnan+0x130>
 8012d46:	454c      	cmp	r4, r9
 8012d48:	d206      	bcs.n	8012d58 <__hexnan+0xa0>
 8012d4a:	2d07      	cmp	r5, #7
 8012d4c:	dc04      	bgt.n	8012d58 <__hexnan+0xa0>
 8012d4e:	462a      	mov	r2, r5
 8012d50:	4649      	mov	r1, r9
 8012d52:	4620      	mov	r0, r4
 8012d54:	f7ff ff8a 	bl	8012c6c <L_shift>
 8012d58:	4544      	cmp	r4, r8
 8012d5a:	d934      	bls.n	8012dc6 <__hexnan+0x10e>
 8012d5c:	4623      	mov	r3, r4
 8012d5e:	f1a8 0204 	sub.w	r2, r8, #4
 8012d62:	f853 1b04 	ldr.w	r1, [r3], #4
 8012d66:	429f      	cmp	r7, r3
 8012d68:	f842 1f04 	str.w	r1, [r2, #4]!
 8012d6c:	d2f9      	bcs.n	8012d62 <__hexnan+0xaa>
 8012d6e:	1b3b      	subs	r3, r7, r4
 8012d70:	f023 0303 	bic.w	r3, r3, #3
 8012d74:	3304      	adds	r3, #4
 8012d76:	3401      	adds	r4, #1
 8012d78:	3e03      	subs	r6, #3
 8012d7a:	42b4      	cmp	r4, r6
 8012d7c:	bf88      	it	hi
 8012d7e:	2304      	movhi	r3, #4
 8012d80:	2200      	movs	r2, #0
 8012d82:	4443      	add	r3, r8
 8012d84:	f843 2b04 	str.w	r2, [r3], #4
 8012d88:	429f      	cmp	r7, r3
 8012d8a:	d2fb      	bcs.n	8012d84 <__hexnan+0xcc>
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	b91b      	cbnz	r3, 8012d98 <__hexnan+0xe0>
 8012d90:	4547      	cmp	r7, r8
 8012d92:	d127      	bne.n	8012de4 <__hexnan+0x12c>
 8012d94:	2301      	movs	r3, #1
 8012d96:	603b      	str	r3, [r7, #0]
 8012d98:	2005      	movs	r0, #5
 8012d9a:	e026      	b.n	8012dea <__hexnan+0x132>
 8012d9c:	3501      	adds	r5, #1
 8012d9e:	2d08      	cmp	r5, #8
 8012da0:	f10b 0b01 	add.w	fp, fp, #1
 8012da4:	dd06      	ble.n	8012db4 <__hexnan+0xfc>
 8012da6:	4544      	cmp	r4, r8
 8012da8:	d9c3      	bls.n	8012d32 <__hexnan+0x7a>
 8012daa:	2300      	movs	r3, #0
 8012dac:	2501      	movs	r5, #1
 8012dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8012db2:	3c04      	subs	r4, #4
 8012db4:	6822      	ldr	r2, [r4, #0]
 8012db6:	f000 000f 	and.w	r0, r0, #15
 8012dba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012dbe:	6022      	str	r2, [r4, #0]
 8012dc0:	e7b7      	b.n	8012d32 <__hexnan+0x7a>
 8012dc2:	2508      	movs	r5, #8
 8012dc4:	e7b5      	b.n	8012d32 <__hexnan+0x7a>
 8012dc6:	9b01      	ldr	r3, [sp, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d0df      	beq.n	8012d8c <__hexnan+0xd4>
 8012dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012dd0:	f1c3 0320 	rsb	r3, r3, #32
 8012dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8012dd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ddc:	401a      	ands	r2, r3
 8012dde:	f846 2c04 	str.w	r2, [r6, #-4]
 8012de2:	e7d3      	b.n	8012d8c <__hexnan+0xd4>
 8012de4:	3f04      	subs	r7, #4
 8012de6:	e7d1      	b.n	8012d8c <__hexnan+0xd4>
 8012de8:	2004      	movs	r0, #4
 8012dea:	b007      	add	sp, #28
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012df0 <_localeconv_r>:
 8012df0:	4800      	ldr	r0, [pc, #0]	; (8012df4 <_localeconv_r+0x4>)
 8012df2:	4770      	bx	lr
 8012df4:	2000037c 	.word	0x2000037c

08012df8 <_lseek_r>:
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	4611      	mov	r1, r2
 8012e00:	2200      	movs	r2, #0
 8012e02:	4d05      	ldr	r5, [pc, #20]	; (8012e18 <_lseek_r+0x20>)
 8012e04:	602a      	str	r2, [r5, #0]
 8012e06:	461a      	mov	r2, r3
 8012e08:	f7f2 f8a2 	bl	8004f50 <_lseek>
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	d102      	bne.n	8012e16 <_lseek_r+0x1e>
 8012e10:	682b      	ldr	r3, [r5, #0]
 8012e12:	b103      	cbz	r3, 8012e16 <_lseek_r+0x1e>
 8012e14:	6023      	str	r3, [r4, #0]
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	20001d4c 	.word	0x20001d4c

08012e1c <__ascii_mbtowc>:
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	b901      	cbnz	r1, 8012e22 <__ascii_mbtowc+0x6>
 8012e20:	a901      	add	r1, sp, #4
 8012e22:	b142      	cbz	r2, 8012e36 <__ascii_mbtowc+0x1a>
 8012e24:	b14b      	cbz	r3, 8012e3a <__ascii_mbtowc+0x1e>
 8012e26:	7813      	ldrb	r3, [r2, #0]
 8012e28:	600b      	str	r3, [r1, #0]
 8012e2a:	7812      	ldrb	r2, [r2, #0]
 8012e2c:	1e10      	subs	r0, r2, #0
 8012e2e:	bf18      	it	ne
 8012e30:	2001      	movne	r0, #1
 8012e32:	b002      	add	sp, #8
 8012e34:	4770      	bx	lr
 8012e36:	4610      	mov	r0, r2
 8012e38:	e7fb      	b.n	8012e32 <__ascii_mbtowc+0x16>
 8012e3a:	f06f 0001 	mvn.w	r0, #1
 8012e3e:	e7f8      	b.n	8012e32 <__ascii_mbtowc+0x16>

08012e40 <memchr>:
 8012e40:	4603      	mov	r3, r0
 8012e42:	b510      	push	{r4, lr}
 8012e44:	b2c9      	uxtb	r1, r1
 8012e46:	4402      	add	r2, r0
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	d101      	bne.n	8012e52 <memchr+0x12>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	e003      	b.n	8012e5a <memchr+0x1a>
 8012e52:	7804      	ldrb	r4, [r0, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	428c      	cmp	r4, r1
 8012e58:	d1f6      	bne.n	8012e48 <memchr+0x8>
 8012e5a:	bd10      	pop	{r4, pc}

08012e5c <__malloc_lock>:
 8012e5c:	4801      	ldr	r0, [pc, #4]	; (8012e64 <__malloc_lock+0x8>)
 8012e5e:	f7f2 b980 	b.w	8005162 <__retarget_lock_acquire_recursive>
 8012e62:	bf00      	nop
 8012e64:	200006f8 	.word	0x200006f8

08012e68 <__malloc_unlock>:
 8012e68:	4801      	ldr	r0, [pc, #4]	; (8012e70 <__malloc_unlock+0x8>)
 8012e6a:	f7f2 b98e 	b.w	800518a <__retarget_lock_release_recursive>
 8012e6e:	bf00      	nop
 8012e70:	200006f8 	.word	0x200006f8

08012e74 <_Balloc>:
 8012e74:	b570      	push	{r4, r5, r6, lr}
 8012e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e78:	4604      	mov	r4, r0
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	b976      	cbnz	r6, 8012e9c <_Balloc+0x28>
 8012e7e:	2010      	movs	r0, #16
 8012e80:	f7fc fea0 	bl	800fbc4 <malloc>
 8012e84:	4602      	mov	r2, r0
 8012e86:	6260      	str	r0, [r4, #36]	; 0x24
 8012e88:	b920      	cbnz	r0, 8012e94 <_Balloc+0x20>
 8012e8a:	2166      	movs	r1, #102	; 0x66
 8012e8c:	4b17      	ldr	r3, [pc, #92]	; (8012eec <_Balloc+0x78>)
 8012e8e:	4818      	ldr	r0, [pc, #96]	; (8012ef0 <_Balloc+0x7c>)
 8012e90:	f001 fa4a 	bl	8014328 <__assert_func>
 8012e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e98:	6006      	str	r6, [r0, #0]
 8012e9a:	60c6      	str	r6, [r0, #12]
 8012e9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e9e:	68f3      	ldr	r3, [r6, #12]
 8012ea0:	b183      	cbz	r3, 8012ec4 <_Balloc+0x50>
 8012ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012eaa:	b9b8      	cbnz	r0, 8012edc <_Balloc+0x68>
 8012eac:	2101      	movs	r1, #1
 8012eae:	fa01 f605 	lsl.w	r6, r1, r5
 8012eb2:	1d72      	adds	r2, r6, #5
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	0092      	lsls	r2, r2, #2
 8012eb8:	f7fc fec4 	bl	800fc44 <_calloc_r>
 8012ebc:	b160      	cbz	r0, 8012ed8 <_Balloc+0x64>
 8012ebe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ec2:	e00e      	b.n	8012ee2 <_Balloc+0x6e>
 8012ec4:	2221      	movs	r2, #33	; 0x21
 8012ec6:	2104      	movs	r1, #4
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f7fc febb 	bl	800fc44 <_calloc_r>
 8012ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ed0:	60f0      	str	r0, [r6, #12]
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d1e4      	bne.n	8012ea2 <_Balloc+0x2e>
 8012ed8:	2000      	movs	r0, #0
 8012eda:	bd70      	pop	{r4, r5, r6, pc}
 8012edc:	6802      	ldr	r2, [r0, #0]
 8012ede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ee8:	e7f7      	b.n	8012eda <_Balloc+0x66>
 8012eea:	bf00      	nop
 8012eec:	080151b6 	.word	0x080151b6
 8012ef0:	080152bc 	.word	0x080152bc

08012ef4 <_Bfree>:
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ef8:	4605      	mov	r5, r0
 8012efa:	460c      	mov	r4, r1
 8012efc:	b976      	cbnz	r6, 8012f1c <_Bfree+0x28>
 8012efe:	2010      	movs	r0, #16
 8012f00:	f7fc fe60 	bl	800fbc4 <malloc>
 8012f04:	4602      	mov	r2, r0
 8012f06:	6268      	str	r0, [r5, #36]	; 0x24
 8012f08:	b920      	cbnz	r0, 8012f14 <_Bfree+0x20>
 8012f0a:	218a      	movs	r1, #138	; 0x8a
 8012f0c:	4b08      	ldr	r3, [pc, #32]	; (8012f30 <_Bfree+0x3c>)
 8012f0e:	4809      	ldr	r0, [pc, #36]	; (8012f34 <_Bfree+0x40>)
 8012f10:	f001 fa0a 	bl	8014328 <__assert_func>
 8012f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f18:	6006      	str	r6, [r0, #0]
 8012f1a:	60c6      	str	r6, [r0, #12]
 8012f1c:	b13c      	cbz	r4, 8012f2e <_Bfree+0x3a>
 8012f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f20:	6862      	ldr	r2, [r4, #4]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f28:	6021      	str	r1, [r4, #0]
 8012f2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f2e:	bd70      	pop	{r4, r5, r6, pc}
 8012f30:	080151b6 	.word	0x080151b6
 8012f34:	080152bc 	.word	0x080152bc

08012f38 <__multadd>:
 8012f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3c:	4698      	mov	r8, r3
 8012f3e:	460c      	mov	r4, r1
 8012f40:	2300      	movs	r3, #0
 8012f42:	690e      	ldr	r6, [r1, #16]
 8012f44:	4607      	mov	r7, r0
 8012f46:	f101 0014 	add.w	r0, r1, #20
 8012f4a:	6805      	ldr	r5, [r0, #0]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	b2a9      	uxth	r1, r5
 8012f50:	fb02 8101 	mla	r1, r2, r1, r8
 8012f54:	0c2d      	lsrs	r5, r5, #16
 8012f56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012f5a:	fb02 c505 	mla	r5, r2, r5, ip
 8012f5e:	b289      	uxth	r1, r1
 8012f60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012f64:	429e      	cmp	r6, r3
 8012f66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012f6a:	f840 1b04 	str.w	r1, [r0], #4
 8012f6e:	dcec      	bgt.n	8012f4a <__multadd+0x12>
 8012f70:	f1b8 0f00 	cmp.w	r8, #0
 8012f74:	d022      	beq.n	8012fbc <__multadd+0x84>
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	42b3      	cmp	r3, r6
 8012f7a:	dc19      	bgt.n	8012fb0 <__multadd+0x78>
 8012f7c:	6861      	ldr	r1, [r4, #4]
 8012f7e:	4638      	mov	r0, r7
 8012f80:	3101      	adds	r1, #1
 8012f82:	f7ff ff77 	bl	8012e74 <_Balloc>
 8012f86:	4605      	mov	r5, r0
 8012f88:	b928      	cbnz	r0, 8012f96 <__multadd+0x5e>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	21b5      	movs	r1, #181	; 0xb5
 8012f8e:	4b0d      	ldr	r3, [pc, #52]	; (8012fc4 <__multadd+0x8c>)
 8012f90:	480d      	ldr	r0, [pc, #52]	; (8012fc8 <__multadd+0x90>)
 8012f92:	f001 f9c9 	bl	8014328 <__assert_func>
 8012f96:	6922      	ldr	r2, [r4, #16]
 8012f98:	f104 010c 	add.w	r1, r4, #12
 8012f9c:	3202      	adds	r2, #2
 8012f9e:	0092      	lsls	r2, r2, #2
 8012fa0:	300c      	adds	r0, #12
 8012fa2:	f7fc fe1f 	bl	800fbe4 <memcpy>
 8012fa6:	4621      	mov	r1, r4
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ffa3 	bl	8012ef4 <_Bfree>
 8012fae:	462c      	mov	r4, r5
 8012fb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012fb4:	3601      	adds	r6, #1
 8012fb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8012fba:	6126      	str	r6, [r4, #16]
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc2:	bf00      	nop
 8012fc4:	0801522c 	.word	0x0801522c
 8012fc8:	080152bc 	.word	0x080152bc

08012fcc <__s2b>:
 8012fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fd0:	4615      	mov	r5, r2
 8012fd2:	2209      	movs	r2, #9
 8012fd4:	461f      	mov	r7, r3
 8012fd6:	3308      	adds	r3, #8
 8012fd8:	460c      	mov	r4, r1
 8012fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fde:	4606      	mov	r6, r0
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	db09      	blt.n	8012ffc <__s2b+0x30>
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f7ff ff43 	bl	8012e74 <_Balloc>
 8012fee:	b940      	cbnz	r0, 8013002 <__s2b+0x36>
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	21ce      	movs	r1, #206	; 0xce
 8012ff4:	4b18      	ldr	r3, [pc, #96]	; (8013058 <__s2b+0x8c>)
 8012ff6:	4819      	ldr	r0, [pc, #100]	; (801305c <__s2b+0x90>)
 8012ff8:	f001 f996 	bl	8014328 <__assert_func>
 8012ffc:	0052      	lsls	r2, r2, #1
 8012ffe:	3101      	adds	r1, #1
 8013000:	e7f0      	b.n	8012fe4 <__s2b+0x18>
 8013002:	9b08      	ldr	r3, [sp, #32]
 8013004:	2d09      	cmp	r5, #9
 8013006:	6143      	str	r3, [r0, #20]
 8013008:	f04f 0301 	mov.w	r3, #1
 801300c:	6103      	str	r3, [r0, #16]
 801300e:	dd16      	ble.n	801303e <__s2b+0x72>
 8013010:	f104 0909 	add.w	r9, r4, #9
 8013014:	46c8      	mov	r8, r9
 8013016:	442c      	add	r4, r5
 8013018:	f818 3b01 	ldrb.w	r3, [r8], #1
 801301c:	4601      	mov	r1, r0
 801301e:	220a      	movs	r2, #10
 8013020:	4630      	mov	r0, r6
 8013022:	3b30      	subs	r3, #48	; 0x30
 8013024:	f7ff ff88 	bl	8012f38 <__multadd>
 8013028:	45a0      	cmp	r8, r4
 801302a:	d1f5      	bne.n	8013018 <__s2b+0x4c>
 801302c:	f1a5 0408 	sub.w	r4, r5, #8
 8013030:	444c      	add	r4, r9
 8013032:	1b2d      	subs	r5, r5, r4
 8013034:	1963      	adds	r3, r4, r5
 8013036:	42bb      	cmp	r3, r7
 8013038:	db04      	blt.n	8013044 <__s2b+0x78>
 801303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801303e:	2509      	movs	r5, #9
 8013040:	340a      	adds	r4, #10
 8013042:	e7f6      	b.n	8013032 <__s2b+0x66>
 8013044:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013048:	4601      	mov	r1, r0
 801304a:	220a      	movs	r2, #10
 801304c:	4630      	mov	r0, r6
 801304e:	3b30      	subs	r3, #48	; 0x30
 8013050:	f7ff ff72 	bl	8012f38 <__multadd>
 8013054:	e7ee      	b.n	8013034 <__s2b+0x68>
 8013056:	bf00      	nop
 8013058:	0801522c 	.word	0x0801522c
 801305c:	080152bc 	.word	0x080152bc

08013060 <__hi0bits>:
 8013060:	0c02      	lsrs	r2, r0, #16
 8013062:	0412      	lsls	r2, r2, #16
 8013064:	4603      	mov	r3, r0
 8013066:	b9ca      	cbnz	r2, 801309c <__hi0bits+0x3c>
 8013068:	0403      	lsls	r3, r0, #16
 801306a:	2010      	movs	r0, #16
 801306c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013070:	bf04      	itt	eq
 8013072:	021b      	lsleq	r3, r3, #8
 8013074:	3008      	addeq	r0, #8
 8013076:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801307a:	bf04      	itt	eq
 801307c:	011b      	lsleq	r3, r3, #4
 801307e:	3004      	addeq	r0, #4
 8013080:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013084:	bf04      	itt	eq
 8013086:	009b      	lsleq	r3, r3, #2
 8013088:	3002      	addeq	r0, #2
 801308a:	2b00      	cmp	r3, #0
 801308c:	db05      	blt.n	801309a <__hi0bits+0x3a>
 801308e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013092:	f100 0001 	add.w	r0, r0, #1
 8013096:	bf08      	it	eq
 8013098:	2020      	moveq	r0, #32
 801309a:	4770      	bx	lr
 801309c:	2000      	movs	r0, #0
 801309e:	e7e5      	b.n	801306c <__hi0bits+0xc>

080130a0 <__lo0bits>:
 80130a0:	6803      	ldr	r3, [r0, #0]
 80130a2:	4602      	mov	r2, r0
 80130a4:	f013 0007 	ands.w	r0, r3, #7
 80130a8:	d00b      	beq.n	80130c2 <__lo0bits+0x22>
 80130aa:	07d9      	lsls	r1, r3, #31
 80130ac:	d422      	bmi.n	80130f4 <__lo0bits+0x54>
 80130ae:	0798      	lsls	r0, r3, #30
 80130b0:	bf49      	itett	mi
 80130b2:	085b      	lsrmi	r3, r3, #1
 80130b4:	089b      	lsrpl	r3, r3, #2
 80130b6:	2001      	movmi	r0, #1
 80130b8:	6013      	strmi	r3, [r2, #0]
 80130ba:	bf5c      	itt	pl
 80130bc:	2002      	movpl	r0, #2
 80130be:	6013      	strpl	r3, [r2, #0]
 80130c0:	4770      	bx	lr
 80130c2:	b299      	uxth	r1, r3
 80130c4:	b909      	cbnz	r1, 80130ca <__lo0bits+0x2a>
 80130c6:	2010      	movs	r0, #16
 80130c8:	0c1b      	lsrs	r3, r3, #16
 80130ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80130ce:	bf04      	itt	eq
 80130d0:	0a1b      	lsreq	r3, r3, #8
 80130d2:	3008      	addeq	r0, #8
 80130d4:	0719      	lsls	r1, r3, #28
 80130d6:	bf04      	itt	eq
 80130d8:	091b      	lsreq	r3, r3, #4
 80130da:	3004      	addeq	r0, #4
 80130dc:	0799      	lsls	r1, r3, #30
 80130de:	bf04      	itt	eq
 80130e0:	089b      	lsreq	r3, r3, #2
 80130e2:	3002      	addeq	r0, #2
 80130e4:	07d9      	lsls	r1, r3, #31
 80130e6:	d403      	bmi.n	80130f0 <__lo0bits+0x50>
 80130e8:	085b      	lsrs	r3, r3, #1
 80130ea:	f100 0001 	add.w	r0, r0, #1
 80130ee:	d003      	beq.n	80130f8 <__lo0bits+0x58>
 80130f0:	6013      	str	r3, [r2, #0]
 80130f2:	4770      	bx	lr
 80130f4:	2000      	movs	r0, #0
 80130f6:	4770      	bx	lr
 80130f8:	2020      	movs	r0, #32
 80130fa:	4770      	bx	lr

080130fc <__i2b>:
 80130fc:	b510      	push	{r4, lr}
 80130fe:	460c      	mov	r4, r1
 8013100:	2101      	movs	r1, #1
 8013102:	f7ff feb7 	bl	8012e74 <_Balloc>
 8013106:	4602      	mov	r2, r0
 8013108:	b928      	cbnz	r0, 8013116 <__i2b+0x1a>
 801310a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801310e:	4b04      	ldr	r3, [pc, #16]	; (8013120 <__i2b+0x24>)
 8013110:	4804      	ldr	r0, [pc, #16]	; (8013124 <__i2b+0x28>)
 8013112:	f001 f909 	bl	8014328 <__assert_func>
 8013116:	2301      	movs	r3, #1
 8013118:	6144      	str	r4, [r0, #20]
 801311a:	6103      	str	r3, [r0, #16]
 801311c:	bd10      	pop	{r4, pc}
 801311e:	bf00      	nop
 8013120:	0801522c 	.word	0x0801522c
 8013124:	080152bc 	.word	0x080152bc

08013128 <__multiply>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	4614      	mov	r4, r2
 801312e:	690a      	ldr	r2, [r1, #16]
 8013130:	6923      	ldr	r3, [r4, #16]
 8013132:	460d      	mov	r5, r1
 8013134:	429a      	cmp	r2, r3
 8013136:	bfbe      	ittt	lt
 8013138:	460b      	movlt	r3, r1
 801313a:	4625      	movlt	r5, r4
 801313c:	461c      	movlt	r4, r3
 801313e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013142:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013146:	68ab      	ldr	r3, [r5, #8]
 8013148:	6869      	ldr	r1, [r5, #4]
 801314a:	eb0a 0709 	add.w	r7, sl, r9
 801314e:	42bb      	cmp	r3, r7
 8013150:	b085      	sub	sp, #20
 8013152:	bfb8      	it	lt
 8013154:	3101      	addlt	r1, #1
 8013156:	f7ff fe8d 	bl	8012e74 <_Balloc>
 801315a:	b930      	cbnz	r0, 801316a <__multiply+0x42>
 801315c:	4602      	mov	r2, r0
 801315e:	f240 115d 	movw	r1, #349	; 0x15d
 8013162:	4b41      	ldr	r3, [pc, #260]	; (8013268 <__multiply+0x140>)
 8013164:	4841      	ldr	r0, [pc, #260]	; (801326c <__multiply+0x144>)
 8013166:	f001 f8df 	bl	8014328 <__assert_func>
 801316a:	f100 0614 	add.w	r6, r0, #20
 801316e:	4633      	mov	r3, r6
 8013170:	2200      	movs	r2, #0
 8013172:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013176:	4543      	cmp	r3, r8
 8013178:	d31e      	bcc.n	80131b8 <__multiply+0x90>
 801317a:	f105 0c14 	add.w	ip, r5, #20
 801317e:	f104 0314 	add.w	r3, r4, #20
 8013182:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013186:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801318a:	9202      	str	r2, [sp, #8]
 801318c:	ebac 0205 	sub.w	r2, ip, r5
 8013190:	3a15      	subs	r2, #21
 8013192:	f022 0203 	bic.w	r2, r2, #3
 8013196:	3204      	adds	r2, #4
 8013198:	f105 0115 	add.w	r1, r5, #21
 801319c:	458c      	cmp	ip, r1
 801319e:	bf38      	it	cc
 80131a0:	2204      	movcc	r2, #4
 80131a2:	9201      	str	r2, [sp, #4]
 80131a4:	9a02      	ldr	r2, [sp, #8]
 80131a6:	9303      	str	r3, [sp, #12]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d808      	bhi.n	80131be <__multiply+0x96>
 80131ac:	2f00      	cmp	r7, #0
 80131ae:	dc55      	bgt.n	801325c <__multiply+0x134>
 80131b0:	6107      	str	r7, [r0, #16]
 80131b2:	b005      	add	sp, #20
 80131b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b8:	f843 2b04 	str.w	r2, [r3], #4
 80131bc:	e7db      	b.n	8013176 <__multiply+0x4e>
 80131be:	f8b3 a000 	ldrh.w	sl, [r3]
 80131c2:	f1ba 0f00 	cmp.w	sl, #0
 80131c6:	d020      	beq.n	801320a <__multiply+0xe2>
 80131c8:	46b1      	mov	r9, r6
 80131ca:	2200      	movs	r2, #0
 80131cc:	f105 0e14 	add.w	lr, r5, #20
 80131d0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80131d4:	f8d9 b000 	ldr.w	fp, [r9]
 80131d8:	b2a1      	uxth	r1, r4
 80131da:	fa1f fb8b 	uxth.w	fp, fp
 80131de:	fb0a b101 	mla	r1, sl, r1, fp
 80131e2:	4411      	add	r1, r2
 80131e4:	f8d9 2000 	ldr.w	r2, [r9]
 80131e8:	0c24      	lsrs	r4, r4, #16
 80131ea:	0c12      	lsrs	r2, r2, #16
 80131ec:	fb0a 2404 	mla	r4, sl, r4, r2
 80131f0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80131f4:	b289      	uxth	r1, r1
 80131f6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80131fa:	45f4      	cmp	ip, lr
 80131fc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013200:	f849 1b04 	str.w	r1, [r9], #4
 8013204:	d8e4      	bhi.n	80131d0 <__multiply+0xa8>
 8013206:	9901      	ldr	r1, [sp, #4]
 8013208:	5072      	str	r2, [r6, r1]
 801320a:	9a03      	ldr	r2, [sp, #12]
 801320c:	3304      	adds	r3, #4
 801320e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013212:	f1b9 0f00 	cmp.w	r9, #0
 8013216:	d01f      	beq.n	8013258 <__multiply+0x130>
 8013218:	46b6      	mov	lr, r6
 801321a:	f04f 0a00 	mov.w	sl, #0
 801321e:	6834      	ldr	r4, [r6, #0]
 8013220:	f105 0114 	add.w	r1, r5, #20
 8013224:	880a      	ldrh	r2, [r1, #0]
 8013226:	f8be b002 	ldrh.w	fp, [lr, #2]
 801322a:	b2a4      	uxth	r4, r4
 801322c:	fb09 b202 	mla	r2, r9, r2, fp
 8013230:	4492      	add	sl, r2
 8013232:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013236:	f84e 4b04 	str.w	r4, [lr], #4
 801323a:	f851 4b04 	ldr.w	r4, [r1], #4
 801323e:	f8be 2000 	ldrh.w	r2, [lr]
 8013242:	0c24      	lsrs	r4, r4, #16
 8013244:	fb09 2404 	mla	r4, r9, r4, r2
 8013248:	458c      	cmp	ip, r1
 801324a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801324e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013252:	d8e7      	bhi.n	8013224 <__multiply+0xfc>
 8013254:	9a01      	ldr	r2, [sp, #4]
 8013256:	50b4      	str	r4, [r6, r2]
 8013258:	3604      	adds	r6, #4
 801325a:	e7a3      	b.n	80131a4 <__multiply+0x7c>
 801325c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013260:	2b00      	cmp	r3, #0
 8013262:	d1a5      	bne.n	80131b0 <__multiply+0x88>
 8013264:	3f01      	subs	r7, #1
 8013266:	e7a1      	b.n	80131ac <__multiply+0x84>
 8013268:	0801522c 	.word	0x0801522c
 801326c:	080152bc 	.word	0x080152bc

08013270 <__pow5mult>:
 8013270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013274:	4615      	mov	r5, r2
 8013276:	f012 0203 	ands.w	r2, r2, #3
 801327a:	4606      	mov	r6, r0
 801327c:	460f      	mov	r7, r1
 801327e:	d007      	beq.n	8013290 <__pow5mult+0x20>
 8013280:	4c25      	ldr	r4, [pc, #148]	; (8013318 <__pow5mult+0xa8>)
 8013282:	3a01      	subs	r2, #1
 8013284:	2300      	movs	r3, #0
 8013286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801328a:	f7ff fe55 	bl	8012f38 <__multadd>
 801328e:	4607      	mov	r7, r0
 8013290:	10ad      	asrs	r5, r5, #2
 8013292:	d03d      	beq.n	8013310 <__pow5mult+0xa0>
 8013294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013296:	b97c      	cbnz	r4, 80132b8 <__pow5mult+0x48>
 8013298:	2010      	movs	r0, #16
 801329a:	f7fc fc93 	bl	800fbc4 <malloc>
 801329e:	4602      	mov	r2, r0
 80132a0:	6270      	str	r0, [r6, #36]	; 0x24
 80132a2:	b928      	cbnz	r0, 80132b0 <__pow5mult+0x40>
 80132a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80132a8:	4b1c      	ldr	r3, [pc, #112]	; (801331c <__pow5mult+0xac>)
 80132aa:	481d      	ldr	r0, [pc, #116]	; (8013320 <__pow5mult+0xb0>)
 80132ac:	f001 f83c 	bl	8014328 <__assert_func>
 80132b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132b4:	6004      	str	r4, [r0, #0]
 80132b6:	60c4      	str	r4, [r0, #12]
 80132b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132c0:	b94c      	cbnz	r4, 80132d6 <__pow5mult+0x66>
 80132c2:	f240 2171 	movw	r1, #625	; 0x271
 80132c6:	4630      	mov	r0, r6
 80132c8:	f7ff ff18 	bl	80130fc <__i2b>
 80132cc:	2300      	movs	r3, #0
 80132ce:	4604      	mov	r4, r0
 80132d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80132d4:	6003      	str	r3, [r0, #0]
 80132d6:	f04f 0900 	mov.w	r9, #0
 80132da:	07eb      	lsls	r3, r5, #31
 80132dc:	d50a      	bpl.n	80132f4 <__pow5mult+0x84>
 80132de:	4639      	mov	r1, r7
 80132e0:	4622      	mov	r2, r4
 80132e2:	4630      	mov	r0, r6
 80132e4:	f7ff ff20 	bl	8013128 <__multiply>
 80132e8:	4680      	mov	r8, r0
 80132ea:	4639      	mov	r1, r7
 80132ec:	4630      	mov	r0, r6
 80132ee:	f7ff fe01 	bl	8012ef4 <_Bfree>
 80132f2:	4647      	mov	r7, r8
 80132f4:	106d      	asrs	r5, r5, #1
 80132f6:	d00b      	beq.n	8013310 <__pow5mult+0xa0>
 80132f8:	6820      	ldr	r0, [r4, #0]
 80132fa:	b938      	cbnz	r0, 801330c <__pow5mult+0x9c>
 80132fc:	4622      	mov	r2, r4
 80132fe:	4621      	mov	r1, r4
 8013300:	4630      	mov	r0, r6
 8013302:	f7ff ff11 	bl	8013128 <__multiply>
 8013306:	6020      	str	r0, [r4, #0]
 8013308:	f8c0 9000 	str.w	r9, [r0]
 801330c:	4604      	mov	r4, r0
 801330e:	e7e4      	b.n	80132da <__pow5mult+0x6a>
 8013310:	4638      	mov	r0, r7
 8013312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013316:	bf00      	nop
 8013318:	08015410 	.word	0x08015410
 801331c:	080151b6 	.word	0x080151b6
 8013320:	080152bc 	.word	0x080152bc

08013324 <__lshift>:
 8013324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013328:	460c      	mov	r4, r1
 801332a:	4607      	mov	r7, r0
 801332c:	4691      	mov	r9, r2
 801332e:	6923      	ldr	r3, [r4, #16]
 8013330:	6849      	ldr	r1, [r1, #4]
 8013332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013336:	68a3      	ldr	r3, [r4, #8]
 8013338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801333c:	f108 0601 	add.w	r6, r8, #1
 8013340:	42b3      	cmp	r3, r6
 8013342:	db0b      	blt.n	801335c <__lshift+0x38>
 8013344:	4638      	mov	r0, r7
 8013346:	f7ff fd95 	bl	8012e74 <_Balloc>
 801334a:	4605      	mov	r5, r0
 801334c:	b948      	cbnz	r0, 8013362 <__lshift+0x3e>
 801334e:	4602      	mov	r2, r0
 8013350:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013354:	4b27      	ldr	r3, [pc, #156]	; (80133f4 <__lshift+0xd0>)
 8013356:	4828      	ldr	r0, [pc, #160]	; (80133f8 <__lshift+0xd4>)
 8013358:	f000 ffe6 	bl	8014328 <__assert_func>
 801335c:	3101      	adds	r1, #1
 801335e:	005b      	lsls	r3, r3, #1
 8013360:	e7ee      	b.n	8013340 <__lshift+0x1c>
 8013362:	2300      	movs	r3, #0
 8013364:	f100 0114 	add.w	r1, r0, #20
 8013368:	f100 0210 	add.w	r2, r0, #16
 801336c:	4618      	mov	r0, r3
 801336e:	4553      	cmp	r3, sl
 8013370:	db33      	blt.n	80133da <__lshift+0xb6>
 8013372:	6920      	ldr	r0, [r4, #16]
 8013374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013378:	f104 0314 	add.w	r3, r4, #20
 801337c:	f019 091f 	ands.w	r9, r9, #31
 8013380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013388:	d02b      	beq.n	80133e2 <__lshift+0xbe>
 801338a:	468a      	mov	sl, r1
 801338c:	2200      	movs	r2, #0
 801338e:	f1c9 0e20 	rsb	lr, r9, #32
 8013392:	6818      	ldr	r0, [r3, #0]
 8013394:	fa00 f009 	lsl.w	r0, r0, r9
 8013398:	4302      	orrs	r2, r0
 801339a:	f84a 2b04 	str.w	r2, [sl], #4
 801339e:	f853 2b04 	ldr.w	r2, [r3], #4
 80133a2:	459c      	cmp	ip, r3
 80133a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80133a8:	d8f3      	bhi.n	8013392 <__lshift+0x6e>
 80133aa:	ebac 0304 	sub.w	r3, ip, r4
 80133ae:	3b15      	subs	r3, #21
 80133b0:	f023 0303 	bic.w	r3, r3, #3
 80133b4:	3304      	adds	r3, #4
 80133b6:	f104 0015 	add.w	r0, r4, #21
 80133ba:	4584      	cmp	ip, r0
 80133bc:	bf38      	it	cc
 80133be:	2304      	movcc	r3, #4
 80133c0:	50ca      	str	r2, [r1, r3]
 80133c2:	b10a      	cbz	r2, 80133c8 <__lshift+0xa4>
 80133c4:	f108 0602 	add.w	r6, r8, #2
 80133c8:	3e01      	subs	r6, #1
 80133ca:	4638      	mov	r0, r7
 80133cc:	4621      	mov	r1, r4
 80133ce:	612e      	str	r6, [r5, #16]
 80133d0:	f7ff fd90 	bl	8012ef4 <_Bfree>
 80133d4:	4628      	mov	r0, r5
 80133d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133da:	f842 0f04 	str.w	r0, [r2, #4]!
 80133de:	3301      	adds	r3, #1
 80133e0:	e7c5      	b.n	801336e <__lshift+0x4a>
 80133e2:	3904      	subs	r1, #4
 80133e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80133e8:	459c      	cmp	ip, r3
 80133ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80133ee:	d8f9      	bhi.n	80133e4 <__lshift+0xc0>
 80133f0:	e7ea      	b.n	80133c8 <__lshift+0xa4>
 80133f2:	bf00      	nop
 80133f4:	0801522c 	.word	0x0801522c
 80133f8:	080152bc 	.word	0x080152bc

080133fc <__mcmp>:
 80133fc:	4603      	mov	r3, r0
 80133fe:	690a      	ldr	r2, [r1, #16]
 8013400:	6900      	ldr	r0, [r0, #16]
 8013402:	b530      	push	{r4, r5, lr}
 8013404:	1a80      	subs	r0, r0, r2
 8013406:	d10d      	bne.n	8013424 <__mcmp+0x28>
 8013408:	3314      	adds	r3, #20
 801340a:	3114      	adds	r1, #20
 801340c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801341c:	4295      	cmp	r5, r2
 801341e:	d002      	beq.n	8013426 <__mcmp+0x2a>
 8013420:	d304      	bcc.n	801342c <__mcmp+0x30>
 8013422:	2001      	movs	r0, #1
 8013424:	bd30      	pop	{r4, r5, pc}
 8013426:	42a3      	cmp	r3, r4
 8013428:	d3f4      	bcc.n	8013414 <__mcmp+0x18>
 801342a:	e7fb      	b.n	8013424 <__mcmp+0x28>
 801342c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013430:	e7f8      	b.n	8013424 <__mcmp+0x28>
	...

08013434 <__mdiff>:
 8013434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013438:	460c      	mov	r4, r1
 801343a:	4606      	mov	r6, r0
 801343c:	4611      	mov	r1, r2
 801343e:	4620      	mov	r0, r4
 8013440:	4692      	mov	sl, r2
 8013442:	f7ff ffdb 	bl	80133fc <__mcmp>
 8013446:	1e05      	subs	r5, r0, #0
 8013448:	d111      	bne.n	801346e <__mdiff+0x3a>
 801344a:	4629      	mov	r1, r5
 801344c:	4630      	mov	r0, r6
 801344e:	f7ff fd11 	bl	8012e74 <_Balloc>
 8013452:	4602      	mov	r2, r0
 8013454:	b928      	cbnz	r0, 8013462 <__mdiff+0x2e>
 8013456:	f240 2132 	movw	r1, #562	; 0x232
 801345a:	4b3c      	ldr	r3, [pc, #240]	; (801354c <__mdiff+0x118>)
 801345c:	483c      	ldr	r0, [pc, #240]	; (8013550 <__mdiff+0x11c>)
 801345e:	f000 ff63 	bl	8014328 <__assert_func>
 8013462:	2301      	movs	r3, #1
 8013464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013468:	4610      	mov	r0, r2
 801346a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346e:	bfa4      	itt	ge
 8013470:	4653      	movge	r3, sl
 8013472:	46a2      	movge	sl, r4
 8013474:	4630      	mov	r0, r6
 8013476:	f8da 1004 	ldr.w	r1, [sl, #4]
 801347a:	bfa6      	itte	ge
 801347c:	461c      	movge	r4, r3
 801347e:	2500      	movge	r5, #0
 8013480:	2501      	movlt	r5, #1
 8013482:	f7ff fcf7 	bl	8012e74 <_Balloc>
 8013486:	4602      	mov	r2, r0
 8013488:	b918      	cbnz	r0, 8013492 <__mdiff+0x5e>
 801348a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801348e:	4b2f      	ldr	r3, [pc, #188]	; (801354c <__mdiff+0x118>)
 8013490:	e7e4      	b.n	801345c <__mdiff+0x28>
 8013492:	f100 0814 	add.w	r8, r0, #20
 8013496:	f8da 7010 	ldr.w	r7, [sl, #16]
 801349a:	60c5      	str	r5, [r0, #12]
 801349c:	f04f 0c00 	mov.w	ip, #0
 80134a0:	f10a 0514 	add.w	r5, sl, #20
 80134a4:	f10a 0010 	add.w	r0, sl, #16
 80134a8:	46c2      	mov	sl, r8
 80134aa:	6926      	ldr	r6, [r4, #16]
 80134ac:	f104 0914 	add.w	r9, r4, #20
 80134b0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80134b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80134b8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80134bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80134c0:	fa1f f18b 	uxth.w	r1, fp
 80134c4:	4461      	add	r1, ip
 80134c6:	fa1f fc83 	uxth.w	ip, r3
 80134ca:	0c1b      	lsrs	r3, r3, #16
 80134cc:	eba1 010c 	sub.w	r1, r1, ip
 80134d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80134d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80134d8:	b289      	uxth	r1, r1
 80134da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80134de:	454e      	cmp	r6, r9
 80134e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80134e4:	f84a 3b04 	str.w	r3, [sl], #4
 80134e8:	d8e6      	bhi.n	80134b8 <__mdiff+0x84>
 80134ea:	1b33      	subs	r3, r6, r4
 80134ec:	3b15      	subs	r3, #21
 80134ee:	f023 0303 	bic.w	r3, r3, #3
 80134f2:	3415      	adds	r4, #21
 80134f4:	3304      	adds	r3, #4
 80134f6:	42a6      	cmp	r6, r4
 80134f8:	bf38      	it	cc
 80134fa:	2304      	movcc	r3, #4
 80134fc:	441d      	add	r5, r3
 80134fe:	4443      	add	r3, r8
 8013500:	461e      	mov	r6, r3
 8013502:	462c      	mov	r4, r5
 8013504:	4574      	cmp	r4, lr
 8013506:	d30e      	bcc.n	8013526 <__mdiff+0xf2>
 8013508:	f10e 0103 	add.w	r1, lr, #3
 801350c:	1b49      	subs	r1, r1, r5
 801350e:	f021 0103 	bic.w	r1, r1, #3
 8013512:	3d03      	subs	r5, #3
 8013514:	45ae      	cmp	lr, r5
 8013516:	bf38      	it	cc
 8013518:	2100      	movcc	r1, #0
 801351a:	4419      	add	r1, r3
 801351c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013520:	b18b      	cbz	r3, 8013546 <__mdiff+0x112>
 8013522:	6117      	str	r7, [r2, #16]
 8013524:	e7a0      	b.n	8013468 <__mdiff+0x34>
 8013526:	f854 8b04 	ldr.w	r8, [r4], #4
 801352a:	fa1f f188 	uxth.w	r1, r8
 801352e:	4461      	add	r1, ip
 8013530:	1408      	asrs	r0, r1, #16
 8013532:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8013536:	b289      	uxth	r1, r1
 8013538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801353c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013540:	f846 1b04 	str.w	r1, [r6], #4
 8013544:	e7de      	b.n	8013504 <__mdiff+0xd0>
 8013546:	3f01      	subs	r7, #1
 8013548:	e7e8      	b.n	801351c <__mdiff+0xe8>
 801354a:	bf00      	nop
 801354c:	0801522c 	.word	0x0801522c
 8013550:	080152bc 	.word	0x080152bc

08013554 <__ulp>:
 8013554:	4b11      	ldr	r3, [pc, #68]	; (801359c <__ulp+0x48>)
 8013556:	400b      	ands	r3, r1
 8013558:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801355c:	2b00      	cmp	r3, #0
 801355e:	dd02      	ble.n	8013566 <__ulp+0x12>
 8013560:	2000      	movs	r0, #0
 8013562:	4619      	mov	r1, r3
 8013564:	4770      	bx	lr
 8013566:	425b      	negs	r3, r3
 8013568:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801356c:	f04f 0000 	mov.w	r0, #0
 8013570:	f04f 0100 	mov.w	r1, #0
 8013574:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013578:	da04      	bge.n	8013584 <__ulp+0x30>
 801357a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801357e:	fa43 f102 	asr.w	r1, r3, r2
 8013582:	4770      	bx	lr
 8013584:	f1a2 0314 	sub.w	r3, r2, #20
 8013588:	2b1e      	cmp	r3, #30
 801358a:	bfd6      	itet	le
 801358c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013590:	2301      	movgt	r3, #1
 8013592:	fa22 f303 	lsrle.w	r3, r2, r3
 8013596:	4618      	mov	r0, r3
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	7ff00000 	.word	0x7ff00000

080135a0 <__b2d>:
 80135a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135a4:	6907      	ldr	r7, [r0, #16]
 80135a6:	f100 0914 	add.w	r9, r0, #20
 80135aa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80135ae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80135b2:	f1a7 0804 	sub.w	r8, r7, #4
 80135b6:	4630      	mov	r0, r6
 80135b8:	f7ff fd52 	bl	8013060 <__hi0bits>
 80135bc:	f1c0 0320 	rsb	r3, r0, #32
 80135c0:	280a      	cmp	r0, #10
 80135c2:	600b      	str	r3, [r1, #0]
 80135c4:	491f      	ldr	r1, [pc, #124]	; (8013644 <__b2d+0xa4>)
 80135c6:	dc17      	bgt.n	80135f8 <__b2d+0x58>
 80135c8:	45c1      	cmp	r9, r8
 80135ca:	bf28      	it	cs
 80135cc:	2200      	movcs	r2, #0
 80135ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80135d2:	fa26 f30c 	lsr.w	r3, r6, ip
 80135d6:	bf38      	it	cc
 80135d8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80135dc:	ea43 0501 	orr.w	r5, r3, r1
 80135e0:	f100 0315 	add.w	r3, r0, #21
 80135e4:	fa06 f303 	lsl.w	r3, r6, r3
 80135e8:	fa22 f20c 	lsr.w	r2, r2, ip
 80135ec:	ea43 0402 	orr.w	r4, r3, r2
 80135f0:	4620      	mov	r0, r4
 80135f2:	4629      	mov	r1, r5
 80135f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135f8:	45c1      	cmp	r9, r8
 80135fa:	bf2e      	itee	cs
 80135fc:	2200      	movcs	r2, #0
 80135fe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8013602:	f1a7 0808 	subcc.w	r8, r7, #8
 8013606:	f1b0 030b 	subs.w	r3, r0, #11
 801360a:	d016      	beq.n	801363a <__b2d+0x9a>
 801360c:	f1c3 0720 	rsb	r7, r3, #32
 8013610:	fa22 f107 	lsr.w	r1, r2, r7
 8013614:	45c8      	cmp	r8, r9
 8013616:	fa06 f603 	lsl.w	r6, r6, r3
 801361a:	ea46 0601 	orr.w	r6, r6, r1
 801361e:	bf94      	ite	ls
 8013620:	2100      	movls	r1, #0
 8013622:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8013626:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801362a:	fa02 f003 	lsl.w	r0, r2, r3
 801362e:	40f9      	lsrs	r1, r7
 8013630:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013634:	ea40 0401 	orr.w	r4, r0, r1
 8013638:	e7da      	b.n	80135f0 <__b2d+0x50>
 801363a:	4614      	mov	r4, r2
 801363c:	ea46 0501 	orr.w	r5, r6, r1
 8013640:	e7d6      	b.n	80135f0 <__b2d+0x50>
 8013642:	bf00      	nop
 8013644:	3ff00000 	.word	0x3ff00000

08013648 <__d2b>:
 8013648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801364c:	2101      	movs	r1, #1
 801364e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8013652:	4690      	mov	r8, r2
 8013654:	461d      	mov	r5, r3
 8013656:	f7ff fc0d 	bl	8012e74 <_Balloc>
 801365a:	4604      	mov	r4, r0
 801365c:	b930      	cbnz	r0, 801366c <__d2b+0x24>
 801365e:	4602      	mov	r2, r0
 8013660:	f240 310a 	movw	r1, #778	; 0x30a
 8013664:	4b24      	ldr	r3, [pc, #144]	; (80136f8 <__d2b+0xb0>)
 8013666:	4825      	ldr	r0, [pc, #148]	; (80136fc <__d2b+0xb4>)
 8013668:	f000 fe5e 	bl	8014328 <__assert_func>
 801366c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8013670:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8013674:	bb2d      	cbnz	r5, 80136c2 <__d2b+0x7a>
 8013676:	9301      	str	r3, [sp, #4]
 8013678:	f1b8 0300 	subs.w	r3, r8, #0
 801367c:	d026      	beq.n	80136cc <__d2b+0x84>
 801367e:	4668      	mov	r0, sp
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	f7ff fd0d 	bl	80130a0 <__lo0bits>
 8013686:	9900      	ldr	r1, [sp, #0]
 8013688:	b1f0      	cbz	r0, 80136c8 <__d2b+0x80>
 801368a:	9a01      	ldr	r2, [sp, #4]
 801368c:	f1c0 0320 	rsb	r3, r0, #32
 8013690:	fa02 f303 	lsl.w	r3, r2, r3
 8013694:	430b      	orrs	r3, r1
 8013696:	40c2      	lsrs	r2, r0
 8013698:	6163      	str	r3, [r4, #20]
 801369a:	9201      	str	r2, [sp, #4]
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bf14      	ite	ne
 80136a2:	2102      	movne	r1, #2
 80136a4:	2101      	moveq	r1, #1
 80136a6:	61a3      	str	r3, [r4, #24]
 80136a8:	6121      	str	r1, [r4, #16]
 80136aa:	b1c5      	cbz	r5, 80136de <__d2b+0x96>
 80136ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80136b0:	4405      	add	r5, r0
 80136b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136b6:	603d      	str	r5, [r7, #0]
 80136b8:	6030      	str	r0, [r6, #0]
 80136ba:	4620      	mov	r0, r4
 80136bc:	b002      	add	sp, #8
 80136be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136c6:	e7d6      	b.n	8013676 <__d2b+0x2e>
 80136c8:	6161      	str	r1, [r4, #20]
 80136ca:	e7e7      	b.n	801369c <__d2b+0x54>
 80136cc:	a801      	add	r0, sp, #4
 80136ce:	f7ff fce7 	bl	80130a0 <__lo0bits>
 80136d2:	2101      	movs	r1, #1
 80136d4:	9b01      	ldr	r3, [sp, #4]
 80136d6:	6121      	str	r1, [r4, #16]
 80136d8:	6163      	str	r3, [r4, #20]
 80136da:	3020      	adds	r0, #32
 80136dc:	e7e5      	b.n	80136aa <__d2b+0x62>
 80136de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80136e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136e6:	6038      	str	r0, [r7, #0]
 80136e8:	6918      	ldr	r0, [r3, #16]
 80136ea:	f7ff fcb9 	bl	8013060 <__hi0bits>
 80136ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80136f2:	6031      	str	r1, [r6, #0]
 80136f4:	e7e1      	b.n	80136ba <__d2b+0x72>
 80136f6:	bf00      	nop
 80136f8:	0801522c 	.word	0x0801522c
 80136fc:	080152bc 	.word	0x080152bc

08013700 <__ratio>:
 8013700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	4688      	mov	r8, r1
 8013706:	4669      	mov	r1, sp
 8013708:	4681      	mov	r9, r0
 801370a:	f7ff ff49 	bl	80135a0 <__b2d>
 801370e:	460f      	mov	r7, r1
 8013710:	4604      	mov	r4, r0
 8013712:	460d      	mov	r5, r1
 8013714:	4640      	mov	r0, r8
 8013716:	a901      	add	r1, sp, #4
 8013718:	f7ff ff42 	bl	80135a0 <__b2d>
 801371c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013720:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013724:	468b      	mov	fp, r1
 8013726:	eba3 0c02 	sub.w	ip, r3, r2
 801372a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801372e:	1a9b      	subs	r3, r3, r2
 8013730:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013734:	2b00      	cmp	r3, #0
 8013736:	bfd5      	itete	le
 8013738:	460a      	movle	r2, r1
 801373a:	462a      	movgt	r2, r5
 801373c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013740:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013744:	bfd8      	it	le
 8013746:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801374a:	465b      	mov	r3, fp
 801374c:	4602      	mov	r2, r0
 801374e:	4639      	mov	r1, r7
 8013750:	4620      	mov	r0, r4
 8013752:	f7ed f803 	bl	800075c <__aeabi_ddiv>
 8013756:	b003      	add	sp, #12
 8013758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801375c <__copybits>:
 801375c:	3901      	subs	r1, #1
 801375e:	b570      	push	{r4, r5, r6, lr}
 8013760:	1149      	asrs	r1, r1, #5
 8013762:	6914      	ldr	r4, [r2, #16]
 8013764:	3101      	adds	r1, #1
 8013766:	f102 0314 	add.w	r3, r2, #20
 801376a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801376e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013772:	1f05      	subs	r5, r0, #4
 8013774:	42a3      	cmp	r3, r4
 8013776:	d30c      	bcc.n	8013792 <__copybits+0x36>
 8013778:	1aa3      	subs	r3, r4, r2
 801377a:	3b11      	subs	r3, #17
 801377c:	f023 0303 	bic.w	r3, r3, #3
 8013780:	3211      	adds	r2, #17
 8013782:	42a2      	cmp	r2, r4
 8013784:	bf88      	it	hi
 8013786:	2300      	movhi	r3, #0
 8013788:	4418      	add	r0, r3
 801378a:	2300      	movs	r3, #0
 801378c:	4288      	cmp	r0, r1
 801378e:	d305      	bcc.n	801379c <__copybits+0x40>
 8013790:	bd70      	pop	{r4, r5, r6, pc}
 8013792:	f853 6b04 	ldr.w	r6, [r3], #4
 8013796:	f845 6f04 	str.w	r6, [r5, #4]!
 801379a:	e7eb      	b.n	8013774 <__copybits+0x18>
 801379c:	f840 3b04 	str.w	r3, [r0], #4
 80137a0:	e7f4      	b.n	801378c <__copybits+0x30>

080137a2 <__any_on>:
 80137a2:	f100 0214 	add.w	r2, r0, #20
 80137a6:	6900      	ldr	r0, [r0, #16]
 80137a8:	114b      	asrs	r3, r1, #5
 80137aa:	4298      	cmp	r0, r3
 80137ac:	b510      	push	{r4, lr}
 80137ae:	db11      	blt.n	80137d4 <__any_on+0x32>
 80137b0:	dd0a      	ble.n	80137c8 <__any_on+0x26>
 80137b2:	f011 011f 	ands.w	r1, r1, #31
 80137b6:	d007      	beq.n	80137c8 <__any_on+0x26>
 80137b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80137bc:	fa24 f001 	lsr.w	r0, r4, r1
 80137c0:	fa00 f101 	lsl.w	r1, r0, r1
 80137c4:	428c      	cmp	r4, r1
 80137c6:	d10b      	bne.n	80137e0 <__any_on+0x3e>
 80137c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137cc:	4293      	cmp	r3, r2
 80137ce:	d803      	bhi.n	80137d8 <__any_on+0x36>
 80137d0:	2000      	movs	r0, #0
 80137d2:	bd10      	pop	{r4, pc}
 80137d4:	4603      	mov	r3, r0
 80137d6:	e7f7      	b.n	80137c8 <__any_on+0x26>
 80137d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137dc:	2900      	cmp	r1, #0
 80137de:	d0f5      	beq.n	80137cc <__any_on+0x2a>
 80137e0:	2001      	movs	r0, #1
 80137e2:	e7f6      	b.n	80137d2 <__any_on+0x30>

080137e4 <__ssputs_r>:
 80137e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e8:	688e      	ldr	r6, [r1, #8]
 80137ea:	4682      	mov	sl, r0
 80137ec:	429e      	cmp	r6, r3
 80137ee:	460c      	mov	r4, r1
 80137f0:	4690      	mov	r8, r2
 80137f2:	461f      	mov	r7, r3
 80137f4:	d838      	bhi.n	8013868 <__ssputs_r+0x84>
 80137f6:	898a      	ldrh	r2, [r1, #12]
 80137f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137fc:	d032      	beq.n	8013864 <__ssputs_r+0x80>
 80137fe:	6825      	ldr	r5, [r4, #0]
 8013800:	6909      	ldr	r1, [r1, #16]
 8013802:	3301      	adds	r3, #1
 8013804:	eba5 0901 	sub.w	r9, r5, r1
 8013808:	6965      	ldr	r5, [r4, #20]
 801380a:	444b      	add	r3, r9
 801380c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013814:	106d      	asrs	r5, r5, #1
 8013816:	429d      	cmp	r5, r3
 8013818:	bf38      	it	cc
 801381a:	461d      	movcc	r5, r3
 801381c:	0553      	lsls	r3, r2, #21
 801381e:	d531      	bpl.n	8013884 <__ssputs_r+0xa0>
 8013820:	4629      	mov	r1, r5
 8013822:	f7fc fa69 	bl	800fcf8 <_malloc_r>
 8013826:	4606      	mov	r6, r0
 8013828:	b950      	cbnz	r0, 8013840 <__ssputs_r+0x5c>
 801382a:	230c      	movs	r3, #12
 801382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013830:	f8ca 3000 	str.w	r3, [sl]
 8013834:	89a3      	ldrh	r3, [r4, #12]
 8013836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801383a:	81a3      	strh	r3, [r4, #12]
 801383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013840:	464a      	mov	r2, r9
 8013842:	6921      	ldr	r1, [r4, #16]
 8013844:	f7fc f9ce 	bl	800fbe4 <memcpy>
 8013848:	89a3      	ldrh	r3, [r4, #12]
 801384a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013852:	81a3      	strh	r3, [r4, #12]
 8013854:	6126      	str	r6, [r4, #16]
 8013856:	444e      	add	r6, r9
 8013858:	6026      	str	r6, [r4, #0]
 801385a:	463e      	mov	r6, r7
 801385c:	6165      	str	r5, [r4, #20]
 801385e:	eba5 0509 	sub.w	r5, r5, r9
 8013862:	60a5      	str	r5, [r4, #8]
 8013864:	42be      	cmp	r6, r7
 8013866:	d900      	bls.n	801386a <__ssputs_r+0x86>
 8013868:	463e      	mov	r6, r7
 801386a:	4632      	mov	r2, r6
 801386c:	4641      	mov	r1, r8
 801386e:	6820      	ldr	r0, [r4, #0]
 8013870:	f7fc f9c6 	bl	800fc00 <memmove>
 8013874:	68a3      	ldr	r3, [r4, #8]
 8013876:	6822      	ldr	r2, [r4, #0]
 8013878:	1b9b      	subs	r3, r3, r6
 801387a:	4432      	add	r2, r6
 801387c:	2000      	movs	r0, #0
 801387e:	60a3      	str	r3, [r4, #8]
 8013880:	6022      	str	r2, [r4, #0]
 8013882:	e7db      	b.n	801383c <__ssputs_r+0x58>
 8013884:	462a      	mov	r2, r5
 8013886:	f000 ff36 	bl	80146f6 <_realloc_r>
 801388a:	4606      	mov	r6, r0
 801388c:	2800      	cmp	r0, #0
 801388e:	d1e1      	bne.n	8013854 <__ssputs_r+0x70>
 8013890:	4650      	mov	r0, sl
 8013892:	6921      	ldr	r1, [r4, #16]
 8013894:	f7fc f9e4 	bl	800fc60 <_free_r>
 8013898:	e7c7      	b.n	801382a <__ssputs_r+0x46>
	...

0801389c <_svfiprintf_r>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	4698      	mov	r8, r3
 80138a2:	898b      	ldrh	r3, [r1, #12]
 80138a4:	4607      	mov	r7, r0
 80138a6:	061b      	lsls	r3, r3, #24
 80138a8:	460d      	mov	r5, r1
 80138aa:	4614      	mov	r4, r2
 80138ac:	b09d      	sub	sp, #116	; 0x74
 80138ae:	d50e      	bpl.n	80138ce <_svfiprintf_r+0x32>
 80138b0:	690b      	ldr	r3, [r1, #16]
 80138b2:	b963      	cbnz	r3, 80138ce <_svfiprintf_r+0x32>
 80138b4:	2140      	movs	r1, #64	; 0x40
 80138b6:	f7fc fa1f 	bl	800fcf8 <_malloc_r>
 80138ba:	6028      	str	r0, [r5, #0]
 80138bc:	6128      	str	r0, [r5, #16]
 80138be:	b920      	cbnz	r0, 80138ca <_svfiprintf_r+0x2e>
 80138c0:	230c      	movs	r3, #12
 80138c2:	603b      	str	r3, [r7, #0]
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138c8:	e0d1      	b.n	8013a6e <_svfiprintf_r+0x1d2>
 80138ca:	2340      	movs	r3, #64	; 0x40
 80138cc:	616b      	str	r3, [r5, #20]
 80138ce:	2300      	movs	r3, #0
 80138d0:	9309      	str	r3, [sp, #36]	; 0x24
 80138d2:	2320      	movs	r3, #32
 80138d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138d8:	2330      	movs	r3, #48	; 0x30
 80138da:	f04f 0901 	mov.w	r9, #1
 80138de:	f8cd 800c 	str.w	r8, [sp, #12]
 80138e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013a88 <_svfiprintf_r+0x1ec>
 80138e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138ea:	4623      	mov	r3, r4
 80138ec:	469a      	mov	sl, r3
 80138ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138f2:	b10a      	cbz	r2, 80138f8 <_svfiprintf_r+0x5c>
 80138f4:	2a25      	cmp	r2, #37	; 0x25
 80138f6:	d1f9      	bne.n	80138ec <_svfiprintf_r+0x50>
 80138f8:	ebba 0b04 	subs.w	fp, sl, r4
 80138fc:	d00b      	beq.n	8013916 <_svfiprintf_r+0x7a>
 80138fe:	465b      	mov	r3, fp
 8013900:	4622      	mov	r2, r4
 8013902:	4629      	mov	r1, r5
 8013904:	4638      	mov	r0, r7
 8013906:	f7ff ff6d 	bl	80137e4 <__ssputs_r>
 801390a:	3001      	adds	r0, #1
 801390c:	f000 80aa 	beq.w	8013a64 <_svfiprintf_r+0x1c8>
 8013910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013912:	445a      	add	r2, fp
 8013914:	9209      	str	r2, [sp, #36]	; 0x24
 8013916:	f89a 3000 	ldrb.w	r3, [sl]
 801391a:	2b00      	cmp	r3, #0
 801391c:	f000 80a2 	beq.w	8013a64 <_svfiprintf_r+0x1c8>
 8013920:	2300      	movs	r3, #0
 8013922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801392a:	f10a 0a01 	add.w	sl, sl, #1
 801392e:	9304      	str	r3, [sp, #16]
 8013930:	9307      	str	r3, [sp, #28]
 8013932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013936:	931a      	str	r3, [sp, #104]	; 0x68
 8013938:	4654      	mov	r4, sl
 801393a:	2205      	movs	r2, #5
 801393c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013940:	4851      	ldr	r0, [pc, #324]	; (8013a88 <_svfiprintf_r+0x1ec>)
 8013942:	f7ff fa7d 	bl	8012e40 <memchr>
 8013946:	9a04      	ldr	r2, [sp, #16]
 8013948:	b9d8      	cbnz	r0, 8013982 <_svfiprintf_r+0xe6>
 801394a:	06d0      	lsls	r0, r2, #27
 801394c:	bf44      	itt	mi
 801394e:	2320      	movmi	r3, #32
 8013950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013954:	0711      	lsls	r1, r2, #28
 8013956:	bf44      	itt	mi
 8013958:	232b      	movmi	r3, #43	; 0x2b
 801395a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801395e:	f89a 3000 	ldrb.w	r3, [sl]
 8013962:	2b2a      	cmp	r3, #42	; 0x2a
 8013964:	d015      	beq.n	8013992 <_svfiprintf_r+0xf6>
 8013966:	4654      	mov	r4, sl
 8013968:	2000      	movs	r0, #0
 801396a:	f04f 0c0a 	mov.w	ip, #10
 801396e:	9a07      	ldr	r2, [sp, #28]
 8013970:	4621      	mov	r1, r4
 8013972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013976:	3b30      	subs	r3, #48	; 0x30
 8013978:	2b09      	cmp	r3, #9
 801397a:	d94e      	bls.n	8013a1a <_svfiprintf_r+0x17e>
 801397c:	b1b0      	cbz	r0, 80139ac <_svfiprintf_r+0x110>
 801397e:	9207      	str	r2, [sp, #28]
 8013980:	e014      	b.n	80139ac <_svfiprintf_r+0x110>
 8013982:	eba0 0308 	sub.w	r3, r0, r8
 8013986:	fa09 f303 	lsl.w	r3, r9, r3
 801398a:	4313      	orrs	r3, r2
 801398c:	46a2      	mov	sl, r4
 801398e:	9304      	str	r3, [sp, #16]
 8013990:	e7d2      	b.n	8013938 <_svfiprintf_r+0x9c>
 8013992:	9b03      	ldr	r3, [sp, #12]
 8013994:	1d19      	adds	r1, r3, #4
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	9103      	str	r1, [sp, #12]
 801399a:	2b00      	cmp	r3, #0
 801399c:	bfbb      	ittet	lt
 801399e:	425b      	neglt	r3, r3
 80139a0:	f042 0202 	orrlt.w	r2, r2, #2
 80139a4:	9307      	strge	r3, [sp, #28]
 80139a6:	9307      	strlt	r3, [sp, #28]
 80139a8:	bfb8      	it	lt
 80139aa:	9204      	strlt	r2, [sp, #16]
 80139ac:	7823      	ldrb	r3, [r4, #0]
 80139ae:	2b2e      	cmp	r3, #46	; 0x2e
 80139b0:	d10c      	bne.n	80139cc <_svfiprintf_r+0x130>
 80139b2:	7863      	ldrb	r3, [r4, #1]
 80139b4:	2b2a      	cmp	r3, #42	; 0x2a
 80139b6:	d135      	bne.n	8013a24 <_svfiprintf_r+0x188>
 80139b8:	9b03      	ldr	r3, [sp, #12]
 80139ba:	3402      	adds	r4, #2
 80139bc:	1d1a      	adds	r2, r3, #4
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	9203      	str	r2, [sp, #12]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	bfb8      	it	lt
 80139c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80139ca:	9305      	str	r3, [sp, #20]
 80139cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013a98 <_svfiprintf_r+0x1fc>
 80139d0:	2203      	movs	r2, #3
 80139d2:	4650      	mov	r0, sl
 80139d4:	7821      	ldrb	r1, [r4, #0]
 80139d6:	f7ff fa33 	bl	8012e40 <memchr>
 80139da:	b140      	cbz	r0, 80139ee <_svfiprintf_r+0x152>
 80139dc:	2340      	movs	r3, #64	; 0x40
 80139de:	eba0 000a 	sub.w	r0, r0, sl
 80139e2:	fa03 f000 	lsl.w	r0, r3, r0
 80139e6:	9b04      	ldr	r3, [sp, #16]
 80139e8:	3401      	adds	r4, #1
 80139ea:	4303      	orrs	r3, r0
 80139ec:	9304      	str	r3, [sp, #16]
 80139ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f2:	2206      	movs	r2, #6
 80139f4:	4825      	ldr	r0, [pc, #148]	; (8013a8c <_svfiprintf_r+0x1f0>)
 80139f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139fa:	f7ff fa21 	bl	8012e40 <memchr>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d038      	beq.n	8013a74 <_svfiprintf_r+0x1d8>
 8013a02:	4b23      	ldr	r3, [pc, #140]	; (8013a90 <_svfiprintf_r+0x1f4>)
 8013a04:	bb1b      	cbnz	r3, 8013a4e <_svfiprintf_r+0x1b2>
 8013a06:	9b03      	ldr	r3, [sp, #12]
 8013a08:	3307      	adds	r3, #7
 8013a0a:	f023 0307 	bic.w	r3, r3, #7
 8013a0e:	3308      	adds	r3, #8
 8013a10:	9303      	str	r3, [sp, #12]
 8013a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a14:	4433      	add	r3, r6
 8013a16:	9309      	str	r3, [sp, #36]	; 0x24
 8013a18:	e767      	b.n	80138ea <_svfiprintf_r+0x4e>
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	2001      	movs	r0, #1
 8013a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a22:	e7a5      	b.n	8013970 <_svfiprintf_r+0xd4>
 8013a24:	2300      	movs	r3, #0
 8013a26:	f04f 0c0a 	mov.w	ip, #10
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	3401      	adds	r4, #1
 8013a2e:	9305      	str	r3, [sp, #20]
 8013a30:	4620      	mov	r0, r4
 8013a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a36:	3a30      	subs	r2, #48	; 0x30
 8013a38:	2a09      	cmp	r2, #9
 8013a3a:	d903      	bls.n	8013a44 <_svfiprintf_r+0x1a8>
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d0c5      	beq.n	80139cc <_svfiprintf_r+0x130>
 8013a40:	9105      	str	r1, [sp, #20]
 8013a42:	e7c3      	b.n	80139cc <_svfiprintf_r+0x130>
 8013a44:	4604      	mov	r4, r0
 8013a46:	2301      	movs	r3, #1
 8013a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a4c:	e7f0      	b.n	8013a30 <_svfiprintf_r+0x194>
 8013a4e:	ab03      	add	r3, sp, #12
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	462a      	mov	r2, r5
 8013a54:	4638      	mov	r0, r7
 8013a56:	4b0f      	ldr	r3, [pc, #60]	; (8013a94 <_svfiprintf_r+0x1f8>)
 8013a58:	a904      	add	r1, sp, #16
 8013a5a:	f7fc fa45 	bl	800fee8 <_printf_float>
 8013a5e:	1c42      	adds	r2, r0, #1
 8013a60:	4606      	mov	r6, r0
 8013a62:	d1d6      	bne.n	8013a12 <_svfiprintf_r+0x176>
 8013a64:	89ab      	ldrh	r3, [r5, #12]
 8013a66:	065b      	lsls	r3, r3, #25
 8013a68:	f53f af2c 	bmi.w	80138c4 <_svfiprintf_r+0x28>
 8013a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a6e:	b01d      	add	sp, #116	; 0x74
 8013a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a74:	ab03      	add	r3, sp, #12
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	462a      	mov	r2, r5
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <_svfiprintf_r+0x1f8>)
 8013a7e:	a904      	add	r1, sp, #16
 8013a80:	f7fc fcce 	bl	8010420 <_printf_i>
 8013a84:	e7eb      	b.n	8013a5e <_svfiprintf_r+0x1c2>
 8013a86:	bf00      	nop
 8013a88:	0801541c 	.word	0x0801541c
 8013a8c:	08015426 	.word	0x08015426
 8013a90:	0800fee9 	.word	0x0800fee9
 8013a94:	080137e5 	.word	0x080137e5
 8013a98:	08015422 	.word	0x08015422

08013a9c <_sungetc_r>:
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	1c4b      	adds	r3, r1, #1
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	d103      	bne.n	8013aac <_sungetc_r+0x10>
 8013aa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	8993      	ldrh	r3, [r2, #12]
 8013aae:	b2cd      	uxtb	r5, r1
 8013ab0:	f023 0320 	bic.w	r3, r3, #32
 8013ab4:	8193      	strh	r3, [r2, #12]
 8013ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ab8:	6852      	ldr	r2, [r2, #4]
 8013aba:	b18b      	cbz	r3, 8013ae0 <_sungetc_r+0x44>
 8013abc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	dd08      	ble.n	8013ad4 <_sungetc_r+0x38>
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	1e5a      	subs	r2, r3, #1
 8013ac6:	6022      	str	r2, [r4, #0]
 8013ac8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013acc:	6863      	ldr	r3, [r4, #4]
 8013ace:	3301      	adds	r3, #1
 8013ad0:	6063      	str	r3, [r4, #4]
 8013ad2:	e7e9      	b.n	8013aa8 <_sungetc_r+0xc>
 8013ad4:	4621      	mov	r1, r4
 8013ad6:	f000 fbe1 	bl	801429c <__submore>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d0f1      	beq.n	8013ac2 <_sungetc_r+0x26>
 8013ade:	e7e1      	b.n	8013aa4 <_sungetc_r+0x8>
 8013ae0:	6921      	ldr	r1, [r4, #16]
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	b151      	cbz	r1, 8013afc <_sungetc_r+0x60>
 8013ae6:	4299      	cmp	r1, r3
 8013ae8:	d208      	bcs.n	8013afc <_sungetc_r+0x60>
 8013aea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013aee:	42a9      	cmp	r1, r5
 8013af0:	d104      	bne.n	8013afc <_sungetc_r+0x60>
 8013af2:	3b01      	subs	r3, #1
 8013af4:	3201      	adds	r2, #1
 8013af6:	6023      	str	r3, [r4, #0]
 8013af8:	6062      	str	r2, [r4, #4]
 8013afa:	e7d5      	b.n	8013aa8 <_sungetc_r+0xc>
 8013afc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b04:	6363      	str	r3, [r4, #52]	; 0x34
 8013b06:	2303      	movs	r3, #3
 8013b08:	63a3      	str	r3, [r4, #56]	; 0x38
 8013b0a:	4623      	mov	r3, r4
 8013b0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013b10:	6023      	str	r3, [r4, #0]
 8013b12:	2301      	movs	r3, #1
 8013b14:	e7dc      	b.n	8013ad0 <_sungetc_r+0x34>

08013b16 <__ssrefill_r>:
 8013b16:	b510      	push	{r4, lr}
 8013b18:	460c      	mov	r4, r1
 8013b1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013b1c:	b169      	cbz	r1, 8013b3a <__ssrefill_r+0x24>
 8013b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b22:	4299      	cmp	r1, r3
 8013b24:	d001      	beq.n	8013b2a <__ssrefill_r+0x14>
 8013b26:	f7fc f89b 	bl	800fc60 <_free_r>
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8013b30:	6063      	str	r3, [r4, #4]
 8013b32:	b113      	cbz	r3, 8013b3a <__ssrefill_r+0x24>
 8013b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b36:	6023      	str	r3, [r4, #0]
 8013b38:	bd10      	pop	{r4, pc}
 8013b3a:	6923      	ldr	r3, [r4, #16]
 8013b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b40:	6023      	str	r3, [r4, #0]
 8013b42:	2300      	movs	r3, #0
 8013b44:	6063      	str	r3, [r4, #4]
 8013b46:	89a3      	ldrh	r3, [r4, #12]
 8013b48:	f043 0320 	orr.w	r3, r3, #32
 8013b4c:	81a3      	strh	r3, [r4, #12]
 8013b4e:	e7f3      	b.n	8013b38 <__ssrefill_r+0x22>

08013b50 <__ssvfiscanf_r>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	460c      	mov	r4, r1
 8013b56:	2100      	movs	r1, #0
 8013b58:	4606      	mov	r6, r0
 8013b5a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013b5e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013b62:	49b3      	ldr	r1, [pc, #716]	; (8013e30 <__ssvfiscanf_r+0x2e0>)
 8013b64:	f10d 0804 	add.w	r8, sp, #4
 8013b68:	91a0      	str	r1, [sp, #640]	; 0x280
 8013b6a:	49b2      	ldr	r1, [pc, #712]	; (8013e34 <__ssvfiscanf_r+0x2e4>)
 8013b6c:	4fb2      	ldr	r7, [pc, #712]	; (8013e38 <__ssvfiscanf_r+0x2e8>)
 8013b6e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8013e3c <__ssvfiscanf_r+0x2ec>
 8013b72:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013b76:	91a1      	str	r1, [sp, #644]	; 0x284
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	f892 a000 	ldrb.w	sl, [r2]
 8013b7e:	f1ba 0f00 	cmp.w	sl, #0
 8013b82:	f000 8153 	beq.w	8013e2c <__ssvfiscanf_r+0x2dc>
 8013b86:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013b8a:	1c55      	adds	r5, r2, #1
 8013b8c:	f013 0308 	ands.w	r3, r3, #8
 8013b90:	d019      	beq.n	8013bc6 <__ssvfiscanf_r+0x76>
 8013b92:	6863      	ldr	r3, [r4, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	dd0f      	ble.n	8013bb8 <__ssvfiscanf_r+0x68>
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	781a      	ldrb	r2, [r3, #0]
 8013b9c:	5cba      	ldrb	r2, [r7, r2]
 8013b9e:	0712      	lsls	r2, r2, #28
 8013ba0:	d401      	bmi.n	8013ba6 <__ssvfiscanf_r+0x56>
 8013ba2:	462a      	mov	r2, r5
 8013ba4:	e7e9      	b.n	8013b7a <__ssvfiscanf_r+0x2a>
 8013ba6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013ba8:	3301      	adds	r3, #1
 8013baa:	3201      	adds	r2, #1
 8013bac:	9245      	str	r2, [sp, #276]	; 0x114
 8013bae:	6862      	ldr	r2, [r4, #4]
 8013bb0:	6023      	str	r3, [r4, #0]
 8013bb2:	3a01      	subs	r2, #1
 8013bb4:	6062      	str	r2, [r4, #4]
 8013bb6:	e7ec      	b.n	8013b92 <__ssvfiscanf_r+0x42>
 8013bb8:	4621      	mov	r1, r4
 8013bba:	4630      	mov	r0, r6
 8013bbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013bbe:	4798      	blx	r3
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	d0e9      	beq.n	8013b98 <__ssvfiscanf_r+0x48>
 8013bc4:	e7ed      	b.n	8013ba2 <__ssvfiscanf_r+0x52>
 8013bc6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8013bca:	f040 8086 	bne.w	8013cda <__ssvfiscanf_r+0x18a>
 8013bce:	9341      	str	r3, [sp, #260]	; 0x104
 8013bd0:	9343      	str	r3, [sp, #268]	; 0x10c
 8013bd2:	7853      	ldrb	r3, [r2, #1]
 8013bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8013bd6:	bf04      	itt	eq
 8013bd8:	2310      	moveq	r3, #16
 8013bda:	1c95      	addeq	r5, r2, #2
 8013bdc:	f04f 020a 	mov.w	r2, #10
 8013be0:	bf08      	it	eq
 8013be2:	9341      	streq	r3, [sp, #260]	; 0x104
 8013be4:	46ab      	mov	fp, r5
 8013be6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013bea:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013bee:	2b09      	cmp	r3, #9
 8013bf0:	d91d      	bls.n	8013c2e <__ssvfiscanf_r+0xde>
 8013bf2:	2203      	movs	r2, #3
 8013bf4:	4891      	ldr	r0, [pc, #580]	; (8013e3c <__ssvfiscanf_r+0x2ec>)
 8013bf6:	f7ff f923 	bl	8012e40 <memchr>
 8013bfa:	b140      	cbz	r0, 8013c0e <__ssvfiscanf_r+0xbe>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	465d      	mov	r5, fp
 8013c00:	eba0 0009 	sub.w	r0, r0, r9
 8013c04:	fa03 f000 	lsl.w	r0, r3, r0
 8013c08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013c0a:	4318      	orrs	r0, r3
 8013c0c:	9041      	str	r0, [sp, #260]	; 0x104
 8013c0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013c12:	2b78      	cmp	r3, #120	; 0x78
 8013c14:	d806      	bhi.n	8013c24 <__ssvfiscanf_r+0xd4>
 8013c16:	2b57      	cmp	r3, #87	; 0x57
 8013c18:	d810      	bhi.n	8013c3c <__ssvfiscanf_r+0xec>
 8013c1a:	2b25      	cmp	r3, #37	; 0x25
 8013c1c:	d05d      	beq.n	8013cda <__ssvfiscanf_r+0x18a>
 8013c1e:	d857      	bhi.n	8013cd0 <__ssvfiscanf_r+0x180>
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d075      	beq.n	8013d10 <__ssvfiscanf_r+0x1c0>
 8013c24:	2303      	movs	r3, #3
 8013c26:	9347      	str	r3, [sp, #284]	; 0x11c
 8013c28:	230a      	movs	r3, #10
 8013c2a:	9342      	str	r3, [sp, #264]	; 0x108
 8013c2c:	e082      	b.n	8013d34 <__ssvfiscanf_r+0x1e4>
 8013c2e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013c30:	465d      	mov	r5, fp
 8013c32:	fb02 1303 	mla	r3, r2, r3, r1
 8013c36:	3b30      	subs	r3, #48	; 0x30
 8013c38:	9343      	str	r3, [sp, #268]	; 0x10c
 8013c3a:	e7d3      	b.n	8013be4 <__ssvfiscanf_r+0x94>
 8013c3c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013c40:	2a20      	cmp	r2, #32
 8013c42:	d8ef      	bhi.n	8013c24 <__ssvfiscanf_r+0xd4>
 8013c44:	a101      	add	r1, pc, #4	; (adr r1, 8013c4c <__ssvfiscanf_r+0xfc>)
 8013c46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013c4a:	bf00      	nop
 8013c4c:	08013d1f 	.word	0x08013d1f
 8013c50:	08013c25 	.word	0x08013c25
 8013c54:	08013c25 	.word	0x08013c25
 8013c58:	08013d7d 	.word	0x08013d7d
 8013c5c:	08013c25 	.word	0x08013c25
 8013c60:	08013c25 	.word	0x08013c25
 8013c64:	08013c25 	.word	0x08013c25
 8013c68:	08013c25 	.word	0x08013c25
 8013c6c:	08013c25 	.word	0x08013c25
 8013c70:	08013c25 	.word	0x08013c25
 8013c74:	08013c25 	.word	0x08013c25
 8013c78:	08013d93 	.word	0x08013d93
 8013c7c:	08013d69 	.word	0x08013d69
 8013c80:	08013cd7 	.word	0x08013cd7
 8013c84:	08013cd7 	.word	0x08013cd7
 8013c88:	08013cd7 	.word	0x08013cd7
 8013c8c:	08013c25 	.word	0x08013c25
 8013c90:	08013d6d 	.word	0x08013d6d
 8013c94:	08013c25 	.word	0x08013c25
 8013c98:	08013c25 	.word	0x08013c25
 8013c9c:	08013c25 	.word	0x08013c25
 8013ca0:	08013c25 	.word	0x08013c25
 8013ca4:	08013da3 	.word	0x08013da3
 8013ca8:	08013d75 	.word	0x08013d75
 8013cac:	08013d17 	.word	0x08013d17
 8013cb0:	08013c25 	.word	0x08013c25
 8013cb4:	08013c25 	.word	0x08013c25
 8013cb8:	08013d9f 	.word	0x08013d9f
 8013cbc:	08013c25 	.word	0x08013c25
 8013cc0:	08013d69 	.word	0x08013d69
 8013cc4:	08013c25 	.word	0x08013c25
 8013cc8:	08013c25 	.word	0x08013c25
 8013ccc:	08013d1f 	.word	0x08013d1f
 8013cd0:	3b45      	subs	r3, #69	; 0x45
 8013cd2:	2b02      	cmp	r3, #2
 8013cd4:	d8a6      	bhi.n	8013c24 <__ssvfiscanf_r+0xd4>
 8013cd6:	2305      	movs	r3, #5
 8013cd8:	e02b      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013cda:	6863      	ldr	r3, [r4, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	dd0d      	ble.n	8013cfc <__ssvfiscanf_r+0x1ac>
 8013ce0:	6823      	ldr	r3, [r4, #0]
 8013ce2:	781a      	ldrb	r2, [r3, #0]
 8013ce4:	4552      	cmp	r2, sl
 8013ce6:	f040 80a1 	bne.w	8013e2c <__ssvfiscanf_r+0x2dc>
 8013cea:	3301      	adds	r3, #1
 8013cec:	6862      	ldr	r2, [r4, #4]
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013cf2:	3a01      	subs	r2, #1
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	6062      	str	r2, [r4, #4]
 8013cf8:	9345      	str	r3, [sp, #276]	; 0x114
 8013cfa:	e752      	b.n	8013ba2 <__ssvfiscanf_r+0x52>
 8013cfc:	4621      	mov	r1, r4
 8013cfe:	4630      	mov	r0, r6
 8013d00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d02:	4798      	blx	r3
 8013d04:	2800      	cmp	r0, #0
 8013d06:	d0eb      	beq.n	8013ce0 <__ssvfiscanf_r+0x190>
 8013d08:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	f040 8084 	bne.w	8013e18 <__ssvfiscanf_r+0x2c8>
 8013d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d14:	e086      	b.n	8013e24 <__ssvfiscanf_r+0x2d4>
 8013d16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013d18:	f042 0220 	orr.w	r2, r2, #32
 8013d1c:	9241      	str	r2, [sp, #260]	; 0x104
 8013d1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013d24:	9241      	str	r2, [sp, #260]	; 0x104
 8013d26:	2210      	movs	r2, #16
 8013d28:	2b6f      	cmp	r3, #111	; 0x6f
 8013d2a:	bf34      	ite	cc
 8013d2c:	2303      	movcc	r3, #3
 8013d2e:	2304      	movcs	r3, #4
 8013d30:	9242      	str	r2, [sp, #264]	; 0x108
 8013d32:	9347      	str	r3, [sp, #284]	; 0x11c
 8013d34:	6863      	ldr	r3, [r4, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	dd41      	ble.n	8013dbe <__ssvfiscanf_r+0x26e>
 8013d3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d3c:	0659      	lsls	r1, r3, #25
 8013d3e:	d404      	bmi.n	8013d4a <__ssvfiscanf_r+0x1fa>
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	781a      	ldrb	r2, [r3, #0]
 8013d44:	5cba      	ldrb	r2, [r7, r2]
 8013d46:	0712      	lsls	r2, r2, #28
 8013d48:	d440      	bmi.n	8013dcc <__ssvfiscanf_r+0x27c>
 8013d4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013d4c:	2b02      	cmp	r3, #2
 8013d4e:	dc4f      	bgt.n	8013df0 <__ssvfiscanf_r+0x2a0>
 8013d50:	466b      	mov	r3, sp
 8013d52:	4622      	mov	r2, r4
 8013d54:	4630      	mov	r0, r6
 8013d56:	a941      	add	r1, sp, #260	; 0x104
 8013d58:	f000 f874 	bl	8013e44 <_scanf_chars>
 8013d5c:	2801      	cmp	r0, #1
 8013d5e:	d065      	beq.n	8013e2c <__ssvfiscanf_r+0x2dc>
 8013d60:	2802      	cmp	r0, #2
 8013d62:	f47f af1e 	bne.w	8013ba2 <__ssvfiscanf_r+0x52>
 8013d66:	e7cf      	b.n	8013d08 <__ssvfiscanf_r+0x1b8>
 8013d68:	220a      	movs	r2, #10
 8013d6a:	e7dd      	b.n	8013d28 <__ssvfiscanf_r+0x1d8>
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	9342      	str	r3, [sp, #264]	; 0x108
 8013d70:	2303      	movs	r3, #3
 8013d72:	e7de      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013d74:	2308      	movs	r3, #8
 8013d76:	9342      	str	r3, [sp, #264]	; 0x108
 8013d78:	2304      	movs	r3, #4
 8013d7a:	e7da      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	4640      	mov	r0, r8
 8013d80:	f000 f9c2 	bl	8014108 <__sccl>
 8013d84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d86:	4605      	mov	r5, r0
 8013d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d8c:	9341      	str	r3, [sp, #260]	; 0x104
 8013d8e:	2301      	movs	r3, #1
 8013d90:	e7cf      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d98:	9341      	str	r3, [sp, #260]	; 0x104
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	e7c9      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013d9e:	2302      	movs	r3, #2
 8013da0:	e7c7      	b.n	8013d32 <__ssvfiscanf_r+0x1e2>
 8013da2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013da4:	06c3      	lsls	r3, r0, #27
 8013da6:	f53f aefc 	bmi.w	8013ba2 <__ssvfiscanf_r+0x52>
 8013daa:	9b00      	ldr	r3, [sp, #0]
 8013dac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013dae:	1d19      	adds	r1, r3, #4
 8013db0:	9100      	str	r1, [sp, #0]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	07c0      	lsls	r0, r0, #31
 8013db6:	bf4c      	ite	mi
 8013db8:	801a      	strhmi	r2, [r3, #0]
 8013dba:	601a      	strpl	r2, [r3, #0]
 8013dbc:	e6f1      	b.n	8013ba2 <__ssvfiscanf_r+0x52>
 8013dbe:	4621      	mov	r1, r4
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013dc4:	4798      	blx	r3
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	d0b7      	beq.n	8013d3a <__ssvfiscanf_r+0x1ea>
 8013dca:	e79d      	b.n	8013d08 <__ssvfiscanf_r+0x1b8>
 8013dcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013dce:	3201      	adds	r2, #1
 8013dd0:	9245      	str	r2, [sp, #276]	; 0x114
 8013dd2:	6862      	ldr	r2, [r4, #4]
 8013dd4:	3a01      	subs	r2, #1
 8013dd6:	2a00      	cmp	r2, #0
 8013dd8:	6062      	str	r2, [r4, #4]
 8013dda:	dd02      	ble.n	8013de2 <__ssvfiscanf_r+0x292>
 8013ddc:	3301      	adds	r3, #1
 8013dde:	6023      	str	r3, [r4, #0]
 8013de0:	e7ae      	b.n	8013d40 <__ssvfiscanf_r+0x1f0>
 8013de2:	4621      	mov	r1, r4
 8013de4:	4630      	mov	r0, r6
 8013de6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013de8:	4798      	blx	r3
 8013dea:	2800      	cmp	r0, #0
 8013dec:	d0a8      	beq.n	8013d40 <__ssvfiscanf_r+0x1f0>
 8013dee:	e78b      	b.n	8013d08 <__ssvfiscanf_r+0x1b8>
 8013df0:	2b04      	cmp	r3, #4
 8013df2:	dc06      	bgt.n	8013e02 <__ssvfiscanf_r+0x2b2>
 8013df4:	466b      	mov	r3, sp
 8013df6:	4622      	mov	r2, r4
 8013df8:	4630      	mov	r0, r6
 8013dfa:	a941      	add	r1, sp, #260	; 0x104
 8013dfc:	f000 f87a 	bl	8013ef4 <_scanf_i>
 8013e00:	e7ac      	b.n	8013d5c <__ssvfiscanf_r+0x20c>
 8013e02:	4b0f      	ldr	r3, [pc, #60]	; (8013e40 <__ssvfiscanf_r+0x2f0>)
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f43f aecc 	beq.w	8013ba2 <__ssvfiscanf_r+0x52>
 8013e0a:	466b      	mov	r3, sp
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	4630      	mov	r0, r6
 8013e10:	a941      	add	r1, sp, #260	; 0x104
 8013e12:	f7fc fc2b 	bl	801066c <_scanf_float>
 8013e16:	e7a1      	b.n	8013d5c <__ssvfiscanf_r+0x20c>
 8013e18:	89a3      	ldrh	r3, [r4, #12]
 8013e1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013e1e:	bf18      	it	ne
 8013e20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8013e24:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013e2e:	e7f9      	b.n	8013e24 <__ssvfiscanf_r+0x2d4>
 8013e30:	08013a9d 	.word	0x08013a9d
 8013e34:	08013b17 	.word	0x08013b17
 8013e38:	080150a9 	.word	0x080150a9
 8013e3c:	08015422 	.word	0x08015422
 8013e40:	0801066d 	.word	0x0801066d

08013e44 <_scanf_chars>:
 8013e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e48:	4615      	mov	r5, r2
 8013e4a:	688a      	ldr	r2, [r1, #8]
 8013e4c:	4680      	mov	r8, r0
 8013e4e:	460c      	mov	r4, r1
 8013e50:	b932      	cbnz	r2, 8013e60 <_scanf_chars+0x1c>
 8013e52:	698a      	ldr	r2, [r1, #24]
 8013e54:	2a00      	cmp	r2, #0
 8013e56:	bf0c      	ite	eq
 8013e58:	2201      	moveq	r2, #1
 8013e5a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8013e5e:	608a      	str	r2, [r1, #8]
 8013e60:	2700      	movs	r7, #0
 8013e62:	6822      	ldr	r2, [r4, #0]
 8013e64:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8013ef0 <_scanf_chars+0xac>
 8013e68:	06d1      	lsls	r1, r2, #27
 8013e6a:	bf5f      	itttt	pl
 8013e6c:	681a      	ldrpl	r2, [r3, #0]
 8013e6e:	1d11      	addpl	r1, r2, #4
 8013e70:	6019      	strpl	r1, [r3, #0]
 8013e72:	6816      	ldrpl	r6, [r2, #0]
 8013e74:	69a0      	ldr	r0, [r4, #24]
 8013e76:	b188      	cbz	r0, 8013e9c <_scanf_chars+0x58>
 8013e78:	2801      	cmp	r0, #1
 8013e7a:	d107      	bne.n	8013e8c <_scanf_chars+0x48>
 8013e7c:	682b      	ldr	r3, [r5, #0]
 8013e7e:	781a      	ldrb	r2, [r3, #0]
 8013e80:	6963      	ldr	r3, [r4, #20]
 8013e82:	5c9b      	ldrb	r3, [r3, r2]
 8013e84:	b953      	cbnz	r3, 8013e9c <_scanf_chars+0x58>
 8013e86:	bb27      	cbnz	r7, 8013ed2 <_scanf_chars+0x8e>
 8013e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e8c:	2802      	cmp	r0, #2
 8013e8e:	d120      	bne.n	8013ed2 <_scanf_chars+0x8e>
 8013e90:	682b      	ldr	r3, [r5, #0]
 8013e92:	781b      	ldrb	r3, [r3, #0]
 8013e94:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013e98:	071b      	lsls	r3, r3, #28
 8013e9a:	d41a      	bmi.n	8013ed2 <_scanf_chars+0x8e>
 8013e9c:	6823      	ldr	r3, [r4, #0]
 8013e9e:	3701      	adds	r7, #1
 8013ea0:	06da      	lsls	r2, r3, #27
 8013ea2:	bf5e      	ittt	pl
 8013ea4:	682b      	ldrpl	r3, [r5, #0]
 8013ea6:	781b      	ldrbpl	r3, [r3, #0]
 8013ea8:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013eac:	682a      	ldr	r2, [r5, #0]
 8013eae:	686b      	ldr	r3, [r5, #4]
 8013eb0:	3201      	adds	r2, #1
 8013eb2:	602a      	str	r2, [r5, #0]
 8013eb4:	68a2      	ldr	r2, [r4, #8]
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	3a01      	subs	r2, #1
 8013eba:	606b      	str	r3, [r5, #4]
 8013ebc:	60a2      	str	r2, [r4, #8]
 8013ebe:	b142      	cbz	r2, 8013ed2 <_scanf_chars+0x8e>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	dcd7      	bgt.n	8013e74 <_scanf_chars+0x30>
 8013ec4:	4629      	mov	r1, r5
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013ecc:	4798      	blx	r3
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	d0d0      	beq.n	8013e74 <_scanf_chars+0x30>
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	f013 0310 	ands.w	r3, r3, #16
 8013ed8:	d105      	bne.n	8013ee6 <_scanf_chars+0xa2>
 8013eda:	68e2      	ldr	r2, [r4, #12]
 8013edc:	3201      	adds	r2, #1
 8013ede:	60e2      	str	r2, [r4, #12]
 8013ee0:	69a2      	ldr	r2, [r4, #24]
 8013ee2:	b102      	cbz	r2, 8013ee6 <_scanf_chars+0xa2>
 8013ee4:	7033      	strb	r3, [r6, #0]
 8013ee6:	6923      	ldr	r3, [r4, #16]
 8013ee8:	2000      	movs	r0, #0
 8013eea:	441f      	add	r7, r3
 8013eec:	6127      	str	r7, [r4, #16]
 8013eee:	e7cb      	b.n	8013e88 <_scanf_chars+0x44>
 8013ef0:	080150a9 	.word	0x080150a9

08013ef4 <_scanf_i>:
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	460c      	mov	r4, r1
 8013efa:	4698      	mov	r8, r3
 8013efc:	4b72      	ldr	r3, [pc, #456]	; (80140c8 <_scanf_i+0x1d4>)
 8013efe:	b087      	sub	sp, #28
 8013f00:	4682      	mov	sl, r0
 8013f02:	4616      	mov	r6, r2
 8013f04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013f08:	ab03      	add	r3, sp, #12
 8013f0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013f0e:	4b6f      	ldr	r3, [pc, #444]	; (80140cc <_scanf_i+0x1d8>)
 8013f10:	69a1      	ldr	r1, [r4, #24]
 8013f12:	4a6f      	ldr	r2, [pc, #444]	; (80140d0 <_scanf_i+0x1dc>)
 8013f14:	4627      	mov	r7, r4
 8013f16:	2903      	cmp	r1, #3
 8013f18:	bf18      	it	ne
 8013f1a:	461a      	movne	r2, r3
 8013f1c:	68a3      	ldr	r3, [r4, #8]
 8013f1e:	9201      	str	r2, [sp, #4]
 8013f20:	1e5a      	subs	r2, r3, #1
 8013f22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013f26:	bf81      	itttt	hi
 8013f28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013f2c:	eb03 0905 	addhi.w	r9, r3, r5
 8013f30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013f34:	60a3      	strhi	r3, [r4, #8]
 8013f36:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013f3a:	bf98      	it	ls
 8013f3c:	f04f 0900 	movls.w	r9, #0
 8013f40:	463d      	mov	r5, r7
 8013f42:	f04f 0b00 	mov.w	fp, #0
 8013f46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013f4a:	6023      	str	r3, [r4, #0]
 8013f4c:	6831      	ldr	r1, [r6, #0]
 8013f4e:	ab03      	add	r3, sp, #12
 8013f50:	2202      	movs	r2, #2
 8013f52:	7809      	ldrb	r1, [r1, #0]
 8013f54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013f58:	f7fe ff72 	bl	8012e40 <memchr>
 8013f5c:	b328      	cbz	r0, 8013faa <_scanf_i+0xb6>
 8013f5e:	f1bb 0f01 	cmp.w	fp, #1
 8013f62:	d159      	bne.n	8014018 <_scanf_i+0x124>
 8013f64:	6862      	ldr	r2, [r4, #4]
 8013f66:	b92a      	cbnz	r2, 8013f74 <_scanf_i+0x80>
 8013f68:	2308      	movs	r3, #8
 8013f6a:	6822      	ldr	r2, [r4, #0]
 8013f6c:	6063      	str	r3, [r4, #4]
 8013f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f72:	6022      	str	r2, [r4, #0]
 8013f74:	6822      	ldr	r2, [r4, #0]
 8013f76:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013f7a:	6022      	str	r2, [r4, #0]
 8013f7c:	68a2      	ldr	r2, [r4, #8]
 8013f7e:	1e51      	subs	r1, r2, #1
 8013f80:	60a1      	str	r1, [r4, #8]
 8013f82:	b192      	cbz	r2, 8013faa <_scanf_i+0xb6>
 8013f84:	6832      	ldr	r2, [r6, #0]
 8013f86:	1c51      	adds	r1, r2, #1
 8013f88:	6031      	str	r1, [r6, #0]
 8013f8a:	7812      	ldrb	r2, [r2, #0]
 8013f8c:	f805 2b01 	strb.w	r2, [r5], #1
 8013f90:	6872      	ldr	r2, [r6, #4]
 8013f92:	3a01      	subs	r2, #1
 8013f94:	2a00      	cmp	r2, #0
 8013f96:	6072      	str	r2, [r6, #4]
 8013f98:	dc07      	bgt.n	8013faa <_scanf_i+0xb6>
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	4650      	mov	r0, sl
 8013f9e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013fa2:	4790      	blx	r2
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f040 8085 	bne.w	80140b4 <_scanf_i+0x1c0>
 8013faa:	f10b 0b01 	add.w	fp, fp, #1
 8013fae:	f1bb 0f03 	cmp.w	fp, #3
 8013fb2:	d1cb      	bne.n	8013f4c <_scanf_i+0x58>
 8013fb4:	6863      	ldr	r3, [r4, #4]
 8013fb6:	b90b      	cbnz	r3, 8013fbc <_scanf_i+0xc8>
 8013fb8:	230a      	movs	r3, #10
 8013fba:	6063      	str	r3, [r4, #4]
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	4945      	ldr	r1, [pc, #276]	; (80140d4 <_scanf_i+0x1e0>)
 8013fc0:	6960      	ldr	r0, [r4, #20]
 8013fc2:	1ac9      	subs	r1, r1, r3
 8013fc4:	f000 f8a0 	bl	8014108 <__sccl>
 8013fc8:	f04f 0b00 	mov.w	fp, #0
 8013fcc:	68a3      	ldr	r3, [r4, #8]
 8013fce:	6822      	ldr	r2, [r4, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d03d      	beq.n	8014050 <_scanf_i+0x15c>
 8013fd4:	6831      	ldr	r1, [r6, #0]
 8013fd6:	6960      	ldr	r0, [r4, #20]
 8013fd8:	f891 c000 	ldrb.w	ip, [r1]
 8013fdc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d035      	beq.n	8014050 <_scanf_i+0x15c>
 8013fe4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013fe8:	d124      	bne.n	8014034 <_scanf_i+0x140>
 8013fea:	0510      	lsls	r0, r2, #20
 8013fec:	d522      	bpl.n	8014034 <_scanf_i+0x140>
 8013fee:	f10b 0b01 	add.w	fp, fp, #1
 8013ff2:	f1b9 0f00 	cmp.w	r9, #0
 8013ff6:	d003      	beq.n	8014000 <_scanf_i+0x10c>
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013ffe:	60a3      	str	r3, [r4, #8]
 8014000:	6873      	ldr	r3, [r6, #4]
 8014002:	3b01      	subs	r3, #1
 8014004:	2b00      	cmp	r3, #0
 8014006:	6073      	str	r3, [r6, #4]
 8014008:	dd1b      	ble.n	8014042 <_scanf_i+0x14e>
 801400a:	6833      	ldr	r3, [r6, #0]
 801400c:	3301      	adds	r3, #1
 801400e:	6033      	str	r3, [r6, #0]
 8014010:	68a3      	ldr	r3, [r4, #8]
 8014012:	3b01      	subs	r3, #1
 8014014:	60a3      	str	r3, [r4, #8]
 8014016:	e7d9      	b.n	8013fcc <_scanf_i+0xd8>
 8014018:	f1bb 0f02 	cmp.w	fp, #2
 801401c:	d1ae      	bne.n	8013f7c <_scanf_i+0x88>
 801401e:	6822      	ldr	r2, [r4, #0]
 8014020:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014024:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014028:	d1bf      	bne.n	8013faa <_scanf_i+0xb6>
 801402a:	2310      	movs	r3, #16
 801402c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014030:	6063      	str	r3, [r4, #4]
 8014032:	e7a2      	b.n	8013f7a <_scanf_i+0x86>
 8014034:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014038:	6022      	str	r2, [r4, #0]
 801403a:	780b      	ldrb	r3, [r1, #0]
 801403c:	f805 3b01 	strb.w	r3, [r5], #1
 8014040:	e7de      	b.n	8014000 <_scanf_i+0x10c>
 8014042:	4631      	mov	r1, r6
 8014044:	4650      	mov	r0, sl
 8014046:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801404a:	4798      	blx	r3
 801404c:	2800      	cmp	r0, #0
 801404e:	d0df      	beq.n	8014010 <_scanf_i+0x11c>
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	05d9      	lsls	r1, r3, #23
 8014054:	d50d      	bpl.n	8014072 <_scanf_i+0x17e>
 8014056:	42bd      	cmp	r5, r7
 8014058:	d909      	bls.n	801406e <_scanf_i+0x17a>
 801405a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801405e:	4632      	mov	r2, r6
 8014060:	4650      	mov	r0, sl
 8014062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014066:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801406a:	4798      	blx	r3
 801406c:	464d      	mov	r5, r9
 801406e:	42bd      	cmp	r5, r7
 8014070:	d028      	beq.n	80140c4 <_scanf_i+0x1d0>
 8014072:	6822      	ldr	r2, [r4, #0]
 8014074:	f012 0210 	ands.w	r2, r2, #16
 8014078:	d113      	bne.n	80140a2 <_scanf_i+0x1ae>
 801407a:	702a      	strb	r2, [r5, #0]
 801407c:	4639      	mov	r1, r7
 801407e:	6863      	ldr	r3, [r4, #4]
 8014080:	4650      	mov	r0, sl
 8014082:	9e01      	ldr	r6, [sp, #4]
 8014084:	47b0      	blx	r6
 8014086:	f8d8 3000 	ldr.w	r3, [r8]
 801408a:	6821      	ldr	r1, [r4, #0]
 801408c:	1d1a      	adds	r2, r3, #4
 801408e:	f8c8 2000 	str.w	r2, [r8]
 8014092:	f011 0f20 	tst.w	r1, #32
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	d00f      	beq.n	80140ba <_scanf_i+0x1c6>
 801409a:	6018      	str	r0, [r3, #0]
 801409c:	68e3      	ldr	r3, [r4, #12]
 801409e:	3301      	adds	r3, #1
 80140a0:	60e3      	str	r3, [r4, #12]
 80140a2:	2000      	movs	r0, #0
 80140a4:	1bed      	subs	r5, r5, r7
 80140a6:	44ab      	add	fp, r5
 80140a8:	6925      	ldr	r5, [r4, #16]
 80140aa:	445d      	add	r5, fp
 80140ac:	6125      	str	r5, [r4, #16]
 80140ae:	b007      	add	sp, #28
 80140b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b4:	f04f 0b00 	mov.w	fp, #0
 80140b8:	e7ca      	b.n	8014050 <_scanf_i+0x15c>
 80140ba:	07ca      	lsls	r2, r1, #31
 80140bc:	bf4c      	ite	mi
 80140be:	8018      	strhmi	r0, [r3, #0]
 80140c0:	6018      	strpl	r0, [r3, #0]
 80140c2:	e7eb      	b.n	801409c <_scanf_i+0x1a8>
 80140c4:	2001      	movs	r0, #1
 80140c6:	e7f2      	b.n	80140ae <_scanf_i+0x1ba>
 80140c8:	08014f58 	.word	0x08014f58
 80140cc:	08014299 	.word	0x08014299
 80140d0:	080119e1 	.word	0x080119e1
 80140d4:	08015446 	.word	0x08015446

080140d8 <_read_r>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4604      	mov	r4, r0
 80140dc:	4608      	mov	r0, r1
 80140de:	4611      	mov	r1, r2
 80140e0:	2200      	movs	r2, #0
 80140e2:	4d05      	ldr	r5, [pc, #20]	; (80140f8 <_read_r+0x20>)
 80140e4:	602a      	str	r2, [r5, #0]
 80140e6:	461a      	mov	r2, r3
 80140e8:	f7f0 fed5 	bl	8004e96 <_read>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_read_r+0x1e>
 80140f0:	682b      	ldr	r3, [r5, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_read_r+0x1e>
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	20001d4c 	.word	0x20001d4c

080140fc <nan>:
 80140fc:	2000      	movs	r0, #0
 80140fe:	4901      	ldr	r1, [pc, #4]	; (8014104 <nan+0x8>)
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	7ff80000 	.word	0x7ff80000

08014108 <__sccl>:
 8014108:	b570      	push	{r4, r5, r6, lr}
 801410a:	780b      	ldrb	r3, [r1, #0]
 801410c:	4604      	mov	r4, r0
 801410e:	2b5e      	cmp	r3, #94	; 0x5e
 8014110:	bf13      	iteet	ne
 8014112:	2200      	movne	r2, #0
 8014114:	2201      	moveq	r2, #1
 8014116:	784b      	ldrbeq	r3, [r1, #1]
 8014118:	1c48      	addne	r0, r1, #1
 801411a:	bf08      	it	eq
 801411c:	1c88      	addeq	r0, r1, #2
 801411e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014122:	1e61      	subs	r1, r4, #1
 8014124:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014128:	42a9      	cmp	r1, r5
 801412a:	d1fb      	bne.n	8014124 <__sccl+0x1c>
 801412c:	b90b      	cbnz	r3, 8014132 <__sccl+0x2a>
 801412e:	3801      	subs	r0, #1
 8014130:	bd70      	pop	{r4, r5, r6, pc}
 8014132:	f082 0101 	eor.w	r1, r2, #1
 8014136:	54e1      	strb	r1, [r4, r3]
 8014138:	1c42      	adds	r2, r0, #1
 801413a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801413e:	4610      	mov	r0, r2
 8014140:	2d2d      	cmp	r5, #45	; 0x2d
 8014142:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8014146:	d006      	beq.n	8014156 <__sccl+0x4e>
 8014148:	2d5d      	cmp	r5, #93	; 0x5d
 801414a:	d0f1      	beq.n	8014130 <__sccl+0x28>
 801414c:	b90d      	cbnz	r5, 8014152 <__sccl+0x4a>
 801414e:	4630      	mov	r0, r6
 8014150:	e7ee      	b.n	8014130 <__sccl+0x28>
 8014152:	462b      	mov	r3, r5
 8014154:	e7ef      	b.n	8014136 <__sccl+0x2e>
 8014156:	7816      	ldrb	r6, [r2, #0]
 8014158:	2e5d      	cmp	r6, #93	; 0x5d
 801415a:	d0fa      	beq.n	8014152 <__sccl+0x4a>
 801415c:	42b3      	cmp	r3, r6
 801415e:	dcf8      	bgt.n	8014152 <__sccl+0x4a>
 8014160:	4618      	mov	r0, r3
 8014162:	3001      	adds	r0, #1
 8014164:	4286      	cmp	r6, r0
 8014166:	5421      	strb	r1, [r4, r0]
 8014168:	dcfb      	bgt.n	8014162 <__sccl+0x5a>
 801416a:	43d8      	mvns	r0, r3
 801416c:	4430      	add	r0, r6
 801416e:	42b3      	cmp	r3, r6
 8014170:	bfa8      	it	ge
 8014172:	2000      	movge	r0, #0
 8014174:	1c5d      	adds	r5, r3, #1
 8014176:	182b      	adds	r3, r5, r0
 8014178:	3202      	adds	r2, #2
 801417a:	e7de      	b.n	801413a <__sccl+0x32>

0801417c <strncmp>:
 801417c:	b510      	push	{r4, lr}
 801417e:	b16a      	cbz	r2, 801419c <strncmp+0x20>
 8014180:	3901      	subs	r1, #1
 8014182:	1884      	adds	r4, r0, r2
 8014184:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014188:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801418c:	4293      	cmp	r3, r2
 801418e:	d103      	bne.n	8014198 <strncmp+0x1c>
 8014190:	42a0      	cmp	r0, r4
 8014192:	d001      	beq.n	8014198 <strncmp+0x1c>
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1f5      	bne.n	8014184 <strncmp+0x8>
 8014198:	1a98      	subs	r0, r3, r2
 801419a:	bd10      	pop	{r4, pc}
 801419c:	4610      	mov	r0, r2
 801419e:	e7fc      	b.n	801419a <strncmp+0x1e>

080141a0 <_strtoul_l.isra.0>:
 80141a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141a4:	468c      	mov	ip, r1
 80141a6:	4686      	mov	lr, r0
 80141a8:	4e3a      	ldr	r6, [pc, #232]	; (8014294 <_strtoul_l.isra.0+0xf4>)
 80141aa:	4660      	mov	r0, ip
 80141ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80141b0:	5da5      	ldrb	r5, [r4, r6]
 80141b2:	f015 0508 	ands.w	r5, r5, #8
 80141b6:	d1f8      	bne.n	80141aa <_strtoul_l.isra.0+0xa>
 80141b8:	2c2d      	cmp	r4, #45	; 0x2d
 80141ba:	d134      	bne.n	8014226 <_strtoul_l.isra.0+0x86>
 80141bc:	f04f 0801 	mov.w	r8, #1
 80141c0:	f89c 4000 	ldrb.w	r4, [ip]
 80141c4:	f100 0c02 	add.w	ip, r0, #2
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d05e      	beq.n	801428a <_strtoul_l.isra.0+0xea>
 80141cc:	2b10      	cmp	r3, #16
 80141ce:	d10c      	bne.n	80141ea <_strtoul_l.isra.0+0x4a>
 80141d0:	2c30      	cmp	r4, #48	; 0x30
 80141d2:	d10a      	bne.n	80141ea <_strtoul_l.isra.0+0x4a>
 80141d4:	f89c 0000 	ldrb.w	r0, [ip]
 80141d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80141dc:	2858      	cmp	r0, #88	; 0x58
 80141de:	d14f      	bne.n	8014280 <_strtoul_l.isra.0+0xe0>
 80141e0:	2310      	movs	r3, #16
 80141e2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80141e6:	f10c 0c02 	add.w	ip, ip, #2
 80141ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80141ee:	fbb7 f7f3 	udiv	r7, r7, r3
 80141f2:	2500      	movs	r5, #0
 80141f4:	fb03 f907 	mul.w	r9, r3, r7
 80141f8:	4628      	mov	r0, r5
 80141fa:	ea6f 0909 	mvn.w	r9, r9
 80141fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014202:	2e09      	cmp	r6, #9
 8014204:	d818      	bhi.n	8014238 <_strtoul_l.isra.0+0x98>
 8014206:	4634      	mov	r4, r6
 8014208:	42a3      	cmp	r3, r4
 801420a:	dd24      	ble.n	8014256 <_strtoul_l.isra.0+0xb6>
 801420c:	2d00      	cmp	r5, #0
 801420e:	db1f      	blt.n	8014250 <_strtoul_l.isra.0+0xb0>
 8014210:	4287      	cmp	r7, r0
 8014212:	d31d      	bcc.n	8014250 <_strtoul_l.isra.0+0xb0>
 8014214:	d101      	bne.n	801421a <_strtoul_l.isra.0+0x7a>
 8014216:	45a1      	cmp	r9, r4
 8014218:	db1a      	blt.n	8014250 <_strtoul_l.isra.0+0xb0>
 801421a:	2501      	movs	r5, #1
 801421c:	fb00 4003 	mla	r0, r0, r3, r4
 8014220:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014224:	e7eb      	b.n	80141fe <_strtoul_l.isra.0+0x5e>
 8014226:	2c2b      	cmp	r4, #43	; 0x2b
 8014228:	bf08      	it	eq
 801422a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801422e:	46a8      	mov	r8, r5
 8014230:	bf08      	it	eq
 8014232:	f100 0c02 	addeq.w	ip, r0, #2
 8014236:	e7c7      	b.n	80141c8 <_strtoul_l.isra.0+0x28>
 8014238:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801423c:	2e19      	cmp	r6, #25
 801423e:	d801      	bhi.n	8014244 <_strtoul_l.isra.0+0xa4>
 8014240:	3c37      	subs	r4, #55	; 0x37
 8014242:	e7e1      	b.n	8014208 <_strtoul_l.isra.0+0x68>
 8014244:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014248:	2e19      	cmp	r6, #25
 801424a:	d804      	bhi.n	8014256 <_strtoul_l.isra.0+0xb6>
 801424c:	3c57      	subs	r4, #87	; 0x57
 801424e:	e7db      	b.n	8014208 <_strtoul_l.isra.0+0x68>
 8014250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014254:	e7e4      	b.n	8014220 <_strtoul_l.isra.0+0x80>
 8014256:	2d00      	cmp	r5, #0
 8014258:	da07      	bge.n	801426a <_strtoul_l.isra.0+0xca>
 801425a:	2322      	movs	r3, #34	; 0x22
 801425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014260:	f8ce 3000 	str.w	r3, [lr]
 8014264:	b942      	cbnz	r2, 8014278 <_strtoul_l.isra.0+0xd8>
 8014266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801426a:	f1b8 0f00 	cmp.w	r8, #0
 801426e:	d000      	beq.n	8014272 <_strtoul_l.isra.0+0xd2>
 8014270:	4240      	negs	r0, r0
 8014272:	2a00      	cmp	r2, #0
 8014274:	d0f7      	beq.n	8014266 <_strtoul_l.isra.0+0xc6>
 8014276:	b10d      	cbz	r5, 801427c <_strtoul_l.isra.0+0xdc>
 8014278:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801427c:	6011      	str	r1, [r2, #0]
 801427e:	e7f2      	b.n	8014266 <_strtoul_l.isra.0+0xc6>
 8014280:	2430      	movs	r4, #48	; 0x30
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1b1      	bne.n	80141ea <_strtoul_l.isra.0+0x4a>
 8014286:	2308      	movs	r3, #8
 8014288:	e7af      	b.n	80141ea <_strtoul_l.isra.0+0x4a>
 801428a:	2c30      	cmp	r4, #48	; 0x30
 801428c:	d0a2      	beq.n	80141d4 <_strtoul_l.isra.0+0x34>
 801428e:	230a      	movs	r3, #10
 8014290:	e7ab      	b.n	80141ea <_strtoul_l.isra.0+0x4a>
 8014292:	bf00      	nop
 8014294:	080150a9 	.word	0x080150a9

08014298 <_strtoul_r>:
 8014298:	f7ff bf82 	b.w	80141a0 <_strtoul_l.isra.0>

0801429c <__submore>:
 801429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a0:	460c      	mov	r4, r1
 80142a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80142a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142a8:	4299      	cmp	r1, r3
 80142aa:	d11b      	bne.n	80142e4 <__submore+0x48>
 80142ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80142b0:	f7fb fd22 	bl	800fcf8 <_malloc_r>
 80142b4:	b918      	cbnz	r0, 80142be <__submore+0x22>
 80142b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80142c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80142c8:	6360      	str	r0, [r4, #52]	; 0x34
 80142ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80142ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80142d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80142d6:	7043      	strb	r3, [r0, #1]
 80142d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80142dc:	7003      	strb	r3, [r0, #0]
 80142de:	6020      	str	r0, [r4, #0]
 80142e0:	2000      	movs	r0, #0
 80142e2:	e7ea      	b.n	80142ba <__submore+0x1e>
 80142e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80142e6:	0077      	lsls	r7, r6, #1
 80142e8:	463a      	mov	r2, r7
 80142ea:	f000 fa04 	bl	80146f6 <_realloc_r>
 80142ee:	4605      	mov	r5, r0
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d0e0      	beq.n	80142b6 <__submore+0x1a>
 80142f4:	eb00 0806 	add.w	r8, r0, r6
 80142f8:	4601      	mov	r1, r0
 80142fa:	4632      	mov	r2, r6
 80142fc:	4640      	mov	r0, r8
 80142fe:	f7fb fc71 	bl	800fbe4 <memcpy>
 8014302:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014306:	f8c4 8000 	str.w	r8, [r4]
 801430a:	e7e9      	b.n	80142e0 <__submore+0x44>

0801430c <__ascii_wctomb>:
 801430c:	4603      	mov	r3, r0
 801430e:	4608      	mov	r0, r1
 8014310:	b141      	cbz	r1, 8014324 <__ascii_wctomb+0x18>
 8014312:	2aff      	cmp	r2, #255	; 0xff
 8014314:	d904      	bls.n	8014320 <__ascii_wctomb+0x14>
 8014316:	228a      	movs	r2, #138	; 0x8a
 8014318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	4770      	bx	lr
 8014320:	2001      	movs	r0, #1
 8014322:	700a      	strb	r2, [r1, #0]
 8014324:	4770      	bx	lr
	...

08014328 <__assert_func>:
 8014328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801432a:	4614      	mov	r4, r2
 801432c:	461a      	mov	r2, r3
 801432e:	4b09      	ldr	r3, [pc, #36]	; (8014354 <__assert_func+0x2c>)
 8014330:	4605      	mov	r5, r0
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68d8      	ldr	r0, [r3, #12]
 8014336:	b14c      	cbz	r4, 801434c <__assert_func+0x24>
 8014338:	4b07      	ldr	r3, [pc, #28]	; (8014358 <__assert_func+0x30>)
 801433a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801433e:	9100      	str	r1, [sp, #0]
 8014340:	462b      	mov	r3, r5
 8014342:	4906      	ldr	r1, [pc, #24]	; (801435c <__assert_func+0x34>)
 8014344:	f000 f9a6 	bl	8014694 <fiprintf>
 8014348:	f7fb fc02 	bl	800fb50 <abort>
 801434c:	4b04      	ldr	r3, [pc, #16]	; (8014360 <__assert_func+0x38>)
 801434e:	461c      	mov	r4, r3
 8014350:	e7f3      	b.n	801433a <__assert_func+0x12>
 8014352:	bf00      	nop
 8014354:	20000224 	.word	0x20000224
 8014358:	08015448 	.word	0x08015448
 801435c:	08015455 	.word	0x08015455
 8014360:	08015483 	.word	0x08015483

08014364 <__sflush_r>:
 8014364:	898a      	ldrh	r2, [r1, #12]
 8014366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436a:	4605      	mov	r5, r0
 801436c:	0710      	lsls	r0, r2, #28
 801436e:	460c      	mov	r4, r1
 8014370:	d458      	bmi.n	8014424 <__sflush_r+0xc0>
 8014372:	684b      	ldr	r3, [r1, #4]
 8014374:	2b00      	cmp	r3, #0
 8014376:	dc05      	bgt.n	8014384 <__sflush_r+0x20>
 8014378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801437a:	2b00      	cmp	r3, #0
 801437c:	dc02      	bgt.n	8014384 <__sflush_r+0x20>
 801437e:	2000      	movs	r0, #0
 8014380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014386:	2e00      	cmp	r6, #0
 8014388:	d0f9      	beq.n	801437e <__sflush_r+0x1a>
 801438a:	2300      	movs	r3, #0
 801438c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014390:	682f      	ldr	r7, [r5, #0]
 8014392:	602b      	str	r3, [r5, #0]
 8014394:	d032      	beq.n	80143fc <__sflush_r+0x98>
 8014396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014398:	89a3      	ldrh	r3, [r4, #12]
 801439a:	075a      	lsls	r2, r3, #29
 801439c:	d505      	bpl.n	80143aa <__sflush_r+0x46>
 801439e:	6863      	ldr	r3, [r4, #4]
 80143a0:	1ac0      	subs	r0, r0, r3
 80143a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143a4:	b10b      	cbz	r3, 80143aa <__sflush_r+0x46>
 80143a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143a8:	1ac0      	subs	r0, r0, r3
 80143aa:	2300      	movs	r3, #0
 80143ac:	4602      	mov	r2, r0
 80143ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143b0:	4628      	mov	r0, r5
 80143b2:	6a21      	ldr	r1, [r4, #32]
 80143b4:	47b0      	blx	r6
 80143b6:	1c43      	adds	r3, r0, #1
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	d106      	bne.n	80143ca <__sflush_r+0x66>
 80143bc:	6829      	ldr	r1, [r5, #0]
 80143be:	291d      	cmp	r1, #29
 80143c0:	d82c      	bhi.n	801441c <__sflush_r+0xb8>
 80143c2:	4a2a      	ldr	r2, [pc, #168]	; (801446c <__sflush_r+0x108>)
 80143c4:	40ca      	lsrs	r2, r1
 80143c6:	07d6      	lsls	r6, r2, #31
 80143c8:	d528      	bpl.n	801441c <__sflush_r+0xb8>
 80143ca:	2200      	movs	r2, #0
 80143cc:	6062      	str	r2, [r4, #4]
 80143ce:	6922      	ldr	r2, [r4, #16]
 80143d0:	04d9      	lsls	r1, r3, #19
 80143d2:	6022      	str	r2, [r4, #0]
 80143d4:	d504      	bpl.n	80143e0 <__sflush_r+0x7c>
 80143d6:	1c42      	adds	r2, r0, #1
 80143d8:	d101      	bne.n	80143de <__sflush_r+0x7a>
 80143da:	682b      	ldr	r3, [r5, #0]
 80143dc:	b903      	cbnz	r3, 80143e0 <__sflush_r+0x7c>
 80143de:	6560      	str	r0, [r4, #84]	; 0x54
 80143e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143e2:	602f      	str	r7, [r5, #0]
 80143e4:	2900      	cmp	r1, #0
 80143e6:	d0ca      	beq.n	801437e <__sflush_r+0x1a>
 80143e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143ec:	4299      	cmp	r1, r3
 80143ee:	d002      	beq.n	80143f6 <__sflush_r+0x92>
 80143f0:	4628      	mov	r0, r5
 80143f2:	f7fb fc35 	bl	800fc60 <_free_r>
 80143f6:	2000      	movs	r0, #0
 80143f8:	6360      	str	r0, [r4, #52]	; 0x34
 80143fa:	e7c1      	b.n	8014380 <__sflush_r+0x1c>
 80143fc:	6a21      	ldr	r1, [r4, #32]
 80143fe:	2301      	movs	r3, #1
 8014400:	4628      	mov	r0, r5
 8014402:	47b0      	blx	r6
 8014404:	1c41      	adds	r1, r0, #1
 8014406:	d1c7      	bne.n	8014398 <__sflush_r+0x34>
 8014408:	682b      	ldr	r3, [r5, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d0c4      	beq.n	8014398 <__sflush_r+0x34>
 801440e:	2b1d      	cmp	r3, #29
 8014410:	d001      	beq.n	8014416 <__sflush_r+0xb2>
 8014412:	2b16      	cmp	r3, #22
 8014414:	d101      	bne.n	801441a <__sflush_r+0xb6>
 8014416:	602f      	str	r7, [r5, #0]
 8014418:	e7b1      	b.n	801437e <__sflush_r+0x1a>
 801441a:	89a3      	ldrh	r3, [r4, #12]
 801441c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014420:	81a3      	strh	r3, [r4, #12]
 8014422:	e7ad      	b.n	8014380 <__sflush_r+0x1c>
 8014424:	690f      	ldr	r7, [r1, #16]
 8014426:	2f00      	cmp	r7, #0
 8014428:	d0a9      	beq.n	801437e <__sflush_r+0x1a>
 801442a:	0793      	lsls	r3, r2, #30
 801442c:	bf18      	it	ne
 801442e:	2300      	movne	r3, #0
 8014430:	680e      	ldr	r6, [r1, #0]
 8014432:	bf08      	it	eq
 8014434:	694b      	ldreq	r3, [r1, #20]
 8014436:	eba6 0807 	sub.w	r8, r6, r7
 801443a:	600f      	str	r7, [r1, #0]
 801443c:	608b      	str	r3, [r1, #8]
 801443e:	f1b8 0f00 	cmp.w	r8, #0
 8014442:	dd9c      	ble.n	801437e <__sflush_r+0x1a>
 8014444:	4643      	mov	r3, r8
 8014446:	463a      	mov	r2, r7
 8014448:	4628      	mov	r0, r5
 801444a:	6a21      	ldr	r1, [r4, #32]
 801444c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801444e:	47b0      	blx	r6
 8014450:	2800      	cmp	r0, #0
 8014452:	dc06      	bgt.n	8014462 <__sflush_r+0xfe>
 8014454:	89a3      	ldrh	r3, [r4, #12]
 8014456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801445a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801445e:	81a3      	strh	r3, [r4, #12]
 8014460:	e78e      	b.n	8014380 <__sflush_r+0x1c>
 8014462:	4407      	add	r7, r0
 8014464:	eba8 0800 	sub.w	r8, r8, r0
 8014468:	e7e9      	b.n	801443e <__sflush_r+0xda>
 801446a:	bf00      	nop
 801446c:	20400001 	.word	0x20400001

08014470 <_fflush_r>:
 8014470:	b538      	push	{r3, r4, r5, lr}
 8014472:	690b      	ldr	r3, [r1, #16]
 8014474:	4605      	mov	r5, r0
 8014476:	460c      	mov	r4, r1
 8014478:	b913      	cbnz	r3, 8014480 <_fflush_r+0x10>
 801447a:	2500      	movs	r5, #0
 801447c:	4628      	mov	r0, r5
 801447e:	bd38      	pop	{r3, r4, r5, pc}
 8014480:	b118      	cbz	r0, 801448a <_fflush_r+0x1a>
 8014482:	6983      	ldr	r3, [r0, #24]
 8014484:	b90b      	cbnz	r3, 801448a <_fflush_r+0x1a>
 8014486:	f000 f887 	bl	8014598 <__sinit>
 801448a:	4b14      	ldr	r3, [pc, #80]	; (80144dc <_fflush_r+0x6c>)
 801448c:	429c      	cmp	r4, r3
 801448e:	d11b      	bne.n	80144c8 <_fflush_r+0x58>
 8014490:	686c      	ldr	r4, [r5, #4]
 8014492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d0ef      	beq.n	801447a <_fflush_r+0xa>
 801449a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801449c:	07d0      	lsls	r0, r2, #31
 801449e:	d404      	bmi.n	80144aa <_fflush_r+0x3a>
 80144a0:	0599      	lsls	r1, r3, #22
 80144a2:	d402      	bmi.n	80144aa <_fflush_r+0x3a>
 80144a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144a6:	f7f0 fe5c 	bl	8005162 <__retarget_lock_acquire_recursive>
 80144aa:	4628      	mov	r0, r5
 80144ac:	4621      	mov	r1, r4
 80144ae:	f7ff ff59 	bl	8014364 <__sflush_r>
 80144b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144b4:	4605      	mov	r5, r0
 80144b6:	07da      	lsls	r2, r3, #31
 80144b8:	d4e0      	bmi.n	801447c <_fflush_r+0xc>
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	059b      	lsls	r3, r3, #22
 80144be:	d4dd      	bmi.n	801447c <_fflush_r+0xc>
 80144c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144c2:	f7f0 fe62 	bl	800518a <__retarget_lock_release_recursive>
 80144c6:	e7d9      	b.n	801447c <_fflush_r+0xc>
 80144c8:	4b05      	ldr	r3, [pc, #20]	; (80144e0 <_fflush_r+0x70>)
 80144ca:	429c      	cmp	r4, r3
 80144cc:	d101      	bne.n	80144d2 <_fflush_r+0x62>
 80144ce:	68ac      	ldr	r4, [r5, #8]
 80144d0:	e7df      	b.n	8014492 <_fflush_r+0x22>
 80144d2:	4b04      	ldr	r3, [pc, #16]	; (80144e4 <_fflush_r+0x74>)
 80144d4:	429c      	cmp	r4, r3
 80144d6:	bf08      	it	eq
 80144d8:	68ec      	ldreq	r4, [r5, #12]
 80144da:	e7da      	b.n	8014492 <_fflush_r+0x22>
 80144dc:	080154a4 	.word	0x080154a4
 80144e0:	080154c4 	.word	0x080154c4
 80144e4:	08015484 	.word	0x08015484

080144e8 <std>:
 80144e8:	2300      	movs	r3, #0
 80144ea:	b510      	push	{r4, lr}
 80144ec:	4604      	mov	r4, r0
 80144ee:	e9c0 3300 	strd	r3, r3, [r0]
 80144f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144f6:	6083      	str	r3, [r0, #8]
 80144f8:	8181      	strh	r1, [r0, #12]
 80144fa:	6643      	str	r3, [r0, #100]	; 0x64
 80144fc:	81c2      	strh	r2, [r0, #14]
 80144fe:	6183      	str	r3, [r0, #24]
 8014500:	4619      	mov	r1, r3
 8014502:	2208      	movs	r2, #8
 8014504:	305c      	adds	r0, #92	; 0x5c
 8014506:	f7fb fb95 	bl	800fc34 <memset>
 801450a:	4b05      	ldr	r3, [pc, #20]	; (8014520 <std+0x38>)
 801450c:	6224      	str	r4, [r4, #32]
 801450e:	6263      	str	r3, [r4, #36]	; 0x24
 8014510:	4b04      	ldr	r3, [pc, #16]	; (8014524 <std+0x3c>)
 8014512:	62a3      	str	r3, [r4, #40]	; 0x28
 8014514:	4b04      	ldr	r3, [pc, #16]	; (8014528 <std+0x40>)
 8014516:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014518:	4b04      	ldr	r3, [pc, #16]	; (801452c <std+0x44>)
 801451a:	6323      	str	r3, [r4, #48]	; 0x30
 801451c:	bd10      	pop	{r4, pc}
 801451e:	bf00      	nop
 8014520:	08010bd5 	.word	0x08010bd5
 8014524:	08010bfb 	.word	0x08010bfb
 8014528:	08010c33 	.word	0x08010c33
 801452c:	08010c57 	.word	0x08010c57

08014530 <_cleanup_r>:
 8014530:	4901      	ldr	r1, [pc, #4]	; (8014538 <_cleanup_r+0x8>)
 8014532:	f000 b8c1 	b.w	80146b8 <_fwalk_reent>
 8014536:	bf00      	nop
 8014538:	08014471 	.word	0x08014471

0801453c <__sfmoreglue>:
 801453c:	b570      	push	{r4, r5, r6, lr}
 801453e:	2568      	movs	r5, #104	; 0x68
 8014540:	1e4a      	subs	r2, r1, #1
 8014542:	4355      	muls	r5, r2
 8014544:	460e      	mov	r6, r1
 8014546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801454a:	f7fb fbd5 	bl	800fcf8 <_malloc_r>
 801454e:	4604      	mov	r4, r0
 8014550:	b140      	cbz	r0, 8014564 <__sfmoreglue+0x28>
 8014552:	2100      	movs	r1, #0
 8014554:	e9c0 1600 	strd	r1, r6, [r0]
 8014558:	300c      	adds	r0, #12
 801455a:	60a0      	str	r0, [r4, #8]
 801455c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014560:	f7fb fb68 	bl	800fc34 <memset>
 8014564:	4620      	mov	r0, r4
 8014566:	bd70      	pop	{r4, r5, r6, pc}

08014568 <__sfp_lock_acquire>:
 8014568:	4801      	ldr	r0, [pc, #4]	; (8014570 <__sfp_lock_acquire+0x8>)
 801456a:	f7f0 bdfa 	b.w	8005162 <__retarget_lock_acquire_recursive>
 801456e:	bf00      	nop
 8014570:	200006f4 	.word	0x200006f4

08014574 <__sfp_lock_release>:
 8014574:	4801      	ldr	r0, [pc, #4]	; (801457c <__sfp_lock_release+0x8>)
 8014576:	f7f0 be08 	b.w	800518a <__retarget_lock_release_recursive>
 801457a:	bf00      	nop
 801457c:	200006f4 	.word	0x200006f4

08014580 <__sinit_lock_acquire>:
 8014580:	4801      	ldr	r0, [pc, #4]	; (8014588 <__sinit_lock_acquire+0x8>)
 8014582:	f7f0 bdee 	b.w	8005162 <__retarget_lock_acquire_recursive>
 8014586:	bf00      	nop
 8014588:	200006f0 	.word	0x200006f0

0801458c <__sinit_lock_release>:
 801458c:	4801      	ldr	r0, [pc, #4]	; (8014594 <__sinit_lock_release+0x8>)
 801458e:	f7f0 bdfc 	b.w	800518a <__retarget_lock_release_recursive>
 8014592:	bf00      	nop
 8014594:	200006f0 	.word	0x200006f0

08014598 <__sinit>:
 8014598:	b510      	push	{r4, lr}
 801459a:	4604      	mov	r4, r0
 801459c:	f7ff fff0 	bl	8014580 <__sinit_lock_acquire>
 80145a0:	69a3      	ldr	r3, [r4, #24]
 80145a2:	b11b      	cbz	r3, 80145ac <__sinit+0x14>
 80145a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145a8:	f7ff bff0 	b.w	801458c <__sinit_lock_release>
 80145ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80145b0:	6523      	str	r3, [r4, #80]	; 0x50
 80145b2:	4b13      	ldr	r3, [pc, #76]	; (8014600 <__sinit+0x68>)
 80145b4:	4a13      	ldr	r2, [pc, #76]	; (8014604 <__sinit+0x6c>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80145ba:	42a3      	cmp	r3, r4
 80145bc:	bf08      	it	eq
 80145be:	2301      	moveq	r3, #1
 80145c0:	4620      	mov	r0, r4
 80145c2:	bf08      	it	eq
 80145c4:	61a3      	streq	r3, [r4, #24]
 80145c6:	f000 f81f 	bl	8014608 <__sfp>
 80145ca:	6060      	str	r0, [r4, #4]
 80145cc:	4620      	mov	r0, r4
 80145ce:	f000 f81b 	bl	8014608 <__sfp>
 80145d2:	60a0      	str	r0, [r4, #8]
 80145d4:	4620      	mov	r0, r4
 80145d6:	f000 f817 	bl	8014608 <__sfp>
 80145da:	2200      	movs	r2, #0
 80145dc:	2104      	movs	r1, #4
 80145de:	60e0      	str	r0, [r4, #12]
 80145e0:	6860      	ldr	r0, [r4, #4]
 80145e2:	f7ff ff81 	bl	80144e8 <std>
 80145e6:	2201      	movs	r2, #1
 80145e8:	2109      	movs	r1, #9
 80145ea:	68a0      	ldr	r0, [r4, #8]
 80145ec:	f7ff ff7c 	bl	80144e8 <std>
 80145f0:	2202      	movs	r2, #2
 80145f2:	2112      	movs	r1, #18
 80145f4:	68e0      	ldr	r0, [r4, #12]
 80145f6:	f7ff ff77 	bl	80144e8 <std>
 80145fa:	2301      	movs	r3, #1
 80145fc:	61a3      	str	r3, [r4, #24]
 80145fe:	e7d1      	b.n	80145a4 <__sinit+0xc>
 8014600:	08015018 	.word	0x08015018
 8014604:	08014531 	.word	0x08014531

08014608 <__sfp>:
 8014608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801460a:	4607      	mov	r7, r0
 801460c:	f7ff ffac 	bl	8014568 <__sfp_lock_acquire>
 8014610:	4b1e      	ldr	r3, [pc, #120]	; (801468c <__sfp+0x84>)
 8014612:	681e      	ldr	r6, [r3, #0]
 8014614:	69b3      	ldr	r3, [r6, #24]
 8014616:	b913      	cbnz	r3, 801461e <__sfp+0x16>
 8014618:	4630      	mov	r0, r6
 801461a:	f7ff ffbd 	bl	8014598 <__sinit>
 801461e:	3648      	adds	r6, #72	; 0x48
 8014620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014624:	3b01      	subs	r3, #1
 8014626:	d503      	bpl.n	8014630 <__sfp+0x28>
 8014628:	6833      	ldr	r3, [r6, #0]
 801462a:	b30b      	cbz	r3, 8014670 <__sfp+0x68>
 801462c:	6836      	ldr	r6, [r6, #0]
 801462e:	e7f7      	b.n	8014620 <__sfp+0x18>
 8014630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014634:	b9d5      	cbnz	r5, 801466c <__sfp+0x64>
 8014636:	4b16      	ldr	r3, [pc, #88]	; (8014690 <__sfp+0x88>)
 8014638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801463c:	60e3      	str	r3, [r4, #12]
 801463e:	6665      	str	r5, [r4, #100]	; 0x64
 8014640:	f7f0 fd69 	bl	8005116 <__retarget_lock_init_recursive>
 8014644:	f7ff ff96 	bl	8014574 <__sfp_lock_release>
 8014648:	2208      	movs	r2, #8
 801464a:	4629      	mov	r1, r5
 801464c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014654:	6025      	str	r5, [r4, #0]
 8014656:	61a5      	str	r5, [r4, #24]
 8014658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801465c:	f7fb faea 	bl	800fc34 <memset>
 8014660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014668:	4620      	mov	r0, r4
 801466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801466c:	3468      	adds	r4, #104	; 0x68
 801466e:	e7d9      	b.n	8014624 <__sfp+0x1c>
 8014670:	2104      	movs	r1, #4
 8014672:	4638      	mov	r0, r7
 8014674:	f7ff ff62 	bl	801453c <__sfmoreglue>
 8014678:	4604      	mov	r4, r0
 801467a:	6030      	str	r0, [r6, #0]
 801467c:	2800      	cmp	r0, #0
 801467e:	d1d5      	bne.n	801462c <__sfp+0x24>
 8014680:	f7ff ff78 	bl	8014574 <__sfp_lock_release>
 8014684:	230c      	movs	r3, #12
 8014686:	603b      	str	r3, [r7, #0]
 8014688:	e7ee      	b.n	8014668 <__sfp+0x60>
 801468a:	bf00      	nop
 801468c:	08015018 	.word	0x08015018
 8014690:	ffff0001 	.word	0xffff0001

08014694 <fiprintf>:
 8014694:	b40e      	push	{r1, r2, r3}
 8014696:	b503      	push	{r0, r1, lr}
 8014698:	4601      	mov	r1, r0
 801469a:	ab03      	add	r3, sp, #12
 801469c:	4805      	ldr	r0, [pc, #20]	; (80146b4 <fiprintf+0x20>)
 801469e:	f853 2b04 	ldr.w	r2, [r3], #4
 80146a2:	6800      	ldr	r0, [r0, #0]
 80146a4:	9301      	str	r3, [sp, #4]
 80146a6:	f000 f873 	bl	8014790 <_vfiprintf_r>
 80146aa:	b002      	add	sp, #8
 80146ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80146b0:	b003      	add	sp, #12
 80146b2:	4770      	bx	lr
 80146b4:	20000224 	.word	0x20000224

080146b8 <_fwalk_reent>:
 80146b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146bc:	4606      	mov	r6, r0
 80146be:	4688      	mov	r8, r1
 80146c0:	2700      	movs	r7, #0
 80146c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80146c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146ca:	f1b9 0901 	subs.w	r9, r9, #1
 80146ce:	d505      	bpl.n	80146dc <_fwalk_reent+0x24>
 80146d0:	6824      	ldr	r4, [r4, #0]
 80146d2:	2c00      	cmp	r4, #0
 80146d4:	d1f7      	bne.n	80146c6 <_fwalk_reent+0xe>
 80146d6:	4638      	mov	r0, r7
 80146d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146dc:	89ab      	ldrh	r3, [r5, #12]
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d907      	bls.n	80146f2 <_fwalk_reent+0x3a>
 80146e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146e6:	3301      	adds	r3, #1
 80146e8:	d003      	beq.n	80146f2 <_fwalk_reent+0x3a>
 80146ea:	4629      	mov	r1, r5
 80146ec:	4630      	mov	r0, r6
 80146ee:	47c0      	blx	r8
 80146f0:	4307      	orrs	r7, r0
 80146f2:	3568      	adds	r5, #104	; 0x68
 80146f4:	e7e9      	b.n	80146ca <_fwalk_reent+0x12>

080146f6 <_realloc_r>:
 80146f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f8:	4607      	mov	r7, r0
 80146fa:	4614      	mov	r4, r2
 80146fc:	460e      	mov	r6, r1
 80146fe:	b921      	cbnz	r1, 801470a <_realloc_r+0x14>
 8014700:	4611      	mov	r1, r2
 8014702:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014706:	f7fb baf7 	b.w	800fcf8 <_malloc_r>
 801470a:	b922      	cbnz	r2, 8014716 <_realloc_r+0x20>
 801470c:	f7fb faa8 	bl	800fc60 <_free_r>
 8014710:	4625      	mov	r5, r4
 8014712:	4628      	mov	r0, r5
 8014714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014716:	f000 fa8f 	bl	8014c38 <_malloc_usable_size_r>
 801471a:	42a0      	cmp	r0, r4
 801471c:	d20f      	bcs.n	801473e <_realloc_r+0x48>
 801471e:	4621      	mov	r1, r4
 8014720:	4638      	mov	r0, r7
 8014722:	f7fb fae9 	bl	800fcf8 <_malloc_r>
 8014726:	4605      	mov	r5, r0
 8014728:	2800      	cmp	r0, #0
 801472a:	d0f2      	beq.n	8014712 <_realloc_r+0x1c>
 801472c:	4631      	mov	r1, r6
 801472e:	4622      	mov	r2, r4
 8014730:	f7fb fa58 	bl	800fbe4 <memcpy>
 8014734:	4631      	mov	r1, r6
 8014736:	4638      	mov	r0, r7
 8014738:	f7fb fa92 	bl	800fc60 <_free_r>
 801473c:	e7e9      	b.n	8014712 <_realloc_r+0x1c>
 801473e:	4635      	mov	r5, r6
 8014740:	e7e7      	b.n	8014712 <_realloc_r+0x1c>

08014742 <__sfputc_r>:
 8014742:	6893      	ldr	r3, [r2, #8]
 8014744:	b410      	push	{r4}
 8014746:	3b01      	subs	r3, #1
 8014748:	2b00      	cmp	r3, #0
 801474a:	6093      	str	r3, [r2, #8]
 801474c:	da07      	bge.n	801475e <__sfputc_r+0x1c>
 801474e:	6994      	ldr	r4, [r2, #24]
 8014750:	42a3      	cmp	r3, r4
 8014752:	db01      	blt.n	8014758 <__sfputc_r+0x16>
 8014754:	290a      	cmp	r1, #10
 8014756:	d102      	bne.n	801475e <__sfputc_r+0x1c>
 8014758:	bc10      	pop	{r4}
 801475a:	f000 b949 	b.w	80149f0 <__swbuf_r>
 801475e:	6813      	ldr	r3, [r2, #0]
 8014760:	1c58      	adds	r0, r3, #1
 8014762:	6010      	str	r0, [r2, #0]
 8014764:	7019      	strb	r1, [r3, #0]
 8014766:	4608      	mov	r0, r1
 8014768:	bc10      	pop	{r4}
 801476a:	4770      	bx	lr

0801476c <__sfputs_r>:
 801476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801476e:	4606      	mov	r6, r0
 8014770:	460f      	mov	r7, r1
 8014772:	4614      	mov	r4, r2
 8014774:	18d5      	adds	r5, r2, r3
 8014776:	42ac      	cmp	r4, r5
 8014778:	d101      	bne.n	801477e <__sfputs_r+0x12>
 801477a:	2000      	movs	r0, #0
 801477c:	e007      	b.n	801478e <__sfputs_r+0x22>
 801477e:	463a      	mov	r2, r7
 8014780:	4630      	mov	r0, r6
 8014782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014786:	f7ff ffdc 	bl	8014742 <__sfputc_r>
 801478a:	1c43      	adds	r3, r0, #1
 801478c:	d1f3      	bne.n	8014776 <__sfputs_r+0xa>
 801478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014790 <_vfiprintf_r>:
 8014790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014794:	460d      	mov	r5, r1
 8014796:	4614      	mov	r4, r2
 8014798:	4698      	mov	r8, r3
 801479a:	4606      	mov	r6, r0
 801479c:	b09d      	sub	sp, #116	; 0x74
 801479e:	b118      	cbz	r0, 80147a8 <_vfiprintf_r+0x18>
 80147a0:	6983      	ldr	r3, [r0, #24]
 80147a2:	b90b      	cbnz	r3, 80147a8 <_vfiprintf_r+0x18>
 80147a4:	f7ff fef8 	bl	8014598 <__sinit>
 80147a8:	4b89      	ldr	r3, [pc, #548]	; (80149d0 <_vfiprintf_r+0x240>)
 80147aa:	429d      	cmp	r5, r3
 80147ac:	d11b      	bne.n	80147e6 <_vfiprintf_r+0x56>
 80147ae:	6875      	ldr	r5, [r6, #4]
 80147b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147b2:	07d9      	lsls	r1, r3, #31
 80147b4:	d405      	bmi.n	80147c2 <_vfiprintf_r+0x32>
 80147b6:	89ab      	ldrh	r3, [r5, #12]
 80147b8:	059a      	lsls	r2, r3, #22
 80147ba:	d402      	bmi.n	80147c2 <_vfiprintf_r+0x32>
 80147bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147be:	f7f0 fcd0 	bl	8005162 <__retarget_lock_acquire_recursive>
 80147c2:	89ab      	ldrh	r3, [r5, #12]
 80147c4:	071b      	lsls	r3, r3, #28
 80147c6:	d501      	bpl.n	80147cc <_vfiprintf_r+0x3c>
 80147c8:	692b      	ldr	r3, [r5, #16]
 80147ca:	b9eb      	cbnz	r3, 8014808 <_vfiprintf_r+0x78>
 80147cc:	4629      	mov	r1, r5
 80147ce:	4630      	mov	r0, r6
 80147d0:	f000 f960 	bl	8014a94 <__swsetup_r>
 80147d4:	b1c0      	cbz	r0, 8014808 <_vfiprintf_r+0x78>
 80147d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147d8:	07dc      	lsls	r4, r3, #31
 80147da:	d50e      	bpl.n	80147fa <_vfiprintf_r+0x6a>
 80147dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147e0:	b01d      	add	sp, #116	; 0x74
 80147e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e6:	4b7b      	ldr	r3, [pc, #492]	; (80149d4 <_vfiprintf_r+0x244>)
 80147e8:	429d      	cmp	r5, r3
 80147ea:	d101      	bne.n	80147f0 <_vfiprintf_r+0x60>
 80147ec:	68b5      	ldr	r5, [r6, #8]
 80147ee:	e7df      	b.n	80147b0 <_vfiprintf_r+0x20>
 80147f0:	4b79      	ldr	r3, [pc, #484]	; (80149d8 <_vfiprintf_r+0x248>)
 80147f2:	429d      	cmp	r5, r3
 80147f4:	bf08      	it	eq
 80147f6:	68f5      	ldreq	r5, [r6, #12]
 80147f8:	e7da      	b.n	80147b0 <_vfiprintf_r+0x20>
 80147fa:	89ab      	ldrh	r3, [r5, #12]
 80147fc:	0598      	lsls	r0, r3, #22
 80147fe:	d4ed      	bmi.n	80147dc <_vfiprintf_r+0x4c>
 8014800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014802:	f7f0 fcc2 	bl	800518a <__retarget_lock_release_recursive>
 8014806:	e7e9      	b.n	80147dc <_vfiprintf_r+0x4c>
 8014808:	2300      	movs	r3, #0
 801480a:	9309      	str	r3, [sp, #36]	; 0x24
 801480c:	2320      	movs	r3, #32
 801480e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014812:	2330      	movs	r3, #48	; 0x30
 8014814:	f04f 0901 	mov.w	r9, #1
 8014818:	f8cd 800c 	str.w	r8, [sp, #12]
 801481c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80149dc <_vfiprintf_r+0x24c>
 8014820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014824:	4623      	mov	r3, r4
 8014826:	469a      	mov	sl, r3
 8014828:	f813 2b01 	ldrb.w	r2, [r3], #1
 801482c:	b10a      	cbz	r2, 8014832 <_vfiprintf_r+0xa2>
 801482e:	2a25      	cmp	r2, #37	; 0x25
 8014830:	d1f9      	bne.n	8014826 <_vfiprintf_r+0x96>
 8014832:	ebba 0b04 	subs.w	fp, sl, r4
 8014836:	d00b      	beq.n	8014850 <_vfiprintf_r+0xc0>
 8014838:	465b      	mov	r3, fp
 801483a:	4622      	mov	r2, r4
 801483c:	4629      	mov	r1, r5
 801483e:	4630      	mov	r0, r6
 8014840:	f7ff ff94 	bl	801476c <__sfputs_r>
 8014844:	3001      	adds	r0, #1
 8014846:	f000 80aa 	beq.w	801499e <_vfiprintf_r+0x20e>
 801484a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801484c:	445a      	add	r2, fp
 801484e:	9209      	str	r2, [sp, #36]	; 0x24
 8014850:	f89a 3000 	ldrb.w	r3, [sl]
 8014854:	2b00      	cmp	r3, #0
 8014856:	f000 80a2 	beq.w	801499e <_vfiprintf_r+0x20e>
 801485a:	2300      	movs	r3, #0
 801485c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014864:	f10a 0a01 	add.w	sl, sl, #1
 8014868:	9304      	str	r3, [sp, #16]
 801486a:	9307      	str	r3, [sp, #28]
 801486c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014870:	931a      	str	r3, [sp, #104]	; 0x68
 8014872:	4654      	mov	r4, sl
 8014874:	2205      	movs	r2, #5
 8014876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801487a:	4858      	ldr	r0, [pc, #352]	; (80149dc <_vfiprintf_r+0x24c>)
 801487c:	f7fe fae0 	bl	8012e40 <memchr>
 8014880:	9a04      	ldr	r2, [sp, #16]
 8014882:	b9d8      	cbnz	r0, 80148bc <_vfiprintf_r+0x12c>
 8014884:	06d1      	lsls	r1, r2, #27
 8014886:	bf44      	itt	mi
 8014888:	2320      	movmi	r3, #32
 801488a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801488e:	0713      	lsls	r3, r2, #28
 8014890:	bf44      	itt	mi
 8014892:	232b      	movmi	r3, #43	; 0x2b
 8014894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014898:	f89a 3000 	ldrb.w	r3, [sl]
 801489c:	2b2a      	cmp	r3, #42	; 0x2a
 801489e:	d015      	beq.n	80148cc <_vfiprintf_r+0x13c>
 80148a0:	4654      	mov	r4, sl
 80148a2:	2000      	movs	r0, #0
 80148a4:	f04f 0c0a 	mov.w	ip, #10
 80148a8:	9a07      	ldr	r2, [sp, #28]
 80148aa:	4621      	mov	r1, r4
 80148ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148b0:	3b30      	subs	r3, #48	; 0x30
 80148b2:	2b09      	cmp	r3, #9
 80148b4:	d94e      	bls.n	8014954 <_vfiprintf_r+0x1c4>
 80148b6:	b1b0      	cbz	r0, 80148e6 <_vfiprintf_r+0x156>
 80148b8:	9207      	str	r2, [sp, #28]
 80148ba:	e014      	b.n	80148e6 <_vfiprintf_r+0x156>
 80148bc:	eba0 0308 	sub.w	r3, r0, r8
 80148c0:	fa09 f303 	lsl.w	r3, r9, r3
 80148c4:	4313      	orrs	r3, r2
 80148c6:	46a2      	mov	sl, r4
 80148c8:	9304      	str	r3, [sp, #16]
 80148ca:	e7d2      	b.n	8014872 <_vfiprintf_r+0xe2>
 80148cc:	9b03      	ldr	r3, [sp, #12]
 80148ce:	1d19      	adds	r1, r3, #4
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	9103      	str	r1, [sp, #12]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	bfbb      	ittet	lt
 80148d8:	425b      	neglt	r3, r3
 80148da:	f042 0202 	orrlt.w	r2, r2, #2
 80148de:	9307      	strge	r3, [sp, #28]
 80148e0:	9307      	strlt	r3, [sp, #28]
 80148e2:	bfb8      	it	lt
 80148e4:	9204      	strlt	r2, [sp, #16]
 80148e6:	7823      	ldrb	r3, [r4, #0]
 80148e8:	2b2e      	cmp	r3, #46	; 0x2e
 80148ea:	d10c      	bne.n	8014906 <_vfiprintf_r+0x176>
 80148ec:	7863      	ldrb	r3, [r4, #1]
 80148ee:	2b2a      	cmp	r3, #42	; 0x2a
 80148f0:	d135      	bne.n	801495e <_vfiprintf_r+0x1ce>
 80148f2:	9b03      	ldr	r3, [sp, #12]
 80148f4:	3402      	adds	r4, #2
 80148f6:	1d1a      	adds	r2, r3, #4
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	9203      	str	r2, [sp, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	bfb8      	it	lt
 8014900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014904:	9305      	str	r3, [sp, #20]
 8014906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80149ec <_vfiprintf_r+0x25c>
 801490a:	2203      	movs	r2, #3
 801490c:	4650      	mov	r0, sl
 801490e:	7821      	ldrb	r1, [r4, #0]
 8014910:	f7fe fa96 	bl	8012e40 <memchr>
 8014914:	b140      	cbz	r0, 8014928 <_vfiprintf_r+0x198>
 8014916:	2340      	movs	r3, #64	; 0x40
 8014918:	eba0 000a 	sub.w	r0, r0, sl
 801491c:	fa03 f000 	lsl.w	r0, r3, r0
 8014920:	9b04      	ldr	r3, [sp, #16]
 8014922:	3401      	adds	r4, #1
 8014924:	4303      	orrs	r3, r0
 8014926:	9304      	str	r3, [sp, #16]
 8014928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801492c:	2206      	movs	r2, #6
 801492e:	482c      	ldr	r0, [pc, #176]	; (80149e0 <_vfiprintf_r+0x250>)
 8014930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014934:	f7fe fa84 	bl	8012e40 <memchr>
 8014938:	2800      	cmp	r0, #0
 801493a:	d03f      	beq.n	80149bc <_vfiprintf_r+0x22c>
 801493c:	4b29      	ldr	r3, [pc, #164]	; (80149e4 <_vfiprintf_r+0x254>)
 801493e:	bb1b      	cbnz	r3, 8014988 <_vfiprintf_r+0x1f8>
 8014940:	9b03      	ldr	r3, [sp, #12]
 8014942:	3307      	adds	r3, #7
 8014944:	f023 0307 	bic.w	r3, r3, #7
 8014948:	3308      	adds	r3, #8
 801494a:	9303      	str	r3, [sp, #12]
 801494c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801494e:	443b      	add	r3, r7
 8014950:	9309      	str	r3, [sp, #36]	; 0x24
 8014952:	e767      	b.n	8014824 <_vfiprintf_r+0x94>
 8014954:	460c      	mov	r4, r1
 8014956:	2001      	movs	r0, #1
 8014958:	fb0c 3202 	mla	r2, ip, r2, r3
 801495c:	e7a5      	b.n	80148aa <_vfiprintf_r+0x11a>
 801495e:	2300      	movs	r3, #0
 8014960:	f04f 0c0a 	mov.w	ip, #10
 8014964:	4619      	mov	r1, r3
 8014966:	3401      	adds	r4, #1
 8014968:	9305      	str	r3, [sp, #20]
 801496a:	4620      	mov	r0, r4
 801496c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014970:	3a30      	subs	r2, #48	; 0x30
 8014972:	2a09      	cmp	r2, #9
 8014974:	d903      	bls.n	801497e <_vfiprintf_r+0x1ee>
 8014976:	2b00      	cmp	r3, #0
 8014978:	d0c5      	beq.n	8014906 <_vfiprintf_r+0x176>
 801497a:	9105      	str	r1, [sp, #20]
 801497c:	e7c3      	b.n	8014906 <_vfiprintf_r+0x176>
 801497e:	4604      	mov	r4, r0
 8014980:	2301      	movs	r3, #1
 8014982:	fb0c 2101 	mla	r1, ip, r1, r2
 8014986:	e7f0      	b.n	801496a <_vfiprintf_r+0x1da>
 8014988:	ab03      	add	r3, sp, #12
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	462a      	mov	r2, r5
 801498e:	4630      	mov	r0, r6
 8014990:	4b15      	ldr	r3, [pc, #84]	; (80149e8 <_vfiprintf_r+0x258>)
 8014992:	a904      	add	r1, sp, #16
 8014994:	f7fb faa8 	bl	800fee8 <_printf_float>
 8014998:	4607      	mov	r7, r0
 801499a:	1c78      	adds	r0, r7, #1
 801499c:	d1d6      	bne.n	801494c <_vfiprintf_r+0x1bc>
 801499e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149a0:	07d9      	lsls	r1, r3, #31
 80149a2:	d405      	bmi.n	80149b0 <_vfiprintf_r+0x220>
 80149a4:	89ab      	ldrh	r3, [r5, #12]
 80149a6:	059a      	lsls	r2, r3, #22
 80149a8:	d402      	bmi.n	80149b0 <_vfiprintf_r+0x220>
 80149aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149ac:	f7f0 fbed 	bl	800518a <__retarget_lock_release_recursive>
 80149b0:	89ab      	ldrh	r3, [r5, #12]
 80149b2:	065b      	lsls	r3, r3, #25
 80149b4:	f53f af12 	bmi.w	80147dc <_vfiprintf_r+0x4c>
 80149b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ba:	e711      	b.n	80147e0 <_vfiprintf_r+0x50>
 80149bc:	ab03      	add	r3, sp, #12
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	462a      	mov	r2, r5
 80149c2:	4630      	mov	r0, r6
 80149c4:	4b08      	ldr	r3, [pc, #32]	; (80149e8 <_vfiprintf_r+0x258>)
 80149c6:	a904      	add	r1, sp, #16
 80149c8:	f7fb fd2a 	bl	8010420 <_printf_i>
 80149cc:	e7e4      	b.n	8014998 <_vfiprintf_r+0x208>
 80149ce:	bf00      	nop
 80149d0:	080154a4 	.word	0x080154a4
 80149d4:	080154c4 	.word	0x080154c4
 80149d8:	08015484 	.word	0x08015484
 80149dc:	0801541c 	.word	0x0801541c
 80149e0:	08015426 	.word	0x08015426
 80149e4:	0800fee9 	.word	0x0800fee9
 80149e8:	0801476d 	.word	0x0801476d
 80149ec:	08015422 	.word	0x08015422

080149f0 <__swbuf_r>:
 80149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f2:	460e      	mov	r6, r1
 80149f4:	4614      	mov	r4, r2
 80149f6:	4605      	mov	r5, r0
 80149f8:	b118      	cbz	r0, 8014a02 <__swbuf_r+0x12>
 80149fa:	6983      	ldr	r3, [r0, #24]
 80149fc:	b90b      	cbnz	r3, 8014a02 <__swbuf_r+0x12>
 80149fe:	f7ff fdcb 	bl	8014598 <__sinit>
 8014a02:	4b21      	ldr	r3, [pc, #132]	; (8014a88 <__swbuf_r+0x98>)
 8014a04:	429c      	cmp	r4, r3
 8014a06:	d12b      	bne.n	8014a60 <__swbuf_r+0x70>
 8014a08:	686c      	ldr	r4, [r5, #4]
 8014a0a:	69a3      	ldr	r3, [r4, #24]
 8014a0c:	60a3      	str	r3, [r4, #8]
 8014a0e:	89a3      	ldrh	r3, [r4, #12]
 8014a10:	071a      	lsls	r2, r3, #28
 8014a12:	d52f      	bpl.n	8014a74 <__swbuf_r+0x84>
 8014a14:	6923      	ldr	r3, [r4, #16]
 8014a16:	b36b      	cbz	r3, 8014a74 <__swbuf_r+0x84>
 8014a18:	6923      	ldr	r3, [r4, #16]
 8014a1a:	6820      	ldr	r0, [r4, #0]
 8014a1c:	b2f6      	uxtb	r6, r6
 8014a1e:	1ac0      	subs	r0, r0, r3
 8014a20:	6963      	ldr	r3, [r4, #20]
 8014a22:	4637      	mov	r7, r6
 8014a24:	4283      	cmp	r3, r0
 8014a26:	dc04      	bgt.n	8014a32 <__swbuf_r+0x42>
 8014a28:	4621      	mov	r1, r4
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	f7ff fd20 	bl	8014470 <_fflush_r>
 8014a30:	bb30      	cbnz	r0, 8014a80 <__swbuf_r+0x90>
 8014a32:	68a3      	ldr	r3, [r4, #8]
 8014a34:	3001      	adds	r0, #1
 8014a36:	3b01      	subs	r3, #1
 8014a38:	60a3      	str	r3, [r4, #8]
 8014a3a:	6823      	ldr	r3, [r4, #0]
 8014a3c:	1c5a      	adds	r2, r3, #1
 8014a3e:	6022      	str	r2, [r4, #0]
 8014a40:	701e      	strb	r6, [r3, #0]
 8014a42:	6963      	ldr	r3, [r4, #20]
 8014a44:	4283      	cmp	r3, r0
 8014a46:	d004      	beq.n	8014a52 <__swbuf_r+0x62>
 8014a48:	89a3      	ldrh	r3, [r4, #12]
 8014a4a:	07db      	lsls	r3, r3, #31
 8014a4c:	d506      	bpl.n	8014a5c <__swbuf_r+0x6c>
 8014a4e:	2e0a      	cmp	r6, #10
 8014a50:	d104      	bne.n	8014a5c <__swbuf_r+0x6c>
 8014a52:	4621      	mov	r1, r4
 8014a54:	4628      	mov	r0, r5
 8014a56:	f7ff fd0b 	bl	8014470 <_fflush_r>
 8014a5a:	b988      	cbnz	r0, 8014a80 <__swbuf_r+0x90>
 8014a5c:	4638      	mov	r0, r7
 8014a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a60:	4b0a      	ldr	r3, [pc, #40]	; (8014a8c <__swbuf_r+0x9c>)
 8014a62:	429c      	cmp	r4, r3
 8014a64:	d101      	bne.n	8014a6a <__swbuf_r+0x7a>
 8014a66:	68ac      	ldr	r4, [r5, #8]
 8014a68:	e7cf      	b.n	8014a0a <__swbuf_r+0x1a>
 8014a6a:	4b09      	ldr	r3, [pc, #36]	; (8014a90 <__swbuf_r+0xa0>)
 8014a6c:	429c      	cmp	r4, r3
 8014a6e:	bf08      	it	eq
 8014a70:	68ec      	ldreq	r4, [r5, #12]
 8014a72:	e7ca      	b.n	8014a0a <__swbuf_r+0x1a>
 8014a74:	4621      	mov	r1, r4
 8014a76:	4628      	mov	r0, r5
 8014a78:	f000 f80c 	bl	8014a94 <__swsetup_r>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d0cb      	beq.n	8014a18 <__swbuf_r+0x28>
 8014a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014a84:	e7ea      	b.n	8014a5c <__swbuf_r+0x6c>
 8014a86:	bf00      	nop
 8014a88:	080154a4 	.word	0x080154a4
 8014a8c:	080154c4 	.word	0x080154c4
 8014a90:	08015484 	.word	0x08015484

08014a94 <__swsetup_r>:
 8014a94:	4b32      	ldr	r3, [pc, #200]	; (8014b60 <__swsetup_r+0xcc>)
 8014a96:	b570      	push	{r4, r5, r6, lr}
 8014a98:	681d      	ldr	r5, [r3, #0]
 8014a9a:	4606      	mov	r6, r0
 8014a9c:	460c      	mov	r4, r1
 8014a9e:	b125      	cbz	r5, 8014aaa <__swsetup_r+0x16>
 8014aa0:	69ab      	ldr	r3, [r5, #24]
 8014aa2:	b913      	cbnz	r3, 8014aaa <__swsetup_r+0x16>
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f7ff fd77 	bl	8014598 <__sinit>
 8014aaa:	4b2e      	ldr	r3, [pc, #184]	; (8014b64 <__swsetup_r+0xd0>)
 8014aac:	429c      	cmp	r4, r3
 8014aae:	d10f      	bne.n	8014ad0 <__swsetup_r+0x3c>
 8014ab0:	686c      	ldr	r4, [r5, #4]
 8014ab2:	89a3      	ldrh	r3, [r4, #12]
 8014ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ab8:	0719      	lsls	r1, r3, #28
 8014aba:	d42c      	bmi.n	8014b16 <__swsetup_r+0x82>
 8014abc:	06dd      	lsls	r5, r3, #27
 8014abe:	d411      	bmi.n	8014ae4 <__swsetup_r+0x50>
 8014ac0:	2309      	movs	r3, #9
 8014ac2:	6033      	str	r3, [r6, #0]
 8014ac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014acc:	81a3      	strh	r3, [r4, #12]
 8014ace:	e03e      	b.n	8014b4e <__swsetup_r+0xba>
 8014ad0:	4b25      	ldr	r3, [pc, #148]	; (8014b68 <__swsetup_r+0xd4>)
 8014ad2:	429c      	cmp	r4, r3
 8014ad4:	d101      	bne.n	8014ada <__swsetup_r+0x46>
 8014ad6:	68ac      	ldr	r4, [r5, #8]
 8014ad8:	e7eb      	b.n	8014ab2 <__swsetup_r+0x1e>
 8014ada:	4b24      	ldr	r3, [pc, #144]	; (8014b6c <__swsetup_r+0xd8>)
 8014adc:	429c      	cmp	r4, r3
 8014ade:	bf08      	it	eq
 8014ae0:	68ec      	ldreq	r4, [r5, #12]
 8014ae2:	e7e6      	b.n	8014ab2 <__swsetup_r+0x1e>
 8014ae4:	0758      	lsls	r0, r3, #29
 8014ae6:	d512      	bpl.n	8014b0e <__swsetup_r+0x7a>
 8014ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014aea:	b141      	cbz	r1, 8014afe <__swsetup_r+0x6a>
 8014aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014af0:	4299      	cmp	r1, r3
 8014af2:	d002      	beq.n	8014afa <__swsetup_r+0x66>
 8014af4:	4630      	mov	r0, r6
 8014af6:	f7fb f8b3 	bl	800fc60 <_free_r>
 8014afa:	2300      	movs	r3, #0
 8014afc:	6363      	str	r3, [r4, #52]	; 0x34
 8014afe:	89a3      	ldrh	r3, [r4, #12]
 8014b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b04:	81a3      	strh	r3, [r4, #12]
 8014b06:	2300      	movs	r3, #0
 8014b08:	6063      	str	r3, [r4, #4]
 8014b0a:	6923      	ldr	r3, [r4, #16]
 8014b0c:	6023      	str	r3, [r4, #0]
 8014b0e:	89a3      	ldrh	r3, [r4, #12]
 8014b10:	f043 0308 	orr.w	r3, r3, #8
 8014b14:	81a3      	strh	r3, [r4, #12]
 8014b16:	6923      	ldr	r3, [r4, #16]
 8014b18:	b94b      	cbnz	r3, 8014b2e <__swsetup_r+0x9a>
 8014b1a:	89a3      	ldrh	r3, [r4, #12]
 8014b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b24:	d003      	beq.n	8014b2e <__swsetup_r+0x9a>
 8014b26:	4621      	mov	r1, r4
 8014b28:	4630      	mov	r0, r6
 8014b2a:	f000 f845 	bl	8014bb8 <__smakebuf_r>
 8014b2e:	89a0      	ldrh	r0, [r4, #12]
 8014b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b34:	f010 0301 	ands.w	r3, r0, #1
 8014b38:	d00a      	beq.n	8014b50 <__swsetup_r+0xbc>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	60a3      	str	r3, [r4, #8]
 8014b3e:	6963      	ldr	r3, [r4, #20]
 8014b40:	425b      	negs	r3, r3
 8014b42:	61a3      	str	r3, [r4, #24]
 8014b44:	6923      	ldr	r3, [r4, #16]
 8014b46:	b943      	cbnz	r3, 8014b5a <__swsetup_r+0xc6>
 8014b48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b4c:	d1ba      	bne.n	8014ac4 <__swsetup_r+0x30>
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	0781      	lsls	r1, r0, #30
 8014b52:	bf58      	it	pl
 8014b54:	6963      	ldrpl	r3, [r4, #20]
 8014b56:	60a3      	str	r3, [r4, #8]
 8014b58:	e7f4      	b.n	8014b44 <__swsetup_r+0xb0>
 8014b5a:	2000      	movs	r0, #0
 8014b5c:	e7f7      	b.n	8014b4e <__swsetup_r+0xba>
 8014b5e:	bf00      	nop
 8014b60:	20000224 	.word	0x20000224
 8014b64:	080154a4 	.word	0x080154a4
 8014b68:	080154c4 	.word	0x080154c4
 8014b6c:	08015484 	.word	0x08015484

08014b70 <__swhatbuf_r>:
 8014b70:	b570      	push	{r4, r5, r6, lr}
 8014b72:	460e      	mov	r6, r1
 8014b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b78:	4614      	mov	r4, r2
 8014b7a:	2900      	cmp	r1, #0
 8014b7c:	461d      	mov	r5, r3
 8014b7e:	b096      	sub	sp, #88	; 0x58
 8014b80:	da07      	bge.n	8014b92 <__swhatbuf_r+0x22>
 8014b82:	2300      	movs	r3, #0
 8014b84:	602b      	str	r3, [r5, #0]
 8014b86:	89b3      	ldrh	r3, [r6, #12]
 8014b88:	061a      	lsls	r2, r3, #24
 8014b8a:	d410      	bmi.n	8014bae <__swhatbuf_r+0x3e>
 8014b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b90:	e00e      	b.n	8014bb0 <__swhatbuf_r+0x40>
 8014b92:	466a      	mov	r2, sp
 8014b94:	f000 f858 	bl	8014c48 <_fstat_r>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	dbf2      	blt.n	8014b82 <__swhatbuf_r+0x12>
 8014b9c:	9a01      	ldr	r2, [sp, #4]
 8014b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ba6:	425a      	negs	r2, r3
 8014ba8:	415a      	adcs	r2, r3
 8014baa:	602a      	str	r2, [r5, #0]
 8014bac:	e7ee      	b.n	8014b8c <__swhatbuf_r+0x1c>
 8014bae:	2340      	movs	r3, #64	; 0x40
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	6023      	str	r3, [r4, #0]
 8014bb4:	b016      	add	sp, #88	; 0x58
 8014bb6:	bd70      	pop	{r4, r5, r6, pc}

08014bb8 <__smakebuf_r>:
 8014bb8:	898b      	ldrh	r3, [r1, #12]
 8014bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bbc:	079d      	lsls	r5, r3, #30
 8014bbe:	4606      	mov	r6, r0
 8014bc0:	460c      	mov	r4, r1
 8014bc2:	d507      	bpl.n	8014bd4 <__smakebuf_r+0x1c>
 8014bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	6123      	str	r3, [r4, #16]
 8014bcc:	2301      	movs	r3, #1
 8014bce:	6163      	str	r3, [r4, #20]
 8014bd0:	b002      	add	sp, #8
 8014bd2:	bd70      	pop	{r4, r5, r6, pc}
 8014bd4:	466a      	mov	r2, sp
 8014bd6:	ab01      	add	r3, sp, #4
 8014bd8:	f7ff ffca 	bl	8014b70 <__swhatbuf_r>
 8014bdc:	9900      	ldr	r1, [sp, #0]
 8014bde:	4605      	mov	r5, r0
 8014be0:	4630      	mov	r0, r6
 8014be2:	f7fb f889 	bl	800fcf8 <_malloc_r>
 8014be6:	b948      	cbnz	r0, 8014bfc <__smakebuf_r+0x44>
 8014be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bec:	059a      	lsls	r2, r3, #22
 8014bee:	d4ef      	bmi.n	8014bd0 <__smakebuf_r+0x18>
 8014bf0:	f023 0303 	bic.w	r3, r3, #3
 8014bf4:	f043 0302 	orr.w	r3, r3, #2
 8014bf8:	81a3      	strh	r3, [r4, #12]
 8014bfa:	e7e3      	b.n	8014bc4 <__smakebuf_r+0xc>
 8014bfc:	4b0d      	ldr	r3, [pc, #52]	; (8014c34 <__smakebuf_r+0x7c>)
 8014bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c00:	89a3      	ldrh	r3, [r4, #12]
 8014c02:	6020      	str	r0, [r4, #0]
 8014c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c08:	81a3      	strh	r3, [r4, #12]
 8014c0a:	9b00      	ldr	r3, [sp, #0]
 8014c0c:	6120      	str	r0, [r4, #16]
 8014c0e:	6163      	str	r3, [r4, #20]
 8014c10:	9b01      	ldr	r3, [sp, #4]
 8014c12:	b15b      	cbz	r3, 8014c2c <__smakebuf_r+0x74>
 8014c14:	4630      	mov	r0, r6
 8014c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c1a:	f000 f827 	bl	8014c6c <_isatty_r>
 8014c1e:	b128      	cbz	r0, 8014c2c <__smakebuf_r+0x74>
 8014c20:	89a3      	ldrh	r3, [r4, #12]
 8014c22:	f023 0303 	bic.w	r3, r3, #3
 8014c26:	f043 0301 	orr.w	r3, r3, #1
 8014c2a:	81a3      	strh	r3, [r4, #12]
 8014c2c:	89a0      	ldrh	r0, [r4, #12]
 8014c2e:	4305      	orrs	r5, r0
 8014c30:	81a5      	strh	r5, [r4, #12]
 8014c32:	e7cd      	b.n	8014bd0 <__smakebuf_r+0x18>
 8014c34:	08014531 	.word	0x08014531

08014c38 <_malloc_usable_size_r>:
 8014c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c3c:	1f18      	subs	r0, r3, #4
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	bfbc      	itt	lt
 8014c42:	580b      	ldrlt	r3, [r1, r0]
 8014c44:	18c0      	addlt	r0, r0, r3
 8014c46:	4770      	bx	lr

08014c48 <_fstat_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	4d06      	ldr	r5, [pc, #24]	; (8014c68 <_fstat_r+0x20>)
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7f0 f962 	bl	8004f1e <_fstat>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_fstat_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_fstat_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	20001d4c 	.word	0x20001d4c

08014c6c <_isatty_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	2300      	movs	r3, #0
 8014c70:	4d05      	ldr	r5, [pc, #20]	; (8014c88 <_isatty_r+0x1c>)
 8014c72:	4604      	mov	r4, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	602b      	str	r3, [r5, #0]
 8014c78:	f7f0 f960 	bl	8004f3c <_isatty>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_isatty_r+0x1a>
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_isatty_r+0x1a>
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	20001d4c 	.word	0x20001d4c

08014c8c <_init>:
 8014c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8e:	bf00      	nop
 8014c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c92:	bc08      	pop	{r3}
 8014c94:	469e      	mov	lr, r3
 8014c96:	4770      	bx	lr

08014c98 <_fini>:
 8014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9a:	bf00      	nop
 8014c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c9e:	bc08      	pop	{r3}
 8014ca0:	469e      	mov	lr, r3
 8014ca2:	4770      	bx	lr
