
CustomBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017588  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  080176c8  080176c8  000276c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801803c  0801803c  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  0801803c  0801803c  0002803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018044  08018044  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018044  08018044  00028044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08018050  08018050  00028050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  0801805c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  20000400  0801845c  00030400  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  0801845c  00031df0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004363d  00000000  00000000  00030429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f7b  00000000  00000000  00073a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  0007a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  0007ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207d3  00000000  00000000  0007e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027bc3  00000000  00000000  0009f073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9d76  00000000  00000000  000c6c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001709ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b724  00000000  00000000  00170a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000400 	.word	0x20000400
 800015c:	00000000 	.word	0x00000000
 8000160:	080176b0 	.word	0x080176b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000404 	.word	0x20000404
 800017c:	080176b0 	.word	0x080176b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010b4:	f000 b9a6 	b.w	8001404 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f83e 	bl	8001140 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_d2lz>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	460c      	mov	r4, r1
 80010d4:	4605      	mov	r5, r0
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff fc85 	bl	80009ec <__aeabi_dcmplt>
 80010e2:	b928      	cbnz	r0, 80010f0 <__aeabi_d2lz+0x20>
 80010e4:	4628      	mov	r0, r5
 80010e6:	4621      	mov	r1, r4
 80010e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ec:	f000 b80a 	b.w	8001104 <__aeabi_d2ulz>
 80010f0:	4628      	mov	r0, r5
 80010f2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010f6:	f000 f805 	bl	8001104 <__aeabi_d2ulz>
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	bd38      	pop	{r3, r4, r5, pc}
 8001102:	bf00      	nop

08001104 <__aeabi_d2ulz>:
 8001104:	b5d0      	push	{r4, r6, r7, lr}
 8001106:	2200      	movs	r2, #0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__aeabi_d2ulz+0x34>)
 800110a:	4606      	mov	r6, r0
 800110c:	460f      	mov	r7, r1
 800110e:	f7ff f9fb 	bl	8000508 <__aeabi_dmul>
 8001112:	f7ff fcd1 	bl	8000ab8 <__aeabi_d2uiz>
 8001116:	4604      	mov	r4, r0
 8001118:	f7ff f97c 	bl	8000414 <__aeabi_ui2d>
 800111c:	2200      	movs	r2, #0
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <__aeabi_d2ulz+0x38>)
 8001120:	f7ff f9f2 	bl	8000508 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4630      	mov	r0, r6
 800112a:	4639      	mov	r1, r7
 800112c:	f7ff f834 	bl	8000198 <__aeabi_dsub>
 8001130:	f7ff fcc2 	bl	8000ab8 <__aeabi_d2uiz>
 8001134:	4621      	mov	r1, r4
 8001136:	bdd0      	pop	{r4, r6, r7, pc}
 8001138:	3df00000 	.word	0x3df00000
 800113c:	41f00000 	.word	0x41f00000

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	9e08      	ldr	r6, [sp, #32]
 8001146:	460d      	mov	r5, r1
 8001148:	4604      	mov	r4, r0
 800114a:	468e      	mov	lr, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8083 	bne.w	8001258 <__udivmoddi4+0x118>
 8001152:	428a      	cmp	r2, r1
 8001154:	4617      	mov	r7, r2
 8001156:	d947      	bls.n	80011e8 <__udivmoddi4+0xa8>
 8001158:	fab2 f382 	clz	r3, r2
 800115c:	b14b      	cbz	r3, 8001172 <__udivmoddi4+0x32>
 800115e:	f1c3 0120 	rsb	r1, r3, #32
 8001162:	fa05 fe03 	lsl.w	lr, r5, r3
 8001166:	fa20 f101 	lsr.w	r1, r0, r1
 800116a:	409f      	lsls	r7, r3
 800116c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001176:	fbbe fcf8 	udiv	ip, lr, r8
 800117a:	fa1f f987 	uxth.w	r9, r7
 800117e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001182:	fb0c f009 	mul.w	r0, ip, r9
 8001186:	0c21      	lsrs	r1, r4, #16
 8001188:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x66>
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001196:	f080 8118 	bcs.w	80013ca <__udivmoddi4+0x28a>
 800119a:	4290      	cmp	r0, r2
 800119c:	f240 8115 	bls.w	80013ca <__udivmoddi4+0x28a>
 80011a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a4:	443a      	add	r2, r7
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011ac:	fb08 2210 	mls	r2, r8, r0, r2
 80011b0:	fb00 f109 	mul.w	r1, r0, r9
 80011b4:	b2a4      	uxth	r4, r4
 80011b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x92>
 80011be:	193c      	adds	r4, r7, r4
 80011c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c4:	f080 8103 	bcs.w	80013ce <__udivmoddi4+0x28e>
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	f240 8100 	bls.w	80013ce <__udivmoddi4+0x28e>
 80011ce:	3802      	subs	r0, #2
 80011d0:	443c      	add	r4, r7
 80011d2:	1a64      	subs	r4, r4, r1
 80011d4:	2100      	movs	r1, #0
 80011d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011da:	b11e      	cbz	r6, 80011e4 <__udivmoddi4+0xa4>
 80011dc:	2200      	movs	r2, #0
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	e9c6 4200 	strd	r4, r2, [r6]
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	b902      	cbnz	r2, 80011ec <__udivmoddi4+0xac>
 80011ea:	deff      	udf	#255	; 0xff
 80011ec:	fab2 f382 	clz	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <__udivmoddi4+0x154>
 80011f4:	1a8d      	subs	r5, r1, r2
 80011f6:	2101      	movs	r1, #1
 80011f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011fc:	fa1f f882 	uxth.w	r8, r2
 8001200:	fbb5 fcfe 	udiv	ip, r5, lr
 8001204:	fb0e 551c 	mls	r5, lr, ip, r5
 8001208:	fb08 f00c 	mul.w	r0, r8, ip
 800120c:	0c22      	lsrs	r2, r4, #16
 800120e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001212:	42a8      	cmp	r0, r5
 8001214:	d907      	bls.n	8001226 <__udivmoddi4+0xe6>
 8001216:	197d      	adds	r5, r7, r5
 8001218:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0xe4>
 800121e:	42a8      	cmp	r0, r5
 8001220:	f200 80e9 	bhi.w	80013f6 <__udivmoddi4+0x2b6>
 8001224:	4694      	mov	ip, r2
 8001226:	1a2d      	subs	r5, r5, r0
 8001228:	fbb5 f0fe 	udiv	r0, r5, lr
 800122c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001230:	fb08 f800 	mul.w	r8, r8, r0
 8001234:	b2a4      	uxth	r4, r4
 8001236:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800123a:	45a0      	cmp	r8, r4
 800123c:	d907      	bls.n	800124e <__udivmoddi4+0x10e>
 800123e:	193c      	adds	r4, r7, r4
 8001240:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001244:	d202      	bcs.n	800124c <__udivmoddi4+0x10c>
 8001246:	45a0      	cmp	r8, r4
 8001248:	f200 80d9 	bhi.w	80013fe <__udivmoddi4+0x2be>
 800124c:	4610      	mov	r0, r2
 800124e:	eba4 0408 	sub.w	r4, r4, r8
 8001252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001256:	e7c0      	b.n	80011da <__udivmoddi4+0x9a>
 8001258:	428b      	cmp	r3, r1
 800125a:	d908      	bls.n	800126e <__udivmoddi4+0x12e>
 800125c:	2e00      	cmp	r6, #0
 800125e:	f000 80b1 	beq.w	80013c4 <__udivmoddi4+0x284>
 8001262:	2100      	movs	r1, #0
 8001264:	e9c6 0500 	strd	r0, r5, [r6]
 8001268:	4608      	mov	r0, r1
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f183 	clz	r1, r3
 8001272:	2900      	cmp	r1, #0
 8001274:	d14b      	bne.n	800130e <__udivmoddi4+0x1ce>
 8001276:	42ab      	cmp	r3, r5
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0x140>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80b9 	bhi.w	80013f2 <__udivmoddi4+0x2b2>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb65 0303 	sbc.w	r3, r5, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469e      	mov	lr, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0aa      	beq.n	80011e4 <__udivmoddi4+0xa4>
 800128e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001292:	e7a7      	b.n	80011e4 <__udivmoddi4+0xa4>
 8001294:	409f      	lsls	r7, r3
 8001296:	f1c3 0220 	rsb	r2, r3, #32
 800129a:	40d1      	lsrs	r1, r2
 800129c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012a4:	fa1f f887 	uxth.w	r8, r7
 80012a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012ac:	fa24 f202 	lsr.w	r2, r4, r2
 80012b0:	409d      	lsls	r5, r3
 80012b2:	fb00 fc08 	mul.w	ip, r0, r8
 80012b6:	432a      	orrs	r2, r5
 80012b8:	0c15      	lsrs	r5, r2, #16
 80012ba:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012be:	45ac      	cmp	ip, r5
 80012c0:	fa04 f403 	lsl.w	r4, r4, r3
 80012c4:	d909      	bls.n	80012da <__udivmoddi4+0x19a>
 80012c6:	197d      	adds	r5, r7, r5
 80012c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80012cc:	f080 808f 	bcs.w	80013ee <__udivmoddi4+0x2ae>
 80012d0:	45ac      	cmp	ip, r5
 80012d2:	f240 808c 	bls.w	80013ee <__udivmoddi4+0x2ae>
 80012d6:	3802      	subs	r0, #2
 80012d8:	443d      	add	r5, r7
 80012da:	eba5 050c 	sub.w	r5, r5, ip
 80012de:	fbb5 f1fe 	udiv	r1, r5, lr
 80012e2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012e6:	fb01 f908 	mul.w	r9, r1, r8
 80012ea:	b295      	uxth	r5, r2
 80012ec:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d907      	bls.n	8001304 <__udivmoddi4+0x1c4>
 80012f4:	197d      	adds	r5, r7, r5
 80012f6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80012fa:	d274      	bcs.n	80013e6 <__udivmoddi4+0x2a6>
 80012fc:	45a9      	cmp	r9, r5
 80012fe:	d972      	bls.n	80013e6 <__udivmoddi4+0x2a6>
 8001300:	3902      	subs	r1, #2
 8001302:	443d      	add	r5, r7
 8001304:	eba5 0509 	sub.w	r5, r5, r9
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	e778      	b.n	8001200 <__udivmoddi4+0xc0>
 800130e:	f1c1 0720 	rsb	r7, r1, #32
 8001312:	408b      	lsls	r3, r1
 8001314:	fa22 fc07 	lsr.w	ip, r2, r7
 8001318:	ea4c 0c03 	orr.w	ip, ip, r3
 800131c:	fa25 f407 	lsr.w	r4, r5, r7
 8001320:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001324:	fbb4 f9fe 	udiv	r9, r4, lr
 8001328:	fa1f f88c 	uxth.w	r8, ip
 800132c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001330:	fa20 f307 	lsr.w	r3, r0, r7
 8001334:	fb09 fa08 	mul.w	sl, r9, r8
 8001338:	408d      	lsls	r5, r1
 800133a:	431d      	orrs	r5, r3
 800133c:	0c2b      	lsrs	r3, r5, #16
 800133e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001342:	45a2      	cmp	sl, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	fa00 f301 	lsl.w	r3, r0, r1
 800134c:	d909      	bls.n	8001362 <__udivmoddi4+0x222>
 800134e:	eb1c 0404 	adds.w	r4, ip, r4
 8001352:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001356:	d248      	bcs.n	80013ea <__udivmoddi4+0x2aa>
 8001358:	45a2      	cmp	sl, r4
 800135a:	d946      	bls.n	80013ea <__udivmoddi4+0x2aa>
 800135c:	f1a9 0902 	sub.w	r9, r9, #2
 8001360:	4464      	add	r4, ip
 8001362:	eba4 040a 	sub.w	r4, r4, sl
 8001366:	fbb4 f0fe 	udiv	r0, r4, lr
 800136a:	fb0e 4410 	mls	r4, lr, r0, r4
 800136e:	fb00 fa08 	mul.w	sl, r0, r8
 8001372:	b2ad      	uxth	r5, r5
 8001374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001378:	45a2      	cmp	sl, r4
 800137a:	d908      	bls.n	800138e <__udivmoddi4+0x24e>
 800137c:	eb1c 0404 	adds.w	r4, ip, r4
 8001380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001384:	d22d      	bcs.n	80013e2 <__udivmoddi4+0x2a2>
 8001386:	45a2      	cmp	sl, r4
 8001388:	d92b      	bls.n	80013e2 <__udivmoddi4+0x2a2>
 800138a:	3802      	subs	r0, #2
 800138c:	4464      	add	r4, ip
 800138e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001392:	fba0 8902 	umull	r8, r9, r0, r2
 8001396:	eba4 040a 	sub.w	r4, r4, sl
 800139a:	454c      	cmp	r4, r9
 800139c:	46c6      	mov	lr, r8
 800139e:	464d      	mov	r5, r9
 80013a0:	d319      	bcc.n	80013d6 <__udivmoddi4+0x296>
 80013a2:	d016      	beq.n	80013d2 <__udivmoddi4+0x292>
 80013a4:	b15e      	cbz	r6, 80013be <__udivmoddi4+0x27e>
 80013a6:	ebb3 020e 	subs.w	r2, r3, lr
 80013aa:	eb64 0405 	sbc.w	r4, r4, r5
 80013ae:	fa04 f707 	lsl.w	r7, r4, r7
 80013b2:	fa22 f301 	lsr.w	r3, r2, r1
 80013b6:	431f      	orrs	r7, r3
 80013b8:	40cc      	lsrs	r4, r1
 80013ba:	e9c6 7400 	strd	r7, r4, [r6]
 80013be:	2100      	movs	r1, #0
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	4631      	mov	r1, r6
 80013c6:	4630      	mov	r0, r6
 80013c8:	e70c      	b.n	80011e4 <__udivmoddi4+0xa4>
 80013ca:	468c      	mov	ip, r1
 80013cc:	e6eb      	b.n	80011a6 <__udivmoddi4+0x66>
 80013ce:	4610      	mov	r0, r2
 80013d0:	e6ff      	b.n	80011d2 <__udivmoddi4+0x92>
 80013d2:	4543      	cmp	r3, r8
 80013d4:	d2e6      	bcs.n	80013a4 <__udivmoddi4+0x264>
 80013d6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013da:	eb69 050c 	sbc.w	r5, r9, ip
 80013de:	3801      	subs	r0, #1
 80013e0:	e7e0      	b.n	80013a4 <__udivmoddi4+0x264>
 80013e2:	4628      	mov	r0, r5
 80013e4:	e7d3      	b.n	800138e <__udivmoddi4+0x24e>
 80013e6:	4611      	mov	r1, r2
 80013e8:	e78c      	b.n	8001304 <__udivmoddi4+0x1c4>
 80013ea:	4681      	mov	r9, r0
 80013ec:	e7b9      	b.n	8001362 <__udivmoddi4+0x222>
 80013ee:	4608      	mov	r0, r1
 80013f0:	e773      	b.n	80012da <__udivmoddi4+0x19a>
 80013f2:	4608      	mov	r0, r1
 80013f4:	e749      	b.n	800128a <__udivmoddi4+0x14a>
 80013f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80013fa:	443d      	add	r5, r7
 80013fc:	e713      	b.n	8001226 <__udivmoddi4+0xe6>
 80013fe:	3802      	subs	r0, #2
 8001400:	443c      	add	r4, r7
 8001402:	e724      	b.n	800124e <__udivmoddi4+0x10e>

08001404 <__aeabi_idiv0>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f805 	bl	800143c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
    }
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa02 	bl	8001878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f9e0 	bl	800184e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffeb 	bl	800147e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f9e7 	bl	8001890 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>:


std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <_ZN4UARTC1EP20__UART_HandleTypeDef+0x38>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f010 fad9 	bl	8011a98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	this->handle = handle;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	605a      	str	r2, [r3, #4]
	lastTime = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
	uartBuff = NULL;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
}
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	080178fc 	.word	0x080178fc

08001508 <_ZN4UARTD1Ev>:

UART::~UART() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <_ZN4UARTD1Ev+0x80>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
	if (uartBuff != NULL) free(uartBuff);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <_ZN4UARTD1Ev+0x20>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4618      	mov	r0, r3
 8001524:	f011 f866 	bl	80125f4 <free>

	HAL_UART_AbortReceive_IT(handle);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	f008 f935 	bl	800979c <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f9bf 	bl	80018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <_ZN4UARTD1Ev+0x84>)
 8001544:	f000 f9c6 	bl	80018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8001548:	4603      	mov	r3, r0
 800154a:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <_ZN4UARTD1Ev+0x84>)
 800154e:	f000 f9d0 	bl	80018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8001552:	4603      	mov	r3, r0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f9d3 	bl	800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <_ZN4UARTD1Ev+0x6c>
		objectMap.erase(it);
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <_ZN4UARTD1Ev+0x84>)
 8001570:	f000 f9df 	bl	8001932 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
UART::~UART() {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f010 fa94 	bl	8011aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	080178fc 	.word	0x080178fc
 800158c:	2000041c 	.word	0x2000041c

08001590 <_ZN4UARTD0Ev>:
UART::~UART() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
}
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffb5 	bl	8001508 <_ZN4UARTD1Ev>
 800159e:	2130      	movs	r1, #48	; 0x30
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f00f ff67 	bl	8011474 <_ZdlPvj>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN4UART4initEP13USART_TypeDefii>:

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

	uartBuff = (uint8_t*)calloc(this->packetSize_Bytes+1, sizeof(uint8_t));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	3301      	adds	r3, #1
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f010 ffd7 	bl	8012580 <calloc>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	621a      	str	r2, [r3, #32]

	handle->Instance = port;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	601a      	str	r2, [r3, #0]
	handle->Init.BaudRate = baud;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	605a      	str	r2, [r3, #4]
	handle->Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
	handle->Init.StopBits = UART_STOPBITS_1;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
	handle->Init.Parity = UART_PARITY_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
	handle->Init.Mode = UART_MODE_TX_RX;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
	handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
	handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(handle) != HAL_OK)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f007 ffac 	bl	800957c <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <_ZN4UART4initEP13USART_TypeDefii+0x8a>
	{
		return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001638:	e01e      	b.n	8001678 <_ZN4UART4initEP13USART_TypeDefii+0xc8>
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4619      	mov	r1, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f97f 	bl	8001950 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	f107 021c 	add.w	r2, r7, #28
 800165a:	4909      	ldr	r1, [pc, #36]	; (8001680 <_ZN4UART4initEP13USART_TypeDefii+0xd0>)
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f990 	bl	8001982 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6858      	ldr	r0, [r3, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a19      	ldr	r1, [r3, #32]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	f008 f862 	bl	800973a <HAL_UART_Receive_IT>
	return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000041c 	.word	0x2000041c

08001684 <_ZN4UART8readLineEPhim>:

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return len;
}

int UART::readLine(uint8_t *buff, int length, uint32_t minDelay) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
	if(HAL_UART_AbortReceive_IT(handle) != HAL_OK) {
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f008 f880 	bl	800979c <HAL_UART_AbortReceive_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d000      	beq.n	80016ae <_ZN4UART8readLineEPhim+0x2a>
		__NOP();
 80016ac:	bf00      	nop
	}
	memset(buff, '\0', length);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f010 ffdb 	bl	8012670 <memset>

	std::size_t pos = msgBuff.find('\n');
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3308      	adds	r3, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	210a      	movs	r1, #10
 80016c2:	4618      	mov	r0, r3
 80016c4:	f010 fa56 	bl	8011b74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80016c8:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(pos != std::string::npos) {
 80016ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d0:	d04e      	beq.n	8001770 <_ZN4UART8readLineEPhim+0xec>
		const char* tmp = msgBuff.substr(0,pos+1).c_str();
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0108 	add.w	r1, r3, #8
 80016d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016da:	3301      	adds	r3, #1
 80016dc:	f107 0014 	add.w	r0, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	f010 faa3 	bl	8011c2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f010 fa40 	bl	8011b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80016f0:	64b8      	str	r0, [r7, #72]	; 0x48
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4618      	mov	r0, r3
 80016f8:	f010 f9d5 	bl	8011aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		const char* tmp1 = msgBuff.c_str();
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f010 fa35 	bl	8011b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001706:	6478      	str	r0, [r7, #68]	; 0x44
		strcpy((char*)buff, msgBuff.substr(0, pos+1).c_str());
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f103 0108 	add.w	r1, r3, #8
 800170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001710:	3301      	adds	r3, #1
 8001712:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001716:	2200      	movs	r2, #0
 8001718:	f010 fa88 	bl	8011c2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	4618      	mov	r0, r3
 8001722:	f010 fa25 	bl	8011b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f011 ffb5 	bl	801369a <strcpy>
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4618      	mov	r0, r3
 8001736:	f010 f9b6 	bl	8011aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		msgBuff.clear();
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3308      	adds	r3, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f010 f9b9 	bl	8011ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes) != HAL_OK) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6858      	ldr	r0, [r3, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	b29b      	uxth	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	f007 fff1 	bl	800973a <HAL_UART_Receive_IT>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	bf14      	ite	ne
 800175e:	2301      	movne	r3, #1
 8001760:	2300      	moveq	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d000      	beq.n	800176a <_ZN4UART8readLineEPhim+0xe6>
			__NOP();
 8001768:	bf00      	nop
		}
		return pos+1;
 800176a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176c:	3301      	adds	r3, #1
 800176e:	e013      	b.n	8001798 <_ZN4UART8readLineEPhim+0x114>
	}
	if(HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes) != HAL_OK) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6858      	ldr	r0, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a19      	ldr	r1, [r3, #32]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	f007 ffdb 	bl	800973a <HAL_UART_Receive_IT>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d000      	beq.n	8001796 <_ZN4UART8readLineEPhim+0x112>
		__NOP();
 8001794:	bf00      	nop
	}
	return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN4UART8sendDataEPhii>:
		__NOP();
	}
	return len;
}
*/
short UART::sendData(uint8_t *data, int numBytes, int timeout) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(handle, data, numBytes, timeout);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6858      	ldr	r0, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	f007 ff2c 	bl	8009616 <HAL_UART_Transmit>

	return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN4UART9memberIRQEv>:

void UART::memberIRQ() {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	dataReady = true;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	msgBuff += (char*)uartBuff;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f103 0208 	add.w	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f010 f9bf 	bl	8011b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	while(msgBuff.size() > 1024) msgBuff.erase(0, msgBuff.size()-1024);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3308      	adds	r3, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f010 f95f 	bl	8011ab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	bf8c      	ite	hi
 80017fc:	2301      	movhi	r3, #1
 80017fe:	2300      	movls	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <_ZN4UART9memberIRQEv+0x60>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f103 0408 	add.w	r4, r3, #8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3308      	adds	r3, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f010 f94e 	bl	8011ab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001816:	4603      	mov	r3, r0
 8001818:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800181c:	461a      	mov	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	4620      	mov	r0, r4
 8001822:	f010 f94d 	bl	8011ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
 8001826:	e7e0      	b.n	80017ea <_ZN4UART9memberIRQEv+0x22>

	lastTime = HAL_GetTick();
 8001828:	f002 feb8 	bl	800459c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a19      	ldr	r1, [r3, #32]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f007 ff7a 	bl	800973a <HAL_UART_Receive_IT>
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}

0800184e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8a7 	bl	80019aa <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8af 	bl	80019c2 <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fdd8 	bl	800141e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f8a8 	bl	80019d6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f8c5 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800189e:	4603      	mov	r3, r0
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8a1 	bl	80019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fddb 	bl	8001466 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f8ab 	bl	8001a3e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8dd 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8cc 	bl	8001ade <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f000 f8da 	bl	8001b16 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8001962:	4603      	mov	r3, r0
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8dd 	bl	8001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 8001970:	4603      	mov	r3, r0
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>:
	insert(_Pair&& __x)
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 800198e:	68bc      	ldr	r4, [r7, #8]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8d4 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4621      	mov	r1, r4
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f8d8 	bl	8001b52 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}

080019aa <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f917 	bl	8001be6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
      { }
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f000 f8fd 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fff0 	bl	80019ea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f000 f900 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001a10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f906 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001a1e:	e7e9      	b.n	80019f4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001a3e:	b5b0      	push	{r4, r5, r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffed 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8f9 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8fe 	bl	8001c5e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8001a62:	4603      	mov	r3, r0
 8001a64:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f828 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f922 	bl	8001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001a80:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d110      	bne.n	8001aa8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001a86:	687c      	ldr	r4, [r7, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f92b 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a94:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f000 f930 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f807 	bl	8001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e000      	b.n	8001ab4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    }
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdb0      	pop	{r4, r5, r7, pc}

08001abc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f929 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	60bb      	str	r3, [r7, #8]
	++__result;
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f926 	bl	8001d42 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 8001af6:	463a      	mov	r2, r7
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f930 	bl	8001d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f93b 	bl	8001d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      }
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08c      	sub	sp, #48	; 0x30
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffed 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f924 	bl	8001db6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8001b6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 8001b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b72:	f000 f9c1 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f930 	bl	8001de4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	    if (__res.second)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d013      	beq.n	8001bb2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8001b8a:	6979      	ldr	r1, [r7, #20]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f000 f9c4 	bl	8001f1e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8001b96:	4603      	mov	r3, r0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ba0:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f9f6 	bl	8001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
 8001bb0:	e015      	b.n	8001bde <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8001bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f000 f836 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return _Res(iterator(__res.first), false);
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8af 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bce:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f9df 	bl	8001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	3730      	adds	r7, #48	; 0x30
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f9cb 	bl	8001fce <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f9dc 	bl	8001ff8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01d      	beq.n	8001cae <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c72:	68fc      	ldr	r4, [r7, #12]
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f000 f93f 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f000 f83c 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f7ff ffb8 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001ca0:	60b8      	str	r0, [r7, #8]
 8001ca2:	e7e3      	b.n	8001c6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f7ff ffa8 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001caa:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001cac:	e7de      	b.n	8001c6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 f836 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001cba:	697b      	ldr	r3, [r7, #20]
    }
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	bf0c      	ite	eq
 8001cda:	2301      	moveq	r3, #1
 8001cdc:	2300      	movne	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f900 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	bf34      	ite	cc
 8001d16:	2301      	movcc	r3, #1
 8001d18:	2300      	movcs	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
      }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00f fbe5 	bl	801151e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
	return *this;
 8001d5a:	687b      	ldr	r3, [r7, #4]
      }
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 8001d8c:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f00f fc33 	bl	8011600 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 8001d9a:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ff41 	bl	8001c26 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]
    }
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f92b 	bl	800201c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8001dc6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff feb8 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f932 	bl	800203e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001dda:	68fb      	ldr	r3, [r7, #12]
	}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001df0:	68b8      	ldr	r0, [r7, #8]
 8001df2:	f7ff fe19 	bl	8001a28 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f7ff ff24 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001e14:	68bc      	ldr	r4, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681d      	ldr	r5, [r3, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f86b 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001e22:	4603      	mov	r3, r0
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff ff69 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fee5 	bl	8001c10 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001e46:	4603      	mov	r3, r0
 8001e48:	e004      	b.n	8001e54 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fed4 	bl	8001bfa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e52:	4603      	mov	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001e56:	e7d8      	b.n	8001e0a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff60 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01d      	beq.n	8001eaa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001e6e:	68b8      	ldr	r0, [r7, #8]
 8001e70:	f000 f905 	bl	800207e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	f107 021c 	add.w	r2, r7, #28
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff1e 	bl	8001cc4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001e8e:	f107 0214 	add.w	r2, r7, #20
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f901 	bl	80020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001e9e:	e027      	b.n	8001ef0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f914 	bl	80020d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001eaa:	68bc      	ldr	r4, [r7, #8]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff1b 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff ff1f 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001eca:	f107 0214 	add.w	r2, r7, #20
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f8e3 	bl	80020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001eda:	e009      	b.n	8001ef0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	f107 0220 	add.w	r2, r7, #32
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f902 	bl	80020f4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}

08001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f90d 	bl	8002120 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f914 	bl	800213c <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 8001f14:	4603      	mov	r3, r0
      }
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f1e:	b5b0      	push	{r4, r5, r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d119      	bne.n	8001f66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fe88 	bl	8001c48 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d012      	beq.n	8001f66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f40:	68fc      	ldr	r4, [r7, #12]
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f7ff ffd8 	bl	8001ef8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fecc 	bl	8001cea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001f52:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fed1 	bl	8001d02 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001f6a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001f6c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001f72:	7df8      	ldrb	r0, [r7, #23]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	f00f fae6 	bl	8011548 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff feca 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8001f92:	693b      	ldr	r3, [r7, #16]
    }
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}

08001f9c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f000 f8d2 	bl	8002152 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8d5 	bl	8002166 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	711a      	strb	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001fce:	b590      	push	{r4, r7, lr}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8ce 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f000 f8d4 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 f8dd 	bl	80021aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8b9 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002008:	4603      	mov	r3, r0
 800200a:	2201      	movs	r2, #1
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f8d8 	bl	80021c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8a8 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800202a:	4603      	mov	r3, r0
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f8d7 	bl	80021e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800203e:	b5b0      	push	{r4, r5, r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4619      	mov	r1, r3
 800204e:	2018      	movs	r0, #24
 8002050:	f7ff f9da 	bl	8001408 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f890 	bl	800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800205a:	4604      	mov	r4, r0
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f000 f896 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 8002062:	4605      	mov	r5, r0
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fd6a 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4629      	mov	r1, r5
 8002070:	4620      	mov	r0, r4
 8002072:	f000 f8c5 	bl	8002200 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>
	}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bdb0      	pop	{r4, r5, r7, pc}

0800207e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fe48 	bl	8001d26 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f000 f8ba 	bl	8002226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>
 80020b2:	4603      	mov	r3, r0
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8bd 	bl	800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80020c0:	4603      	mov	r3, r0
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f00f fa30 	bl	8011544 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
	return *this;
 80020ea:	687b      	ldr	r3, [r7, #4]
      }
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f000 f89a 	bl	800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002106:	4603      	mov	r3, r0
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f88e 	bl	800224e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3310      	adds	r3, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f863 	bl	8002266 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f861 	bl	800227e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f85c 	bl	8002292 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80021ec:	2200      	movs	r2, #0
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f85b 	bl	80022ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fc96 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f868 	bl	80022ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f861 	bl	800231e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f85f 	bl	8002332 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f00f f8e6 	bl	8011470 <_ZdlPv>
      }
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f845 	bl	8002348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>
 80022be:	4602      	mov	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4293      	cmp	r3, r2
 80022c4:	bf8c      	ite	hi
 80022c6:	2301      	movhi	r3, #1
 80022c8:	2300      	movls	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80022d0:	f00f fa70 	bl	80117b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f00f f8ca 	bl	8011478 <_Znwj>
 80022e4:	4603      	mov	r3, r0
      }
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fc1f 	bl	8001b3e <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002300:	4604      	mov	r4, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	2008      	movs	r0, #8
 8002308:	f7ff f87e 	bl	8001408 <_ZnwjPv>
 800230c:	4603      	mov	r3, r0
 800230e:	4621      	mov	r1, r4
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f825 	bl	8002360 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv+0x14>)
      }
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	05555555 	.word	0x05555555

08002360 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f812 	bl	8002396 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002372:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fbd3 	bl	8001b2a <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 8002384:	4603      	mov	r3, r0
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <_Z41__static_initialization_and_destruction_0ii>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <_Z41__static_initialization_and_destruction_0ii+0x32>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10b      	bne.n	80023de <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023c8:	461a      	mov	r2, r3
 80023ca:	2300      	movs	r3, #0
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	6053      	str	r3, [r2, #4]
 80023d0:	6093      	str	r3, [r2, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	6113      	str	r3, [r2, #16]
 80023d6:	6153      	str	r3, [r2, #20]
 80023d8:	4808      	ldr	r0, [pc, #32]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023da:	f7ff f85d 	bl	8001498 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d102      	bne.n	80023f4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023f0:	f7ff f85f 	bl	80014b2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000041c 	.word	0x2000041c

08002400 <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
 8002404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff ffcf 	bl	80023ac <_Z41__static_initialization_and_destruction_0ii>
 800240e:	bd80      	pop	{r7, pc}

08002410 <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
 8002414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ffc7 	bl	80023ac <_Z41__static_initialization_and_destruction_0ii>
 800241e:	bd80      	pop	{r7, pc}

08002420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002424:	f6ad 1de4 	subw	sp, sp, #2532	; 0x9e4
 8002428:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242a:	f002 f88c 	bl	8004546 <HAL_Init>
  /* USER CODE BEGIN Init */
  GPGGA gpsData;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242e:	f000 fccb 	bl	8002dc8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002432:	f000 fea7 	bl	8003184 <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 8002436:	f000 fd21 	bl	8002e7c <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 800243a:	f000 fd95 	bl	8002f68 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 800243e:	f000 fdc7 	bl	8002fd0 <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 8002442:	f00a f90f 	bl	800c664 <MX_FATFS_Init>
  MX_DMA_Init();
 8002446:	f000 fe7f 	bl	8003148 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 800244a:	f00e faf9 	bl	8010a40 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800244e:	f000 fdfb 	bl	8003048 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8002452:	f000 fe39 	bl	80030c8 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adcValue, 2);
 8002456:	2202      	movs	r2, #2
 8002458:	4996      	ldr	r1, [pc, #600]	; (80026b4 <main+0x294>)
 800245a:	4897      	ldr	r0, [pc, #604]	; (80026b8 <main+0x298>)
 800245c:	f002 fa10 	bl	8004880 <HAL_ADC_Start_DMA>

  ble.init(USART2, 9600, 1);
 8002460:	2301      	movs	r3, #1
 8002462:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002466:	4995      	ldr	r1, [pc, #596]	; (80026bc <main+0x29c>)
 8002468:	4895      	ldr	r0, [pc, #596]	; (80026c0 <main+0x2a0>)
 800246a:	f7ff f8a1 	bl	80015b0 <_ZN4UART4initEP13USART_TypeDefii>
  gps.init(USART1, 9600, 1);
 800246e:	2301      	movs	r3, #1
 8002470:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002474:	4993      	ldr	r1, [pc, #588]	; (80026c4 <main+0x2a4>)
 8002476:	4894      	ldr	r0, [pc, #592]	; (80026c8 <main+0x2a8>)
 8002478:	f7ff f89a 	bl	80015b0 <_ZN4UART4initEP13USART_TypeDefii>

  MPU6050_Init(&hi2c1);
 800247c:	4893      	ldr	r0, [pc, #588]	; (80026cc <main+0x2ac>)
 800247e:	f000 fffd 	bl	800347c <_Z12MPU6050_InitP17I2C_HandleTypeDef>

  memset(&gpsData,0,sizeof(gpsData));
 8002482:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002486:	2250      	movs	r2, #80	; 0x50
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f010 f8f0 	bl	8012670 <memset>
  gpsData.LatitudeDecimal = 0.0;
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 800249c:	e9c1 2300 	strd	r2, r3, [r1]
  gpsData.LongitudeDecimal = 0.0;
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
  if(gpsData.NS_Indicator==0)
 80024b0:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <main+0x9e>
	  gpsData.NS_Indicator='-';
 80024b8:	232d      	movs	r3, #45	; 0x2d
 80024ba:	f887 3928 	strb.w	r3, [r7, #2344]	; 0x928
  if(gpsData.EW_Indicator==0)
 80024be:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <main+0xac>
	  gpsData.EW_Indicator='-';
 80024c6:	232d      	movs	r3, #45	; 0x2d
 80024c8:	f887 3938 	strb.w	r3, [r7, #2360]	; 0x938
  if(gpsData.Geoid_Units==0)
 80024cc:	f897 3950 	ldrb.w	r3, [r7, #2384]	; 0x950
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <main+0xba>
	  gpsData.Geoid_Units='-';
 80024d4:	232d      	movs	r3, #45	; 0x2d
 80024d6:	f887 3950 	strb.w	r3, [r7, #2384]	; 0x950
  if(gpsData.MSL_Units==0)
 80024da:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <main+0xc8>
	  gpsData.MSL_Units='-';
 80024e2:	232d      	movs	r3, #45	; 0x2d
 80024e4:	f887 3948 	strb.w	r3, [r7, #2376]	; 0x948

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buff[1024] = {0};
 80024e8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	3304      	adds	r3, #4
 80024f2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f010 f8b9 	bl	8012670 <memset>
  char msg[100] = {0};
 80024fe:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	3304      	adds	r3, #4
 8002508:	2260      	movs	r2, #96	; 0x60
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f010 f8af 	bl	8012670 <memset>

  uint32_t elapsedTime = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
  uint32_t prevTime = HAL_GetTick();
 8002518:	f002 f840 	bl	800459c <HAL_GetTick>
 800251c:	f8c7 0970 	str.w	r0, [r7, #2416]	; 0x970

  HAL_GPIO_WritePin(BLE_EN_GPIO_Port, BLE_EN_Pin, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002526:	486a      	ldr	r0, [pc, #424]	; (80026d0 <main+0x2b0>)
 8002528:	f003 f907 	bl	800573a <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 800252c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002530:	f002 f83e 	bl	80045b0 <HAL_Delay>
  FATFS FatFS;

  FIL fil;
  FRESULT fres;

  GPIO_PinState sdValue = HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin);
 8002534:	2104      	movs	r1, #4
 8002536:	4866      	ldr	r0, [pc, #408]	; (80026d0 <main+0x2b0>)
 8002538:	f003 f8e8 	bl	800570c <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f

  if(sdValue == GPIO_PIN_SET) {
 8002542:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11b      	bne.n	8002582 <main+0x162>
	 if(sdState == FILE_OPEN) {
 800254a:	4b62      	ldr	r3, [pc, #392]	; (80026d4 <main+0x2b4>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <main+0x142>
		 f_close(&fil);
 8002552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002556:	4618      	mov	r0, r3
 8002558:	f00e f9ed 	bl	8010936 <f_close>
		 sdState = MOUNTED;
 800255c:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <main+0x2b4>)
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
	 }
	 if(sdState == MOUNTED) {
 8002562:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <main+0x2b4>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d104      	bne.n	8002574 <main+0x154>
		 f_mount(NULL, "", 1);
 800256a:	2201      	movs	r2, #1
 800256c:	495a      	ldr	r1, [pc, #360]	; (80026d8 <main+0x2b8>)
 800256e:	2000      	movs	r0, #0
 8002570:	f00d fdea 	bl	8010148 <f_mount>
	 }

	 disk.is_initialized[0] = 0;
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <main+0x2bc>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
	 sdState = DISCONNECTED;
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <main+0x2b4>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e03a      	b.n	80025f8 <main+0x1d8>
	}
	else if(sdValue == GPIO_PIN_RESET) {
 8002582:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8002586:	2b00      	cmp	r3, #0
 8002588:	d136      	bne.n	80025f8 <main+0x1d8>
	  fres = f_mount(&FatFS, "", 1);
 800258a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800258e:	2201      	movs	r2, #1
 8002590:	4951      	ldr	r1, [pc, #324]	; (80026d8 <main+0x2b8>)
 8002592:	4618      	mov	r0, r3
 8002594:	f00d fdd8 	bl	8010148 <f_mount>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 396e 	strb.w	r3, [r7, #2414]	; 0x96e
	  if(fres != FR_OK) {
 800259e:	f897 396e 	ldrb.w	r3, [r7, #2414]	; 0x96e
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d025      	beq.n	80025f2 <main+0x1d2>
		  sprintf((char*)buff, "f_mount error (%i)\r\n", fres);
 80025a6:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 80025aa:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025ae:	494c      	ldr	r1, [pc, #304]	; (80026e0 <main+0x2c0>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f010 ffe3 	bl	801357c <siprintf>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
 80025b6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fde0 	bl	8000180 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00e fb1e 	bl	8010c0c <CDC_Transmit_FS>
		  ble.sendData(buff, strlen((char*)buff));
 80025d0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd fdd3 	bl	8000180 <strlen>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80025e2:	230a      	movs	r3, #10
 80025e4:	4836      	ldr	r0, [pc, #216]	; (80026c0 <main+0x2a0>)
 80025e6:	f7ff f8db 	bl	80017a0 <_ZN4UART8sendDataEPhii>
		  sdState = CONNECTED;
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <main+0x2b4>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e002      	b.n	80025f8 <main+0x1d8>
	  }
	  else {
		  sdState = MOUNTED;
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <main+0x2b4>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
	  }
  }

  HAL_TIM_Base_Start_IT(&SD_TIMER_HANDLE);
 80025f8:	483a      	ldr	r0, [pc, #232]	; (80026e4 <main+0x2c4>)
 80025fa:	f006 fdad 	bl	8009158 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&BLE_TIMER_HANDLE);
 80025fe:	483a      	ldr	r0, [pc, #232]	; (80026e8 <main+0x2c8>)
 8002600:	f006 fdaa 	bl	8009158 <HAL_TIM_Base_Start_IT>


  sprintf((char*)buff,
 8002604:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002608:	4938      	ldr	r1, [pc, #224]	; (80026ec <main+0x2cc>)
 800260a:	4618      	mov	r0, r3
 800260c:	f010 ffb6 	bl	801357c <siprintf>
    "UTC Time, Loop Time, Lat (Deg), NS, Long. (Deg), EW, MSL Alt., Units, Sats., ax (m/s^2), ay (m/s^2), az (m/s^2), gx (deg/s), gy (deg/s), gz (deg/s)\r\n"
  );

  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002610:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fdb3 	bl	8000180 <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	b29a      	uxth	r2, r3
 800261e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f00e faf1 	bl	8010c0c <CDC_Transmit_FS>
  ble.sendData(buff, strlen((char*)buff), 50000);
 800262a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fda6 	bl	8000180 <strlen>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 800263c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002640:	481f      	ldr	r0, [pc, #124]	; (80026c0 <main+0x2a0>)
 8002642:	f7ff f8ad 	bl	80017a0 <_ZN4UART8sendDataEPhii>

  if(sdState == MOUNTED) {
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <main+0x2b4>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 8097 	bne.w	800277e <main+0x35e>
	  fres = f_open(&fil, "log.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002650:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002654:	220b      	movs	r2, #11
 8002656:	4926      	ldr	r1, [pc, #152]	; (80026f0 <main+0x2d0>)
 8002658:	4618      	mov	r0, r3
 800265a:	f00d fdbb 	bl	80101d4 <f_open>
 800265e:	4603      	mov	r3, r0
 8002660:	f887 396e 	strb.w	r3, [r7, #2414]	; 0x96e
	  if(fres != FR_OK) {
 8002664:	f897 396e 	ldrb.w	r3, [r7, #2414]	; 0x96e
 8002668:	2b00      	cmp	r3, #0
 800266a:	d045      	beq.n	80026f8 <main+0x2d8>
		  sprintf((char*)buff, "f_open error (%i)\r\n", fres);
 800266c:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 8002670:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002674:	491f      	ldr	r1, [pc, #124]	; (80026f4 <main+0x2d4>)
 8002676:	4618      	mov	r0, r3
 8002678:	f010 ff80 	bl	801357c <siprintf>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
 800267c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fd7d 	bl	8000180 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	b29a      	uxth	r2, r3
 800268a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f00e fabb 	bl	8010c0c <CDC_Transmit_FS>
		  ble.sendData(buff, strlen((char*)buff));
 8002696:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fd70 	bl	8000180 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80026a8:	230a      	movs	r3, #10
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <main+0x2a0>)
 80026ac:	f7ff f878 	bl	80017a0 <_ZN4UART8sendDataEPhii>
 80026b0:	e065      	b.n	800277e <main+0x35e>
 80026b2:	bf00      	nop
 80026b4:	20000750 	.word	0x20000750
 80026b8:	20000448 	.word	0x20000448
 80026bc:	40004400 	.word	0x40004400
 80026c0:	200006c4 	.word	0x200006c4
 80026c4:	40013800 	.word	0x40013800
 80026c8:	20000694 	.word	0x20000694
 80026cc:	200004e0 	.word	0x200004e0
 80026d0:	40020400 	.word	0x40020400
 80026d4:	20000444 	.word	0x20000444
 80026d8:	080176c8 	.word	0x080176c8
 80026dc:	20000794 	.word	0x20000794
 80026e0:	080176cc 	.word	0x080176cc
 80026e4:	2000058c 	.word	0x2000058c
 80026e8:	200005cc 	.word	0x200005cc
 80026ec:	080176e4 	.word	0x080176e4
 80026f0:	0801777c 	.word	0x0801777c
 80026f4:	08017784 	.word	0x08017784
	  }
	  else {
		  sdState = FILE_OPEN;
 80026f8:	4bce      	ldr	r3, [pc, #824]	; (8002a34 <main+0x614>)
 80026fa:	2203      	movs	r2, #3
 80026fc:	701a      	strb	r2, [r3, #0]
		  UINT bytesWrote;

		  if(f_write(&fil, buff, strlen((char*)buff), &bytesWrote) != FR_OK) {
 80026fe:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd fd3c 	bl	8000180 <strlen>
 8002708:	4602      	mov	r2, r0
 800270a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002712:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002716:	f00d ff1b 	bl	8010550 <f_write>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d021      	beq.n	800276e <main+0x34e>
			  sprintf((char*)buff, "f_write error (%i)\r\n", fres);
 800272a:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 800272e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002732:	49c1      	ldr	r1, [pc, #772]	; (8002a38 <main+0x618>)
 8002734:	4618      	mov	r0, r3
 8002736:	f010 ff21 	bl	801357c <siprintf>
			  CDC_Transmit_FS(buff, strlen((char*)buff));
 800273a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fd1e 	bl	8000180 <strlen>
 8002744:	4603      	mov	r3, r0
 8002746:	b29a      	uxth	r2, r3
 8002748:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f00e fa5c 	bl	8010c0c <CDC_Transmit_FS>
			  ble.sendData(buff, strlen((char*)buff));
 8002754:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fd11 	bl	8000180 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002766:	230a      	movs	r3, #10
 8002768:	48b4      	ldr	r0, [pc, #720]	; (8002a3c <main+0x61c>)
 800276a:	f7ff f819 	bl	80017a0 <_ZN4UART8sendDataEPhii>
			  //while(1);
		  }
		  	  f_close(&fil);
 800276e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002772:	4618      	mov	r0, r3
 8002774:	f00e f8df 	bl	8010936 <f_close>
		  	  sdState = MOUNTED;
 8002778:	4bae      	ldr	r3, [pc, #696]	; (8002a34 <main+0x614>)
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]


  while (1)
  {

	  if(CDC_ReadLine(usbBuffer)) {
 800277e:	48b0      	ldr	r0, [pc, #704]	; (8002a40 <main+0x620>)
 8002780:	f00e fa70 	bl	8010c64 <CDC_ReadLine>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <main+0x38c>
		  CDC_Transmit_FS(usbBuffer, sizeof(usbBuffer));
 8002794:	2110      	movs	r1, #16
 8002796:	48aa      	ldr	r0, [pc, #680]	; (8002a40 <main+0x620>)
 8002798:	f00e fa38 	bl	8010c0c <CDC_Transmit_FS>
		  ble.sendData(usbBuffer, sizeof(usbBuffer), 100);
 800279c:	2364      	movs	r3, #100	; 0x64
 800279e:	2210      	movs	r2, #16
 80027a0:	49a7      	ldr	r1, [pc, #668]	; (8002a40 <main+0x620>)
 80027a2:	48a6      	ldr	r0, [pc, #664]	; (8002a3c <main+0x61c>)
 80027a4:	f7fe fffc 	bl	80017a0 <_ZN4UART8sendDataEPhii>

		  CDC_ClearBuffer();
 80027a8:	f00e fa84 	bl	8010cb4 <CDC_ClearBuffer>
	  }
	  if(gps.readLine(buff, sizeof(buff))) {
 80027ac:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80027b0:	2300      	movs	r3, #0
 80027b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b6:	48a3      	ldr	r0, [pc, #652]	; (8002a44 <main+0x624>)
 80027b8:	f7fe ff64 	bl	8001684 <_ZN4UART8readLineEPhim>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a2 	beq.w	8002912 <main+0x4f2>

		  char *str = strstr((char*)buff, "$GNGGA,");
 80027ce:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80027d2:	499d      	ldr	r1, [pc, #628]	; (8002a48 <main+0x628>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f010 ff68 	bl	80136aa <strstr>
 80027da:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968
		  if(str!=NULL)
 80027de:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8095 	beq.w	8002912 <main+0x4f2>
		  {
			  memset(&gpsData,0,sizeof(gpsData));
 80027e8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80027ec:	2250      	movs	r2, #80	; 0x50
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00f ff3d 	bl	8012670 <memset>
			  sscanf(str,"$GNGGA,%2hu%2hu%2hu.%3hu,%f,%c,%f,%c,%hu,%hu,%f,%f,%c,%f,%c,,*%2s",
 80027f6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80027fa:	1c99      	adds	r1, r3, #2
 80027fc:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 8002800:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002804:	3348      	adds	r3, #72	; 0x48
 8002806:	930d      	str	r3, [sp, #52]	; 0x34
 8002808:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800280c:	3340      	adds	r3, #64	; 0x40
 800280e:	930c      	str	r3, [sp, #48]	; 0x30
 8002810:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002814:	333c      	adds	r3, #60	; 0x3c
 8002816:	930b      	str	r3, [sp, #44]	; 0x2c
 8002818:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800281c:	3338      	adds	r3, #56	; 0x38
 800281e:	930a      	str	r3, [sp, #40]	; 0x28
 8002820:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002824:	3334      	adds	r3, #52	; 0x34
 8002826:	9309      	str	r3, [sp, #36]	; 0x24
 8002828:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800282c:	3330      	adds	r3, #48	; 0x30
 800282e:	9308      	str	r3, [sp, #32]
 8002830:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002834:	332c      	adds	r3, #44	; 0x2c
 8002836:	9307      	str	r3, [sp, #28]
 8002838:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800283c:	332a      	adds	r3, #42	; 0x2a
 800283e:	9306      	str	r3, [sp, #24]
 8002840:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002844:	3328      	adds	r3, #40	; 0x28
 8002846:	9305      	str	r3, [sp, #20]
 8002848:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800284c:	331c      	adds	r3, #28
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002854:	3318      	adds	r3, #24
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800285c:	3308      	adds	r3, #8
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8002864:	3306      	adds	r3, #6
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800286c:	3304      	adds	r3, #4
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	4976      	ldr	r1, [pc, #472]	; (8002a4c <main+0x62c>)
 8002874:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8002878:	f010 fea0 	bl	80135bc <siscanf>
					  &gpsData.UTC_Hour,&gpsData.UTC_Min,&gpsData.UTC_Sec,&gpsData.UTC_MicroSec,&gpsData.Latitude,
					  &gpsData.NS_Indicator,&gpsData.Longitude,&gpsData.EW_Indicator,&gpsData.PositionFixIndicator,
					  &gpsData.SatellitesUsed,&gpsData.HDOP,&gpsData.MSL_Altitude,&gpsData.MSL_Units,&gpsData.Geoid_Separation,
					  &gpsData.Geoid_Units,gpsData.CheckSum);

			  if(gpsData.NS_Indicator==0)
 800287c:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <main+0x46a>
				  gpsData.NS_Indicator='-';
 8002884:	232d      	movs	r3, #45	; 0x2d
 8002886:	f887 3928 	strb.w	r3, [r7, #2344]	; 0x928
			  if(gpsData.EW_Indicator==0)
 800288a:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <main+0x478>
				  gpsData.EW_Indicator='-';
 8002892:	232d      	movs	r3, #45	; 0x2d
 8002894:	f887 3938 	strb.w	r3, [r7, #2360]	; 0x938
			  if(gpsData.Geoid_Units==0)
 8002898:	f897 3950 	ldrb.w	r3, [r7, #2384]	; 0x950
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <main+0x486>
				  gpsData.Geoid_Units='-';
 80028a0:	232d      	movs	r3, #45	; 0x2d
 80028a2:	f887 3950 	strb.w	r3, [r7, #2384]	; 0x950
			  if(gpsData.MSL_Units==0)
 80028a6:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <main+0x494>
				  gpsData.MSL_Units='-';
 80028ae:	232d      	movs	r3, #45	; 0x2d
 80028b0:	f887 3948 	strb.w	r3, [r7, #2376]	; 0x948

			  gpsData.LatitudeDecimal=convertDegMinToDecDeg(gpsData.Latitude);
 80028b4:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd3f 	bl	800333c <_Z21convertDegMinToDecDegf>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 80028c6:	e9c1 2300 	strd	r2, r3, [r1]
			  gpsData.LongitudeDecimal=convertDegMinToDecDeg(gpsData.Longitude);
 80028ca:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fd34 	bl	800333c <_Z21convertDegMinToDecDegf>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80028dc:	e9c1 2300 	strd	r2, r3, [r1]

			  if(gpsData.SatellitesUsed > 3) HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_SET);
 80028e0:	f8b7 393c 	ldrh.w	r3, [r7, #2364]	; 0x93c
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d906      	bls.n	80028f6 <main+0x4d6>
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ee:	4858      	ldr	r0, [pc, #352]	; (8002a50 <main+0x630>)
 80028f0:	f002 ff23 	bl	800573a <HAL_GPIO_WritePin>
 80028f4:	e005      	b.n	8002902 <main+0x4e2>
			  else HAL_GPIO_WritePin(GPS_LED_G_GPIO_Port, GPS_LED_G_Pin, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028fc:	4854      	ldr	r0, [pc, #336]	; (8002a50 <main+0x630>)
 80028fe:	f002 ff1c 	bl	800573a <HAL_GPIO_WritePin>

			  memset(buff, '\0', sizeof(buff));
 8002902:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f00f feaf 	bl	8012670 <memset>
		  }
	  }
	  if(ble.readLine(buff, sizeof(buff))) {
 8002912:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002916:	2300      	movs	r3, #0
 8002918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800291c:	4847      	ldr	r0, [pc, #284]	; (8002a3c <main+0x61c>)
 800291e:	f7fe feb1 	bl	8001684 <_ZN4UART8readLineEPhim>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01c      	beq.n	800296c <main+0x54c>
		  //ble.getData(buff, sizeof(buff));
		  strcpy(msg, (char*)buff);
 8002932:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8002936:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f010 feac 	bl	801369a <strcpy>
		  sprintf((char*)buff, "\r\n\r\nBLE MSG: %s\r\n\r\n",msg);
 8002942:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 8002946:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800294a:	4942      	ldr	r1, [pc, #264]	; (8002a54 <main+0x634>)
 800294c:	4618      	mov	r0, r3
 800294e:	f010 fe15 	bl	801357c <siprintf>
		  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002952:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc12 	bl	8000180 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	b29a      	uxth	r2, r3
 8002960:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f00e f950 	bl	8010c0c <CDC_Transmit_FS>
	  }

	 GPIO_PinState sdValue = HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin);
 800296c:	2104      	movs	r1, #4
 800296e:	483a      	ldr	r0, [pc, #232]	; (8002a58 <main+0x638>)
 8002970:	f002 fecc 	bl	800570c <HAL_GPIO_ReadPin>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3967 	strb.w	r3, [r7, #2407]	; 0x967

	 if(sdValue == GPIO_PIN_SET) {
 800297a:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 800297e:	2b01      	cmp	r3, #1
 8002980:	d11b      	bne.n	80029ba <main+0x59a>
		 if(sdState == FILE_OPEN) {
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <main+0x614>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <main+0x57a>
			 f_close(&fil);
 800298a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800298e:	4618      	mov	r0, r3
 8002990:	f00d ffd1 	bl	8010936 <f_close>
			 sdState = MOUNTED;
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <main+0x614>)
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
		 }
		 if(sdState == MOUNTED) {
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <main+0x614>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d104      	bne.n	80029ac <main+0x58c>
			 f_mount(NULL, "", 1);
 80029a2:	2201      	movs	r2, #1
 80029a4:	492d      	ldr	r1, [pc, #180]	; (8002a5c <main+0x63c>)
 80029a6:	2000      	movs	r0, #0
 80029a8:	f00d fbce 	bl	8010148 <f_mount>
		 }

		 disk.is_initialized[0] = 0;
 80029ac:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <main+0x640>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
		 sdState = DISCONNECTED;
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <main+0x614>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e059      	b.n	8002a6e <main+0x64e>
	 }
	 else if(sdValue == GPIO_PIN_RESET && sdState == DISCONNECTED) {
 80029ba:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d155      	bne.n	8002a6e <main+0x64e>
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <main+0x614>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d151      	bne.n	8002a6e <main+0x64e>

		  fres = f_mount(&FatFS, "", 1);
 80029ca:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80029ce:	2201      	movs	r2, #1
 80029d0:	4922      	ldr	r1, [pc, #136]	; (8002a5c <main+0x63c>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00d fbb8 	bl	8010148 <f_mount>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 396e 	strb.w	r3, [r7, #2414]	; 0x96e
		  if(fres != FR_OK) {
 80029de:	f897 396e 	ldrb.w	r3, [r7, #2414]	; 0x96e
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d040      	beq.n	8002a68 <main+0x648>
			  sprintf((char*)buff, "f_mount error (%i)\r\n", fres);
 80029e6:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 80029ea:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029ee:	491d      	ldr	r1, [pc, #116]	; (8002a64 <main+0x644>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f010 fdc3 	bl	801357c <siprintf>
			  CDC_Transmit_FS(buff, strlen((char*)buff));
 80029f6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fbc0 	bl	8000180 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00e f8fe 	bl	8010c0c <CDC_Transmit_FS>
			  ble.sendData(buff, strlen((char*)buff));
 8002a10:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fbb3 	bl	8000180 <strlen>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002a22:	230a      	movs	r3, #10
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <main+0x61c>)
 8002a26:	f7fe febb 	bl	80017a0 <_ZN4UART8sendDataEPhii>
			  sdState = CONNECTED;
 8002a2a:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <main+0x614>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e01d      	b.n	8002a6e <main+0x64e>
 8002a32:	bf00      	nop
 8002a34:	20000444 	.word	0x20000444
 8002a38:	08017798 	.word	0x08017798
 8002a3c:	200006c4 	.word	0x200006c4
 8002a40:	20000434 	.word	0x20000434
 8002a44:	20000694 	.word	0x20000694
 8002a48:	080177b0 	.word	0x080177b0
 8002a4c:	080177b8 	.word	0x080177b8
 8002a50:	40020000 	.word	0x40020000
 8002a54:	080177fc 	.word	0x080177fc
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	080176c8 	.word	0x080176c8
 8002a60:	20000794 	.word	0x20000794
 8002a64:	080176cc 	.word	0x080176cc
		  }
		  else {
			  sdState = MOUNTED;
 8002a68:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <main+0x870>)
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	701a      	strb	r2, [r3, #0]
		  }
	 }



	  MPU6050_Read_All(&hi2c1, &mpu6050);
 8002a6e:	4989      	ldr	r1, [pc, #548]	; (8002c94 <main+0x874>)
 8002a70:	4889      	ldr	r0, [pc, #548]	; (8002c98 <main+0x878>)
 8002a72:	f000 fdb1 	bl	80035d8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>

	  sprintf((char*)buff,
			  "%hu:%hu:%hu,%ld,%.5f,%c,%.5f,%c,%.1f,%c,%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",

			  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a76:	f8b7 3910 	ldrh.w	r3, [r7, #2320]	; 0x910
	  sprintf((char*)buff,
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
			  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a7c:	f8b7 3912 	ldrh.w	r3, [r7, #2322]	; 0x912
	  sprintf((char*)buff,
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
			  gpsData.UTC_Hour, gpsData.UTC_Min, gpsData.UTC_Sec, elapsedTime,
 8002a82:	f8b7 3914 	ldrh.w	r3, [r7, #2324]	; 0x914
	  sprintf((char*)buff,
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
 8002a88:	f507 6012 	add.w	r0, r7, #2336	; 0x920
 8002a8c:	c803      	ldmia	r0, {r0, r1}
 8002a8e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  gpsData.LatitudeDecimal, gpsData.NS_Indicator, gpsData.LongitudeDecimal, gpsData.EW_Indicator,
 8002a92:	f897 3928 	ldrb.w	r3, [r7, #2344]	; 0x928
	  sprintf((char*)buff,
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
 8002a98:	f507 6413 	add.w	r4, r7, #2352	; 0x930
 8002a9c:	cc30      	ldmia	r4, {r4, r5}
 8002a9e:	e9c7 4508 	strd	r4, r5, [r7, #32]
			  gpsData.LatitudeDecimal, gpsData.NS_Indicator, gpsData.LongitudeDecimal, gpsData.EW_Indicator,
 8002aa2:	f897 3938 	ldrb.w	r3, [r7, #2360]	; 0x938
	  sprintf((char*)buff,
 8002aa6:	61fb      	str	r3, [r7, #28]
			  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002aa8:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
	  sprintf((char*)buff,
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fcd3 	bl	8000458 <__aeabi_f2d>
 8002ab2:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002ab6:	f897 3948 	ldrb.w	r3, [r7, #2376]	; 0x948
	  sprintf((char*)buff,
 8002aba:	61bb      	str	r3, [r7, #24]
			  gpsData.MSL_Altitude, gpsData.MSL_Units, gpsData.SatellitesUsed,
 8002abc:	f8b7 393c 	ldrh.w	r3, [r7, #2364]	; 0x93c
	  sprintf((char*)buff,
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <main+0x874>)
 8002ac4:	e9d3 5602 	ldrd	r5, r6, [r3, #8]
 8002ac8:	e9c7 5600 	strd	r5, r6, [r7]
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <main+0x874>)
 8002ace:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <main+0x874>)
 8002ad4:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8002ad8:	4b6e      	ldr	r3, [pc, #440]	; (8002c94 <main+0x874>)
 8002ada:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ade:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <main+0x874>)
 8002ae0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002ae4:	4b6b      	ldr	r3, [pc, #428]	; (8002c94 <main+0x874>)
 8002ae6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002aea:	f507 66a2 	add.w	r6, r7, #1296	; 0x510
 8002aee:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002af2:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8002af6:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002afa:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8002afe:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8002b02:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002b06:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	910d      	str	r1, [sp, #52]	; 0x34
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	910c      	str	r1, [sp, #48]	; 0x30
 8002b12:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002b16:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002b1a:	69f9      	ldr	r1, [r7, #28]
 8002b1c:	9108      	str	r1, [sp, #32]
 8002b1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b22:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b28:	9104      	str	r1, [sp, #16]
 8002b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b32:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b3a:	9100      	str	r1, [sp, #0]
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b40:	4956      	ldr	r1, [pc, #344]	; (8002c9c <main+0x87c>)
 8002b42:	4630      	mov	r0, r6
 8002b44:	f010 fd1a 	bl	801357c <siprintf>
	 	mpu6050.Ax, mpu6050.Ay, mpu6050.Az,
		mpu6050.Gx, mpu6050.Gy, mpu6050.Gz
	  );

	  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002b48:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fb17 	bl	8000180 <strlen>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00e f855 	bl	8010c0c <CDC_Transmit_FS>
	  ble.sendData(buff, strlen((char*)buff), 50000);
 8002b62:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fb0a 	bl	8000180 <strlen>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002b74:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002b78:	4849      	ldr	r0, [pc, #292]	; (8002ca0 <main+0x880>)
 8002b7a:	f7fe fe11 	bl	80017a0 <_ZN4UART8sendDataEPhii>

	  if(sdState == MOUNTED) {
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <main+0x870>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d172      	bne.n	8002c6c <main+0x84c>
		  fres = f_open(&fil, "log.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b8a:	2233      	movs	r2, #51	; 0x33
 8002b8c:	4945      	ldr	r1, [pc, #276]	; (8002ca4 <main+0x884>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00d fb20 	bl	80101d4 <f_open>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 396e 	strb.w	r3, [r7, #2414]	; 0x96e
		  if(fres != FR_OK) {
 8002b9a:	f897 396e 	ldrb.w	r3, [r7, #2414]	; 0x96e
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d022      	beq.n	8002be8 <main+0x7c8>
			  sprintf((char*)buff, "f_open error (%i)\r\n", fres);
 8002ba2:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 8002ba6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002baa:	493f      	ldr	r1, [pc, #252]	; (8002ca8 <main+0x888>)
 8002bac:	4618      	mov	r0, r3
 8002bae:	f010 fce5 	bl	801357c <siprintf>
			  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002bb2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fae2 	bl	8000180 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00e f820 	bl	8010c0c <CDC_Transmit_FS>
			  ble.sendData(buff, strlen((char*)buff));
 8002bcc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fad5 	bl	8000180 <strlen>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002bde:	230a      	movs	r3, #10
 8002be0:	482f      	ldr	r0, [pc, #188]	; (8002ca0 <main+0x880>)
 8002be2:	f7fe fddd 	bl	80017a0 <_ZN4UART8sendDataEPhii>
 8002be6:	e041      	b.n	8002c6c <main+0x84c>
		  }
		  else {
			  sdState = FILE_OPEN;
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <main+0x870>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]

			  UINT bytesWrote;
			  fres = f_write(&fil, buff, strlen((char*)buff), &bytesWrote);
 8002bee:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fac4 	bl	8000180 <strlen>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bfe:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002c02:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002c06:	f00d fca3 	bl	8010550 <f_write>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 396e 	strb.w	r3, [r7, #2414]	; 0x96e
			  if(fres != FR_OK) {
 8002c10:	f897 396e 	ldrb.w	r3, [r7, #2414]	; 0x96e
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d021      	beq.n	8002c5c <main+0x83c>
				  sprintf((char*)buff, "f_write error (%i)\r\n", fres);
 8002c18:	f897 296e 	ldrb.w	r2, [r7, #2414]	; 0x96e
 8002c1c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c20:	4922      	ldr	r1, [pc, #136]	; (8002cac <main+0x88c>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f010 fcaa 	bl	801357c <siprintf>
				  CDC_Transmit_FS(buff, strlen((char*)buff));
 8002c28:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd faa7 	bl	8000180 <strlen>
 8002c32:	4603      	mov	r3, r0
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f00d ffe5 	bl	8010c0c <CDC_Transmit_FS>
				  ble.sendData(buff, strlen((char*)buff));
 8002c42:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fa9a 	bl	8000180 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002c54:	230a      	movs	r3, #10
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <main+0x880>)
 8002c58:	f7fe fda2 	bl	80017a0 <_ZN4UART8sendDataEPhii>
			  }
			  f_close(&fil);
 8002c5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00d fe68 	bl	8010936 <f_close>

			  sdState = MOUNTED;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <main+0x870>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  elapsedTime = HAL_GetTick() - prevTime;
 8002c6c:	f001 fc96 	bl	800459c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
	  prevTime = HAL_GetTick();
 8002c7c:	f001 fc8e 	bl	800459c <HAL_GetTick>
 8002c80:	f8c7 0970 	str.w	r0, [r7, #2416]	; 0x970

	  HAL_Delay(900);
 8002c84:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002c88:	f001 fc92 	bl	80045b0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002c8c:	e577      	b.n	800277e <main+0x35e>
 8002c8e:	bf00      	nop
 8002c90:	20000444 	.word	0x20000444
 8002c94:	200006f8 	.word	0x200006f8
 8002c98:	200004e0 	.word	0x200004e0
 8002c9c:	08017810 	.word	0x08017810
 8002ca0:	200006c4 	.word	0x200006c4
 8002ca4:	0801777c 	.word	0x0801777c
 8002ca8:	08017784 	.word	0x08017784
 8002cac:	08017798 	.word	0x08017798

08002cb0 <HAL_TIM_PeriodElapsedCallback>:
  f_mount(NULL, "", 0);
  /* USER CODE END 3 */
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d102      	bne.n	8002cc8 <HAL_TIM_PeriodElapsedCallback+0x18>
    	HAL_IncTick();
 8002cc2:	f001 fc59 	bl	8004578 <HAL_IncTick>
			HAL_GPIO_TogglePin(SD_LED_G_GPIO_Port, SD_LED_G_Pin);
			sdCount = 0;
			break;
		}
	}
}
 8002cc6:	e06a      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
    else if(htim->Instance == BLE_TIMER_HANDLE.Instance) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d116      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x52>
    	GPIO_PinState bleState = HAL_GPIO_ReadPin(BLE_STATUS_GPIO_Port, BLE_STATUS_Pin);
 8002cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd8:	4835      	ldr	r0, [pc, #212]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002cda:	f002 fd17 	bl	800570c <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
		if(bleState == GPIO_PIN_RESET) {
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x44>
			HAL_GPIO_TogglePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin);
 8002ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cec:	4831      	ldr	r0, [pc, #196]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002cee:	f002 fd3c 	bl	800576a <HAL_GPIO_TogglePin>
}
 8002cf2:	e054      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
			HAL_GPIO_WritePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cfa:	482e      	ldr	r0, [pc, #184]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002cfc:	f002 fd1d 	bl	800573a <HAL_GPIO_WritePin>
}
 8002d00:	e04d      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
	else if(htim->Instance == SD_TIMER_HANDLE.Instance) {
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d147      	bne.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
		switch(sdState) {
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d843      	bhi.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d41 	.word	0x08002d41
 8002d24:	08002d55 	.word	0x08002d55
 8002d28:	08002d8b 	.word	0x08002d8b
			HAL_GPIO_WritePin(SD_LED_G_GPIO_Port, SD_LED_G_Pin, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d32:	481f      	ldr	r0, [pc, #124]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d34:	f002 fd01 	bl	800573a <HAL_GPIO_WritePin>
			sdCount = 0;
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
			break;
 8002d3e:	e02e      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
			HAL_GPIO_WritePin(SD_LED_G_GPIO_Port, SD_LED_G_Pin, GPIO_PIN_SET);
 8002d40:	2201      	movs	r2, #1
 8002d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d46:	481a      	ldr	r0, [pc, #104]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d48:	f002 fcf7 	bl	800573a <HAL_GPIO_WritePin>
			sdCount = 0;
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
			break;
 8002d52:	e024      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
			if(++sdCount >= sdOverlap) {
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d60:	4619      	mov	r1, r3
 8002d62:	7011      	strb	r1, [r2, #0]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	bf2c      	ite	cs
 8002d6e:	2301      	movcs	r3, #1
 8002d70:	2300      	movcc	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d011      	beq.n	8002d9c <HAL_TIM_PeriodElapsedCallback+0xec>
				HAL_GPIO_TogglePin(SD_LED_G_GPIO_Port, SD_LED_G_Pin);
 8002d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d7e:	f002 fcf4 	bl	800576a <HAL_GPIO_TogglePin>
				sdCount = 0;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
			break;
 8002d88:	e008      	b.n	8002d9c <HAL_TIM_PeriodElapsedCallback+0xec>
			HAL_GPIO_TogglePin(SD_LED_G_GPIO_Port, SD_LED_G_Pin);
 8002d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d90:	f002 fceb 	bl	800576a <HAL_GPIO_TogglePin>
			sdCount = 0;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			break;
 8002d9a:	e000      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0xee>
			break;
 8002d9c:	bf00      	nop
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40011000 	.word	0x40011000
 8002dac:	200005cc 	.word	0x200005cc
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	2000058c 	.word	0x2000058c
 8002dbc:	20000444 	.word	0x20000444
 8002dc0:	20000445 	.word	0x20000445
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b092      	sub	sp, #72	; 0x48
 8002dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	2234      	movs	r2, #52	; 0x34
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f00f fc4a 	bl	8012670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ddc:	463b      	mov	r3, r7
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <_Z18SystemClock_Configv+0xb0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <_Z18SystemClock_Configv+0xb0>)
 8002df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002df8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e02:	2301      	movs	r3, #1
 8002e04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e06:	2310      	movs	r3, #16
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4618      	mov	r0, r3
 8002e26:	f005 f8a3 	bl	8007f70 <HAL_RCC_OscConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002e3a:	f000 facb 	bl	80033d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e3e:	230f      	movs	r3, #15
 8002e40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e42:	2301      	movs	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 fbba 	bl	80085d0 <HAL_RCC_ClockConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002e6c:	f000 fab2 	bl	80033d4 <Error_Handler>
  }
}
 8002e70:	bf00      	nop
 8002e72:	3748      	adds	r7, #72	; 0x48
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40007000 	.word	0x40007000

08002e7c <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <_ZL11MX_ADC_Initv+0xe8>)
 8002e90:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ecc:	2202      	movs	r2, #2
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002eda:	2210      	movs	r2, #16
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002eec:	481c      	ldr	r0, [pc, #112]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002eee:	f001 fb81 	bl	80045f4 <HAL_ADC_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 8002f02:	f000 fa67 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f06:	2309      	movs	r3, #9
 8002f08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4812      	ldr	r0, [pc, #72]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002f18:	f001 fd5c 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 8002f2c:	f000 fa52 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f30:	2304      	movs	r3, #4
 8002f32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f34:	2302      	movs	r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4808      	ldr	r0, [pc, #32]	; (8002f60 <_ZL11MX_ADC_Initv+0xe4>)
 8002f3e:	f001 fd49 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <_ZL11MX_ADC_Initv+0xda>
  {
    Error_Handler();
 8002f52:	f000 fa3f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000448 	.word	0x20000448
 8002f64:	40012400 	.word	0x40012400

08002f68 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f6c:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <_ZL12MX_I2C1_Initv+0x60>)
 8002f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <_ZL12MX_I2C1_Initv+0x64>)
 8002f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fa4:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002fa6:	f002 fbf9 	bl	800579c <HAL_I2C_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002fba:	f000 fa0b 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200004e0 	.word	0x200004e0
 8002fc8:	40005400 	.word	0x40005400
 8002fcc:	00061a80 	.word	0x00061a80

08002fd0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <_ZL12MX_SPI1_Initv+0x74>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8003004:	2200      	movs	r2, #0
 8003006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 800301c:	220a      	movs	r2, #10
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <_ZL12MX_SPI1_Initv+0x70>)
 8003022:	f005 fd71 	bl	8008b08 <HAL_SPI_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8003036:	f000 f9cd 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000534 	.word	0x20000534
 8003044:	40013000 	.word	0x40013000

08003048 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304e:	463b      	mov	r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <_ZL12MX_TIM6_Initv+0x7c>)
 800305a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20;
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 800305e:	2214      	movs	r2, #20
 8003060:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 800306a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 8003072:	2200      	movs	r2, #0
 8003074:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003076:	4812      	ldr	r0, [pc, #72]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 8003078:	f006 f82e 	bl	80090d8 <HAL_TIM_Base_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 800308c:	f000 f9a2 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003098:	463b      	mov	r3, r7
 800309a:	4619      	mov	r1, r3
 800309c:	4808      	ldr	r0, [pc, #32]	; (80030c0 <_ZL12MX_TIM6_Initv+0x78>)
 800309e:	f006 fa0f 	bl	80094c0 <HAL_TIMEx_MasterConfigSynchronization>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 80030b2:	f000 f98f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000058c 	.word	0x2000058c
 80030c4:	40001000 	.word	0x40001000

080030c8 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ce:	463b      	mov	r3, r7
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <_ZL12MX_TIM7_Initv+0x7c>)
 80030da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 120;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030de:	2278      	movs	r2, #120	; 0x78
 80030e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030f6:	4812      	ldr	r0, [pc, #72]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 80030f8:	f005 ffee 	bl	80090d8 <HAL_TIM_Base_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 800310c:	f000 f962 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003118:	463b      	mov	r3, r7
 800311a:	4619      	mov	r1, r3
 800311c:	4808      	ldr	r0, [pc, #32]	; (8003140 <_ZL12MX_TIM7_Initv+0x78>)
 800311e:	f006 f9cf 	bl	80094c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8003132:	f000 f94f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200005cc 	.word	0x200005cc
 8003144:	40001400 	.word	0x40001400

08003148 <_ZL11MX_DMA_Initv>:
/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <_ZL11MX_DMA_Initv+0x38>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <_ZL11MX_DMA_Initv+0x38>)
 8003154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <_ZL11MX_DMA_Initv+0x38>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	200b      	movs	r0, #11
 800316c:	f001 ff0f 	bl	8004f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003170:	200b      	movs	r0, #11
 8003172:	f001 ff28 	bl	8004fc6 <HAL_NVIC_EnableIRQ>

}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800

08003184 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800319a:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	61d3      	str	r3, [r2, #28]
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031b2:	4b46      	ldr	r3, [pc, #280]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a45      	ldr	r2, [pc, #276]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b43      	ldr	r3, [pc, #268]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a3f      	ldr	r2, [pc, #252]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a39      	ldr	r2, [pc, #228]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <_ZL12MX_GPIO_Initv+0x148>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 80031fa:	2200      	movs	r2, #0
 80031fc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003200:	4833      	ldr	r0, [pc, #204]	; (80032d0 <_ZL12MX_GPIO_Initv+0x14c>)
 8003202:	f002 fa9a 	bl	800573a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 8003206:	2200      	movs	r2, #0
 8003208:	f240 1103 	movw	r1, #259	; 0x103
 800320c:	4831      	ldr	r0, [pc, #196]	; (80032d4 <_ZL12MX_GPIO_Initv+0x150>)
 800320e:	f002 fa94 	bl	800573a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8003212:	2200      	movs	r2, #0
 8003214:	f64d 2101 	movw	r1, #55809	; 0xda01
 8003218:	482f      	ldr	r0, [pc, #188]	; (80032d8 <_ZL12MX_GPIO_Initv+0x154>)
 800321a:	f002 fa8e 	bl	800573a <HAL_GPIO_WritePin>
                          |BLE_EN_Pin|PWR_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 800321e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003224:	2301      	movs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	4826      	ldr	r0, [pc, #152]	; (80032d0 <_ZL12MX_GPIO_Initv+0x14c>)
 8003238:	f002 f8e8 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_G_Pin PWR_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin;
 800323c:	f240 1303 	movw	r3, #259	; 0x103
 8003240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	481f      	ldr	r0, [pc, #124]	; (80032d4 <_ZL12MX_GPIO_Initv+0x150>)
 8003256:	f002 f8d9 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BAT_P_Pin */
  GPIO_InitStruct.Pin = V_BAT_P_Pin;
 800325a:	2310      	movs	r3, #16
 800325c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800325e:	2303      	movs	r3, #3
 8003260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	4619      	mov	r1, r3
 800326c:	4819      	ldr	r0, [pc, #100]	; (80032d4 <_ZL12MX_GPIO_Initv+0x150>)
 800326e:	f002 f8cd 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SD_CS_Pin MLX_TRIG_Pin SD_LED_G_Pin BLE_STATUS_Pin
                           BLE_EN_Pin PWR_LED_B_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin
 8003272:	f649 2301 	movw	r3, #39425	; 0x9a01
 8003276:	617b      	str	r3, [r7, #20]
                          |BLE_EN_Pin|PWR_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	4813      	ldr	r0, [pc, #76]	; (80032d8 <_ZL12MX_GPIO_Initv+0x154>)
 800328c:	f002 f8be 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|BLE_STATUS_Pin;
 8003290:	f244 0304 	movw	r3, #16388	; 0x4004
 8003294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329a:	2301      	movs	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <_ZL12MX_GPIO_Initv+0x154>)
 80032a6:	f002 f8b1 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : MLX_RDY_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = MLX_RDY_Pin|BLE_INT_Pin;
 80032aa:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80032ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4619      	mov	r1, r3
 80032be:	4806      	ldr	r0, [pc, #24]	; (80032d8 <_ZL12MX_GPIO_Initv+0x154>)
 80032c0:	f002 f8a4 	bl	800540c <HAL_GPIO_Init>

}
 80032c4:	bf00      	nop
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400

080032dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	std::map<USART_TypeDef*, UART*>::iterator it;
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fae6 	bl	80018ba <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = UART::objectMap.find(huart->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4811      	ldr	r0, [pc, #68]	; (8003338 <HAL_UART_RxCpltCallback+0x5c>)
 80032f4:	f7fe faee 	bl	80018d4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 80032f8:	4603      	mov	r3, r0
 80032fa:	60bb      	str	r3, [r7, #8]
	if(it != UART::objectMap.end())
 80032fc:	480e      	ldr	r0, [pc, #56]	; (8003338 <HAL_UART_RxCpltCallback+0x5c>)
 80032fe:	f7fe faf8 	bl	80018f2 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8003302:	4603      	mov	r3, r0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	f107 020c 	add.w	r2, r7, #12
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fafb 	bl	800190c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_UART_RxCpltCallback+0x54>
		it->second->memberIRQ();
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f85c 	bl	80033de <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>
 8003326:	4603      	mov	r3, r0
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fa4c 	bl	80017c8 <_ZN4UART9memberIRQEv>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	2000041c 	.word	0x2000041c

0800333c <_Z21convertDegMinToDecDegf>:

double convertDegMinToDecDeg (float degMin)
{
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  double min = 0.0;
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd f87b 	bl	8000458 <__aeabi_f2d>
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <_Z21convertDegMinToDecDegf+0x8c>)
 8003368:	f00e fe0e 	bl	8011f88 <fmod>
 800336c:	e9c7 0104 	strd	r0, r1, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8003370:	4916      	ldr	r1, [pc, #88]	; (80033cc <_Z21convertDegMinToDecDegf+0x90>)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fdd2 	bl	8000f1c <__aeabi_fdiv>
 8003378:	4603      	mov	r3, r0
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fe6a 	bl	8001054 <__aeabi_f2iz>
 8003380:	4603      	mov	r3, r0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fcc2 	bl	8000d0c <__aeabi_i2f>
 8003388:	4603      	mov	r3, r0
 800338a:	607b      	str	r3, [r7, #4]
  decDeg = degMin + ( min / 60 );
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd f863 	bl	8000458 <__aeabi_f2d>
 8003392:	4604      	mov	r4, r0
 8003394:	460d      	mov	r5, r1
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <_Z21convertDegMinToDecDegf+0x94>)
 800339c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a0:	f7fd f9dc 	bl	800075c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4620      	mov	r0, r4
 80033aa:	4629      	mov	r1, r5
 80033ac:	f7fc fef6 	bl	800019c <__adddf3>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 80033b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bdb0      	pop	{r4, r5, r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40590000 	.word	0x40590000
 80033cc:	42c80000 	.word	0x42c80000
 80033d0:	404e0000 	.word	0x404e0000

080033d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d8:	b672      	cpsid	i
}
 80033da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033dc:	e7fe      	b.n	80033dc <Error_Handler+0x8>

080033de <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fecf 	bl	800218e <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10c      	bne.n	8003426 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003412:	4293      	cmp	r3, r2
 8003414:	d107      	bne.n	8003426 <_Z41__static_initialization_and_destruction_0ii+0x2a>
UART gps(&huart1), ble(&huart2);
 8003416:	490d      	ldr	r1, [pc, #52]	; (800344c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800341a:	f7fe f857 	bl	80014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>
 800341e:	490d      	ldr	r1, [pc, #52]	; (8003454 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003422:	f7fe f853 	bl	80014cc <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003432:	4293      	cmp	r3, r2
 8003434:	d105      	bne.n	8003442 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8003436:	4808      	ldr	r0, [pc, #32]	; (8003458 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003438:	f7fe f866 	bl	8001508 <_ZN4UARTD1Ev>
 800343c:	4804      	ldr	r0, [pc, #16]	; (8003450 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800343e:	f7fe f863 	bl	8001508 <_ZN4UARTD1Ev>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000060c 	.word	0x2000060c
 8003450:	20000694 	.word	0x20000694
 8003454:	20000650 	.word	0x20000650
 8003458:	200006c4 	.word	0x200006c4

0800345c <_GLOBAL__sub_I_usbBuffer>:
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
 8003460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003464:	2001      	movs	r0, #1
 8003466:	f7ff ffc9 	bl	80033fc <_Z41__static_initialization_and_destruction_0ii>
 800346a:	bd80      	pop	{r7, pc}

0800346c <_GLOBAL__sub_D_usbBuffer>:
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
 8003470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003474:	2000      	movs	r0, #0
 8003476:	f7ff ffc1 	bl	80033fc <_Z41__static_initialization_and_destruction_0ii>
 800347a:	bd80      	pop	{r7, pc}

0800347c <_Z12MPU6050_InitP17I2C_HandleTypeDef>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af04      	add	r7, sp, #16
 8003482:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	2301      	movs	r3, #1
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	f107 030f 	add.w	r3, r7, #15
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2301      	movs	r3, #1
 8003496:	2275      	movs	r2, #117	; 0x75
 8003498:	21d0      	movs	r1, #208	; 0xd0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f002 fbbc 	bl	8005c18 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b68      	cmp	r3, #104	; 0x68
 80034a4:	d161      	bne.n	800356a <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xee>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80034aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	2301      	movs	r3, #1
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	f107 030e 	add.w	r3, r7, #14
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2301      	movs	r3, #1
 80034bc:	226b      	movs	r2, #107	; 0x6b
 80034be:	21d0      	movs	r1, #208	; 0xd0
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f002 faaf 	bl	8005a24 <HAL_I2C_Mem_Write>

        // Disable LPF
        Data = 0x00;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG_REG,1, &Data, 1, i2c_timeout);
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	9302      	str	r3, [sp, #8]
 80034d0:	2301      	movs	r3, #1
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	f107 030e 	add.w	r3, r7, #14
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2301      	movs	r3, #1
 80034dc:	221a      	movs	r2, #26
 80034de:	21d0      	movs	r1, #208	; 0xd0
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f002 fa9f 	bl	8005a24 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80034e6:	2307      	movs	r3, #7
 80034e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80034ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	2301      	movs	r3, #1
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	f107 030e 	add.w	r3, r7, #14
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2301      	movs	r3, #1
 80034fc:	2219      	movs	r2, #25
 80034fe:	21d0      	movs	r1, #208	; 0xd0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f002 fa8f 	bl	8005a24 <HAL_I2C_Mem_Write>

        // Disable FIFO buffer
        Data = 0x00;
 8003506:	2300      	movs	r3, #0
 8003508:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, i2c_timeout);
 800350a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2301      	movs	r3, #1
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f107 030e 	add.w	r3, r7, #14
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2301      	movs	r3, #1
 800351c:	2223      	movs	r2, #35	; 0x23
 800351e:	21d0      	movs	r1, #208	; 0xd0
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f002 fa7f 	bl	8005a24 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800352a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	2301      	movs	r3, #1
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	f107 030e 	add.w	r3, r7, #14
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	221c      	movs	r2, #28
 800353e:	21d0      	movs	r1, #208	; 0xd0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f002 fa6f 	bl	8005a24 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8003546:	2300      	movs	r3, #0
 8003548:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800354a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	2301      	movs	r3, #1
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	f107 030e 	add.w	r3, r7, #14
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2301      	movs	r3, #1
 800355c:	221b      	movs	r2, #27
 800355e:	21d0      	movs	r1, #208	; 0xd0
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f002 fa5f 	bl	8005a24 <HAL_I2C_Mem_Write>
        return 0;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xf0>
    }
    return 1;
 800356a:	2301      	movs	r3, #1
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fc ff59 	bl	8000434 <__aeabi_i2d>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f00e fd33 	bl	8011ff4 <sqrt>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fc ff43 	bl	8000434 <__aeabi_i2d>
 80035ae:	4604      	mov	r4, r0
 80035b0:	460d      	mov	r5, r1
 80035b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ff3c 	bl	8000434 <__aeabi_i2d>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	f00e fcdd 	bl	8011f82 <atan2>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
    }
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035d8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80035d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035dc:	b094      	sub	sp, #80	; 0x50
 80035de:	af04      	add	r7, sp, #16
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80035e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	230e      	movs	r3, #14
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	223b      	movs	r2, #59	; 0x3b
 80035f8:	21d0      	movs	r1, #208	; 0xd0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f002 fb0c 	bl	8005c18 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003600:	7a3b      	ldrb	r3, [r7, #8]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	b21a      	sxth	r2, r3
 8003606:	7a7b      	ldrb	r3, [r7, #9]
 8003608:	b21b      	sxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b21a      	sxth	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003612:	7abb      	ldrb	r3, [r7, #10]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	b21a      	sxth	r2, r3
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	b21b      	sxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b21a      	sxth	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003624:	7b3b      	ldrb	r3, [r7, #12]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	b21b      	sxth	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	b21a      	sxth	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003636:	7bbb      	ldrb	r3, [r7, #14]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	b21a      	sxth	r2, r3
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003644:	7c3b      	ldrb	r3, [r7, #16]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	b21a      	sxth	r2, r3
 800364a:	7c7b      	ldrb	r3, [r7, #17]
 800364c:	b21b      	sxth	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b21a      	sxth	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003656:	7cbb      	ldrb	r3, [r7, #18]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	b21a      	sxth	r2, r3
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	b21b      	sxth	r3, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	b21a      	sxth	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003668:	7d3b      	ldrb	r3, [r7, #20]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	b21a      	sxth	r2, r3
 800366e:	7d7b      	ldrb	r3, [r7, #21]
 8003670:	b21b      	sxth	r3, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	b21a      	sxth	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0 * 9.8;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fed7 	bl	8000434 <__aeabi_i2d>
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x328>)
 800368c:	f7fd f866 	bl	800075c <__aeabi_ddiv>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	a391      	add	r3, pc, #580	; (adr r3, 80038e0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x308>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fc ff33 	bl	8000508 <__aeabi_dmul>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0 * 9.8;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc febe 	bl	8000434 <__aeabi_i2d>
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	4b90      	ldr	r3, [pc, #576]	; (8003900 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x328>)
 80036be:	f7fd f84d 	bl	800075c <__aeabi_ddiv>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	a385      	add	r3, pc, #532	; (adr r3, 80038e0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x308>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc ff1a 	bl	8000508 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector * 9.8;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fea5 	bl	8000434 <__aeabi_i2d>
 80036ea:	a37f      	add	r3, pc, #508	; (adr r3, 80038e8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x310>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fd f834 	bl	800075c <__aeabi_ddiv>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	a378      	add	r3, pc, #480	; (adr r3, 80038e0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x308>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fc ff01 	bl	8000508 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	6839      	ldr	r1, [r7, #0]
 800370c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003710:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd faf9 	bl	8000d0c <__aeabi_i2f>
 800371a:	4603      	mov	r3, r0
 800371c:	4979      	ldr	r1, [pc, #484]	; (8003904 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x32c>)
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fbfc 	bl	8000f1c <__aeabi_fdiv>
 8003724:	4603      	mov	r3, r0
 8003726:	4978      	ldr	r1, [pc, #480]	; (8003908 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x330>)
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd fa3b 	bl	8000ba4 <__addsf3>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fc fe79 	bl	8000434 <__aeabi_i2d>
 8003742:	a36b      	add	r3, pc, #428	; (adr r3, 80038f0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x318>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f7fd f808 	bl	800075c <__aeabi_ddiv>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fe69 	bl	8000434 <__aeabi_i2d>
 8003762:	a363      	add	r3, pc, #396	; (adr r3, 80038f0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x318>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc fff8 	bl	800075c <__aeabi_ddiv>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fe59 	bl	8000434 <__aeabi_i2d>
 8003782:	a35b      	add	r3, pc, #364	; (adr r3, 80038f0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x318>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc ffe8 	bl	800075c <__aeabi_ddiv>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003796:	f000 ff01 	bl	800459c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	4b5b      	ldr	r3, [pc, #364]	; (800390c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x334>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe36 	bl	8000414 <__aeabi_ui2d>
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b58      	ldr	r3, [pc, #352]	; (8003910 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x338>)
 80037ae:	f7fc ffd5 	bl	800075c <__aeabi_ddiv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80037ba:	f000 feef 	bl	800459c <HAL_GetTick>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a52      	ldr	r2, [pc, #328]	; (800390c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x334>)
 80037c2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ca:	461a      	mov	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d2:	fb03 f202 	mul.w	r2, r3, r2
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037dc:	4619      	mov	r1, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e4:	fb03 f301 	mul.w	r3, r3, r1
    double roll_sqrt = sqrt(
 80037e8:	4413      	add	r3, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fec2 	bl	8003574 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80037f0:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003800:	f7fd f8ea 	bl	80009d8 <__aeabi_dcmpeq>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d119      	bne.n	800383e <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x266>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fe0f 	bl	8000434 <__aeabi_i2d>
 8003816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381a:	f7fc ff9f 	bl	800075c <__aeabi_ddiv>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f00e fa1f 	bl	8011c68 <atan>
 800382a:	a333      	add	r3, pc, #204	; (adr r3, 80038f8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x320>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc fe6a 	bl	8000508 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800383c:	e005      	b.n	800384a <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x272>
    }
    else
    {
        roll = 0.0;
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003850:	425a      	negs	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7ff fe9e 	bl	800359c <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003860:	a325      	add	r3, pc, #148	; (adr r3, 80038f8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x320>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fe4f 	bl	8000508 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x33c>)
 8003878:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800387c:	f7fd f8b6 	bl	80009ec <__aeabi_dcmplt>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2c4>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x340>)
 8003892:	f7fd f8c9 	bl	8000a28 <__aeabi_dcmpgt>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2ee>
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x340>)
 80038a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038a6:	f7fd f8bf 	bl	8000a28 <__aeabi_dcmpgt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d037      	beq.n	8003920 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x348>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	4b16      	ldr	r3, [pc, #88]	; (8003914 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x33c>)
 80038bc:	f7fd f896 	bl	80009ec <__aeabi_dcmplt>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02c      	beq.n	8003920 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x348>
    {
        KalmanY.angle = pitch;
 80038c6:	4915      	ldr	r1, [pc, #84]	; (800391c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x344>)
 80038c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80038da:	e034      	b.n	8003946 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x36e>
 80038dc:	f3af 8000 	nop.w
 80038e0:	9999999a 	.word	0x9999999a
 80038e4:	40239999 	.word	0x40239999
 80038e8:	00000000 	.word	0x00000000
 80038ec:	40cc2900 	.word	0x40cc2900
 80038f0:	00000000 	.word	0x00000000
 80038f4:	40606000 	.word	0x40606000
 80038f8:	1a63c1f8 	.word	0x1a63c1f8
 80038fc:	404ca5dc 	.word	0x404ca5dc
 8003900:	40d00000 	.word	0x40d00000
 8003904:	43aa0000 	.word	0x43aa0000
 8003908:	42121eb8 	.word	0x42121eb8
 800390c:	20000758 	.word	0x20000758
 8003910:	408f4000 	.word	0x408f4000
 8003914:	c0568000 	.word	0xc0568000
 8003918:	40568000 	.word	0x40568000
 800391c:	20000050 	.word	0x20000050
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003926:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800392a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800392e:	e9cd 2300 	strd	r2, r3, [sp]
 8003932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003936:	481c      	ldr	r0, [pc, #112]	; (80039a8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x3d0>)
 8003938:	f000 f83c 	bl	80039b4 <_Z15Kalman_getAngleP8Kalman_tddd>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800394c:	4690      	mov	r8, r2
 800394e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x3d4>)
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fd f864 	bl	8000a28 <__aeabi_dcmpgt>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x3a0>
        DataStruct->Gx = -DataStruct->Gx;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800396c:	4614      	mov	r4, r2
 800396e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800397e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003986:	e9cd 2300 	strd	r2, r3, [sp]
 800398a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800398e:	4808      	ldr	r0, [pc, #32]	; (80039b0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x3d8>)
 8003990:	f000 f810 	bl	80039b4 <_Z15Kalman_getAngleP8Kalman_tddd>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800399e:	bf00      	nop
 80039a0:	3740      	adds	r7, #64	; 0x40
 80039a2:	46bd      	mov	sp, r7
 80039a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039a8:	20000050 	.word	0x20000050
 80039ac:	40568000 	.word	0x40568000
 80039b0:	20000008 	.word	0x20000008

080039b4 <_Z15Kalman_getAngleP8Kalman_tddd>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b092      	sub	sp, #72	; 0x48
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039ca:	f7fc fbe5 	bl	8000198 <__aeabi_dsub>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80039dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039e4:	f7fc fd90 	bl	8000508 <__aeabi_dmul>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fbd4 	bl	800019c <__adddf3>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a0e:	f7fc fd7b 	bl	8000508 <__aeabi_dmul>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003a20:	f7fc fbba 	bl	8000198 <__aeabi_dsub>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a32:	f7fc fbb1 	bl	8000198 <__aeabi_dsub>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fbaa 	bl	800019c <__adddf3>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a54:	f7fc fd58 	bl	8000508 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7fc fb9c 	bl	800019c <__adddf3>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a7e:	f7fc fd43 	bl	8000508 <__aeabi_dmul>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4620      	mov	r0, r4
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7fc fb85 	bl	8000198 <__aeabi_dsub>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003aa4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003aa8:	f7fc fd2e 	bl	8000508 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc fb70 	bl	8000198 <__aeabi_dsub>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ace:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ad2:	f7fc fd19 	bl	8000508 <__aeabi_dmul>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	f7fc fb5d 	bl	800019c <__adddf3>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003af8:	f7fc fb50 	bl	800019c <__adddf3>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0e:	f7fc fe25 	bl	800075c <__aeabi_ddiv>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b24:	f7fc fe1a 	bl	800075c <__aeabi_ddiv>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b3a:	f7fc fb2d 	bl	8000198 <__aeabi_dsub>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b54:	f7fc fcd8 	bl	8000508 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fb1c 	bl	800019c <__adddf3>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003b74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b7c:	f7fc fcc4 	bl	8000508 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fb08 	bl	800019c <__adddf3>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003b9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ba6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003bb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb8:	f7fc fca6 	bl	8000508 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fae8 	bl	8000198 <__aeabi_dsub>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be0:	f7fc fc92 	bl	8000508 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4620      	mov	r0, r4
 8003bea:	4629      	mov	r1, r5
 8003bec:	f7fc fad4 	bl	8000198 <__aeabi_dsub>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003c00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c08:	f7fc fc7e 	bl	8000508 <__aeabi_dmul>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc fac0 	bl	8000198 <__aeabi_dsub>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003c28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c30:	f7fc fc6a 	bl	8000508 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4620      	mov	r0, r4
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	f7fc faac 	bl	8000198 <__aeabi_dsub>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	3748      	adds	r7, #72	; 0x48
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c6c:	6253      	str	r3, [r2, #36]	; 0x24
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6213      	str	r3, [r2, #32]
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <HAL_MspInit+0x58>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6253      	str	r3, [r2, #36]	; 0x24
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_MspInit+0x58>)
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a35      	ldr	r2, [pc, #212]	; (8003dac <HAL_ADC_MspInit+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d163      	bne.n	8003da2 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cda:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a2e      	ldr	r2, [pc, #184]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	61d3      	str	r3, [r2, #28]
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_ADC_MspInit+0xf8>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8003d22:	2310      	movs	r3, #16
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d26:	2303      	movs	r3, #3
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	481f      	ldr	r0, [pc, #124]	; (8003db4 <HAL_ADC_MspInit+0xfc>)
 8003d36:	f001 fb69 	bl	800540c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	481a      	ldr	r0, [pc, #104]	; (8003db8 <HAL_ADC_MspInit+0x100>)
 8003d4e:	f001 fb5d 	bl	800540c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <HAL_ADC_MspInit+0x108>)
 8003d56:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d66:	2280      	movs	r2, #128	; 0x80
 8003d68:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d70:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003d86:	480d      	ldr	r0, [pc, #52]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d88:	f001 f92c 	bl	8004fe4 <HAL_DMA_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8003d92:	f7ff fb1f 	bl	80033d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_ADC_MspInit+0x104>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003da2:	bf00      	nop
 8003da4:	3728      	adds	r7, #40	; 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40012400 	.word	0x40012400
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020000 	.word	0x40020000
 8003db8:	40020400 	.word	0x40020400
 8003dbc:	2000049c 	.word	0x2000049c
 8003dc0:	40026008 	.word	0x40026008

08003dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_I2C_MspInit+0x7c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d127      	bne.n	8003e36 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	61d3      	str	r3, [r2, #28]
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dfe:	23c0      	movs	r3, #192	; 0xc0
 8003e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e02:	2312      	movs	r3, #18
 8003e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	480b      	ldr	r0, [pc, #44]	; (8003e48 <HAL_I2C_MspInit+0x84>)
 8003e1a:	f001 faf7 	bl	800540c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e28:	6253      	str	r3, [r2, #36]	; 0x24
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_I2C_MspInit+0x80>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e36:	bf00      	nop
 8003e38:	3728      	adds	r7, #40	; 0x28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40005400 	.word	0x40005400
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020400 	.word	0x40020400

08003e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_SPI_MspInit+0x7c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d127      	bne.n	8003ebe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e78:	6213      	str	r3, [r2, #32]
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	61d3      	str	r3, [r2, #28]
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_SPI_MspInit+0x80>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e9e:	23e0      	movs	r3, #224	; 0xe0
 8003ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <HAL_SPI_MspInit+0x84>)
 8003eba:	f001 faa7 	bl	800540c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ebe:	bf00      	nop
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40013000 	.word	0x40013000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIM_Base_MspInit+0x78>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d114      	bne.n	8003f10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	6253      	str	r3, [r2, #36]	; 0x24
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	202b      	movs	r0, #43	; 0x2b
 8003f04:	f001 f843 	bl	8004f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003f08:	202b      	movs	r0, #43	; 0x2b
 8003f0a:	f001 f85c 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003f0e:	e018      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_TIM_Base_MspInit+0x80>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d113      	bne.n	8003f42 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003f20:	f043 0320 	orr.w	r3, r3, #32
 8003f24:	6253      	str	r3, [r2, #36]	; 0x24
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_TIM_Base_MspInit+0x7c>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	202c      	movs	r0, #44	; 0x2c
 8003f38:	f001 f829 	bl	8004f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f3c:	202c      	movs	r0, #44	; 0x2c
 8003f3e:	f001 f842 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40001000 	.word	0x40001000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40001400 	.word	0x40001400

08003f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	f107 031c 	add.w	r3, r7, #28
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a36      	ldr	r2, [pc, #216]	; (8004050 <HAL_UART_MspInit+0xf8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d131      	bne.n	8003fde <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f84:	6213      	str	r3, [r2, #32]
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	61d3      	str	r3, [r2, #28]
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003faa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc0:	f107 031c 	add.w	r3, r7, #28
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4824      	ldr	r0, [pc, #144]	; (8004058 <HAL_UART_MspInit+0x100>)
 8003fc8:	f001 fa20 	bl	800540c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2025      	movs	r0, #37	; 0x25
 8003fd2:	f000 ffdc 	bl	8004f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fd6:	2025      	movs	r0, #37	; 0x25
 8003fd8:	f000 fff5 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fdc:	e034      	b.n	8004048 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_UART_MspInit+0x104>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d12f      	bne.n	8004048 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff2:	6253      	str	r3, [r2, #36]	; 0x24
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <HAL_UART_MspInit+0xfc>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	61d3      	str	r3, [r2, #28]
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_UART_MspInit+0xfc>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004018:	230c      	movs	r3, #12
 800401a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2303      	movs	r3, #3
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004028:	2307      	movs	r3, #7
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402c:	f107 031c 	add.w	r3, r7, #28
 8004030:	4619      	mov	r1, r3
 8004032:	4809      	ldr	r0, [pc, #36]	; (8004058 <HAL_UART_MspInit+0x100>)
 8004034:	f001 f9ea 	bl	800540c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004038:	2200      	movs	r2, #0
 800403a:	2100      	movs	r1, #0
 800403c:	2026      	movs	r0, #38	; 0x26
 800403e:	f000 ffa6 	bl	8004f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004042:	2026      	movs	r0, #38	; 0x26
 8004044:	f000 ffbf 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 8004048:	bf00      	nop
 800404a:	3730      	adds	r7, #48	; 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40013800 	.word	0x40013800
 8004054:	40023800 	.word	0x40023800
 8004058:	40020000 	.word	0x40020000
 800405c:	40004400 	.word	0x40004400

08004060 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 8004070:	2200      	movs	r2, #0
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	201b      	movs	r0, #27
 8004076:	f000 ff8a 	bl	8004f8e <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 800407a:	201b      	movs	r0, #27
 800407c:	f000 ffa3 	bl	8004fc6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_InitTick+0x9c>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_InitTick+0x9c>)
 8004086:	f043 0310 	orr.w	r3, r3, #16
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_InitTick+0x9c>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004098:	f107 0210 	add.w	r2, r7, #16
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f004 fca0 	bl	80089e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040a8:	f004 fc8a 	bl	80089c0 <HAL_RCC_GetPCLK2Freq>
 80040ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	4a13      	ldr	r2, [pc, #76]	; (8004100 <HAL_InitTick+0xa0>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0c9b      	lsrs	r3, r3, #18
 80040b8:	3b01      	subs	r3, #1
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_InitTick+0xa4>)
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_InitTick+0xa8>)
 80040c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_InitTick+0xa4>)
 80040c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040c8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80040ca:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_InitTick+0xa4>)
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_InitTick+0xa4>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_InitTick+0xa4>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80040dc:	4809      	ldr	r0, [pc, #36]	; (8004104 <HAL_InitTick+0xa4>)
 80040de:	f004 fffb 	bl	80090d8 <HAL_TIM_Base_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80040e8:	4806      	ldr	r0, [pc, #24]	; (8004104 <HAL_InitTick+0xa4>)
 80040ea:	f005 f835 	bl	8009158 <HAL_TIM_Base_Start_IT>
 80040ee:	4603      	mov	r3, r0
 80040f0:	e000      	b.n	80040f4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	431bde83 	.word	0x431bde83
 8004104:	200009d0 	.word	0x200009d0
 8004108:	40011000 	.word	0x40011000

0800410c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <NMI_Handler+0x4>

08004112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004116:	e7fe      	b.n	8004116 <HardFault_Handler+0x4>

08004118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800411c:	e7fe      	b.n	800411c <MemManage_Handler+0x4>

0800411e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004122:	e7fe      	b.n	8004122 <BusFault_Handler+0x4>

08004124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004128:	e7fe      	b.n	8004128 <UsageFault_Handler+0x4>

0800412a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
	...

0800415c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <DMA1_Channel1_IRQHandler+0x10>)
 8004162:	f001 f875 	bl	8005250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	2000049c 	.word	0x2000049c

08004170 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <USB_LP_IRQHandler+0x10>)
 8004176:	f002 fbd3 	bl	8006920 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001b00 	.word	0x20001b00

08004184 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <TIM11_IRQHandler+0x10>)
 800418a:	f005 f837 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200009d0 	.word	0x200009d0

08004198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <USART1_IRQHandler+0x10>)
 800419e:	f005 fb67 	bl	8009870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000060c 	.word	0x2000060c

080041ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <USART2_IRQHandler+0x10>)
 80041b2:	f005 fb5d 	bl	8009870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000650 	.word	0x20000650

080041c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <TIM6_IRQHandler+0x10>)
 80041c6:	f005 f819 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000058c 	.word	0x2000058c

080041d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <TIM7_IRQHandler+0x10>)
 80041da:	f005 f80f 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200005cc 	.word	0x200005cc

080041e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	return 1;
 80041ec:	2301      	movs	r3, #1
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <_kill>:

int _kill(int pid, int sig)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004200:	f00e f9c6 	bl	8012590 <__errno>
 8004204:	4603      	mov	r3, r0
 8004206:	2216      	movs	r2, #22
 8004208:	601a      	str	r2, [r3, #0]
	return -1;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <_exit>:

void _exit (int status)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800421e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ffe7 	bl	80041f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004228:	e7fe      	b.n	8004228 <_exit+0x12>

0800422a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e00a      	b.n	8004252 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800423c:	f3af 8000 	nop.w
 8004240:	4601      	mov	r1, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	60ba      	str	r2, [r7, #8]
 8004248:	b2ca      	uxtb	r2, r1
 800424a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3301      	adds	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	dbf0      	blt.n	800423c <_read+0x12>
	}

return len;
 800425a:	687b      	ldr	r3, [r7, #4]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e009      	b.n	800428a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	60ba      	str	r2, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3301      	adds	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	dbf1      	blt.n	8004276 <_write+0x12>
	}
	return len;
 8004292:	687b      	ldr	r3, [r7, #4]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_close>:

int _close(int file)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	return -1;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042c2:	605a      	str	r2, [r3, #4]
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <_isatty>:

int _isatty(int file)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	return 1;
 80042d8:	2301      	movs	r3, #1
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	return 0;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <_sbrk+0x5c>)
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <_sbrk+0x60>)
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004310:	4b13      	ldr	r3, [pc, #76]	; (8004360 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <_sbrk+0x64>)
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <_sbrk+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <_sbrk+0x64>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d207      	bcs.n	800433c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800432c:	f00e f930 	bl	8012590 <__errno>
 8004330:	4603      	mov	r3, r0
 8004332:	220c      	movs	r2, #12
 8004334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800433a:	e009      	b.n	8004350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <_sbrk+0x64>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <_sbrk+0x64>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	4a05      	ldr	r2, [pc, #20]	; (8004360 <_sbrk+0x64>)
 800434c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20004000 	.word	0x20004000
 800435c:	00000400 	.word	0x00000400
 8004360:	2000075c 	.word	0x2000075c
 8004364:	20001df0 	.word	0x20001df0

08004368 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004374:	480c      	ldr	r0, [pc, #48]	; (80043a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004376:	490d      	ldr	r1, [pc, #52]	; (80043ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800437c:	e002      	b.n	8004384 <LoopCopyDataInit>

0800437e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004382:	3304      	adds	r3, #4

08004384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004388:	d3f9      	bcc.n	800437e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800438c:	4c0a      	ldr	r4, [pc, #40]	; (80043b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004390:	e001      	b.n	8004396 <LoopFillZerobss>

08004392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004394:	3204      	adds	r2, #4

08004396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004398:	d3fb      	bcc.n	8004392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800439a:	f7ff ffe5 	bl	8004368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800439e:	f00e f8fd 	bl	801259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043a2:	f7fe f83d 	bl	8002420 <main>
  bx lr
 80043a6:	4770      	bx	lr
  ldr r0, =_sdata
 80043a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ac:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 80043b0:	0801805c 	.word	0x0801805c
  ldr r2, =_sbss
 80043b4:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80043b8:	20001df0 	.word	0x20001df0

080043bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043bc:	e7fe      	b.n	80043bc <ADC1_IRQHandler>

080043be <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80043cc:	b672      	cpsid	i
}
 80043ce:	bf00      	nop
 80043d0:	f7ff f800 	bl	80033d4 <Error_Handler>
 80043d4:	e7fe      	b.n	80043d4 <stm32_lock_init+0x16>
  lock->flag = 0;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80043f8:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004402:	b672      	cpsid	i
}
 8004404:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004406:	f3bf 8f4f 	dsb	sy
}
 800440a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800440c:	f3bf 8f6f 	isb	sy
}
 8004410:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
}
 800441a:	bf00      	nop
 800441c:	f7fe ffda 	bl	80033d4 <Error_Handler>
 8004420:	e7fe      	b.n	8004420 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e008      	b.n	8004444 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2bff      	cmp	r3, #255	; 0xff
 8004438:	d104      	bne.n	8004444 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800443a:	b672      	cpsid	i
}
 800443c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800443e:	f7fe ffc9 	bl	80033d4 <Error_Handler>
 8004442:	e7fe      	b.n	8004442 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	3301      	adds	r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	705a      	strb	r2, [r3, #1]
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004466:	b672      	cpsid	i
}
 8004468:	bf00      	nop
 800446a:	f7fe ffb3 	bl	80033d4 <Error_Handler>
 800446e:	e7fe      	b.n	800446e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004478:	b672      	cpsid	i
}
 800447a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800447c:	f7fe ffaa 	bl	80033d4 <Error_Handler>
 8004480:	e7fe      	b.n	8004480 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	3b01      	subs	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <stm32_lock_release+0x4a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800449e:	b662      	cpsie	i
}
 80044a0:	bf00      	nop
  {
    __enable_irq();
  }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80044b8:	f00e f86a 	bl	8012590 <__errno>
 80044bc:	4603      	mov	r3, r0
 80044be:	2216      	movs	r2, #22
 80044c0:	601a      	str	r2, [r3, #0]
    return;
 80044c2:	e015      	b.n	80044f0 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80044c4:	2002      	movs	r0, #2
 80044c6:	f00e f88d 	bl	80125e4 <malloc>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ff6d 	bl	80043be <stm32_lock_init>
    return;
 80044e4:	e004      	b.n	80044f0 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80044e6:	b672      	cpsid	i
}
 80044e8:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80044ea:	f7fe ff73 	bl	80033d4 <Error_Handler>
 80044ee:	e7fe      	b.n	80044ee <__retarget_lock_init_recursive+0x44>
}
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004504:	b672      	cpsid	i
}
 8004506:	bf00      	nop
 8004508:	f7fe ff64 	bl	80033d4 <Error_Handler>
 800450c:	e7fe      	b.n	800450c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff6a 	bl	80043ea <stm32_lock_acquire>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800452c:	b672      	cpsid	i
}
 800452e:	bf00      	nop
 8004530:	f7fe ff50 	bl	80033d4 <Error_Handler>
 8004534:	e7fe      	b.n	8004534 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff8d 	bl	8004458 <stm32_lock_release>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004550:	2003      	movs	r0, #3
 8004552:	f000 fd11 	bl	8004f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004556:	200f      	movs	r0, #15
 8004558:	f7ff fd82 	bl	8004060 <HAL_InitTick>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	71fb      	strb	r3, [r7, #7]
 8004566:	e001      	b.n	800456c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004568:	f7ff fb78 	bl	8003c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800456c:	79fb      	ldrb	r3, [r7, #7]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_IncTick+0x1c>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_IncTick+0x20>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4413      	add	r3, r2
 8004586:	4a03      	ldr	r2, [pc, #12]	; (8004594 <HAL_IncTick+0x1c>)
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000a10 	.word	0x20000a10
 8004598:	200000a0 	.word	0x200000a0

0800459c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return uwTick;
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <HAL_GetTick+0x10>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	20000a10 	.word	0x20000a10

080045b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b8:	f7ff fff0 	bl	800459c <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c8:	d004      	beq.n	80045d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_Delay+0x40>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045d4:	bf00      	nop
 80045d6:	f7ff ffe1 	bl	800459c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d8f7      	bhi.n	80045d6 <HAL_Delay+0x26>
  {
  }
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200000a0 	.word	0x200000a0

080045f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e127      	b.n	8004864 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d115      	bne.n	800464e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004630:	4b8e      	ldr	r3, [pc, #568]	; (800486c <HAL_ADC_Init+0x278>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4a8d      	ldr	r2, [pc, #564]	; (800486c <HAL_ADC_Init+0x278>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6213      	str	r3, [r2, #32]
 800463c:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_ADC_Init+0x278>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fb35 	bl	8003cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 80ff 	bne.w	800485a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004660:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004670:	4b7f      	ldr	r3, [pc, #508]	; (8004870 <HAL_ADC_Init+0x27c>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	497c      	ldr	r1, [pc, #496]	; (8004870 <HAL_ADC_Init+0x27c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800468a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004692:	4619      	mov	r1, r3
 8004694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004698:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80046ae:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80046b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	2302      	movs	r3, #2
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80046d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80046d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046da:	4313      	orrs	r3, r2
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d007      	beq.n	80046f6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80046ee:	4313      	orrs	r3, r2
 80046f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f2:	4313      	orrs	r3, r2
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d04f      	beq.n	80047a4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470a:	4313      	orrs	r3, r2
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004716:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6912      	ldr	r2, [r2, #16]
 800471c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004720:	d003      	beq.n	800472a <HAL_ADC_Init+0x136>
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6912      	ldr	r2, [r2, #16]
 8004726:	2a01      	cmp	r2, #1
 8004728:	d102      	bne.n	8004730 <HAL_ADC_Init+0x13c>
 800472a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800472e:	e000      	b.n	8004732 <HAL_ADC_Init+0x13e>
 8004730:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004732:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	4313      	orrs	r3, r2
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d125      	bne.n	8004790 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d114      	bne.n	8004778 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	3b01      	subs	r3, #1
 8004754:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	fa92 f2a2 	rbit	r2, r2
 8004760:	617a      	str	r2, [r7, #20]
  return result;
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	4093      	lsls	r3, r2
 800476c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004772:	4313      	orrs	r3, r2
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
 8004776:	e00b      	b.n	8004790 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	f043 0201 	orr.w	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_ADC_Init+0x280>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_ADC_Init+0x284>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c0:	d003      	beq.n	80047ca <HAL_ADC_Init+0x1d6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d119      	bne.n	80047fe <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80047de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	fa92 f2a2 	rbit	r2, r2
 80047e6:	60fa      	str	r2, [r7, #12]
  return result;
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	fab2 f282 	clz	r2, r2
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	fa03 f202 	lsl.w	r2, r3, r2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
 80047fc:	e007      	b.n	800480e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_ADC_Init+0x288>)
 8004816:	4013      	ands	r3, r2
 8004818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481a:	429a      	cmp	r2, r3
 800481c:	d10b      	bne.n	8004836 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	64da      	str	r2, [r3, #76]	; 0x4c
 8004834:	e014      	b.n	8004860 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	f023 0312 	bic.w	r3, r3, #18
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004858:	e002      	b.n	8004860 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004864:	4618      	mov	r0, r3
 8004866:	3738      	adds	r7, #56	; 0x38
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	40012700 	.word	0x40012700
 8004874:	fcfc16ff 	.word	0xfcfc16ff
 8004878:	c0fff18d 	.word	0xc0fff18d
 800487c:	bf80fffe 	.word	0xbf80fffe

08004880 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_ADC_Start_DMA+0x1e>
 800489a:	2302      	movs	r3, #2
 800489c:	e074      	b.n	8004988 <HAL_ADC_Start_DMA+0x108>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f9e4 	bl	8004c74 <ADC_Enable>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d167      	bne.n	8004986 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d106      	bne.n	8004904 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fa:	f023 0206 	bic.w	r2, r3, #6
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	651a      	str	r2, [r3, #80]	; 0x50
 8004902:	e002      	b.n	800490a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <HAL_ADC_Start_DMA+0x110>)
 8004918:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_ADC_Start_DMA+0x114>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_ADC_Start_DMA+0x118>)
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004932:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004942:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004952:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3358      	adds	r3, #88	; 0x58
 800495e:	4619      	mov	r1, r3
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f000 fb96 	bl	8005094 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004984:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08004d2d 	.word	0x08004d2d
 8004994:	08004dd5 	.word	0x08004dd5
 8004998:	08004df1 	.word	0x08004df1

0800499c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x20>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e134      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x28a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b06      	cmp	r3, #6
 8004a02:	d81c      	bhi.n	8004a3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	3b05      	subs	r3, #5
 8004a16:	221f      	movs	r2, #31
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	4019      	ands	r1, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3b05      	subs	r3, #5
 8004a30:	fa00 f203 	lsl.w	r2, r0, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3c:	e07e      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d81c      	bhi.n	8004a80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	3b23      	subs	r3, #35	; 0x23
 8004a58:	221f      	movs	r2, #31
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	4019      	ands	r1, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b23      	subs	r3, #35	; 0x23
 8004a72:	fa00 f203 	lsl.w	r2, r0, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a7e:	e05d      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b12      	cmp	r3, #18
 8004a86:	d81c      	bhi.n	8004ac2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	3b41      	subs	r3, #65	; 0x41
 8004a9a:	221f      	movs	r2, #31
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	4019      	ands	r1, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b41      	subs	r3, #65	; 0x41
 8004ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
 8004ac0:	e03c      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b18      	cmp	r3, #24
 8004ac8:	d81c      	bhi.n	8004b04 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	3b5f      	subs	r3, #95	; 0x5f
 8004adc:	221f      	movs	r2, #31
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	4019      	ands	r1, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	3b5f      	subs	r3, #95	; 0x5f
 8004af6:	fa00 f203 	lsl.w	r2, r0, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	e01b      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	3b7d      	subs	r3, #125	; 0x7d
 8004b16:	221f      	movs	r2, #31
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	4019      	ands	r1, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b7d      	subs	r3, #125	; 0x7d
 8004b30:	fa00 f203 	lsl.w	r2, r0, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d81a      	bhi.n	8004b7a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6959      	ldr	r1, [r3, #20]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	2207      	movs	r2, #7
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	4019      	ands	r1, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6898      	ldr	r0, [r3, #8]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	615a      	str	r2, [r3, #20]
 8004b78:	e042      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b13      	cmp	r3, #19
 8004b80:	d81c      	bhi.n	8004bbc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6919      	ldr	r1, [r3, #16]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	3b1e      	subs	r3, #30
 8004b94:	2207      	movs	r2, #7
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	4019      	ands	r1, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6898      	ldr	r0, [r3, #8]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	3b1e      	subs	r3, #30
 8004bae:	fa00 f203 	lsl.w	r2, r0, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	611a      	str	r2, [r3, #16]
 8004bba:	e021      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b1a      	cmp	r3, #26
 8004bc2:	d81c      	bhi.n	8004bfe <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3b3c      	subs	r3, #60	; 0x3c
 8004bd6:	2207      	movs	r2, #7
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	4019      	ands	r1, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6898      	ldr	r0, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4413      	add	r3, r2
 8004bee:	3b3c      	subs	r3, #60	; 0x3c
 8004bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	e000      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8004bfe:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d003      	beq.n	8004c10 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c0c:	2b11      	cmp	r3, #17
 8004c0e:	d121      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_ADC_ConfigChannel+0x294>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11b      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_ADC_ConfigChannel+0x294>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <HAL_ADC_ConfigChannel+0x294>)
 8004c22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c26:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d111      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_ADC_ConfigChannel+0x298>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <HAL_ADC_ConfigChannel+0x29c>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	0c9a      	lsrs	r2, r3, #18
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004c46:	e002      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f9      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	40012700 	.word	0x40012700
 8004c6c:	20000098 	.word	0x20000098
 8004c70:	431bde83 	.word	0x431bde83

08004c74 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d043      	beq.n	8004d1a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004ca2:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <ADC_Enable+0xb0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <ADC_Enable+0xb4>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	0c9a      	lsrs	r2, r3, #18
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8004cb6:	e002      	b.n	8004cbe <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f9      	bne.n	8004cb8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8004cc4:	f7ff fc6a 	bl	800459c <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004cca:	e01f      	b.n	8004d0c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8004ccc:	f7ff fc66 	bl	800459c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d918      	bls.n	8004d0c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d011      	beq.n	8004d0c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	f043 0210 	orr.w	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e007      	b.n	8004d1c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d1d8      	bne.n	8004ccc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000098 	.word	0x20000098
 8004d28:	431bde83 	.word	0x431bde83

08004d2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d13d      	bne.n	8004dc2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d12c      	bne.n	8004dba <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d127      	bne.n	8004dba <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d119      	bne.n	8004dba <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0220 	bic.w	r2, r2, #32
 8004d94:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff fdee 	bl	800499c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004dc0:	e004      	b.n	8004dcc <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fde3 	bl	80049ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fdd2 	bl	80049c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <__NVIC_GetPriorityGrouping+0x18>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0307 	and.w	r3, r3, #7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	db0b      	blt.n	8004eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	4906      	ldr	r1, [pc, #24]	; (8004ebc <__NVIC_EnableIRQ+0x34>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	e000e100 	.word	0xe000e100

08004ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	db0a      	blt.n	8004eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	490c      	ldr	r1, [pc, #48]	; (8004f0c <__NVIC_SetPriority+0x4c>)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee8:	e00a      	b.n	8004f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4908      	ldr	r1, [pc, #32]	; (8004f10 <__NVIC_SetPriority+0x50>)
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	440b      	add	r3, r1
 8004efe:	761a      	strb	r2, [r3, #24]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	bf28      	it	cs
 8004f32:	2304      	movcs	r3, #4
 8004f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d902      	bls.n	8004f44 <NVIC_EncodePriority+0x30>
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3b03      	subs	r3, #3
 8004f42:	e000      	b.n	8004f46 <NVIC_EncodePriority+0x32>
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	401a      	ands	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43d9      	mvns	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	4313      	orrs	r3, r2
         );
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff4f 	bl	8004e24 <__NVIC_SetPriorityGrouping>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa0:	f7ff ff64 	bl	8004e6c <__NVIC_GetPriorityGrouping>
 8004fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6978      	ldr	r0, [r7, #20]
 8004fac:	f7ff ffb2 	bl	8004f14 <NVIC_EncodePriority>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff81 	bl	8004ec0 <__NVIC_SetPriority>
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff57 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e043      	b.n	800507e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_DMA_Init+0xa4>)
 8004ffe:	4413      	add	r3, r2
 8005000:	4a22      	ldr	r2, [pc, #136]	; (800508c <HAL_DMA_Init+0xa8>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	009a      	lsls	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_DMA_Init+0xac>)
 8005012:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	bffd9ff8 	.word	0xbffd9ff8
 800508c:	cccccccd 	.word	0xcccccccd
 8005090:	40026000 	.word	0x40026000

08005094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Start_IT+0x20>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e04b      	b.n	800514c <HAL_DMA_Start_IT+0xb8>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d13a      	bne.n	800513e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f95e 	bl	80053ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 020e 	orr.w	r2, r2, #14
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e00f      	b.n	800512c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 020a 	orr.w	r2, r2, #10
 800512a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e005      	b.n	800514a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d008      	beq.n	800517e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2204      	movs	r2, #4
 8005170:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 020e 	bic.w	r2, r2, #14
 800518c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 021c 	and.w	r2, r3, #28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2101      	movs	r1, #1
 80051ac:	fa01 f202 	lsl.w	r2, r1, r2
 80051b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d005      	beq.n	80051f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e029      	b.n	8005246 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 020e 	bic.w	r2, r2, #14
 8005200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 021c 	and.w	r2, r3, #28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f202 	lsl.w	r2, r1, r2
 8005224:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
    }
  }
  return status;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f003 031c 	and.w	r3, r3, #28
 8005270:	2204      	movs	r2, #4
 8005272:	409a      	lsls	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d026      	beq.n	80052ca <HAL_DMA_IRQHandler+0x7a>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d021      	beq.n	80052ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f003 021c 	and.w	r2, r3, #28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	2104      	movs	r1, #4
 80052b2:	fa01 f202 	lsl.w	r2, r1, r2
 80052b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d071      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80052c8:	e06c      	b.n	80053a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 031c 	and.w	r3, r3, #28
 80052d2:	2202      	movs	r2, #2
 80052d4:	409a      	lsls	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02e      	beq.n	800533c <HAL_DMA_IRQHandler+0xec>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d029      	beq.n	800533c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 020a 	bic.w	r2, r2, #10
 8005304:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f003 021c 	and.w	r2, r3, #28
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	2102      	movs	r1, #2
 800531c:	fa01 f202 	lsl.w	r2, r1, r2
 8005320:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d038      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800533a:	e033      	b.n	80053a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f003 031c 	and.w	r3, r3, #28
 8005344:	2208      	movs	r2, #8
 8005346:	409a      	lsls	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02a      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x156>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d025      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 020e 	bic.w	r2, r2, #14
 8005368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 021c 	and.w	r2, r3, #28
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f202 	lsl.w	r2, r1, r2
 800537c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
}
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 021c 	and.w	r2, r3, #28
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f202 	lsl.w	r2, r1, r2
 80053ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d108      	bne.n	80053f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053f0:	e007      	b.n	8005402 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005422:	e154      	b.n	80056ce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2101      	movs	r1, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8146 	beq.w	80056c8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d005      	beq.n	8005454 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005450:	2b02      	cmp	r3, #2
 8005452:	d130      	bne.n	80054b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800548a:	2201      	movs	r2, #1
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0201 	and.w	r2, r3, #1
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d017      	beq.n	80054f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d123      	bne.n	8005546 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	220f      	movs	r2, #15
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	6939      	ldr	r1, [r7, #16]
 8005542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	2203      	movs	r2, #3
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0203 	and.w	r2, r3, #3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a0 	beq.w	80056c8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005588:	4b58      	ldr	r3, [pc, #352]	; (80056ec <HAL_GPIO_Init+0x2e0>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4a57      	ldr	r2, [pc, #348]	; (80056ec <HAL_GPIO_Init+0x2e0>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6213      	str	r3, [r2, #32]
 8005594:	4b55      	ldr	r3, [pc, #340]	; (80056ec <HAL_GPIO_Init+0x2e0>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80055a0:	4a53      	ldr	r2, [pc, #332]	; (80056f0 <HAL_GPIO_Init+0x2e4>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	220f      	movs	r2, #15
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a4b      	ldr	r2, [pc, #300]	; (80056f4 <HAL_GPIO_Init+0x2e8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d019      	beq.n	8005600 <HAL_GPIO_Init+0x1f4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a4a      	ldr	r2, [pc, #296]	; (80056f8 <HAL_GPIO_Init+0x2ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_GPIO_Init+0x1f0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a49      	ldr	r2, [pc, #292]	; (80056fc <HAL_GPIO_Init+0x2f0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00d      	beq.n	80055f8 <HAL_GPIO_Init+0x1ec>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a48      	ldr	r2, [pc, #288]	; (8005700 <HAL_GPIO_Init+0x2f4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <HAL_GPIO_Init+0x1e8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a47      	ldr	r2, [pc, #284]	; (8005704 <HAL_GPIO_Init+0x2f8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d101      	bne.n	80055f0 <HAL_GPIO_Init+0x1e4>
 80055ec:	2304      	movs	r3, #4
 80055ee:	e008      	b.n	8005602 <HAL_GPIO_Init+0x1f6>
 80055f0:	2305      	movs	r3, #5
 80055f2:	e006      	b.n	8005602 <HAL_GPIO_Init+0x1f6>
 80055f4:	2303      	movs	r3, #3
 80055f6:	e004      	b.n	8005602 <HAL_GPIO_Init+0x1f6>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e002      	b.n	8005602 <HAL_GPIO_Init+0x1f6>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_GPIO_Init+0x1f6>
 8005600:	2300      	movs	r3, #0
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	f002 0203 	and.w	r2, r2, #3
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	4093      	lsls	r3, r2
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005612:	4937      	ldr	r1, [pc, #220]	; (80056f0 <HAL_GPIO_Init+0x2e4>)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	43db      	mvns	r3, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005644:	4a30      	ldr	r2, [pc, #192]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800564a:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	43db      	mvns	r3, r3
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4013      	ands	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800566e:	4a26      	ldr	r2, [pc, #152]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	43db      	mvns	r3, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005698:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80056c2:	4a11      	ldr	r2, [pc, #68]	; (8005708 <HAL_GPIO_Init+0x2fc>)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3301      	adds	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f aea3 	bne.w	8005424 <HAL_GPIO_Init+0x18>
  }
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40020000 	.word	0x40020000
 80056f8:	40020400 	.word	0x40020400
 80056fc:	40020800 	.word	0x40020800
 8005700:	40020c00 	.word	0x40020c00
 8005704:	40021000 	.word	0x40021000
 8005708:	40010400 	.word	0x40010400

0800570c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	887b      	ldrh	r3, [r7, #2]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e001      	b.n	800572e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	807b      	strh	r3, [r7, #2]
 8005746:	4613      	mov	r3, r2
 8005748:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800574a:	787b      	ldrb	r3, [r7, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005756:	e003      	b.n	8005760 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	041a      	lsls	r2, r3, #16
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	619a      	str	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800577c:	887a      	ldrh	r2, [r7, #2]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4013      	ands	r3, r2
 8005782:	041a      	lsls	r2, r3, #16
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43d9      	mvns	r1, r3
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	400b      	ands	r3, r1
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	619a      	str	r2, [r3, #24]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr

0800579c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e12b      	b.n	8005a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fe fafe 	bl	8003dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2224      	movs	r2, #36	; 0x24
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005800:	f003 f8ca 	bl	8008998 <HAL_RCC_GetPCLK1Freq>
 8005804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4a81      	ldr	r2, [pc, #516]	; (8005a10 <HAL_I2C_Init+0x274>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d807      	bhi.n	8005820 <HAL_I2C_Init+0x84>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a80      	ldr	r2, [pc, #512]	; (8005a14 <HAL_I2C_Init+0x278>)
 8005814:	4293      	cmp	r3, r2
 8005816:	bf94      	ite	ls
 8005818:	2301      	movls	r3, #1
 800581a:	2300      	movhi	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e006      	b.n	800582e <HAL_I2C_Init+0x92>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a7d      	ldr	r2, [pc, #500]	; (8005a18 <HAL_I2C_Init+0x27c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	bf94      	ite	ls
 8005828:	2301      	movls	r3, #1
 800582a:	2300      	movhi	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0e7      	b.n	8005a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a78      	ldr	r2, [pc, #480]	; (8005a1c <HAL_I2C_Init+0x280>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	0c9b      	lsrs	r3, r3, #18
 8005840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a6a      	ldr	r2, [pc, #424]	; (8005a10 <HAL_I2C_Init+0x274>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d802      	bhi.n	8005870 <HAL_I2C_Init+0xd4>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3301      	adds	r3, #1
 800586e:	e009      	b.n	8005884 <HAL_I2C_Init+0xe8>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	4a69      	ldr	r2, [pc, #420]	; (8005a20 <HAL_I2C_Init+0x284>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	099b      	lsrs	r3, r3, #6
 8005882:	3301      	adds	r3, #1
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	430b      	orrs	r3, r1
 800588a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	495c      	ldr	r1, [pc, #368]	; (8005a10 <HAL_I2C_Init+0x274>)
 80058a0:	428b      	cmp	r3, r1
 80058a2:	d819      	bhi.n	80058d8 <HAL_I2C_Init+0x13c>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1e59      	subs	r1, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058b8:	400b      	ands	r3, r1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_I2C_Init+0x138>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1e59      	subs	r1, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058cc:	3301      	adds	r3, #1
 80058ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d2:	e051      	b.n	8005978 <HAL_I2C_Init+0x1dc>
 80058d4:	2304      	movs	r3, #4
 80058d6:	e04f      	b.n	8005978 <HAL_I2C_Init+0x1dc>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d111      	bne.n	8005904 <HAL_I2C_Init+0x168>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1e58      	subs	r0, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6859      	ldr	r1, [r3, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	440b      	add	r3, r1
 80058ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80058f2:	3301      	adds	r3, #1
 80058f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e012      	b.n	800592a <HAL_I2C_Init+0x18e>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1e58      	subs	r0, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	0099      	lsls	r1, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	fbb0 f3f3 	udiv	r3, r0, r3
 800591a:	3301      	adds	r3, #1
 800591c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Init+0x196>
 800592e:	2301      	movs	r3, #1
 8005930:	e022      	b.n	8005978 <HAL_I2C_Init+0x1dc>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10e      	bne.n	8005958 <HAL_I2C_Init+0x1bc>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1e58      	subs	r0, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	440b      	add	r3, r1
 8005948:	fbb0 f3f3 	udiv	r3, r0, r3
 800594c:	3301      	adds	r3, #1
 800594e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005956:	e00f      	b.n	8005978 <HAL_I2C_Init+0x1dc>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1e58      	subs	r0, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	0099      	lsls	r1, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	fbb0 f3f3 	udiv	r3, r0, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	6809      	ldr	r1, [r1, #0]
 800597c:	4313      	orrs	r3, r2
 800597e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6911      	ldr	r1, [r2, #16]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68d2      	ldr	r2, [r2, #12]
 80059b2:	4311      	orrs	r1, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695a      	ldr	r2, [r3, #20]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	000186a0 	.word	0x000186a0
 8005a14:	001e847f 	.word	0x001e847f
 8005a18:	003d08ff 	.word	0x003d08ff
 8005a1c:	431bde83 	.word	0x431bde83
 8005a20:	10624dd3 	.word	0x10624dd3

08005a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	817b      	strh	r3, [r7, #10]
 8005a36:	460b      	mov	r3, r1
 8005a38:	813b      	strh	r3, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a3e:	f7fe fdad 	bl	800459c <HAL_GetTick>
 8005a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	f040 80d9 	bne.w	8005c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2319      	movs	r3, #25
 8005a58:	2201      	movs	r2, #1
 8005a5a:	496d      	ldr	r1, [pc, #436]	; (8005c10 <HAL_I2C_Mem_Write+0x1ec>)
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fc7f 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0cc      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Mem_Write+0x56>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e0c5      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d007      	beq.n	8005aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2221      	movs	r2, #33	; 0x21
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2240      	movs	r2, #64	; 0x40
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a3a      	ldr	r2, [r7, #32]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a4d      	ldr	r2, [pc, #308]	; (8005c14 <HAL_I2C_Mem_Write+0x1f0>)
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ae2:	88f8      	ldrh	r0, [r7, #6]
 8005ae4:	893a      	ldrh	r2, [r7, #8]
 8005ae6:	8979      	ldrh	r1, [r7, #10]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4603      	mov	r3, r0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fab6 	bl	8006064 <I2C_RequestMemoryWrite>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d052      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e081      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fd00 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d107      	bne.n	8005b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e06b      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_I2C_Mem_Write+0x180>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d017      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1aa      	bne.n	8005b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fcec 	bl	800658e <I2C_WaitOnBTFFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d107      	bne.n	8005bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e016      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	00100002 	.word	0x00100002
 8005c14:	ffff0000 	.word	0xffff0000

08005c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	; 0x30
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c32:	f7fe fcb3 	bl	800459c <HAL_GetTick>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 8208 	bne.w	8006056 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	2319      	movs	r3, #25
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	497b      	ldr	r1, [pc, #492]	; (8005e3c <HAL_I2C_Mem_Read+0x224>)
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fb85 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e1fb      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_I2C_Mem_Read+0x56>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e1f4      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d007      	beq.n	8005c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2222      	movs	r2, #34	; 0x22
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	; (8005e40 <HAL_I2C_Mem_Read+0x228>)
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cd6:	88f8      	ldrh	r0, [r7, #6]
 8005cd8:	893a      	ldrh	r2, [r7, #8]
 8005cda:	8979      	ldrh	r1, [r7, #10]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa52 	bl	8006190 <I2C_RequestMemoryRead>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e1b0      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e184      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d11b      	bne.n	8005d66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e164      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d11b      	bne.n	8005da6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	e144      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dbc:	e138      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	f200 80f1 	bhi.w	8005faa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d123      	bne.n	8005e18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fc1b 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e139      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e16:	e10b      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d14e      	bne.n	8005ebe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2200      	movs	r2, #0
 8005e28:	4906      	ldr	r1, [pc, #24]	; (8005e44 <HAL_I2C_Mem_Read+0x22c>)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa98 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e10e      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
 8005e3a:	bf00      	nop
 8005e3c:	00100002 	.word	0x00100002
 8005e40:	ffff0000 	.word	0xffff0000
 8005e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ebc:	e0b8      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4966      	ldr	r1, [pc, #408]	; (8006060 <HAL_I2C_Mem_Read+0x448>)
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fa49 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0bf      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	2200      	movs	r2, #0
 8005f22:	494f      	ldr	r1, [pc, #316]	; (8006060 <HAL_I2C_Mem_Read+0x448>)
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fa1b 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e091      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fa8:	e042      	b.n	8006030 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fb2e 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e04c      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d118      	bne.n	8006030 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	2b00      	cmp	r3, #0
 8006036:	f47f aec2 	bne.w	8005dbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	; 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	00010004 	.word	0x00010004

08006064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	4608      	mov	r0, r1
 800606e:	4611      	mov	r1, r2
 8006070:	461a      	mov	r2, r3
 8006072:	4603      	mov	r3, r0
 8006074:	817b      	strh	r3, [r7, #10]
 8006076:	460b      	mov	r3, r1
 8006078:	813b      	strh	r3, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800608c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	2200      	movs	r2, #0
 8006096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f960 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d103      	bne.n	80060be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e05f      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	492d      	ldr	r1, [pc, #180]	; (800618c <I2C_RequestMemoryWrite+0x128>)
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f998 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e04c      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	6a39      	ldr	r1, [r7, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa02 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b04      	cmp	r3, #4
 8006114:	d107      	bne.n	8006126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02b      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d105      	bne.n	800613c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	611a      	str	r2, [r3, #16]
 800613a:	e021      	b.n	8006180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	6a39      	ldr	r1, [r7, #32]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f9dc 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b04      	cmp	r3, #4
 8006160:	d107      	bne.n	8006172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e005      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006176:	893b      	ldrh	r3, [r7, #8]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	00010002 	.word	0x00010002

08006190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f8c2 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f0:	d103      	bne.n	80061fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e0aa      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800620c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	4952      	ldr	r1, [pc, #328]	; (800635c <I2C_RequestMemoryRead+0x1cc>)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f8fa 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e097      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	6a39      	ldr	r1, [r7, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f964 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b04      	cmp	r3, #4
 8006250:	d107      	bne.n	8006262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e076      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e021      	b.n	80062bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	b29b      	uxth	r3, r3
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006288:	6a39      	ldr	r1, [r7, #32]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f93e 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b04      	cmp	r3, #4
 800629c:	d107      	bne.n	80062ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e050      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062b2:	893b      	ldrh	r3, [r7, #8]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	6a39      	ldr	r1, [r7, #32]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f923 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d107      	bne.n	80062e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e035      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2200      	movs	r2, #0
 8006300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f82b 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d103      	bne.n	8006328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e013      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800632c:	897b      	ldrh	r3, [r7, #10]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	4906      	ldr	r1, [pc, #24]	; (800635c <I2C_RequestMemoryRead+0x1cc>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f863 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	00010002 	.word	0x00010002

08006360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006370:	e025      	b.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006378:	d021      	beq.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637a:	f7fe f90f 	bl	800459c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d116      	bne.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e023      	b.n	8006406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10d      	bne.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	e00c      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d0b6      	beq.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800641c:	e051      	b.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642c:	d123      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e046      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647c:	d021      	beq.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fe f88d 	bl	800459c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e020      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0c1b      	lsrs	r3, r3, #16
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10c      	bne.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	43da      	mvns	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e00b      	b.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	43da      	mvns	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d18d      	bne.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006518:	e02d      	b.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f8ce 	bl	80066bc <I2C_IsAcknowledgeFailed>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e02d      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006530:	d021      	beq.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fe f833 	bl	800459c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d116      	bne.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e007      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d1ca      	bne.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659a:	e02d      	b.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f88d 	bl	80066bc <I2C_IsAcknowledgeFailed>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e02d      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d021      	beq.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fd fff2 	bl	800459c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d116      	bne.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e007      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b04      	cmp	r3, #4
 8006604:	d1ca      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661c:	e042      	b.n	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d119      	bne.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e029      	b.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006660:	f7fd ff9c 	bl	800459c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d116      	bne.n	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e007      	b.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d1b5      	bne.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d11b      	bne.n	800670c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	f043 0204 	orr.w	r2, r3, #4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	b08b      	sub	sp, #44	; 0x2c
 800671c:	af06      	add	r7, sp, #24
 800671e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e0d0      	b.n	80068cc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f00a fbf6 	bl	8010f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2203      	movs	r2, #3
 8006748:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	f003 fd43 	bl	800a1dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e04c      	b.n	80067f6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	440b      	add	r3, r1
 800676c:	3301      	adds	r3, #1
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	440b      	add	r3, r1
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006786:	7bfa      	ldrb	r2, [r7, #15]
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	b298      	uxth	r0, r3
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	440b      	add	r3, r1
 8006798:	3336      	adds	r3, #54	; 0x36
 800679a:	4602      	mov	r2, r0
 800679c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	440b      	add	r3, r1
 80067ae:	3303      	adds	r3, #3
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067b4:	7bfa      	ldrb	r2, [r7, #15]
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	440b      	add	r3, r1
 80067c2:	3338      	adds	r3, #56	; 0x38
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067c8:	7bfa      	ldrb	r2, [r7, #15]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	440b      	add	r3, r1
 80067d6:	333c      	adds	r3, #60	; 0x3c
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067dc:	7bfa      	ldrb	r2, [r7, #15]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	440b      	add	r3, r1
 80067ea:	3340      	adds	r3, #64	; 0x40
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
 80067f6:	7bfa      	ldrb	r2, [r7, #15]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d3ad      	bcc.n	800675c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	e044      	b.n	8006890 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	440b      	add	r3, r1
 8006814:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	440b      	add	r3, r1
 800682a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800682e:	7bfa      	ldrb	r2, [r7, #15]
 8006830:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	440b      	add	r3, r1
 8006840:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	440b      	add	r3, r1
 8006856:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800685e:	7bfa      	ldrb	r2, [r7, #15]
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	440b      	add	r3, r1
 8006882:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	3301      	adds	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	7bfa      	ldrb	r2, [r7, #15]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d3b5      	bcc.n	8006806 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	687e      	ldr	r6, [r7, #4]
 80068a2:	466d      	mov	r5, sp
 80068a4:	f106 0410 	add.w	r4, r6, #16
 80068a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	1d33      	adds	r3, r6, #4
 80068b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b4:	6838      	ldr	r0, [r7, #0]
 80068b6:	f003 fcab 	bl	800a210 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_PCD_Start+0x16>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e016      	b.n	8006918 <HAL_PCD_Start+0x44>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f003 fc5a 	bl	800a1b0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80068fc:	2101      	movs	r1, #1
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f00a faf8 	bl	8010ef4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f005 fdfe 	bl	800c50a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f005 fdf6 	bl	800c51e <USB_ReadInterrupts>
 8006932:	4603      	mov	r3, r0
 8006934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d102      	bne.n	8006944 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 faf5 	bl	8006f2e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f005 fde8 	bl	800c51e <USB_ReadInterrupts>
 800694e:	4603      	mov	r3, r0
 8006950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006958:	d112      	bne.n	8006980 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696c:	b292      	uxth	r2, r2
 800696e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f00a fb57 	bl	8011026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006978:	2100      	movs	r1, #0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8c7 	bl	8006b0e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f005 fdca 	bl	800c51e <USB_ReadInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006994:	d10b      	bne.n	80069ae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069a8:	b292      	uxth	r2, r2
 80069aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f005 fdb3 	bl	800c51e <USB_ReadInterrupts>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c2:	d10b      	bne.n	80069dc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d6:	b292      	uxth	r2, r2
 80069d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f005 fd9c 	bl	800c51e <USB_ReadInterrupts>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d126      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0204 	bic.w	r2, r2, #4
 8006a04:	b292      	uxth	r2, r2
 8006a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0208 	bic.w	r2, r2, #8
 8006a1c:	b292      	uxth	r2, r2
 8006a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f00a fb38 	bl	8011098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f005 fd6a 	bl	800c51e <USB_ReadInterrupts>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d126      	bne.n	8006aa4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0208 	orr.w	r2, r2, #8
 8006a68:	b292      	uxth	r2, r2
 8006a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a80:	b292      	uxth	r2, r2
 8006a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0204 	orr.w	r2, r2, #4
 8006a98:	b292      	uxth	r2, r2
 8006a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f00a fae0 	bl	8011064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f005 fd38 	bl	800c51e <USB_ReadInterrupts>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab8:	d10e      	bne.n	8006ad8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006acc:	b292      	uxth	r2, r2
 8006ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f00a fa99 	bl	801100a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f005 fd1e 	bl	800c51e <USB_ReadInterrupts>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aec:	d10b      	bne.n	8006b06 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b00:	b292      	uxth	r2, r2
 8006b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_PCD_SetAddress+0x1a>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e013      	b.n	8006b50 <HAL_PCD_SetAddress+0x42>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f005 fccf 	bl	800c4e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	70fb      	strb	r3, [r7, #3]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	803b      	strh	r3, [r7, #0]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da0e      	bge.n	8006b9c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4413      	add	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	705a      	strb	r2, [r3, #1]
 8006b9a:	e00e      	b.n	8006bba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 0207 	and.w	r2, r3, #7
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006bc6:	883a      	ldrh	r2, [r7, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	78ba      	ldrb	r2, [r7, #2]
 8006bd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d004      	beq.n	8006be4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006be4:	78bb      	ldrb	r3, [r7, #2]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d102      	bne.n	8006bf0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_PCD_EP_Open+0xa6>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e00e      	b.n	8006c1c <HAL_PCD_EP_Open+0xc4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f003 fb1f 	bl	800a250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da0e      	bge.n	8006c56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	705a      	strb	r2, [r3, #1]
 8006c54:	e00e      	b.n	8006c74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 0207 	and.w	r2, r3, #7
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_PCD_EP_Close+0x6a>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e00e      	b.n	8006cac <HAL_PCD_EP_Close+0x88>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f003 fe41 	bl	800a924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	f003 0207 	and.w	r2, r3, #7
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2200      	movs	r2, #0
 8006cec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f003 fff3 	bl	800acfc <USB_EPStartXfer>
 8006d16:	e005      	b.n	8006d24 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6979      	ldr	r1, [r7, #20]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f003 ffec 	bl	800acfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 0207 	and.w	r2, r3, #7
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006d50:	681b      	ldr	r3, [r3, #0]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2201      	movs	r2, #1
 8006da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f003 ff99 	bl	800acfc <USB_EPStartXfer>
 8006dca:	e005      	b.n	8006dd8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6979      	ldr	r1, [r7, #20]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f003 ff92 	bl	800acfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	f003 0207 	and.w	r2, r3, #7
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d901      	bls.n	8006e00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e03e      	b.n	8006e7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da0e      	bge.n	8006e26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	705a      	strb	r2, [r3, #1]
 8006e24:	e00c      	b.n	8006e40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_PCD_EP_SetStall+0x7e>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e00e      	b.n	8006e7e <HAL_PCD_EP_SetStall+0x9c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68f9      	ldr	r1, [r7, #12]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f005 fa3b 	bl	800c2ea <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d901      	bls.n	8006ea4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e040      	b.n	8006f26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da0e      	bge.n	8006eca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	705a      	strb	r2, [r3, #1]
 8006ec8:	e00e      	b.n	8006ee8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	f003 0207 	and.w	r2, r3, #7
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_PCD_EP_ClrStall+0x82>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e00e      	b.n	8006f26 <HAL_PCD_EP_ClrStall+0xa0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f005 fa37 	bl	800c38a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b08e      	sub	sp, #56	; 0x38
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f36:	e2ec      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 8161 	bne.w	800721a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d152      	bne.n	8007008 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	81fb      	strh	r3, [r7, #14]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3328      	adds	r3, #40	; 0x28
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f00a f804 	bl	8010fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 829b 	beq.w	8007512 <PCD_EP_ISR_Handler+0x5e4>
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 8296 	bne.w	8007512 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007006:	e284      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007018:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800701a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701e:	2b00      	cmp	r3, #0
 8007020:	d034      	beq.n	800708c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	3306      	adds	r3, #6
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007060:	b29b      	uxth	r3, r3
 8007062:	f005 fab0 	bl	800c5c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29a      	uxth	r2, r3
 800706e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007072:	4013      	ands	r3, r2
 8007074:	823b      	strh	r3, [r7, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	8a3a      	ldrh	r2, [r7, #16]
 800707c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007080:	b292      	uxth	r2, r2
 8007082:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f009 ff79 	bl	8010f7c <HAL_PCD_SetupStageCallback>
 800708a:	e242      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800708c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007090:	2b00      	cmp	r3, #0
 8007092:	f280 823e 	bge.w	8007512 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070a2:	4013      	ands	r3, r2
 80070a4:	83bb      	strh	r3, [r7, #28]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	8bba      	ldrh	r2, [r7, #28]
 80070ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070b0:	b292      	uxth	r2, r2
 80070b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070bc:	b29b      	uxth	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	3306      	adds	r3, #6
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d019      	beq.n	800711c <PCD_EP_ISR_Handler+0x1ee>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	6959      	ldr	r1, [r3, #20]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007100:	b29b      	uxth	r3, r3
 8007102:	f005 fa60 	bl	800c5c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	441a      	add	r2, r3
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f009 ff42 	bl	8010fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 81f2 	bne.w	8007512 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	4413      	add	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d112      	bne.n	800717c <PCD_EP_ISR_Handler+0x24e>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007160:	b29a      	uxth	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29a      	uxth	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e02f      	b.n	80071dc <PCD_EP_ISR_Handler+0x2ae>
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b3e      	cmp	r3, #62	; 0x3e
 8007182:	d813      	bhi.n	80071ac <PCD_EP_ISR_Handler+0x27e>
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <PCD_EP_ISR_Handler+0x270>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	3301      	adds	r3, #1
 800719c:	633b      	str	r3, [r7, #48]	; 0x30
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e017      	b.n	80071dc <PCD_EP_ISR_Handler+0x2ae>
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <PCD_EP_ISR_Handler+0x298>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3b01      	subs	r3, #1
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	827b      	strh	r3, [r7, #18]
 80071ee:	8a7b      	ldrh	r3, [r7, #18]
 80071f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071f4:	827b      	strh	r3, [r7, #18]
 80071f6:	8a7b      	ldrh	r3, [r7, #18]
 80071f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071fc:	827b      	strh	r3, [r7, #18]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	8a7b      	ldrh	r3, [r7, #18]
 8007204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007214:	b29b      	uxth	r3, r3
 8007216:	8013      	strh	r3, [r2, #0]
 8007218:	e17b      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800722c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007230:	2b00      	cmp	r3, #0
 8007232:	f280 80ea 	bge.w	800740a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29a      	uxth	r2, r3
 8007248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800724c:	4013      	ands	r3, r2
 800724e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007264:	b292      	uxth	r2, r2
 8007266:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007268:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4413      	add	r3, r2
 800727c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	7b1b      	ldrb	r3, [r3, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d122      	bne.n	80072cc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	3306      	adds	r3, #6
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80072b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8087 	beq.w	80073c6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	6959      	ldr	r1, [r3, #20]
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	88da      	ldrh	r2, [r3, #6]
 80072c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072c6:	f005 f97e 	bl	800c5c6 <USB_ReadPMA>
 80072ca:	e07c      	b.n	80073c6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d108      	bne.n	80072e6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80072d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f927 	bl	800752e <HAL_PCD_EP_DB_Receive>
 80072e0:	4603      	mov	r3, r0
 80072e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80072e4:	e06f      	b.n	80073c6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	847b      	strh	r3, [r7, #34]	; 0x22
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d021      	beq.n	8007384 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007348:	b29b      	uxth	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	3302      	adds	r3, #2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007368:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800736a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02a      	beq.n	80073c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	6959      	ldr	r1, [r3, #20]
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	891a      	ldrh	r2, [r3, #8]
 800737c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800737e:	f005 f922 	bl	800c5c6 <USB_ReadPMA>
 8007382:	e020      	b.n	80073c6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	3306      	adds	r3, #6
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80073ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d008      	beq.n	80073c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	6959      	ldr	r1, [r3, #20]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	895a      	ldrh	r2, [r3, #10]
 80073c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073c2:	f005 f900 	bl	800c5c6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073cc:	441a      	add	r2, r3
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073d8:	441a      	add	r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <PCD_EP_ISR_Handler+0x4c2>
 80073e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d206      	bcs.n	80073fe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f009 fdd2 	bl	8010fa0 <HAL_PCD_DataOutStageCallback>
 80073fc:	e005      	b.n	800740a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007404:	4618      	mov	r0, r3
 8007406:	f003 fc79 	bl	800acfc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800740a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800740c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007410:	2b00      	cmp	r3, #0
 8007412:	d07e      	beq.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8007414:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800743e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007442:	843b      	strh	r3, [r7, #32]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	8c3b      	ldrh	r3, [r7, #32]
 8007454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	78db      	ldrb	r3, [r3, #3]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d00c      	beq.n	8007482 <PCD_EP_ISR_Handler+0x554>
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	78db      	ldrb	r3, [r3, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007474:	2b02      	cmp	r3, #2
 8007476:	d146      	bne.n	8007506 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007478:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d141      	bne.n	8007506 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	4413      	add	r3, r2
 8007496:	3302      	adds	r3, #2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	8bfb      	ldrh	r3, [r7, #30]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d906      	bls.n	80074c4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	8bfb      	ldrh	r3, [r7, #30]
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	619a      	str	r2, [r3, #24]
 80074c2:	e002      	b.n	80074ca <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	2200      	movs	r2, #0
 80074c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f009 fd7c 	bl	8010fd6 <HAL_PCD_DataInStageCallback>
 80074de:	e018      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	8bfb      	ldrh	r3, [r7, #30]
 80074e6:	441a      	add	r2, r3
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	8bfb      	ldrh	r3, [r7, #30]
 80074f2:	441a      	add	r2, r3
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074fe:	4618      	mov	r0, r3
 8007500:	f003 fbfc 	bl	800acfc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007504:	e005      	b.n	8007512 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007508:	461a      	mov	r2, r3
 800750a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f91b 	bl	8007748 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800751a:	b29b      	uxth	r3, r3
 800751c:	b21b      	sxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	f6ff ad0a 	blt.w	8006f38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3738      	adds	r7, #56	; 0x38
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b088      	sub	sp, #32
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800753c:	88fb      	ldrh	r3, [r7, #6]
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d07e      	beq.n	8007644 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	3302      	adds	r3, #2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800756e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	8b7b      	ldrh	r3, [r7, #26]
 8007576:	429a      	cmp	r2, r3
 8007578:	d306      	bcc.n	8007588 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	8b7b      	ldrh	r3, [r7, #26]
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	619a      	str	r2, [r3, #24]
 8007586:	e002      	b.n	800758e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d123      	bne.n	80075de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	833b      	strh	r3, [r7, #24]
 80075b2:	8b3b      	ldrh	r3, [r7, #24]
 80075b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075b8:	833b      	strh	r3, [r7, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8b3b      	ldrh	r3, [r7, #24]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01f      	beq.n	8007628 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007602:	82fb      	strh	r3, [r7, #22]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	8afb      	ldrh	r3, [r7, #22]
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007628:	8b7b      	ldrh	r3, [r7, #26]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8087 	beq.w	800773e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6959      	ldr	r1, [r3, #20]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	891a      	ldrh	r2, [r3, #8]
 800763c:	8b7b      	ldrh	r3, [r7, #26]
 800763e:	f004 ffc2 	bl	800c5c6 <USB_ReadPMA>
 8007642:	e07c      	b.n	800773e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764c:	b29b      	uxth	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	3306      	adds	r3, #6
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800766c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	8b7b      	ldrh	r3, [r7, #26]
 8007674:	429a      	cmp	r2, r3
 8007676:	d306      	bcc.n	8007686 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	8b7b      	ldrh	r3, [r7, #26]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	619a      	str	r2, [r3, #24]
 8007684:	e002      	b.n	800768c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2200      	movs	r2, #0
 800768a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d123      	bne.n	80076dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	83fb      	strh	r3, [r7, #30]
 80076b0:	8bfb      	ldrh	r3, [r7, #30]
 80076b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076b6:	83fb      	strh	r3, [r7, #30]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	8bfb      	ldrh	r3, [r7, #30]
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d11f      	bne.n	8007726 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	83bb      	strh	r3, [r7, #28]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	8bbb      	ldrh	r3, [r7, #28]
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007726:	8b7b      	ldrh	r3, [r7, #26]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6959      	ldr	r1, [r3, #20]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	895a      	ldrh	r2, [r3, #10]
 8007738:	8b7b      	ldrh	r3, [r7, #26]
 800773a:	f004 ff44 	bl	800c5c6 <USB_ReadPMA>
    }
  }

  return count;
 800773e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0a2      	sub	sp, #136	; 0x88
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 81c7 	beq.w	8007af0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	4413      	add	r3, r2
 8007776:	3302      	adds	r3, #2
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800778a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007796:	429a      	cmp	r2, r3
 8007798:	d907      	bls.n	80077aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	619a      	str	r2, [r3, #24]
 80077a8:	e002      	b.n	80077b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 80b9 	bne.w	800792c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d126      	bne.n	8007810 <HAL_PCD_EP_DB_Transmit+0xc8>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	4413      	add	r3, r2
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	011a      	lsls	r2, r3, #4
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007808:	b29a      	uxth	r2, r3
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	e01a      	b.n	8007846 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d116      	bne.n	8007846 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	633b      	str	r3, [r7, #48]	; 0x30
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	4413      	add	r3, r2
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	4413      	add	r3, r2
 800783a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2200      	movs	r2, #0
 8007844:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d126      	bne.n	80078a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007862:	b29b      	uxth	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	4413      	add	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	011a      	lsls	r2, r3, #4
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	4413      	add	r3, r2
 8007876:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007886:	b29a      	uxth	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789a:	b29a      	uxth	r2, r3
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	e017      	b.n	80078d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d113      	bne.n	80078d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	4413      	add	r3, r2
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	4413      	add	r3, r2
 80078c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2200      	movs	r2, #0
 80078d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f009 fb7c 	bl	8010fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 82d4 	beq.w	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007904:	827b      	strh	r3, [r7, #18]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	8a7b      	ldrh	r3, [r7, #18]
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
 800792a:	e2b2      	b.n	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d021      	beq.n	800797a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007950:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	441a      	add	r2, r3
 8007962:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007976:	b29b      	uxth	r3, r3
 8007978:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007980:	2b01      	cmp	r3, #1
 8007982:	f040 8286 	bne.w	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800798e:	441a      	add	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800799c:	441a      	add	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d309      	bcc.n	80079c2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	621a      	str	r2, [r3, #32]
 80079c0:	e015      	b.n	80079ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80079ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80079d8:	e009      	b.n	80079ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d155      	bne.n	8007aa2 <HAL_PCD_EP_DB_Transmit+0x35a>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	4413      	add	r3, r2
 8007a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	011a      	lsls	r2, r3, #4
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	4413      	add	r3, r2
 8007a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d112      	bne.n	8007a4a <HAL_PCD_EP_DB_Transmit+0x302>
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a46:	801a      	strh	r2, [r3, #0]
 8007a48:	e047      	b.n	8007ada <HAL_PCD_EP_DB_Transmit+0x392>
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a4e:	d811      	bhi.n	8007a74 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a62:	3301      	adds	r3, #1
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	029b      	lsls	r3, r3, #10
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e032      	b.n	8007ada <HAL_PCD_EP_DB_Transmit+0x392>
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x342>
 8007a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a86:	3b01      	subs	r3, #1
 8007a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	029b      	lsls	r3, r3, #10
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e01b      	b.n	8007ada <HAL_PCD_EP_DB_Transmit+0x392>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d117      	bne.n	8007ada <HAL_PCD_EP_DB_Transmit+0x392>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	4413      	add	r3, r2
 8007ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6959      	ldr	r1, [r3, #20]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	891a      	ldrh	r2, [r3, #8]
 8007ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f004 fd27 	bl	800c53c <USB_WritePMA>
 8007aee:	e1d0      	b.n	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	4413      	add	r3, r2
 8007b04:	3306      	adds	r3, #6
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d307      	bcc.n	8007b38 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b30:	1ad2      	subs	r2, r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	619a      	str	r2, [r3, #24]
 8007b36:	e002      	b.n	8007b3e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 80c4 	bne.w	8007cd0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d126      	bne.n	8007b9e <HAL_PCD_EP_DB_Transmit+0x456>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	461a      	mov	r2, r3
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	4413      	add	r3, r2
 8007b66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	011a      	lsls	r2, r3, #4
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	4413      	add	r3, r2
 8007b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e01a      	b.n	8007bd4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d116      	bne.n	8007bd4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	677b      	str	r3, [r7, #116]	; 0x74
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bba:	4413      	add	r3, r2
 8007bbc:	677b      	str	r3, [r7, #116]	; 0x74
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	011a      	lsls	r2, r3, #4
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8007bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d12f      	bne.n	8007c42 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	011a      	lsls	r2, r3, #4
 8007c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e017      	b.n	8007c72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d113      	bne.n	8007c72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c58:	4413      	add	r3, r2
 8007c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c6e:	2200      	movs	r2, #0
 8007c70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	4619      	mov	r1, r3
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f009 f9ac 	bl	8010fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 8104 	bne.w	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8013      	strh	r3, [r2, #0]
 8007cce:	e0e0      	b.n	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d121      	bne.n	8007d1e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	f040 80b4 	bne.w	8007e92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d32:	441a      	add	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d40:	441a      	add	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6a1a      	ldr	r2, [r3, #32]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d309      	bcc.n	8007d66 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6a1a      	ldr	r2, [r3, #32]
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	621a      	str	r2, [r3, #32]
 8007d64:	e015      	b.n	8007d92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d107      	bne.n	8007d7e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007d6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007d7c:	e009      	b.n	8007d92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	667b      	str	r3, [r7, #100]	; 0x64
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d155      	bne.n	8007e4c <HAL_PCD_EP_DB_Transmit+0x704>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db4:	4413      	add	r3, r2
 8007db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	011a      	lsls	r2, r3, #4
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d112      	bne.n	8007df4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007df0:	801a      	strh	r2, [r3, #0]
 8007df2:	e044      	b.n	8007e7e <HAL_PCD_EP_DB_Transmit+0x736>
 8007df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df6:	2b3e      	cmp	r3, #62	; 0x3e
 8007df8:	d811      	bhi.n	8007e1e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	029b      	lsls	r3, r3, #10
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e02f      	b.n	8007e7e <HAL_PCD_EP_DB_Transmit+0x736>
 8007e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	657b      	str	r3, [r7, #84]	; 0x54
 8007e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e30:	3b01      	subs	r3, #1
 8007e32:	657b      	str	r3, [r7, #84]	; 0x54
 8007e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	029b      	lsls	r3, r3, #10
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e018      	b.n	8007e7e <HAL_PCD_EP_DB_Transmit+0x736>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d114      	bne.n	8007e7e <HAL_PCD_EP_DB_Transmit+0x736>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e62:	4413      	add	r3, r2
 8007e64:	667b      	str	r3, [r7, #100]	; 0x64
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	011a      	lsls	r2, r3, #4
 8007e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6e:	4413      	add	r3, r2
 8007e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e74:	663b      	str	r3, [r7, #96]	; 0x60
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6959      	ldr	r1, [r3, #20]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	895a      	ldrh	r2, [r3, #10]
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f004 fb55 	bl	800c53c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eac:	823b      	strh	r3, [r7, #16]
 8007eae:	8a3b      	ldrh	r3, [r7, #16]
 8007eb0:	f083 0310 	eor.w	r3, r3, #16
 8007eb4:	823b      	strh	r3, [r7, #16]
 8007eb6:	8a3b      	ldrh	r3, [r7, #16]
 8007eb8:	f083 0320 	eor.w	r3, r3, #32
 8007ebc:	823b      	strh	r3, [r7, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	8a3b      	ldrh	r3, [r7, #16]
 8007ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3788      	adds	r7, #136	; 0x88
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	817b      	strh	r3, [r7, #10]
 8007efa:	4613      	mov	r3, r2
 8007efc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007efe:	897b      	ldrh	r3, [r7, #10]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f0a:	897b      	ldrh	r3, [r7, #10]
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e009      	b.n	8007f36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f22:	897a      	ldrh	r2, [r7, #10]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007f36:	893b      	ldrh	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d107      	bne.n	8007f4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	80da      	strh	r2, [r3, #6]
 8007f4a:	e00b      	b.n	8007f64 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e31d      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f82:	4b94      	ldr	r3, [pc, #592]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 030c 	and.w	r3, r3, #12
 8007f8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f8c:	4b91      	ldr	r3, [pc, #580]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f94:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d07b      	beq.n	800809a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d006      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b0c      	cmp	r3, #12
 8007fac:	d10f      	bne.n	8007fce <HAL_RCC_OscConfig+0x5e>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb4:	d10b      	bne.n	8007fce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb6:	4b87      	ldr	r3, [pc, #540]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d06a      	beq.n	8008098 <HAL_RCC_OscConfig+0x128>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d166      	bne.n	8008098 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e2f7      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d106      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x74>
 8007fd6:	4b7f      	ldr	r3, [pc, #508]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a7e      	ldr	r2, [pc, #504]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	e02d      	b.n	8008040 <HAL_RCC_OscConfig+0xd0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10c      	bne.n	8008006 <HAL_RCC_OscConfig+0x96>
 8007fec:	4b79      	ldr	r3, [pc, #484]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a78      	ldr	r2, [pc, #480]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b76      	ldr	r3, [pc, #472]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a75      	ldr	r2, [pc, #468]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8007ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e01c      	b.n	8008040 <HAL_RCC_OscConfig+0xd0>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b05      	cmp	r3, #5
 800800c:	d10c      	bne.n	8008028 <HAL_RCC_OscConfig+0xb8>
 800800e:	4b71      	ldr	r3, [pc, #452]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a70      	ldr	r2, [pc, #448]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4b6e      	ldr	r3, [pc, #440]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a6d      	ldr	r2, [pc, #436]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0xd0>
 8008028:	4b6a      	ldr	r3, [pc, #424]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a69      	ldr	r2, [pc, #420]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800802e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b67      	ldr	r3, [pc, #412]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a66      	ldr	r2, [pc, #408]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800803a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008048:	f7fc faa8 	bl	800459c <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008050:	f7fc faa4 	bl	800459c <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e2ad      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008062:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0xe0>
 800806e:	e014      	b.n	800809a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008070:	f7fc fa94 	bl	800459c <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008078:	f7fc fa90 	bl	800459c <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	; 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e299      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800808a:	4b52      	ldr	r3, [pc, #328]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x108>
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d05a      	beq.n	800815c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d005      	beq.n	80080b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b0c      	cmp	r3, #12
 80080b0:	d119      	bne.n	80080e6 <HAL_RCC_OscConfig+0x176>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d116      	bne.n	80080e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080b8:	4b46      	ldr	r3, [pc, #280]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCC_OscConfig+0x160>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e276      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d0:	4b40      	ldr	r3, [pc, #256]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	493d      	ldr	r1, [pc, #244]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080e4:	e03a      	b.n	800815c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d020      	beq.n	8008130 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080ee:	4b3a      	ldr	r3, [pc, #232]	; (80081d8 <HAL_RCC_OscConfig+0x268>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f4:	f7fc fa52 	bl	800459c <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080fc:	f7fc fa4e 	bl	800459c <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e257      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800811a:	4b2e      	ldr	r3, [pc, #184]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	492a      	ldr	r1, [pc, #168]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800812a:	4313      	orrs	r3, r2
 800812c:	604b      	str	r3, [r1, #4]
 800812e:	e015      	b.n	800815c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008130:	4b29      	ldr	r3, [pc, #164]	; (80081d8 <HAL_RCC_OscConfig+0x268>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008136:	f7fc fa31 	bl	800459c <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800813c:	e008      	b.n	8008150 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800813e:	f7fc fa2d 	bl	800459c <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e236      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008150:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f0      	bne.n	800813e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 80b8 	beq.w	80082da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d170      	bne.n	8008252 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008170:	4b18      	ldr	r3, [pc, #96]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_RCC_OscConfig+0x218>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e21a      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008194:	429a      	cmp	r2, r3
 8008196:	d921      	bls.n	80081dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fc53 	bl	8008a48 <RCC_SetFlashLatencyFromMSIRange>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e208      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	4906      	ldr	r1, [pc, #24]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	061b      	lsls	r3, r3, #24
 80081cc:	4901      	ldr	r1, [pc, #4]	; (80081d4 <HAL_RCC_OscConfig+0x264>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	604b      	str	r3, [r1, #4]
 80081d2:	e020      	b.n	8008216 <HAL_RCC_OscConfig+0x2a6>
 80081d4:	40023800 	.word	0x40023800
 80081d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081dc:	4ba4      	ldr	r3, [pc, #656]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	49a1      	ldr	r1, [pc, #644]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081ee:	4ba0      	ldr	r3, [pc, #640]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	061b      	lsls	r3, r3, #24
 80081fc:	499c      	ldr	r1, [pc, #624]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fc1e 	bl	8008a48 <RCC_SetFlashLatencyFromMSIRange>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e1d3      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	0b5b      	lsrs	r3, r3, #13
 800821c:	3301      	adds	r3, #1
 800821e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008226:	4a92      	ldr	r2, [pc, #584]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008228:	6892      	ldr	r2, [r2, #8]
 800822a:	0912      	lsrs	r2, r2, #4
 800822c:	f002 020f 	and.w	r2, r2, #15
 8008230:	4990      	ldr	r1, [pc, #576]	; (8008474 <HAL_RCC_OscConfig+0x504>)
 8008232:	5c8a      	ldrb	r2, [r1, r2]
 8008234:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008236:	4a90      	ldr	r2, [pc, #576]	; (8008478 <HAL_RCC_OscConfig+0x508>)
 8008238:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800823a:	4b90      	ldr	r3, [pc, #576]	; (800847c <HAL_RCC_OscConfig+0x50c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f7fb ff0e 	bl	8004060 <HAL_InitTick>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d045      	beq.n	80082da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	e1b5      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d029      	beq.n	80082ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800825a:	4b89      	ldr	r3, [pc, #548]	; (8008480 <HAL_RCC_OscConfig+0x510>)
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008260:	f7fc f99c 	bl	800459c <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008268:	f7fc f998 	bl	800459c <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e1a1      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800827a:	4b7d      	ldr	r3, [pc, #500]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008286:	4b7a      	ldr	r3, [pc, #488]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	4977      	ldr	r1, [pc, #476]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008298:	4b75      	ldr	r3, [pc, #468]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	061b      	lsls	r3, r3, #24
 80082a6:	4972      	ldr	r1, [pc, #456]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	604b      	str	r3, [r1, #4]
 80082ac:	e015      	b.n	80082da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80082ae:	4b74      	ldr	r3, [pc, #464]	; (8008480 <HAL_RCC_OscConfig+0x510>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fc f972 	bl	800459c <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082bc:	f7fc f96e 	bl	800459c <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e177      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80082ce:	4b68      	ldr	r3, [pc, #416]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d030      	beq.n	8008348 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d016      	beq.n	800831c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082ee:	4b65      	ldr	r3, [pc, #404]	; (8008484 <HAL_RCC_OscConfig+0x514>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f4:	f7fc f952 	bl	800459c <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082fc:	f7fc f94e 	bl	800459c <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e157      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800830e:	4b58      	ldr	r3, [pc, #352]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0f0      	beq.n	80082fc <HAL_RCC_OscConfig+0x38c>
 800831a:	e015      	b.n	8008348 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800831c:	4b59      	ldr	r3, [pc, #356]	; (8008484 <HAL_RCC_OscConfig+0x514>)
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008322:	f7fc f93b 	bl	800459c <HAL_GetTick>
 8008326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008328:	e008      	b.n	800833c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800832a:	f7fc f937 	bl	800459c <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d901      	bls.n	800833c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e140      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800833c:	4b4c      	ldr	r3, [pc, #304]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f0      	bne.n	800832a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80b5 	beq.w	80084c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008356:	2300      	movs	r3, #0
 8008358:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800835a:	4b45      	ldr	r3, [pc, #276]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10d      	bne.n	8008382 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008366:	4b42      	ldr	r3, [pc, #264]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	4a41      	ldr	r2, [pc, #260]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800836c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008370:	6253      	str	r3, [r2, #36]	; 0x24
 8008372:	4b3f      	ldr	r3, [pc, #252]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800837e:	2301      	movs	r3, #1
 8008380:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008382:	4b41      	ldr	r3, [pc, #260]	; (8008488 <HAL_RCC_OscConfig+0x518>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d118      	bne.n	80083c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800838e:	4b3e      	ldr	r3, [pc, #248]	; (8008488 <HAL_RCC_OscConfig+0x518>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a3d      	ldr	r2, [pc, #244]	; (8008488 <HAL_RCC_OscConfig+0x518>)
 8008394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800839a:	f7fc f8ff 	bl	800459c <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a2:	f7fc f8fb 	bl	800459c <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b64      	cmp	r3, #100	; 0x64
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e104      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083b4:	4b34      	ldr	r3, [pc, #208]	; (8008488 <HAL_RCC_OscConfig+0x518>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d106      	bne.n	80083d6 <HAL_RCC_OscConfig+0x466>
 80083c8:	4b29      	ldr	r3, [pc, #164]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	4a28      	ldr	r2, [pc, #160]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d2:	6353      	str	r3, [r2, #52]	; 0x34
 80083d4:	e02d      	b.n	8008432 <HAL_RCC_OscConfig+0x4c2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCC_OscConfig+0x488>
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	4a23      	ldr	r2, [pc, #140]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e8:	6353      	str	r3, [r2, #52]	; 0x34
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	4a20      	ldr	r2, [pc, #128]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 80083f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f4:	6353      	str	r3, [r2, #52]	; 0x34
 80083f6:	e01c      	b.n	8008432 <HAL_RCC_OscConfig+0x4c2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b05      	cmp	r3, #5
 80083fe:	d10c      	bne.n	800841a <HAL_RCC_OscConfig+0x4aa>
 8008400:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800840a:	6353      	str	r3, [r2, #52]	; 0x34
 800840c:	4b18      	ldr	r3, [pc, #96]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	4a17      	ldr	r2, [pc, #92]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008416:	6353      	str	r3, [r2, #52]	; 0x34
 8008418:	e00b      	b.n	8008432 <HAL_RCC_OscConfig+0x4c2>
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800841c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841e:	4a14      	ldr	r2, [pc, #80]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008424:	6353      	str	r3, [r2, #52]	; 0x34
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	4a11      	ldr	r2, [pc, #68]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800842c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008430:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d015      	beq.n	8008466 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800843a:	f7fc f8af 	bl	800459c <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008440:	e00a      	b.n	8008458 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008442:	f7fc f8ab 	bl	800459c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008450:	4293      	cmp	r3, r2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e0b2      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <HAL_RCC_OscConfig+0x500>)
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0ee      	beq.n	8008442 <HAL_RCC_OscConfig+0x4d2>
 8008464:	e023      	b.n	80084ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008466:	f7fc f899 	bl	800459c <HAL_GetTick>
 800846a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800846c:	e019      	b.n	80084a2 <HAL_RCC_OscConfig+0x532>
 800846e:	bf00      	nop
 8008470:	40023800 	.word	0x40023800
 8008474:	08017910 	.word	0x08017910
 8008478:	20000098 	.word	0x20000098
 800847c:	2000009c 	.word	0x2000009c
 8008480:	42470020 	.word	0x42470020
 8008484:	42470680 	.word	0x42470680
 8008488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800848c:	f7fc f886 	bl	800459c <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	f241 3288 	movw	r2, #5000	; 0x1388
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e08d      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084a2:	4b49      	ldr	r3, [pc, #292]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1ee      	bne.n	800848c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084ae:	7ffb      	ldrb	r3, [r7, #31]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d105      	bne.n	80084c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084b4:	4b44      	ldr	r3, [pc, #272]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	4a43      	ldr	r2, [pc, #268]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 80084ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d079      	beq.n	80085bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b0c      	cmp	r3, #12
 80084cc:	d056      	beq.n	800857c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d13b      	bne.n	800854e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b3d      	ldr	r3, [pc, #244]	; (80085cc <HAL_RCC_OscConfig+0x65c>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7fc f85e 	bl	800459c <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fc f85a 	bl	800459c <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e063      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084f6:	4b34      	ldr	r3, [pc, #208]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008502:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	4319      	orrs	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	430b      	orrs	r3, r1
 800851a:	492b      	ldr	r1, [pc, #172]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 800851c:	4313      	orrs	r3, r2
 800851e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008520:	4b2a      	ldr	r3, [pc, #168]	; (80085cc <HAL_RCC_OscConfig+0x65c>)
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008526:	f7fc f839 	bl	800459c <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800852e:	f7fc f835 	bl	800459c <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e03e      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008540:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x5be>
 800854c:	e036      	b.n	80085bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800854e:	4b1f      	ldr	r3, [pc, #124]	; (80085cc <HAL_RCC_OscConfig+0x65c>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008554:	f7fc f822 	bl	800459c <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800855c:	f7fc f81e 	bl	800459c <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e027      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800856e:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0x5ec>
 800857a:	e01f      	b.n	80085bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e01a      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <HAL_RCC_OscConfig+0x658>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	429a      	cmp	r2, r3
 800859a:	d10d      	bne.n	80085b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d106      	bne.n	80085b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d001      	beq.n	80085bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40023800 	.word	0x40023800
 80085cc:	42470060 	.word	0x42470060

080085d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e11a      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085e4:	4b8f      	ldr	r3, [pc, #572]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d919      	bls.n	8008626 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d105      	bne.n	8008604 <HAL_RCC_ClockConfig+0x34>
 80085f8:	4b8a      	ldr	r3, [pc, #552]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a89      	ldr	r2, [pc, #548]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 80085fe:	f043 0304 	orr.w	r3, r3, #4
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4b87      	ldr	r3, [pc, #540]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f023 0201 	bic.w	r2, r3, #1
 800860c:	4985      	ldr	r1, [pc, #532]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	4313      	orrs	r3, r2
 8008612:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008614:	4b83      	ldr	r3, [pc, #524]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d001      	beq.n	8008626 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e0f9      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d008      	beq.n	8008644 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008632:	4b7d      	ldr	r3, [pc, #500]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	497a      	ldr	r1, [pc, #488]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008640:	4313      	orrs	r3, r2
 8008642:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 808e 	beq.w	800876e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d107      	bne.n	800866a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800865a:	4b73      	ldr	r3, [pc, #460]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d121      	bne.n	80086aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e0d7      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b03      	cmp	r3, #3
 8008670:	d107      	bne.n	8008682 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008672:	4b6d      	ldr	r3, [pc, #436]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d115      	bne.n	80086aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0cb      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d107      	bne.n	800869a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800868a:	4b67      	ldr	r3, [pc, #412]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e0bf      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800869a:	4b63      	ldr	r3, [pc, #396]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e0b7      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086aa:	4b5f      	ldr	r3, [pc, #380]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f023 0203 	bic.w	r2, r3, #3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	495c      	ldr	r1, [pc, #368]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086bc:	f7fb ff6e 	bl	800459c <HAL_GetTick>
 80086c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d112      	bne.n	80086f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086ca:	e00a      	b.n	80086e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086cc:	f7fb ff66 	bl	800459c <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086da:	4293      	cmp	r3, r2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e09b      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086e2:	4b51      	ldr	r3, [pc, #324]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 030c 	and.w	r3, r3, #12
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d1ee      	bne.n	80086cc <HAL_RCC_ClockConfig+0xfc>
 80086ee:	e03e      	b.n	800876e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d112      	bne.n	800871e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086fa:	f7fb ff4f 	bl	800459c <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	; 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e084      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008710:	4b45      	ldr	r3, [pc, #276]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 030c 	and.w	r3, r3, #12
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d1ee      	bne.n	80086fa <HAL_RCC_ClockConfig+0x12a>
 800871c:	e027      	b.n	800876e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d11d      	bne.n	8008762 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008726:	e00a      	b.n	800873e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008728:	f7fb ff38 	bl	800459c <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	f241 3288 	movw	r2, #5000	; 0x1388
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e06d      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800873e:	4b3a      	ldr	r3, [pc, #232]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	2b04      	cmp	r3, #4
 8008748:	d1ee      	bne.n	8008728 <HAL_RCC_ClockConfig+0x158>
 800874a:	e010      	b.n	800876e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800874c:	f7fb ff26 	bl	800459c <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	f241 3288 	movw	r2, #5000	; 0x1388
 800875a:	4293      	cmp	r3, r2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e05b      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008762:	4b31      	ldr	r3, [pc, #196]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 030c 	and.w	r3, r3, #12
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1ee      	bne.n	800874c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800876e:	4b2d      	ldr	r3, [pc, #180]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d219      	bcs.n	80087b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d105      	bne.n	800878e <HAL_RCC_ClockConfig+0x1be>
 8008782:	4b28      	ldr	r3, [pc, #160]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a27      	ldr	r2, [pc, #156]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008788:	f043 0304 	orr.w	r3, r3, #4
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b25      	ldr	r3, [pc, #148]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f023 0201 	bic.w	r2, r3, #1
 8008796:	4923      	ldr	r1, [pc, #140]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	4313      	orrs	r3, r2
 800879c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800879e:	4b21      	ldr	r3, [pc, #132]	; (8008824 <HAL_RCC_ClockConfig+0x254>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d001      	beq.n	80087b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e034      	b.n	800881a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d008      	beq.n	80087ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	4917      	ldr	r1, [pc, #92]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	490f      	ldr	r1, [pc, #60]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087ee:	f000 f823 	bl	8008838 <HAL_RCC_GetSysClockFreq>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <HAL_RCC_ClockConfig+0x258>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	091b      	lsrs	r3, r3, #4
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	490b      	ldr	r1, [pc, #44]	; (800882c <HAL_RCC_ClockConfig+0x25c>)
 8008800:	5ccb      	ldrb	r3, [r1, r3]
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 8008808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7fb fc26 	bl	8004060 <HAL_InitTick>
 8008814:	4603      	mov	r3, r0
 8008816:	72fb      	strb	r3, [r7, #11]

  return status;
 8008818:	7afb      	ldrb	r3, [r7, #11]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	40023c00 	.word	0x40023c00
 8008828:	40023800 	.word	0x40023800
 800882c:	08017910 	.word	0x08017910
 8008830:	20000098 	.word	0x20000098
 8008834:	2000009c 	.word	0x2000009c

08008838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008838:	b5b0      	push	{r4, r5, r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800883e:	4b4d      	ldr	r3, [pc, #308]	; (8008974 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	2b0c      	cmp	r3, #12
 800884c:	d00c      	beq.n	8008868 <HAL_RCC_GetSysClockFreq+0x30>
 800884e:	2b0c      	cmp	r3, #12
 8008850:	d87c      	bhi.n	800894c <HAL_RCC_GetSysClockFreq+0x114>
 8008852:	2b04      	cmp	r3, #4
 8008854:	d002      	beq.n	800885c <HAL_RCC_GetSysClockFreq+0x24>
 8008856:	2b08      	cmp	r3, #8
 8008858:	d003      	beq.n	8008862 <HAL_RCC_GetSysClockFreq+0x2a>
 800885a:	e077      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800885c:	4b46      	ldr	r3, [pc, #280]	; (8008978 <HAL_RCC_GetSysClockFreq+0x140>)
 800885e:	613b      	str	r3, [r7, #16]
      break;
 8008860:	e082      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008862:	4b46      	ldr	r3, [pc, #280]	; (800897c <HAL_RCC_GetSysClockFreq+0x144>)
 8008864:	613b      	str	r3, [r7, #16]
      break;
 8008866:	e07f      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	0c9b      	lsrs	r3, r3, #18
 800886c:	f003 030f 	and.w	r3, r3, #15
 8008870:	4a43      	ldr	r2, [pc, #268]	; (8008980 <HAL_RCC_GetSysClockFreq+0x148>)
 8008872:	5cd3      	ldrb	r3, [r2, r3]
 8008874:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	0d9b      	lsrs	r3, r3, #22
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	3301      	adds	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008882:	4b3c      	ldr	r3, [pc, #240]	; (8008974 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01a      	beq.n	80088c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	461a      	mov	r2, r3
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	4939      	ldr	r1, [pc, #228]	; (800897c <HAL_RCC_GetSysClockFreq+0x144>)
 8008898:	fb01 f003 	mul.w	r0, r1, r3
 800889c:	2100      	movs	r1, #0
 800889e:	fb01 f102 	mul.w	r1, r1, r2
 80088a2:	1844      	adds	r4, r0, r1
 80088a4:	4935      	ldr	r1, [pc, #212]	; (800897c <HAL_RCC_GetSysClockFreq+0x144>)
 80088a6:	fba2 0101 	umull	r0, r1, r2, r1
 80088aa:	1863      	adds	r3, r4, r1
 80088ac:	4619      	mov	r1, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	461a      	mov	r2, r3
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	f7f8 fbf3 	bl	80010a0 <__aeabi_uldivmod>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4613      	mov	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	e040      	b.n	8008946 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	461c      	mov	r4, r3
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	014b      	lsls	r3, r1, #5
 80088da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80088de:	0142      	lsls	r2, r0, #5
 80088e0:	4610      	mov	r0, r2
 80088e2:	4619      	mov	r1, r3
 80088e4:	1b00      	subs	r0, r0, r4
 80088e6:	eb61 0105 	sbc.w	r1, r1, r5
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	018b      	lsls	r3, r1, #6
 80088f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80088f8:	0182      	lsls	r2, r0, #6
 80088fa:	1a12      	subs	r2, r2, r0
 80088fc:	eb63 0301 	sbc.w	r3, r3, r1
 8008900:	f04f 0000 	mov.w	r0, #0
 8008904:	f04f 0100 	mov.w	r1, #0
 8008908:	00d9      	lsls	r1, r3, #3
 800890a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800890e:	00d0      	lsls	r0, r2, #3
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	1912      	adds	r2, r2, r4
 8008916:	eb45 0303 	adc.w	r3, r5, r3
 800891a:	f04f 0000 	mov.w	r0, #0
 800891e:	f04f 0100 	mov.w	r1, #0
 8008922:	0299      	lsls	r1, r3, #10
 8008924:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008928:	0290      	lsls	r0, r2, #10
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4610      	mov	r0, r2
 8008930:	4619      	mov	r1, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	461a      	mov	r2, r3
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	f7f8 fbb1 	bl	80010a0 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4613      	mov	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	613b      	str	r3, [r7, #16]
      break;
 800894a:	e00d      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <HAL_RCC_GetSysClockFreq+0x13c>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	0b5b      	lsrs	r3, r3, #13
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	613b      	str	r3, [r7, #16]
      break;
 8008966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008968:	693b      	ldr	r3, [r7, #16]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bdb0      	pop	{r4, r5, r7, pc}
 8008972:	bf00      	nop
 8008974:	40023800 	.word	0x40023800
 8008978:	00f42400 	.word	0x00f42400
 800897c:	016e3600 	.word	0x016e3600
 8008980:	08017904 	.word	0x08017904

08008984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <HAL_RCC_GetHCLKFreq+0x10>)
 800898a:	681b      	ldr	r3, [r3, #0]
}
 800898c:	4618      	mov	r0, r3
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	20000098 	.word	0x20000098

08008998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800899c:	f7ff fff2 	bl	8008984 <HAL_RCC_GetHCLKFreq>
 80089a0:	4602      	mov	r2, r0
 80089a2:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	0a1b      	lsrs	r3, r3, #8
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	4903      	ldr	r1, [pc, #12]	; (80089bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80089ae:	5ccb      	ldrb	r3, [r1, r3]
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40023800 	.word	0x40023800
 80089bc:	08017920 	.word	0x08017920

080089c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089c4:	f7ff ffde 	bl	8008984 <HAL_RCC_GetHCLKFreq>
 80089c8:	4602      	mov	r2, r0
 80089ca:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	0adb      	lsrs	r3, r3, #11
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	4903      	ldr	r1, [pc, #12]	; (80089e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089d6:	5ccb      	ldrb	r3, [r1, r3]
 80089d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089dc:	4618      	mov	r0, r3
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40023800 	.word	0x40023800
 80089e4:	08017920 	.word	0x08017920

080089e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	220f      	movs	r2, #15
 80089f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089f8:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <HAL_RCC_GetClockConfig+0x58>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0203 	and.w	r2, r3, #3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <HAL_RCC_GetClockConfig+0x58>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <HAL_RCC_GetClockConfig+0x58>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <HAL_RCC_GetClockConfig+0x58>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008a2a:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <HAL_RCC_GetClockConfig+0x5c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0201 	and.w	r2, r3, #1
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	601a      	str	r2, [r3, #0]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr
 8008a40:	40023800 	.word	0x40023800
 8008a44:	40023c00 	.word	0x40023c00

08008a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a50:	2300      	movs	r3, #0
 8008a52:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008a54:	4b29      	ldr	r3, [pc, #164]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d12c      	bne.n	8008aba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008a6c:	4b24      	ldr	r3, [pc, #144]	; (8008b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e016      	b.n	8008aa6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a78:	4b20      	ldr	r3, [pc, #128]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a82:	6253      	str	r3, [r2, #36]	; 0x24
 8008a84:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008a90:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008a98:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a9a:	4b18      	ldr	r3, [pc, #96]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	4a17      	ldr	r2, [pc, #92]	; (8008afc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aa4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008aac:	d105      	bne.n	8008aba <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ab4:	d101      	bne.n	8008aba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008ac0:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a0f      	ldr	r2, [pc, #60]	; (8008b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ac6:	f043 0304 	orr.w	r3, r3, #4
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f023 0201 	bic.w	r2, r3, #1
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d001      	beq.n	8008aee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e000      	b.n	8008af0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800
 8008b00:	40007000 	.word	0x40007000
 8008b04:	40023c00 	.word	0x40023c00

08008b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e06e      	b.n	8008bf8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d108      	bne.n	8008b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b2a:	d009      	beq.n	8008b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	61da      	str	r2, [r3, #28]
 8008b32:	e005      	b.n	8008b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7fb f976 	bl	8003e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	ea42 0103 	orr.w	r1, r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	0c1a      	lsrs	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f002 0204 	and.w	r2, r2, #4
 8008be6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08c      	sub	sp, #48	; 0x30
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_SPI_TransmitReceive+0x26>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e18a      	b.n	8008f3c <HAL_SPI_TransmitReceive+0x33c>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c2e:	f7fb fcb5 	bl	800459c <HAL_GetTick>
 8008c32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c44:	887b      	ldrh	r3, [r7, #2]
 8008c46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d00f      	beq.n	8008c70 <HAL_SPI_TransmitReceive+0x70>
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c56:	d107      	bne.n	8008c68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <HAL_SPI_TransmitReceive+0x68>
 8008c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d003      	beq.n	8008c70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c6e:	e15b      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x82>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x82>
 8008c7c:	887b      	ldrh	r3, [r7, #2]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c88:	e14e      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d003      	beq.n	8008c9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2205      	movs	r2, #5
 8008c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	887a      	ldrh	r2, [r7, #2]
 8008cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	887a      	ldrh	r2, [r7, #2]
 8008cc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	887a      	ldrh	r2, [r7, #2]
 8008cc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d007      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cfa:	d178      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x10a>
 8008d04:	8b7b      	ldrh	r3, [r7, #26]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d166      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	881a      	ldrh	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	1c9a      	adds	r2, r3, #2
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d2e:	e053      	b.n	8008dd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d11b      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x176>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d016      	beq.n	8008d76 <HAL_SPI_TransmitReceive+0x176>
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d113      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	881a      	ldrh	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	1c9a      	adds	r2, r3, #2
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d119      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x1b8>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d014      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	b292      	uxth	r2, r2
 8008d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	1c9a      	adds	r2, r3, #2
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008db4:	2301      	movs	r3, #1
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008db8:	f7fb fbf0 	bl	800459c <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d807      	bhi.n	8008dd8 <HAL_SPI_TransmitReceive+0x1d8>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dce:	d003      	beq.n	8008dd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dd6:	e0a7      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1a6      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x130>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1a1      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x130>
 8008dec:	e07c      	b.n	8008ee8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0x1fc>
 8008df6:	8b7b      	ldrh	r3, [r7, #26]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d16b      	bne.n	8008ed4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	330c      	adds	r3, #12
 8008e06:	7812      	ldrb	r2, [r2, #0]
 8008e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e22:	e057      	b.n	8008ed4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d11c      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x26c>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d017      	beq.n	8008e6c <HAL_SPI_TransmitReceive+0x26c>
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d114      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d119      	bne.n	8008eae <HAL_SPI_TransmitReceive+0x2ae>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d014      	beq.n	8008eae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008eae:	f7fb fb75 	bl	800459c <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d803      	bhi.n	8008ec6 <HAL_SPI_TransmitReceive+0x2c6>
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec4:	d102      	bne.n	8008ecc <HAL_SPI_TransmitReceive+0x2cc>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ed2:	e029      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1a2      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x224>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d19d      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f8b1 	bl	8009054 <SPI_EndRxTxTransaction>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008f04:	e010      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	e000      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3730      	adds	r7, #48	; 0x30
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	4613      	mov	r3, r2
 8008f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f54:	f7fb fb22 	bl	800459c <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4413      	add	r3, r2
 8008f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f64:	f7fb fb1a 	bl	800459c <HAL_GetTick>
 8008f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f6a:	4b39      	ldr	r3, [pc, #228]	; (8009050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	015b      	lsls	r3, r3, #5
 8008f70:	0d1b      	lsrs	r3, r3, #20
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	fb02 f303 	mul.w	r3, r2, r3
 8008f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f7a:	e054      	b.n	8009026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f82:	d050      	beq.n	8009026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f84:	f7fb fb0a 	bl	800459c <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d902      	bls.n	8008f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d13d      	bne.n	8009016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb2:	d111      	bne.n	8008fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fbc:	d004      	beq.n	8008fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fc6:	d107      	bne.n	8008fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe0:	d10f      	bne.n	8009002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e017      	b.n	8009046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3b01      	subs	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4013      	ands	r3, r2
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	bf0c      	ite	eq
 8009036:	2301      	moveq	r3, #1
 8009038:	2300      	movne	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	461a      	mov	r2, r3
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	429a      	cmp	r2, r3
 8009042:	d19b      	bne.n	8008f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000098 	.word	0x20000098

08009054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009060:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <SPI_EndRxTxTransaction+0x7c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <SPI_EndRxTxTransaction+0x80>)
 8009066:	fba2 2303 	umull	r2, r3, r2, r3
 800906a:	0d5b      	lsrs	r3, r3, #21
 800906c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800907e:	d112      	bne.n	80090a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	2180      	movs	r1, #128	; 0x80
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff ff5a 	bl	8008f44 <SPI_WaitFlagStateUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	f043 0220 	orr.w	r2, r3, #32
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e00f      	b.n	80090c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090bc:	2b80      	cmp	r3, #128	; 0x80
 80090be:	d0f2      	beq.n	80090a6 <SPI_EndRxTxTransaction+0x52>
 80090c0:	e000      	b.n	80090c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80090c2:	bf00      	nop
  }

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000098 	.word	0x20000098
 80090d4:	165e9f81 	.word	0x165e9f81

080090d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e031      	b.n	800914e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fa fee8 	bl	8003ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f000 f970 	bl	80093fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b01      	cmp	r3, #1
 800916a:	d001      	beq.n	8009170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e03a      	b.n	80091e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d00e      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x58>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <HAL_TIM_Base_Start_IT+0x98>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d009      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x58>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a14      	ldr	r2, [pc, #80]	; (80091f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x58>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d111      	bne.n	80091d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d010      	beq.n	80091e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	e007      	b.n	80091e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr
 80091f0:	40000400 	.word	0x40000400
 80091f4:	40000800 	.word	0x40000800
 80091f8:	40010800 	.word	0x40010800

080091fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b02      	cmp	r3, #2
 8009210:	d122      	bne.n	8009258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b02      	cmp	r3, #2
 800921e:	d11b      	bne.n	8009258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0202 	mvn.w	r2, #2
 8009228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f8c1 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8009244:	e005      	b.n	8009252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8b4 	bl	80093b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f8c3 	bl	80093d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b04      	cmp	r3, #4
 8009264:	d122      	bne.n	80092ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d11b      	bne.n	80092ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0204 	mvn.w	r2, #4
 800927c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f897 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8009298:	e005      	b.n	80092a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f88a 	bl	80093b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f899 	bl	80093d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0308 	and.w	r3, r3, #8
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d122      	bne.n	8009300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f003 0308 	and.w	r3, r3, #8
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d11b      	bne.n	8009300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f06f 0208 	mvn.w	r2, #8
 80092d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2204      	movs	r2, #4
 80092d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f86d 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 80092ec:	e005      	b.n	80092fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f860 	bl	80093b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f86f 	bl	80093d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0310 	and.w	r3, r3, #16
 800930a:	2b10      	cmp	r3, #16
 800930c:	d122      	bne.n	8009354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b10      	cmp	r3, #16
 800931a:	d11b      	bne.n	8009354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0210 	mvn.w	r2, #16
 8009324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2208      	movs	r2, #8
 800932a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f843 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8009340:	e005      	b.n	800934e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f836 	bl	80093b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f845 	bl	80093d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b01      	cmp	r3, #1
 8009360:	d10e      	bne.n	8009380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b01      	cmp	r3, #1
 800936e:	d107      	bne.n	8009380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0201 	mvn.w	r2, #1
 8009378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7f9 fc98 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b40      	cmp	r3, #64	; 0x40
 800938c:	d10e      	bne.n	80093ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	d107      	bne.n	80093ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f81f 	bl	80093ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr

080093ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009412:	d007      	beq.n	8009424 <TIM_Base_SetConfig+0x28>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a25      	ldr	r2, [pc, #148]	; (80094ac <TIM_Base_SetConfig+0xb0>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d003      	beq.n	8009424 <TIM_Base_SetConfig+0x28>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a24      	ldr	r2, [pc, #144]	; (80094b0 <TIM_Base_SetConfig+0xb4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d108      	bne.n	8009436 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800942a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943c:	d013      	beq.n	8009466 <TIM_Base_SetConfig+0x6a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <TIM_Base_SetConfig+0xb0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00f      	beq.n	8009466 <TIM_Base_SetConfig+0x6a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_Base_SetConfig+0xb4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00b      	beq.n	8009466 <TIM_Base_SetConfig+0x6a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_Base_SetConfig+0xb8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <TIM_Base_SetConfig+0x6a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <TIM_Base_SetConfig+0xbc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_Base_SetConfig+0x6a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a16      	ldr	r2, [pc, #88]	; (80094bc <TIM_Base_SetConfig+0xc0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d108      	bne.n	8009478 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800946c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	615a      	str	r2, [r3, #20]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40010800 	.word	0x40010800
 80094b8:	40010c00 	.word	0x40010c00
 80094bc:	40011000 	.word	0x40011000

080094c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e046      	b.n	8009566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951a:	d00e      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a13      	ldr	r2, [pc, #76]	; (8009570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a12      	ldr	r2, [pc, #72]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d004      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a10      	ldr	r2, [pc, #64]	; (8009578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d10c      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4313      	orrs	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	bc80      	pop	{r7}
 800956e:	4770      	bx	lr
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40010800 	.word	0x40010800

0800957c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e03f      	b.n	800960e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fa fcd8 	bl	8003f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2224      	movs	r2, #36	; 0x24
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fd11 	bl	8009fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695a      	ldr	r2, [r3, #20]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2220      	movs	r2, #32
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b08a      	sub	sp, #40	; 0x28
 800961a:	af02      	add	r7, sp, #8
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b20      	cmp	r3, #32
 8009634:	d17c      	bne.n	8009730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_UART_Transmit+0x2c>
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e075      	b.n	8009732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_UART_Transmit+0x3e>
 8009650:	2302      	movs	r3, #2
 8009652:	e06e      	b.n	8009732 <HAL_UART_Transmit+0x11c>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2221      	movs	r2, #33	; 0x21
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800966a:	f7fa ff97 	bl	800459c <HAL_GetTick>
 800966e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d108      	bne.n	8009698 <HAL_UART_Transmit+0x82>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	e003      	b.n	80096a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800969c:	2300      	movs	r3, #0
 800969e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80096a8:	e02a      	b.n	8009700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2200      	movs	r2, #0
 80096b2:	2180      	movs	r1, #128	; 0x80
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 faab 	bl	8009c10 <UART_WaitOnFlagUntilTimeout>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e036      	b.n	8009732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	3302      	adds	r3, #2
 80096de:	61bb      	str	r3, [r7, #24]
 80096e0:	e007      	b.n	80096f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	781a      	ldrb	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	3301      	adds	r3, #1
 80096f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009704:	b29b      	uxth	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1cf      	bne.n	80096aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2200      	movs	r2, #0
 8009712:	2140      	movs	r1, #64	; 0x40
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fa7b 	bl	8009c10 <UART_WaitOnFlagUntilTimeout>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e006      	b.n	8009732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	e000      	b.n	8009732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009730:	2302      	movs	r3, #2
  }
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	4613      	mov	r3, r2
 8009746:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b20      	cmp	r3, #32
 8009752:	d11d      	bne.n	8009790 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <HAL_UART_Receive_IT+0x26>
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e016      	b.n	8009792 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_UART_Receive_IT+0x38>
 800976e:	2302      	movs	r3, #2
 8009770:	e00f      	b.n	8009792 <HAL_UART_Receive_IT+0x58>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009780:	88fb      	ldrh	r3, [r7, #6]
 8009782:	461a      	mov	r2, r3
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 fa8c 	bl	8009ca4 <UART_Start_Receive_IT>
 800978c:	4603      	mov	r3, r0
 800978e:	e000      	b.n	8009792 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009790:	2302      	movs	r3, #2
  }
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 0201 	bic.w	r2, r2, #1
 80097c2:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d107      	bne.n	80097dc <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0210 	bic.w	r2, r2, #16
 80097da:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d12d      	bne.n	8009846 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	695a      	ldr	r2, [r3, #20]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d013      	beq.n	800982a <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	4a19      	ldr	r2, [pc, #100]	; (800986c <HAL_UART_AbortReceive_IT+0xd0>)
 8009808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	4618      	mov	r0, r3
 8009810:	f7fb fcdd 	bl	80051ce <HAL_DMA_Abort_IT>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d022      	beq.n	8009860 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	e01a      	b.n	8009860 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f9d2 	bl	8009be8 <HAL_UART_AbortReceiveCpltCallback>
 8009844:	e00c      	b.n	8009860 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9c4 	bl	8009be8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	08009d97 	.word	0x08009d97

08009870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009890:	2300      	movs	r3, #0
 8009892:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	f003 030f 	and.w	r3, r3, #15
 800989e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10d      	bne.n	80098c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <HAL_UART_IRQHandler+0x52>
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	f003 0320 	and.w	r3, r3, #32
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 faea 	bl	8009e94 <UART_Receive_IT>
      return;
 80098c0:	e17b      	b.n	8009bba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80b1 	beq.w	8009a2c <HAL_UART_IRQHandler+0x1bc>
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <HAL_UART_IRQHandler+0x70>
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80a6 	beq.w	8009a2c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_UART_IRQHandler+0x90>
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	f043 0201 	orr.w	r2, r3, #1
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <HAL_UART_IRQHandler+0xb0>
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	f043 0202 	orr.w	r2, r3, #2
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <HAL_UART_IRQHandler+0xd0>
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	f043 0204 	orr.w	r2, r3, #4
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	f003 0308 	and.w	r3, r3, #8
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00f      	beq.n	800996a <HAL_UART_IRQHandler+0xfa>
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <HAL_UART_IRQHandler+0xee>
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f043 0208 	orr.w	r2, r3, #8
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 811e 	beq.w	8009bb0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d007      	beq.n	800998e <HAL_UART_IRQHandler+0x11e>
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa83 	bl	8009e94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009998:	2b40      	cmp	r3, #64	; 0x40
 800999a:	bf0c      	ite	eq
 800999c:	2301      	moveq	r3, #1
 800999e:	2300      	movne	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <HAL_UART_IRQHandler+0x146>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d031      	beq.n	8009a1a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f9ad 	bl	8009d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b40      	cmp	r3, #64	; 0x40
 80099c8:	d123      	bne.n	8009a12 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	695a      	ldr	r2, [r3, #20]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d013      	beq.n	8009a0a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	4a76      	ldr	r2, [pc, #472]	; (8009bc0 <HAL_UART_IRQHandler+0x350>)
 80099e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fb fbed 	bl	80051ce <HAL_DMA_Abort_IT>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d016      	beq.n	8009a28 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a08:	e00e      	b.n	8009a28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8e3 	bl	8009bd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a10:	e00a      	b.n	8009a28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8df 	bl	8009bd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a18:	e006      	b.n	8009a28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f8db 	bl	8009bd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a26:	e0c3      	b.n	8009bb0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a28:	bf00      	nop
    return;
 8009a2a:	e0c1      	b.n	8009bb0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	f040 80a1 	bne.w	8009b78 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 809b 	beq.w	8009b78 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8095 	beq.w	8009b78 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	d14e      	bne.n	8009b10 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009a7c:	8a3b      	ldrh	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 8098 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a88:	8a3a      	ldrh	r2, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	f080 8092 	bcs.w	8009bb4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8a3a      	ldrh	r2, [r7, #16]
 8009a94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d02b      	beq.n	8009af8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695a      	ldr	r2, [r3, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0201 	bic.w	r2, r2, #1
 8009abe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	695a      	ldr	r2, [r3, #20]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ace:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0210 	bic.w	r2, r2, #16
 8009aec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fb fb2e 	bl	8005154 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f876 	bl	8009bfa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009b0e:	e051      	b.n	8009bb4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d047      	beq.n	8009bb8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009b28:	8a7b      	ldrh	r3, [r7, #18]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d044      	beq.n	8009bb8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009b3c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695a      	ldr	r2, [r3, #20]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0210 	bic.w	r2, r2, #16
 8009b6a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b6c:	8a7b      	ldrh	r3, [r7, #18]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f842 	bl	8009bfa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009b76:	e01f      	b.n	8009bb8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <HAL_UART_IRQHandler+0x324>
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f91a 	bl	8009dc6 <UART_Transmit_IT>
    return;
 8009b92:	e012      	b.n	8009bba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00d      	beq.n	8009bba <HAL_UART_IRQHandler+0x34a>
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f95b 	bl	8009e64 <UART_EndTransmit_IT>
    return;
 8009bae:	e004      	b.n	8009bba <HAL_UART_IRQHandler+0x34a>
    return;
 8009bb0:	bf00      	nop
 8009bb2:	e002      	b.n	8009bba <HAL_UART_IRQHandler+0x34a>
      return;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <HAL_UART_IRQHandler+0x34a>
      return;
 8009bb8:	bf00      	nop
  }
}
 8009bba:	3728      	adds	r7, #40	; 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08009d6f 	.word	0x08009d6f

08009bc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr

08009be8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr

08009bfa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr

08009c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c20:	e02c      	b.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c28:	d028      	beq.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c30:	f7fa fcb4 	bl	800459c <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d21d      	bcs.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e00f      	b.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	4013      	ands	r3, r2
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	bf0c      	ite	eq
 8009c8c:	2301      	moveq	r3, #1
 8009c8e:	2300      	movne	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d0c3      	beq.n	8009c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	88fa      	ldrh	r2, [r7, #6]
 8009cbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88fa      	ldrh	r2, [r7, #6]
 8009cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2222      	movs	r2, #34	; 0x22
 8009cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 0201 	orr.w	r2, r2, #1
 8009cf8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f042 0220 	orr.w	r2, r2, #32
 8009d08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr

08009d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d2c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695a      	ldr	r2, [r3, #20]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f022 0201 	bic.w	r2, r2, #1
 8009d3c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d107      	bne.n	8009d56 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0210 	bic.w	r2, r2, #16
 8009d54:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bc80      	pop	{r7}
 8009d6c:	4770      	bx	lr

08009d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7ff ff24 	bl	8009bd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff ff15 	bl	8009be8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b085      	sub	sp, #20
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b21      	cmp	r3, #33	; 0x21
 8009dd8:	d13e      	bne.n	8009e58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de2:	d114      	bne.n	8009e0e <UART_Transmit_IT+0x48>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d110      	bne.n	8009e0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	1c9a      	adds	r2, r3, #2
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	621a      	str	r2, [r3, #32]
 8009e0c:	e008      	b.n	8009e20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6211      	str	r1, [r2, #32]
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10f      	bne.n	8009e54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	e000      	b.n	8009e5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e58:	2302      	movs	r3, #2
  }
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fe9d 	bl	8009bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b22      	cmp	r3, #34	; 0x22
 8009ea6:	f040 8099 	bne.w	8009fdc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb2:	d117      	bne.n	8009ee4 <UART_Receive_IT+0x50>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d113      	bne.n	8009ee4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	1c9a      	adds	r2, r3, #2
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	629a      	str	r2, [r3, #40]	; 0x28
 8009ee2:	e026      	b.n	8009f32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef6:	d007      	beq.n	8009f08 <UART_Receive_IT+0x74>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <UART_Receive_IT+0x82>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e008      	b.n	8009f28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d148      	bne.n	8009fd8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68da      	ldr	r2, [r3, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0220 	bic.w	r2, r2, #32
 8009f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695a      	ldr	r2, [r3, #20]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d123      	bne.n	8009fce <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0210 	bic.w	r2, r2, #16
 8009f9a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d10a      	bne.n	8009fc0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fe17 	bl	8009bfa <HAL_UARTEx_RxEventCallback>
 8009fcc:	e002      	b.n	8009fd4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7f9 f984 	bl	80032dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e002      	b.n	8009fde <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e000      	b.n	8009fde <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009fdc:	2302      	movs	r3, #2
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	431a      	orrs	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a028:	f023 030c 	bic.w	r3, r3, #12
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	6812      	ldr	r2, [r2, #0]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	430b      	orrs	r3, r1
 800a034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a55      	ldr	r2, [pc, #340]	; (800a1a8 <UART_SetConfig+0x1c0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d103      	bne.n	800a05e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a056:	f7fe fcb3 	bl	80089c0 <HAL_RCC_GetPCLK2Freq>
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	e002      	b.n	800a064 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a05e:	f7fe fc9b 	bl	8008998 <HAL_RCC_GetPCLK1Freq>
 800a062:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a06c:	d14c      	bne.n	800a108 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009a      	lsls	r2, r3, #2
 800a078:	441a      	add	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	fbb2 f3f3 	udiv	r3, r2, r3
 800a084:	4a49      	ldr	r2, [pc, #292]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	095b      	lsrs	r3, r3, #5
 800a08c:	0119      	lsls	r1, r3, #4
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009a      	lsls	r2, r3, #2
 800a098:	441a      	add	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0a4:	4b41      	ldr	r3, [pc, #260]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a0a6:	fba3 0302 	umull	r0, r3, r3, r2
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	2064      	movs	r0, #100	; 0x64
 800a0ae:	fb00 f303 	mul.w	r3, r0, r3
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	3332      	adds	r3, #50	; 0x32
 800a0b8:	4a3c      	ldr	r2, [pc, #240]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a0be:	095b      	lsrs	r3, r3, #5
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0c6:	4419      	add	r1, r3
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009a      	lsls	r2, r3, #2
 800a0d2:	441a      	add	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0de:	4b33      	ldr	r3, [pc, #204]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a0e0:	fba3 0302 	umull	r0, r3, r3, r2
 800a0e4:	095b      	lsrs	r3, r3, #5
 800a0e6:	2064      	movs	r0, #100	; 0x64
 800a0e8:	fb00 f303 	mul.w	r3, r0, r3
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	3332      	adds	r3, #50	; 0x32
 800a0f2:	4a2e      	ldr	r2, [pc, #184]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f8:	095b      	lsrs	r3, r3, #5
 800a0fa:	f003 0207 	and.w	r2, r3, #7
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	440a      	add	r2, r1
 800a104:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a106:	e04a      	b.n	800a19e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	009a      	lsls	r2, r3, #2
 800a112:	441a      	add	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11e:	4a23      	ldr	r2, [pc, #140]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	0119      	lsls	r1, r3, #4
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009a      	lsls	r2, r3, #2
 800a132:	441a      	add	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a13e:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a140:	fba3 0302 	umull	r0, r3, r3, r2
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	2064      	movs	r0, #100	; 0x64
 800a148:	fb00 f303 	mul.w	r3, r0, r3
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	3332      	adds	r3, #50	; 0x32
 800a152:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a154:	fba2 2303 	umull	r2, r3, r2, r3
 800a158:	095b      	lsrs	r3, r3, #5
 800a15a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a15e:	4419      	add	r1, r3
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009a      	lsls	r2, r3, #2
 800a16a:	441a      	add	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	fbb2 f2f3 	udiv	r2, r2, r3
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a178:	fba3 0302 	umull	r0, r3, r3, r2
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	2064      	movs	r0, #100	; 0x64
 800a180:	fb00 f303 	mul.w	r3, r0, r3
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	3332      	adds	r3, #50	; 0x32
 800a18a:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <UART_SetConfig+0x1c4>)
 800a18c:	fba2 2303 	umull	r2, r3, r2, r3
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	f003 020f 	and.w	r2, r3, #15
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	440a      	add	r2, r1
 800a19c:	609a      	str	r2, [r3, #8]
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	40013800 	.word	0x40013800
 800a1ac:	51eb851f 	.word	0x51eb851f

0800a1b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a1c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a1e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	43db      	mvns	r3, r3
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr

0800a210 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a210:	b084      	sub	sp, #16
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	f107 0014 	add.w	r0, r7, #20
 800a21e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	bc80      	pop	{r7}
 800a24c:	b004      	add	sp, #16
 800a24e:	4770      	bx	lr

0800a250 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a250:	b480      	push	{r7}
 800a252:	b09b      	sub	sp, #108	; 0x6c
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	78db      	ldrb	r3, [r3, #3]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d81f      	bhi.n	800a2c2 <USB_ActivateEndpoint+0x72>
 800a282:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <USB_ActivateEndpoint+0x38>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a299 	.word	0x0800a299
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2cb 	.word	0x0800a2cb
 800a294:	0800a2a7 	.word	0x0800a2a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a298:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a29c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a2a4:	e012      	b.n	800a2cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a2a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a2aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a2ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a2b2:	e00b      	b.n	800a2cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a2b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a2b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a2c0:	e004      	b.n	800a2cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a2c8:	e000      	b.n	800a2cc <USB_ActivateEndpoint+0x7c>
      break;
 800a2ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	441a      	add	r2, r3
 800a2d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a2da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a304:	b29a      	uxth	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	441a      	add	r2, r3
 800a31c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a330:	b29b      	uxth	r3, r3
 800a332:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	7b1b      	ldrb	r3, [r3, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 8149 	bne.w	800a5d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	785b      	ldrb	r3, [r3, #1]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 8084 	beq.w	800a450 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a352:	b29b      	uxth	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	4413      	add	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	011a      	lsls	r2, r3, #4
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	88db      	ldrh	r3, [r3, #6]
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	b29b      	uxth	r3, r3
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	81fb      	strh	r3, [r7, #14]
 800a38a:	89fb      	ldrh	r3, [r7, #14]
 800a38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a390:	2b00      	cmp	r3, #0
 800a392:	d01b      	beq.n	800a3cc <USB_ActivateEndpoint+0x17c>
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3aa:	81bb      	strh	r3, [r7, #12]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	441a      	add	r2, r3
 800a3b6:	89bb      	ldrh	r3, [r7, #12]
 800a3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	78db      	ldrb	r3, [r3, #3]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d020      	beq.n	800a416 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ea:	813b      	strh	r3, [r7, #8]
 800a3ec:	893b      	ldrh	r3, [r7, #8]
 800a3ee:	f083 0320 	eor.w	r3, r3, #32
 800a3f2:	813b      	strh	r3, [r7, #8]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	441a      	add	r2, r3
 800a3fe:	893b      	ldrh	r3, [r7, #8]
 800a400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a410:	b29b      	uxth	r3, r3
 800a412:	8013      	strh	r3, [r2, #0]
 800a414:	e27f      	b.n	800a916 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	b29b      	uxth	r3, r3
 800a424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42c:	817b      	strh	r3, [r7, #10]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	441a      	add	r2, r3
 800a438:	897b      	ldrh	r3, [r7, #10]
 800a43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	8013      	strh	r3, [r2, #0]
 800a44e:	e262      	b.n	800a916 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	461a      	mov	r2, r3
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	4413      	add	r3, r2
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	011a      	lsls	r2, r3, #4
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	88db      	ldrh	r3, [r3, #6]
 800a478:	085b      	lsrs	r3, r3, #1
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	4413      	add	r3, r2
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	011a      	lsls	r2, r3, #4
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4a6:	623b      	str	r3, [r7, #32]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d112      	bne.n	800a4d6 <USB_ActivateEndpoint+0x286>
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	801a      	strh	r2, [r3, #0]
 800a4d4:	e02f      	b.n	800a536 <USB_ActivateEndpoint+0x2e6>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	2b3e      	cmp	r3, #62	; 0x3e
 800a4dc:	d813      	bhi.n	800a506 <USB_ActivateEndpoint+0x2b6>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	663b      	str	r3, [r7, #96]	; 0x60
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <USB_ActivateEndpoint+0x2a8>
 800a4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a4f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	801a      	strh	r2, [r3, #0]
 800a504:	e017      	b.n	800a536 <USB_ActivateEndpoint+0x2e6>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	095b      	lsrs	r3, r3, #5
 800a50c:	663b      	str	r3, [r7, #96]	; 0x60
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 031f 	and.w	r3, r3, #31
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <USB_ActivateEndpoint+0x2d0>
 800a51a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a51c:	3b01      	subs	r3, #1
 800a51e:	663b      	str	r3, [r7, #96]	; 0x60
 800a520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a522:	b29b      	uxth	r3, r3
 800a524:	029b      	lsls	r3, r3, #10
 800a526:	b29b      	uxth	r3, r3
 800a528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a52c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a530:	b29a      	uxth	r2, r3
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	83fb      	strh	r3, [r7, #30]
 800a544:	8bfb      	ldrh	r3, [r7, #30]
 800a546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d01b      	beq.n	800a586 <USB_ActivateEndpoint+0x336>
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a564:	83bb      	strh	r3, [r7, #28]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	8bbb      	ldrh	r3, [r7, #28]
 800a572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a582:	b29b      	uxth	r3, r3
 800a584:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59c:	837b      	strh	r3, [r7, #26]
 800a59e:	8b7b      	ldrh	r3, [r7, #26]
 800a5a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5a4:	837b      	strh	r3, [r7, #26]
 800a5a6:	8b7b      	ldrh	r3, [r7, #26]
 800a5a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5ac:	837b      	strh	r3, [r7, #26]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	441a      	add	r2, r3
 800a5b8:	8b7b      	ldrh	r3, [r7, #26]
 800a5ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]
 800a5ce:	e1a2      	b.n	800a916 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	441a      	add	r2, r3
 800a5f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a5f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a600:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a608:	b29b      	uxth	r3, r3
 800a60a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a616:	b29b      	uxth	r3, r3
 800a618:	461a      	mov	r2, r3
 800a61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a61c:	4413      	add	r3, r2
 800a61e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	011a      	lsls	r2, r3, #4
 800a626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a62e:	657b      	str	r3, [r7, #84]	; 0x54
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	891b      	ldrh	r3, [r3, #8]
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	b29b      	uxth	r3, r3
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	653b      	str	r3, [r7, #80]	; 0x50
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a650:	4413      	add	r3, r2
 800a652:	653b      	str	r3, [r7, #80]	; 0x50
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	011a      	lsls	r2, r3, #4
 800a65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	895b      	ldrh	r3, [r3, #10]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a672:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	785b      	ldrb	r3, [r3, #1]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f040 8091 	bne.w	800a7a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a68c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a68e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d01b      	beq.n	800a6ce <USB_ActivateEndpoint+0x47e>
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a6ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	873b      	strh	r3, [r7, #56]	; 0x38
 800a6dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d01b      	beq.n	800a71e <USB_ActivateEndpoint+0x4ce>
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	441a      	add	r2, r3
 800a708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a70a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a70e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a734:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a736:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a738:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a73c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a73e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a740:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a744:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	441a      	add	r2, r3
 800a750:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a75a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a762:	b29b      	uxth	r3, r3
 800a764:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a77c:	867b      	strh	r3, [r7, #50]	; 0x32
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	441a      	add	r2, r3
 800a788:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a78a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a78e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	8013      	strh	r3, [r2, #0]
 800a79e:	e0ba      	b.n	800a916 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a7b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a7b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01d      	beq.n	800a7f8 <USB_ActivateEndpoint+0x5a8>
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	441a      	add	r2, r3
 800a7e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a7e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d01d      	beq.n	800a850 <USB_ActivateEndpoint+0x600>
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	441a      	add	r2, r3
 800a838:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a83c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	78db      	ldrb	r3, [r3, #3]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d024      	beq.n	800a8a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a872:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a876:	f083 0320 	eor.w	r3, r3, #32
 800a87a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	441a      	add	r2, r3
 800a888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a88c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	8013      	strh	r3, [r2, #0]
 800a8a0:	e01d      	b.n	800a8de <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	441a      	add	r2, r3
 800a8c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	441a      	add	r2, r3
 800a900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a90a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a912:	b29b      	uxth	r3, r3
 800a914:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	376c      	adds	r7, #108	; 0x6c
 800a91e:	46bd      	mov	sp, r7
 800a920:	bc80      	pop	{r7}
 800a922:	4770      	bx	lr

0800a924 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a924:	b480      	push	{r7}
 800a926:	b08d      	sub	sp, #52	; 0x34
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	7b1b      	ldrb	r3, [r3, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f040 808e 	bne.w	800aa54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d044      	beq.n	800a9ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	81bb      	strh	r3, [r7, #12]
 800a94e:	89bb      	ldrh	r3, [r7, #12]
 800a950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01b      	beq.n	800a990 <USB_DeactivateEndpoint+0x6c>
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29b      	uxth	r3, r3
 800a966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a96e:	817b      	strh	r3, [r7, #10]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	441a      	add	r2, r3
 800a97a:	897b      	ldrh	r3, [r7, #10]
 800a97c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a6:	813b      	strh	r3, [r7, #8]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	441a      	add	r2, r3
 800a9b2:	893b      	ldrh	r3, [r7, #8]
 800a9b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	8013      	strh	r3, [r2, #0]
 800a9c8:	e192      	b.n	800acf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	827b      	strh	r3, [r7, #18]
 800a9d8:	8a7b      	ldrh	r3, [r7, #18]
 800a9da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01b      	beq.n	800aa1a <USB_DeactivateEndpoint+0xf6>
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f8:	823b      	strh	r3, [r7, #16]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	8a3b      	ldrh	r3, [r7, #16]
 800aa06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa30:	81fb      	strh	r3, [r7, #14]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	441a      	add	r2, r3
 800aa3c:	89fb      	ldrh	r3, [r7, #14]
 800aa3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	8013      	strh	r3, [r2, #0]
 800aa52:	e14d      	b.n	800acf0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	785b      	ldrb	r3, [r3, #1]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f040 80a5 	bne.w	800aba8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	843b      	strh	r3, [r7, #32]
 800aa6c:	8c3b      	ldrh	r3, [r7, #32]
 800aa6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01b      	beq.n	800aaae <USB_DeactivateEndpoint+0x18a>
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8c:	83fb      	strh	r3, [r7, #30]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	441a      	add	r2, r3
 800aa98:	8bfb      	ldrh	r3, [r7, #30]
 800aa9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	83bb      	strh	r3, [r7, #28]
 800aabc:	8bbb      	ldrh	r3, [r7, #28]
 800aabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01b      	beq.n	800aafe <USB_DeactivateEndpoint+0x1da>
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aadc:	837b      	strh	r3, [r7, #26]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	441a      	add	r2, r3
 800aae8:	8b7b      	ldrh	r3, [r7, #26]
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab14:	833b      	strh	r3, [r7, #24]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	441a      	add	r2, r3
 800ab20:	8b3b      	ldrh	r3, [r7, #24]
 800ab22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4c:	82fb      	strh	r3, [r7, #22]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	441a      	add	r2, r3
 800ab58:	8afb      	ldrh	r3, [r7, #22]
 800ab5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab84:	82bb      	strh	r3, [r7, #20]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	8abb      	ldrh	r3, [r7, #20]
 800ab92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	8013      	strh	r3, [r2, #0]
 800aba6:	e0a3      	b.n	800acf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800abb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800abb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d01b      	beq.n	800abf8 <USB_DeactivateEndpoint+0x2d4>
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	441a      	add	r2, r3
 800abe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ac06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01b      	beq.n	800ac48 <USB_DeactivateEndpoint+0x324>
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac26:	853b      	strh	r3, [r7, #40]	; 0x28
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	441a      	add	r2, r3
 800ac6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	847b      	strh	r3, [r7, #34]	; 0x22
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acec:	b29b      	uxth	r3, r3
 800acee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3734      	adds	r7, #52	; 0x34
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc80      	pop	{r7}
 800acfa:	4770      	bx	lr

0800acfc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b0cc      	sub	sp, #304	; 0x130
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	1d3b      	adds	r3, r7, #4
 800ad04:	6018      	str	r0, [r3, #0]
 800ad06:	463b      	mov	r3, r7
 800ad08:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	f040 872e 	bne.w	800bb72 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad16:	463b      	mov	r3, r7
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	463b      	mov	r3, r7
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d905      	bls.n	800ad32 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800ad26:	463b      	mov	r3, r7
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ad30:	e004      	b.n	800ad3c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800ad32:	463b      	mov	r3, r7
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	7b1b      	ldrb	r3, [r3, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d134      	bne.n	800adb0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ad46:	463b      	mov	r3, r7
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6959      	ldr	r1, [r3, #20]
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	88da      	ldrh	r2, [r3, #6]
 800ad52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	1d38      	adds	r0, r7, #4
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	f001 fbee 	bl	800c53c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad60:	f107 0310 	add.w	r3, r7, #16
 800ad64:	1d3a      	adds	r2, r7, #4
 800ad66:	6812      	ldr	r2, [r2, #0]
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	1d3b      	adds	r3, r7, #4
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	4619      	mov	r1, r3
 800ad76:	f107 0310 	add.w	r3, r7, #16
 800ad7a:	f107 0210 	add.w	r2, r7, #16
 800ad7e:	6812      	ldr	r2, [r2, #0]
 800ad80:	440a      	add	r2, r1
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	463b      	mov	r3, r7
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	011a      	lsls	r2, r3, #4
 800ad8c:	f107 0310 	add.w	r3, r7, #16
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4413      	add	r3, r2
 800ad94:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ad98:	f107 030c 	add.w	r3, r7, #12
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	f107 030c 	add.w	r3, r7, #12
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	f000 beac 	b.w	800bb08 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800adb0:	463b      	mov	r3, r7
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	78db      	ldrb	r3, [r3, #3]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	f040 838c 	bne.w	800b4d4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800adbc:	463b      	mov	r3, r7
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6a1a      	ldr	r2, [r3, #32]
 800adc2:	463b      	mov	r3, r7
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	f240 8330 	bls.w	800b42e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800adce:	1d3b      	adds	r3, r7, #4
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	463b      	mov	r3, r7
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800adec:	1d3b      	adds	r3, r7, #4
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	463b      	mov	r3, r7
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	441a      	add	r2, r3
 800adfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ae12:	463b      	mov	r3, r7
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6a1a      	ldr	r2, [r3, #32]
 800ae18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	463b      	mov	r3, r7
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae24:	1d3b      	adds	r3, r7, #4
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	463b      	mov	r3, r7
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 819e 	beq.w	800b17c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae44:	1d3a      	adds	r2, r7, #4
 800ae46:	6812      	ldr	r2, [r2, #0]
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d17a      	bne.n	800af4a <USB_EPStartXfer+0x24e>
 800ae54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae58:	1d3a      	adds	r2, r7, #4
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	1d3b      	adds	r3, r7, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	440a      	add	r2, r1
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	463b      	mov	r3, r7
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	011a      	lsls	r2, r3, #4
 800ae80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4413      	add	r3, r2
 800ae88:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800ae8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d11a      	bne.n	800aed0 <USB_EPStartXfer+0x1d4>
 800ae9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	e062      	b.n	800af96 <USB_EPStartXfer+0x29a>
 800aed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed4:	2b3e      	cmp	r3, #62	; 0x3e
 800aed6:	d819      	bhi.n	800af0c <USB_EPStartXfer+0x210>
 800aed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aedc:	085b      	lsrs	r3, r3, #1
 800aede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <USB_EPStartXfer+0x1fc>
 800aeee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aef2:	3301      	adds	r3, #1
 800aef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	029b      	lsls	r3, r3, #10
 800af00:	b29a      	uxth	r2, r3
 800af02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	801a      	strh	r2, [r3, #0]
 800af0a:	e044      	b.n	800af96 <USB_EPStartXfer+0x29a>
 800af0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800af16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af1a:	f003 031f 	and.w	r3, r3, #31
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d104      	bne.n	800af2c <USB_EPStartXfer+0x230>
 800af22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af26:	3b01      	subs	r3, #1
 800af28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800af2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af30:	b29b      	uxth	r3, r3
 800af32:	029b      	lsls	r3, r3, #10
 800af34:	b29b      	uxth	r3, r3
 800af36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3e:	b29a      	uxth	r2, r3
 800af40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	e025      	b.n	800af96 <USB_EPStartXfer+0x29a>
 800af4a:	463b      	mov	r3, r7
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	785b      	ldrb	r3, [r3, #1]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d120      	bne.n	800af96 <USB_EPStartXfer+0x29a>
 800af54:	1d3b      	adds	r3, r7, #4
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4619      	mov	r1, r3
 800af60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	440a      	add	r2, r1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	463b      	mov	r3, r7
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	011a      	lsls	r2, r3, #4
 800af76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4413      	add	r3, r2
 800af7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800af82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af96:	463b      	mov	r3, r7
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	895b      	ldrh	r3, [r3, #10]
 800af9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afa0:	463b      	mov	r3, r7
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6959      	ldr	r1, [r3, #20]
 800afa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800afb0:	1d38      	adds	r0, r7, #4
 800afb2:	6800      	ldr	r0, [r0, #0]
 800afb4:	f001 fac2 	bl	800c53c <USB_WritePMA>
            ep->xfer_buff += len;
 800afb8:	463b      	mov	r3, r7
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695a      	ldr	r2, [r3, #20]
 800afbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afc2:	441a      	add	r2, r3
 800afc4:	463b      	mov	r3, r7
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afca:	463b      	mov	r3, r7
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6a1a      	ldr	r2, [r3, #32]
 800afd0:	463b      	mov	r3, r7
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d909      	bls.n	800afee <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800afda:	463b      	mov	r3, r7
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6a1a      	ldr	r2, [r3, #32]
 800afe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afe4:	1ad2      	subs	r2, r2, r3
 800afe6:	463b      	mov	r3, r7
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	621a      	str	r2, [r3, #32]
 800afec:	e008      	b.n	800b000 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800afee:	463b      	mov	r3, r7
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800aff8:	463b      	mov	r3, r7
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2200      	movs	r2, #0
 800affe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b000:	463b      	mov	r3, r7
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d17a      	bne.n	800b100 <USB_EPStartXfer+0x404>
 800b00a:	f107 0318 	add.w	r3, r7, #24
 800b00e:	1d3a      	adds	r2, r7, #4
 800b010:	6812      	ldr	r2, [r2, #0]
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	1d3b      	adds	r3, r7, #4
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4619      	mov	r1, r3
 800b020:	f107 0318 	add.w	r3, r7, #24
 800b024:	f107 0218 	add.w	r2, r7, #24
 800b028:	6812      	ldr	r2, [r2, #0]
 800b02a:	440a      	add	r2, r1
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	463b      	mov	r3, r7
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	011a      	lsls	r2, r3, #4
 800b036:	f107 0318 	add.w	r3, r7, #24
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4413      	add	r3, r2
 800b03e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b042:	f107 0314 	add.w	r3, r7, #20
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d11a      	bne.n	800b086 <USB_EPStartXfer+0x38a>
 800b050:	f107 0314 	add.w	r3, r7, #20
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b05e:	b29a      	uxth	r2, r3
 800b060:	f107 0314 	add.w	r3, r7, #20
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	801a      	strh	r2, [r3, #0]
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	b29b      	uxth	r3, r3
 800b072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	f107 0314 	add.w	r3, r7, #20
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	e067      	b.n	800b156 <USB_EPStartXfer+0x45a>
 800b086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b08a:	2b3e      	cmp	r3, #62	; 0x3e
 800b08c:	d819      	bhi.n	800b0c2 <USB_EPStartXfer+0x3c6>
 800b08e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b092:	085b      	lsrs	r3, r3, #1
 800b094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d004      	beq.n	800b0ae <USB_EPStartXfer+0x3b2>
 800b0a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b0ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	029b      	lsls	r3, r3, #10
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	f107 0314 	add.w	r3, r7, #20
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	801a      	strh	r2, [r3, #0]
 800b0c0:	e049      	b.n	800b156 <USB_EPStartXfer+0x45a>
 800b0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c6:	095b      	lsrs	r3, r3, #5
 800b0c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b0cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d0:	f003 031f 	and.w	r3, r3, #31
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <USB_EPStartXfer+0x3e6>
 800b0d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b0e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	029b      	lsls	r3, r3, #10
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	f107 0314 	add.w	r3, r7, #20
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	801a      	strh	r2, [r3, #0]
 800b0fe:	e02a      	b.n	800b156 <USB_EPStartXfer+0x45a>
 800b100:	463b      	mov	r3, r7
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d125      	bne.n	800b156 <USB_EPStartXfer+0x45a>
 800b10a:	f107 0320 	add.w	r3, r7, #32
 800b10e:	1d3a      	adds	r2, r7, #4
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	4619      	mov	r1, r3
 800b120:	f107 0320 	add.w	r3, r7, #32
 800b124:	f107 0220 	add.w	r2, r7, #32
 800b128:	6812      	ldr	r2, [r2, #0]
 800b12a:	440a      	add	r2, r1
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	463b      	mov	r3, r7
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	011a      	lsls	r2, r3, #4
 800b136:	f107 0320 	add.w	r3, r7, #32
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4413      	add	r3, r2
 800b13e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b142:	f107 031c 	add.w	r3, r7, #28
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	f107 031c 	add.w	r3, r7, #28
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b156:	463b      	mov	r3, r7
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	891b      	ldrh	r3, [r3, #8]
 800b15c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b160:	463b      	mov	r3, r7
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6959      	ldr	r1, [r3, #20]
 800b166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b170:	1d38      	adds	r0, r7, #4
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	f001 f9e2 	bl	800c53c <USB_WritePMA>
 800b178:	f000 bcc6 	b.w	800bb08 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b17c:	463b      	mov	r3, r7
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d164      	bne.n	800b250 <USB_EPStartXfer+0x554>
 800b186:	1d3b      	adds	r3, r7, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b18c:	1d3b      	adds	r3, r7, #4
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b194:	b29b      	uxth	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b19a:	4413      	add	r3, r2
 800b19c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b19e:	463b      	mov	r3, r7
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	011a      	lsls	r2, r3, #4
 800b1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d112      	bne.n	800b1de <USB_EPStartXfer+0x4e2>
 800b1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c6:	801a      	strh	r2, [r3, #0]
 800b1c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	e057      	b.n	800b28e <USB_EPStartXfer+0x592>
 800b1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1e2:	2b3e      	cmp	r3, #62	; 0x3e
 800b1e4:	d817      	bhi.n	800b216 <USB_EPStartXfer+0x51a>
 800b1e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b1f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <USB_EPStartXfer+0x50a>
 800b1fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b200:	3301      	adds	r3, #1
 800b202:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b206:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	029b      	lsls	r3, r3, #10
 800b20e:	b29a      	uxth	r2, r3
 800b210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b212:	801a      	strh	r2, [r3, #0]
 800b214:	e03b      	b.n	800b28e <USB_EPStartXfer+0x592>
 800b216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b21a:	095b      	lsrs	r3, r3, #5
 800b21c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <USB_EPStartXfer+0x53a>
 800b22c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b230:	3b01      	subs	r3, #1
 800b232:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b236:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	029b      	lsls	r3, r3, #10
 800b23e:	b29b      	uxth	r3, r3
 800b240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b248:	b29a      	uxth	r2, r3
 800b24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	e01e      	b.n	800b28e <USB_EPStartXfer+0x592>
 800b250:	463b      	mov	r3, r7
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	785b      	ldrb	r3, [r3, #1]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d119      	bne.n	800b28e <USB_EPStartXfer+0x592>
 800b25a:	1d3b      	adds	r3, r7, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	653b      	str	r3, [r7, #80]	; 0x50
 800b260:	1d3b      	adds	r3, r7, #4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b268:	b29b      	uxth	r3, r3
 800b26a:	461a      	mov	r2, r3
 800b26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b26e:	4413      	add	r3, r2
 800b270:	653b      	str	r3, [r7, #80]	; 0x50
 800b272:	463b      	mov	r3, r7
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	011a      	lsls	r2, r3, #4
 800b27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b288:	b29a      	uxth	r2, r3
 800b28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b28e:	463b      	mov	r3, r7
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	891b      	ldrh	r3, [r3, #8]
 800b294:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b298:	463b      	mov	r3, r7
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6959      	ldr	r1, [r3, #20]
 800b29e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b2a8:	1d38      	adds	r0, r7, #4
 800b2aa:	6800      	ldr	r0, [r0, #0]
 800b2ac:	f001 f946 	bl	800c53c <USB_WritePMA>
            ep->xfer_buff += len;
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	695a      	ldr	r2, [r3, #20]
 800b2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ba:	441a      	add	r2, r3
 800b2bc:	463b      	mov	r3, r7
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6a1a      	ldr	r2, [r3, #32]
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d909      	bls.n	800b2e6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6a1a      	ldr	r2, [r3, #32]
 800b2d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2dc:	1ad2      	subs	r2, r2, r3
 800b2de:	463b      	mov	r3, r7
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	621a      	str	r2, [r3, #32]
 800b2e4:	e008      	b.n	800b2f8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800b2e6:	463b      	mov	r3, r7
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b2f8:	1d3b      	adds	r3, r7, #4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2fe:	463b      	mov	r3, r7
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d164      	bne.n	800b3d2 <USB_EPStartXfer+0x6d6>
 800b308:	1d3b      	adds	r3, r7, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b30e:	1d3b      	adds	r3, r7, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b316:	b29b      	uxth	r3, r3
 800b318:	461a      	mov	r2, r3
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	4413      	add	r3, r2
 800b31e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b320:	463b      	mov	r3, r7
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	011a      	lsls	r2, r3, #4
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	4413      	add	r3, r2
 800b32c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b330:	637b      	str	r3, [r7, #52]	; 0x34
 800b332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d112      	bne.n	800b360 <USB_EPStartXfer+0x664>
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b344:	b29a      	uxth	r2, r3
 800b346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b348:	801a      	strh	r2, [r3, #0]
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b358:	b29a      	uxth	r2, r3
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	801a      	strh	r2, [r3, #0]
 800b35e:	e054      	b.n	800b40a <USB_EPStartXfer+0x70e>
 800b360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b364:	2b3e      	cmp	r3, #62	; 0x3e
 800b366:	d817      	bhi.n	800b398 <USB_EPStartXfer+0x69c>
 800b368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b36c:	085b      	lsrs	r3, r3, #1
 800b36e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d004      	beq.n	800b388 <USB_EPStartXfer+0x68c>
 800b37e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b382:	3301      	adds	r3, #1
 800b384:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	029b      	lsls	r3, r3, #10
 800b390:	b29a      	uxth	r2, r3
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	801a      	strh	r2, [r3, #0]
 800b396:	e038      	b.n	800b40a <USB_EPStartXfer+0x70e>
 800b398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b39c:	095b      	lsrs	r3, r3, #5
 800b39e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b3a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3a6:	f003 031f 	and.w	r3, r3, #31
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d104      	bne.n	800b3b8 <USB_EPStartXfer+0x6bc>
 800b3ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b3b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	029b      	lsls	r3, r3, #10
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	e01b      	b.n	800b40a <USB_EPStartXfer+0x70e>
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	785b      	ldrb	r3, [r3, #1]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d116      	bne.n	800b40a <USB_EPStartXfer+0x70e>
 800b3dc:	1d3b      	adds	r3, r7, #4
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ea:	4413      	add	r3, r2
 800b3ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	011a      	lsls	r2, r3, #4
 800b3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b404:	b29a      	uxth	r2, r3
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b40a:	463b      	mov	r3, r7
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	895b      	ldrh	r3, [r3, #10]
 800b410:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b414:	463b      	mov	r3, r7
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6959      	ldr	r1, [r3, #20]
 800b41a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b41e:	b29b      	uxth	r3, r3
 800b420:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b424:	1d38      	adds	r0, r7, #4
 800b426:	6800      	ldr	r0, [r0, #0]
 800b428:	f001 f888 	bl	800c53c <USB_WritePMA>
 800b42c:	e36c      	b.n	800bb08 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b42e:	463b      	mov	r3, r7
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800b438:	1d3b      	adds	r3, r7, #4
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	463b      	mov	r3, r7
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b452:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b456:	1d3b      	adds	r3, r7, #4
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	463b      	mov	r3, r7
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	441a      	add	r2, r3
 800b464:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b46c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b478:	b29b      	uxth	r3, r3
 800b47a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b47c:	1d3b      	adds	r3, r7, #4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b482:	1d3b      	adds	r3, r7, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	461a      	mov	r2, r3
 800b48e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b490:	4413      	add	r3, r2
 800b492:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b494:	463b      	mov	r3, r7
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	011a      	lsls	r2, r3, #4
 800b49c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b49e:	4413      	add	r3, r2
 800b4a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b4b0:	463b      	mov	r3, r7
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	891b      	ldrh	r3, [r3, #8]
 800b4b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6959      	ldr	r1, [r3, #20]
 800b4c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b4ca:	1d38      	adds	r0, r7, #4
 800b4cc:	6800      	ldr	r0, [r0, #0]
 800b4ce:	f001 f835 	bl	800c53c <USB_WritePMA>
 800b4d2:	e319      	b.n	800bb08 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b4d4:	1d3b      	adds	r3, r7, #4
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	463b      	mov	r3, r7
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ee:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800b4f2:	1d3b      	adds	r3, r7, #4
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	463b      	mov	r3, r7
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	441a      	add	r2, r3
 800b500:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800b504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b50c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b514:	b29b      	uxth	r3, r3
 800b516:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b518:	463b      	mov	r3, r7
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6a1a      	ldr	r2, [r3, #32]
 800b51e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b522:	1ad2      	subs	r2, r2, r3
 800b524:	463b      	mov	r3, r7
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b52a:	1d3b      	adds	r3, r7, #4
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	463b      	mov	r3, r7
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 8162 	beq.w	800b80a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b546:	1d3b      	adds	r3, r7, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b54e:	463b      	mov	r3, r7
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d164      	bne.n	800b622 <USB_EPStartXfer+0x926>
 800b558:	1d3b      	adds	r3, r7, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b55e:	1d3b      	adds	r3, r7, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b566:	b29b      	uxth	r3, r3
 800b568:	461a      	mov	r2, r3
 800b56a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b56c:	4413      	add	r3, r2
 800b56e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b570:	463b      	mov	r3, r7
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	011a      	lsls	r2, r3, #4
 800b578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b57a:	4413      	add	r3, r2
 800b57c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b580:	677b      	str	r3, [r7, #116]	; 0x74
 800b582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d112      	bne.n	800b5b0 <USB_EPStartXfer+0x8b4>
 800b58a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b594:	b29a      	uxth	r2, r3
 800b596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b598:	801a      	strh	r2, [r3, #0]
 800b59a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	e057      	b.n	800b660 <USB_EPStartXfer+0x964>
 800b5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5b4:	2b3e      	cmp	r3, #62	; 0x3e
 800b5b6:	d817      	bhi.n	800b5e8 <USB_EPStartXfer+0x8ec>
 800b5b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5bc:	085b      	lsrs	r3, r3, #1
 800b5be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b5c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <USB_EPStartXfer+0x8dc>
 800b5ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b5d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	029b      	lsls	r3, r3, #10
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5e4:	801a      	strh	r2, [r3, #0]
 800b5e6:	e03b      	b.n	800b660 <USB_EPStartXfer+0x964>
 800b5e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5ec:	095b      	lsrs	r3, r3, #5
 800b5ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b5f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f6:	f003 031f 	and.w	r3, r3, #31
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d104      	bne.n	800b608 <USB_EPStartXfer+0x90c>
 800b5fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b602:	3b01      	subs	r3, #1
 800b604:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b608:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	029b      	lsls	r3, r3, #10
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	e01e      	b.n	800b660 <USB_EPStartXfer+0x964>
 800b622:	463b      	mov	r3, r7
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d119      	bne.n	800b660 <USB_EPStartXfer+0x964>
 800b62c:	1d3b      	adds	r3, r7, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b634:	b29b      	uxth	r3, r3
 800b636:	461a      	mov	r2, r3
 800b638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b63c:	4413      	add	r3, r2
 800b63e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b642:	463b      	mov	r3, r7
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	011a      	lsls	r2, r3, #4
 800b64a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b64e:	4413      	add	r3, r2
 800b650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b654:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b65e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b660:	463b      	mov	r3, r7
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	895b      	ldrh	r3, [r3, #10]
 800b666:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b66a:	463b      	mov	r3, r7
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6959      	ldr	r1, [r3, #20]
 800b670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b674:	b29b      	uxth	r3, r3
 800b676:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b67a:	1d38      	adds	r0, r7, #4
 800b67c:	6800      	ldr	r0, [r0, #0]
 800b67e:	f000 ff5d 	bl	800c53c <USB_WritePMA>
          ep->xfer_buff += len;
 800b682:	463b      	mov	r3, r7
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	695a      	ldr	r2, [r3, #20]
 800b688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b68c:	441a      	add	r2, r3
 800b68e:	463b      	mov	r3, r7
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b694:	463b      	mov	r3, r7
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6a1a      	ldr	r2, [r3, #32]
 800b69a:	463b      	mov	r3, r7
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d909      	bls.n	800b6b8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6a1a      	ldr	r2, [r3, #32]
 800b6aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	463b      	mov	r3, r7
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	621a      	str	r2, [r3, #32]
 800b6b6:	e008      	b.n	800b6ca <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b6ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 821a 	beq.w	800bb08 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	785b      	ldrb	r3, [r3, #1]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d164      	bne.n	800b7a8 <USB_EPStartXfer+0xaac>
 800b6de:	1d3b      	adds	r3, r7, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6e4:	1d3b      	adds	r3, r7, #4
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6f2:	4413      	add	r3, r2
 800b6f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	011a      	lsls	r2, r3, #4
 800b6fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b700:	4413      	add	r3, r2
 800b702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b706:	667b      	str	r3, [r7, #100]	; 0x64
 800b708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d112      	bne.n	800b736 <USB_EPStartXfer+0xa3a>
 800b710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	b29b      	uxth	r3, r3
 800b716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b71e:	801a      	strh	r2, [r3, #0]
 800b720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b72a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b72e:	b29a      	uxth	r2, r3
 800b730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e057      	b.n	800b7e6 <USB_EPStartXfer+0xaea>
 800b736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b73a:	2b3e      	cmp	r3, #62	; 0x3e
 800b73c:	d817      	bhi.n	800b76e <USB_EPStartXfer+0xa72>
 800b73e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <USB_EPStartXfer+0xa62>
 800b754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b758:	3301      	adds	r3, #1
 800b75a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b762:	b29b      	uxth	r3, r3
 800b764:	029b      	lsls	r3, r3, #10
 800b766:	b29a      	uxth	r2, r3
 800b768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	e03b      	b.n	800b7e6 <USB_EPStartXfer+0xaea>
 800b76e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <USB_EPStartXfer+0xa92>
 800b784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b788:	3b01      	subs	r3, #1
 800b78a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	b29b      	uxth	r3, r3
 800b794:	029b      	lsls	r3, r3, #10
 800b796:	b29b      	uxth	r3, r3
 800b798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7a4:	801a      	strh	r2, [r3, #0]
 800b7a6:	e01e      	b.n	800b7e6 <USB_EPStartXfer+0xaea>
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d119      	bne.n	800b7e6 <USB_EPStartXfer+0xaea>
 800b7b2:	1d3b      	adds	r3, r7, #4
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	673b      	str	r3, [r7, #112]	; 0x70
 800b7b8:	1d3b      	adds	r3, r7, #4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7c6:	4413      	add	r3, r2
 800b7c8:	673b      	str	r3, [r7, #112]	; 0x70
 800b7ca:	463b      	mov	r3, r7
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	011a      	lsls	r2, r3, #4
 800b7d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	891b      	ldrh	r3, [r3, #8]
 800b7ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7f0:	463b      	mov	r3, r7
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6959      	ldr	r1, [r3, #20]
 800b7f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b800:	1d38      	adds	r0, r7, #4
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	f000 fe9a 	bl	800c53c <USB_WritePMA>
 800b808:	e17e      	b.n	800bb08 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b80a:	463b      	mov	r3, r7
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	785b      	ldrb	r3, [r3, #1]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d16f      	bne.n	800b8f4 <USB_EPStartXfer+0xbf8>
 800b814:	1d3b      	adds	r3, r7, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b81c:	1d3b      	adds	r3, r7, #4
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b824:	b29b      	uxth	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b82c:	4413      	add	r3, r2
 800b82e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b832:	463b      	mov	r3, r7
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	011a      	lsls	r2, r3, #4
 800b83a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d116      	bne.n	800b87e <USB_EPStartXfer+0xb82>
 800b850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b862:	801a      	strh	r2, [r3, #0]
 800b864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b874:	b29a      	uxth	r2, r3
 800b876:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b87a:	801a      	strh	r2, [r3, #0]
 800b87c:	e05f      	b.n	800b93e <USB_EPStartXfer+0xc42>
 800b87e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b882:	2b3e      	cmp	r3, #62	; 0x3e
 800b884:	d818      	bhi.n	800b8b8 <USB_EPStartXfer+0xbbc>
 800b886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <USB_EPStartXfer+0xbaa>
 800b89c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b8a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	029b      	lsls	r3, r3, #10
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8b4:	801a      	strh	r2, [r3, #0]
 800b8b6:	e042      	b.n	800b93e <USB_EPStartXfer+0xc42>
 800b8b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b8c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8c6:	f003 031f 	and.w	r3, r3, #31
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <USB_EPStartXfer+0xbdc>
 800b8ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b8d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	029b      	lsls	r3, r3, #10
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	e024      	b.n	800b93e <USB_EPStartXfer+0xc42>
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	785b      	ldrb	r3, [r3, #1]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d11f      	bne.n	800b93e <USB_EPStartXfer+0xc42>
 800b8fe:	1d3b      	adds	r3, r7, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b906:	1d3b      	adds	r3, r7, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b90e:	b29b      	uxth	r3, r3
 800b910:	461a      	mov	r2, r3
 800b912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b916:	4413      	add	r3, r2
 800b918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b91c:	463b      	mov	r3, r7
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	011a      	lsls	r2, r3, #4
 800b924:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b928:	4413      	add	r3, r2
 800b92a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b92e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b936:	b29a      	uxth	r2, r3
 800b938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b93c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b93e:	463b      	mov	r3, r7
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	891b      	ldrh	r3, [r3, #8]
 800b944:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b948:	463b      	mov	r3, r7
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6959      	ldr	r1, [r3, #20]
 800b94e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b952:	b29b      	uxth	r3, r3
 800b954:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b958:	1d38      	adds	r0, r7, #4
 800b95a:	6800      	ldr	r0, [r0, #0]
 800b95c:	f000 fdee 	bl	800c53c <USB_WritePMA>
          ep->xfer_buff += len;
 800b960:	463b      	mov	r3, r7
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	695a      	ldr	r2, [r3, #20]
 800b966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b96a:	441a      	add	r2, r3
 800b96c:	463b      	mov	r3, r7
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b972:	463b      	mov	r3, r7
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6a1a      	ldr	r2, [r3, #32]
 800b978:	463b      	mov	r3, r7
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d909      	bls.n	800b996 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800b982:	463b      	mov	r3, r7
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6a1a      	ldr	r2, [r3, #32]
 800b988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b98c:	1ad2      	subs	r2, r2, r3
 800b98e:	463b      	mov	r3, r7
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	621a      	str	r2, [r3, #32]
 800b994:	e008      	b.n	800b9a8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800b996:	463b      	mov	r3, r7
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b9a0:	463b      	mov	r3, r7
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b9a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80ab 	beq.w	800bb08 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9b2:	1d3b      	adds	r3, r7, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9ba:	463b      	mov	r3, r7
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d16f      	bne.n	800baa4 <USB_EPStartXfer+0xda8>
 800b9c4:	1d3b      	adds	r3, r7, #4
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9cc:	1d3b      	adds	r3, r7, #4
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9dc:	4413      	add	r3, r2
 800b9de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9e2:	463b      	mov	r3, r7
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	011a      	lsls	r2, r3, #4
 800b9ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d116      	bne.n	800ba2e <USB_EPStartXfer+0xd32>
 800ba00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba04:	881b      	ldrh	r3, [r3, #0]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba12:	801a      	strh	r2, [r3, #0]
 800ba14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	e05b      	b.n	800bae6 <USB_EPStartXfer+0xdea>
 800ba2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba32:	2b3e      	cmp	r3, #62	; 0x3e
 800ba34:	d818      	bhi.n	800ba68 <USB_EPStartXfer+0xd6c>
 800ba36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba3a:	085b      	lsrs	r3, r3, #1
 800ba3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ba40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <USB_EPStartXfer+0xd5a>
 800ba4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba50:	3301      	adds	r3, #1
 800ba52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ba56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	029b      	lsls	r3, r3, #10
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba64:	801a      	strh	r2, [r3, #0]
 800ba66:	e03e      	b.n	800bae6 <USB_EPStartXfer+0xdea>
 800ba68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ba72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba76:	f003 031f 	and.w	r3, r3, #31
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d104      	bne.n	800ba88 <USB_EPStartXfer+0xd8c>
 800ba7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba82:	3b01      	subs	r3, #1
 800ba84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ba88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	029b      	lsls	r3, r3, #10
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800baa0:	801a      	strh	r2, [r3, #0]
 800baa2:	e020      	b.n	800bae6 <USB_EPStartXfer+0xdea>
 800baa4:	463b      	mov	r3, r7
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d11b      	bne.n	800bae6 <USB_EPStartXfer+0xdea>
 800baae:	1d3b      	adds	r3, r7, #4
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	461a      	mov	r2, r3
 800baba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800babe:	4413      	add	r3, r2
 800bac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bac4:	463b      	mov	r3, r7
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	011a      	lsls	r2, r3, #4
 800bacc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bad0:	4413      	add	r3, r2
 800bad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bade:	b29a      	uxth	r2, r3
 800bae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bae4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bae6:	463b      	mov	r3, r7
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	895b      	ldrh	r3, [r3, #10]
 800baec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800baf0:	463b      	mov	r3, r7
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6959      	ldr	r1, [r3, #20]
 800baf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800bb00:	1d38      	adds	r0, r7, #4
 800bb02:	6800      	ldr	r0, [r0, #0]
 800bb04:	f000 fd1a 	bl	800c53c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bb08:	1d3b      	adds	r3, r7, #4
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f107 020a 	add.w	r2, r7, #10
 800bb1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb26:	8013      	strh	r3, [r2, #0]
 800bb28:	f107 030a 	add.w	r3, r7, #10
 800bb2c:	f107 020a 	add.w	r2, r7, #10
 800bb30:	8812      	ldrh	r2, [r2, #0]
 800bb32:	f082 0210 	eor.w	r2, r2, #16
 800bb36:	801a      	strh	r2, [r3, #0]
 800bb38:	f107 030a 	add.w	r3, r7, #10
 800bb3c:	f107 020a 	add.w	r2, r7, #10
 800bb40:	8812      	ldrh	r2, [r2, #0]
 800bb42:	f082 0220 	eor.w	r2, r2, #32
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	441a      	add	r2, r3
 800bb56:	f107 030a 	add.w	r3, r7, #10
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	8013      	strh	r3, [r2, #0]
 800bb70:	e3b5      	b.n	800c2de <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bb72:	463b      	mov	r3, r7
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	7b1b      	ldrb	r3, [r3, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 8090 	bne.w	800bc9e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bb7e:	463b      	mov	r3, r7
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699a      	ldr	r2, [r3, #24]
 800bb84:	463b      	mov	r3, r7
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d90e      	bls.n	800bbac <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800bb8e:	463b      	mov	r3, r7
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800bb98:	463b      	mov	r3, r7
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bba2:	1ad2      	subs	r2, r2, r3
 800bba4:	463b      	mov	r3, r7
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	619a      	str	r2, [r3, #24]
 800bbaa:	e008      	b.n	800bbbe <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800bbac:	463b      	mov	r3, r7
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bbbe:	1d3b      	adds	r3, r7, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbc6:	1d3b      	adds	r3, r7, #4
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbdc:	463b      	mov	r3, r7
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	011a      	lsls	r2, r3, #4
 800bbe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bbe8:	4413      	add	r3, r2
 800bbea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d116      	bne.n	800bc28 <USB_EPStartXfer+0xf2c>
 800bbfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc0c:	801a      	strh	r2, [r3, #0]
 800bc0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc24:	801a      	strh	r2, [r3, #0]
 800bc26:	e32c      	b.n	800c282 <USB_EPStartXfer+0x1586>
 800bc28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc2c:	2b3e      	cmp	r3, #62	; 0x3e
 800bc2e:	d818      	bhi.n	800bc62 <USB_EPStartXfer+0xf66>
 800bc30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bc3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <USB_EPStartXfer+0xf54>
 800bc46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bc50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	029b      	lsls	r3, r3, #10
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc5e:	801a      	strh	r2, [r3, #0]
 800bc60:	e30f      	b.n	800c282 <USB_EPStartXfer+0x1586>
 800bc62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc66:	095b      	lsrs	r3, r3, #5
 800bc68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bc6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc70:	f003 031f 	and.w	r3, r3, #31
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d104      	bne.n	800bc82 <USB_EPStartXfer+0xf86>
 800bc78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bc82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	029b      	lsls	r3, r3, #10
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc9a:	801a      	strh	r2, [r3, #0]
 800bc9c:	e2f1      	b.n	800c282 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bc9e:	463b      	mov	r3, r7
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	78db      	ldrb	r3, [r3, #3]
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	f040 818f 	bne.w	800bfc8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcaa:	463b      	mov	r3, r7
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d175      	bne.n	800bda0 <USB_EPStartXfer+0x10a4>
 800bcb4:	1d3b      	adds	r3, r7, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcbc:	1d3b      	adds	r3, r7, #4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bccc:	4413      	add	r3, r2
 800bcce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	011a      	lsls	r2, r3, #4
 800bcda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcde:	4413      	add	r3, r2
 800bce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bce8:	463b      	mov	r3, r7
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d116      	bne.n	800bd20 <USB_EPStartXfer+0x1024>
 800bcf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd04:	801a      	strh	r2, [r3, #0]
 800bd06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd1c:	801a      	strh	r2, [r3, #0]
 800bd1e:	e065      	b.n	800bdec <USB_EPStartXfer+0x10f0>
 800bd20:	463b      	mov	r3, r7
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b3e      	cmp	r3, #62	; 0x3e
 800bd28:	d81a      	bhi.n	800bd60 <USB_EPStartXfer+0x1064>
 800bd2a:	463b      	mov	r3, r7
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	085b      	lsrs	r3, r3, #1
 800bd32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd36:	463b      	mov	r3, r7
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <USB_EPStartXfer+0x1052>
 800bd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd48:	3301      	adds	r3, #1
 800bd4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	029b      	lsls	r3, r3, #10
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd5c:	801a      	strh	r2, [r3, #0]
 800bd5e:	e045      	b.n	800bdec <USB_EPStartXfer+0x10f0>
 800bd60:	463b      	mov	r3, r7
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	095b      	lsrs	r3, r3, #5
 800bd68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd6c:	463b      	mov	r3, r7
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <USB_EPStartXfer+0x1088>
 800bd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	029b      	lsls	r3, r3, #10
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	e025      	b.n	800bdec <USB_EPStartXfer+0x10f0>
 800bda0:	463b      	mov	r3, r7
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d120      	bne.n	800bdec <USB_EPStartXfer+0x10f0>
 800bdaa:	1d3b      	adds	r3, r7, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdb2:	1d3b      	adds	r3, r7, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdc8:	463b      	mov	r3, r7
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	011a      	lsls	r2, r3, #4
 800bdd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bdda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdde:	463b      	mov	r3, r7
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bdea:	801a      	strh	r2, [r3, #0]
 800bdec:	1d3b      	adds	r3, r7, #4
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	785b      	ldrb	r3, [r3, #1]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d175      	bne.n	800beea <USB_EPStartXfer+0x11ee>
 800bdfe:	1d3b      	adds	r3, r7, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be0e:	b29b      	uxth	r3, r3
 800be10:	461a      	mov	r2, r3
 800be12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be16:	4413      	add	r3, r2
 800be18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be1c:	463b      	mov	r3, r7
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	011a      	lsls	r2, r3, #4
 800be24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be28:	4413      	add	r3, r2
 800be2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be32:	463b      	mov	r3, r7
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d116      	bne.n	800be6a <USB_EPStartXfer+0x116e>
 800be3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	b29b      	uxth	r3, r3
 800be44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be48:	b29a      	uxth	r2, r3
 800be4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be4e:	801a      	strh	r2, [r3, #0]
 800be50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be60:	b29a      	uxth	r2, r3
 800be62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	e061      	b.n	800bf2e <USB_EPStartXfer+0x1232>
 800be6a:	463b      	mov	r3, r7
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	2b3e      	cmp	r3, #62	; 0x3e
 800be72:	d81a      	bhi.n	800beaa <USB_EPStartXfer+0x11ae>
 800be74:	463b      	mov	r3, r7
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	085b      	lsrs	r3, r3, #1
 800be7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800be80:	463b      	mov	r3, r7
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <USB_EPStartXfer+0x119c>
 800be8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be92:	3301      	adds	r3, #1
 800be94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800be98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	029b      	lsls	r3, r3, #10
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bea6:	801a      	strh	r2, [r3, #0]
 800bea8:	e041      	b.n	800bf2e <USB_EPStartXfer+0x1232>
 800beaa:	463b      	mov	r3, r7
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	095b      	lsrs	r3, r3, #5
 800beb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800beb6:	463b      	mov	r3, r7
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	f003 031f 	and.w	r3, r3, #31
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d104      	bne.n	800bece <USB_EPStartXfer+0x11d2>
 800bec4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bec8:	3b01      	subs	r3, #1
 800beca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bece:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	029b      	lsls	r3, r3, #10
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bedc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e021      	b.n	800bf2e <USB_EPStartXfer+0x1232>
 800beea:	463b      	mov	r3, r7
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	785b      	ldrb	r3, [r3, #1]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d11c      	bne.n	800bf2e <USB_EPStartXfer+0x1232>
 800bef4:	1d3b      	adds	r3, r7, #4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800befc:	b29b      	uxth	r3, r3
 800befe:	461a      	mov	r2, r3
 800bf00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf04:	4413      	add	r3, r2
 800bf06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	011a      	lsls	r2, r3, #4
 800bf12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf16:	4413      	add	r3, r2
 800bf18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf20:	463b      	mov	r3, r7
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf2c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bf2e:	463b      	mov	r3, r7
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 81a4 	beq.w	800c282 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bf3a:	1d3b      	adds	r3, r7, #4
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	463b      	mov	r3, r7
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf4e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bf52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <USB_EPStartXfer+0x126a>
 800bf5a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bf5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10d      	bne.n	800bf82 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf66:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bf6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 8187 	bne.w	800c282 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf74:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f040 8180 	bne.w	800c282 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bf82:	1d3b      	adds	r3, r7, #4
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	463b      	mov	r3, r7
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800bfa0:	1d3b      	adds	r3, r7, #4
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	463b      	mov	r3, r7
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	441a      	add	r2, r3
 800bfae:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800bfb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	8013      	strh	r3, [r2, #0]
 800bfc6:	e15c      	b.n	800c282 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bfc8:	463b      	mov	r3, r7
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	78db      	ldrb	r3, [r3, #3]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	f040 8155 	bne.w	800c27e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	463b      	mov	r3, r7
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d90e      	bls.n	800c002 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800bfee:	463b      	mov	r3, r7
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	699a      	ldr	r2, [r3, #24]
 800bff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bff8:	1ad2      	subs	r2, r2, r3
 800bffa:	463b      	mov	r3, r7
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	619a      	str	r2, [r3, #24]
 800c000:	e008      	b.n	800c014 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800c002:	463b      	mov	r3, r7
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800c00c:	463b      	mov	r3, r7
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2200      	movs	r2, #0
 800c012:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c014:	463b      	mov	r3, r7
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d16f      	bne.n	800c0fe <USB_EPStartXfer+0x1402>
 800c01e:	1d3b      	adds	r3, r7, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c026:	1d3b      	adds	r3, r7, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c02e:	b29b      	uxth	r3, r3
 800c030:	461a      	mov	r2, r3
 800c032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c036:	4413      	add	r3, r2
 800c038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c03c:	463b      	mov	r3, r7
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	011a      	lsls	r2, r3, #4
 800c044:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c048:	4413      	add	r3, r2
 800c04a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c04e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d116      	bne.n	800c088 <USB_EPStartXfer+0x138c>
 800c05a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c066:	b29a      	uxth	r2, r3
 800c068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c06c:	801a      	strh	r2, [r3, #0]
 800c06e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07e:	b29a      	uxth	r2, r3
 800c080:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	e05f      	b.n	800c148 <USB_EPStartXfer+0x144c>
 800c088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c08c:	2b3e      	cmp	r3, #62	; 0x3e
 800c08e:	d818      	bhi.n	800c0c2 <USB_EPStartXfer+0x13c6>
 800c090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c094:	085b      	lsrs	r3, r3, #1
 800c096:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <USB_EPStartXfer+0x13b4>
 800c0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c0b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	029b      	lsls	r3, r3, #10
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0be:	801a      	strh	r2, [r3, #0]
 800c0c0:	e042      	b.n	800c148 <USB_EPStartXfer+0x144c>
 800c0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0c6:	095b      	lsrs	r3, r3, #5
 800c0c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c0cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0d0:	f003 031f 	and.w	r3, r3, #31
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d104      	bne.n	800c0e2 <USB_EPStartXfer+0x13e6>
 800c0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c0e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	029b      	lsls	r3, r3, #10
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0fa:	801a      	strh	r2, [r3, #0]
 800c0fc:	e024      	b.n	800c148 <USB_EPStartXfer+0x144c>
 800c0fe:	463b      	mov	r3, r7
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d11f      	bne.n	800c148 <USB_EPStartXfer+0x144c>
 800c108:	1d3b      	adds	r3, r7, #4
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c110:	1d3b      	adds	r3, r7, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c118:	b29b      	uxth	r3, r3
 800c11a:	461a      	mov	r2, r3
 800c11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c120:	4413      	add	r3, r2
 800c122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c126:	463b      	mov	r3, r7
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	011a      	lsls	r2, r3, #4
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	4413      	add	r3, r2
 800c134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c138:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c13c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c140:	b29a      	uxth	r2, r3
 800c142:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	1d3b      	adds	r3, r7, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c150:	463b      	mov	r3, r7
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d16f      	bne.n	800c23a <USB_EPStartXfer+0x153e>
 800c15a:	1d3b      	adds	r3, r7, #4
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c162:	1d3b      	adds	r3, r7, #4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	461a      	mov	r2, r3
 800c16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c172:	4413      	add	r3, r2
 800c174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c178:	463b      	mov	r3, r7
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	011a      	lsls	r2, r3, #4
 800c180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c184:	4413      	add	r3, r2
 800c186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c18a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c18e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c192:	2b00      	cmp	r3, #0
 800c194:	d116      	bne.n	800c1c4 <USB_EPStartXfer+0x14c8>
 800c196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e05e      	b.n	800c282 <USB_EPStartXfer+0x1586>
 800c1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1c8:	2b3e      	cmp	r3, #62	; 0x3e
 800c1ca:	d818      	bhi.n	800c1fe <USB_EPStartXfer+0x1502>
 800c1cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <USB_EPStartXfer+0x14f0>
 800c1e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c1ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	029b      	lsls	r3, r3, #10
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1fa:	801a      	strh	r2, [r3, #0]
 800c1fc:	e041      	b.n	800c282 <USB_EPStartXfer+0x1586>
 800c1fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c202:	095b      	lsrs	r3, r3, #5
 800c204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c20c:	f003 031f 	and.w	r3, r3, #31
 800c210:	2b00      	cmp	r3, #0
 800c212:	d104      	bne.n	800c21e <USB_EPStartXfer+0x1522>
 800c214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c218:	3b01      	subs	r3, #1
 800c21a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c21e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c222:	b29b      	uxth	r3, r3
 800c224:	029b      	lsls	r3, r3, #10
 800c226:	b29b      	uxth	r3, r3
 800c228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c22c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c230:	b29a      	uxth	r2, r3
 800c232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c236:	801a      	strh	r2, [r3, #0]
 800c238:	e023      	b.n	800c282 <USB_EPStartXfer+0x1586>
 800c23a:	463b      	mov	r3, r7
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	785b      	ldrb	r3, [r3, #1]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d11e      	bne.n	800c282 <USB_EPStartXfer+0x1586>
 800c244:	1d3b      	adds	r3, r7, #4
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c254:	4413      	add	r3, r2
 800c256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c25a:	463b      	mov	r3, r7
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	011a      	lsls	r2, r3, #4
 800c262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c266:	4413      	add	r3, r2
 800c268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c26c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c274:	b29a      	uxth	r2, r3
 800c276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c27a:	801a      	strh	r2, [r3, #0]
 800c27c:	e001      	b.n	800c282 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e02e      	b.n	800c2e0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c282:	1d3b      	adds	r3, r7, #4
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	463b      	mov	r3, r7
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c29c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c2a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c2a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c2a8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c2ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c2b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c2b4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800c2b8:	1d3b      	adds	r3, r7, #4
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	463b      	mov	r3, r7
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	441a      	add	r2, r3
 800c2c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	785b      	ldrb	r3, [r3, #1]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d020      	beq.n	800c33e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c30e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c312:	81bb      	strh	r3, [r7, #12]
 800c314:	89bb      	ldrh	r3, [r7, #12]
 800c316:	f083 0310 	eor.w	r3, r3, #16
 800c31a:	81bb      	strh	r3, [r7, #12]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	441a      	add	r2, r3
 800c326:	89bb      	ldrh	r3, [r7, #12]
 800c328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c338:	b29b      	uxth	r3, r3
 800c33a:	8013      	strh	r3, [r2, #0]
 800c33c:	e01f      	b.n	800c37e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c354:	81fb      	strh	r3, [r7, #14]
 800c356:	89fb      	ldrh	r3, [r7, #14]
 800c358:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c35c:	81fb      	strh	r3, [r7, #14]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	441a      	add	r2, r3
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c36e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr

0800c38a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	7b1b      	ldrb	r3, [r3, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f040 809d 	bne.w	800c4d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d04c      	beq.n	800c440 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4413      	add	r3, r2
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	823b      	strh	r3, [r7, #16]
 800c3b4:	8a3b      	ldrh	r3, [r7, #16]
 800c3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01b      	beq.n	800c3f6 <USB_EPClearStall+0x6c>
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d4:	81fb      	strh	r3, [r7, #14]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	441a      	add	r2, r3
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	78db      	ldrb	r3, [r3, #3]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d06c      	beq.n	800c4d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c414:	81bb      	strh	r3, [r7, #12]
 800c416:	89bb      	ldrh	r3, [r7, #12]
 800c418:	f083 0320 	eor.w	r3, r3, #32
 800c41c:	81bb      	strh	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	441a      	add	r2, r3
 800c428:	89bb      	ldrh	r3, [r7, #12]
 800c42a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c42e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]
 800c43e:	e04b      	b.n	800c4d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	82fb      	strh	r3, [r7, #22]
 800c44e:	8afb      	ldrh	r3, [r7, #22]
 800c450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01b      	beq.n	800c490 <USB_EPClearStall+0x106>
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	b29b      	uxth	r3, r3
 800c466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c46e:	82bb      	strh	r3, [r7, #20]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	441a      	add	r2, r3
 800c47a:	8abb      	ldrh	r3, [r7, #20]
 800c47c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4a6:	827b      	strh	r3, [r7, #18]
 800c4a8:	8a7b      	ldrh	r3, [r7, #18]
 800c4aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c4ae:	827b      	strh	r3, [r7, #18]
 800c4b0:	8a7b      	ldrh	r3, [r7, #18]
 800c4b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c4b6:	827b      	strh	r3, [r7, #18]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	8a7b      	ldrh	r3, [r7, #18]
 800c4c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	371c      	adds	r7, #28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bc80      	pop	{r7}
 800c4e2:	4770      	bx	lr

0800c4e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2280      	movs	r2, #128	; 0x80
 800c4fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	bc80      	pop	{r7}
 800c508:	4770      	bx	lr

0800c50a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	bc80      	pop	{r7}
 800c51c:	4770      	bx	lr

0800c51e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c51e:	b480      	push	{r7}
 800c520:	b085      	sub	sp, #20
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c530:	68fb      	ldr	r3, [r7, #12]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	bc80      	pop	{r7}
 800c53a:	4770      	bx	lr

0800c53c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b08d      	sub	sp, #52	; 0x34
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4611      	mov	r1, r2
 800c548:	461a      	mov	r2, r3
 800c54a:	460b      	mov	r3, r1
 800c54c:	80fb      	strh	r3, [r7, #6]
 800c54e:	4613      	mov	r3, r2
 800c550:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c552:	88bb      	ldrh	r3, [r7, #4]
 800c554:	3301      	adds	r3, #1
 800c556:	085b      	lsrs	r3, r3, #1
 800c558:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	005a      	lsls	r2, r3, #1
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	4413      	add	r3, r2
 800c56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c574:	e01e      	b.n	800c5b4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	3301      	adds	r3, #1
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b29b      	uxth	r3, r3
 800c588:	021b      	lsls	r3, r3, #8
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	461a      	mov	r2, r3
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	b29a      	uxth	r2, r3
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59e:	3302      	adds	r3, #2
 800c5a0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1dd      	bne.n	800c576 <USB_WritePMA+0x3a>
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	3734      	adds	r7, #52	; 0x34
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bc80      	pop	{r7}
 800c5c4:	4770      	bx	lr

0800c5c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b08b      	sub	sp, #44	; 0x2c
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	80fb      	strh	r3, [r7, #6]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c5dc:	88bb      	ldrh	r3, [r7, #4]
 800c5de:	085b      	lsrs	r3, r3, #1
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c5ec:	88fb      	ldrh	r3, [r7, #6]
 800c5ee:	005a      	lsls	r2, r3, #1
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5f8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5fe:	e01b      	b.n	800c638 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	b29b      	uxth	r3, r3
 800c606:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	3302      	adds	r3, #2
 800c60c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	b2da      	uxtb	r2, r3
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	3301      	adds	r3, #1
 800c61a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	0a1b      	lsrs	r3, r3, #8
 800c620:	b2da      	uxtb	r2, r3
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	3301      	adds	r3, #1
 800c62a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	3302      	adds	r3, #2
 800c630:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	3b01      	subs	r3, #1
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1e0      	bne.n	800c600 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c63e:	88bb      	ldrh	r3, [r7, #4]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	b29b      	uxth	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d007      	beq.n	800c65a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	b2da      	uxtb	r2, r3
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	701a      	strb	r2, [r3, #0]
  }
}
 800c65a:	bf00      	nop
 800c65c:	372c      	adds	r7, #44	; 0x2c
 800c65e:	46bd      	mov	sp, r7
 800c660:	bc80      	pop	{r7}
 800c662:	4770      	bx	lr

0800c664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c668:	4904      	ldr	r1, [pc, #16]	; (800c67c <MX_FATFS_Init+0x18>)
 800c66a:	4805      	ldr	r0, [pc, #20]	; (800c680 <MX_FATFS_Init+0x1c>)
 800c66c:	f004 f9d8 	bl	8010a20 <FATFS_LinkDriver>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	4b03      	ldr	r3, [pc, #12]	; (800c684 <MX_FATFS_Init+0x20>)
 800c676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000a14 	.word	0x20000a14
 800c680:	200000a4 	.word	0x200000a4
 800c684:	20000a18 	.word	0x20000a18

0800c688 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c68c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	46bd      	mov	sp, r7
 800c692:	bc80      	pop	{r7}
 800c694:	4770      	bx	lr

0800c696 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b082      	sub	sp, #8
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	4603      	mov	r3, r0
 800c69e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 f9d8 	bl	800ca58 <USER_SPI_initialize>
 800c6a8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fab6 	bl	800cc30 <USER_SPI_status>
 800c6c4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
 800c6da:	4603      	mov	r3, r0
 800c6dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800c6de:	7bf8      	ldrb	r0, [r7, #15]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	68b9      	ldr	r1, [r7, #8]
 800c6e6:	f000 fab7 	bl	800cc58 <USER_SPI_read>
 800c6ea:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	607a      	str	r2, [r7, #4]
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800c704:	7bf8      	ldrb	r0, [r7, #15]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	f000 fb0a 	bl	800cd24 <USER_SPI_write>
 800c710:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	4603      	mov	r3, r0
 800c722:	603a      	str	r2, [r7, #0]
 800c724:	71fb      	strb	r3, [r7, #7]
 800c726:	460b      	mov	r3, r1
 800c728:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800c72a:	79b9      	ldrb	r1, [r7, #6]
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fb73 	bl	800ce1c <USER_SPI_ioctl>
 800c736:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c748:	f7f7 ff28 	bl	800459c <HAL_GetTick>
 800c74c:	4603      	mov	r3, r0
 800c74e:	4a04      	ldr	r2, [pc, #16]	; (800c760 <SPI_Timer_On+0x20>)
 800c750:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800c752:	4a04      	ldr	r2, [pc, #16]	; (800c764 <SPI_Timer_On+0x24>)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6013      	str	r3, [r2, #0]
}
 800c758:	bf00      	nop
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20000e7c 	.word	0x20000e7c
 800c764:	20000e80 	.word	0x20000e80

0800c768 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c76c:	f7f7 ff16 	bl	800459c <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	4b06      	ldr	r3, [pc, #24]	; (800c78c <SPI_Timer_Status+0x24>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1ad2      	subs	r2, r2, r3
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <SPI_Timer_Status+0x28>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	bf34      	ite	cc
 800c780:	2301      	movcc	r3, #1
 800c782:	2300      	movcs	r3, #0
 800c784:	b2db      	uxtb	r3, r3
}
 800c786:	4618      	mov	r0, r3
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20000e7c 	.word	0x20000e7c
 800c790:	20000e80 	.word	0x20000e80

0800c794 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af02      	add	r7, sp, #8
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c79e:	f107 020f 	add.w	r2, r7, #15
 800c7a2:	1df9      	adds	r1, r7, #7
 800c7a4:	2332      	movs	r3, #50	; 0x32
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	4804      	ldr	r0, [pc, #16]	; (800c7bc <xchg_spi+0x28>)
 800c7ac:	f7fc fa28 	bl	8008c00 <HAL_SPI_TransmitReceive>
    return rxDat;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000534 	.word	0x20000534

0800c7c0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c7c0:	b590      	push	{r4, r7, lr}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	e00a      	b.n	800c7e6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	18d4      	adds	r4, r2, r3
 800c7d6:	20ff      	movs	r0, #255	; 0xff
 800c7d8:	f7ff ffdc 	bl	800c794 <xchg_spi>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d3f0      	bcc.n	800c7d0 <rcvr_spi_multi+0x10>
	}
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd90      	pop	{r4, r7, pc}

0800c7f8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800c802:	2300      	movs	r3, #0
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	e009      	b.n	800c81c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff ffbf 	bl	800c794 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3301      	adds	r3, #1
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d3f1      	bcc.n	800c808 <xmit_spi_multi+0x10>
	}
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b086      	sub	sp, #24
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c836:	f7f7 feb1 	bl	800459c <HAL_GetTick>
 800c83a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c840:	20ff      	movs	r0, #255	; 0xff
 800c842:	f7ff ffa7 	bl	800c794 <xchg_spi>
 800c846:	4603      	mov	r3, r0
 800c848:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	2bff      	cmp	r3, #255	; 0xff
 800c84e:	d007      	beq.n	800c860 <wait_ready+0x32>
 800c850:	f7f7 fea4 	bl	800459c <HAL_GetTick>
 800c854:	4602      	mov	r2, r0
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d8ef      	bhi.n	800c840 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	2bff      	cmp	r3, #255	; 0xff
 800c864:	bf0c      	ite	eq
 800c866:	2301      	moveq	r3, #1
 800c868:	2300      	movne	r3, #0
 800c86a:	b2db      	uxtb	r3, r3
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c878:	2201      	movs	r2, #1
 800c87a:	2101      	movs	r1, #1
 800c87c:	4803      	ldr	r0, [pc, #12]	; (800c88c <despiselect+0x18>)
 800c87e:	f7f8 ff5c 	bl	800573a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c882:	20ff      	movs	r0, #255	; 0xff
 800c884:	f7ff ff86 	bl	800c794 <xchg_spi>

}
 800c888:	bf00      	nop
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	40020400 	.word	0x40020400

0800c890 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c894:	2200      	movs	r2, #0
 800c896:	2101      	movs	r1, #1
 800c898:	4809      	ldr	r0, [pc, #36]	; (800c8c0 <spiselect+0x30>)
 800c89a:	f7f8 ff4e 	bl	800573a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c89e:	20ff      	movs	r0, #255	; 0xff
 800c8a0:	f7ff ff78 	bl	800c794 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c8a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c8a8:	f7ff ffc1 	bl	800c82e <wait_ready>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d001      	beq.n	800c8b6 <spiselect+0x26>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e002      	b.n	800c8bc <spiselect+0x2c>

	despiselect();
 800c8b6:	f7ff ffdd 	bl	800c874 <despiselect>
	return 0;	/* Timeout */
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	40020400 	.word	0x40020400

0800c8c4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c8ce:	20c8      	movs	r0, #200	; 0xc8
 800c8d0:	f7ff ff36 	bl	800c740 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c8d4:	20ff      	movs	r0, #255	; 0xff
 800c8d6:	f7ff ff5d 	bl	800c794 <xchg_spi>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	2bff      	cmp	r3, #255	; 0xff
 800c8e2:	d104      	bne.n	800c8ee <rcvr_datablock+0x2a>
 800c8e4:	f7ff ff40 	bl	800c768 <SPI_Timer_Status>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1f2      	bne.n	800c8d4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	2bfe      	cmp	r3, #254	; 0xfe
 800c8f2:	d001      	beq.n	800c8f8 <rcvr_datablock+0x34>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e00a      	b.n	800c90e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff ff60 	bl	800c7c0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c900:	20ff      	movs	r0, #255	; 0xff
 800c902:	f7ff ff47 	bl	800c794 <xchg_spi>
 800c906:	20ff      	movs	r0, #255	; 0xff
 800c908:	f7ff ff44 	bl	800c794 <xchg_spi>

	return 1;						/* Function succeeded */
 800c90c:	2301      	movs	r3, #1
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c926:	f7ff ff82 	bl	800c82e <wait_ready>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <xmit_datablock+0x1e>
 800c930:	2300      	movs	r3, #0
 800c932:	e01e      	b.n	800c972 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff ff2c 	bl	800c794 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c93c:	78fb      	ldrb	r3, [r7, #3]
 800c93e:	2bfd      	cmp	r3, #253	; 0xfd
 800c940:	d016      	beq.n	800c970 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c942:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff ff56 	bl	800c7f8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c94c:	20ff      	movs	r0, #255	; 0xff
 800c94e:	f7ff ff21 	bl	800c794 <xchg_spi>
 800c952:	20ff      	movs	r0, #255	; 0xff
 800c954:	f7ff ff1e 	bl	800c794 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c958:	20ff      	movs	r0, #255	; 0xff
 800c95a:	f7ff ff1b 	bl	800c794 <xchg_spi>
 800c95e:	4603      	mov	r3, r0
 800c960:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	f003 031f 	and.w	r3, r3, #31
 800c968:	2b05      	cmp	r3, #5
 800c96a:	d001      	beq.n	800c970 <xmit_datablock+0x5a>
 800c96c:	2300      	movs	r3, #0
 800c96e:	e000      	b.n	800c972 <xmit_datablock+0x5c>
	}
	return 1;
 800c970:	2301      	movs	r3, #1
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	4603      	mov	r3, r0
 800c982:	6039      	str	r1, [r7, #0]
 800c984:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	da0e      	bge.n	800c9ac <send_cmd+0x32>
		cmd &= 0x7F;
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c994:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c996:	2100      	movs	r1, #0
 800c998:	2037      	movs	r0, #55	; 0x37
 800c99a:	f7ff ffee 	bl	800c97a <send_cmd>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c9a2:	7bbb      	ldrb	r3, [r7, #14]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d901      	bls.n	800c9ac <send_cmd+0x32>
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	e051      	b.n	800ca50 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	2b0c      	cmp	r3, #12
 800c9b0:	d008      	beq.n	800c9c4 <send_cmd+0x4a>
		despiselect();
 800c9b2:	f7ff ff5f 	bl	800c874 <despiselect>
		if (!spiselect()) return 0xFF;
 800c9b6:	f7ff ff6b 	bl	800c890 <spiselect>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <send_cmd+0x4a>
 800c9c0:	23ff      	movs	r3, #255	; 0xff
 800c9c2:	e045      	b.n	800ca50 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff fee1 	bl	800c794 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	0e1b      	lsrs	r3, r3, #24
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff fedb 	bl	800c794 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	0c1b      	lsrs	r3, r3, #16
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff fed5 	bl	800c794 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	0a1b      	lsrs	r3, r3, #8
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fecf 	bl	800c794 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff feca 	bl	800c794 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ca00:	2301      	movs	r3, #1
 800ca02:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <send_cmd+0x94>
 800ca0a:	2395      	movs	r3, #149	; 0x95
 800ca0c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d101      	bne.n	800ca18 <send_cmd+0x9e>
 800ca14:	2387      	movs	r3, #135	; 0x87
 800ca16:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff feba 	bl	800c794 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	2b0c      	cmp	r3, #12
 800ca24:	d102      	bne.n	800ca2c <send_cmd+0xb2>
 800ca26:	20ff      	movs	r0, #255	; 0xff
 800ca28:	f7ff feb4 	bl	800c794 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ca2c:	230a      	movs	r3, #10
 800ca2e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ca30:	20ff      	movs	r0, #255	; 0xff
 800ca32:	f7ff feaf 	bl	800c794 <xchg_spi>
 800ca36:	4603      	mov	r3, r0
 800ca38:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ca3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da05      	bge.n	800ca4e <send_cmd+0xd4>
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	73fb      	strb	r3, [r7, #15]
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <send_cmd+0xb6>

	return res;							/* Return received response */
 800ca4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <USER_SPI_initialize+0x14>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e0d6      	b.n	800cc1a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ca6c:	4b6d      	ldr	r3, [pc, #436]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <USER_SPI_initialize+0x2a>
 800ca7a:	4b6a      	ldr	r3, [pc, #424]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	e0cb      	b.n	800cc1a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800ca82:	4b69      	ldr	r3, [pc, #420]	; (800cc28 <USER_SPI_initialize+0x1d0>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca8c:	4b66      	ldr	r3, [pc, #408]	; (800cc28 <USER_SPI_initialize+0x1d0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800ca94:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ca96:	230a      	movs	r3, #10
 800ca98:	73fb      	strb	r3, [r7, #15]
 800ca9a:	e005      	b.n	800caa8 <USER_SPI_initialize+0x50>
 800ca9c:	20ff      	movs	r0, #255	; 0xff
 800ca9e:	f7ff fe79 	bl	800c794 <xchg_spi>
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	73fb      	strb	r3, [r7, #15]
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f6      	bne.n	800ca9c <USER_SPI_initialize+0x44>

	ty = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800cab2:	2100      	movs	r1, #0
 800cab4:	2000      	movs	r0, #0
 800cab6:	f7ff ff60 	bl	800c97a <send_cmd>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	f040 808b 	bne.w	800cbd8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800cac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cac6:	f7ff fe3b 	bl	800c740 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800caca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cace:	2008      	movs	r0, #8
 800cad0:	f7ff ff53 	bl	800c97a <send_cmd>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d151      	bne.n	800cb7e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800cada:	2300      	movs	r3, #0
 800cadc:	73fb      	strb	r3, [r7, #15]
 800cade:	e00d      	b.n	800cafc <USER_SPI_initialize+0xa4>
 800cae0:	7bfc      	ldrb	r4, [r7, #15]
 800cae2:	20ff      	movs	r0, #255	; 0xff
 800cae4:	f7ff fe56 	bl	800c794 <xchg_spi>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	f107 0310 	add.w	r3, r7, #16
 800caf0:	4423      	add	r3, r4
 800caf2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	3301      	adds	r3, #1
 800cafa:	73fb      	strb	r3, [r7, #15]
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d9ee      	bls.n	800cae0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800cb02:	7abb      	ldrb	r3, [r7, #10]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d167      	bne.n	800cbd8 <USER_SPI_initialize+0x180>
 800cb08:	7afb      	ldrb	r3, [r7, #11]
 800cb0a:	2baa      	cmp	r3, #170	; 0xaa
 800cb0c:	d164      	bne.n	800cbd8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800cb0e:	bf00      	nop
 800cb10:	f7ff fe2a 	bl	800c768 <SPI_Timer_Status>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <USER_SPI_initialize+0xd2>
 800cb1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cb1e:	20a9      	movs	r0, #169	; 0xa9
 800cb20:	f7ff ff2b 	bl	800c97a <send_cmd>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f2      	bne.n	800cb10 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800cb2a:	f7ff fe1d 	bl	800c768 <SPI_Timer_Status>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d051      	beq.n	800cbd8 <USER_SPI_initialize+0x180>
 800cb34:	2100      	movs	r1, #0
 800cb36:	203a      	movs	r0, #58	; 0x3a
 800cb38:	f7ff ff1f 	bl	800c97a <send_cmd>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d14a      	bne.n	800cbd8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
 800cb46:	e00d      	b.n	800cb64 <USER_SPI_initialize+0x10c>
 800cb48:	7bfc      	ldrb	r4, [r7, #15]
 800cb4a:	20ff      	movs	r0, #255	; 0xff
 800cb4c:	f7ff fe22 	bl	800c794 <xchg_spi>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	f107 0310 	add.w	r3, r7, #16
 800cb58:	4423      	add	r3, r4
 800cb5a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	3301      	adds	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d9ee      	bls.n	800cb48 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800cb6a:	7a3b      	ldrb	r3, [r7, #8]
 800cb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <USER_SPI_initialize+0x120>
 800cb74:	230c      	movs	r3, #12
 800cb76:	e000      	b.n	800cb7a <USER_SPI_initialize+0x122>
 800cb78:	2304      	movs	r3, #4
 800cb7a:	737b      	strb	r3, [r7, #13]
 800cb7c:	e02c      	b.n	800cbd8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800cb7e:	2100      	movs	r1, #0
 800cb80:	20a9      	movs	r0, #169	; 0xa9
 800cb82:	f7ff fefa 	bl	800c97a <send_cmd>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d804      	bhi.n	800cb96 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	737b      	strb	r3, [r7, #13]
 800cb90:	23a9      	movs	r3, #169	; 0xa9
 800cb92:	73bb      	strb	r3, [r7, #14]
 800cb94:	e003      	b.n	800cb9e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800cb96:	2301      	movs	r3, #1
 800cb98:	737b      	strb	r3, [r7, #13]
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800cb9e:	bf00      	nop
 800cba0:	f7ff fde2 	bl	800c768 <SPI_Timer_Status>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d007      	beq.n	800cbba <USER_SPI_initialize+0x162>
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fee3 	bl	800c97a <send_cmd>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1f2      	bne.n	800cba0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800cbba:	f7ff fdd5 	bl	800c768 <SPI_Timer_Status>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d007      	beq.n	800cbd4 <USER_SPI_initialize+0x17c>
 800cbc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbc8:	2010      	movs	r0, #16
 800cbca:	f7ff fed6 	bl	800c97a <send_cmd>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <USER_SPI_initialize+0x180>
				ty = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800cbd8:	4a14      	ldr	r2, [pc, #80]	; (800cc2c <USER_SPI_initialize+0x1d4>)
 800cbda:	7b7b      	ldrb	r3, [r7, #13]
 800cbdc:	7013      	strb	r3, [r2, #0]
	despiselect();
 800cbde:	f7ff fe49 	bl	800c874 <despiselect>

	if (ty) {			/* OK */
 800cbe2:	7b7b      	ldrb	r3, [r7, #13]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d012      	beq.n	800cc0e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <USER_SPI_initialize+0x1d0>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cbf2:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <USER_SPI_initialize+0x1d0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0208 	orr.w	r2, r2, #8
 800cbfa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800cbfc:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	f023 0301 	bic.w	r3, r3, #1
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800cc0a:	701a      	strb	r2, [r3, #0]
 800cc0c:	e002      	b.n	800cc14 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800cc0e:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800cc10:	2201      	movs	r2, #1
 800cc12:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <USER_SPI_initialize+0x1cc>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	b2db      	uxtb	r3, r3
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd90      	pop	{r4, r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200000b8 	.word	0x200000b8
 800cc28:	20000534 	.word	0x20000534
 800cc2c:	2000076a 	.word	0x2000076a

0800cc30 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <USER_SPI_status+0x14>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e002      	b.n	800cc4a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800cc44:	4b03      	ldr	r3, [pc, #12]	; (800cc54 <USER_SPI_status+0x24>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	b2db      	uxtb	r3, r3
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bc80      	pop	{r7}
 800cc52:	4770      	bx	lr
 800cc54:	200000b8 	.word	0x200000b8

0800cc58 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d102      	bne.n	800cc74 <USER_SPI_read+0x1c>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <USER_SPI_read+0x20>
 800cc74:	2304      	movs	r3, #4
 800cc76:	e04d      	b.n	800cd14 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800cc78:	4b28      	ldr	r3, [pc, #160]	; (800cd1c <USER_SPI_read+0xc4>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <USER_SPI_read+0x32>
 800cc86:	2303      	movs	r3, #3
 800cc88:	e044      	b.n	800cd14 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800cc8a:	4b25      	ldr	r3, [pc, #148]	; (800cd20 <USER_SPI_read+0xc8>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 0308 	and.w	r3, r3, #8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d102      	bne.n	800cc9c <USER_SPI_read+0x44>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	025b      	lsls	r3, r3, #9
 800cc9a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d111      	bne.n	800ccc6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	2011      	movs	r0, #17
 800cca6:	f7ff fe68 	bl	800c97a <send_cmd>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d129      	bne.n	800cd04 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ccb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ccb4:	68b8      	ldr	r0, [r7, #8]
 800ccb6:	f7ff fe05 	bl	800c8c4 <rcvr_datablock>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d021      	beq.n	800cd04 <USER_SPI_read+0xac>
			count = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	e01e      	b.n	800cd04 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	2012      	movs	r0, #18
 800ccca:	f7ff fe56 	bl	800c97a <send_cmd>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d117      	bne.n	800cd04 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ccd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ccd8:	68b8      	ldr	r0, [r7, #8]
 800ccda:	f7ff fdf3 	bl	800c8c4 <rcvr_datablock>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00a      	beq.n	800ccfa <USER_SPI_read+0xa2>
				buff += 512;
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ccea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	603b      	str	r3, [r7, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1ed      	bne.n	800ccd4 <USER_SPI_read+0x7c>
 800ccf8:	e000      	b.n	800ccfc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ccfa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	200c      	movs	r0, #12
 800cd00:	f7ff fe3b 	bl	800c97a <send_cmd>
		}
	}
	despiselect();
 800cd04:	f7ff fdb6 	bl	800c874 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	bf14      	ite	ne
 800cd0e:	2301      	movne	r3, #1
 800cd10:	2300      	moveq	r3, #0
 800cd12:	b2db      	uxtb	r3, r3
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	200000b8 	.word	0x200000b8
 800cd20:	2000076a 	.word	0x2000076a

0800cd24 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d102      	bne.n	800cd40 <USER_SPI_write+0x1c>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <USER_SPI_write+0x20>
 800cd40:	2304      	movs	r3, #4
 800cd42:	e063      	b.n	800ce0c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800cd44:	4b33      	ldr	r3, [pc, #204]	; (800ce14 <USER_SPI_write+0xf0>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <USER_SPI_write+0x32>
 800cd52:	2303      	movs	r3, #3
 800cd54:	e05a      	b.n	800ce0c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800cd56:	4b2f      	ldr	r3, [pc, #188]	; (800ce14 <USER_SPI_write+0xf0>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	f003 0304 	and.w	r3, r3, #4
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <USER_SPI_write+0x44>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e051      	b.n	800ce0c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800cd68:	4b2b      	ldr	r3, [pc, #172]	; (800ce18 <USER_SPI_write+0xf4>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 0308 	and.w	r3, r3, #8
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <USER_SPI_write+0x56>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	025b      	lsls	r3, r3, #9
 800cd78:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d110      	bne.n	800cda2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	2018      	movs	r0, #24
 800cd84:	f7ff fdf9 	bl	800c97a <send_cmd>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d136      	bne.n	800cdfc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800cd8e:	21fe      	movs	r1, #254	; 0xfe
 800cd90:	68b8      	ldr	r0, [r7, #8]
 800cd92:	f7ff fdc0 	bl	800c916 <xmit_datablock>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d02f      	beq.n	800cdfc <USER_SPI_write+0xd8>
			count = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	e02c      	b.n	800cdfc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800cda2:	4b1d      	ldr	r3, [pc, #116]	; (800ce18 <USER_SPI_write+0xf4>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	f003 0306 	and.w	r3, r3, #6
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <USER_SPI_write+0x92>
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	2097      	movs	r0, #151	; 0x97
 800cdb2:	f7ff fde2 	bl	800c97a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	2019      	movs	r0, #25
 800cdba:	f7ff fdde 	bl	800c97a <send_cmd>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d11b      	bne.n	800cdfc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800cdc4:	21fc      	movs	r1, #252	; 0xfc
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f7ff fda5 	bl	800c916 <xmit_datablock>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <USER_SPI_write+0xc4>
				buff += 512;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cdd8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1ee      	bne.n	800cdc4 <USER_SPI_write+0xa0>
 800cde6:	e000      	b.n	800cdea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800cde8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800cdea:	21fd      	movs	r1, #253	; 0xfd
 800cdec:	2000      	movs	r0, #0
 800cdee:	f7ff fd92 	bl	800c916 <xmit_datablock>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <USER_SPI_write+0xd8>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800cdfc:	f7ff fd3a 	bl	800c874 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	bf14      	ite	ne
 800ce06:	2301      	movne	r3, #1
 800ce08:	2300      	moveq	r3, #0
 800ce0a:	b2db      	uxtb	r3, r3
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	200000b8 	.word	0x200000b8
 800ce18:	2000076a 	.word	0x2000076a

0800ce1c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08c      	sub	sp, #48	; 0x30
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	603a      	str	r2, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <USER_SPI_ioctl+0x1a>
 800ce32:	2304      	movs	r3, #4
 800ce34:	e15a      	b.n	800d0ec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ce36:	4baf      	ldr	r3, [pc, #700]	; (800d0f4 <USER_SPI_ioctl+0x2d8>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <USER_SPI_ioctl+0x2c>
 800ce44:	2303      	movs	r3, #3
 800ce46:	e151      	b.n	800d0ec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800ce4e:	79bb      	ldrb	r3, [r7, #6]
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	f200 8136 	bhi.w	800d0c2 <USER_SPI_ioctl+0x2a6>
 800ce56:	a201      	add	r2, pc, #4	; (adr r2, 800ce5c <USER_SPI_ioctl+0x40>)
 800ce58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5c:	0800ce71 	.word	0x0800ce71
 800ce60:	0800ce85 	.word	0x0800ce85
 800ce64:	0800d0c3 	.word	0x0800d0c3
 800ce68:	0800cf31 	.word	0x0800cf31
 800ce6c:	0800d027 	.word	0x0800d027
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ce70:	f7ff fd0e 	bl	800c890 <spiselect>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 8127 	beq.w	800d0ca <USER_SPI_ioctl+0x2ae>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ce82:	e122      	b.n	800d0ca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ce84:	2100      	movs	r1, #0
 800ce86:	2009      	movs	r0, #9
 800ce88:	f7ff fd77 	bl	800c97a <send_cmd>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 811d 	bne.w	800d0ce <USER_SPI_ioctl+0x2b2>
 800ce94:	f107 030c 	add.w	r3, r7, #12
 800ce98:	2110      	movs	r1, #16
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff fd12 	bl	800c8c4 <rcvr_datablock>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 8113 	beq.w	800d0ce <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800cea8:	7b3b      	ldrb	r3, [r7, #12]
 800ceaa:	099b      	lsrs	r3, r3, #6
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d111      	bne.n	800ced6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ceb2:	7d7b      	ldrb	r3, [r7, #21]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	7d3b      	ldrb	r3, [r7, #20]
 800ceb8:	021b      	lsls	r3, r3, #8
 800ceba:	4413      	add	r3, r2
 800cebc:	461a      	mov	r2, r3
 800cebe:	7cfb      	ldrb	r3, [r7, #19]
 800cec0:	041b      	lsls	r3, r3, #16
 800cec2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800cec6:	4413      	add	r3, r2
 800cec8:	3301      	adds	r3, #1
 800ceca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	029a      	lsls	r2, r3, #10
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	e028      	b.n	800cf28 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ced6:	7c7b      	ldrb	r3, [r7, #17]
 800ced8:	f003 030f 	and.w	r3, r3, #15
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	7dbb      	ldrb	r3, [r7, #22]
 800cee0:	09db      	lsrs	r3, r3, #7
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	4413      	add	r3, r2
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	7d7b      	ldrb	r3, [r7, #21]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	f003 0306 	and.w	r3, r3, #6
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	4413      	add	r3, r2
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	3302      	adds	r3, #2
 800cefa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800cefe:	7d3b      	ldrb	r3, [r7, #20]
 800cf00:	099b      	lsrs	r3, r3, #6
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	461a      	mov	r2, r3
 800cf06:	7cfb      	ldrb	r3, [r7, #19]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	441a      	add	r2, r3
 800cf0c:	7cbb      	ldrb	r3, [r7, #18]
 800cf0e:	029b      	lsls	r3, r3, #10
 800cf10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cf14:	4413      	add	r3, r2
 800cf16:	3301      	adds	r3, #1
 800cf18:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800cf1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cf1e:	3b09      	subs	r3, #9
 800cf20:	69fa      	ldr	r2, [r7, #28]
 800cf22:	409a      	lsls	r2, r3
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800cf2e:	e0ce      	b.n	800d0ce <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800cf30:	4b71      	ldr	r3, [pc, #452]	; (800d0f8 <USER_SPI_ioctl+0x2dc>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d031      	beq.n	800cfa0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	208d      	movs	r0, #141	; 0x8d
 800cf40:	f7ff fd1b 	bl	800c97a <send_cmd>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f040 80c3 	bne.w	800d0d2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800cf4c:	20ff      	movs	r0, #255	; 0xff
 800cf4e:	f7ff fc21 	bl	800c794 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800cf52:	f107 030c 	add.w	r3, r7, #12
 800cf56:	2110      	movs	r1, #16
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fcb3 	bl	800c8c4 <rcvr_datablock>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 80b6 	beq.w	800d0d2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800cf66:	2330      	movs	r3, #48	; 0x30
 800cf68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cf6c:	e007      	b.n	800cf7e <USER_SPI_ioctl+0x162>
 800cf6e:	20ff      	movs	r0, #255	; 0xff
 800cf70:	f7ff fc10 	bl	800c794 <xchg_spi>
 800cf74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cf7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1f3      	bne.n	800cf6e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800cf86:	7dbb      	ldrb	r3, [r7, #22]
 800cf88:	091b      	lsrs	r3, r3, #4
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	2310      	movs	r3, #16
 800cf90:	fa03 f202 	lsl.w	r2, r3, r2
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800cf9e:	e098      	b.n	800d0d2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	2009      	movs	r0, #9
 800cfa4:	f7ff fce9 	bl	800c97a <send_cmd>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f040 8091 	bne.w	800d0d2 <USER_SPI_ioctl+0x2b6>
 800cfb0:	f107 030c 	add.w	r3, r7, #12
 800cfb4:	2110      	movs	r1, #16
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff fc84 	bl	800c8c4 <rcvr_datablock>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 8087 	beq.w	800d0d2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800cfc4:	4b4c      	ldr	r3, [pc, #304]	; (800d0f8 <USER_SPI_ioctl+0x2dc>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d012      	beq.n	800cff6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800cfd0:	7dbb      	ldrb	r3, [r7, #22]
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800cfd8:	7dfa      	ldrb	r2, [r7, #23]
 800cfda:	09d2      	lsrs	r2, r2, #7
 800cfdc:	b2d2      	uxtb	r2, r2
 800cfde:	4413      	add	r3, r2
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	7e7b      	ldrb	r3, [r7, #25]
 800cfe4:	099b      	lsrs	r3, r3, #6
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	fa02 f303 	lsl.w	r3, r2, r3
 800cfee:	461a      	mov	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	e013      	b.n	800d01e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800cff6:	7dbb      	ldrb	r3, [r7, #22]
 800cff8:	109b      	asrs	r3, r3, #2
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	f003 031f 	and.w	r3, r3, #31
 800d000:	3301      	adds	r3, #1
 800d002:	7dfa      	ldrb	r2, [r7, #23]
 800d004:	00d2      	lsls	r2, r2, #3
 800d006:	f002 0218 	and.w	r2, r2, #24
 800d00a:	7df9      	ldrb	r1, [r7, #23]
 800d00c:	0949      	lsrs	r1, r1, #5
 800d00e:	b2c9      	uxtb	r1, r1
 800d010:	440a      	add	r2, r1
 800d012:	3201      	adds	r2, #1
 800d014:	fb02 f303 	mul.w	r3, r2, r3
 800d018:	461a      	mov	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800d024:	e055      	b.n	800d0d2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d026:	4b34      	ldr	r3, [pc, #208]	; (800d0f8 <USER_SPI_ioctl+0x2dc>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	f003 0306 	and.w	r3, r3, #6
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d051      	beq.n	800d0d6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d032:	f107 020c 	add.w	r2, r7, #12
 800d036:	79fb      	ldrb	r3, [r7, #7]
 800d038:	210b      	movs	r1, #11
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff feee 	bl	800ce1c <USER_SPI_ioctl>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d149      	bne.n	800d0da <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d046:	7b3b      	ldrb	r3, [r7, #12]
 800d048:	099b      	lsrs	r3, r3, #6
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d104      	bne.n	800d05a <USER_SPI_ioctl+0x23e>
 800d050:	7dbb      	ldrb	r3, [r7, #22]
 800d052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d056:	2b00      	cmp	r3, #0
 800d058:	d041      	beq.n	800d0de <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	623b      	str	r3, [r7, #32]
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	62bb      	str	r3, [r7, #40]	; 0x28
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800d06a:	4b23      	ldr	r3, [pc, #140]	; (800d0f8 <USER_SPI_ioctl+0x2dc>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 0308 	and.w	r3, r3, #8
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	025b      	lsls	r3, r3, #9
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	025b      	lsls	r3, r3, #9
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800d082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d084:	2020      	movs	r0, #32
 800d086:	f7ff fc78 	bl	800c97a <send_cmd>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d128      	bne.n	800d0e2 <USER_SPI_ioctl+0x2c6>
 800d090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d092:	2021      	movs	r0, #33	; 0x21
 800d094:	f7ff fc71 	bl	800c97a <send_cmd>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d121      	bne.n	800d0e2 <USER_SPI_ioctl+0x2c6>
 800d09e:	2100      	movs	r1, #0
 800d0a0:	2026      	movs	r0, #38	; 0x26
 800d0a2:	f7ff fc6a 	bl	800c97a <send_cmd>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d11a      	bne.n	800d0e2 <USER_SPI_ioctl+0x2c6>
 800d0ac:	f247 5030 	movw	r0, #30000	; 0x7530
 800d0b0:	f7ff fbbd 	bl	800c82e <wait_ready>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d013      	beq.n	800d0e2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800d0c0:	e00f      	b.n	800d0e2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800d0c2:	2304      	movs	r3, #4
 800d0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d0c8:	e00c      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		break;
 800d0ca:	bf00      	nop
 800d0cc:	e00a      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		break;
 800d0ce:	bf00      	nop
 800d0d0:	e008      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		break;
 800d0d2:	bf00      	nop
 800d0d4:	e006      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d0d6:	bf00      	nop
 800d0d8:	e004      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d0da:	bf00      	nop
 800d0dc:	e002      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d0de:	bf00      	nop
 800d0e0:	e000      	b.n	800d0e4 <USER_SPI_ioctl+0x2c8>
		break;
 800d0e2:	bf00      	nop
	}

	despiselect();
 800d0e4:	f7ff fbc6 	bl	800c874 <despiselect>

	return res;
 800d0e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3730      	adds	r7, #48	; 0x30
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	200000b8 	.word	0x200000b8
 800d0f8:	2000076a 	.word	0x2000076a

0800d0fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	460b      	mov	r3, r1
 800d106:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7c1b      	ldrb	r3, [r3, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d115      	bne.n	800d140 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d114:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d118:	2202      	movs	r2, #2
 800d11a:	2181      	movs	r1, #129	; 0x81
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f004 f83e 	bl	801119e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d12c:	2202      	movs	r2, #2
 800d12e:	2101      	movs	r1, #1
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f004 f834 	bl	801119e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d13e:	e012      	b.n	800d166 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d140:	2340      	movs	r3, #64	; 0x40
 800d142:	2202      	movs	r2, #2
 800d144:	2181      	movs	r1, #129	; 0x81
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f004 f829 	bl	801119e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d152:	2340      	movs	r3, #64	; 0x40
 800d154:	2202      	movs	r2, #2
 800d156:	2101      	movs	r1, #1
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f004 f820 	bl	801119e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d166:	2308      	movs	r3, #8
 800d168:	2203      	movs	r2, #3
 800d16a:	2182      	movs	r1, #130	; 0x82
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f004 f816 	bl	801119e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d178:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d17c:	f004 f936 	bl	80113ec <USBD_static_malloc>
 800d180:	4602      	mov	r2, r0
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d192:	2301      	movs	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
 800d196:	e026      	b.n	800d1e6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d19e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7c1b      	ldrb	r3, [r3, #16]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d109      	bne.n	800d1d6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f004 f8d6 	bl	8011380 <USBD_LL_PrepareReceive>
 800d1d4:	e007      	b.n	800d1e6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1dc:	2340      	movs	r3, #64	; 0x40
 800d1de:	2101      	movs	r1, #1
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f004 f8cd 	bl	8011380 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d200:	2181      	movs	r1, #129	; 0x81
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f003 fff1 	bl	80111ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d20e:	2101      	movs	r1, #1
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f003 ffea 	bl	80111ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d21e:	2182      	movs	r1, #130	; 0x82
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f003 ffe2 	bl	80111ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00e      	beq.n	800d254 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d246:	4618      	mov	r0, r3
 800d248:	f004 f8dc 	bl	8011404 <USBD_static_free>
    pdev->pClassData = NULL;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d254:	7bfb      	ldrb	r3, [r7, #15]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b086      	sub	sp, #24
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d26e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d284:	2b00      	cmp	r3, #0
 800d286:	d039      	beq.n	800d2fc <USBD_CDC_Setup+0x9e>
 800d288:	2b20      	cmp	r3, #32
 800d28a:	d17f      	bne.n	800d38c <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	88db      	ldrh	r3, [r3, #6]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d029      	beq.n	800d2e8 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	b25b      	sxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	da11      	bge.n	800d2c2 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d2aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	88d2      	ldrh	r2, [r2, #6]
 800d2b0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d2b2:	6939      	ldr	r1, [r7, #16]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	88db      	ldrh	r3, [r3, #6]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f001 f993 	bl	800e5e6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d2c0:	e06b      	b.n	800d39a <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	785a      	ldrb	r2, [r3, #1]
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	88db      	ldrh	r3, [r3, #6]
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d2d8:	6939      	ldr	r1, [r7, #16]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	88db      	ldrh	r3, [r3, #6]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 f9ae 	bl	800e642 <USBD_CtlPrepareRx>
    break;
 800d2e6:	e058      	b.n	800d39a <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	7850      	ldrb	r0, [r2, #1]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	4798      	blx	r3
    break;
 800d2fa:	e04e      	b.n	800d39a <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	785b      	ldrb	r3, [r3, #1]
 800d300:	2b0b      	cmp	r3, #11
 800d302:	d02e      	beq.n	800d362 <USBD_CDC_Setup+0x104>
 800d304:	2b0b      	cmp	r3, #11
 800d306:	dc38      	bgt.n	800d37a <USBD_CDC_Setup+0x11c>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <USBD_CDC_Setup+0xb4>
 800d30c:	2b0a      	cmp	r3, #10
 800d30e:	d014      	beq.n	800d33a <USBD_CDC_Setup+0xdc>
 800d310:	e033      	b.n	800d37a <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d107      	bne.n	800d32c <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d31c:	f107 030c 	add.w	r3, r7, #12
 800d320:	2202      	movs	r2, #2
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f001 f95e 	bl	800e5e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d32a:	e02e      	b.n	800d38a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f001 f8ef 	bl	800e512 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d334:	2302      	movs	r3, #2
 800d336:	75fb      	strb	r3, [r7, #23]
      break;
 800d338:	e027      	b.n	800d38a <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d340:	2b03      	cmp	r3, #3
 800d342:	d107      	bne.n	800d354 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d344:	f107 030f 	add.w	r3, r7, #15
 800d348:	2201      	movs	r2, #1
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f94a 	bl	800e5e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d352:	e01a      	b.n	800d38a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f001 f8db 	bl	800e512 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d35c:	2302      	movs	r3, #2
 800d35e:	75fb      	strb	r3, [r7, #23]
      break;
 800d360:	e013      	b.n	800d38a <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d00d      	beq.n	800d388 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 f8cf 	bl	800e512 <USBD_CtlError>
			  ret = USBD_FAIL;
 800d374:	2302      	movs	r3, #2
 800d376:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d378:	e006      	b.n	800d388 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800d37a:	6839      	ldr	r1, [r7, #0]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 f8c8 	bl	800e512 <USBD_CtlError>
      ret = USBD_FAIL;
 800d382:	2302      	movs	r3, #2
 800d384:	75fb      	strb	r3, [r7, #23]
      break;
 800d386:	e000      	b.n	800d38a <USBD_CDC_Setup+0x12c>
      break;
 800d388:	bf00      	nop
    }
    break;
 800d38a:	e006      	b.n	800d39a <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f001 f8bf 	bl	800e512 <USBD_CtlError>
    ret = USBD_FAIL;
 800d394:	2302      	movs	r3, #2
 800d396:	75fb      	strb	r3, [r7, #23]
    break;
 800d398:	bf00      	nop
  }

  return ret;
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3718      	adds	r7, #24
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d3be:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d03a      	beq.n	800d440 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d3ca:	78fa      	ldrb	r2, [r7, #3]
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	440b      	add	r3, r1
 800d3d8:	331c      	adds	r3, #28
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d029      	beq.n	800d434 <USBD_CDC_DataIn+0x90>
 800d3e0:	78fa      	ldrb	r2, [r7, #3]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	440b      	add	r3, r1
 800d3ee:	331c      	adds	r3, #28
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	78f9      	ldrb	r1, [r7, #3]
 800d3f4:	68b8      	ldr	r0, [r7, #8]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	440b      	add	r3, r1
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	4403      	add	r3, r0
 800d400:	3338      	adds	r3, #56	; 0x38
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	fbb2 f1f3 	udiv	r1, r2, r3
 800d408:	fb03 f301 	mul.w	r3, r3, r1
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d110      	bne.n	800d434 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d412:	78fa      	ldrb	r2, [r7, #3]
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	440b      	add	r3, r1
 800d420:	331c      	adds	r3, #28
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d426:	78f9      	ldrb	r1, [r7, #3]
 800d428:	2300      	movs	r3, #0
 800d42a:	2200      	movs	r2, #0
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f003 ff84 	bl	801133a <USBD_LL_Transmit>
 800d432:	e003      	b.n	800d43c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	e000      	b.n	800d442 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d440:	2302      	movs	r3, #2
  }
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d45e:	78fb      	ldrb	r3, [r7, #3]
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f003 ffaf 	bl	80113c6 <USBD_LL_GetRxDataSize>
 800d468:	4602      	mov	r2, r0
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00d      	beq.n	800d496 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d48e:	4611      	mov	r1, r2
 800d490:	4798      	blx	r3

    return USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	e000      	b.n	800d498 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d496:	2302      	movs	r3, #2
  }
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4ae:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d015      	beq.n	800d4e6 <USBD_CDC_EP0_RxReady+0x46>
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d4c0:	2bff      	cmp	r3, #255	; 0xff
 800d4c2:	d010      	beq.n	800d4e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d4d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	22ff      	movs	r2, #255	; 0xff
 800d4e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2243      	movs	r2, #67	; 0x43
 800d4fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d4fe:	4b03      	ldr	r3, [pc, #12]	; (800d50c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	bc80      	pop	{r7}
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20000144 	.word	0x20000144

0800d510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2243      	movs	r2, #67	; 0x43
 800d51c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d51e:	4b03      	ldr	r3, [pc, #12]	; (800d52c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	bc80      	pop	{r7}
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	20000100 	.word	0x20000100

0800d530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2243      	movs	r2, #67	; 0x43
 800d53c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d53e:	4b03      	ldr	r3, [pc, #12]	; (800d54c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	bc80      	pop	{r7}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	20000188 	.word	0x20000188

0800d550 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	220a      	movs	r2, #10
 800d55c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d55e:	4b03      	ldr	r3, [pc, #12]	; (800d56c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	bc80      	pop	{r7}
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	200000bc 	.word	0x200000bc

0800d570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d57a:	2302      	movs	r3, #2
 800d57c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d590:	7bfb      	ldrb	r3, [r7, #15]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	bc80      	pop	{r7}
 800d59a:	4770      	bx	lr

0800d59c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b087      	sub	sp, #28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	371c      	adds	r7, #28
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bc80      	pop	{r7}
 800d5cc:	4770      	bx	lr

0800d5ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b085      	sub	sp, #20
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d5de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3714      	adds	r7, #20
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bc80      	pop	{r7}
 800d5f2:	4770      	bx	lr

0800d5f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d602:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01c      	beq.n	800d648 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d614:	2b00      	cmp	r3, #0
 800d616:	d115      	bne.n	800d644 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d636:	b29b      	uxth	r3, r3
 800d638:	2181      	movs	r1, #129	; 0x81
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f003 fe7d 	bl	801133a <USBD_LL_Transmit>

      return USBD_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	e002      	b.n	800d64a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d644:	2301      	movs	r3, #1
 800d646:	e000      	b.n	800d64a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d648:	2302      	movs	r3, #2
  }
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d660:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d017      	beq.n	800d69c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7c1b      	ldrb	r3, [r3, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d109      	bne.n	800d688 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d67a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d67e:	2101      	movs	r1, #1
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f003 fe7d 	bl	8011380 <USBD_LL_PrepareReceive>
 800d686:	e007      	b.n	800d698 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d68e:	2340      	movs	r3, #64	; 0x40
 800d690:	2101      	movs	r1, #1
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f003 fe74 	bl	8011380 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d698:	2300      	movs	r3, #0
 800d69a:	e000      	b.n	800d69e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d69c:	2302      	movs	r3, #2
  }
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	60b9      	str	r1, [r7, #8]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	e01a      	b.n	800d6f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d003      	beq.n	800d6d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	79fa      	ldrb	r2, [r7, #7]
 800d6ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f003 fce1 	bl	80110b4 <USBD_LL_Init>

  return USBD_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d006      	beq.n	800d71e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	73fb      	strb	r3, [r7, #15]
 800d71c:	e001      	b.n	800d722 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d71e:	2302      	movs	r3, #2
 800d720:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d722:	7bfb      	ldrb	r3, [r7, #15]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	bc80      	pop	{r7}
 800d72c:	4770      	bx	lr

0800d72e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f003 fd16 	bl	8011168 <USBD_LL_Start>

  return USBD_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	bc80      	pop	{r7}
 800d758:	4770      	bx	lr

0800d75a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	460b      	mov	r3, r1
 800d764:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d766:	2302      	movs	r3, #2
 800d768:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00c      	beq.n	800d78e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	78fa      	ldrb	r2, [r7, #3]
 800d77e:	4611      	mov	r1, r2
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	4798      	blx	r3
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	78fa      	ldrb	r2, [r7, #3]
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	4798      	blx	r3
  return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 fe62 	bl	800e49a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d7f2:	f003 031f 	and.w	r3, r3, #31
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d016      	beq.n	800d828 <USBD_LL_SetupStage+0x6a>
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d81c      	bhi.n	800d838 <USBD_LL_SetupStage+0x7a>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d002      	beq.n	800d808 <USBD_LL_SetupStage+0x4a>
 800d802:	2b01      	cmp	r3, #1
 800d804:	d008      	beq.n	800d818 <USBD_LL_SetupStage+0x5a>
 800d806:	e017      	b.n	800d838 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d80e:	4619      	mov	r1, r3
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f9c5 	bl	800dba0 <USBD_StdDevReq>
    break;
 800d816:	e01a      	b.n	800d84e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fa27 	bl	800dc74 <USBD_StdItfReq>
    break;
 800d826:	e012      	b.n	800d84e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d82e:	4619      	mov	r1, r3
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fa67 	bl	800dd04 <USBD_StdEPReq>
    break;
 800d836:	e00a      	b.n	800d84e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d83e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d842:	b2db      	uxtb	r3, r3
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f003 fcee 	bl	8011228 <USBD_LL_StallEP>
    break;
 800d84c:	bf00      	nop
  }

  return USBD_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	460b      	mov	r3, r1
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d866:	7afb      	ldrb	r3, [r7, #11]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d14b      	bne.n	800d904 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d872:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d134      	bne.n	800d8e8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	429a      	cmp	r2, r3
 800d888:	d919      	bls.n	800d8be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	1ad2      	subs	r2, r2, r3
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d203      	bcs.n	800d8ac <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	e002      	b.n	800d8b2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 fee1 	bl	800e67e <USBD_CtlContinueRx>
 800d8bc:	e038      	b.n	800d930 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d105      	bne.n	800d8e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 fede 	bl	800e6a2 <USBD_CtlSendStatus>
 800d8e6:	e023      	b.n	800d930 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	d11e      	bne.n	800d930 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f003 fc93 	bl	8011228 <USBD_LL_StallEP>
 800d902:	e015      	b.n	800d930 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00d      	beq.n	800d92c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d916:	2b03      	cmp	r3, #3
 800d918:	d108      	bne.n	800d92c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	7afa      	ldrb	r2, [r7, #11]
 800d924:	4611      	mov	r1, r2
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	4798      	blx	r3
 800d92a:	e001      	b.n	800d930 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d92c:	2302      	movs	r3, #2
 800d92e:	e000      	b.n	800d932 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b086      	sub	sp, #24
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	460b      	mov	r3, r1
 800d944:	607a      	str	r2, [r7, #4]
 800d946:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d17f      	bne.n	800da4e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3314      	adds	r3, #20
 800d952:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d15c      	bne.n	800da18 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	429a      	cmp	r2, r3
 800d968:	d915      	bls.n	800d996 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	68da      	ldr	r2, [r3, #12]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	1ad2      	subs	r2, r2, r3
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 fe4b 	bl	800e61e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d988:	2300      	movs	r3, #0
 800d98a:	2200      	movs	r2, #0
 800d98c:	2100      	movs	r1, #0
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f003 fcf6 	bl	8011380 <USBD_LL_PrepareReceive>
 800d994:	e04e      	b.n	800da34 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	6912      	ldr	r2, [r2, #16]
 800d99e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9a2:	fb02 f201 	mul.w	r2, r2, r1
 800d9a6:	1a9b      	subs	r3, r3, r2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d11c      	bne.n	800d9e6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	689a      	ldr	r2, [r3, #8]
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d316      	bcc.n	800d9e6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	689a      	ldr	r2, [r3, #8]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d20f      	bcs.n	800d9e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f000 fe27 	bl	800e61e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d9d8:	2300      	movs	r3, #0
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2100      	movs	r1, #0
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f003 fcce 	bl	8011380 <USBD_LL_PrepareReceive>
 800d9e4:	e026      	b.n	800da34 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d105      	bne.n	800da08 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800da08:	2180      	movs	r1, #128	; 0x80
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f003 fc0c 	bl	8011228 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 fe59 	bl	800e6c8 <USBD_CtlReceiveStatus>
 800da16:	e00d      	b.n	800da34 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d004      	beq.n	800da2c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800da2c:	2180      	movs	r1, #128	; 0x80
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f003 fbfa 	bl	8011228 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d11d      	bne.n	800da7a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff fe81 	bl	800d746 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800da4c:	e015      	b.n	800da7a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00d      	beq.n	800da76 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800da60:	2b03      	cmp	r3, #3
 800da62:	d108      	bne.n	800da76 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	7afa      	ldrb	r2, [r7, #11]
 800da6e:	4611      	mov	r1, r2
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	4798      	blx	r3
 800da74:	e001      	b.n	800da7a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da76:	2302      	movs	r3, #2
 800da78:	e000      	b.n	800da7c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da8c:	2340      	movs	r3, #64	; 0x40
 800da8e:	2200      	movs	r2, #0
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f003 fb83 	bl	801119e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2240      	movs	r2, #64	; 0x40
 800daa4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800daa8:	2340      	movs	r3, #64	; 0x40
 800daaa:	2200      	movs	r2, #0
 800daac:	2180      	movs	r1, #128	; 0x80
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f003 fb75 	bl	801119e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2240      	movs	r2, #64	; 0x40
 800dabe:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d009      	beq.n	800dafc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	6852      	ldr	r2, [r2, #4]
 800daf4:	b2d2      	uxtb	r2, r2
 800daf6:	4611      	mov	r1, r2
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	4798      	blx	r3
  }

  return USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	78fa      	ldrb	r2, [r7, #3]
 800db16:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	bc80      	pop	{r7}
 800db22:	4770      	bx	lr

0800db24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2204      	movs	r2, #4
 800db3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	bc80      	pop	{r7}
 800db4a:	4770      	bx	lr

0800db4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	bc80      	pop	{r7}
 800db6a:	4770      	bx	lr

0800db6c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d10b      	bne.n	800db96 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d005      	beq.n	800db96 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbb6:	2b40      	cmp	r3, #64	; 0x40
 800dbb8:	d005      	beq.n	800dbc6 <USBD_StdDevReq+0x26>
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d84f      	bhi.n	800dc5e <USBD_StdDevReq+0xbe>
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d009      	beq.n	800dbd6 <USBD_StdDevReq+0x36>
 800dbc2:	2b20      	cmp	r3, #32
 800dbc4:	d14b      	bne.n	800dc5e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3
    break;
 800dbd4:	e048      	b.n	800dc68 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	785b      	ldrb	r3, [r3, #1]
 800dbda:	2b09      	cmp	r3, #9
 800dbdc:	d839      	bhi.n	800dc52 <USBD_StdDevReq+0xb2>
 800dbde:	a201      	add	r2, pc, #4	; (adr r2, 800dbe4 <USBD_StdDevReq+0x44>)
 800dbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe4:	0800dc35 	.word	0x0800dc35
 800dbe8:	0800dc49 	.word	0x0800dc49
 800dbec:	0800dc53 	.word	0x0800dc53
 800dbf0:	0800dc3f 	.word	0x0800dc3f
 800dbf4:	0800dc53 	.word	0x0800dc53
 800dbf8:	0800dc17 	.word	0x0800dc17
 800dbfc:	0800dc0d 	.word	0x0800dc0d
 800dc00:	0800dc53 	.word	0x0800dc53
 800dc04:	0800dc2b 	.word	0x0800dc2b
 800dc08:	0800dc21 	.word	0x0800dc21
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f9da 	bl	800dfc8 <USBD_GetDescriptor>
      break;
 800dc14:	e022      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 facf 	bl	800e1bc <USBD_SetAddress>
      break;
 800dc1e:	e01d      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fb0e 	bl	800e244 <USBD_SetConfig>
      break;
 800dc28:	e018      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fb97 	bl	800e360 <USBD_GetConfig>
      break;
 800dc32:	e013      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fbc7 	bl	800e3ca <USBD_GetStatus>
      break;
 800dc3c:	e00e      	b.n	800dc5c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fbf5 	bl	800e430 <USBD_SetFeature>
      break;
 800dc46:	e009      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fc04 	bl	800e458 <USBD_ClrFeature>
      break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fc5c 	bl	800e512 <USBD_CtlError>
      break;
 800dc5a:	bf00      	nop
    }
    break;
 800dc5c:	e004      	b.n	800dc68 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fc56 	bl	800e512 <USBD_CtlError>
    break;
 800dc66:	bf00      	nop
  }

  return ret;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop

0800dc74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d005      	beq.n	800dc9a <USBD_StdItfReq+0x26>
 800dc8e:	2b40      	cmp	r3, #64	; 0x40
 800dc90:	d82e      	bhi.n	800dcf0 <USBD_StdItfReq+0x7c>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <USBD_StdItfReq+0x26>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d12a      	bne.n	800dcf0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dca0:	3b01      	subs	r3, #1
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d81d      	bhi.n	800dce2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	889b      	ldrh	r3, [r3, #4]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d813      	bhi.n	800dcd8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	4798      	blx	r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	88db      	ldrh	r3, [r3, #6]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d110      	bne.n	800dcec <USBD_StdItfReq+0x78>
 800dcca:	7bfb      	ldrb	r3, [r7, #15]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10d      	bne.n	800dcec <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fce6 	bl	800e6a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dcd6:	e009      	b.n	800dcec <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fc19 	bl	800e512 <USBD_CtlError>
      break;
 800dce0:	e004      	b.n	800dcec <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fc14 	bl	800e512 <USBD_CtlError>
      break;
 800dcea:	e000      	b.n	800dcee <USBD_StdItfReq+0x7a>
      break;
 800dcec:	bf00      	nop
    }
    break;
 800dcee:	e004      	b.n	800dcfa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fc0d 	bl	800e512 <USBD_CtlError>
    break;
 800dcf8:	bf00      	nop
  }

  return USBD_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	889b      	ldrh	r3, [r3, #4]
 800dd16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd20:	2b40      	cmp	r3, #64	; 0x40
 800dd22:	d007      	beq.n	800dd34 <USBD_StdEPReq+0x30>
 800dd24:	2b40      	cmp	r3, #64	; 0x40
 800dd26:	f200 8144 	bhi.w	800dfb2 <USBD_StdEPReq+0x2ae>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <USBD_StdEPReq+0x40>
 800dd2e:	2b20      	cmp	r3, #32
 800dd30:	f040 813f 	bne.w	800dfb2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
    break;
 800dd42:	e13b      	b.n	800dfbc <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd4c:	2b20      	cmp	r3, #32
 800dd4e:	d10a      	bne.n	800dd66 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	4798      	blx	r3
 800dd5e:	4603      	mov	r3, r0
 800dd60:	73fb      	strb	r3, [r7, #15]

      return ret;
 800dd62:	7bfb      	ldrb	r3, [r7, #15]
 800dd64:	e12b      	b.n	800dfbe <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d007      	beq.n	800dd7e <USBD_StdEPReq+0x7a>
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	f300 8119 	bgt.w	800dfa6 <USBD_StdEPReq+0x2a2>
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d072      	beq.n	800de5e <USBD_StdEPReq+0x15a>
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d03a      	beq.n	800ddf2 <USBD_StdEPReq+0xee>
 800dd7c:	e113      	b.n	800dfa6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d002      	beq.n	800dd8e <USBD_StdEPReq+0x8a>
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d015      	beq.n	800ddb8 <USBD_StdEPReq+0xb4>
 800dd8c:	e02b      	b.n	800dde6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00c      	beq.n	800ddae <USBD_StdEPReq+0xaa>
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	2b80      	cmp	r3, #128	; 0x80
 800dd98:	d009      	beq.n	800ddae <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f003 fa42 	bl	8011228 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800dda4:	2180      	movs	r1, #128	; 0x80
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f003 fa3e 	bl	8011228 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ddac:	e020      	b.n	800ddf0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fbae 	bl	800e512 <USBD_CtlError>
        break;
 800ddb6:	e01b      	b.n	800ddf0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	885b      	ldrh	r3, [r3, #2]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10e      	bne.n	800ddde <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ddc0:	7bbb      	ldrb	r3, [r7, #14]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00b      	beq.n	800ddde <USBD_StdEPReq+0xda>
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	2b80      	cmp	r3, #128	; 0x80
 800ddca:	d008      	beq.n	800ddde <USBD_StdEPReq+0xda>
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	88db      	ldrh	r3, [r3, #6]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d104      	bne.n	800ddde <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f003 fa25 	bl	8011228 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fc5f 	bl	800e6a2 <USBD_CtlSendStatus>

        break;
 800dde4:	e004      	b.n	800ddf0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 fb92 	bl	800e512 <USBD_CtlError>
        break;
 800ddee:	bf00      	nop
      }
      break;
 800ddf0:	e0de      	b.n	800dfb0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d002      	beq.n	800de02 <USBD_StdEPReq+0xfe>
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d015      	beq.n	800de2c <USBD_StdEPReq+0x128>
 800de00:	e026      	b.n	800de50 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00c      	beq.n	800de22 <USBD_StdEPReq+0x11e>
 800de08:	7bbb      	ldrb	r3, [r7, #14]
 800de0a:	2b80      	cmp	r3, #128	; 0x80
 800de0c:	d009      	beq.n	800de22 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f003 fa08 	bl	8011228 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800de18:	2180      	movs	r1, #128	; 0x80
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f003 fa04 	bl	8011228 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de20:	e01c      	b.n	800de5c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fb74 	bl	800e512 <USBD_CtlError>
        break;
 800de2a:	e017      	b.n	800de5c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	885b      	ldrh	r3, [r3, #2]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d112      	bne.n	800de5a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800de34:	7bbb      	ldrb	r3, [r7, #14]
 800de36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d004      	beq.n	800de48 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800de3e:	7bbb      	ldrb	r3, [r7, #14]
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f003 fa0f 	bl	8011266 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fc2a 	bl	800e6a2 <USBD_CtlSendStatus>
        }
        break;
 800de4e:	e004      	b.n	800de5a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fb5d 	bl	800e512 <USBD_CtlError>
        break;
 800de58:	e000      	b.n	800de5c <USBD_StdEPReq+0x158>
        break;
 800de5a:	bf00      	nop
      }
      break;
 800de5c:	e0a8      	b.n	800dfb0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de64:	2b02      	cmp	r3, #2
 800de66:	d002      	beq.n	800de6e <USBD_StdEPReq+0x16a>
 800de68:	2b03      	cmp	r3, #3
 800de6a:	d031      	beq.n	800ded0 <USBD_StdEPReq+0x1cc>
 800de6c:	e095      	b.n	800df9a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d007      	beq.n	800de84 <USBD_StdEPReq+0x180>
 800de74:	7bbb      	ldrb	r3, [r7, #14]
 800de76:	2b80      	cmp	r3, #128	; 0x80
 800de78:	d004      	beq.n	800de84 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fb48 	bl	800e512 <USBD_CtlError>
          break;
 800de82:	e08f      	b.n	800dfa4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800de84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	da0b      	bge.n	800dea4 <USBD_StdEPReq+0x1a0>
 800de8c:	7bbb      	ldrb	r3, [r7, #14]
 800de8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	3310      	adds	r3, #16
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	4413      	add	r3, r2
 800dea0:	3304      	adds	r3, #4
 800dea2:	e00a      	b.n	800deba <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800dea4:	7bbb      	ldrb	r3, [r7, #14]
 800dea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800deaa:	4613      	mov	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	4413      	add	r3, r2
 800deba:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2202      	movs	r2, #2
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 fb8c 	bl	800e5e6 <USBD_CtlSendData>
          break;
 800dece:	e069      	b.n	800dfa4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ded0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	da11      	bge.n	800defc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ded8:	7bbb      	ldrb	r3, [r7, #14]
 800deda:	f003 020f 	and.w	r2, r3, #15
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	440b      	add	r3, r1
 800deea:	3318      	adds	r3, #24
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d117      	bne.n	800df22 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fb0c 	bl	800e512 <USBD_CtlError>
            break;
 800defa:	e053      	b.n	800dfa4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	f003 020f 	and.w	r2, r3, #15
 800df02:	6879      	ldr	r1, [r7, #4]
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	440b      	add	r3, r1
 800df0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 faf9 	bl	800e512 <USBD_CtlError>
            break;
 800df20:	e040      	b.n	800dfa4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df26:	2b00      	cmp	r3, #0
 800df28:	da0b      	bge.n	800df42 <USBD_StdEPReq+0x23e>
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
 800df2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	3310      	adds	r3, #16
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	3304      	adds	r3, #4
 800df40:	e00a      	b.n	800df58 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800df48:	4613      	mov	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	4413      	add	r3, r2
 800df58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df5a:	7bbb      	ldrb	r3, [r7, #14]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <USBD_StdEPReq+0x262>
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	2b80      	cmp	r3, #128	; 0x80
 800df64:	d103      	bne.n	800df6e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	e00e      	b.n	800df8c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800df6e:	7bbb      	ldrb	r3, [r7, #14]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f003 f996 	bl	80112a4 <USBD_LL_IsStallEP>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2201      	movs	r2, #1
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	e002      	b.n	800df8c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2202      	movs	r2, #2
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fb27 	bl	800e5e6 <USBD_CtlSendData>
          break;
 800df98:	e004      	b.n	800dfa4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fab8 	bl	800e512 <USBD_CtlError>
        break;
 800dfa2:	bf00      	nop
      }
      break;
 800dfa4:	e004      	b.n	800dfb0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fab2 	bl	800e512 <USBD_CtlError>
      break;
 800dfae:	bf00      	nop
    }
    break;
 800dfb0:	e004      	b.n	800dfbc <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 faac 	bl	800e512 <USBD_CtlError>
    break;
 800dfba:	bf00      	nop
  }

  return ret;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
	...

0800dfc8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	885b      	ldrh	r3, [r3, #2]
 800dfd6:	0a1b      	lsrs	r3, r3, #8
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	2b06      	cmp	r3, #6
 800dfde:	f200 80c9 	bhi.w	800e174 <USBD_GetDescriptor+0x1ac>
 800dfe2:	a201      	add	r2, pc, #4	; (adr r2, 800dfe8 <USBD_GetDescriptor+0x20>)
 800dfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe8:	0800e005 	.word	0x0800e005
 800dfec:	0800e01d 	.word	0x0800e01d
 800dff0:	0800e05d 	.word	0x0800e05d
 800dff4:	0800e175 	.word	0x0800e175
 800dff8:	0800e175 	.word	0x0800e175
 800dffc:	0800e121 	.word	0x0800e121
 800e000:	0800e147 	.word	0x0800e147
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	7c12      	ldrb	r2, [r2, #16]
 800e010:	f107 010a 	add.w	r1, r7, #10
 800e014:	4610      	mov	r0, r2
 800e016:	4798      	blx	r3
 800e018:	60f8      	str	r0, [r7, #12]
    break;
 800e01a:	e0b0      	b.n	800e17e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7c1b      	ldrb	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10d      	bne.n	800e040 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	f107 020a 	add.w	r2, r7, #10
 800e030:	4610      	mov	r0, r2
 800e032:	4798      	blx	r3
 800e034:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	3301      	adds	r3, #1
 800e03a:	2202      	movs	r2, #2
 800e03c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e03e:	e09e      	b.n	800e17e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	f107 020a 	add.w	r2, r7, #10
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
 800e050:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3301      	adds	r3, #1
 800e056:	2202      	movs	r2, #2
 800e058:	701a      	strb	r2, [r3, #0]
    break;
 800e05a:	e090      	b.n	800e17e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	885b      	ldrh	r3, [r3, #2]
 800e060:	b2db      	uxtb	r3, r3
 800e062:	2b05      	cmp	r3, #5
 800e064:	d856      	bhi.n	800e114 <USBD_GetDescriptor+0x14c>
 800e066:	a201      	add	r2, pc, #4	; (adr r2, 800e06c <USBD_GetDescriptor+0xa4>)
 800e068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06c:	0800e085 	.word	0x0800e085
 800e070:	0800e09d 	.word	0x0800e09d
 800e074:	0800e0b5 	.word	0x0800e0b5
 800e078:	0800e0cd 	.word	0x0800e0cd
 800e07c:	0800e0e5 	.word	0x0800e0e5
 800e080:	0800e0fd 	.word	0x0800e0fd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7c12      	ldrb	r2, [r2, #16]
 800e090:	f107 010a 	add.w	r1, r7, #10
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
      break;
 800e09a:	e040      	b.n	800e11e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	7c12      	ldrb	r2, [r2, #16]
 800e0a8:	f107 010a 	add.w	r1, r7, #10
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4798      	blx	r3
 800e0b0:	60f8      	str	r0, [r7, #12]
      break;
 800e0b2:	e034      	b.n	800e11e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	7c12      	ldrb	r2, [r2, #16]
 800e0c0:	f107 010a 	add.w	r1, r7, #10
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
      break;
 800e0ca:	e028      	b.n	800e11e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	7c12      	ldrb	r2, [r2, #16]
 800e0d8:	f107 010a 	add.w	r1, r7, #10
 800e0dc:	4610      	mov	r0, r2
 800e0de:	4798      	blx	r3
 800e0e0:	60f8      	str	r0, [r7, #12]
      break;
 800e0e2:	e01c      	b.n	800e11e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	7c12      	ldrb	r2, [r2, #16]
 800e0f0:	f107 010a 	add.w	r1, r7, #10
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	60f8      	str	r0, [r7, #12]
      break;
 800e0fa:	e010      	b.n	800e11e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e102:	699b      	ldr	r3, [r3, #24]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	7c12      	ldrb	r2, [r2, #16]
 800e108:	f107 010a 	add.w	r1, r7, #10
 800e10c:	4610      	mov	r0, r2
 800e10e:	4798      	blx	r3
 800e110:	60f8      	str	r0, [r7, #12]
      break;
 800e112:	e004      	b.n	800e11e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e114:	6839      	ldr	r1, [r7, #0]
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 f9fb 	bl	800e512 <USBD_CtlError>
      return;
 800e11c:	e04b      	b.n	800e1b6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e11e:	e02e      	b.n	800e17e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7c1b      	ldrb	r3, [r3, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d109      	bne.n	800e13c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e130:	f107 020a 	add.w	r2, r7, #10
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
      break;
 800e13a:	e020      	b.n	800e17e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f9e7 	bl	800e512 <USBD_CtlError>
      return;
 800e144:	e037      	b.n	800e1b6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7c1b      	ldrb	r3, [r3, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10d      	bne.n	800e16a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	f107 020a 	add.w	r2, r7, #10
 800e15a:	4610      	mov	r0, r2
 800e15c:	4798      	blx	r3
 800e15e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3301      	adds	r3, #1
 800e164:	2207      	movs	r2, #7
 800e166:	701a      	strb	r2, [r3, #0]
      break;
 800e168:	e009      	b.n	800e17e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 f9d0 	bl	800e512 <USBD_CtlError>
      return;
 800e172:	e020      	b.n	800e1b6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f9cb 	bl	800e512 <USBD_CtlError>
    return;
 800e17c:	e01b      	b.n	800e1b6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e17e:	897b      	ldrh	r3, [r7, #10]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d011      	beq.n	800e1a8 <USBD_GetDescriptor+0x1e0>
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	88db      	ldrh	r3, [r3, #6]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00d      	beq.n	800e1a8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	88da      	ldrh	r2, [r3, #6]
 800e190:	897b      	ldrh	r3, [r7, #10]
 800e192:	4293      	cmp	r3, r2
 800e194:	bf28      	it	cs
 800e196:	4613      	movcs	r3, r2
 800e198:	b29b      	uxth	r3, r3
 800e19a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e19c:	897b      	ldrh	r3, [r7, #10]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	68f9      	ldr	r1, [r7, #12]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa1f 	bl	800e5e6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	88db      	ldrh	r3, [r3, #6]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 fa76 	bl	800e6a2 <USBD_CtlSendStatus>
  }
}
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	889b      	ldrh	r3, [r3, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d130      	bne.n	800e230 <USBD_SetAddress+0x74>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d12c      	bne.n	800e230 <USBD_SetAddress+0x74>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	885b      	ldrh	r3, [r3, #2]
 800e1da:	2b7f      	cmp	r3, #127	; 0x7f
 800e1dc:	d828      	bhi.n	800e230 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	885b      	ldrh	r3, [r3, #2]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d104      	bne.n	800e1fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f98b 	bl	800e512 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fc:	e01d      	b.n	800e23a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	7bfa      	ldrb	r2, [r7, #15]
 800e202:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f003 f876 	bl	80112fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fa46 	bl	800e6a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e216:	7bfb      	ldrb	r3, [r7, #15]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d004      	beq.n	800e226 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e224:	e009      	b.n	800e23a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e22e:	e004      	b.n	800e23a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f96d 	bl	800e512 <USBD_CtlError>
  }
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
	...

0800e244 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	885b      	ldrh	r3, [r3, #2]
 800e252:	b2da      	uxtb	r2, r3
 800e254:	4b41      	ldr	r3, [pc, #260]	; (800e35c <USBD_SetConfig+0x118>)
 800e256:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e258:	4b40      	ldr	r3, [pc, #256]	; (800e35c <USBD_SetConfig+0x118>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d904      	bls.n	800e26a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 f955 	bl	800e512 <USBD_CtlError>
 800e268:	e075      	b.n	800e356 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e270:	2b02      	cmp	r3, #2
 800e272:	d002      	beq.n	800e27a <USBD_SetConfig+0x36>
 800e274:	2b03      	cmp	r3, #3
 800e276:	d023      	beq.n	800e2c0 <USBD_SetConfig+0x7c>
 800e278:	e062      	b.n	800e340 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e27a:	4b38      	ldr	r3, [pc, #224]	; (800e35c <USBD_SetConfig+0x118>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d01a      	beq.n	800e2b8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e282:	4b36      	ldr	r3, [pc, #216]	; (800e35c <USBD_SetConfig+0x118>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2203      	movs	r2, #3
 800e290:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e294:	4b31      	ldr	r3, [pc, #196]	; (800e35c <USBD_SetConfig+0x118>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fa5d 	bl	800d75a <USBD_SetClassConfig>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d104      	bne.n	800e2b0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 f932 	bl	800e512 <USBD_CtlError>
          return;
 800e2ae:	e052      	b.n	800e356 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f9f6 	bl	800e6a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e2b6:	e04e      	b.n	800e356 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f9f2 	bl	800e6a2 <USBD_CtlSendStatus>
      break;
 800e2be:	e04a      	b.n	800e356 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e2c0:	4b26      	ldr	r3, [pc, #152]	; (800e35c <USBD_SetConfig+0x118>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d112      	bne.n	800e2ee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e2d0:	4b22      	ldr	r3, [pc, #136]	; (800e35c <USBD_SetConfig+0x118>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e2da:	4b20      	ldr	r3, [pc, #128]	; (800e35c <USBD_SetConfig+0x118>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff fa59 	bl	800d798 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f9db 	bl	800e6a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e2ec:	e033      	b.n	800e356 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e2ee:	4b1b      	ldr	r3, [pc, #108]	; (800e35c <USBD_SetConfig+0x118>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d01d      	beq.n	800e338 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff fa47 	bl	800d798 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e30a:	4b14      	ldr	r3, [pc, #80]	; (800e35c <USBD_SetConfig+0x118>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e314:	4b11      	ldr	r3, [pc, #68]	; (800e35c <USBD_SetConfig+0x118>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fa1d 	bl	800d75a <USBD_SetClassConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	2b02      	cmp	r3, #2
 800e324:	d104      	bne.n	800e330 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8f2 	bl	800e512 <USBD_CtlError>
          return;
 800e32e:	e012      	b.n	800e356 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f9b6 	bl	800e6a2 <USBD_CtlSendStatus>
      break;
 800e336:	e00e      	b.n	800e356 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f9b2 	bl	800e6a2 <USBD_CtlSendStatus>
      break;
 800e33e:	e00a      	b.n	800e356 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f8e5 	bl	800e512 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e348:	4b04      	ldr	r3, [pc, #16]	; (800e35c <USBD_SetConfig+0x118>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff fa22 	bl	800d798 <USBD_ClrClassConfig>
      break;
 800e354:	bf00      	nop
    }
  }
}
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	2000076b 	.word	0x2000076b

0800e360 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	88db      	ldrh	r3, [r3, #6]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d004      	beq.n	800e37c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f8cc 	bl	800e512 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e37a:	e022      	b.n	800e3c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e382:	2b02      	cmp	r3, #2
 800e384:	dc02      	bgt.n	800e38c <USBD_GetConfig+0x2c>
 800e386:	2b00      	cmp	r3, #0
 800e388:	dc03      	bgt.n	800e392 <USBD_GetConfig+0x32>
 800e38a:	e015      	b.n	800e3b8 <USBD_GetConfig+0x58>
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d00b      	beq.n	800e3a8 <USBD_GetConfig+0x48>
 800e390:	e012      	b.n	800e3b8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3308      	adds	r3, #8
 800e39c:	2201      	movs	r2, #1
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f920 	bl	800e5e6 <USBD_CtlSendData>
      break;
 800e3a6:	e00c      	b.n	800e3c2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f918 	bl	800e5e6 <USBD_CtlSendData>
      break;
 800e3b6:	e004      	b.n	800e3c2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f8a9 	bl	800e512 <USBD_CtlError>
      break;
 800e3c0:	bf00      	nop
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d81e      	bhi.n	800e41e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	88db      	ldrh	r3, [r3, #6]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d004      	beq.n	800e3f2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f891 	bl	800e512 <USBD_CtlError>
      break;
 800e3f0:	e01a      	b.n	800e428 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d005      	beq.n	800e40e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	f043 0202 	orr.w	r2, r3, #2
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	330c      	adds	r3, #12
 800e412:	2202      	movs	r2, #2
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f8e5 	bl	800e5e6 <USBD_CtlSendData>
    break;
 800e41c:	e004      	b.n	800e428 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f876 	bl	800e512 <USBD_CtlError>
    break;
 800e426:	bf00      	nop
  }
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	885b      	ldrh	r3, [r3, #2]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d106      	bne.n	800e450 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f929 	bl	800e6a2 <USBD_CtlSendStatus>
  }

}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e468:	3b01      	subs	r3, #1
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d80b      	bhi.n	800e486 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	885b      	ldrh	r3, [r3, #2]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d10c      	bne.n	800e490 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f90f 	bl	800e6a2 <USBD_CtlSendStatus>
    }
    break;
 800e484:	e004      	b.n	800e490 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f842 	bl	800e512 <USBD_CtlError>
    break;
 800e48e:	e000      	b.n	800e492 <USBD_ClrFeature+0x3a>
    break;
 800e490:	bf00      	nop
  }
}
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b083      	sub	sp, #12
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	785a      	ldrb	r2, [r3, #1]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	3302      	adds	r3, #2
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	3303      	adds	r3, #3
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	3305      	adds	r3, #5
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	4413      	add	r3, r2
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	3306      	adds	r3, #6
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	3307      	adds	r3, #7
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	021b      	lsls	r3, r3, #8
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	4413      	add	r3, r2
 800e502:	b29a      	uxth	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	80da      	strh	r2, [r3, #6]

}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bc80      	pop	{r7}
 800e510:	4770      	bx	lr

0800e512 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b082      	sub	sp, #8
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e51c:	2180      	movs	r1, #128	; 0x80
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f002 fe82 	bl	8011228 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e524:	2100      	movs	r1, #0
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f002 fe7e 	bl	8011228 <USBD_LL_StallEP>
}
 800e52c:	bf00      	nop
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e540:	2300      	movs	r3, #0
 800e542:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d032      	beq.n	800e5b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f000 f834 	bl	800e5b8 <USBD_GetLen>
 800e550:	4603      	mov	r3, r0
 800e552:	3301      	adds	r3, #1
 800e554:	b29b      	uxth	r3, r3
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	b29a      	uxth	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	75fa      	strb	r2, [r7, #23]
 800e564:	461a      	mov	r2, r3
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	4413      	add	r3, r2
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	7812      	ldrb	r2, [r2, #0]
 800e56e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	75fa      	strb	r2, [r7, #23]
 800e576:	461a      	mov	r2, r3
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	4413      	add	r3, r2
 800e57c:	2203      	movs	r2, #3
 800e57e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e580:	e012      	b.n	800e5a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	1c5a      	adds	r2, r3, #1
 800e586:	60fa      	str	r2, [r7, #12]
 800e588:	7dfa      	ldrb	r2, [r7, #23]
 800e58a:	1c51      	adds	r1, r2, #1
 800e58c:	75f9      	strb	r1, [r7, #23]
 800e58e:	4611      	mov	r1, r2
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	440a      	add	r2, r1
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	75fa      	strb	r2, [r7, #23]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e8      	bne.n	800e582 <USBD_GetString+0x4e>
    }
  }
}
 800e5b0:	bf00      	nop
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e5c4:	e005      	b.n	800e5d2 <USBD_GetLen+0x1a>
    {
        len++;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1f5      	bne.n	800e5c6 <USBD_GetLen+0xe>
    }

    return len;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bc80      	pop	{r7}
 800e5e4:	4770      	bx	lr

0800e5e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	60b9      	str	r1, [r7, #8]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e5fc:	88fa      	ldrh	r2, [r7, #6]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e602:	88fa      	ldrh	r2, [r7, #6]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e608:	88fb      	ldrh	r3, [r7, #6]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	2100      	movs	r1, #0
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f002 fe93 	bl	801133a <USBD_LL_Transmit>

  return USBD_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b084      	sub	sp, #16
 800e622:	af00      	add	r7, sp, #0
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	4613      	mov	r3, r2
 800e62a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	2100      	movs	r1, #0
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f002 fe81 	bl	801133a <USBD_LL_Transmit>

  return USBD_OK;
 800e638:	2300      	movs	r3, #0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	60b9      	str	r1, [r7, #8]
 800e64c:	4613      	mov	r3, r2
 800e64e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2203      	movs	r2, #3
 800e654:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e658:	88fa      	ldrh	r2, [r7, #6]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e660:	88fa      	ldrh	r2, [r7, #6]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e668:	88fb      	ldrh	r3, [r7, #6]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	2100      	movs	r1, #0
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f002 fe86 	bl	8011380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	60f8      	str	r0, [r7, #12]
 800e686:	60b9      	str	r1, [r7, #8]
 800e688:	4613      	mov	r3, r2
 800e68a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e68c:	88fb      	ldrh	r3, [r7, #6]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	2100      	movs	r1, #0
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f002 fe74 	bl	8011380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2204      	movs	r2, #4
 800e6ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f002 fe3e 	bl	801133a <USBD_LL_Transmit>

  return USBD_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2205      	movs	r2, #5
 800e6d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e6d8:	2300      	movs	r3, #0
 800e6da:	2200      	movs	r2, #0
 800e6dc:	2100      	movs	r1, #0
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f002 fe4e 	bl	8011380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	4a08      	ldr	r2, [pc, #32]	; (800e720 <disk_status+0x30>)
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	79fa      	ldrb	r2, [r7, #7]
 800e708:	4905      	ldr	r1, [pc, #20]	; (800e720 <disk_status+0x30>)
 800e70a:	440a      	add	r2, r1
 800e70c:	7a12      	ldrb	r2, [r2, #8]
 800e70e:	4610      	mov	r0, r2
 800e710:	4798      	blx	r3
 800e712:	4603      	mov	r3, r0
 800e714:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e716:	7bfb      	ldrb	r3, [r7, #15]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20000794 	.word	0x20000794

0800e724 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	4a0d      	ldr	r2, [pc, #52]	; (800e76c <disk_initialize+0x48>)
 800e736:	5cd3      	ldrb	r3, [r2, r3]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d111      	bne.n	800e760 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	4a0b      	ldr	r2, [pc, #44]	; (800e76c <disk_initialize+0x48>)
 800e740:	2101      	movs	r1, #1
 800e742:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	4a09      	ldr	r2, [pc, #36]	; (800e76c <disk_initialize+0x48>)
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	79fa      	ldrb	r2, [r7, #7]
 800e752:	4906      	ldr	r1, [pc, #24]	; (800e76c <disk_initialize+0x48>)
 800e754:	440a      	add	r2, r1
 800e756:	7a12      	ldrb	r2, [r2, #8]
 800e758:	4610      	mov	r0, r2
 800e75a:	4798      	blx	r3
 800e75c:	4603      	mov	r3, r0
 800e75e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e760:	7bfb      	ldrb	r3, [r7, #15]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20000794 	.word	0x20000794

0800e770 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e770:	b590      	push	{r4, r7, lr}
 800e772:	b087      	sub	sp, #28
 800e774:	af00      	add	r7, sp, #0
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
 800e77a:	603b      	str	r3, [r7, #0]
 800e77c:	4603      	mov	r3, r0
 800e77e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e780:	7bfb      	ldrb	r3, [r7, #15]
 800e782:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <disk_read+0x3c>)
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	4413      	add	r3, r2
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	689c      	ldr	r4, [r3, #8]
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	4a07      	ldr	r2, [pc, #28]	; (800e7ac <disk_read+0x3c>)
 800e790:	4413      	add	r3, r2
 800e792:	7a18      	ldrb	r0, [r3, #8]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	68b9      	ldr	r1, [r7, #8]
 800e79a:	47a0      	blx	r4
 800e79c:	4603      	mov	r3, r0
 800e79e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd90      	pop	{r4, r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20000794 	.word	0x20000794

0800e7b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60b9      	str	r1, [r7, #8]
 800e7b8:	607a      	str	r2, [r7, #4]
 800e7ba:	603b      	str	r3, [r7, #0]
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <disk_write+0x3c>)
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	4413      	add	r3, r2
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	68dc      	ldr	r4, [r3, #12]
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <disk_write+0x3c>)
 800e7d0:	4413      	add	r3, r2
 800e7d2:	7a18      	ldrb	r0, [r3, #8]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	68b9      	ldr	r1, [r7, #8]
 800e7da:	47a0      	blx	r4
 800e7dc:	4603      	mov	r3, r0
 800e7de:	75fb      	strb	r3, [r7, #23]
  return res;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd90      	pop	{r4, r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20000794 	.word	0x20000794

0800e7f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	603a      	str	r2, [r7, #0]
 800e7fa:	71fb      	strb	r3, [r7, #7]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	4a09      	ldr	r2, [pc, #36]	; (800e828 <disk_ioctl+0x38>)
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	79fa      	ldrb	r2, [r7, #7]
 800e80e:	4906      	ldr	r1, [pc, #24]	; (800e828 <disk_ioctl+0x38>)
 800e810:	440a      	add	r2, r1
 800e812:	7a10      	ldrb	r0, [r2, #8]
 800e814:	79b9      	ldrb	r1, [r7, #6]
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	4798      	blx	r3
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20000794 	.word	0x20000794

0800e82c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3301      	adds	r3, #1
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e83c:	89fb      	ldrh	r3, [r7, #14]
 800e83e:	021b      	lsls	r3, r3, #8
 800e840:	b21a      	sxth	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	b21b      	sxth	r3, r3
 800e848:	4313      	orrs	r3, r2
 800e84a:	b21b      	sxth	r3, r3
 800e84c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e84e:	89fb      	ldrh	r3, [r7, #14]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3714      	adds	r7, #20
 800e854:	46bd      	mov	sp, r7
 800e856:	bc80      	pop	{r7}
 800e858:	4770      	bx	lr

0800e85a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e85a:	b480      	push	{r7}
 800e85c:	b085      	sub	sp, #20
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	3303      	adds	r3, #3
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	021b      	lsls	r3, r3, #8
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	3202      	adds	r2, #2
 800e872:	7812      	ldrb	r2, [r2, #0]
 800e874:	4313      	orrs	r3, r2
 800e876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	021b      	lsls	r3, r3, #8
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	3201      	adds	r2, #1
 800e880:	7812      	ldrb	r2, [r2, #0]
 800e882:	4313      	orrs	r3, r2
 800e884:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	7812      	ldrb	r2, [r2, #0]
 800e88e:	4313      	orrs	r3, r2
 800e890:	60fb      	str	r3, [r7, #12]
	return rv;
 800e892:	68fb      	ldr	r3, [r7, #12]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3714      	adds	r7, #20
 800e898:	46bd      	mov	sp, r7
 800e89a:	bc80      	pop	{r7}
 800e89c:	4770      	bx	lr

0800e89e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e89e:	b480      	push	{r7}
 800e8a0:	b083      	sub	sp, #12
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	607a      	str	r2, [r7, #4]
 800e8b0:	887a      	ldrh	r2, [r7, #2]
 800e8b2:	b2d2      	uxtb	r2, r2
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	887b      	ldrh	r3, [r7, #2]
 800e8b8:	0a1b      	lsrs	r3, r3, #8
 800e8ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	887a      	ldrh	r2, [r7, #2]
 800e8c4:	b2d2      	uxtb	r2, r2
 800e8c6:	701a      	strb	r2, [r3, #0]
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bc80      	pop	{r7}
 800e8d0:	4770      	bx	lr

0800e8d2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b083      	sub	sp, #12
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	607a      	str	r2, [r7, #4]
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	b2d2      	uxtb	r2, r2
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	0a1b      	lsrs	r3, r3, #8
 800e8ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	b2d2      	uxtb	r2, r2
 800e8f8:	701a      	strb	r2, [r3, #0]
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	0a1b      	lsrs	r3, r3, #8
 800e8fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	607a      	str	r2, [r7, #4]
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	0a1b      	lsrs	r3, r3, #8
 800e910:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	b2d2      	uxtb	r2, r2
 800e91c:	701a      	strb	r2, [r3, #0]
}
 800e91e:	bf00      	nop
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	bc80      	pop	{r7}
 800e926:	4770      	bx	lr

0800e928 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e928:	b480      	push	{r7}
 800e92a:	b087      	sub	sp, #28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00d      	beq.n	800e95e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e942:	693a      	ldr	r2, [r7, #16]
 800e944:	1c53      	adds	r3, r2, #1
 800e946:	613b      	str	r3, [r7, #16]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	1c59      	adds	r1, r3, #1
 800e94c:	6179      	str	r1, [r7, #20]
 800e94e:	7812      	ldrb	r2, [r2, #0]
 800e950:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3b01      	subs	r3, #1
 800e956:	607b      	str	r3, [r7, #4]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1f1      	bne.n	800e942 <mem_cpy+0x1a>
	}
}
 800e95e:	bf00      	nop
 800e960:	371c      	adds	r7, #28
 800e962:	46bd      	mov	sp, r7
 800e964:	bc80      	pop	{r7}
 800e966:	4770      	bx	lr

0800e968 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	617a      	str	r2, [r7, #20]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	b2d2      	uxtb	r2, r2
 800e982:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3b01      	subs	r3, #1
 800e988:	607b      	str	r3, [r7, #4]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1f3      	bne.n	800e978 <mem_set+0x10>
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	371c      	adds	r7, #28
 800e996:	46bd      	mov	sp, r7
 800e998:	bc80      	pop	{r7}
 800e99a:	4770      	bx	lr

0800e99c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e99c:	b480      	push	{r7}
 800e99e:	b089      	sub	sp, #36	; 0x24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	61fb      	str	r3, [r7, #28]
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	61fa      	str	r2, [r7, #28]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	1c5a      	adds	r2, r3, #1
 800e9c2:	61ba      	str	r2, [r7, #24]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	1acb      	subs	r3, r1, r3
 800e9c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	607b      	str	r3, [r7, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <mem_cmp+0x40>
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d0eb      	beq.n	800e9b4 <mem_cmp+0x18>

	return r;
 800e9dc:	697b      	ldr	r3, [r7, #20]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3724      	adds	r7, #36	; 0x24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bc80      	pop	{r7}
 800e9e6:	4770      	bx	lr

0800e9e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e9f2:	e002      	b.n	800e9fa <chk_chr+0x12>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	607b      	str	r3, [r7, #4]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d005      	beq.n	800ea0e <chk_chr+0x26>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d1f2      	bne.n	800e9f4 <chk_chr+0xc>
	return *str;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	781b      	ldrb	r3, [r3, #0]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bc80      	pop	{r7}
 800ea1a:	4770      	bx	lr

0800ea1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea26:	2300      	movs	r3, #0
 800ea28:	60bb      	str	r3, [r7, #8]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	60fb      	str	r3, [r7, #12]
 800ea2e:	e029      	b.n	800ea84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ea30:	4a26      	ldr	r2, [pc, #152]	; (800eacc <chk_lock+0xb0>)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	011b      	lsls	r3, r3, #4
 800ea36:	4413      	add	r3, r2
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d01d      	beq.n	800ea7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea3e:	4a23      	ldr	r2, [pc, #140]	; (800eacc <chk_lock+0xb0>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	4413      	add	r3, r2
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d116      	bne.n	800ea7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ea50:	4a1e      	ldr	r2, [pc, #120]	; (800eacc <chk_lock+0xb0>)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	011b      	lsls	r3, r3, #4
 800ea56:	4413      	add	r3, r2
 800ea58:	3304      	adds	r3, #4
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d10c      	bne.n	800ea7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea64:	4a19      	ldr	r2, [pc, #100]	; (800eacc <chk_lock+0xb0>)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	011b      	lsls	r3, r3, #4
 800ea6a:	4413      	add	r3, r2
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d102      	bne.n	800ea7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea78:	e007      	b.n	800ea8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3301      	adds	r3, #1
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d9d2      	bls.n	800ea30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d109      	bne.n	800eaa4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d102      	bne.n	800ea9c <chk_lock+0x80>
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d101      	bne.n	800eaa0 <chk_lock+0x84>
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	e010      	b.n	800eac2 <chk_lock+0xa6>
 800eaa0:	2312      	movs	r3, #18
 800eaa2:	e00e      	b.n	800eac2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d108      	bne.n	800eabc <chk_lock+0xa0>
 800eaaa:	4a08      	ldr	r2, [pc, #32]	; (800eacc <chk_lock+0xb0>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	4413      	add	r3, r2
 800eab2:	330c      	adds	r3, #12
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaba:	d101      	bne.n	800eac0 <chk_lock+0xa4>
 800eabc:	2310      	movs	r3, #16
 800eabe:	e000      	b.n	800eac2 <chk_lock+0xa6>
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3714      	adds	r7, #20
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bc80      	pop	{r7}
 800eaca:	4770      	bx	lr
 800eacc:	20000774 	.word	0x20000774

0800ead0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ead6:	2300      	movs	r3, #0
 800ead8:	607b      	str	r3, [r7, #4]
 800eada:	e002      	b.n	800eae2 <enq_lock+0x12>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3301      	adds	r3, #1
 800eae0:	607b      	str	r3, [r7, #4]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d806      	bhi.n	800eaf6 <enq_lock+0x26>
 800eae8:	4a08      	ldr	r2, [pc, #32]	; (800eb0c <enq_lock+0x3c>)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	4413      	add	r3, r2
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1f2      	bne.n	800eadc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	bf14      	ite	ne
 800eafc:	2301      	movne	r3, #1
 800eafe:	2300      	moveq	r3, #0
 800eb00:	b2db      	uxtb	r3, r3
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bc80      	pop	{r7}
 800eb0a:	4770      	bx	lr
 800eb0c:	20000774 	.word	0x20000774

0800eb10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	e01f      	b.n	800eb60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eb20:	4a41      	ldr	r2, [pc, #260]	; (800ec28 <inc_lock+0x118>)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	011b      	lsls	r3, r3, #4
 800eb26:	4413      	add	r3, r2
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d113      	bne.n	800eb5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eb32:	4a3d      	ldr	r2, [pc, #244]	; (800ec28 <inc_lock+0x118>)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	011b      	lsls	r3, r3, #4
 800eb38:	4413      	add	r3, r2
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d109      	bne.n	800eb5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eb46:	4a38      	ldr	r2, [pc, #224]	; (800ec28 <inc_lock+0x118>)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	011b      	lsls	r3, r3, #4
 800eb4c:	4413      	add	r3, r2
 800eb4e:	3308      	adds	r3, #8
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d006      	beq.n	800eb68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	60fb      	str	r3, [r7, #12]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d9dc      	bls.n	800eb20 <inc_lock+0x10>
 800eb66:	e000      	b.n	800eb6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eb68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d132      	bne.n	800ebd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb70:	2300      	movs	r3, #0
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	e002      	b.n	800eb7c <inc_lock+0x6c>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d806      	bhi.n	800eb90 <inc_lock+0x80>
 800eb82:	4a29      	ldr	r2, [pc, #164]	; (800ec28 <inc_lock+0x118>)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	011b      	lsls	r3, r3, #4
 800eb88:	4413      	add	r3, r2
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1f2      	bne.n	800eb76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d101      	bne.n	800eb9a <inc_lock+0x8a>
 800eb96:	2300      	movs	r3, #0
 800eb98:	e040      	b.n	800ec1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	4922      	ldr	r1, [pc, #136]	; (800ec28 <inc_lock+0x118>)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	011b      	lsls	r3, r3, #4
 800eba4:	440b      	add	r3, r1
 800eba6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	491e      	ldr	r1, [pc, #120]	; (800ec28 <inc_lock+0x118>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	440b      	add	r3, r1
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	695a      	ldr	r2, [r3, #20]
 800ebbc:	491a      	ldr	r1, [pc, #104]	; (800ec28 <inc_lock+0x118>)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	011b      	lsls	r3, r3, #4
 800ebc2:	440b      	add	r3, r1
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ebc8:	4a17      	ldr	r2, [pc, #92]	; (800ec28 <inc_lock+0x118>)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	011b      	lsls	r3, r3, #4
 800ebce:	4413      	add	r3, r2
 800ebd0:	330c      	adds	r3, #12
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d009      	beq.n	800ebf0 <inc_lock+0xe0>
 800ebdc:	4a12      	ldr	r2, [pc, #72]	; (800ec28 <inc_lock+0x118>)
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	011b      	lsls	r3, r3, #4
 800ebe2:	4413      	add	r3, r2
 800ebe4:	330c      	adds	r3, #12
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <inc_lock+0xe0>
 800ebec:	2300      	movs	r3, #0
 800ebee:	e015      	b.n	800ec1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d108      	bne.n	800ec08 <inc_lock+0xf8>
 800ebf6:	4a0c      	ldr	r2, [pc, #48]	; (800ec28 <inc_lock+0x118>)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	011b      	lsls	r3, r3, #4
 800ebfc:	4413      	add	r3, r2
 800ebfe:	330c      	adds	r3, #12
 800ec00:	881b      	ldrh	r3, [r3, #0]
 800ec02:	3301      	adds	r3, #1
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	e001      	b.n	800ec0c <inc_lock+0xfc>
 800ec08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec0c:	4906      	ldr	r1, [pc, #24]	; (800ec28 <inc_lock+0x118>)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	011b      	lsls	r3, r3, #4
 800ec12:	440b      	add	r3, r1
 800ec14:	330c      	adds	r3, #12
 800ec16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3301      	adds	r3, #1
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bc80      	pop	{r7}
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	20000774 	.word	0x20000774

0800ec2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3b01      	subs	r3, #1
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d825      	bhi.n	800ec8c <dec_lock+0x60>
		n = Files[i].ctr;
 800ec40:	4a16      	ldr	r2, [pc, #88]	; (800ec9c <dec_lock+0x70>)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	011b      	lsls	r3, r3, #4
 800ec46:	4413      	add	r3, r2
 800ec48:	330c      	adds	r3, #12
 800ec4a:	881b      	ldrh	r3, [r3, #0]
 800ec4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ec4e:	89fb      	ldrh	r3, [r7, #14]
 800ec50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec54:	d101      	bne.n	800ec5a <dec_lock+0x2e>
 800ec56:	2300      	movs	r3, #0
 800ec58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ec5a:	89fb      	ldrh	r3, [r7, #14]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <dec_lock+0x3a>
 800ec60:	89fb      	ldrh	r3, [r7, #14]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ec66:	4a0d      	ldr	r2, [pc, #52]	; (800ec9c <dec_lock+0x70>)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	011b      	lsls	r3, r3, #4
 800ec6c:	4413      	add	r3, r2
 800ec6e:	330c      	adds	r3, #12
 800ec70:	89fa      	ldrh	r2, [r7, #14]
 800ec72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ec74:	89fb      	ldrh	r3, [r7, #14]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d105      	bne.n	800ec86 <dec_lock+0x5a>
 800ec7a:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <dec_lock+0x70>)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	011b      	lsls	r3, r3, #4
 800ec80:	4413      	add	r3, r2
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	737b      	strb	r3, [r7, #13]
 800ec8a:	e001      	b.n	800ec90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ec90:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bc80      	pop	{r7}
 800ec9a:	4770      	bx	lr
 800ec9c:	20000774 	.word	0x20000774

0800eca0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	e010      	b.n	800ecd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ecae:	4a0d      	ldr	r2, [pc, #52]	; (800ece4 <clear_lock+0x44>)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	011b      	lsls	r3, r3, #4
 800ecb4:	4413      	add	r3, r2
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d105      	bne.n	800ecca <clear_lock+0x2a>
 800ecbe:	4a09      	ldr	r2, [pc, #36]	; (800ece4 <clear_lock+0x44>)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	4413      	add	r3, r2
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3301      	adds	r3, #1
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d9eb      	bls.n	800ecae <clear_lock+0xe>
	}
}
 800ecd6:	bf00      	nop
 800ecd8:	bf00      	nop
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bc80      	pop	{r7}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000774 	.word	0x20000774

0800ece8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	78db      	ldrb	r3, [r3, #3]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d034      	beq.n	800ed66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7858      	ldrb	r0, [r3, #1]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	f7ff fd4e 	bl	800e7b0 <disk_write>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	73fb      	strb	r3, [r7, #15]
 800ed1e:	e022      	b.n	800ed66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a1b      	ldr	r3, [r3, #32]
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	1ad2      	subs	r2, r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d217      	bcs.n	800ed66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	789b      	ldrb	r3, [r3, #2]
 800ed3a:	613b      	str	r3, [r7, #16]
 800ed3c:	e010      	b.n	800ed60 <sync_window+0x78>
					wsect += fs->fsize;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	4413      	add	r3, r2
 800ed46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7858      	ldrb	r0, [r3, #1]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed52:	2301      	movs	r3, #1
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	f7ff fd2b 	bl	800e7b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d8eb      	bhi.n	800ed3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d01b      	beq.n	800edc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7ff ffad 	bl	800ece8 <sync_window>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed92:	7bfb      	ldrb	r3, [r7, #15]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d113      	bne.n	800edc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7858      	ldrb	r0, [r3, #1]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eda2:	2301      	movs	r3, #1
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	f7ff fce3 	bl	800e770 <disk_read>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d004      	beq.n	800edba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edb4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
	...

0800edcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7ff ff87 	bl	800ece8 <sync_window>
 800edda:	4603      	mov	r3, r0
 800eddc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d158      	bne.n	800ee96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2b03      	cmp	r3, #3
 800edea:	d148      	bne.n	800ee7e <sync_fs+0xb2>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	791b      	ldrb	r3, [r3, #4]
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d144      	bne.n	800ee7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	3330      	adds	r3, #48	; 0x30
 800edf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edfc:	2100      	movs	r1, #0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7ff fdb2 	bl	800e968 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3330      	adds	r3, #48	; 0x30
 800ee08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7ff fd44 	bl	800e89e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3330      	adds	r3, #48	; 0x30
 800ee1a:	4921      	ldr	r1, [pc, #132]	; (800eea0 <sync_fs+0xd4>)
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fd58 	bl	800e8d2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3330      	adds	r3, #48	; 0x30
 800ee26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ee2a:	491e      	ldr	r1, [pc, #120]	; (800eea4 <sync_fs+0xd8>)
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fd50 	bl	800e8d2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	3330      	adds	r3, #48	; 0x30
 800ee36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	4610      	mov	r0, r2
 800ee42:	f7ff fd46 	bl	800e8d2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3330      	adds	r3, #48	; 0x30
 800ee4a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	4619      	mov	r1, r3
 800ee54:	4610      	mov	r0, r2
 800ee56:	f7ff fd3c 	bl	800e8d2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	69db      	ldr	r3, [r3, #28]
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	7858      	ldrb	r0, [r3, #1]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee72:	2301      	movs	r3, #1
 800ee74:	f7ff fc9c 	bl	800e7b0 <disk_write>
			fs->fsi_flag = 0;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	785b      	ldrb	r3, [r3, #1]
 800ee82:	2200      	movs	r2, #0
 800ee84:	2100      	movs	r1, #0
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff fcb2 	bl	800e7f0 <disk_ioctl>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <sync_fs+0xca>
 800ee92:	2301      	movs	r3, #1
 800ee94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	41615252 	.word	0x41615252
 800eea4:	61417272 	.word	0x61417272

0800eea8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	3b02      	subs	r3, #2
 800eeb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	3b02      	subs	r3, #2
 800eebe:	683a      	ldr	r2, [r7, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d301      	bcc.n	800eec8 <clust2sect+0x20>
 800eec4:	2300      	movs	r3, #0
 800eec6:	e008      	b.n	800eeda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	895b      	ldrh	r3, [r3, #10]
 800eecc:	461a      	mov	r2, r3
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	fb03 f202 	mul.w	r2, r3, r2
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed8:	4413      	add	r3, r2
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	370c      	adds	r7, #12
 800eede:	46bd      	mov	sp, r7
 800eee0:	bc80      	pop	{r7}
 800eee2:	4770      	bx	lr

0800eee4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d904      	bls.n	800ef04 <get_fat+0x20>
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	695b      	ldr	r3, [r3, #20]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d302      	bcc.n	800ef0a <get_fat+0x26>
		val = 1;	/* Internal error */
 800ef04:	2301      	movs	r3, #1
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	e08f      	b.n	800f02a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ef0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef0e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d062      	beq.n	800efde <get_fat+0xfa>
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	dc7c      	bgt.n	800f016 <get_fat+0x132>
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d002      	beq.n	800ef26 <get_fat+0x42>
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d042      	beq.n	800efaa <get_fat+0xc6>
 800ef24:	e077      	b.n	800f016 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	085b      	lsrs	r3, r3, #1
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	4413      	add	r3, r2
 800ef32:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6a1a      	ldr	r2, [r3, #32]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	0a5b      	lsrs	r3, r3, #9
 800ef3c:	4413      	add	r3, r2
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6938      	ldr	r0, [r7, #16]
 800ef42:	f7ff ff15 	bl	800ed70 <move_window>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d167      	bne.n	800f01c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	1c5a      	adds	r2, r3, #1
 800ef50:	60fa      	str	r2, [r7, #12]
 800ef52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	4413      	add	r3, r2
 800ef5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef5e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6a1a      	ldr	r2, [r3, #32]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	0a5b      	lsrs	r3, r3, #9
 800ef68:	4413      	add	r3, r2
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	6938      	ldr	r0, [r7, #16]
 800ef6e:	f7ff feff 	bl	800ed70 <move_window>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d153      	bne.n	800f020 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef7e:	693a      	ldr	r2, [r7, #16]
 800ef80:	4413      	add	r3, r2
 800ef82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef86:	021b      	lsls	r3, r3, #8
 800ef88:	461a      	mov	r2, r3
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d002      	beq.n	800efa0 <get_fat+0xbc>
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	091b      	lsrs	r3, r3, #4
 800ef9e:	e002      	b.n	800efa6 <get_fat+0xc2>
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efa6:	617b      	str	r3, [r7, #20]
			break;
 800efa8:	e03f      	b.n	800f02a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	6a1a      	ldr	r2, [r3, #32]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	0a1b      	lsrs	r3, r3, #8
 800efb2:	4413      	add	r3, r2
 800efb4:	4619      	mov	r1, r3
 800efb6:	6938      	ldr	r0, [r7, #16]
 800efb8:	f7ff feda 	bl	800ed70 <move_window>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d130      	bne.n	800f024 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800efd0:	4413      	add	r3, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fc2a 	bl	800e82c <ld_word>
 800efd8:	4603      	mov	r3, r0
 800efda:	617b      	str	r3, [r7, #20]
			break;
 800efdc:	e025      	b.n	800f02a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	6a1a      	ldr	r2, [r3, #32]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	09db      	lsrs	r3, r3, #7
 800efe6:	4413      	add	r3, r2
 800efe8:	4619      	mov	r1, r3
 800efea:	6938      	ldr	r0, [r7, #16]
 800efec:	f7ff fec0 	bl	800ed70 <move_window>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d118      	bne.n	800f028 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f004:	4413      	add	r3, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f7ff fc27 	bl	800e85a <ld_dword>
 800f00c:	4603      	mov	r3, r0
 800f00e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f012:	617b      	str	r3, [r7, #20]
			break;
 800f014:	e009      	b.n	800f02a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f016:	2301      	movs	r3, #1
 800f018:	617b      	str	r3, [r7, #20]
 800f01a:	e006      	b.n	800f02a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f01c:	bf00      	nop
 800f01e:	e004      	b.n	800f02a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f020:	bf00      	nop
 800f022:	e002      	b.n	800f02a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f024:	bf00      	nop
 800f026:	e000      	b.n	800f02a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f028:	bf00      	nop
		}
	}

	return val;
 800f02a:	697b      	ldr	r3, [r7, #20]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f034:	b590      	push	{r4, r7, lr}
 800f036:	b089      	sub	sp, #36	; 0x24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f040:	2302      	movs	r3, #2
 800f042:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b01      	cmp	r3, #1
 800f048:	f240 80d2 	bls.w	800f1f0 <put_fat+0x1bc>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	429a      	cmp	r2, r3
 800f054:	f080 80cc 	bcs.w	800f1f0 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b03      	cmp	r3, #3
 800f05e:	f000 8096 	beq.w	800f18e <put_fat+0x15a>
 800f062:	2b03      	cmp	r3, #3
 800f064:	f300 80cd 	bgt.w	800f202 <put_fat+0x1ce>
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d002      	beq.n	800f072 <put_fat+0x3e>
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d06e      	beq.n	800f14e <put_fat+0x11a>
 800f070:	e0c7      	b.n	800f202 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	61bb      	str	r3, [r7, #24]
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	085b      	lsrs	r3, r3, #1
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	4413      	add	r3, r2
 800f07e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6a1a      	ldr	r2, [r3, #32]
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	0a5b      	lsrs	r3, r3, #9
 800f088:	4413      	add	r3, r2
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7ff fe6f 	bl	800ed70 <move_window>
 800f092:	4603      	mov	r3, r0
 800f094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f096:	7ffb      	ldrb	r3, [r7, #31]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f040 80ab 	bne.w	800f1f4 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	1c59      	adds	r1, r3, #1
 800f0a8:	61b9      	str	r1, [r7, #24]
 800f0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ae:	4413      	add	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00d      	beq.n	800f0d8 <put_fat+0xa4>
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	b25b      	sxtb	r3, r3
 800f0c2:	f003 030f 	and.w	r3, r3, #15
 800f0c6:	b25a      	sxtb	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	011b      	lsls	r3, r3, #4
 800f0ce:	b25b      	sxtb	r3, r3
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	b25b      	sxtb	r3, r3
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	e001      	b.n	800f0dc <put_fat+0xa8>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6a1a      	ldr	r2, [r3, #32]
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	0a5b      	lsrs	r3, r3, #9
 800f0ee:	4413      	add	r3, r2
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7ff fe3c 	bl	800ed70 <move_window>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0fc:	7ffb      	ldrb	r3, [r7, #31]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d17a      	bne.n	800f1f8 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f10e:	4413      	add	r3, r2
 800f110:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	f003 0301 	and.w	r3, r3, #1
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d003      	beq.n	800f124 <put_fat+0xf0>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	091b      	lsrs	r3, r3, #4
 800f120:	b2db      	uxtb	r3, r3
 800f122:	e00e      	b.n	800f142 <put_fat+0x10e>
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	b25b      	sxtb	r3, r3
 800f12a:	f023 030f 	bic.w	r3, r3, #15
 800f12e:	b25a      	sxtb	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	0a1b      	lsrs	r3, r3, #8
 800f134:	b25b      	sxtb	r3, r3
 800f136:	f003 030f 	and.w	r3, r3, #15
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	4313      	orrs	r3, r2
 800f13e:	b25b      	sxtb	r3, r3
 800f140:	b2db      	uxtb	r3, r3
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2201      	movs	r2, #1
 800f14a:	70da      	strb	r2, [r3, #3]
			break;
 800f14c:	e059      	b.n	800f202 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6a1a      	ldr	r2, [r3, #32]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	0a1b      	lsrs	r3, r3, #8
 800f156:	4413      	add	r3, r2
 800f158:	4619      	mov	r1, r3
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f7ff fe08 	bl	800ed70 <move_window>
 800f160:	4603      	mov	r3, r0
 800f162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f164:	7ffb      	ldrb	r3, [r7, #31]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d148      	bne.n	800f1fc <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f178:	4413      	add	r3, r2
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	b292      	uxth	r2, r2
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff fb8c 	bl	800e89e <st_word>
			fs->wflag = 1;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2201      	movs	r2, #1
 800f18a:	70da      	strb	r2, [r3, #3]
			break;
 800f18c:	e039      	b.n	800f202 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6a1a      	ldr	r2, [r3, #32]
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	09db      	lsrs	r3, r3, #7
 800f196:	4413      	add	r3, r2
 800f198:	4619      	mov	r1, r3
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7ff fde8 	bl	800ed70 <move_window>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1a4:	7ffb      	ldrb	r3, [r7, #31]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d12a      	bne.n	800f200 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f1be:	4413      	add	r3, r2
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff fb4a 	bl	800e85a <ld_dword>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f1cc:	4323      	orrs	r3, r4
 800f1ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f1de:	4413      	add	r3, r2
 800f1e0:	6879      	ldr	r1, [r7, #4]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff fb75 	bl	800e8d2 <st_dword>
			fs->wflag = 1;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	70da      	strb	r2, [r3, #3]
			break;
 800f1ee:	e008      	b.n	800f202 <put_fat+0x1ce>
		}
	}
 800f1f0:	bf00      	nop
 800f1f2:	e006      	b.n	800f202 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f1f4:	bf00      	nop
 800f1f6:	e004      	b.n	800f202 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f1f8:	bf00      	nop
 800f1fa:	e002      	b.n	800f202 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f1fc:	bf00      	nop
 800f1fe:	e000      	b.n	800f202 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f200:	bf00      	nop
	return res;
 800f202:	7ffb      	ldrb	r3, [r7, #31]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3724      	adds	r7, #36	; 0x24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd90      	pop	{r4, r7, pc}

0800f20c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d904      	bls.n	800f232 <remove_chain+0x26>
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d301      	bcc.n	800f236 <remove_chain+0x2a>
 800f232:	2302      	movs	r3, #2
 800f234:	e04b      	b.n	800f2ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00c      	beq.n	800f256 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f23c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	69b8      	ldr	r0, [r7, #24]
 800f244:	f7ff fef6 	bl	800f034 <put_fat>
 800f248:	4603      	mov	r3, r0
 800f24a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f24c:	7ffb      	ldrb	r3, [r7, #31]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <remove_chain+0x4a>
 800f252:	7ffb      	ldrb	r3, [r7, #31]
 800f254:	e03b      	b.n	800f2ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f256:	68b9      	ldr	r1, [r7, #8]
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7ff fe43 	bl	800eee4 <get_fat>
 800f25e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d031      	beq.n	800f2ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d101      	bne.n	800f270 <remove_chain+0x64>
 800f26c:	2302      	movs	r3, #2
 800f26e:	e02e      	b.n	800f2ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f276:	d101      	bne.n	800f27c <remove_chain+0x70>
 800f278:	2301      	movs	r3, #1
 800f27a:	e028      	b.n	800f2ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f27c:	2200      	movs	r2, #0
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	69b8      	ldr	r0, [r7, #24]
 800f282:	f7ff fed7 	bl	800f034 <put_fat>
 800f286:	4603      	mov	r3, r0
 800f288:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f28a:	7ffb      	ldrb	r3, [r7, #31]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <remove_chain+0x88>
 800f290:	7ffb      	ldrb	r3, [r7, #31]
 800f292:	e01c      	b.n	800f2ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	691a      	ldr	r2, [r3, #16]
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	3b02      	subs	r3, #2
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d20b      	bcs.n	800f2ba <remove_chain+0xae>
			fs->free_clst++;
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	791b      	ldrb	r3, [r3, #4]
 800f2b0:	f043 0301 	orr.w	r3, r3, #1
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d3c6      	bcc.n	800f256 <remove_chain+0x4a>
 800f2c8:	e000      	b.n	800f2cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f2ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b088      	sub	sp, #32
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10d      	bne.n	800f308 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d004      	beq.n	800f302 <create_chain+0x2c>
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	69ba      	ldr	r2, [r7, #24]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d31b      	bcc.n	800f33a <create_chain+0x64>
 800f302:	2301      	movs	r3, #1
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	e018      	b.n	800f33a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff fdea 	bl	800eee4 <get_fat>
 800f310:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d801      	bhi.n	800f31c <create_chain+0x46>
 800f318:	2301      	movs	r3, #1
 800f31a:	e070      	b.n	800f3fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f322:	d101      	bne.n	800f328 <create_chain+0x52>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	e06a      	b.n	800f3fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	695b      	ldr	r3, [r3, #20]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d201      	bcs.n	800f336 <create_chain+0x60>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	e063      	b.n	800f3fe <create_chain+0x128>
		scl = clst;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	3301      	adds	r3, #1
 800f342:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	695b      	ldr	r3, [r3, #20]
 800f348:	69fa      	ldr	r2, [r7, #28]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d307      	bcc.n	800f35e <create_chain+0x88>
				ncl = 2;
 800f34e:	2302      	movs	r3, #2
 800f350:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f352:	69fa      	ldr	r2, [r7, #28]
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	429a      	cmp	r2, r3
 800f358:	d901      	bls.n	800f35e <create_chain+0x88>
 800f35a:	2300      	movs	r3, #0
 800f35c:	e04f      	b.n	800f3fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f35e:	69f9      	ldr	r1, [r7, #28]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fdbf 	bl	800eee4 <get_fat>
 800f366:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00e      	beq.n	800f38c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d003      	beq.n	800f37c <create_chain+0xa6>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f37a:	d101      	bne.n	800f380 <create_chain+0xaa>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	e03e      	b.n	800f3fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f380:	69fa      	ldr	r2, [r7, #28]
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	429a      	cmp	r2, r3
 800f386:	d1da      	bne.n	800f33e <create_chain+0x68>
 800f388:	2300      	movs	r3, #0
 800f38a:	e038      	b.n	800f3fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f38c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f392:	69f9      	ldr	r1, [r7, #28]
 800f394:	6938      	ldr	r0, [r7, #16]
 800f396:	f7ff fe4d 	bl	800f034 <put_fat>
 800f39a:	4603      	mov	r3, r0
 800f39c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d109      	bne.n	800f3b8 <create_chain+0xe2>
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d006      	beq.n	800f3b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6938      	ldr	r0, [r7, #16]
 800f3b0:	f7ff fe40 	bl	800f034 <put_fat>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d116      	bne.n	800f3ec <create_chain+0x116>
		fs->last_clst = ncl;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	69fa      	ldr	r2, [r7, #28]
 800f3c2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	3b02      	subs	r3, #2
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d804      	bhi.n	800f3dc <create_chain+0x106>
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	1e5a      	subs	r2, r3, #1
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	791b      	ldrb	r3, [r3, #4]
 800f3e0:	f043 0301 	orr.w	r3, r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	711a      	strb	r2, [r3, #4]
 800f3ea:	e007      	b.n	800f3fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d102      	bne.n	800f3f8 <create_chain+0x122>
 800f3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3f6:	e000      	b.n	800f3fa <create_chain+0x124>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f3fc:	69fb      	ldr	r3, [r7, #28]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3720      	adds	r7, #32
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f406:	b480      	push	{r7}
 800f408:	b087      	sub	sp, #28
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41a:	3304      	adds	r3, #4
 800f41c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	0a5b      	lsrs	r3, r3, #9
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	8952      	ldrh	r2, [r2, #10]
 800f426:	fbb3 f3f2 	udiv	r3, r3, r2
 800f42a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	1d1a      	adds	r2, r3, #4
 800f430:	613a      	str	r2, [r7, #16]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <clmt_clust+0x3a>
 800f43c:	2300      	movs	r3, #0
 800f43e:	e010      	b.n	800f462 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f440:	697a      	ldr	r2, [r7, #20]
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	429a      	cmp	r2, r3
 800f446:	d307      	bcc.n	800f458 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	3304      	adds	r3, #4
 800f454:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f456:	e7e9      	b.n	800f42c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f458:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	4413      	add	r3, r2
}
 800f462:	4618      	mov	r0, r3
 800f464:	371c      	adds	r7, #28
 800f466:	46bd      	mov	sp, r7
 800f468:	bc80      	pop	{r7}
 800f46a:	4770      	bx	lr

0800f46c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f482:	d204      	bcs.n	800f48e <dir_sdi+0x22>
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	f003 031f 	and.w	r3, r3, #31
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d001      	beq.n	800f492 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f48e:	2302      	movs	r3, #2
 800f490:	e063      	b.n	800f55a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d106      	bne.n	800f4b2 <dir_sdi+0x46>
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d902      	bls.n	800f4b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10c      	bne.n	800f4d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	095b      	lsrs	r3, r3, #5
 800f4bc:	693a      	ldr	r2, [r7, #16]
 800f4be:	8912      	ldrh	r2, [r2, #8]
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d301      	bcc.n	800f4c8 <dir_sdi+0x5c>
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	e048      	b.n	800f55a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	61da      	str	r2, [r3, #28]
 800f4d0:	e029      	b.n	800f526 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	895b      	ldrh	r3, [r3, #10]
 800f4d6:	025b      	lsls	r3, r3, #9
 800f4d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4da:	e019      	b.n	800f510 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6979      	ldr	r1, [r7, #20]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff fcff 	bl	800eee4 <get_fat>
 800f4e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4ee:	d101      	bne.n	800f4f4 <dir_sdi+0x88>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e032      	b.n	800f55a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d904      	bls.n	800f504 <dir_sdi+0x98>
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	695b      	ldr	r3, [r3, #20]
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	429a      	cmp	r2, r3
 800f502:	d301      	bcc.n	800f508 <dir_sdi+0x9c>
 800f504:	2302      	movs	r3, #2
 800f506:	e028      	b.n	800f55a <dir_sdi+0xee>
			ofs -= csz;
 800f508:	683a      	ldr	r2, [r7, #0]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	429a      	cmp	r2, r3
 800f516:	d2e1      	bcs.n	800f4dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f518:	6979      	ldr	r1, [r7, #20]
 800f51a:	6938      	ldr	r0, [r7, #16]
 800f51c:	f7ff fcc4 	bl	800eea8 <clust2sect>
 800f520:	4602      	mov	r2, r0
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <dir_sdi+0xcc>
 800f534:	2302      	movs	r3, #2
 800f536:	e010      	b.n	800f55a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	69da      	ldr	r2, [r3, #28]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	0a5b      	lsrs	r3, r3, #9
 800f540:	441a      	add	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f552:	441a      	add	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f558:	2300      	movs	r3, #0
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3718      	adds	r7, #24
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b086      	sub	sp, #24
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	3320      	adds	r3, #32
 800f578:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	69db      	ldr	r3, [r3, #28]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d003      	beq.n	800f58a <dir_next+0x28>
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f588:	d301      	bcc.n	800f58e <dir_next+0x2c>
 800f58a:	2304      	movs	r3, #4
 800f58c:	e0aa      	b.n	800f6e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f594:	2b00      	cmp	r3, #0
 800f596:	f040 8098 	bne.w	800f6ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10b      	bne.n	800f5c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	095b      	lsrs	r3, r3, #5
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	8912      	ldrh	r2, [r2, #8]
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	f0c0 8088 	bcc.w	800f6ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	61da      	str	r2, [r3, #28]
 800f5c0:	2304      	movs	r3, #4
 800f5c2:	e08f      	b.n	800f6e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	0a5b      	lsrs	r3, r3, #9
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	8952      	ldrh	r2, [r2, #10]
 800f5cc:	3a01      	subs	r2, #1
 800f5ce:	4013      	ands	r3, r2
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d17a      	bne.n	800f6ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4610      	mov	r0, r2
 800f5de:	f7ff fc81 	bl	800eee4 <get_fat>
 800f5e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d801      	bhi.n	800f5ee <dir_next+0x8c>
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	e07a      	b.n	800f6e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5f4:	d101      	bne.n	800f5fa <dir_next+0x98>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e074      	b.n	800f6e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	429a      	cmp	r2, r3
 800f602:	d358      	bcc.n	800f6b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d104      	bne.n	800f614 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	61da      	str	r2, [r3, #28]
 800f610:	2304      	movs	r3, #4
 800f612:	e067      	b.n	800f6e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	699b      	ldr	r3, [r3, #24]
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7ff fe5a 	bl	800f2d6 <create_chain>
 800f622:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <dir_next+0xcc>
 800f62a:	2307      	movs	r3, #7
 800f62c:	e05a      	b.n	800f6e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d101      	bne.n	800f638 <dir_next+0xd6>
 800f634:	2302      	movs	r3, #2
 800f636:	e055      	b.n	800f6e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f63e:	d101      	bne.n	800f644 <dir_next+0xe2>
 800f640:	2301      	movs	r3, #1
 800f642:	e04f      	b.n	800f6e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f7ff fb4f 	bl	800ece8 <sync_window>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <dir_next+0xf2>
 800f650:	2301      	movs	r3, #1
 800f652:	e047      	b.n	800f6e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	3330      	adds	r3, #48	; 0x30
 800f658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f65c:	2100      	movs	r1, #0
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff f982 	bl	800e968 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f664:	2300      	movs	r3, #0
 800f666:	613b      	str	r3, [r7, #16]
 800f668:	6979      	ldr	r1, [r7, #20]
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f7ff fc1c 	bl	800eea8 <clust2sect>
 800f670:	4602      	mov	r2, r0
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	62da      	str	r2, [r3, #44]	; 0x2c
 800f676:	e012      	b.n	800f69e <dir_next+0x13c>
						fs->wflag = 1;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2201      	movs	r2, #1
 800f67c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff fb32 	bl	800ece8 <sync_window>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <dir_next+0x12c>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e02a      	b.n	800f6e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	3301      	adds	r3, #1
 800f692:	613b      	str	r3, [r7, #16]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f698:	1c5a      	adds	r2, r3, #1
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	895b      	ldrh	r3, [r3, #10]
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d3e6      	bcc.n	800f678 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	1ad2      	subs	r2, r2, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	697a      	ldr	r2, [r7, #20]
 800f6ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f6bc:	6979      	ldr	r1, [r7, #20]
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7ff fbf2 	bl	800eea8 <clust2sect>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6dc:	441a      	add	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3718      	adds	r7, #24
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff feb4 	bl	800f46c <dir_sdi>
 800f704:	4603      	mov	r3, r0
 800f706:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d12b      	bne.n	800f766 <dir_alloc+0x7a>
		n = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	69db      	ldr	r3, [r3, #28]
 800f716:	4619      	mov	r1, r3
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f7ff fb29 	bl	800ed70 <move_window>
 800f71e:	4603      	mov	r3, r0
 800f720:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d11d      	bne.n	800f764 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a1b      	ldr	r3, [r3, #32]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2be5      	cmp	r3, #229	; 0xe5
 800f730:	d004      	beq.n	800f73c <dir_alloc+0x50>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d107      	bne.n	800f74c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	3301      	adds	r3, #1
 800f740:	613b      	str	r3, [r7, #16]
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	d102      	bne.n	800f750 <dir_alloc+0x64>
 800f74a:	e00c      	b.n	800f766 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f74c:	2300      	movs	r3, #0
 800f74e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f750:	2101      	movs	r1, #1
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff ff05 	bl	800f562 <dir_next>
 800f758:	4603      	mov	r3, r0
 800f75a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0d7      	beq.n	800f712 <dir_alloc+0x26>
 800f762:	e000      	b.n	800f766 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f764:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	2b04      	cmp	r3, #4
 800f76a:	d101      	bne.n	800f770 <dir_alloc+0x84>
 800f76c:	2307      	movs	r3, #7
 800f76e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b084      	sub	sp, #16
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
 800f782:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	331a      	adds	r3, #26
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff f84f 	bl	800e82c <ld_word>
 800f78e:	4603      	mov	r3, r0
 800f790:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	2b03      	cmp	r3, #3
 800f798:	d109      	bne.n	800f7ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	3314      	adds	r3, #20
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7ff f844 	bl	800e82c <ld_word>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	041b      	lsls	r3, r3, #16
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	331a      	adds	r3, #26
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	b292      	uxth	r2, r2
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff f865 	bl	800e89e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d109      	bne.n	800f7f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f103 0214 	add.w	r2, r3, #20
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	0c1b      	lsrs	r3, r3, #16
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	f7ff f857 	bl	800e89e <st_word>
	}
}
 800f7f0:	bf00      	nop
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f806:	2100      	movs	r1, #0
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff fe2f 	bl	800f46c <dir_sdi>
 800f80e:	4603      	mov	r3, r0
 800f810:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <dir_find+0x24>
 800f818:	7dfb      	ldrb	r3, [r7, #23]
 800f81a:	e03e      	b.n	800f89a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	69db      	ldr	r3, [r3, #28]
 800f820:	4619      	mov	r1, r3
 800f822:	6938      	ldr	r0, [r7, #16]
 800f824:	f7ff faa4 	bl	800ed70 <move_window>
 800f828:	4603      	mov	r3, r0
 800f82a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f82c:	7dfb      	ldrb	r3, [r7, #23]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d12f      	bne.n	800f892 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <dir_find+0x4e>
 800f840:	2304      	movs	r3, #4
 800f842:	75fb      	strb	r3, [r7, #23]
 800f844:	e028      	b.n	800f898 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	330b      	adds	r3, #11
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f852:	b2da      	uxtb	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a1b      	ldr	r3, [r3, #32]
 800f85c:	330b      	adds	r3, #11
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	f003 0308 	and.w	r3, r3, #8
 800f864:	2b00      	cmp	r3, #0
 800f866:	d10a      	bne.n	800f87e <dir_find+0x86>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6a18      	ldr	r0, [r3, #32]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3324      	adds	r3, #36	; 0x24
 800f870:	220b      	movs	r2, #11
 800f872:	4619      	mov	r1, r3
 800f874:	f7ff f892 	bl	800e99c <mem_cmp>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00b      	beq.n	800f896 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f87e:	2100      	movs	r1, #0
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff fe6e 	bl	800f562 <dir_next>
 800f886:	4603      	mov	r3, r0
 800f888:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f88a:	7dfb      	ldrb	r3, [r7, #23]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0c5      	beq.n	800f81c <dir_find+0x24>
 800f890:	e002      	b.n	800f898 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f892:	bf00      	nop
 800f894:	e000      	b.n	800f898 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f896:	bf00      	nop

	return res;
 800f898:	7dfb      	ldrb	r3, [r7, #23]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3718      	adds	r7, #24
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7ff ff1a 	bl	800f6ec <dir_alloc>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d11c      	bne.n	800f8fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	69db      	ldr	r3, [r3, #28]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	68b8      	ldr	r0, [r7, #8]
 800f8ca:	f7ff fa51 	bl	800ed70 <move_window>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f8d2:	7bfb      	ldrb	r3, [r7, #15]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d111      	bne.n	800f8fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	2100      	movs	r1, #0
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff f841 	bl	800e968 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a18      	ldr	r0, [r3, #32]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3324      	adds	r3, #36	; 0x24
 800f8ee:	220b      	movs	r2, #11
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	f7ff f819 	bl	800e928 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
	...

0800f908 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	3324      	adds	r3, #36	; 0x24
 800f91c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f91e:	220b      	movs	r2, #11
 800f920:	2120      	movs	r1, #32
 800f922:	68b8      	ldr	r0, [r7, #8]
 800f924:	f7ff f820 	bl	800e968 <mem_set>
	si = i = 0; ni = 8;
 800f928:	2300      	movs	r3, #0
 800f92a:	613b      	str	r3, [r7, #16]
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	2308      	movs	r3, #8
 800f932:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	61fa      	str	r2, [r7, #28]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	4413      	add	r3, r2
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f942:	7efb      	ldrb	r3, [r7, #27]
 800f944:	2b20      	cmp	r3, #32
 800f946:	d94e      	bls.n	800f9e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f948:	7efb      	ldrb	r3, [r7, #27]
 800f94a:	2b2f      	cmp	r3, #47	; 0x2f
 800f94c:	d006      	beq.n	800f95c <create_name+0x54>
 800f94e:	7efb      	ldrb	r3, [r7, #27]
 800f950:	2b5c      	cmp	r3, #92	; 0x5c
 800f952:	d110      	bne.n	800f976 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f954:	e002      	b.n	800f95c <create_name+0x54>
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	3301      	adds	r3, #1
 800f95a:	61fb      	str	r3, [r7, #28]
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	4413      	add	r3, r2
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b2f      	cmp	r3, #47	; 0x2f
 800f966:	d0f6      	beq.n	800f956 <create_name+0x4e>
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	4413      	add	r3, r2
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b5c      	cmp	r3, #92	; 0x5c
 800f972:	d0f0      	beq.n	800f956 <create_name+0x4e>
			break;
 800f974:	e038      	b.n	800f9e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f976:	7efb      	ldrb	r3, [r7, #27]
 800f978:	2b2e      	cmp	r3, #46	; 0x2e
 800f97a:	d003      	beq.n	800f984 <create_name+0x7c>
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	429a      	cmp	r2, r3
 800f982:	d30c      	bcc.n	800f99e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b0b      	cmp	r3, #11
 800f988:	d002      	beq.n	800f990 <create_name+0x88>
 800f98a:	7efb      	ldrb	r3, [r7, #27]
 800f98c:	2b2e      	cmp	r3, #46	; 0x2e
 800f98e:	d001      	beq.n	800f994 <create_name+0x8c>
 800f990:	2306      	movs	r3, #6
 800f992:	e044      	b.n	800fa1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f994:	2308      	movs	r3, #8
 800f996:	613b      	str	r3, [r7, #16]
 800f998:	230b      	movs	r3, #11
 800f99a:	617b      	str	r3, [r7, #20]
			continue;
 800f99c:	e022      	b.n	800f9e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f99e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da04      	bge.n	800f9b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f9a6:	7efb      	ldrb	r3, [r7, #27]
 800f9a8:	3b80      	subs	r3, #128	; 0x80
 800f9aa:	4a1f      	ldr	r2, [pc, #124]	; (800fa28 <create_name+0x120>)
 800f9ac:	5cd3      	ldrb	r3, [r2, r3]
 800f9ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f9b0:	7efb      	ldrb	r3, [r7, #27]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	481d      	ldr	r0, [pc, #116]	; (800fa2c <create_name+0x124>)
 800f9b6:	f7ff f817 	bl	800e9e8 <chk_chr>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d001      	beq.n	800f9c4 <create_name+0xbc>
 800f9c0:	2306      	movs	r3, #6
 800f9c2:	e02c      	b.n	800fa1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f9c4:	7efb      	ldrb	r3, [r7, #27]
 800f9c6:	2b60      	cmp	r3, #96	; 0x60
 800f9c8:	d905      	bls.n	800f9d6 <create_name+0xce>
 800f9ca:	7efb      	ldrb	r3, [r7, #27]
 800f9cc:	2b7a      	cmp	r3, #122	; 0x7a
 800f9ce:	d802      	bhi.n	800f9d6 <create_name+0xce>
 800f9d0:	7efb      	ldrb	r3, [r7, #27]
 800f9d2:	3b20      	subs	r3, #32
 800f9d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	613a      	str	r2, [r7, #16]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	4413      	add	r3, r2
 800f9e0:	7efa      	ldrb	r2, [r7, #27]
 800f9e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f9e4:	e7a6      	b.n	800f934 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	441a      	add	r2, r3
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d101      	bne.n	800f9fc <create_name+0xf4>
 800f9f8:	2306      	movs	r3, #6
 800f9fa:	e010      	b.n	800fa1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	2be5      	cmp	r3, #229	; 0xe5
 800fa02:	d102      	bne.n	800fa0a <create_name+0x102>
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2205      	movs	r2, #5
 800fa08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa0a:	7efb      	ldrb	r3, [r7, #27]
 800fa0c:	2b20      	cmp	r3, #32
 800fa0e:	d801      	bhi.n	800fa14 <create_name+0x10c>
 800fa10:	2204      	movs	r2, #4
 800fa12:	e000      	b.n	800fa16 <create_name+0x10e>
 800fa14:	2200      	movs	r2, #0
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	330b      	adds	r3, #11
 800fa1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fa1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	08017928 	.word	0x08017928
 800fa2c:	0801785c 	.word	0x0801785c

0800fa30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fa44:	e002      	b.n	800fa4c <follow_path+0x1c>
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	603b      	str	r3, [r7, #0]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b2f      	cmp	r3, #47	; 0x2f
 800fa52:	d0f8      	beq.n	800fa46 <follow_path+0x16>
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b5c      	cmp	r3, #92	; 0x5c
 800fa5a:	d0f4      	beq.n	800fa46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b1f      	cmp	r3, #31
 800fa68:	d80a      	bhi.n	800fa80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2280      	movs	r2, #128	; 0x80
 800fa6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fa72:	2100      	movs	r1, #0
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7ff fcf9 	bl	800f46c <dir_sdi>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	75fb      	strb	r3, [r7, #23]
 800fa7e:	e043      	b.n	800fb08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa80:	463b      	mov	r3, r7
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff ff3f 	bl	800f908 <create_name>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fa8e:	7dfb      	ldrb	r3, [r7, #23]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d134      	bne.n	800fafe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff feaf 	bl	800f7f8 <dir_find>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800faa4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800faa6:	7dfb      	ldrb	r3, [r7, #23]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00a      	beq.n	800fac2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d127      	bne.n	800fb02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fab2:	7afb      	ldrb	r3, [r7, #11]
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d122      	bne.n	800fb02 <follow_path+0xd2>
 800fabc:	2305      	movs	r3, #5
 800fabe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fac0:	e01f      	b.n	800fb02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	f003 0304 	and.w	r3, r3, #4
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d11c      	bne.n	800fb06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	799b      	ldrb	r3, [r3, #6]
 800fad0:	f003 0310 	and.w	r3, r3, #16
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d102      	bne.n	800fade <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fad8:	2305      	movs	r3, #5
 800fada:	75fb      	strb	r3, [r7, #23]
 800fadc:	e014      	b.n	800fb08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faec:	4413      	add	r3, r2
 800faee:	4619      	mov	r1, r3
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff fe42 	bl	800f77a <ld_clust>
 800faf6:	4602      	mov	r2, r0
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fafc:	e7c0      	b.n	800fa80 <follow_path+0x50>
			if (res != FR_OK) break;
 800fafe:	bf00      	nop
 800fb00:	e002      	b.n	800fb08 <follow_path+0xd8>
				break;
 800fb02:	bf00      	nop
 800fb04:	e000      	b.n	800fb08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb06:	bf00      	nop
			}
		}
	}

	return res;
 800fb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3718      	adds	r7, #24
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b087      	sub	sp, #28
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fb1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d031      	beq.n	800fb8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	617b      	str	r3, [r7, #20]
 800fb2e:	e002      	b.n	800fb36 <get_ldnumber+0x24>
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	3301      	adds	r3, #1
 800fb34:	617b      	str	r3, [r7, #20]
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b20      	cmp	r3, #32
 800fb3c:	d903      	bls.n	800fb46 <get_ldnumber+0x34>
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b3a      	cmp	r3, #58	; 0x3a
 800fb44:	d1f4      	bne.n	800fb30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	2b3a      	cmp	r3, #58	; 0x3a
 800fb4c:	d11c      	bne.n	800fb88 <get_ldnumber+0x76>
			tp = *path;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	1c5a      	adds	r2, r3, #1
 800fb58:	60fa      	str	r2, [r7, #12]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	3b30      	subs	r3, #48	; 0x30
 800fb5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	2b09      	cmp	r3, #9
 800fb64:	d80e      	bhi.n	800fb84 <get_ldnumber+0x72>
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d10a      	bne.n	800fb84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d107      	bne.n	800fb84 <get_ldnumber+0x72>
					vol = (int)i;
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	617b      	str	r3, [r7, #20]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	e002      	b.n	800fb8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb88:	2300      	movs	r3, #0
 800fb8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb8c:	693b      	ldr	r3, [r7, #16]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bc80      	pop	{r7}
 800fb96:	4770      	bx	lr

0800fb98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	70da      	strb	r2, [r3, #3]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff f8dc 	bl	800ed70 <move_window>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <check_fs+0x2a>
 800fbbe:	2304      	movs	r3, #4
 800fbc0:	e038      	b.n	800fc34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3330      	adds	r3, #48	; 0x30
 800fbc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe fe2e 	bl	800e82c <ld_word>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d001      	beq.n	800fbe0 <check_fs+0x48>
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e029      	b.n	800fc34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbe6:	2be9      	cmp	r3, #233	; 0xe9
 800fbe8:	d009      	beq.n	800fbfe <check_fs+0x66>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbf0:	2beb      	cmp	r3, #235	; 0xeb
 800fbf2:	d11e      	bne.n	800fc32 <check_fs+0x9a>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fbfa:	2b90      	cmp	r3, #144	; 0x90
 800fbfc:	d119      	bne.n	800fc32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	3330      	adds	r3, #48	; 0x30
 800fc02:	3336      	adds	r3, #54	; 0x36
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fe fe28 	bl	800e85a <ld_dword>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc10:	4a0a      	ldr	r2, [pc, #40]	; (800fc3c <check_fs+0xa4>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d101      	bne.n	800fc1a <check_fs+0x82>
 800fc16:	2300      	movs	r3, #0
 800fc18:	e00c      	b.n	800fc34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	3330      	adds	r3, #48	; 0x30
 800fc1e:	3352      	adds	r3, #82	; 0x52
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe fe1a 	bl	800e85a <ld_dword>
 800fc26:	4603      	mov	r3, r0
 800fc28:	4a05      	ldr	r2, [pc, #20]	; (800fc40 <check_fs+0xa8>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d101      	bne.n	800fc32 <check_fs+0x9a>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e000      	b.n	800fc34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fc32:	2302      	movs	r3, #2
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	00544146 	.word	0x00544146
 800fc40:	33544146 	.word	0x33544146

0800fc44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b096      	sub	sp, #88	; 0x58
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7ff ff5a 	bl	800fb12 <get_ldnumber>
 800fc5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	da01      	bge.n	800fc6a <find_volume+0x26>
 800fc66:	230b      	movs	r3, #11
 800fc68:	e22e      	b.n	80100c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc6a:	4aa8      	ldr	r2, [pc, #672]	; (800ff0c <find_volume+0x2c8>)
 800fc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <find_volume+0x3a>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	e224      	b.n	80100c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	f023 0301 	bic.w	r3, r3, #1
 800fc8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d01a      	beq.n	800fcca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	785b      	ldrb	r3, [r3, #1]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fe fd29 	bl	800e6f0 <disk_status>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fca8:	f003 0301 	and.w	r3, r3, #1
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10c      	bne.n	800fcca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <find_volume+0x82>
 800fcb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fcc2:	230a      	movs	r3, #10
 800fcc4:	e200      	b.n	80100c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e1fe      	b.n	80100c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcda:	785b      	ldrb	r3, [r3, #1]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fe fd21 	bl	800e724 <disk_initialize>
 800fce2:	4603      	mov	r3, r0
 800fce4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fce8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e1e7      	b.n	80100c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d007      	beq.n	800fd0e <find_volume+0xca>
 800fcfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd02:	f003 0304 	and.w	r3, r3, #4
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fd0a:	230a      	movs	r3, #10
 800fd0c:	e1dc      	b.n	80100c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fd12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd16:	f7ff ff3f 	bl	800fb98 <check_fs>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fd20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	d14b      	bne.n	800fdc0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd28:	2300      	movs	r3, #0
 800fd2a:	643b      	str	r3, [r7, #64]	; 0x40
 800fd2c:	e01f      	b.n	800fd6e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd36:	011b      	lsls	r3, r3, #4
 800fd38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fd3c:	4413      	add	r3, r2
 800fd3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd42:	3304      	adds	r3, #4
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d006      	beq.n	800fd58 <find_volume+0x114>
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fe fd83 	bl	800e85a <ld_dword>
 800fd54:	4602      	mov	r2, r0
 800fd56:	e000      	b.n	800fd5a <find_volume+0x116>
 800fd58:	2200      	movs	r2, #0
 800fd5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fd62:	440b      	add	r3, r1
 800fd64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd70:	2b03      	cmp	r3, #3
 800fd72:	d9dc      	bls.n	800fd2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fd74:	2300      	movs	r3, #0
 800fd76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <find_volume+0x140>
 800fd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd80:	3b01      	subs	r3, #1
 800fd82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fd8c:	4413      	add	r3, r2
 800fd8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fd92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d005      	beq.n	800fda6 <find_volume+0x162>
 800fd9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd9e:	f7ff fefb 	bl	800fb98 <check_fs>
 800fda2:	4603      	mov	r3, r0
 800fda4:	e000      	b.n	800fda8 <find_volume+0x164>
 800fda6:	2303      	movs	r3, #3
 800fda8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fdac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d905      	bls.n	800fdc0 <find_volume+0x17c>
 800fdb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	643b      	str	r3, [r7, #64]	; 0x40
 800fdba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	d9e1      	bls.n	800fd84 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fdc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdc4:	2b04      	cmp	r3, #4
 800fdc6:	d101      	bne.n	800fdcc <find_volume+0x188>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e17d      	b.n	80100c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fdcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d901      	bls.n	800fdd8 <find_volume+0x194>
 800fdd4:	230d      	movs	r3, #13
 800fdd6:	e177      	b.n	80100c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdda:	3330      	adds	r3, #48	; 0x30
 800fddc:	330b      	adds	r3, #11
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fe fd24 	bl	800e82c <ld_word>
 800fde4:	4603      	mov	r3, r0
 800fde6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdea:	d001      	beq.n	800fdf0 <find_volume+0x1ac>
 800fdec:	230d      	movs	r3, #13
 800fdee:	e16b      	b.n	80100c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	3330      	adds	r3, #48	; 0x30
 800fdf4:	3316      	adds	r3, #22
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fe fd18 	bl	800e82c <ld_word>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fe00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <find_volume+0x1d0>
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	3330      	adds	r3, #48	; 0x30
 800fe0a:	3324      	adds	r3, #36	; 0x24
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fe fd24 	bl	800e85a <ld_dword>
 800fe12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe18:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	789b      	ldrb	r3, [r3, #2]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d005      	beq.n	800fe38 <find_volume+0x1f4>
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	789b      	ldrb	r3, [r3, #2]
 800fe30:	2b02      	cmp	r3, #2
 800fe32:	d001      	beq.n	800fe38 <find_volume+0x1f4>
 800fe34:	230d      	movs	r3, #13
 800fe36:	e147      	b.n	80100c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	789b      	ldrb	r3, [r3, #2]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe40:	fb02 f303 	mul.w	r3, r2, r3
 800fe44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	895b      	ldrh	r3, [r3, #10]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d008      	beq.n	800fe6c <find_volume+0x228>
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	895b      	ldrh	r3, [r3, #10]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	895b      	ldrh	r3, [r3, #10]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	4013      	ands	r3, r2
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <find_volume+0x22c>
 800fe6c:	230d      	movs	r3, #13
 800fe6e:	e12b      	b.n	80100c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	3330      	adds	r3, #48	; 0x30
 800fe74:	3311      	adds	r3, #17
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fe fcd8 	bl	800e82c <ld_word>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	461a      	mov	r2, r3
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	891b      	ldrh	r3, [r3, #8]
 800fe88:	f003 030f 	and.w	r3, r3, #15
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <find_volume+0x252>
 800fe92:	230d      	movs	r3, #13
 800fe94:	e118      	b.n	80100c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	3330      	adds	r3, #48	; 0x30
 800fe9a:	3313      	adds	r3, #19
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fe fcc5 	bl	800e82c <ld_word>
 800fea2:	4603      	mov	r3, r0
 800fea4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <find_volume+0x276>
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	3330      	adds	r3, #48	; 0x30
 800feb0:	3320      	adds	r3, #32
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fe fcd1 	bl	800e85a <ld_dword>
 800feb8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800feba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febc:	3330      	adds	r3, #48	; 0x30
 800febe:	330e      	adds	r3, #14
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fcb3 	bl	800e82c <ld_word>
 800fec6:	4603      	mov	r3, r0
 800fec8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800feca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d101      	bne.n	800fed4 <find_volume+0x290>
 800fed0:	230d      	movs	r3, #13
 800fed2:	e0f9      	b.n	80100c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fed4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed8:	4413      	add	r3, r2
 800feda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fedc:	8912      	ldrh	r2, [r2, #8]
 800fede:	0912      	lsrs	r2, r2, #4
 800fee0:	b292      	uxth	r2, r2
 800fee2:	4413      	add	r3, r2
 800fee4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feea:	429a      	cmp	r2, r3
 800feec:	d201      	bcs.n	800fef2 <find_volume+0x2ae>
 800feee:	230d      	movs	r3, #13
 800fef0:	e0ea      	b.n	80100c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fefa:	8952      	ldrh	r2, [r2, #10]
 800fefc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff00:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d103      	bne.n	800ff10 <find_volume+0x2cc>
 800ff08:	230d      	movs	r3, #13
 800ff0a:	e0dd      	b.n	80100c8 <find_volume+0x484>
 800ff0c:	2000076c 	.word	0x2000076c
		fmt = FS_FAT32;
 800ff10:	2303      	movs	r3, #3
 800ff12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ff16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d802      	bhi.n	800ff26 <find_volume+0x2e2>
 800ff20:	2302      	movs	r3, #2
 800ff22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff28:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d802      	bhi.n	800ff36 <find_volume+0x2f2>
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	1c9a      	adds	r2, r3, #2
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff42:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ff44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff48:	441a      	add	r2, r3
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ff4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	441a      	add	r2, r3
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ff58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff5c:	2b03      	cmp	r3, #3
 800ff5e:	d11e      	bne.n	800ff9e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	3330      	adds	r3, #48	; 0x30
 800ff64:	332a      	adds	r3, #42	; 0x2a
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fe fc60 	bl	800e82c <ld_word>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <find_volume+0x332>
 800ff72:	230d      	movs	r3, #13
 800ff74:	e0a8      	b.n	80100c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ff76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff78:	891b      	ldrh	r3, [r3, #8]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <find_volume+0x33e>
 800ff7e:	230d      	movs	r3, #13
 800ff80:	e0a2      	b.n	80100c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	3330      	adds	r3, #48	; 0x30
 800ff86:	332c      	adds	r3, #44	; 0x2c
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fe fc66 	bl	800e85a <ld_dword>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	647b      	str	r3, [r7, #68]	; 0x44
 800ff9c:	e01f      	b.n	800ffde <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	891b      	ldrh	r3, [r3, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <find_volume+0x366>
 800ffa6:	230d      	movs	r3, #13
 800ffa8:	e08e      	b.n	80100c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffac:	6a1a      	ldr	r2, [r3, #32]
 800ffae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb0:	441a      	add	r2, r3
 800ffb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ffb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d103      	bne.n	800ffc6 <find_volume+0x382>
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	005b      	lsls	r3, r3, #1
 800ffc4:	e00a      	b.n	800ffdc <find_volume+0x398>
 800ffc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc8:	695a      	ldr	r2, [r3, #20]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	4413      	add	r3, r2
 800ffd0:	085a      	lsrs	r2, r3, #1
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	f003 0301 	and.w	r3, r3, #1
 800ffda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ffdc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ffde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe0:	699a      	ldr	r2, [r3, #24]
 800ffe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffe4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ffe8:	0a5b      	lsrs	r3, r3, #9
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d201      	bcs.n	800fff2 <find_volume+0x3ae>
 800ffee:	230d      	movs	r3, #13
 800fff0:	e06a      	b.n	80100c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fff8:	611a      	str	r2, [r3, #16]
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	691a      	ldr	r2, [r3, #16]
 800fffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010000:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010004:	2280      	movs	r2, #128	; 0x80
 8010006:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801000c:	2b03      	cmp	r3, #3
 801000e:	d149      	bne.n	80100a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	3330      	adds	r3, #48	; 0x30
 8010014:	3330      	adds	r3, #48	; 0x30
 8010016:	4618      	mov	r0, r3
 8010018:	f7fe fc08 	bl	800e82c <ld_word>
 801001c:	4603      	mov	r3, r0
 801001e:	2b01      	cmp	r3, #1
 8010020:	d140      	bne.n	80100a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010024:	3301      	adds	r3, #1
 8010026:	4619      	mov	r1, r3
 8010028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801002a:	f7fe fea1 	bl	800ed70 <move_window>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d137      	bne.n	80100a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	2200      	movs	r2, #0
 8010038:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801003a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003c:	3330      	adds	r3, #48	; 0x30
 801003e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe fbf2 	bl	800e82c <ld_word>
 8010048:	4603      	mov	r3, r0
 801004a:	461a      	mov	r2, r3
 801004c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010050:	429a      	cmp	r2, r3
 8010052:	d127      	bne.n	80100a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	3330      	adds	r3, #48	; 0x30
 8010058:	4618      	mov	r0, r3
 801005a:	f7fe fbfe 	bl	800e85a <ld_dword>
 801005e:	4603      	mov	r3, r0
 8010060:	4a1b      	ldr	r2, [pc, #108]	; (80100d0 <find_volume+0x48c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d11e      	bne.n	80100a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	3330      	adds	r3, #48	; 0x30
 801006a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe fbf3 	bl	800e85a <ld_dword>
 8010074:	4603      	mov	r3, r0
 8010076:	4a17      	ldr	r2, [pc, #92]	; (80100d4 <find_volume+0x490>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d113      	bne.n	80100a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	3330      	adds	r3, #48	; 0x30
 8010080:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010084:	4618      	mov	r0, r3
 8010086:	f7fe fbe8 	bl	800e85a <ld_dword>
 801008a:	4602      	mov	r2, r0
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	3330      	adds	r3, #48	; 0x30
 8010094:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010098:	4618      	mov	r0, r3
 801009a:	f7fe fbde 	bl	800e85a <ld_dword>
 801009e:	4602      	mov	r2, r0
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80100aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80100ac:	4b0a      	ldr	r3, [pc, #40]	; (80100d8 <find_volume+0x494>)
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	3301      	adds	r3, #1
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <find_volume+0x494>)
 80100b6:	801a      	strh	r2, [r3, #0]
 80100b8:	4b07      	ldr	r3, [pc, #28]	; (80100d8 <find_volume+0x494>)
 80100ba:	881a      	ldrh	r2, [r3, #0]
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80100c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100c2:	f7fe fded 	bl	800eca0 <clear_lock>
#endif
	return FR_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3758      	adds	r7, #88	; 0x58
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	41615252 	.word	0x41615252
 80100d4:	61417272 	.word	0x61417272
 80100d8:	20000770 	.word	0x20000770

080100dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80100e6:	2309      	movs	r3, #9
 80100e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01c      	beq.n	801012a <validate+0x4e>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d018      	beq.n	801012a <validate+0x4e>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d013      	beq.n	801012a <validate+0x4e>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	889a      	ldrh	r2, [r3, #4]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	88db      	ldrh	r3, [r3, #6]
 801010c:	429a      	cmp	r2, r3
 801010e:	d10c      	bne.n	801012a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	785b      	ldrb	r3, [r3, #1]
 8010116:	4618      	mov	r0, r3
 8010118:	f7fe faea 	bl	800e6f0 <disk_status>
 801011c:	4603      	mov	r3, r0
 801011e:	f003 0301 	and.w	r3, r3, #1
 8010122:	2b00      	cmp	r3, #0
 8010124:	d101      	bne.n	801012a <validate+0x4e>
			res = FR_OK;
 8010126:	2300      	movs	r3, #0
 8010128:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801012a:	7bfb      	ldrb	r3, [r7, #15]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d102      	bne.n	8010136 <validate+0x5a>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	e000      	b.n	8010138 <validate+0x5c>
 8010136:	2300      	movs	r3, #0
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	6013      	str	r3, [r2, #0]
	return res;
 801013c:	7bfb      	ldrb	r3, [r7, #15]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b088      	sub	sp, #32
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	4613      	mov	r3, r2
 8010154:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801015a:	f107 0310 	add.w	r3, r7, #16
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff fcd7 	bl	800fb12 <get_ldnumber>
 8010164:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	2b00      	cmp	r3, #0
 801016a:	da01      	bge.n	8010170 <f_mount+0x28>
 801016c:	230b      	movs	r3, #11
 801016e:	e02b      	b.n	80101c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010170:	4a17      	ldr	r2, [pc, #92]	; (80101d0 <f_mount+0x88>)
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010178:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d005      	beq.n	801018c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010180:	69b8      	ldr	r0, [r7, #24]
 8010182:	f7fe fd8d 	bl	800eca0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	2200      	movs	r2, #0
 801018a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d002      	beq.n	8010198 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	490d      	ldr	r1, [pc, #52]	; (80101d0 <f_mount+0x88>)
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <f_mount+0x66>
 80101a8:	79fb      	ldrb	r3, [r7, #7]
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d001      	beq.n	80101b2 <f_mount+0x6a>
 80101ae:	2300      	movs	r3, #0
 80101b0:	e00a      	b.n	80101c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80101b2:	f107 010c 	add.w	r1, r7, #12
 80101b6:	f107 0308 	add.w	r3, r7, #8
 80101ba:	2200      	movs	r2, #0
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fd41 	bl	800fc44 <find_volume>
 80101c2:	4603      	mov	r3, r0
 80101c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80101c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3720      	adds	r7, #32
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	2000076c 	.word	0x2000076c

080101d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b098      	sub	sp, #96	; 0x60
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4613      	mov	r3, r2
 80101e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d101      	bne.n	80101ec <f_open+0x18>
 80101e8:	2309      	movs	r3, #9
 80101ea:	e1ad      	b.n	8010548 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80101f4:	79fa      	ldrb	r2, [r7, #7]
 80101f6:	f107 0110 	add.w	r1, r7, #16
 80101fa:	f107 0308 	add.w	r3, r7, #8
 80101fe:	4618      	mov	r0, r3
 8010200:	f7ff fd20 	bl	800fc44 <find_volume>
 8010204:	4603      	mov	r3, r0
 8010206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801020a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801020e:	2b00      	cmp	r3, #0
 8010210:	f040 8191 	bne.w	8010536 <f_open+0x362>
		dj.obj.fs = fs;
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	f107 0314 	add.w	r3, r7, #20
 801021e:	4611      	mov	r1, r2
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff fc05 	bl	800fa30 <follow_path>
 8010226:	4603      	mov	r3, r0
 8010228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801022c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010230:	2b00      	cmp	r3, #0
 8010232:	d11a      	bne.n	801026a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010234:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010238:	b25b      	sxtb	r3, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	da03      	bge.n	8010246 <f_open+0x72>
				res = FR_INVALID_NAME;
 801023e:	2306      	movs	r3, #6
 8010240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010244:	e011      	b.n	801026a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	f023 0301 	bic.w	r3, r3, #1
 801024c:	2b00      	cmp	r3, #0
 801024e:	bf14      	ite	ne
 8010250:	2301      	movne	r3, #1
 8010252:	2300      	moveq	r3, #0
 8010254:	b2db      	uxtb	r3, r3
 8010256:	461a      	mov	r2, r3
 8010258:	f107 0314 	add.w	r3, r7, #20
 801025c:	4611      	mov	r1, r2
 801025e:	4618      	mov	r0, r3
 8010260:	f7fe fbdc 	bl	800ea1c <chk_lock>
 8010264:	4603      	mov	r3, r0
 8010266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801026a:	79fb      	ldrb	r3, [r7, #7]
 801026c:	f003 031c 	and.w	r3, r3, #28
 8010270:	2b00      	cmp	r3, #0
 8010272:	d07f      	beq.n	8010374 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010278:	2b00      	cmp	r3, #0
 801027a:	d017      	beq.n	80102ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801027c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010280:	2b04      	cmp	r3, #4
 8010282:	d10e      	bne.n	80102a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010284:	f7fe fc24 	bl	800ead0 <enq_lock>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d006      	beq.n	801029c <f_open+0xc8>
 801028e:	f107 0314 	add.w	r3, r7, #20
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff fb05 	bl	800f8a2 <dir_register>
 8010298:	4603      	mov	r3, r0
 801029a:	e000      	b.n	801029e <f_open+0xca>
 801029c:	2312      	movs	r3, #18
 801029e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80102a2:	79fb      	ldrb	r3, [r7, #7]
 80102a4:	f043 0308 	orr.w	r3, r3, #8
 80102a8:	71fb      	strb	r3, [r7, #7]
 80102aa:	e010      	b.n	80102ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80102ac:	7ebb      	ldrb	r3, [r7, #26]
 80102ae:	f003 0311 	and.w	r3, r3, #17
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <f_open+0xea>
					res = FR_DENIED;
 80102b6:	2307      	movs	r3, #7
 80102b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102bc:	e007      	b.n	80102ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	f003 0304 	and.w	r3, r3, #4
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <f_open+0xfa>
 80102c8:	2308      	movs	r3, #8
 80102ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80102ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d168      	bne.n	80103a8 <f_open+0x1d4>
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	f003 0308 	and.w	r3, r3, #8
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d063      	beq.n	80103a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80102e0:	f7fc f9d2 	bl	800c688 <get_fattime>
 80102e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80102e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e8:	330e      	adds	r3, #14
 80102ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe faf0 	bl	800e8d2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80102f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f4:	3316      	adds	r3, #22
 80102f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fe faea 	bl	800e8d2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80102fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010300:	330b      	adds	r3, #11
 8010302:	2220      	movs	r2, #32
 8010304:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801030a:	4611      	mov	r1, r2
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff fa34 	bl	800f77a <ld_clust>
 8010312:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010318:	2200      	movs	r2, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fa4c 	bl	800f7b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010322:	331c      	adds	r3, #28
 8010324:	2100      	movs	r1, #0
 8010326:	4618      	mov	r0, r3
 8010328:	f7fe fad3 	bl	800e8d2 <st_dword>
					fs->wflag = 1;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	2201      	movs	r2, #1
 8010330:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010334:	2b00      	cmp	r3, #0
 8010336:	d037      	beq.n	80103a8 <f_open+0x1d4>
						dw = fs->winsect;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801033e:	f107 0314 	add.w	r3, r7, #20
 8010342:	2200      	movs	r2, #0
 8010344:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe ff60 	bl	800f20c <remove_chain>
 801034c:	4603      	mov	r3, r0
 801034e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010356:	2b00      	cmp	r3, #0
 8010358:	d126      	bne.n	80103a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801035e:	4618      	mov	r0, r3
 8010360:	f7fe fd06 	bl	800ed70 <move_window>
 8010364:	4603      	mov	r3, r0
 8010366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801036e:	3a01      	subs	r2, #1
 8010370:	60da      	str	r2, [r3, #12]
 8010372:	e019      	b.n	80103a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010378:	2b00      	cmp	r3, #0
 801037a:	d115      	bne.n	80103a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801037c:	7ebb      	ldrb	r3, [r7, #26]
 801037e:	f003 0310 	and.w	r3, r3, #16
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010386:	2304      	movs	r3, #4
 8010388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801038c:	e00c      	b.n	80103a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801038e:	79fb      	ldrb	r3, [r7, #7]
 8010390:	f003 0302 	and.w	r3, r3, #2
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <f_open+0x1d4>
 8010398:	7ebb      	ldrb	r3, [r7, #26]
 801039a:	f003 0301 	and.w	r3, r3, #1
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d002      	beq.n	80103a8 <f_open+0x1d4>
						res = FR_DENIED;
 80103a2:	2307      	movs	r3, #7
 80103a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80103a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d128      	bne.n	8010402 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	f003 0308 	and.w	r3, r3, #8
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80103ba:	79fb      	ldrb	r3, [r7, #7]
 80103bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80103ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103d0:	79fb      	ldrb	r3, [r7, #7]
 80103d2:	f023 0301 	bic.w	r3, r3, #1
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	bf14      	ite	ne
 80103da:	2301      	movne	r3, #1
 80103dc:	2300      	moveq	r3, #0
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	461a      	mov	r2, r3
 80103e2:	f107 0314 	add.w	r3, r7, #20
 80103e6:	4611      	mov	r1, r2
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fe fb91 	bl	800eb10 <inc_lock>
 80103ee:	4602      	mov	r2, r0
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d102      	bne.n	8010402 <f_open+0x22e>
 80103fc:	2302      	movs	r3, #2
 80103fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 8095 	bne.w	8010536 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010410:	4611      	mov	r1, r2
 8010412:	4618      	mov	r0, r3
 8010414:	f7ff f9b1 	bl	800f77a <ld_clust>
 8010418:	4602      	mov	r2, r0
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010420:	331c      	adds	r3, #28
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fa19 	bl	800e85a <ld_dword>
 8010428:	4602      	mov	r2, r0
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2200      	movs	r2, #0
 8010432:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	88da      	ldrh	r2, [r3, #6]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	79fa      	ldrb	r2, [r7, #7]
 8010446:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2200      	movs	r2, #0
 8010452:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	3330      	adds	r3, #48	; 0x30
 801045e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010462:	2100      	movs	r1, #0
 8010464:	4618      	mov	r0, r3
 8010466:	f7fe fa7f 	bl	800e968 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801046a:	79fb      	ldrb	r3, [r7, #7]
 801046c:	f003 0320 	and.w	r3, r3, #32
 8010470:	2b00      	cmp	r3, #0
 8010472:	d060      	beq.n	8010536 <f_open+0x362>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d05c      	beq.n	8010536 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	68da      	ldr	r2, [r3, #12]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	895b      	ldrh	r3, [r3, #10]
 8010488:	025b      	lsls	r3, r3, #9
 801048a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	68db      	ldr	r3, [r3, #12]
 8010496:	657b      	str	r3, [r7, #84]	; 0x54
 8010498:	e016      	b.n	80104c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fe fd20 	bl	800eee4 <get_fat>
 80104a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80104a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d802      	bhi.n	80104b2 <f_open+0x2de>
 80104ac:	2302      	movs	r3, #2
 80104ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80104b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104b8:	d102      	bne.n	80104c0 <f_open+0x2ec>
 80104ba:	2301      	movs	r3, #1
 80104bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80104c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104c4:	1ad3      	subs	r3, r2, r3
 80104c6:	657b      	str	r3, [r7, #84]	; 0x54
 80104c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <f_open+0x304>
 80104d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d8e0      	bhi.n	801049a <f_open+0x2c6>
				}
				fp->clust = clst;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80104de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d127      	bne.n	8010536 <f_open+0x362>
 80104e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d022      	beq.n	8010536 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7fe fcd7 	bl	800eea8 <clust2sect>
 80104fa:	6478      	str	r0, [r7, #68]	; 0x44
 80104fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d103      	bne.n	801050a <f_open+0x336>
						res = FR_INT_ERR;
 8010502:	2302      	movs	r3, #2
 8010504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010508:	e015      	b.n	8010536 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801050a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801050c:	0a5a      	lsrs	r2, r3, #9
 801050e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010510:	441a      	add	r2, r3
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	7858      	ldrb	r0, [r3, #1]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6a1a      	ldr	r2, [r3, #32]
 8010524:	2301      	movs	r3, #1
 8010526:	f7fe f923 	bl	800e770 <disk_read>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <f_open+0x362>
 8010530:	2301      	movs	r3, #1
 8010532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <f_open+0x370>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010548:	4618      	mov	r0, r3
 801054a:	3760      	adds	r7, #96	; 0x60
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b08c      	sub	sp, #48	; 0x30
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	2200      	movs	r2, #0
 8010566:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f107 0210 	add.w	r2, r7, #16
 801056e:	4611      	mov	r1, r2
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff fdb3 	bl	80100dc <validate>
 8010576:	4603      	mov	r3, r0
 8010578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801057c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010580:	2b00      	cmp	r3, #0
 8010582:	d107      	bne.n	8010594 <f_write+0x44>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	7d5b      	ldrb	r3, [r3, #21]
 8010588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801058c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010590:	2b00      	cmp	r3, #0
 8010592:	d002      	beq.n	801059a <f_write+0x4a>
 8010594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010598:	e14b      	b.n	8010832 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	7d1b      	ldrb	r3, [r3, #20]
 801059e:	f003 0302 	and.w	r3, r3, #2
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d101      	bne.n	80105aa <f_write+0x5a>
 80105a6:	2307      	movs	r3, #7
 80105a8:	e143      	b.n	8010832 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	699a      	ldr	r2, [r3, #24]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	441a      	add	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	f080 812d 	bcs.w	8010816 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	699b      	ldr	r3, [r3, #24]
 80105c0:	43db      	mvns	r3, r3
 80105c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80105c4:	e127      	b.n	8010816 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f040 80e3 	bne.w	801079a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	699b      	ldr	r3, [r3, #24]
 80105d8:	0a5b      	lsrs	r3, r3, #9
 80105da:	693a      	ldr	r2, [r7, #16]
 80105dc:	8952      	ldrh	r2, [r2, #10]
 80105de:	3a01      	subs	r2, #1
 80105e0:	4013      	ands	r3, r2
 80105e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d143      	bne.n	8010672 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10c      	bne.n	801060c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d11a      	bne.n	8010634 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2100      	movs	r1, #0
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe fe67 	bl	800f2d6 <create_chain>
 8010608:	62b8      	str	r0, [r7, #40]	; 0x28
 801060a:	e013      	b.n	8010634 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d007      	beq.n	8010624 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	4619      	mov	r1, r3
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f7fe fef3 	bl	800f406 <clmt_clust>
 8010620:	62b8      	str	r0, [r7, #40]	; 0x28
 8010622:	e007      	b.n	8010634 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	4619      	mov	r1, r3
 801062c:	4610      	mov	r0, r2
 801062e:	f7fe fe52 	bl	800f2d6 <create_chain>
 8010632:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 80f2 	beq.w	8010820 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	2b01      	cmp	r3, #1
 8010640:	d104      	bne.n	801064c <f_write+0xfc>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2202      	movs	r2, #2
 8010646:	755a      	strb	r2, [r3, #21]
 8010648:	2302      	movs	r3, #2
 801064a:	e0f2      	b.n	8010832 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010652:	d104      	bne.n	801065e <f_write+0x10e>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2201      	movs	r2, #1
 8010658:	755a      	strb	r2, [r3, #21]
 801065a:	2301      	movs	r3, #1
 801065c:	e0e9      	b.n	8010832 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010662:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d102      	bne.n	8010672 <f_write+0x122>
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010670:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	7d1b      	ldrb	r3, [r3, #20]
 8010676:	b25b      	sxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	da18      	bge.n	80106ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	7858      	ldrb	r0, [r3, #1]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6a1a      	ldr	r2, [r3, #32]
 801068a:	2301      	movs	r3, #1
 801068c:	f7fe f890 	bl	800e7b0 <disk_write>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d004      	beq.n	80106a0 <f_write+0x150>
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2201      	movs	r2, #1
 801069a:	755a      	strb	r2, [r3, #21]
 801069c:	2301      	movs	r3, #1
 801069e:	e0c8      	b.n	8010832 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	7d1b      	ldrb	r3, [r3, #20]
 80106a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106a8:	b2da      	uxtb	r2, r3
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	69db      	ldr	r3, [r3, #28]
 80106b4:	4619      	mov	r1, r3
 80106b6:	4610      	mov	r0, r2
 80106b8:	f7fe fbf6 	bl	800eea8 <clust2sect>
 80106bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d104      	bne.n	80106ce <f_write+0x17e>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2202      	movs	r2, #2
 80106c8:	755a      	strb	r2, [r3, #21]
 80106ca:	2302      	movs	r3, #2
 80106cc:	e0b1      	b.n	8010832 <f_write+0x2e2>
			sect += csect;
 80106ce:	697a      	ldr	r2, [r7, #20]
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	4413      	add	r3, r2
 80106d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	0a5b      	lsrs	r3, r3, #9
 80106da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d03c      	beq.n	801075c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	4413      	add	r3, r2
 80106e8:	693a      	ldr	r2, [r7, #16]
 80106ea:	8952      	ldrh	r2, [r2, #10]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d905      	bls.n	80106fc <f_write+0x1ac>
					cc = fs->csize - csect;
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	895b      	ldrh	r3, [r3, #10]
 80106f4:	461a      	mov	r2, r3
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	7858      	ldrb	r0, [r3, #1]
 8010700:	6a3b      	ldr	r3, [r7, #32]
 8010702:	697a      	ldr	r2, [r7, #20]
 8010704:	69f9      	ldr	r1, [r7, #28]
 8010706:	f7fe f853 	bl	800e7b0 <disk_write>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <f_write+0x1ca>
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2201      	movs	r2, #1
 8010714:	755a      	strb	r2, [r3, #21]
 8010716:	2301      	movs	r3, #1
 8010718:	e08b      	b.n	8010832 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6a1a      	ldr	r2, [r3, #32]
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	6a3a      	ldr	r2, [r7, #32]
 8010724:	429a      	cmp	r2, r3
 8010726:	d915      	bls.n	8010754 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6a1a      	ldr	r2, [r3, #32]
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	025b      	lsls	r3, r3, #9
 8010738:	69fa      	ldr	r2, [r7, #28]
 801073a:	4413      	add	r3, r2
 801073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010740:	4619      	mov	r1, r3
 8010742:	f7fe f8f1 	bl	800e928 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	7d1b      	ldrb	r3, [r3, #20]
 801074a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801074e:	b2da      	uxtb	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	025b      	lsls	r3, r3, #9
 8010758:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801075a:	e03f      	b.n	80107dc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6a1b      	ldr	r3, [r3, #32]
 8010760:	697a      	ldr	r2, [r7, #20]
 8010762:	429a      	cmp	r2, r3
 8010764:	d016      	beq.n	8010794 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	699a      	ldr	r2, [r3, #24]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801076e:	429a      	cmp	r2, r3
 8010770:	d210      	bcs.n	8010794 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	7858      	ldrb	r0, [r3, #1]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801077c:	2301      	movs	r3, #1
 801077e:	697a      	ldr	r2, [r7, #20]
 8010780:	f7fd fff6 	bl	800e770 <disk_read>
 8010784:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010786:	2b00      	cmp	r3, #0
 8010788:	d004      	beq.n	8010794 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2201      	movs	r2, #1
 801078e:	755a      	strb	r2, [r3, #21]
 8010790:	2301      	movs	r3, #1
 8010792:	e04e      	b.n	8010832 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80107a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80107a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d901      	bls.n	80107b4 <f_write+0x264>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107c2:	4413      	add	r3, r2
 80107c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c6:	69f9      	ldr	r1, [r7, #28]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fe f8ad 	bl	800e928 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	7d1b      	ldrb	r3, [r3, #20]
 80107d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80107dc:	69fa      	ldr	r2, [r7, #28]
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	4413      	add	r3, r2
 80107e2:	61fb      	str	r3, [r7, #28]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	699a      	ldr	r2, [r3, #24]
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	441a      	add	r2, r3
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	619a      	str	r2, [r3, #24]
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	699b      	ldr	r3, [r3, #24]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	bf38      	it	cc
 80107fc:	461a      	movcc	r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	60da      	str	r2, [r3, #12]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	441a      	add	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f47f aed4 	bne.w	80105c6 <f_write+0x76>
 801081e:	e000      	b.n	8010822 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010820:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	7d1b      	ldrb	r3, [r3, #20]
 8010826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801082a:	b2da      	uxtb	r2, r3
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3730      	adds	r7, #48	; 0x30
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b086      	sub	sp, #24
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f107 0208 	add.w	r2, r7, #8
 8010848:	4611      	mov	r1, r2
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff fc46 	bl	80100dc <validate>
 8010850:	4603      	mov	r3, r0
 8010852:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010854:	7dfb      	ldrb	r3, [r7, #23]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d168      	bne.n	801092c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7d1b      	ldrb	r3, [r3, #20]
 801085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010862:	2b00      	cmp	r3, #0
 8010864:	d062      	beq.n	801092c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	7d1b      	ldrb	r3, [r3, #20]
 801086a:	b25b      	sxtb	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	da15      	bge.n	801089c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	7858      	ldrb	r0, [r3, #1]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a1a      	ldr	r2, [r3, #32]
 801087e:	2301      	movs	r3, #1
 8010880:	f7fd ff96 	bl	800e7b0 <disk_write>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <f_sync+0x54>
 801088a:	2301      	movs	r3, #1
 801088c:	e04f      	b.n	801092e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	7d1b      	ldrb	r3, [r3, #20]
 8010892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010896:	b2da      	uxtb	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801089c:	f7fb fef4 	bl	800c688 <get_fattime>
 80108a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a8:	4619      	mov	r1, r3
 80108aa:	4610      	mov	r0, r2
 80108ac:	f7fe fa60 	bl	800ed70 <move_window>
 80108b0:	4603      	mov	r3, r0
 80108b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80108b4:	7dfb      	ldrb	r3, [r7, #23]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d138      	bne.n	801092c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	330b      	adds	r3, #11
 80108c4:	781a      	ldrb	r2, [r3, #0]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	330b      	adds	r3, #11
 80108ca:	f042 0220 	orr.w	r2, r2, #32
 80108ce:	b2d2      	uxtb	r2, r2
 80108d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	689b      	ldr	r3, [r3, #8]
 80108da:	461a      	mov	r2, r3
 80108dc:	68f9      	ldr	r1, [r7, #12]
 80108de:	f7fe ff6b 	bl	800f7b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f103 021c 	add.w	r2, r3, #28
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4610      	mov	r0, r2
 80108f0:	f7fd ffef 	bl	800e8d2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	3316      	adds	r3, #22
 80108f8:	6939      	ldr	r1, [r7, #16]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd ffe9 	bl	800e8d2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	3312      	adds	r3, #18
 8010904:	2100      	movs	r1, #0
 8010906:	4618      	mov	r0, r3
 8010908:	f7fd ffc9 	bl	800e89e <st_word>
					fs->wflag = 1;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2201      	movs	r2, #1
 8010910:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	4618      	mov	r0, r3
 8010916:	f7fe fa59 	bl	800edcc <sync_fs>
 801091a:	4603      	mov	r3, r0
 801091c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	7d1b      	ldrb	r3, [r3, #20]
 8010922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010926:	b2da      	uxtb	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801092c:	7dfb      	ldrb	r3, [r7, #23]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b084      	sub	sp, #16
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff ff7b 	bl	801083a <f_sync>
 8010944:	4603      	mov	r3, r0
 8010946:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010948:	7bfb      	ldrb	r3, [r7, #15]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d118      	bne.n	8010980 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f107 0208 	add.w	r2, r7, #8
 8010954:	4611      	mov	r1, r2
 8010956:	4618      	mov	r0, r3
 8010958:	f7ff fbc0 	bl	80100dc <validate>
 801095c:	4603      	mov	r3, r0
 801095e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010960:	7bfb      	ldrb	r3, [r7, #15]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d10c      	bne.n	8010980 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe f95e 	bl	800ec2c <dec_lock>
 8010970:	4603      	mov	r3, r0
 8010972:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d102      	bne.n	8010980 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010980:	7bfb      	ldrb	r3, [r7, #15]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801098c:	b480      	push	{r7}
 801098e:	b087      	sub	sp, #28
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	4613      	mov	r3, r2
 8010998:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801099a:	2301      	movs	r3, #1
 801099c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109a2:	4b1e      	ldr	r3, [pc, #120]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109a4:	7a5b      	ldrb	r3, [r3, #9]
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d131      	bne.n	8010a10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80109ac:	4b1b      	ldr	r3, [pc, #108]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109ae:	7a5b      	ldrb	r3, [r3, #9]
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	461a      	mov	r2, r3
 80109b4:	4b19      	ldr	r3, [pc, #100]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109b6:	2100      	movs	r1, #0
 80109b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80109ba:	4b18      	ldr	r3, [pc, #96]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109bc:	7a5b      	ldrb	r3, [r3, #9]
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	4a16      	ldr	r2, [pc, #88]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	4413      	add	r3, r2
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80109ca:	4b14      	ldr	r3, [pc, #80]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109cc:	7a5b      	ldrb	r3, [r3, #9]
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	461a      	mov	r2, r3
 80109d2:	4b12      	ldr	r3, [pc, #72]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109d4:	4413      	add	r3, r2
 80109d6:	79fa      	ldrb	r2, [r7, #7]
 80109d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80109da:	4b10      	ldr	r3, [pc, #64]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109dc:	7a5b      	ldrb	r3, [r3, #9]
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	1c5a      	adds	r2, r3, #1
 80109e2:	b2d1      	uxtb	r1, r2
 80109e4:	4a0d      	ldr	r2, [pc, #52]	; (8010a1c <FATFS_LinkDriverEx+0x90>)
 80109e6:	7251      	strb	r1, [r2, #9]
 80109e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109ea:	7dbb      	ldrb	r3, [r7, #22]
 80109ec:	3330      	adds	r3, #48	; 0x30
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	3301      	adds	r3, #1
 80109f8:	223a      	movs	r2, #58	; 0x3a
 80109fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	3302      	adds	r3, #2
 8010a00:	222f      	movs	r2, #47	; 0x2f
 8010a02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	3303      	adds	r3, #3
 8010a08:	2200      	movs	r2, #0
 8010a0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	371c      	adds	r7, #28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bc80      	pop	{r7}
 8010a1a:	4770      	bx	lr
 8010a1c:	20000794 	.word	0x20000794

08010a20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	6839      	ldr	r1, [r7, #0]
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff ffac 	bl	801098c <FATFS_LinkDriverEx>
 8010a34:	4603      	mov	r3, r0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010a44:	2200      	movs	r2, #0
 8010a46:	4912      	ldr	r1, [pc, #72]	; (8010a90 <MX_USB_DEVICE_Init+0x50>)
 8010a48:	4812      	ldr	r0, [pc, #72]	; (8010a94 <MX_USB_DEVICE_Init+0x54>)
 8010a4a:	f7fc fe2c 	bl	800d6a6 <USBD_Init>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d001      	beq.n	8010a58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010a54:	f7f2 fcbe 	bl	80033d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010a58:	490f      	ldr	r1, [pc, #60]	; (8010a98 <MX_USB_DEVICE_Init+0x58>)
 8010a5a:	480e      	ldr	r0, [pc, #56]	; (8010a94 <MX_USB_DEVICE_Init+0x54>)
 8010a5c:	f7fc fe4e 	bl	800d6fc <USBD_RegisterClass>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010a66:	f7f2 fcb5 	bl	80033d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010a6a:	490c      	ldr	r1, [pc, #48]	; (8010a9c <MX_USB_DEVICE_Init+0x5c>)
 8010a6c:	4809      	ldr	r0, [pc, #36]	; (8010a94 <MX_USB_DEVICE_Init+0x54>)
 8010a6e:	f7fc fd7f 	bl	800d570 <USBD_CDC_RegisterInterface>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010a78:	f7f2 fcac 	bl	80033d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010a7c:	4805      	ldr	r0, [pc, #20]	; (8010a94 <MX_USB_DEVICE_Init+0x54>)
 8010a7e:	f7fc fe56 	bl	800d72e <USBD_Start>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d001      	beq.n	8010a8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010a88:	f7f2 fca4 	bl	80033d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010a8c:	bf00      	nop
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	200001dc 	.word	0x200001dc
 8010a94:	20000e84 	.word	0x20000e84
 8010a98:	200000c8 	.word	0x200000c8
 8010a9c:	200001cc 	.word	0x200001cc

08010aa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	4905      	ldr	r1, [pc, #20]	; (8010abc <CDC_Init_FS+0x1c>)
 8010aa8:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <CDC_Init_FS+0x20>)
 8010aaa:	f7fc fd77 	bl	800d59c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010aae:	4905      	ldr	r1, [pc, #20]	; (8010ac4 <CDC_Init_FS+0x24>)
 8010ab0:	4803      	ldr	r0, [pc, #12]	; (8010ac0 <CDC_Init_FS+0x20>)
 8010ab2:	f7fc fd8c 	bl	800d5ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ab6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	20001508 	.word	0x20001508
 8010ac0:	20000e84 	.word	0x20000e84
 8010ac4:	20001120 	.word	0x20001120

08010ac8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bc80      	pop	{r7}
 8010ad4:	4770      	bx	lr
	...

08010ad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	4603      	mov	r3, r0
 8010ae0:	6039      	str	r1, [r7, #0]
 8010ae2:	71fb      	strb	r3, [r7, #7]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010ae8:	79fb      	ldrb	r3, [r7, #7]
 8010aea:	2b23      	cmp	r3, #35	; 0x23
 8010aec:	d84a      	bhi.n	8010b84 <CDC_Control_FS+0xac>
 8010aee:	a201      	add	r2, pc, #4	; (adr r2, 8010af4 <CDC_Control_FS+0x1c>)
 8010af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af4:	08010b85 	.word	0x08010b85
 8010af8:	08010b85 	.word	0x08010b85
 8010afc:	08010b85 	.word	0x08010b85
 8010b00:	08010b85 	.word	0x08010b85
 8010b04:	08010b85 	.word	0x08010b85
 8010b08:	08010b85 	.word	0x08010b85
 8010b0c:	08010b85 	.word	0x08010b85
 8010b10:	08010b85 	.word	0x08010b85
 8010b14:	08010b85 	.word	0x08010b85
 8010b18:	08010b85 	.word	0x08010b85
 8010b1c:	08010b85 	.word	0x08010b85
 8010b20:	08010b85 	.word	0x08010b85
 8010b24:	08010b85 	.word	0x08010b85
 8010b28:	08010b85 	.word	0x08010b85
 8010b2c:	08010b85 	.word	0x08010b85
 8010b30:	08010b85 	.word	0x08010b85
 8010b34:	08010b85 	.word	0x08010b85
 8010b38:	08010b85 	.word	0x08010b85
 8010b3c:	08010b85 	.word	0x08010b85
 8010b40:	08010b85 	.word	0x08010b85
 8010b44:	08010b85 	.word	0x08010b85
 8010b48:	08010b85 	.word	0x08010b85
 8010b4c:	08010b85 	.word	0x08010b85
 8010b50:	08010b85 	.word	0x08010b85
 8010b54:	08010b85 	.word	0x08010b85
 8010b58:	08010b85 	.word	0x08010b85
 8010b5c:	08010b85 	.word	0x08010b85
 8010b60:	08010b85 	.word	0x08010b85
 8010b64:	08010b85 	.word	0x08010b85
 8010b68:	08010b85 	.word	0x08010b85
 8010b6c:	08010b85 	.word	0x08010b85
 8010b70:	08010b85 	.word	0x08010b85
 8010b74:	08010b85 	.word	0x08010b85
 8010b78:	08010b85 	.word	0x08010b85
 8010b7c:	08010b85 	.word	0x08010b85
 8010b80:	08010b85 	.word	0x08010b85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010b84:	bf00      	nop
  }

  return (USBD_OK);
 8010b86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	370c      	adds	r7, #12
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bc80      	pop	{r7}
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b9e:	6879      	ldr	r1, [r7, #4]
 8010ba0:	4816      	ldr	r0, [pc, #88]	; (8010bfc <CDC_Receive_FS+0x68>)
 8010ba2:	f7fc fd14 	bl	800d5ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010ba6:	4815      	ldr	r0, [pc, #84]	; (8010bfc <CDC_Receive_FS+0x68>)
 8010ba8:	f7fc fd53 	bl	800d652 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	73fb      	strb	r3, [r7, #15]

  memcpy(buffer+length, Buf, len);
 8010bb2:	4b13      	ldr	r3, [pc, #76]	; (8010c00 <CDC_Receive_FS+0x6c>)
 8010bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	4b12      	ldr	r3, [pc, #72]	; (8010c04 <CDC_Receive_FS+0x70>)
 8010bbc:	4413      	add	r3, r2
 8010bbe:	7bfa      	ldrb	r2, [r7, #15]
 8010bc0:	6879      	ldr	r1, [r7, #4]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f001 fd2c 	bl	8012620 <memcpy>
  memset(Buf, '\0', 16);
 8010bc8:	2210      	movs	r2, #16
 8010bca:	2100      	movs	r1, #0
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f001 fd4f 	bl	8012670 <memset>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8010bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010bd6:	480c      	ldr	r0, [pc, #48]	; (8010c08 <CDC_Receive_FS+0x74>)
 8010bd8:	f7f4 fdc7 	bl	800576a <HAL_GPIO_TogglePin>

  length += len;
 8010bdc:	7bfb      	ldrb	r3, [r7, #15]
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	4b07      	ldr	r3, [pc, #28]	; (8010c00 <CDC_Receive_FS+0x6c>)
 8010be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	4413      	add	r3, r2
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	b21a      	sxth	r2, r3
 8010bee:	4b04      	ldr	r3, [pc, #16]	; (8010c00 <CDC_Receive_FS+0x6c>)
 8010bf0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010bf2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	20000e84 	.word	0x20000e84
 8010c00:	200007a0 	.word	0x200007a0
 8010c04:	200018f0 	.word	0x200018f0
 8010c08:	40020800 	.word	0x40020800

08010c0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010c1c:	4b0f      	ldr	r3, [pc, #60]	; (8010c5c <CDC_Transmit_FS+0x50>)
 8010c1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d001      	beq.n	8010c32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e010      	b.n	8010c54 <CDC_Transmit_FS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010c32:	887b      	ldrh	r3, [r7, #2]
 8010c34:	461a      	mov	r2, r3
 8010c36:	6879      	ldr	r1, [r7, #4]
 8010c38:	4808      	ldr	r0, [pc, #32]	; (8010c5c <CDC_Transmit_FS+0x50>)
 8010c3a:	f7fc fcaf 	bl	800d59c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010c3e:	4807      	ldr	r0, [pc, #28]	; (8010c5c <CDC_Transmit_FS+0x50>)
 8010c40:	f7fc fcd8 	bl	800d5f4 <USBD_CDC_TransmitPacket>
 8010c44:	4603      	mov	r3, r0
 8010c46:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8010c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010c4c:	4804      	ldr	r0, [pc, #16]	; (8010c60 <CDC_Transmit_FS+0x54>)
 8010c4e:	f7f4 fd8c 	bl	800576a <HAL_GPIO_TogglePin>

  /* USER CODE END 7 */
  return result;
 8010c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	20000e84 	.word	0x20000e84
 8010c60:	40020800 	.word	0x40020800

08010c64 <CDC_ReadLine>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadLine(uint8_t* Buf)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	memset(Buf, '\0', 16);
 8010c6c:	2210      	movs	r2, #16
 8010c6e:	2100      	movs	r1, #0
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f001 fcfd 	bl	8012670 <memset>

	while(buffer[length-1] != '\n') {
 8010c76:	bf00      	nop
 8010c78:	4b0c      	ldr	r3, [pc, #48]	; (8010cac <CDC_ReadLine+0x48>)
 8010c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	4a0b      	ldr	r2, [pc, #44]	; (8010cb0 <CDC_ReadLine+0x4c>)
 8010c82:	5cd3      	ldrb	r3, [r2, r3]
 8010c84:	2b0a      	cmp	r3, #10
 8010c86:	d001      	beq.n	8010c8c <CDC_ReadLine+0x28>
		return 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e00b      	b.n	8010ca4 <CDC_ReadLine+0x40>
	}

	memcpy(Buf, buffer, length*sizeof(uint8_t));
 8010c8c:	4b07      	ldr	r3, [pc, #28]	; (8010cac <CDC_ReadLine+0x48>)
 8010c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c92:	461a      	mov	r2, r3
 8010c94:	4906      	ldr	r1, [pc, #24]	; (8010cb0 <CDC_ReadLine+0x4c>)
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f001 fcc2 	bl	8012620 <memcpy>
	return length;
 8010c9c:	4b03      	ldr	r3, [pc, #12]	; (8010cac <CDC_ReadLine+0x48>)
 8010c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ca2:	b2db      	uxtb	r3, r3
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	200007a0 	.word	0x200007a0
 8010cb0:	200018f0 	.word	0x200018f0

08010cb4 <CDC_ClearBuffer>:
	return length;
}


uint8_t CDC_ClearBuffer()
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	af00      	add	r7, sp, #0
	memset(buffer, '\0', 16);
 8010cb8:	2210      	movs	r2, #16
 8010cba:	2100      	movs	r1, #0
 8010cbc:	4804      	ldr	r0, [pc, #16]	; (8010cd0 <CDC_ClearBuffer+0x1c>)
 8010cbe:	f001 fcd7 	bl	8012670 <memset>
	length = 0;
 8010cc2:	4b04      	ldr	r3, [pc, #16]	; (8010cd4 <CDC_ClearBuffer+0x20>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	801a      	strh	r2, [r3, #0]
}
 8010cc8:	bf00      	nop
 8010cca:	4618      	mov	r0, r3
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	200018f0 	.word	0x200018f0
 8010cd4:	200007a0 	.word	0x200007a0

08010cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	4603      	mov	r3, r0
 8010ce0:	6039      	str	r1, [r7, #0]
 8010ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2212      	movs	r2, #18
 8010ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010cea:	4b03      	ldr	r3, [pc, #12]	; (8010cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bc80      	pop	{r7}
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	200001f8 	.word	0x200001f8

08010cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2204      	movs	r2, #4
 8010d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d0e:	4b03      	ldr	r3, [pc, #12]	; (8010d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bc80      	pop	{r7}
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	2000020c 	.word	0x2000020c

08010d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	4603      	mov	r3, r0
 8010d28:	6039      	str	r1, [r7, #0]
 8010d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d2c:	79fb      	ldrb	r3, [r7, #7]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d105      	bne.n	8010d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	4907      	ldr	r1, [pc, #28]	; (8010d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d36:	4808      	ldr	r0, [pc, #32]	; (8010d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d38:	f7fd fbfc 	bl	800e534 <USBD_GetString>
 8010d3c:	e004      	b.n	8010d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	4904      	ldr	r1, [pc, #16]	; (8010d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d42:	4805      	ldr	r0, [pc, #20]	; (8010d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d44:	f7fd fbf6 	bl	800e534 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d48:	4b02      	ldr	r3, [pc, #8]	; (8010d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20001900 	.word	0x20001900
 8010d58:	080178a0 	.word	0x080178a0

08010d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	4603      	mov	r3, r0
 8010d64:	6039      	str	r1, [r7, #0]
 8010d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d68:	683a      	ldr	r2, [r7, #0]
 8010d6a:	4904      	ldr	r1, [pc, #16]	; (8010d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d6c:	4804      	ldr	r0, [pc, #16]	; (8010d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d6e:	f7fd fbe1 	bl	800e534 <USBD_GetString>
  return USBD_StrDesc;
 8010d72:	4b02      	ldr	r3, [pc, #8]	; (8010d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	20001900 	.word	0x20001900
 8010d80:	080178b8 	.word	0x080178b8

08010d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	6039      	str	r1, [r7, #0]
 8010d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	221a      	movs	r2, #26
 8010d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d96:	f000 f843 	bl	8010e20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d9a:	4b02      	ldr	r3, [pc, #8]	; (8010da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	20000210 	.word	0x20000210

08010da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	6039      	str	r1, [r7, #0]
 8010db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010db4:	79fb      	ldrb	r3, [r7, #7]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d105      	bne.n	8010dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	4907      	ldr	r1, [pc, #28]	; (8010ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dbe:	4808      	ldr	r0, [pc, #32]	; (8010de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dc0:	f7fd fbb8 	bl	800e534 <USBD_GetString>
 8010dc4:	e004      	b.n	8010dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dc6:	683a      	ldr	r2, [r7, #0]
 8010dc8:	4904      	ldr	r1, [pc, #16]	; (8010ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dca:	4805      	ldr	r0, [pc, #20]	; (8010de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dcc:	f7fd fbb2 	bl	800e534 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010dd0:	4b02      	ldr	r3, [pc, #8]	; (8010ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20001900 	.word	0x20001900
 8010de0:	080178cc 	.word	0x080178cc

08010de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	6039      	str	r1, [r7, #0]
 8010dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010df0:	79fb      	ldrb	r3, [r7, #7]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d105      	bne.n	8010e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010df6:	683a      	ldr	r2, [r7, #0]
 8010df8:	4907      	ldr	r1, [pc, #28]	; (8010e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010dfa:	4808      	ldr	r0, [pc, #32]	; (8010e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010dfc:	f7fd fb9a 	bl	800e534 <USBD_GetString>
 8010e00:	e004      	b.n	8010e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	4904      	ldr	r1, [pc, #16]	; (8010e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e06:	4805      	ldr	r0, [pc, #20]	; (8010e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e08:	f7fd fb94 	bl	800e534 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e0c:	4b02      	ldr	r3, [pc, #8]	; (8010e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3708      	adds	r7, #8
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20001900 	.word	0x20001900
 8010e1c:	080178d8 	.word	0x080178d8

08010e20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e26:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <Get_SerialNum+0x44>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e2c:	4b0e      	ldr	r3, [pc, #56]	; (8010e68 <Get_SerialNum+0x48>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e32:	4b0e      	ldr	r3, [pc, #56]	; (8010e6c <Get_SerialNum+0x4c>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d009      	beq.n	8010e5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e46:	2208      	movs	r2, #8
 8010e48:	4909      	ldr	r1, [pc, #36]	; (8010e70 <Get_SerialNum+0x50>)
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f000 f814 	bl	8010e78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e50:	2204      	movs	r2, #4
 8010e52:	4908      	ldr	r1, [pc, #32]	; (8010e74 <Get_SerialNum+0x54>)
 8010e54:	68b8      	ldr	r0, [r7, #8]
 8010e56:	f000 f80f 	bl	8010e78 <IntToUnicode>
  }
}
 8010e5a:	bf00      	nop
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	1ff80050 	.word	0x1ff80050
 8010e68:	1ff80054 	.word	0x1ff80054
 8010e6c:	1ff80058 	.word	0x1ff80058
 8010e70:	20000212 	.word	0x20000212
 8010e74:	20000222 	.word	0x20000222

08010e78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b087      	sub	sp, #28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	4613      	mov	r3, r2
 8010e84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	75fb      	strb	r3, [r7, #23]
 8010e8e:	e027      	b.n	8010ee0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	0f1b      	lsrs	r3, r3, #28
 8010e94:	2b09      	cmp	r3, #9
 8010e96:	d80b      	bhi.n	8010eb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	0f1b      	lsrs	r3, r3, #28
 8010e9c:	b2da      	uxtb	r2, r3
 8010e9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ea0:	005b      	lsls	r3, r3, #1
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	440b      	add	r3, r1
 8010ea8:	3230      	adds	r2, #48	; 0x30
 8010eaa:	b2d2      	uxtb	r2, r2
 8010eac:	701a      	strb	r2, [r3, #0]
 8010eae:	e00a      	b.n	8010ec6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	0f1b      	lsrs	r3, r3, #28
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	7dfb      	ldrb	r3, [r7, #23]
 8010eb8:	005b      	lsls	r3, r3, #1
 8010eba:	4619      	mov	r1, r3
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	440b      	add	r3, r1
 8010ec0:	3237      	adds	r2, #55	; 0x37
 8010ec2:	b2d2      	uxtb	r2, r2
 8010ec4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	011b      	lsls	r3, r3, #4
 8010eca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ecc:	7dfb      	ldrb	r3, [r7, #23]
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010eda:	7dfb      	ldrb	r3, [r7, #23]
 8010edc:	3301      	adds	r3, #1
 8010ede:	75fb      	strb	r3, [r7, #23]
 8010ee0:	7dfa      	ldrb	r2, [r7, #23]
 8010ee2:	79fb      	ldrb	r3, [r7, #7]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d3d3      	bcc.n	8010e90 <IntToUnicode+0x18>
  }
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	371c      	adds	r7, #28
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bc80      	pop	{r7}
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	460b      	mov	r3, r1
 8010efe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8010f00:	78fb      	ldrb	r3, [r7, #3]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d106      	bne.n	8010f14 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8010f06:	4b09      	ldr	r3, [pc, #36]	; (8010f2c <HAL_PCDEx_SetConnectionState+0x38>)
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	4a08      	ldr	r2, [pc, #32]	; (8010f2c <HAL_PCDEx_SetConnectionState+0x38>)
 8010f0c:	f043 0301 	orr.w	r3, r3, #1
 8010f10:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8010f12:	e005      	b.n	8010f20 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8010f14:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <HAL_PCDEx_SetConnectionState+0x38>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4a04      	ldr	r2, [pc, #16]	; (8010f2c <HAL_PCDEx_SetConnectionState+0x38>)
 8010f1a:	f023 0301 	bic.w	r3, r3, #1
 8010f1e:	6053      	str	r3, [r2, #4]
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bc80      	pop	{r7}
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	40010000 	.word	0x40010000

08010f30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a0d      	ldr	r2, [pc, #52]	; (8010f74 <HAL_PCD_MspInit+0x44>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d113      	bne.n	8010f6a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010f42:	4b0d      	ldr	r3, [pc, #52]	; (8010f78 <HAL_PCD_MspInit+0x48>)
 8010f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f46:	4a0c      	ldr	r2, [pc, #48]	; (8010f78 <HAL_PCD_MspInit+0x48>)
 8010f48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010f4c:	6253      	str	r3, [r2, #36]	; 0x24
 8010f4e:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <HAL_PCD_MspInit+0x48>)
 8010f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f56:	60fb      	str	r3, [r7, #12]
 8010f58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	2014      	movs	r0, #20
 8010f60:	f7f4 f815 	bl	8004f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010f64:	2014      	movs	r0, #20
 8010f66:	f7f4 f82e 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	40005c00 	.word	0x40005c00
 8010f78:	40023800 	.word	0x40023800

08010f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010f90:	4619      	mov	r1, r3
 8010f92:	4610      	mov	r0, r2
 8010f94:	f7fc fc13 	bl	800d7be <USBD_LL_SetupStage>
}
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010fb2:	78fa      	ldrb	r2, [r7, #3]
 8010fb4:	6879      	ldr	r1, [r7, #4]
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	4413      	add	r3, r2
 8010fbc:	00db      	lsls	r3, r3, #3
 8010fbe:	440b      	add	r3, r1
 8010fc0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	78fb      	ldrb	r3, [r7, #3]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	f7fc fc45 	bl	800d858 <USBD_LL_DataOutStage>
}
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	460b      	mov	r3, r1
 8010fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010fe8:	78fa      	ldrb	r2, [r7, #3]
 8010fea:	6879      	ldr	r1, [r7, #4]
 8010fec:	4613      	mov	r3, r2
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	00db      	lsls	r3, r3, #3
 8010ff4:	440b      	add	r3, r1
 8010ff6:	333c      	adds	r3, #60	; 0x3c
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	78fb      	ldrb	r3, [r7, #3]
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	f7fc fc9c 	bl	800d93a <USBD_LL_DataInStage>
}
 8011002:	bf00      	nop
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801100a:	b580      	push	{r7, lr}
 801100c:	b082      	sub	sp, #8
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011018:	4618      	mov	r0, r3
 801101a:	f7fc fda7 	bl	800db6c <USBD_LL_SOF>
}
 801101e:	bf00      	nop
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b084      	sub	sp, #16
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801102e:	2301      	movs	r3, #1
 8011030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	2b02      	cmp	r3, #2
 8011038:	d001      	beq.n	801103e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801103a:	f7f2 f9cb 	bl	80033d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011044:	7bfa      	ldrb	r2, [r7, #15]
 8011046:	4611      	mov	r1, r2
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc fd5c 	bl	800db06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011054:	4618      	mov	r0, r3
 8011056:	f7fc fd15 	bl	800da84 <USBD_LL_Reset>
}
 801105a:	bf00      	nop
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
	...

08011064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011072:	4618      	mov	r0, r3
 8011074:	f7fc fd56 	bl	800db24 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	699b      	ldr	r3, [r3, #24]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d005      	beq.n	801108c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011080:	4b04      	ldr	r3, [pc, #16]	; (8011094 <HAL_PCD_SuspendCallback+0x30>)
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	4a03      	ldr	r2, [pc, #12]	; (8011094 <HAL_PCD_SuspendCallback+0x30>)
 8011086:	f043 0306 	orr.w	r3, r3, #6
 801108a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	e000ed00 	.word	0xe000ed00

08011098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fc fd50 	bl	800db4c <USBD_LL_Resume>
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80110bc:	4a28      	ldr	r2, [pc, #160]	; (8011160 <USBD_LL_Init+0xac>)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	4a26      	ldr	r2, [pc, #152]	; (8011160 <USBD_LL_Init+0xac>)
 80110c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80110cc:	4b24      	ldr	r3, [pc, #144]	; (8011160 <USBD_LL_Init+0xac>)
 80110ce:	4a25      	ldr	r2, [pc, #148]	; (8011164 <USBD_LL_Init+0xb0>)
 80110d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80110d2:	4b23      	ldr	r3, [pc, #140]	; (8011160 <USBD_LL_Init+0xac>)
 80110d4:	2208      	movs	r2, #8
 80110d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80110d8:	4b21      	ldr	r3, [pc, #132]	; (8011160 <USBD_LL_Init+0xac>)
 80110da:	2202      	movs	r2, #2
 80110dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80110de:	4b20      	ldr	r3, [pc, #128]	; (8011160 <USBD_LL_Init+0xac>)
 80110e0:	2202      	movs	r2, #2
 80110e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80110e4:	4b1e      	ldr	r3, [pc, #120]	; (8011160 <USBD_LL_Init+0xac>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80110ea:	4b1d      	ldr	r3, [pc, #116]	; (8011160 <USBD_LL_Init+0xac>)
 80110ec:	2200      	movs	r2, #0
 80110ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80110f0:	481b      	ldr	r0, [pc, #108]	; (8011160 <USBD_LL_Init+0xac>)
 80110f2:	f7f5 fb11 	bl	8006718 <HAL_PCD_Init>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80110fc:	f7f2 f96a 	bl	80033d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011106:	2318      	movs	r3, #24
 8011108:	2200      	movs	r2, #0
 801110a:	2100      	movs	r1, #0
 801110c:	f7f6 feee 	bl	8007eec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011116:	2358      	movs	r3, #88	; 0x58
 8011118:	2200      	movs	r2, #0
 801111a:	2180      	movs	r1, #128	; 0x80
 801111c:	f7f6 fee6 	bl	8007eec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011126:	23c0      	movs	r3, #192	; 0xc0
 8011128:	2200      	movs	r2, #0
 801112a:	2181      	movs	r1, #129	; 0x81
 801112c:	f7f6 fede 	bl	8007eec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011136:	f44f 7388 	mov.w	r3, #272	; 0x110
 801113a:	2200      	movs	r2, #0
 801113c:	2101      	movs	r1, #1
 801113e:	f7f6 fed5 	bl	8007eec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011148:	f44f 7380 	mov.w	r3, #256	; 0x100
 801114c:	2200      	movs	r2, #0
 801114e:	2182      	movs	r1, #130	; 0x82
 8011150:	f7f6 fecc 	bl	8007eec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	20001b00 	.word	0x20001b00
 8011164:	40005c00 	.word	0x40005c00

08011168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801117e:	4618      	mov	r0, r3
 8011180:	f7f5 fba8 	bl	80068d4 <HAL_PCD_Start>
 8011184:	4603      	mov	r3, r0
 8011186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	4618      	mov	r0, r3
 801118c:	f000 f944 	bl	8011418 <USBD_Get_USB_Status>
 8011190:	4603      	mov	r3, r0
 8011192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011194:	7bbb      	ldrb	r3, [r7, #14]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b084      	sub	sp, #16
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	4608      	mov	r0, r1
 80111a8:	4611      	mov	r1, r2
 80111aa:	461a      	mov	r2, r3
 80111ac:	4603      	mov	r3, r0
 80111ae:	70fb      	strb	r3, [r7, #3]
 80111b0:	460b      	mov	r3, r1
 80111b2:	70bb      	strb	r3, [r7, #2]
 80111b4:	4613      	mov	r3, r2
 80111b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111b8:	2300      	movs	r3, #0
 80111ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111bc:	2300      	movs	r3, #0
 80111be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80111c6:	78bb      	ldrb	r3, [r7, #2]
 80111c8:	883a      	ldrh	r2, [r7, #0]
 80111ca:	78f9      	ldrb	r1, [r7, #3]
 80111cc:	f7f5 fcc4 	bl	8006b58 <HAL_PCD_EP_Open>
 80111d0:	4603      	mov	r3, r0
 80111d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 f91e 	bl	8011418 <USBD_Get_USB_Status>
 80111dc:	4603      	mov	r3, r0
 80111de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b084      	sub	sp, #16
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111f6:	2300      	movs	r3, #0
 80111f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011204:	78fa      	ldrb	r2, [r7, #3]
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f7f5 fd0b 	bl	8006c24 <HAL_PCD_EP_Close>
 801120e:	4603      	mov	r3, r0
 8011210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011212:	7bfb      	ldrb	r3, [r7, #15]
 8011214:	4618      	mov	r0, r3
 8011216:	f000 f8ff 	bl	8011418 <USBD_Get_USB_Status>
 801121a:	4603      	mov	r3, r0
 801121c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801121e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	460b      	mov	r3, r1
 8011232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011234:	2300      	movs	r3, #0
 8011236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011238:	2300      	movs	r3, #0
 801123a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011242:	78fa      	ldrb	r2, [r7, #3]
 8011244:	4611      	mov	r1, r2
 8011246:	4618      	mov	r0, r3
 8011248:	f7f5 fdcb 	bl	8006de2 <HAL_PCD_EP_SetStall>
 801124c:	4603      	mov	r3, r0
 801124e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011250:	7bfb      	ldrb	r3, [r7, #15]
 8011252:	4618      	mov	r0, r3
 8011254:	f000 f8e0 	bl	8011418 <USBD_Get_USB_Status>
 8011258:	4603      	mov	r3, r0
 801125a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801125c:	7bbb      	ldrb	r3, [r7, #14]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b084      	sub	sp, #16
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	460b      	mov	r3, r1
 8011270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011276:	2300      	movs	r3, #0
 8011278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011280:	78fa      	ldrb	r2, [r7, #3]
 8011282:	4611      	mov	r1, r2
 8011284:	4618      	mov	r0, r3
 8011286:	f7f5 fdfe 	bl	8006e86 <HAL_PCD_EP_ClrStall>
 801128a:	4603      	mov	r3, r0
 801128c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	4618      	mov	r0, r3
 8011292:	f000 f8c1 	bl	8011418 <USBD_Get_USB_Status>
 8011296:	4603      	mov	r3, r0
 8011298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801129a:	7bbb      	ldrb	r3, [r7, #14]
}
 801129c:	4618      	mov	r0, r3
 801129e:	3710      	adds	r7, #16
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b085      	sub	sp, #20
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	460b      	mov	r3, r1
 80112ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80112b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80112b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	da0c      	bge.n	80112da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c6:	68f9      	ldr	r1, [r7, #12]
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	4613      	mov	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	00db      	lsls	r3, r3, #3
 80112d2:	440b      	add	r3, r1
 80112d4:	3302      	adds	r3, #2
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	e00b      	b.n	80112f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80112da:	78fb      	ldrb	r3, [r7, #3]
 80112dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112e0:	68f9      	ldr	r1, [r7, #12]
 80112e2:	4613      	mov	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	4413      	add	r3, r2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	440b      	add	r3, r1
 80112ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80112f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3714      	adds	r7, #20
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bc80      	pop	{r7}
 80112fa:	4770      	bx	lr

080112fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011308:	2300      	movs	r3, #0
 801130a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011316:	78fa      	ldrb	r2, [r7, #3]
 8011318:	4611      	mov	r1, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f7f5 fbf7 	bl	8006b0e <HAL_PCD_SetAddress>
 8011320:	4603      	mov	r3, r0
 8011322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	4618      	mov	r0, r3
 8011328:	f000 f876 	bl	8011418 <USBD_Get_USB_Status>
 801132c:	4603      	mov	r3, r0
 801132e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011330:	7bbb      	ldrb	r3, [r7, #14]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3710      	adds	r7, #16
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b086      	sub	sp, #24
 801133e:	af00      	add	r7, sp, #0
 8011340:	60f8      	str	r0, [r7, #12]
 8011342:	607a      	str	r2, [r7, #4]
 8011344:	461a      	mov	r2, r3
 8011346:	460b      	mov	r3, r1
 8011348:	72fb      	strb	r3, [r7, #11]
 801134a:	4613      	mov	r3, r2
 801134c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801134e:	2300      	movs	r3, #0
 8011350:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801135c:	893b      	ldrh	r3, [r7, #8]
 801135e:	7af9      	ldrb	r1, [r7, #11]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	f7f5 fcfb 	bl	8006d5c <HAL_PCD_EP_Transmit>
 8011366:	4603      	mov	r3, r0
 8011368:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	4618      	mov	r0, r3
 801136e:	f000 f853 	bl	8011418 <USBD_Get_USB_Status>
 8011372:	4603      	mov	r3, r0
 8011374:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011376:	7dbb      	ldrb	r3, [r7, #22]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3718      	adds	r7, #24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b086      	sub	sp, #24
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	607a      	str	r2, [r7, #4]
 801138a:	461a      	mov	r2, r3
 801138c:	460b      	mov	r3, r1
 801138e:	72fb      	strb	r3, [r7, #11]
 8011390:	4613      	mov	r3, r2
 8011392:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80113a2:	893b      	ldrh	r3, [r7, #8]
 80113a4:	7af9      	ldrb	r1, [r7, #11]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	f7f5 fc84 	bl	8006cb4 <HAL_PCD_EP_Receive>
 80113ac:	4603      	mov	r3, r0
 80113ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113b0:	7dfb      	ldrb	r3, [r7, #23]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f000 f830 	bl	8011418 <USBD_Get_USB_Status>
 80113b8:	4603      	mov	r3, r0
 80113ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80113bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3718      	adds	r7, #24
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}

080113c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113c6:	b580      	push	{r7, lr}
 80113c8:	b082      	sub	sp, #8
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
 80113ce:	460b      	mov	r3, r1
 80113d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80113d8:	78fa      	ldrb	r2, [r7, #3]
 80113da:	4611      	mov	r1, r2
 80113dc:	4618      	mov	r0, r3
 80113de:	f7f5 fca6 	bl	8006d2e <HAL_PCD_EP_GetRxCount>
 80113e2:	4603      	mov	r3, r0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80113f4:	4b02      	ldr	r3, [pc, #8]	; (8011400 <USBD_static_malloc+0x14>)
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bc80      	pop	{r7}
 80113fe:	4770      	bx	lr
 8011400:	200007a4 	.word	0x200007a4

08011404 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]

}
 801140c:	bf00      	nop
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	bc80      	pop	{r7}
 8011414:	4770      	bx	lr
	...

08011418 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	4603      	mov	r3, r0
 8011420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011426:	79fb      	ldrb	r3, [r7, #7]
 8011428:	2b03      	cmp	r3, #3
 801142a:	d817      	bhi.n	801145c <USBD_Get_USB_Status+0x44>
 801142c:	a201      	add	r2, pc, #4	; (adr r2, 8011434 <USBD_Get_USB_Status+0x1c>)
 801142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011432:	bf00      	nop
 8011434:	08011445 	.word	0x08011445
 8011438:	0801144b 	.word	0x0801144b
 801143c:	08011451 	.word	0x08011451
 8011440:	08011457 	.word	0x08011457
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011444:	2300      	movs	r3, #0
 8011446:	73fb      	strb	r3, [r7, #15]
    break;
 8011448:	e00b      	b.n	8011462 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801144a:	2302      	movs	r3, #2
 801144c:	73fb      	strb	r3, [r7, #15]
    break;
 801144e:	e008      	b.n	8011462 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011450:	2301      	movs	r3, #1
 8011452:	73fb      	strb	r3, [r7, #15]
    break;
 8011454:	e005      	b.n	8011462 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011456:	2302      	movs	r3, #2
 8011458:	73fb      	strb	r3, [r7, #15]
    break;
 801145a:	e002      	b.n	8011462 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801145c:	2302      	movs	r3, #2
 801145e:	73fb      	strb	r3, [r7, #15]
    break;
 8011460:	bf00      	nop
  }
  return usb_status;
 8011462:	7bfb      	ldrb	r3, [r7, #15]
}
 8011464:	4618      	mov	r0, r3
 8011466:	3714      	adds	r7, #20
 8011468:	46bd      	mov	sp, r7
 801146a:	bc80      	pop	{r7}
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop

08011470 <_ZdlPv>:
 8011470:	f001 b8c0 	b.w	80125f4 <free>

08011474 <_ZdlPvj>:
 8011474:	f7ff bffc 	b.w	8011470 <_ZdlPv>

08011478 <_Znwj>:
 8011478:	2801      	cmp	r0, #1
 801147a:	bf38      	it	cc
 801147c:	2001      	movcc	r0, #1
 801147e:	b510      	push	{r4, lr}
 8011480:	4604      	mov	r4, r0
 8011482:	4620      	mov	r0, r4
 8011484:	f001 f8ae 	bl	80125e4 <malloc>
 8011488:	b930      	cbnz	r0, 8011498 <_Znwj+0x20>
 801148a:	f000 fbe3 	bl	8011c54 <_ZSt15get_new_handlerv>
 801148e:	b908      	cbnz	r0, 8011494 <_Znwj+0x1c>
 8011490:	f001 f86e 	bl	8012570 <abort>
 8011494:	4780      	blx	r0
 8011496:	e7f4      	b.n	8011482 <_Znwj+0xa>
 8011498:	bd10      	pop	{r4, pc}

0801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801149a:	68c3      	ldr	r3, [r0, #12]
 801149c:	b510      	push	{r4, lr}
 801149e:	689a      	ldr	r2, [r3, #8]
 80114a0:	60c2      	str	r2, [r0, #12]
 80114a2:	b102      	cbz	r2, 80114a6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80114a4:	6050      	str	r0, [r2, #4]
 80114a6:	6842      	ldr	r2, [r0, #4]
 80114a8:	605a      	str	r2, [r3, #4]
 80114aa:	680c      	ldr	r4, [r1, #0]
 80114ac:	4284      	cmp	r4, r0
 80114ae:	d103      	bne.n	80114b8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80114b0:	600b      	str	r3, [r1, #0]
 80114b2:	6098      	str	r0, [r3, #8]
 80114b4:	6043      	str	r3, [r0, #4]
 80114b6:	bd10      	pop	{r4, pc}
 80114b8:	6891      	ldr	r1, [r2, #8]
 80114ba:	4281      	cmp	r1, r0
 80114bc:	bf0c      	ite	eq
 80114be:	6093      	streq	r3, [r2, #8]
 80114c0:	60d3      	strne	r3, [r2, #12]
 80114c2:	e7f6      	b.n	80114b2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80114c4:	6883      	ldr	r3, [r0, #8]
 80114c6:	b510      	push	{r4, lr}
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	6082      	str	r2, [r0, #8]
 80114cc:	b102      	cbz	r2, 80114d0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80114ce:	6050      	str	r0, [r2, #4]
 80114d0:	6842      	ldr	r2, [r0, #4]
 80114d2:	605a      	str	r2, [r3, #4]
 80114d4:	680c      	ldr	r4, [r1, #0]
 80114d6:	4284      	cmp	r4, r0
 80114d8:	d103      	bne.n	80114e2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80114da:	600b      	str	r3, [r1, #0]
 80114dc:	60d8      	str	r0, [r3, #12]
 80114de:	6043      	str	r3, [r0, #4]
 80114e0:	bd10      	pop	{r4, pc}
 80114e2:	68d1      	ldr	r1, [r2, #12]
 80114e4:	4281      	cmp	r1, r0
 80114e6:	bf0c      	ite	eq
 80114e8:	60d3      	streq	r3, [r2, #12]
 80114ea:	6093      	strne	r3, [r2, #8]
 80114ec:	e7f6      	b.n	80114dc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080114ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80114ee:	7802      	ldrb	r2, [r0, #0]
 80114f0:	4603      	mov	r3, r0
 80114f2:	b92a      	cbnz	r2, 8011500 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80114f4:	6842      	ldr	r2, [r0, #4]
 80114f6:	6852      	ldr	r2, [r2, #4]
 80114f8:	4282      	cmp	r2, r0
 80114fa:	d101      	bne.n	8011500 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80114fc:	68d0      	ldr	r0, [r2, #12]
 80114fe:	4770      	bx	lr
 8011500:	689a      	ldr	r2, [r3, #8]
 8011502:	b122      	cbz	r2, 801150e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8011504:	4610      	mov	r0, r2
 8011506:	68d2      	ldr	r2, [r2, #12]
 8011508:	2a00      	cmp	r2, #0
 801150a:	d1fb      	bne.n	8011504 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801150c:	4770      	bx	lr
 801150e:	6858      	ldr	r0, [r3, #4]
 8011510:	6882      	ldr	r2, [r0, #8]
 8011512:	429a      	cmp	r2, r3
 8011514:	d102      	bne.n	801151c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 8011516:	4603      	mov	r3, r0
 8011518:	6840      	ldr	r0, [r0, #4]
 801151a:	e7f9      	b.n	8011510 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 801151c:	4770      	bx	lr

0801151e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801151e:	68c3      	ldr	r3, [r0, #12]
 8011520:	b123      	cbz	r3, 801152c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8011522:	4618      	mov	r0, r3
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1fb      	bne.n	8011522 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 801152a:	4770      	bx	lr
 801152c:	6843      	ldr	r3, [r0, #4]
 801152e:	68da      	ldr	r2, [r3, #12]
 8011530:	4282      	cmp	r2, r0
 8011532:	d102      	bne.n	801153a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8011534:	4618      	mov	r0, r3
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	e7f9      	b.n	801152e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 801153a:	68c2      	ldr	r2, [r0, #12]
 801153c:	4293      	cmp	r3, r2
 801153e:	bf18      	it	ne
 8011540:	4618      	movne	r0, r3
 8011542:	4770      	bx	lr

08011544 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8011544:	f7ff bfd3 	b.w	80114ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08011548 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8011548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801154c:	461e      	mov	r6, r3
 801154e:	f103 0804 	add.w	r8, r3, #4
 8011552:	2300      	movs	r3, #0
 8011554:	460c      	mov	r4, r1
 8011556:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801155a:	604a      	str	r2, [r1, #4]
 801155c:	700b      	strb	r3, [r1, #0]
 801155e:	b300      	cbz	r0, 80115a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8011560:	4296      	cmp	r6, r2
 8011562:	6091      	str	r1, [r2, #8]
 8011564:	d118      	bne.n	8011598 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8011566:	6071      	str	r1, [r6, #4]
 8011568:	60f4      	str	r4, [r6, #12]
 801156a:	2701      	movs	r7, #1
 801156c:	f04f 0900 	mov.w	r9, #0
 8011570:	6873      	ldr	r3, [r6, #4]
 8011572:	42a3      	cmp	r3, r4
 8011574:	d03f      	beq.n	80115f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8011576:	6860      	ldr	r0, [r4, #4]
 8011578:	7802      	ldrb	r2, [r0, #0]
 801157a:	2a00      	cmp	r2, #0
 801157c:	d13c      	bne.n	80115f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 801157e:	6845      	ldr	r5, [r0, #4]
 8011580:	68ab      	ldr	r3, [r5, #8]
 8011582:	4298      	cmp	r0, r3
 8011584:	d123      	bne.n	80115ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8011586:	68eb      	ldr	r3, [r5, #12]
 8011588:	b183      	cbz	r3, 80115ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801158a:	781a      	ldrb	r2, [r3, #0]
 801158c:	b972      	cbnz	r2, 80115ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801158e:	7007      	strb	r7, [r0, #0]
 8011590:	701f      	strb	r7, [r3, #0]
 8011592:	702a      	strb	r2, [r5, #0]
 8011594:	462c      	mov	r4, r5
 8011596:	e7eb      	b.n	8011570 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8011598:	68b3      	ldr	r3, [r6, #8]
 801159a:	4293      	cmp	r3, r2
 801159c:	d1e5      	bne.n	801156a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801159e:	60b1      	str	r1, [r6, #8]
 80115a0:	e7e3      	b.n	801156a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80115a2:	60d1      	str	r1, [r2, #12]
 80115a4:	68f3      	ldr	r3, [r6, #12]
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d1df      	bne.n	801156a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80115aa:	e7dd      	b.n	8011568 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80115ac:	68c3      	ldr	r3, [r0, #12]
 80115ae:	42a3      	cmp	r3, r4
 80115b0:	d103      	bne.n	80115ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80115b2:	4641      	mov	r1, r8
 80115b4:	f7ff ff71 	bl	801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80115b8:	4604      	mov	r4, r0
 80115ba:	6863      	ldr	r3, [r4, #4]
 80115bc:	4641      	mov	r1, r8
 80115be:	701f      	strb	r7, [r3, #0]
 80115c0:	4628      	mov	r0, r5
 80115c2:	f885 9000 	strb.w	r9, [r5]
 80115c6:	f7ff ff7d 	bl	80114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80115ca:	4625      	mov	r5, r4
 80115cc:	e7e2      	b.n	8011594 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80115ce:	b113      	cbz	r3, 80115d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80115d0:	781a      	ldrb	r2, [r3, #0]
 80115d2:	2a00      	cmp	r2, #0
 80115d4:	d0db      	beq.n	801158e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80115d6:	6883      	ldr	r3, [r0, #8]
 80115d8:	42a3      	cmp	r3, r4
 80115da:	d103      	bne.n	80115e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80115dc:	4641      	mov	r1, r8
 80115de:	f7ff ff71 	bl	80114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80115e2:	4604      	mov	r4, r0
 80115e4:	6863      	ldr	r3, [r4, #4]
 80115e6:	4641      	mov	r1, r8
 80115e8:	701f      	strb	r7, [r3, #0]
 80115ea:	4628      	mov	r0, r5
 80115ec:	f885 9000 	strb.w	r9, [r5]
 80115f0:	f7ff ff53 	bl	801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80115f4:	e7e9      	b.n	80115ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80115f6:	4623      	mov	r3, r4
 80115f8:	2201      	movs	r2, #1
 80115fa:	701a      	strb	r2, [r3, #0]
 80115fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011600 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 8011600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011604:	460f      	mov	r7, r1
 8011606:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 801160a:	4604      	mov	r4, r0
 801160c:	2e00      	cmp	r6, #0
 801160e:	d03e      	beq.n	801168e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 8011610:	2900      	cmp	r1, #0
 8011612:	d03d      	beq.n	8011690 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8011614:	460a      	mov	r2, r1
 8011616:	4613      	mov	r3, r2
 8011618:	6892      	ldr	r2, [r2, #8]
 801161a:	2a00      	cmp	r2, #0
 801161c:	d1fb      	bne.n	8011616 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 801161e:	42a3      	cmp	r3, r4
 8011620:	68da      	ldr	r2, [r3, #12]
 8011622:	d04b      	beq.n	80116bc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 8011624:	4299      	cmp	r1, r3
 8011626:	6073      	str	r3, [r6, #4]
 8011628:	609e      	str	r6, [r3, #8]
 801162a:	d027      	beq.n	801167c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 801162c:	685d      	ldr	r5, [r3, #4]
 801162e:	b102      	cbz	r2, 8011632 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 8011630:	6055      	str	r5, [r2, #4]
 8011632:	6858      	ldr	r0, [r3, #4]
 8011634:	6082      	str	r2, [r0, #8]
 8011636:	60d9      	str	r1, [r3, #12]
 8011638:	68e1      	ldr	r1, [r4, #12]
 801163a:	604b      	str	r3, [r1, #4]
 801163c:	6879      	ldr	r1, [r7, #4]
 801163e:	42a1      	cmp	r1, r4
 8011640:	d11e      	bne.n	8011680 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 8011642:	607b      	str	r3, [r7, #4]
 8011644:	4616      	mov	r6, r2
 8011646:	6861      	ldr	r1, [r4, #4]
 8011648:	7820      	ldrb	r0, [r4, #0]
 801164a:	6059      	str	r1, [r3, #4]
 801164c:	7819      	ldrb	r1, [r3, #0]
 801164e:	7018      	strb	r0, [r3, #0]
 8011650:	7021      	strb	r1, [r4, #0]
 8011652:	7823      	ldrb	r3, [r4, #0]
 8011654:	b17b      	cbz	r3, 8011676 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 8011656:	f04f 0800 	mov.w	r8, #0
 801165a:	f04f 0901 	mov.w	r9, #1
 801165e:	f107 0a04 	add.w	sl, r7, #4
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	42b3      	cmp	r3, r6
 8011666:	d075      	beq.n	8011754 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>
 8011668:	2e00      	cmp	r6, #0
 801166a:	d03e      	beq.n	80116ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 801166c:	7833      	ldrb	r3, [r6, #0]
 801166e:	2b01      	cmp	r3, #1
 8011670:	d03b      	beq.n	80116ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 8011672:	2301      	movs	r3, #1
 8011674:	7033      	strb	r3, [r6, #0]
 8011676:	4620      	mov	r0, r4
 8011678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801167c:	461d      	mov	r5, r3
 801167e:	e7dd      	b.n	801163c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 8011680:	6861      	ldr	r1, [r4, #4]
 8011682:	6888      	ldr	r0, [r1, #8]
 8011684:	42a0      	cmp	r0, r4
 8011686:	bf0c      	ite	eq
 8011688:	608b      	streq	r3, [r1, #8]
 801168a:	60cb      	strne	r3, [r1, #12]
 801168c:	e7da      	b.n	8011644 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 801168e:	460e      	mov	r6, r1
 8011690:	6865      	ldr	r5, [r4, #4]
 8011692:	b106      	cbz	r6, 8011696 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 8011694:	6075      	str	r5, [r6, #4]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	42a3      	cmp	r3, r4
 801169a:	d111      	bne.n	80116c0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 801169c:	607e      	str	r6, [r7, #4]
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	d103      	bne.n	80116ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 80116a4:	68e3      	ldr	r3, [r4, #12]
 80116a6:	b993      	cbnz	r3, 80116ce <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 80116a8:	6863      	ldr	r3, [r4, #4]
 80116aa:	60bb      	str	r3, [r7, #8]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	42a3      	cmp	r3, r4
 80116b0:	d1cf      	bne.n	8011652 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	b993      	cbnz	r3, 80116dc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 80116b6:	6863      	ldr	r3, [r4, #4]
 80116b8:	60fb      	str	r3, [r7, #12]
 80116ba:	e7ca      	b.n	8011652 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 80116bc:	4616      	mov	r6, r2
 80116be:	e7e7      	b.n	8011690 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 80116c0:	6863      	ldr	r3, [r4, #4]
 80116c2:	689a      	ldr	r2, [r3, #8]
 80116c4:	42a2      	cmp	r2, r4
 80116c6:	bf0c      	ite	eq
 80116c8:	609e      	streq	r6, [r3, #8]
 80116ca:	60de      	strne	r6, [r3, #12]
 80116cc:	e7e7      	b.n	801169e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 80116ce:	4633      	mov	r3, r6
 80116d0:	461a      	mov	r2, r3
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d1fb      	bne.n	80116d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 80116d8:	60ba      	str	r2, [r7, #8]
 80116da:	e7e7      	b.n	80116ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 80116dc:	4633      	mov	r3, r6
 80116de:	461a      	mov	r2, r3
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1fb      	bne.n	80116de <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 80116e6:	60fa      	str	r2, [r7, #12]
 80116e8:	e7b3      	b.n	8011652 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 80116ea:	68a8      	ldr	r0, [r5, #8]
 80116ec:	42b0      	cmp	r0, r6
 80116ee:	d134      	bne.n	801175a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15a>
 80116f0:	68e8      	ldr	r0, [r5, #12]
 80116f2:	7803      	ldrb	r3, [r0, #0]
 80116f4:	b93b      	cbnz	r3, 8011706 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x106>
 80116f6:	f880 9000 	strb.w	r9, [r0]
 80116fa:	4651      	mov	r1, sl
 80116fc:	4628      	mov	r0, r5
 80116fe:	702b      	strb	r3, [r5, #0]
 8011700:	f7ff fecb 	bl	801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011704:	68e8      	ldr	r0, [r5, #12]
 8011706:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801170a:	b112      	cbz	r2, 8011712 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x112>
 801170c:	7811      	ldrb	r1, [r2, #0]
 801170e:	2901      	cmp	r1, #1
 8011710:	d109      	bne.n	8011726 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 8011712:	b113      	cbz	r3, 801171a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 8011714:	7819      	ldrb	r1, [r3, #0]
 8011716:	2901      	cmp	r1, #1
 8011718:	d105      	bne.n	8011726 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 801171a:	686b      	ldr	r3, [r5, #4]
 801171c:	462e      	mov	r6, r5
 801171e:	f880 8000 	strb.w	r8, [r0]
 8011722:	461d      	mov	r5, r3
 8011724:	e79d      	b.n	8011662 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x62>
 8011726:	b113      	cbz	r3, 801172e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12e>
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	2b01      	cmp	r3, #1
 801172c:	d107      	bne.n	801173e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13e>
 801172e:	2301      	movs	r3, #1
 8011730:	7013      	strb	r3, [r2, #0]
 8011732:	2300      	movs	r3, #0
 8011734:	4651      	mov	r1, sl
 8011736:	7003      	strb	r3, [r0, #0]
 8011738:	f7ff fec4 	bl	80114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801173c:	68e8      	ldr	r0, [r5, #12]
 801173e:	2201      	movs	r2, #1
 8011740:	782b      	ldrb	r3, [r5, #0]
 8011742:	7003      	strb	r3, [r0, #0]
 8011744:	68c3      	ldr	r3, [r0, #12]
 8011746:	702a      	strb	r2, [r5, #0]
 8011748:	b103      	cbz	r3, 801174c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14c>
 801174a:	701a      	strb	r2, [r3, #0]
 801174c:	4651      	mov	r1, sl
 801174e:	4628      	mov	r0, r5
 8011750:	f7ff fea3 	bl	801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011754:	2e00      	cmp	r6, #0
 8011756:	d18c      	bne.n	8011672 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x72>
 8011758:	e78d      	b.n	8011676 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 801175a:	7803      	ldrb	r3, [r0, #0]
 801175c:	b93b      	cbnz	r3, 801176e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16e>
 801175e:	f880 9000 	strb.w	r9, [r0]
 8011762:	4651      	mov	r1, sl
 8011764:	4628      	mov	r0, r5
 8011766:	702b      	strb	r3, [r5, #0]
 8011768:	f7ff feac 	bl	80114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801176c:	68a8      	ldr	r0, [r5, #8]
 801176e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011772:	b112      	cbz	r2, 801177a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 8011774:	7811      	ldrb	r1, [r2, #0]
 8011776:	2901      	cmp	r1, #1
 8011778:	d104      	bne.n	8011784 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x184>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0cd      	beq.n	801171a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 801177e:	7819      	ldrb	r1, [r3, #0]
 8011780:	2901      	cmp	r1, #1
 8011782:	d0ca      	beq.n	801171a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 8011784:	b113      	cbz	r3, 801178c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18c>
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b01      	cmp	r3, #1
 801178a:	d107      	bne.n	801179c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19c>
 801178c:	2301      	movs	r3, #1
 801178e:	7013      	strb	r3, [r2, #0]
 8011790:	2300      	movs	r3, #0
 8011792:	4651      	mov	r1, sl
 8011794:	7003      	strb	r3, [r0, #0]
 8011796:	f7ff fe80 	bl	801149a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801179a:	68a8      	ldr	r0, [r5, #8]
 801179c:	2201      	movs	r2, #1
 801179e:	782b      	ldrb	r3, [r5, #0]
 80117a0:	7003      	strb	r3, [r0, #0]
 80117a2:	6883      	ldr	r3, [r0, #8]
 80117a4:	702a      	strb	r2, [r5, #0]
 80117a6:	b103      	cbz	r3, 80117aa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
 80117a8:	701a      	strb	r2, [r3, #0]
 80117aa:	4651      	mov	r1, sl
 80117ac:	4628      	mov	r0, r5
 80117ae:	f7ff fe89 	bl	80114c4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80117b2:	e7cf      	b.n	8011754 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>

080117b4 <_ZSt17__throw_bad_allocv>:
 80117b4:	b508      	push	{r3, lr}
 80117b6:	f000 fedb 	bl	8012570 <abort>

080117ba <_ZSt19__throw_logic_errorPKc>:
 80117ba:	b508      	push	{r3, lr}
 80117bc:	f000 fed8 	bl	8012570 <abort>

080117c0 <_ZSt20__throw_length_errorPKc>:
 80117c0:	b508      	push	{r3, lr}
 80117c2:	f000 fed5 	bl	8012570 <abort>

080117c6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80117c6:	b40f      	push	{r0, r1, r2, r3}
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	f107 0410 	add.w	r4, r7, #16
 80117d2:	f854 5b04 	ldr.w	r5, [r4], #4
 80117d6:	4628      	mov	r0, r5
 80117d8:	f7ee fcd2 	bl	8000180 <strlen>
 80117dc:	f200 2307 	addw	r3, r0, #519	; 0x207
 80117e0:	f023 0307 	bic.w	r3, r3, #7
 80117e4:	ebad 0d03 	sub.w	sp, sp, r3
 80117e8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80117ec:	4623      	mov	r3, r4
 80117ee:	462a      	mov	r2, r5
 80117f0:	4668      	mov	r0, sp
 80117f2:	607c      	str	r4, [r7, #4]
 80117f4:	f000 f854 	bl	80118a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80117f8:	f000 feba 	bl	8012570 <abort>

080117fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80117fc:	4606      	mov	r6, r0
 80117fe:	460c      	mov	r4, r1
 8011800:	b580      	push	{r7, lr}
 8011802:	b09c      	sub	sp, #112	; 0x70
 8011804:	af00      	add	r7, sp, #0
 8011806:	1ba4      	subs	r4, r4, r6
 8011808:	2269      	movs	r2, #105	; 0x69
 801180a:	490e      	ldr	r1, [pc, #56]	; (8011844 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801180c:	1d38      	adds	r0, r7, #4
 801180e:	f000 ff07 	bl	8012620 <memcpy>
 8011812:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8011816:	f023 0307 	bic.w	r3, r3, #7
 801181a:	ebad 0d03 	sub.w	sp, sp, r3
 801181e:	466d      	mov	r5, sp
 8011820:	2268      	movs	r2, #104	; 0x68
 8011822:	1d39      	adds	r1, r7, #4
 8011824:	4628      	mov	r0, r5
 8011826:	f000 fefb 	bl	8012620 <memcpy>
 801182a:	4622      	mov	r2, r4
 801182c:	4631      	mov	r1, r6
 801182e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8011832:	f000 fef5 	bl	8012620 <memcpy>
 8011836:	2300      	movs	r3, #0
 8011838:	442c      	add	r4, r5
 801183a:	4628      	mov	r0, r5
 801183c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8011840:	f7ff ffbb 	bl	80117ba <_ZSt19__throw_logic_errorPKc>
 8011844:	080179a8 	.word	0x080179a8

08011848 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	af00      	add	r7, sp, #0
 801184e:	b084      	sub	sp, #16
 8011850:	466d      	mov	r5, sp
 8011852:	f105 040c 	add.w	r4, r5, #12
 8011856:	4623      	mov	r3, r4
 8011858:	f04f 0c0a 	mov.w	ip, #10
 801185c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 801189c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8011860:	fbb2 f6fc 	udiv	r6, r2, ip
 8011864:	fb0c 2e16 	mls	lr, ip, r6, r2
 8011868:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801186c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8011870:	4696      	mov	lr, r2
 8011872:	f1be 0f09 	cmp.w	lr, #9
 8011876:	4632      	mov	r2, r6
 8011878:	d8f2      	bhi.n	8011860 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801187a:	1ae4      	subs	r4, r4, r3
 801187c:	428c      	cmp	r4, r1
 801187e:	d809      	bhi.n	8011894 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8011880:	f1c4 010c 	rsb	r1, r4, #12
 8011884:	4622      	mov	r2, r4
 8011886:	4429      	add	r1, r5
 8011888:	f000 feca 	bl	8012620 <memcpy>
 801188c:	4620      	mov	r0, r4
 801188e:	46bd      	mov	sp, r7
 8011890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011894:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011898:	e7f8      	b.n	801188c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801189a:	bf00      	nop
 801189c:	08017a11 	.word	0x08017a11

080118a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a4:	4607      	mov	r7, r0
 80118a6:	4615      	mov	r5, r2
 80118a8:	4604      	mov	r4, r0
 80118aa:	3901      	subs	r1, #1
 80118ac:	eb00 0801 	add.w	r8, r0, r1
 80118b0:	782a      	ldrb	r2, [r5, #0]
 80118b2:	b362      	cbz	r2, 801190e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80118b4:	4544      	cmp	r4, r8
 80118b6:	d22e      	bcs.n	8011916 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80118b8:	2a25      	cmp	r2, #37	; 0x25
 80118ba:	d107      	bne.n	80118cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80118bc:	786a      	ldrb	r2, [r5, #1]
 80118be:	2a73      	cmp	r2, #115	; 0x73
 80118c0:	d009      	beq.n	80118d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80118c2:	2a7a      	cmp	r2, #122	; 0x7a
 80118c4:	d012      	beq.n	80118ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80118c6:	2a25      	cmp	r2, #37	; 0x25
 80118c8:	d100      	bne.n	80118cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80118ca:	3501      	adds	r5, #1
 80118cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80118d0:	f804 2b01 	strb.w	r2, [r4], #1
 80118d4:	e7ec      	b.n	80118b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80118d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80118da:	3a01      	subs	r2, #1
 80118dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80118e0:	b1e9      	cbz	r1, 801191e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80118e2:	4544      	cmp	r4, r8
 80118e4:	d017      	beq.n	8011916 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80118e6:	f804 1b01 	strb.w	r1, [r4], #1
 80118ea:	e7f7      	b.n	80118dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80118ec:	78aa      	ldrb	r2, [r5, #2]
 80118ee:	2a75      	cmp	r2, #117	; 0x75
 80118f0:	d1ec      	bne.n	80118cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80118f2:	461e      	mov	r6, r3
 80118f4:	4620      	mov	r0, r4
 80118f6:	f856 2b04 	ldr.w	r2, [r6], #4
 80118fa:	eba8 0104 	sub.w	r1, r8, r4
 80118fe:	f7ff ffa3 	bl	8011848 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011902:	2800      	cmp	r0, #0
 8011904:	dd07      	ble.n	8011916 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8011906:	4633      	mov	r3, r6
 8011908:	4404      	add	r4, r0
 801190a:	3503      	adds	r5, #3
 801190c:	e7d0      	b.n	80118b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801190e:	7022      	strb	r2, [r4, #0]
 8011910:	1be0      	subs	r0, r4, r7
 8011912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011916:	4621      	mov	r1, r4
 8011918:	4638      	mov	r0, r7
 801191a:	f7ff ff6f 	bl	80117fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801191e:	3502      	adds	r5, #2
 8011920:	e7c6      	b.n	80118b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

08011922 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8011922:	4613      	mov	r3, r2
 8011924:	460a      	mov	r2, r1
 8011926:	b111      	cbz	r1, 801192e <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8011928:	7819      	ldrb	r1, [r3, #0]
 801192a:	f000 be6b 	b.w	8012604 <memchr>
 801192e:	4608      	mov	r0, r1
 8011930:	4770      	bx	lr

08011932 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8011932:	b10a      	cbz	r2, 8011938 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8011934:	f000 be74 	b.w	8012620 <memcpy>
 8011938:	4770      	bx	lr
	...

0801193c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801193c:	b508      	push	{r3, lr}
 801193e:	680b      	ldr	r3, [r1, #0]
 8011940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011944:	d302      	bcc.n	801194c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8011946:	480d      	ldr	r0, [pc, #52]	; (801197c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8011948:	f7ff ff3a 	bl	80117c0 <_ZSt20__throw_length_errorPKc>
 801194c:	4293      	cmp	r3, r2
 801194e:	d90b      	bls.n	8011968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011950:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011954:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8011958:	d206      	bcs.n	8011968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801195a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801195e:	bf2a      	itet	cs
 8011960:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8011964:	6008      	strcc	r0, [r1, #0]
 8011966:	600b      	strcs	r3, [r1, #0]
 8011968:	6808      	ldr	r0, [r1, #0]
 801196a:	3001      	adds	r0, #1
 801196c:	d501      	bpl.n	8011972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801196e:	f7ff ff21 	bl	80117b4 <_ZSt17__throw_bad_allocv>
 8011972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011976:	f7ff bd7f 	b.w	8011478 <_Znwj>
 801197a:	bf00      	nop
 801197c:	08017a1c 	.word	0x08017a1c

08011980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011980:	4603      	mov	r3, r0
 8011982:	f853 0b08 	ldr.w	r0, [r3], #8
 8011986:	4298      	cmp	r0, r3
 8011988:	d001      	beq.n	801198e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801198a:	f7ff bd71 	b.w	8011470 <_ZdlPv>
 801198e:	4770      	bx	lr

08011990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011990:	b508      	push	{r3, lr}
 8011992:	4603      	mov	r3, r0
 8011994:	4608      	mov	r0, r1
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	4611      	mov	r1, r2
 801199a:	4298      	cmp	r0, r3
 801199c:	d903      	bls.n	80119a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 801199e:	4602      	mov	r2, r0
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80119a2:	f7ff ff10 	bl	80117c6 <_ZSt24__throw_out_of_range_fmtPKcz>
 80119a6:	bd08      	pop	{r3, pc}
 80119a8:	08017a34 	.word	0x08017a34

080119ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80119ac:	6840      	ldr	r0, [r0, #4]
 80119ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80119b2:	3901      	subs	r1, #1
 80119b4:	1a09      	subs	r1, r1, r0
 80119b6:	4291      	cmp	r1, r2
 80119b8:	b508      	push	{r3, lr}
 80119ba:	d202      	bcs.n	80119c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff feff 	bl	80117c0 <_ZSt20__throw_length_errorPKc>
 80119c2:	bd08      	pop	{r3, pc}

080119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80119c4:	2a01      	cmp	r2, #1
 80119c6:	b510      	push	{r4, lr}
 80119c8:	d102      	bne.n	80119d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80119ca:	780a      	ldrb	r2, [r1, #0]
 80119cc:	7002      	strb	r2, [r0, #0]
 80119ce:	bd10      	pop	{r4, pc}
 80119d0:	f7ff ffaf 	bl	8011932 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80119d4:	e7fb      	b.n	80119ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080119d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80119d6:	2a01      	cmp	r2, #1
 80119d8:	b430      	push	{r4, r5}
 80119da:	d103      	bne.n	80119e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80119dc:	780b      	ldrb	r3, [r1, #0]
 80119de:	7003      	strb	r3, [r0, #0]
 80119e0:	bc30      	pop	{r4, r5}
 80119e2:	4770      	bx	lr
 80119e4:	2a00      	cmp	r2, #0
 80119e6:	d0fb      	beq.n	80119e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80119e8:	bc30      	pop	{r4, r5}
 80119ea:	f000 be27 	b.w	801263c <memmove>

080119ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80119ee:	b508      	push	{r3, lr}
 80119f0:	1a52      	subs	r2, r2, r1
 80119f2:	f7ff ffe7 	bl	80119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80119f6:	bd08      	pop	{r3, pc}

080119f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80119f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80119fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80119fe:	461f      	mov	r7, r3
 8011a00:	6843      	ldr	r3, [r0, #4]
 8011a02:	eb01 0802 	add.w	r8, r1, r2
 8011a06:	1ab2      	subs	r2, r6, r2
 8011a08:	441a      	add	r2, r3
 8011a0a:	eba3 0908 	sub.w	r9, r3, r8
 8011a0e:	4603      	mov	r3, r0
 8011a10:	9201      	str	r2, [sp, #4]
 8011a12:	f853 2b08 	ldr.w	r2, [r3], #8
 8011a16:	460d      	mov	r5, r1
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	bf0c      	ite	eq
 8011a1c:	220f      	moveq	r2, #15
 8011a1e:	6882      	ldrne	r2, [r0, #8]
 8011a20:	a901      	add	r1, sp, #4
 8011a22:	4604      	mov	r4, r0
 8011a24:	f7ff ff8a 	bl	801193c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011a28:	4682      	mov	sl, r0
 8011a2a:	b11d      	cbz	r5, 8011a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8011a2c:	462a      	mov	r2, r5
 8011a2e:	6821      	ldr	r1, [r4, #0]
 8011a30:	f7ff ffc8 	bl	80119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011a34:	b137      	cbz	r7, 8011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8011a36:	b12e      	cbz	r6, 8011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8011a38:	4632      	mov	r2, r6
 8011a3a:	4639      	mov	r1, r7
 8011a3c:	eb0a 0005 	add.w	r0, sl, r5
 8011a40:	f7ff ffc0 	bl	80119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011a44:	f1b9 0f00 	cmp.w	r9, #0
 8011a48:	d007      	beq.n	8011a5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 8011a4a:	6821      	ldr	r1, [r4, #0]
 8011a4c:	4435      	add	r5, r6
 8011a4e:	464a      	mov	r2, r9
 8011a50:	4441      	add	r1, r8
 8011a52:	eb0a 0005 	add.w	r0, sl, r5
 8011a56:	f7ff ffb5 	bl	80119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f7ff ff90 	bl	8011980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011a60:	9b01      	ldr	r3, [sp, #4]
 8011a62:	f8c4 a000 	str.w	sl, [r4]
 8011a66:	60a3      	str	r3, [r4, #8]
 8011a68:	b002      	add	sp, #8
 8011a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8011a6e:	b538      	push	{r3, r4, r5, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	4615      	mov	r5, r2
 8011a74:	4608      	mov	r0, r1
 8011a76:	4411      	add	r1, r2
 8011a78:	6862      	ldr	r2, [r4, #4]
 8011a7a:	1a52      	subs	r2, r2, r1
 8011a7c:	d005      	beq.n	8011a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8011a7e:	b125      	cbz	r5, 8011a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8011a80:	6823      	ldr	r3, [r4, #0]
 8011a82:	4419      	add	r1, r3
 8011a84:	4418      	add	r0, r3
 8011a86:	f7ff ffa6 	bl	80119d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011a8a:	6862      	ldr	r2, [r4, #4]
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	1b55      	subs	r5, r2, r5
 8011a90:	2200      	movs	r2, #0
 8011a92:	6065      	str	r5, [r4, #4]
 8011a94:	555a      	strb	r2, [r3, r5]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}

08011a98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8011a98:	f100 0208 	add.w	r2, r0, #8
 8011a9c:	6002      	str	r2, [r0, #0]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	6042      	str	r2, [r0, #4]
 8011aa2:	7202      	strb	r2, [r0, #8]
 8011aa4:	4770      	bx	lr

08011aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011aa6:	b510      	push	{r4, lr}
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	f7ff ff69 	bl	8011980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011aae:	4620      	mov	r0, r4
 8011ab0:	bd10      	pop	{r4, pc}

08011ab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011ab2:	6840      	ldr	r0, [r0, #4]
 8011ab4:	4770      	bx	lr

08011ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	6802      	ldr	r2, [r0, #0]
 8011aba:	6043      	str	r3, [r0, #4]
 8011abc:	7013      	strb	r3, [r2, #0]
 8011abe:	4770      	bx	lr

08011ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	4616      	mov	r6, r2
 8011ac4:	4a0c      	ldr	r2, [pc, #48]	; (8011af8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	460d      	mov	r5, r1
 8011aca:	f7ff ff61 	bl	8011990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011ace:	1c73      	adds	r3, r6, #1
 8011ad0:	d105      	bne.n	8011ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	6823      	ldr	r3, [r4, #0]
 8011ad6:	6065      	str	r5, [r4, #4]
 8011ad8:	555a      	strb	r2, [r3, r5]
 8011ada:	4620      	mov	r0, r4
 8011adc:	bd70      	pop	{r4, r5, r6, pc}
 8011ade:	2e00      	cmp	r6, #0
 8011ae0:	d0fb      	beq.n	8011ada <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8011ae2:	6862      	ldr	r2, [r4, #4]
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	1b52      	subs	r2, r2, r5
 8011ae8:	42b2      	cmp	r2, r6
 8011aea:	bf28      	it	cs
 8011aec:	4632      	movcs	r2, r6
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff ffbd 	bl	8011a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8011af4:	e7f1      	b.n	8011ada <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8011af6:	bf00      	nop
 8011af8:	08017a6b 	.word	0x08017a6b

08011afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8011afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011afe:	4604      	mov	r4, r0
 8011b00:	4623      	mov	r3, r4
 8011b02:	f853 6b08 	ldr.w	r6, [r3], #8
 8011b06:	6840      	ldr	r0, [r0, #4]
 8011b08:	429e      	cmp	r6, r3
 8011b0a:	bf0c      	ite	eq
 8011b0c:	230f      	moveq	r3, #15
 8011b0e:	68a3      	ldrne	r3, [r4, #8]
 8011b10:	1885      	adds	r5, r0, r2
 8011b12:	429d      	cmp	r5, r3
 8011b14:	d80a      	bhi.n	8011b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8011b16:	b112      	cbz	r2, 8011b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8011b18:	4430      	add	r0, r6
 8011b1a:	f7ff ff53 	bl	80119c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011b1e:	2200      	movs	r2, #0
 8011b20:	4620      	mov	r0, r4
 8011b22:	6823      	ldr	r3, [r4, #0]
 8011b24:	6065      	str	r5, [r4, #4]
 8011b26:	555a      	strb	r2, [r3, r5]
 8011b28:	b002      	add	sp, #8
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	9200      	str	r2, [sp, #0]
 8011b30:	4601      	mov	r1, r0
 8011b32:	2200      	movs	r2, #0
 8011b34:	4620      	mov	r0, r4
 8011b36:	f7ff ff5f 	bl	80119f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011b3a:	e7f0      	b.n	8011b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08011b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4608      	mov	r0, r1
 8011b42:	460d      	mov	r5, r1
 8011b44:	f7ee fb1c 	bl	8000180 <strlen>
 8011b48:	4606      	mov	r6, r0
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	2100      	movs	r1, #0
 8011b4e:	4620      	mov	r0, r4
 8011b50:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8011b52:	f7ff ff2b 	bl	80119ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011b56:	4632      	mov	r2, r6
 8011b58:	4629      	mov	r1, r5
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	f7ff ffce 	bl	8011afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
 8011b62:	bf00      	nop
 8011b64:	08017a7f 	.word	0x08017a7f

08011b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8011b68:	b508      	push	{r3, lr}
 8011b6a:	f7ff ffe7 	bl	8011b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8011b6e:	bd08      	pop	{r3, pc}

08011b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011b70:	6800      	ldr	r0, [r0, #0]
 8011b72:	4770      	bx	lr

08011b74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8011b74:	b513      	push	{r0, r1, r4, lr}
 8011b76:	f88d 1007 	strb.w	r1, [sp, #7]
 8011b7a:	6841      	ldr	r1, [r0, #4]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	428a      	cmp	r2, r1
 8011b80:	d20a      	bcs.n	8011b98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8011b82:	6804      	ldr	r4, [r0, #0]
 8011b84:	f10d 0207 	add.w	r2, sp, #7
 8011b88:	1ac9      	subs	r1, r1, r3
 8011b8a:	18e0      	adds	r0, r4, r3
 8011b8c:	f7ff fec9 	bl	8011922 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8011b90:	b110      	cbz	r0, 8011b98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8011b92:	1b00      	subs	r0, r0, r4
 8011b94:	b002      	add	sp, #8
 8011b96:	bd10      	pop	{r4, pc}
 8011b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9c:	e7fa      	b.n	8011b94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>
	...

08011ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	4616      	mov	r6, r2
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	b919      	cbnz	r1, 8011bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011baa:	b112      	cbz	r2, 8011bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011bac:	480d      	ldr	r0, [pc, #52]	; (8011be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8011bae:	f7ff fe04 	bl	80117ba <_ZSt19__throw_logic_errorPKc>
 8011bb2:	1b73      	subs	r3, r6, r5
 8011bb4:	2b0f      	cmp	r3, #15
 8011bb6:	9301      	str	r3, [sp, #4]
 8011bb8:	d907      	bls.n	8011bca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	a901      	add	r1, sp, #4
 8011bc0:	f7ff febc 	bl	801193c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011bc4:	9b01      	ldr	r3, [sp, #4]
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	60a3      	str	r3, [r4, #8]
 8011bca:	4632      	mov	r2, r6
 8011bcc:	4629      	mov	r1, r5
 8011bce:	6820      	ldr	r0, [r4, #0]
 8011bd0:	f7ff ff0d 	bl	80119ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	9b01      	ldr	r3, [sp, #4]
 8011bd8:	6822      	ldr	r2, [r4, #0]
 8011bda:	6063      	str	r3, [r4, #4]
 8011bdc:	54d1      	strb	r1, [r2, r3]
 8011bde:	b002      	add	sp, #8
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	bf00      	nop
 8011be4:	08017a94 	.word	0x08017a94

08011be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8011be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bec:	460d      	mov	r5, r1
 8011bee:	4617      	mov	r7, r2
 8011bf0:	4698      	mov	r8, r3
 8011bf2:	f100 0308 	add.w	r3, r0, #8
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4639      	mov	r1, r7
 8011bfa:	6003      	str	r3, [r0, #0]
 8011bfc:	4a0a      	ldr	r2, [pc, #40]	; (8011c28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f7ff fec6 	bl	8011990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011c04:	682e      	ldr	r6, [r5, #0]
 8011c06:	686a      	ldr	r2, [r5, #4]
 8011c08:	1831      	adds	r1, r6, r0
 8011c0a:	1bd2      	subs	r2, r2, r7
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f04f 0300 	mov.w	r3, #0
 8011c12:	4542      	cmp	r2, r8
 8011c14:	bf94      	ite	ls
 8011c16:	188a      	addls	r2, r1, r2
 8011c18:	eb01 0208 	addhi.w	r2, r1, r8
 8011c1c:	f7ff ffc0 	bl	8011ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011c20:	4620      	mov	r0, r4
 8011c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c26:	bf00      	nop
 8011c28:	08017abe 	.word	0x08017abe

08011c2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8011c2c:	b570      	push	{r4, r5, r6, lr}
 8011c2e:	460d      	mov	r5, r1
 8011c30:	4604      	mov	r4, r0
 8011c32:	4611      	mov	r1, r2
 8011c34:	4628      	mov	r0, r5
 8011c36:	4a06      	ldr	r2, [pc, #24]	; (8011c50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8011c38:	461e      	mov	r6, r3
 8011c3a:	f7ff fea9 	bl	8011990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011c3e:	4633      	mov	r3, r6
 8011c40:	4602      	mov	r2, r0
 8011c42:	4629      	mov	r1, r5
 8011c44:	4620      	mov	r0, r4
 8011c46:	f7ff ffcf 	bl	8011be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	bd70      	pop	{r4, r5, r6, pc}
 8011c4e:	bf00      	nop
 8011c50:	08017ad9 	.word	0x08017ad9

08011c54 <_ZSt15get_new_handlerv>:
 8011c54:	4b02      	ldr	r3, [pc, #8]	; (8011c60 <_ZSt15get_new_handlerv+0xc>)
 8011c56:	6818      	ldr	r0, [r3, #0]
 8011c58:	f3bf 8f5b 	dmb	ish
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	200009c4 	.word	0x200009c4
 8011c64:	00000000 	.word	0x00000000

08011c68 <atan>:
 8011c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	4bb6      	ldr	r3, [pc, #728]	; (8011f48 <atan+0x2e0>)
 8011c6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011c72:	429e      	cmp	r6, r3
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	468b      	mov	fp, r1
 8011c7a:	dd17      	ble.n	8011cac <atan+0x44>
 8011c7c:	4bb3      	ldr	r3, [pc, #716]	; (8011f4c <atan+0x2e4>)
 8011c7e:	429e      	cmp	r6, r3
 8011c80:	dc01      	bgt.n	8011c86 <atan+0x1e>
 8011c82:	d109      	bne.n	8011c98 <atan+0x30>
 8011c84:	b140      	cbz	r0, 8011c98 <atan+0x30>
 8011c86:	4622      	mov	r2, r4
 8011c88:	462b      	mov	r3, r5
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	f7ee fa85 	bl	800019c <__adddf3>
 8011c92:	4604      	mov	r4, r0
 8011c94:	460d      	mov	r5, r1
 8011c96:	e005      	b.n	8011ca4 <atan+0x3c>
 8011c98:	f1bb 0f00 	cmp.w	fp, #0
 8011c9c:	4cac      	ldr	r4, [pc, #688]	; (8011f50 <atan+0x2e8>)
 8011c9e:	f300 8121 	bgt.w	8011ee4 <atan+0x27c>
 8011ca2:	4dac      	ldr	r5, [pc, #688]	; (8011f54 <atan+0x2ec>)
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cac:	4baa      	ldr	r3, [pc, #680]	; (8011f58 <atan+0x2f0>)
 8011cae:	429e      	cmp	r6, r3
 8011cb0:	dc11      	bgt.n	8011cd6 <atan+0x6e>
 8011cb2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011cb6:	429e      	cmp	r6, r3
 8011cb8:	dc0a      	bgt.n	8011cd0 <atan+0x68>
 8011cba:	a38b      	add	r3, pc, #556	; (adr r3, 8011ee8 <atan+0x280>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fa6c 	bl	800019c <__adddf3>
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4ba5      	ldr	r3, [pc, #660]	; (8011f5c <atan+0x2f4>)
 8011cc8:	f7ee feae 	bl	8000a28 <__aeabi_dcmpgt>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d1e9      	bne.n	8011ca4 <atan+0x3c>
 8011cd0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011cd4:	e027      	b.n	8011d26 <atan+0xbe>
 8011cd6:	f000 f951 	bl	8011f7c <fabs>
 8011cda:	4ba1      	ldr	r3, [pc, #644]	; (8011f60 <atan+0x2f8>)
 8011cdc:	4604      	mov	r4, r0
 8011cde:	429e      	cmp	r6, r3
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	f300 80b8 	bgt.w	8011e56 <atan+0x1ee>
 8011ce6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011cea:	429e      	cmp	r6, r3
 8011cec:	f300 809c 	bgt.w	8011e28 <atan+0x1c0>
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	f7ee fa52 	bl	800019c <__adddf3>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	4b98      	ldr	r3, [pc, #608]	; (8011f5c <atan+0x2f4>)
 8011cfc:	f7ee fa4c 	bl	8000198 <__aeabi_dsub>
 8011d00:	2200      	movs	r2, #0
 8011d02:	4606      	mov	r6, r0
 8011d04:	460f      	mov	r7, r1
 8011d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	f7ee fa45 	bl	800019c <__adddf3>
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	f7ee fd1f 	bl	800075c <__aeabi_ddiv>
 8011d1e:	f04f 0a00 	mov.w	sl, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	460d      	mov	r5, r1
 8011d26:	4622      	mov	r2, r4
 8011d28:	462b      	mov	r3, r5
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	4629      	mov	r1, r5
 8011d2e:	f7ee fbeb 	bl	8000508 <__aeabi_dmul>
 8011d32:	4602      	mov	r2, r0
 8011d34:	460b      	mov	r3, r1
 8011d36:	4680      	mov	r8, r0
 8011d38:	4689      	mov	r9, r1
 8011d3a:	f7ee fbe5 	bl	8000508 <__aeabi_dmul>
 8011d3e:	a36c      	add	r3, pc, #432	; (adr r3, 8011ef0 <atan+0x288>)
 8011d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d44:	4606      	mov	r6, r0
 8011d46:	460f      	mov	r7, r1
 8011d48:	f7ee fbde 	bl	8000508 <__aeabi_dmul>
 8011d4c:	a36a      	add	r3, pc, #424	; (adr r3, 8011ef8 <atan+0x290>)
 8011d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d52:	f7ee fa23 	bl	800019c <__adddf3>
 8011d56:	4632      	mov	r2, r6
 8011d58:	463b      	mov	r3, r7
 8011d5a:	f7ee fbd5 	bl	8000508 <__aeabi_dmul>
 8011d5e:	a368      	add	r3, pc, #416	; (adr r3, 8011f00 <atan+0x298>)
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	f7ee fa1a 	bl	800019c <__adddf3>
 8011d68:	4632      	mov	r2, r6
 8011d6a:	463b      	mov	r3, r7
 8011d6c:	f7ee fbcc 	bl	8000508 <__aeabi_dmul>
 8011d70:	a365      	add	r3, pc, #404	; (adr r3, 8011f08 <atan+0x2a0>)
 8011d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d76:	f7ee fa11 	bl	800019c <__adddf3>
 8011d7a:	4632      	mov	r2, r6
 8011d7c:	463b      	mov	r3, r7
 8011d7e:	f7ee fbc3 	bl	8000508 <__aeabi_dmul>
 8011d82:	a363      	add	r3, pc, #396	; (adr r3, 8011f10 <atan+0x2a8>)
 8011d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d88:	f7ee fa08 	bl	800019c <__adddf3>
 8011d8c:	4632      	mov	r2, r6
 8011d8e:	463b      	mov	r3, r7
 8011d90:	f7ee fbba 	bl	8000508 <__aeabi_dmul>
 8011d94:	a360      	add	r3, pc, #384	; (adr r3, 8011f18 <atan+0x2b0>)
 8011d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9a:	f7ee f9ff 	bl	800019c <__adddf3>
 8011d9e:	4642      	mov	r2, r8
 8011da0:	464b      	mov	r3, r9
 8011da2:	f7ee fbb1 	bl	8000508 <__aeabi_dmul>
 8011da6:	a35e      	add	r3, pc, #376	; (adr r3, 8011f20 <atan+0x2b8>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	4680      	mov	r8, r0
 8011dae:	4689      	mov	r9, r1
 8011db0:	4630      	mov	r0, r6
 8011db2:	4639      	mov	r1, r7
 8011db4:	f7ee fba8 	bl	8000508 <__aeabi_dmul>
 8011db8:	a35b      	add	r3, pc, #364	; (adr r3, 8011f28 <atan+0x2c0>)
 8011dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbe:	f7ee f9eb 	bl	8000198 <__aeabi_dsub>
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	f7ee fb9f 	bl	8000508 <__aeabi_dmul>
 8011dca:	a359      	add	r3, pc, #356	; (adr r3, 8011f30 <atan+0x2c8>)
 8011dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd0:	f7ee f9e2 	bl	8000198 <__aeabi_dsub>
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	463b      	mov	r3, r7
 8011dd8:	f7ee fb96 	bl	8000508 <__aeabi_dmul>
 8011ddc:	a356      	add	r3, pc, #344	; (adr r3, 8011f38 <atan+0x2d0>)
 8011dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de2:	f7ee f9d9 	bl	8000198 <__aeabi_dsub>
 8011de6:	4632      	mov	r2, r6
 8011de8:	463b      	mov	r3, r7
 8011dea:	f7ee fb8d 	bl	8000508 <__aeabi_dmul>
 8011dee:	a354      	add	r3, pc, #336	; (adr r3, 8011f40 <atan+0x2d8>)
 8011df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df4:	f7ee f9d0 	bl	8000198 <__aeabi_dsub>
 8011df8:	4632      	mov	r2, r6
 8011dfa:	463b      	mov	r3, r7
 8011dfc:	f7ee fb84 	bl	8000508 <__aeabi_dmul>
 8011e00:	4602      	mov	r2, r0
 8011e02:	460b      	mov	r3, r1
 8011e04:	4640      	mov	r0, r8
 8011e06:	4649      	mov	r1, r9
 8011e08:	f7ee f9c8 	bl	800019c <__adddf3>
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	462b      	mov	r3, r5
 8011e10:	f7ee fb7a 	bl	8000508 <__aeabi_dmul>
 8011e14:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	d144      	bne.n	8011ea8 <atan+0x240>
 8011e1e:	4620      	mov	r0, r4
 8011e20:	4629      	mov	r1, r5
 8011e22:	f7ee f9b9 	bl	8000198 <__aeabi_dsub>
 8011e26:	e734      	b.n	8011c92 <atan+0x2a>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	4b4c      	ldr	r3, [pc, #304]	; (8011f5c <atan+0x2f4>)
 8011e2c:	f7ee f9b4 	bl	8000198 <__aeabi_dsub>
 8011e30:	2200      	movs	r2, #0
 8011e32:	4606      	mov	r6, r0
 8011e34:	460f      	mov	r7, r1
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	4b48      	ldr	r3, [pc, #288]	; (8011f5c <atan+0x2f4>)
 8011e3c:	f7ee f9ae 	bl	800019c <__adddf3>
 8011e40:	4602      	mov	r2, r0
 8011e42:	460b      	mov	r3, r1
 8011e44:	4630      	mov	r0, r6
 8011e46:	4639      	mov	r1, r7
 8011e48:	f7ee fc88 	bl	800075c <__aeabi_ddiv>
 8011e4c:	f04f 0a01 	mov.w	sl, #1
 8011e50:	4604      	mov	r4, r0
 8011e52:	460d      	mov	r5, r1
 8011e54:	e767      	b.n	8011d26 <atan+0xbe>
 8011e56:	4b43      	ldr	r3, [pc, #268]	; (8011f64 <atan+0x2fc>)
 8011e58:	429e      	cmp	r6, r3
 8011e5a:	da1a      	bge.n	8011e92 <atan+0x22a>
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	4b42      	ldr	r3, [pc, #264]	; (8011f68 <atan+0x300>)
 8011e60:	f7ee f99a 	bl	8000198 <__aeabi_dsub>
 8011e64:	2200      	movs	r2, #0
 8011e66:	4606      	mov	r6, r0
 8011e68:	460f      	mov	r7, r1
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	4b3e      	ldr	r3, [pc, #248]	; (8011f68 <atan+0x300>)
 8011e70:	f7ee fb4a 	bl	8000508 <__aeabi_dmul>
 8011e74:	2200      	movs	r2, #0
 8011e76:	4b39      	ldr	r3, [pc, #228]	; (8011f5c <atan+0x2f4>)
 8011e78:	f7ee f990 	bl	800019c <__adddf3>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	460b      	mov	r3, r1
 8011e80:	4630      	mov	r0, r6
 8011e82:	4639      	mov	r1, r7
 8011e84:	f7ee fc6a 	bl	800075c <__aeabi_ddiv>
 8011e88:	f04f 0a02 	mov.w	sl, #2
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	460d      	mov	r5, r1
 8011e90:	e749      	b.n	8011d26 <atan+0xbe>
 8011e92:	4602      	mov	r2, r0
 8011e94:	460b      	mov	r3, r1
 8011e96:	2000      	movs	r0, #0
 8011e98:	4934      	ldr	r1, [pc, #208]	; (8011f6c <atan+0x304>)
 8011e9a:	f7ee fc5f 	bl	800075c <__aeabi_ddiv>
 8011e9e:	f04f 0a03 	mov.w	sl, #3
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	460d      	mov	r5, r1
 8011ea6:	e73e      	b.n	8011d26 <atan+0xbe>
 8011ea8:	4b31      	ldr	r3, [pc, #196]	; (8011f70 <atan+0x308>)
 8011eaa:	4e32      	ldr	r6, [pc, #200]	; (8011f74 <atan+0x30c>)
 8011eac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011eb0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011eb4:	e9da 2300 	ldrd	r2, r3, [sl]
 8011eb8:	f7ee f96e 	bl	8000198 <__aeabi_dsub>
 8011ebc:	4622      	mov	r2, r4
 8011ebe:	462b      	mov	r3, r5
 8011ec0:	f7ee f96a 	bl	8000198 <__aeabi_dsub>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011ecc:	f7ee f964 	bl	8000198 <__aeabi_dsub>
 8011ed0:	f1bb 0f00 	cmp.w	fp, #0
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	f6bf aee4 	bge.w	8011ca4 <atan+0x3c>
 8011edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ee0:	461d      	mov	r5, r3
 8011ee2:	e6df      	b.n	8011ca4 <atan+0x3c>
 8011ee4:	4d24      	ldr	r5, [pc, #144]	; (8011f78 <atan+0x310>)
 8011ee6:	e6dd      	b.n	8011ca4 <atan+0x3c>
 8011ee8:	8800759c 	.word	0x8800759c
 8011eec:	7e37e43c 	.word	0x7e37e43c
 8011ef0:	e322da11 	.word	0xe322da11
 8011ef4:	3f90ad3a 	.word	0x3f90ad3a
 8011ef8:	24760deb 	.word	0x24760deb
 8011efc:	3fa97b4b 	.word	0x3fa97b4b
 8011f00:	a0d03d51 	.word	0xa0d03d51
 8011f04:	3fb10d66 	.word	0x3fb10d66
 8011f08:	c54c206e 	.word	0xc54c206e
 8011f0c:	3fb745cd 	.word	0x3fb745cd
 8011f10:	920083ff 	.word	0x920083ff
 8011f14:	3fc24924 	.word	0x3fc24924
 8011f18:	5555550d 	.word	0x5555550d
 8011f1c:	3fd55555 	.word	0x3fd55555
 8011f20:	2c6a6c2f 	.word	0x2c6a6c2f
 8011f24:	bfa2b444 	.word	0xbfa2b444
 8011f28:	52defd9a 	.word	0x52defd9a
 8011f2c:	3fadde2d 	.word	0x3fadde2d
 8011f30:	af749a6d 	.word	0xaf749a6d
 8011f34:	3fb3b0f2 	.word	0x3fb3b0f2
 8011f38:	fe231671 	.word	0xfe231671
 8011f3c:	3fbc71c6 	.word	0x3fbc71c6
 8011f40:	9998ebc4 	.word	0x9998ebc4
 8011f44:	3fc99999 	.word	0x3fc99999
 8011f48:	440fffff 	.word	0x440fffff
 8011f4c:	7ff00000 	.word	0x7ff00000
 8011f50:	54442d18 	.word	0x54442d18
 8011f54:	bff921fb 	.word	0xbff921fb
 8011f58:	3fdbffff 	.word	0x3fdbffff
 8011f5c:	3ff00000 	.word	0x3ff00000
 8011f60:	3ff2ffff 	.word	0x3ff2ffff
 8011f64:	40038000 	.word	0x40038000
 8011f68:	3ff80000 	.word	0x3ff80000
 8011f6c:	bff00000 	.word	0xbff00000
 8011f70:	08017b10 	.word	0x08017b10
 8011f74:	08017af0 	.word	0x08017af0
 8011f78:	3ff921fb 	.word	0x3ff921fb

08011f7c <fabs>:
 8011f7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011f80:	4770      	bx	lr

08011f82 <atan2>:
 8011f82:	f000 b865 	b.w	8012050 <__ieee754_atan2>
	...

08011f88 <fmod>:
 8011f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f8c:	461f      	mov	r7, r3
 8011f8e:	4680      	mov	r8, r0
 8011f90:	4689      	mov	r9, r1
 8011f92:	4616      	mov	r6, r2
 8011f94:	f000 f92e 	bl	80121f4 <__ieee754_fmod>
 8011f98:	4b15      	ldr	r3, [pc, #84]	; (8011ff0 <fmod+0x68>)
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8011fa0:	460d      	mov	r5, r1
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	d020      	beq.n	8011fe8 <fmod+0x60>
 8011fa6:	4632      	mov	r2, r6
 8011fa8:	463b      	mov	r3, r7
 8011faa:	4630      	mov	r0, r6
 8011fac:	4639      	mov	r1, r7
 8011fae:	f7ee fd45 	bl	8000a3c <__aeabi_dcmpun>
 8011fb2:	b9c8      	cbnz	r0, 8011fe8 <fmod+0x60>
 8011fb4:	4642      	mov	r2, r8
 8011fb6:	464b      	mov	r3, r9
 8011fb8:	4640      	mov	r0, r8
 8011fba:	4649      	mov	r1, r9
 8011fbc:	f7ee fd3e 	bl	8000a3c <__aeabi_dcmpun>
 8011fc0:	b990      	cbnz	r0, 8011fe8 <fmod+0x60>
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	4639      	mov	r1, r7
 8011fca:	f7ee fd05 	bl	80009d8 <__aeabi_dcmpeq>
 8011fce:	b158      	cbz	r0, 8011fe8 <fmod+0x60>
 8011fd0:	f000 fade 	bl	8012590 <__errno>
 8011fd4:	2321      	movs	r3, #33	; 0x21
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	6003      	str	r3, [r0, #0]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	4610      	mov	r0, r2
 8011fde:	4619      	mov	r1, r3
 8011fe0:	f7ee fbbc 	bl	800075c <__aeabi_ddiv>
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	4620      	mov	r0, r4
 8011fea:	4629      	mov	r1, r5
 8011fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ff0:	2000022a 	.word	0x2000022a

08011ff4 <sqrt>:
 8011ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	460f      	mov	r7, r1
 8011ffa:	f000 fa0d 	bl	8012418 <__ieee754_sqrt>
 8011ffe:	4b12      	ldr	r3, [pc, #72]	; (8012048 <sqrt+0x54>)
 8012000:	4604      	mov	r4, r0
 8012002:	f993 3000 	ldrsb.w	r3, [r3]
 8012006:	460d      	mov	r5, r1
 8012008:	3301      	adds	r3, #1
 801200a:	d019      	beq.n	8012040 <sqrt+0x4c>
 801200c:	4632      	mov	r2, r6
 801200e:	463b      	mov	r3, r7
 8012010:	4630      	mov	r0, r6
 8012012:	4639      	mov	r1, r7
 8012014:	f7ee fd12 	bl	8000a3c <__aeabi_dcmpun>
 8012018:	b990      	cbnz	r0, 8012040 <sqrt+0x4c>
 801201a:	2200      	movs	r2, #0
 801201c:	2300      	movs	r3, #0
 801201e:	4630      	mov	r0, r6
 8012020:	4639      	mov	r1, r7
 8012022:	f7ee fce3 	bl	80009ec <__aeabi_dcmplt>
 8012026:	b158      	cbz	r0, 8012040 <sqrt+0x4c>
 8012028:	f000 fab2 	bl	8012590 <__errno>
 801202c:	2321      	movs	r3, #33	; 0x21
 801202e:	2200      	movs	r2, #0
 8012030:	6003      	str	r3, [r0, #0]
 8012032:	2300      	movs	r3, #0
 8012034:	4610      	mov	r0, r2
 8012036:	4619      	mov	r1, r3
 8012038:	f7ee fb90 	bl	800075c <__aeabi_ddiv>
 801203c:	4604      	mov	r4, r0
 801203e:	460d      	mov	r5, r1
 8012040:	4620      	mov	r0, r4
 8012042:	4629      	mov	r1, r5
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	bf00      	nop
 8012048:	2000022a 	.word	0x2000022a
 801204c:	00000000 	.word	0x00000000

08012050 <__ieee754_atan2>:
 8012050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012054:	4692      	mov	sl, r2
 8012056:	4699      	mov	r9, r3
 8012058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801205c:	461f      	mov	r7, r3
 801205e:	f1ca 0300 	rsb	r3, sl, #0
 8012062:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80121f0 <__ieee754_atan2+0x1a0>
 8012066:	ea43 030a 	orr.w	r3, r3, sl
 801206a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801206e:	4573      	cmp	r3, lr
 8012070:	4604      	mov	r4, r0
 8012072:	460d      	mov	r5, r1
 8012074:	d808      	bhi.n	8012088 <__ieee754_atan2+0x38>
 8012076:	4246      	negs	r6, r0
 8012078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801207c:	4306      	orrs	r6, r0
 801207e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8012082:	4576      	cmp	r6, lr
 8012084:	468c      	mov	ip, r1
 8012086:	d908      	bls.n	801209a <__ieee754_atan2+0x4a>
 8012088:	4652      	mov	r2, sl
 801208a:	464b      	mov	r3, r9
 801208c:	4620      	mov	r0, r4
 801208e:	4629      	mov	r1, r5
 8012090:	f7ee f884 	bl	800019c <__adddf3>
 8012094:	4604      	mov	r4, r0
 8012096:	460d      	mov	r5, r1
 8012098:	e019      	b.n	80120ce <__ieee754_atan2+0x7e>
 801209a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 801209e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80120a2:	ea56 060a 	orrs.w	r6, r6, sl
 80120a6:	d103      	bne.n	80120b0 <__ieee754_atan2+0x60>
 80120a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	f7ff bddc 	b.w	8011c68 <atan>
 80120b0:	17be      	asrs	r6, r7, #30
 80120b2:	f006 0602 	and.w	r6, r6, #2
 80120b6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80120ba:	ea53 0100 	orrs.w	r1, r3, r0
 80120be:	d10a      	bne.n	80120d6 <__ieee754_atan2+0x86>
 80120c0:	2e02      	cmp	r6, #2
 80120c2:	d067      	beq.n	8012194 <__ieee754_atan2+0x144>
 80120c4:	2e03      	cmp	r6, #3
 80120c6:	d102      	bne.n	80120ce <__ieee754_atan2+0x7e>
 80120c8:	a53b      	add	r5, pc, #236	; (adr r5, 80121b8 <__ieee754_atan2+0x168>)
 80120ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80120ce:	4620      	mov	r0, r4
 80120d0:	4629      	mov	r1, r5
 80120d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d6:	ea52 010a 	orrs.w	r1, r2, sl
 80120da:	d106      	bne.n	80120ea <__ieee754_atan2+0x9a>
 80120dc:	f1bc 0f00 	cmp.w	ip, #0
 80120e0:	da63      	bge.n	80121aa <__ieee754_atan2+0x15a>
 80120e2:	a537      	add	r5, pc, #220	; (adr r5, 80121c0 <__ieee754_atan2+0x170>)
 80120e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80120e8:	e7f1      	b.n	80120ce <__ieee754_atan2+0x7e>
 80120ea:	4572      	cmp	r2, lr
 80120ec:	d10f      	bne.n	801210e <__ieee754_atan2+0xbe>
 80120ee:	4293      	cmp	r3, r2
 80120f0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80120f4:	d107      	bne.n	8012106 <__ieee754_atan2+0xb6>
 80120f6:	2e02      	cmp	r6, #2
 80120f8:	d850      	bhi.n	801219c <__ieee754_atan2+0x14c>
 80120fa:	4b3b      	ldr	r3, [pc, #236]	; (80121e8 <__ieee754_atan2+0x198>)
 80120fc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012100:	e9d6 4500 	ldrd	r4, r5, [r6]
 8012104:	e7e3      	b.n	80120ce <__ieee754_atan2+0x7e>
 8012106:	2e02      	cmp	r6, #2
 8012108:	d84c      	bhi.n	80121a4 <__ieee754_atan2+0x154>
 801210a:	4b38      	ldr	r3, [pc, #224]	; (80121ec <__ieee754_atan2+0x19c>)
 801210c:	e7f6      	b.n	80120fc <__ieee754_atan2+0xac>
 801210e:	4573      	cmp	r3, lr
 8012110:	d0e4      	beq.n	80120dc <__ieee754_atan2+0x8c>
 8012112:	1a9b      	subs	r3, r3, r2
 8012114:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012118:	ea4f 5223 	mov.w	r2, r3, asr #20
 801211c:	da20      	bge.n	8012160 <__ieee754_atan2+0x110>
 801211e:	2f00      	cmp	r7, #0
 8012120:	da01      	bge.n	8012126 <__ieee754_atan2+0xd6>
 8012122:	323c      	adds	r2, #60	; 0x3c
 8012124:	db20      	blt.n	8012168 <__ieee754_atan2+0x118>
 8012126:	4652      	mov	r2, sl
 8012128:	464b      	mov	r3, r9
 801212a:	4620      	mov	r0, r4
 801212c:	4629      	mov	r1, r5
 801212e:	f7ee fb15 	bl	800075c <__aeabi_ddiv>
 8012132:	f7ff ff23 	bl	8011f7c <fabs>
 8012136:	f7ff fd97 	bl	8011c68 <atan>
 801213a:	4604      	mov	r4, r0
 801213c:	460d      	mov	r5, r1
 801213e:	2e01      	cmp	r6, #1
 8012140:	d015      	beq.n	801216e <__ieee754_atan2+0x11e>
 8012142:	2e02      	cmp	r6, #2
 8012144:	d017      	beq.n	8012176 <__ieee754_atan2+0x126>
 8012146:	2e00      	cmp	r6, #0
 8012148:	d0c1      	beq.n	80120ce <__ieee754_atan2+0x7e>
 801214a:	a31f      	add	r3, pc, #124	; (adr r3, 80121c8 <__ieee754_atan2+0x178>)
 801214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012150:	4620      	mov	r0, r4
 8012152:	4629      	mov	r1, r5
 8012154:	f7ee f820 	bl	8000198 <__aeabi_dsub>
 8012158:	a31d      	add	r3, pc, #116	; (adr r3, 80121d0 <__ieee754_atan2+0x180>)
 801215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215e:	e016      	b.n	801218e <__ieee754_atan2+0x13e>
 8012160:	a51d      	add	r5, pc, #116	; (adr r5, 80121d8 <__ieee754_atan2+0x188>)
 8012162:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012166:	e7ea      	b.n	801213e <__ieee754_atan2+0xee>
 8012168:	2400      	movs	r4, #0
 801216a:	2500      	movs	r5, #0
 801216c:	e7e7      	b.n	801213e <__ieee754_atan2+0xee>
 801216e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012172:	461d      	mov	r5, r3
 8012174:	e7ab      	b.n	80120ce <__ieee754_atan2+0x7e>
 8012176:	a314      	add	r3, pc, #80	; (adr r3, 80121c8 <__ieee754_atan2+0x178>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	4620      	mov	r0, r4
 801217e:	4629      	mov	r1, r5
 8012180:	f7ee f80a 	bl	8000198 <__aeabi_dsub>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	a111      	add	r1, pc, #68	; (adr r1, 80121d0 <__ieee754_atan2+0x180>)
 801218a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801218e:	f7ee f803 	bl	8000198 <__aeabi_dsub>
 8012192:	e77f      	b.n	8012094 <__ieee754_atan2+0x44>
 8012194:	a50e      	add	r5, pc, #56	; (adr r5, 80121d0 <__ieee754_atan2+0x180>)
 8012196:	e9d5 4500 	ldrd	r4, r5, [r5]
 801219a:	e798      	b.n	80120ce <__ieee754_atan2+0x7e>
 801219c:	a510      	add	r5, pc, #64	; (adr r5, 80121e0 <__ieee754_atan2+0x190>)
 801219e:	e9d5 4500 	ldrd	r4, r5, [r5]
 80121a2:	e794      	b.n	80120ce <__ieee754_atan2+0x7e>
 80121a4:	2400      	movs	r4, #0
 80121a6:	2500      	movs	r5, #0
 80121a8:	e791      	b.n	80120ce <__ieee754_atan2+0x7e>
 80121aa:	a50b      	add	r5, pc, #44	; (adr r5, 80121d8 <__ieee754_atan2+0x188>)
 80121ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80121b0:	e78d      	b.n	80120ce <__ieee754_atan2+0x7e>
 80121b2:	bf00      	nop
 80121b4:	f3af 8000 	nop.w
 80121b8:	54442d18 	.word	0x54442d18
 80121bc:	c00921fb 	.word	0xc00921fb
 80121c0:	54442d18 	.word	0x54442d18
 80121c4:	bff921fb 	.word	0xbff921fb
 80121c8:	33145c07 	.word	0x33145c07
 80121cc:	3ca1a626 	.word	0x3ca1a626
 80121d0:	54442d18 	.word	0x54442d18
 80121d4:	400921fb 	.word	0x400921fb
 80121d8:	54442d18 	.word	0x54442d18
 80121dc:	3ff921fb 	.word	0x3ff921fb
 80121e0:	54442d18 	.word	0x54442d18
 80121e4:	3fe921fb 	.word	0x3fe921fb
 80121e8:	08017b30 	.word	0x08017b30
 80121ec:	08017b48 	.word	0x08017b48
 80121f0:	7ff00000 	.word	0x7ff00000

080121f4 <__ieee754_fmod>:
 80121f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f8:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80121fc:	4607      	mov	r7, r0
 80121fe:	461d      	mov	r5, r3
 8012200:	4618      	mov	r0, r3
 8012202:	ea58 0302 	orrs.w	r3, r8, r2
 8012206:	460e      	mov	r6, r1
 8012208:	4614      	mov	r4, r2
 801220a:	4694      	mov	ip, r2
 801220c:	4696      	mov	lr, r2
 801220e:	d00d      	beq.n	801222c <__ieee754_fmod+0x38>
 8012210:	4a7b      	ldr	r2, [pc, #492]	; (8012400 <__ieee754_fmod+0x20c>)
 8012212:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012216:	4293      	cmp	r3, r2
 8012218:	468a      	mov	sl, r1
 801221a:	dc07      	bgt.n	801222c <__ieee754_fmod+0x38>
 801221c:	4262      	negs	r2, r4
 801221e:	4979      	ldr	r1, [pc, #484]	; (8012404 <__ieee754_fmod+0x210>)
 8012220:	4322      	orrs	r2, r4
 8012222:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8012226:	428a      	cmp	r2, r1
 8012228:	460a      	mov	r2, r1
 801222a:	d90c      	bls.n	8012246 <__ieee754_fmod+0x52>
 801222c:	4603      	mov	r3, r0
 801222e:	4622      	mov	r2, r4
 8012230:	4638      	mov	r0, r7
 8012232:	4631      	mov	r1, r6
 8012234:	f7ee f968 	bl	8000508 <__aeabi_dmul>
 8012238:	4602      	mov	r2, r0
 801223a:	460b      	mov	r3, r1
 801223c:	f7ee fa8e 	bl	800075c <__aeabi_ddiv>
 8012240:	4607      	mov	r7, r0
 8012242:	460e      	mov	r6, r1
 8012244:	e00f      	b.n	8012266 <__ieee754_fmod+0x72>
 8012246:	4543      	cmp	r3, r8
 8012248:	46b9      	mov	r9, r7
 801224a:	4639      	mov	r1, r7
 801224c:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 8012250:	dc0d      	bgt.n	801226e <__ieee754_fmod+0x7a>
 8012252:	db08      	blt.n	8012266 <__ieee754_fmod+0x72>
 8012254:	4567      	cmp	r7, ip
 8012256:	d306      	bcc.n	8012266 <__ieee754_fmod+0x72>
 8012258:	d109      	bne.n	801226e <__ieee754_fmod+0x7a>
 801225a:	4a6b      	ldr	r2, [pc, #428]	; (8012408 <__ieee754_fmod+0x214>)
 801225c:	0fe4      	lsrs	r4, r4, #31
 801225e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8012262:	e9d4 7600 	ldrd	r7, r6, [r4]
 8012266:	4638      	mov	r0, r7
 8012268:	4631      	mov	r1, r6
 801226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226e:	ea1a 0f02 	tst.w	sl, r2
 8012272:	d14a      	bne.n	801230a <__ieee754_fmod+0x116>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d141      	bne.n	80122fc <__ieee754_fmod+0x108>
 8012278:	464a      	mov	r2, r9
 801227a:	4864      	ldr	r0, [pc, #400]	; (801240c <__ieee754_fmod+0x218>)
 801227c:	2a00      	cmp	r2, #0
 801227e:	dc3a      	bgt.n	80122f6 <__ieee754_fmod+0x102>
 8012280:	4a60      	ldr	r2, [pc, #384]	; (8012404 <__ieee754_fmod+0x210>)
 8012282:	402a      	ands	r2, r5
 8012284:	2a00      	cmp	r2, #0
 8012286:	d14f      	bne.n	8012328 <__ieee754_fmod+0x134>
 8012288:	f1b8 0f00 	cmp.w	r8, #0
 801228c:	d144      	bne.n	8012318 <__ieee754_fmod+0x124>
 801228e:	4666      	mov	r6, ip
 8012290:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012294:	2e00      	cmp	r6, #0
 8012296:	dc3c      	bgt.n	8012312 <__ieee754_fmod+0x11e>
 8012298:	4e5d      	ldr	r6, [pc, #372]	; (8012410 <__ieee754_fmod+0x21c>)
 801229a:	42b0      	cmp	r0, r6
 801229c:	db49      	blt.n	8012332 <__ieee754_fmod+0x13e>
 801229e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80122a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122a6:	4e5a      	ldr	r6, [pc, #360]	; (8012410 <__ieee754_fmod+0x21c>)
 80122a8:	42b2      	cmp	r2, r6
 80122aa:	db54      	blt.n	8012356 <__ieee754_fmod+0x162>
 80122ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80122b0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80122b4:	1a80      	subs	r0, r0, r2
 80122b6:	1b5e      	subs	r6, r3, r5
 80122b8:	eba1 070e 	sub.w	r7, r1, lr
 80122bc:	2800      	cmp	r0, #0
 80122be:	d161      	bne.n	8012384 <__ieee754_fmod+0x190>
 80122c0:	4571      	cmp	r1, lr
 80122c2:	bf38      	it	cc
 80122c4:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 80122c8:	2e00      	cmp	r6, #0
 80122ca:	bfa4      	itt	ge
 80122cc:	4639      	movge	r1, r7
 80122ce:	4633      	movge	r3, r6
 80122d0:	ea53 0001 	orrs.w	r0, r3, r1
 80122d4:	d0c1      	beq.n	801225a <__ieee754_fmod+0x66>
 80122d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80122da:	db68      	blt.n	80123ae <__ieee754_fmod+0x1ba>
 80122dc:	484c      	ldr	r0, [pc, #304]	; (8012410 <__ieee754_fmod+0x21c>)
 80122de:	4282      	cmp	r2, r0
 80122e0:	db6b      	blt.n	80123ba <__ieee754_fmod+0x1c6>
 80122e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80122e6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80122ea:	431c      	orrs	r4, r3
 80122ec:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 80122f0:	460f      	mov	r7, r1
 80122f2:	464e      	mov	r6, r9
 80122f4:	e7b7      	b.n	8012266 <__ieee754_fmod+0x72>
 80122f6:	3801      	subs	r0, #1
 80122f8:	0052      	lsls	r2, r2, #1
 80122fa:	e7bf      	b.n	801227c <__ieee754_fmod+0x88>
 80122fc:	4844      	ldr	r0, [pc, #272]	; (8012410 <__ieee754_fmod+0x21c>)
 80122fe:	02da      	lsls	r2, r3, #11
 8012300:	2a00      	cmp	r2, #0
 8012302:	ddbd      	ble.n	8012280 <__ieee754_fmod+0x8c>
 8012304:	3801      	subs	r0, #1
 8012306:	0052      	lsls	r2, r2, #1
 8012308:	e7fa      	b.n	8012300 <__ieee754_fmod+0x10c>
 801230a:	1518      	asrs	r0, r3, #20
 801230c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012310:	e7b6      	b.n	8012280 <__ieee754_fmod+0x8c>
 8012312:	3a01      	subs	r2, #1
 8012314:	0076      	lsls	r6, r6, #1
 8012316:	e7bd      	b.n	8012294 <__ieee754_fmod+0xa0>
 8012318:	4a3d      	ldr	r2, [pc, #244]	; (8012410 <__ieee754_fmod+0x21c>)
 801231a:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 801231e:	2e00      	cmp	r6, #0
 8012320:	ddba      	ble.n	8012298 <__ieee754_fmod+0xa4>
 8012322:	3a01      	subs	r2, #1
 8012324:	0076      	lsls	r6, r6, #1
 8012326:	e7fa      	b.n	801231e <__ieee754_fmod+0x12a>
 8012328:	ea4f 5228 	mov.w	r2, r8, asr #20
 801232c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012330:	e7b2      	b.n	8012298 <__ieee754_fmod+0xa4>
 8012332:	1a31      	subs	r1, r6, r0
 8012334:	291f      	cmp	r1, #31
 8012336:	dc08      	bgt.n	801234a <__ieee754_fmod+0x156>
 8012338:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 801233c:	408b      	lsls	r3, r1
 801233e:	fa29 f606 	lsr.w	r6, r9, r6
 8012342:	4333      	orrs	r3, r6
 8012344:	fa09 f101 	lsl.w	r1, r9, r1
 8012348:	e7ad      	b.n	80122a6 <__ieee754_fmod+0xb2>
 801234a:	4b32      	ldr	r3, [pc, #200]	; (8012414 <__ieee754_fmod+0x220>)
 801234c:	2100      	movs	r1, #0
 801234e:	1a1b      	subs	r3, r3, r0
 8012350:	fa09 f303 	lsl.w	r3, r9, r3
 8012354:	e7a7      	b.n	80122a6 <__ieee754_fmod+0xb2>
 8012356:	eba6 0e02 	sub.w	lr, r6, r2
 801235a:	f1be 0f1f 	cmp.w	lr, #31
 801235e:	dc0a      	bgt.n	8012376 <__ieee754_fmod+0x182>
 8012360:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8012364:	fa08 f80e 	lsl.w	r8, r8, lr
 8012368:	fa2c f505 	lsr.w	r5, ip, r5
 801236c:	ea45 0508 	orr.w	r5, r5, r8
 8012370:	fa0c fe0e 	lsl.w	lr, ip, lr
 8012374:	e79e      	b.n	80122b4 <__ieee754_fmod+0xc0>
 8012376:	4d27      	ldr	r5, [pc, #156]	; (8012414 <__ieee754_fmod+0x220>)
 8012378:	f04f 0e00 	mov.w	lr, #0
 801237c:	1aad      	subs	r5, r5, r2
 801237e:	fa0c f505 	lsl.w	r5, ip, r5
 8012382:	e797      	b.n	80122b4 <__ieee754_fmod+0xc0>
 8012384:	4571      	cmp	r1, lr
 8012386:	bf38      	it	cc
 8012388:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 801238c:	2e00      	cmp	r6, #0
 801238e:	da05      	bge.n	801239c <__ieee754_fmod+0x1a8>
 8012390:	0fce      	lsrs	r6, r1, #31
 8012392:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8012396:	0049      	lsls	r1, r1, #1
 8012398:	3801      	subs	r0, #1
 801239a:	e78c      	b.n	80122b6 <__ieee754_fmod+0xc2>
 801239c:	ea56 0307 	orrs.w	r3, r6, r7
 80123a0:	f43f af5b 	beq.w	801225a <__ieee754_fmod+0x66>
 80123a4:	0ffb      	lsrs	r3, r7, #31
 80123a6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80123aa:	0079      	lsls	r1, r7, #1
 80123ac:	e7f4      	b.n	8012398 <__ieee754_fmod+0x1a4>
 80123ae:	0fc8      	lsrs	r0, r1, #31
 80123b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80123b4:	0049      	lsls	r1, r1, #1
 80123b6:	3a01      	subs	r2, #1
 80123b8:	e78d      	b.n	80122d6 <__ieee754_fmod+0xe2>
 80123ba:	1a80      	subs	r0, r0, r2
 80123bc:	2814      	cmp	r0, #20
 80123be:	dc0a      	bgt.n	80123d6 <__ieee754_fmod+0x1e2>
 80123c0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80123c4:	fa03 f202 	lsl.w	r2, r3, r2
 80123c8:	40c1      	lsrs	r1, r0
 80123ca:	430a      	orrs	r2, r1
 80123cc:	4103      	asrs	r3, r0
 80123ce:	4610      	mov	r0, r2
 80123d0:	ea43 0104 	orr.w	r1, r3, r4
 80123d4:	e734      	b.n	8012240 <__ieee754_fmod+0x4c>
 80123d6:	281f      	cmp	r0, #31
 80123d8:	dc07      	bgt.n	80123ea <__ieee754_fmod+0x1f6>
 80123da:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80123de:	40c1      	lsrs	r1, r0
 80123e0:	fa03 f202 	lsl.w	r2, r3, r2
 80123e4:	430a      	orrs	r2, r1
 80123e6:	4623      	mov	r3, r4
 80123e8:	e7f1      	b.n	80123ce <__ieee754_fmod+0x1da>
 80123ea:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80123ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80123f2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80123f6:	32e2      	adds	r2, #226	; 0xe2
 80123f8:	fa43 f202 	asr.w	r2, r3, r2
 80123fc:	e7f3      	b.n	80123e6 <__ieee754_fmod+0x1f2>
 80123fe:	bf00      	nop
 8012400:	7fefffff 	.word	0x7fefffff
 8012404:	7ff00000 	.word	0x7ff00000
 8012408:	08017b60 	.word	0x08017b60
 801240c:	fffffbed 	.word	0xfffffbed
 8012410:	fffffc02 	.word	0xfffffc02
 8012414:	fffffbe2 	.word	0xfffffbe2

08012418 <__ieee754_sqrt>:
 8012418:	f8df c150 	ldr.w	ip, [pc, #336]	; 801256c <__ieee754_sqrt+0x154>
 801241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012420:	ea3c 0c01 	bics.w	ip, ip, r1
 8012424:	460b      	mov	r3, r1
 8012426:	4606      	mov	r6, r0
 8012428:	460d      	mov	r5, r1
 801242a:	460a      	mov	r2, r1
 801242c:	4607      	mov	r7, r0
 801242e:	4604      	mov	r4, r0
 8012430:	d10e      	bne.n	8012450 <__ieee754_sqrt+0x38>
 8012432:	4602      	mov	r2, r0
 8012434:	f7ee f868 	bl	8000508 <__aeabi_dmul>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4630      	mov	r0, r6
 801243e:	4629      	mov	r1, r5
 8012440:	f7ed feac 	bl	800019c <__adddf3>
 8012444:	4606      	mov	r6, r0
 8012446:	460d      	mov	r5, r1
 8012448:	4630      	mov	r0, r6
 801244a:	4629      	mov	r1, r5
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	2900      	cmp	r1, #0
 8012452:	dc0d      	bgt.n	8012470 <__ieee754_sqrt+0x58>
 8012454:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8012458:	ea5c 0707 	orrs.w	r7, ip, r7
 801245c:	d0f4      	beq.n	8012448 <__ieee754_sqrt+0x30>
 801245e:	b139      	cbz	r1, 8012470 <__ieee754_sqrt+0x58>
 8012460:	4602      	mov	r2, r0
 8012462:	f7ed fe99 	bl	8000198 <__aeabi_dsub>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	f7ee f977 	bl	800075c <__aeabi_ddiv>
 801246e:	e7e9      	b.n	8012444 <__ieee754_sqrt+0x2c>
 8012470:	1512      	asrs	r2, r2, #20
 8012472:	d074      	beq.n	801255e <__ieee754_sqrt+0x146>
 8012474:	2000      	movs	r0, #0
 8012476:	07d5      	lsls	r5, r2, #31
 8012478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801247c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8012480:	bf5e      	ittt	pl
 8012482:	0fe3      	lsrpl	r3, r4, #31
 8012484:	0064      	lslpl	r4, r4, #1
 8012486:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 801248a:	0fe3      	lsrs	r3, r4, #31
 801248c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012490:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012494:	2516      	movs	r5, #22
 8012496:	4601      	mov	r1, r0
 8012498:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801249c:	1076      	asrs	r6, r6, #1
 801249e:	0064      	lsls	r4, r4, #1
 80124a0:	188f      	adds	r7, r1, r2
 80124a2:	429f      	cmp	r7, r3
 80124a4:	bfde      	ittt	le
 80124a6:	1bdb      	suble	r3, r3, r7
 80124a8:	18b9      	addle	r1, r7, r2
 80124aa:	1880      	addle	r0, r0, r2
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	3d01      	subs	r5, #1
 80124b0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80124b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80124b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80124bc:	d1f0      	bne.n	80124a0 <__ieee754_sqrt+0x88>
 80124be:	462a      	mov	r2, r5
 80124c0:	f04f 0e20 	mov.w	lr, #32
 80124c4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80124c8:	428b      	cmp	r3, r1
 80124ca:	eb07 0c05 	add.w	ip, r7, r5
 80124ce:	dc02      	bgt.n	80124d6 <__ieee754_sqrt+0xbe>
 80124d0:	d113      	bne.n	80124fa <__ieee754_sqrt+0xe2>
 80124d2:	45a4      	cmp	ip, r4
 80124d4:	d811      	bhi.n	80124fa <__ieee754_sqrt+0xe2>
 80124d6:	f1bc 0f00 	cmp.w	ip, #0
 80124da:	eb0c 0507 	add.w	r5, ip, r7
 80124de:	da43      	bge.n	8012568 <__ieee754_sqrt+0x150>
 80124e0:	2d00      	cmp	r5, #0
 80124e2:	db41      	blt.n	8012568 <__ieee754_sqrt+0x150>
 80124e4:	f101 0801 	add.w	r8, r1, #1
 80124e8:	1a5b      	subs	r3, r3, r1
 80124ea:	4641      	mov	r1, r8
 80124ec:	45a4      	cmp	ip, r4
 80124ee:	bf88      	it	hi
 80124f0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80124f4:	eba4 040c 	sub.w	r4, r4, ip
 80124f8:	443a      	add	r2, r7
 80124fa:	005b      	lsls	r3, r3, #1
 80124fc:	f1be 0e01 	subs.w	lr, lr, #1
 8012500:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8012504:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8012508:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801250c:	d1dc      	bne.n	80124c8 <__ieee754_sqrt+0xb0>
 801250e:	4323      	orrs	r3, r4
 8012510:	d006      	beq.n	8012520 <__ieee754_sqrt+0x108>
 8012512:	1c54      	adds	r4, r2, #1
 8012514:	bf0b      	itete	eq
 8012516:	4672      	moveq	r2, lr
 8012518:	3201      	addne	r2, #1
 801251a:	3001      	addeq	r0, #1
 801251c:	f022 0201 	bicne.w	r2, r2, #1
 8012520:	1043      	asrs	r3, r0, #1
 8012522:	07c1      	lsls	r1, r0, #31
 8012524:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012528:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801252c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012530:	bf48      	it	mi
 8012532:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012536:	4610      	mov	r0, r2
 8012538:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801253c:	e782      	b.n	8012444 <__ieee754_sqrt+0x2c>
 801253e:	0ae3      	lsrs	r3, r4, #11
 8012540:	3915      	subs	r1, #21
 8012542:	0564      	lsls	r4, r4, #21
 8012544:	2b00      	cmp	r3, #0
 8012546:	d0fa      	beq.n	801253e <__ieee754_sqrt+0x126>
 8012548:	02de      	lsls	r6, r3, #11
 801254a:	d50a      	bpl.n	8012562 <__ieee754_sqrt+0x14a>
 801254c:	f1c2 0020 	rsb	r0, r2, #32
 8012550:	fa24 f000 	lsr.w	r0, r4, r0
 8012554:	1e55      	subs	r5, r2, #1
 8012556:	4094      	lsls	r4, r2
 8012558:	4303      	orrs	r3, r0
 801255a:	1b4a      	subs	r2, r1, r5
 801255c:	e78a      	b.n	8012474 <__ieee754_sqrt+0x5c>
 801255e:	4611      	mov	r1, r2
 8012560:	e7f0      	b.n	8012544 <__ieee754_sqrt+0x12c>
 8012562:	005b      	lsls	r3, r3, #1
 8012564:	3201      	adds	r2, #1
 8012566:	e7ef      	b.n	8012548 <__ieee754_sqrt+0x130>
 8012568:	4688      	mov	r8, r1
 801256a:	e7bd      	b.n	80124e8 <__ieee754_sqrt+0xd0>
 801256c:	7ff00000 	.word	0x7ff00000

08012570 <abort>:
 8012570:	2006      	movs	r0, #6
 8012572:	b508      	push	{r3, lr}
 8012574:	f000 ffe6 	bl	8013544 <raise>
 8012578:	2001      	movs	r0, #1
 801257a:	f7f1 fe4c 	bl	8004216 <_exit>
	...

08012580 <calloc>:
 8012580:	4b02      	ldr	r3, [pc, #8]	; (801258c <calloc+0xc>)
 8012582:	460a      	mov	r2, r1
 8012584:	4601      	mov	r1, r0
 8012586:	6818      	ldr	r0, [r3, #0]
 8012588:	f000 b87a 	b.w	8012680 <_calloc_r>
 801258c:	2000022c 	.word	0x2000022c

08012590 <__errno>:
 8012590:	4b01      	ldr	r3, [pc, #4]	; (8012598 <__errno+0x8>)
 8012592:	6818      	ldr	r0, [r3, #0]
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	2000022c 	.word	0x2000022c

0801259c <__libc_init_array>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	2600      	movs	r6, #0
 80125a0:	4d0c      	ldr	r5, [pc, #48]	; (80125d4 <__libc_init_array+0x38>)
 80125a2:	4c0d      	ldr	r4, [pc, #52]	; (80125d8 <__libc_init_array+0x3c>)
 80125a4:	1b64      	subs	r4, r4, r5
 80125a6:	10a4      	asrs	r4, r4, #2
 80125a8:	42a6      	cmp	r6, r4
 80125aa:	d109      	bne.n	80125c0 <__libc_init_array+0x24>
 80125ac:	f005 f880 	bl	80176b0 <_init>
 80125b0:	2600      	movs	r6, #0
 80125b2:	4d0a      	ldr	r5, [pc, #40]	; (80125dc <__libc_init_array+0x40>)
 80125b4:	4c0a      	ldr	r4, [pc, #40]	; (80125e0 <__libc_init_array+0x44>)
 80125b6:	1b64      	subs	r4, r4, r5
 80125b8:	10a4      	asrs	r4, r4, #2
 80125ba:	42a6      	cmp	r6, r4
 80125bc:	d105      	bne.n	80125ca <__libc_init_array+0x2e>
 80125be:	bd70      	pop	{r4, r5, r6, pc}
 80125c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80125c4:	4798      	blx	r3
 80125c6:	3601      	adds	r6, #1
 80125c8:	e7ee      	b.n	80125a8 <__libc_init_array+0xc>
 80125ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80125ce:	4798      	blx	r3
 80125d0:	3601      	adds	r6, #1
 80125d2:	e7f2      	b.n	80125ba <__libc_init_array+0x1e>
 80125d4:	08018044 	.word	0x08018044
 80125d8:	08018044 	.word	0x08018044
 80125dc:	08018044 	.word	0x08018044
 80125e0:	08018050 	.word	0x08018050

080125e4 <malloc>:
 80125e4:	4b02      	ldr	r3, [pc, #8]	; (80125f0 <malloc+0xc>)
 80125e6:	4601      	mov	r1, r0
 80125e8:	6818      	ldr	r0, [r3, #0]
 80125ea:	f000 b8a3 	b.w	8012734 <_malloc_r>
 80125ee:	bf00      	nop
 80125f0:	2000022c 	.word	0x2000022c

080125f4 <free>:
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <free+0xc>)
 80125f6:	4601      	mov	r1, r0
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	f000 b84f 	b.w	801269c <_free_r>
 80125fe:	bf00      	nop
 8012600:	2000022c 	.word	0x2000022c

08012604 <memchr>:
 8012604:	4603      	mov	r3, r0
 8012606:	b510      	push	{r4, lr}
 8012608:	b2c9      	uxtb	r1, r1
 801260a:	4402      	add	r2, r0
 801260c:	4293      	cmp	r3, r2
 801260e:	4618      	mov	r0, r3
 8012610:	d101      	bne.n	8012616 <memchr+0x12>
 8012612:	2000      	movs	r0, #0
 8012614:	e003      	b.n	801261e <memchr+0x1a>
 8012616:	7804      	ldrb	r4, [r0, #0]
 8012618:	3301      	adds	r3, #1
 801261a:	428c      	cmp	r4, r1
 801261c:	d1f6      	bne.n	801260c <memchr+0x8>
 801261e:	bd10      	pop	{r4, pc}

08012620 <memcpy>:
 8012620:	440a      	add	r2, r1
 8012622:	4291      	cmp	r1, r2
 8012624:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012628:	d100      	bne.n	801262c <memcpy+0xc>
 801262a:	4770      	bx	lr
 801262c:	b510      	push	{r4, lr}
 801262e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012632:	4291      	cmp	r1, r2
 8012634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012638:	d1f9      	bne.n	801262e <memcpy+0xe>
 801263a:	bd10      	pop	{r4, pc}

0801263c <memmove>:
 801263c:	4288      	cmp	r0, r1
 801263e:	b510      	push	{r4, lr}
 8012640:	eb01 0402 	add.w	r4, r1, r2
 8012644:	d902      	bls.n	801264c <memmove+0x10>
 8012646:	4284      	cmp	r4, r0
 8012648:	4623      	mov	r3, r4
 801264a:	d807      	bhi.n	801265c <memmove+0x20>
 801264c:	1e43      	subs	r3, r0, #1
 801264e:	42a1      	cmp	r1, r4
 8012650:	d008      	beq.n	8012664 <memmove+0x28>
 8012652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012656:	f803 2f01 	strb.w	r2, [r3, #1]!
 801265a:	e7f8      	b.n	801264e <memmove+0x12>
 801265c:	4601      	mov	r1, r0
 801265e:	4402      	add	r2, r0
 8012660:	428a      	cmp	r2, r1
 8012662:	d100      	bne.n	8012666 <memmove+0x2a>
 8012664:	bd10      	pop	{r4, pc}
 8012666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801266a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801266e:	e7f7      	b.n	8012660 <memmove+0x24>

08012670 <memset>:
 8012670:	4603      	mov	r3, r0
 8012672:	4402      	add	r2, r0
 8012674:	4293      	cmp	r3, r2
 8012676:	d100      	bne.n	801267a <memset+0xa>
 8012678:	4770      	bx	lr
 801267a:	f803 1b01 	strb.w	r1, [r3], #1
 801267e:	e7f9      	b.n	8012674 <memset+0x4>

08012680 <_calloc_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	fb02 f501 	mul.w	r5, r2, r1
 8012686:	4629      	mov	r1, r5
 8012688:	f000 f854 	bl	8012734 <_malloc_r>
 801268c:	4604      	mov	r4, r0
 801268e:	b118      	cbz	r0, 8012698 <_calloc_r+0x18>
 8012690:	462a      	mov	r2, r5
 8012692:	2100      	movs	r1, #0
 8012694:	f7ff ffec 	bl	8012670 <memset>
 8012698:	4620      	mov	r0, r4
 801269a:	bd38      	pop	{r3, r4, r5, pc}

0801269c <_free_r>:
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4605      	mov	r5, r0
 80126a0:	2900      	cmp	r1, #0
 80126a2:	d043      	beq.n	801272c <_free_r+0x90>
 80126a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126a8:	1f0c      	subs	r4, r1, #4
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	bfb8      	it	lt
 80126ae:	18e4      	addlt	r4, r4, r3
 80126b0:	f003 f8e6 	bl	8015880 <__malloc_lock>
 80126b4:	4a1e      	ldr	r2, [pc, #120]	; (8012730 <_free_r+0x94>)
 80126b6:	6813      	ldr	r3, [r2, #0]
 80126b8:	4610      	mov	r0, r2
 80126ba:	b933      	cbnz	r3, 80126ca <_free_r+0x2e>
 80126bc:	6063      	str	r3, [r4, #4]
 80126be:	6014      	str	r4, [r2, #0]
 80126c0:	4628      	mov	r0, r5
 80126c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126c6:	f003 b8e1 	b.w	801588c <__malloc_unlock>
 80126ca:	42a3      	cmp	r3, r4
 80126cc:	d90a      	bls.n	80126e4 <_free_r+0x48>
 80126ce:	6821      	ldr	r1, [r4, #0]
 80126d0:	1862      	adds	r2, r4, r1
 80126d2:	4293      	cmp	r3, r2
 80126d4:	bf01      	itttt	eq
 80126d6:	681a      	ldreq	r2, [r3, #0]
 80126d8:	685b      	ldreq	r3, [r3, #4]
 80126da:	1852      	addeq	r2, r2, r1
 80126dc:	6022      	streq	r2, [r4, #0]
 80126de:	6063      	str	r3, [r4, #4]
 80126e0:	6004      	str	r4, [r0, #0]
 80126e2:	e7ed      	b.n	80126c0 <_free_r+0x24>
 80126e4:	461a      	mov	r2, r3
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	b10b      	cbz	r3, 80126ee <_free_r+0x52>
 80126ea:	42a3      	cmp	r3, r4
 80126ec:	d9fa      	bls.n	80126e4 <_free_r+0x48>
 80126ee:	6811      	ldr	r1, [r2, #0]
 80126f0:	1850      	adds	r0, r2, r1
 80126f2:	42a0      	cmp	r0, r4
 80126f4:	d10b      	bne.n	801270e <_free_r+0x72>
 80126f6:	6820      	ldr	r0, [r4, #0]
 80126f8:	4401      	add	r1, r0
 80126fa:	1850      	adds	r0, r2, r1
 80126fc:	4283      	cmp	r3, r0
 80126fe:	6011      	str	r1, [r2, #0]
 8012700:	d1de      	bne.n	80126c0 <_free_r+0x24>
 8012702:	6818      	ldr	r0, [r3, #0]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	4401      	add	r1, r0
 8012708:	6011      	str	r1, [r2, #0]
 801270a:	6053      	str	r3, [r2, #4]
 801270c:	e7d8      	b.n	80126c0 <_free_r+0x24>
 801270e:	d902      	bls.n	8012716 <_free_r+0x7a>
 8012710:	230c      	movs	r3, #12
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	e7d4      	b.n	80126c0 <_free_r+0x24>
 8012716:	6820      	ldr	r0, [r4, #0]
 8012718:	1821      	adds	r1, r4, r0
 801271a:	428b      	cmp	r3, r1
 801271c:	bf01      	itttt	eq
 801271e:	6819      	ldreq	r1, [r3, #0]
 8012720:	685b      	ldreq	r3, [r3, #4]
 8012722:	1809      	addeq	r1, r1, r0
 8012724:	6021      	streq	r1, [r4, #0]
 8012726:	6063      	str	r3, [r4, #4]
 8012728:	6054      	str	r4, [r2, #4]
 801272a:	e7c9      	b.n	80126c0 <_free_r+0x24>
 801272c:	bd38      	pop	{r3, r4, r5, pc}
 801272e:	bf00      	nop
 8012730:	200009c8 	.word	0x200009c8

08012734 <_malloc_r>:
 8012734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012736:	1ccd      	adds	r5, r1, #3
 8012738:	f025 0503 	bic.w	r5, r5, #3
 801273c:	3508      	adds	r5, #8
 801273e:	2d0c      	cmp	r5, #12
 8012740:	bf38      	it	cc
 8012742:	250c      	movcc	r5, #12
 8012744:	2d00      	cmp	r5, #0
 8012746:	4606      	mov	r6, r0
 8012748:	db01      	blt.n	801274e <_malloc_r+0x1a>
 801274a:	42a9      	cmp	r1, r5
 801274c:	d903      	bls.n	8012756 <_malloc_r+0x22>
 801274e:	230c      	movs	r3, #12
 8012750:	6033      	str	r3, [r6, #0]
 8012752:	2000      	movs	r0, #0
 8012754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012756:	f003 f893 	bl	8015880 <__malloc_lock>
 801275a:	4921      	ldr	r1, [pc, #132]	; (80127e0 <_malloc_r+0xac>)
 801275c:	680a      	ldr	r2, [r1, #0]
 801275e:	4614      	mov	r4, r2
 8012760:	b99c      	cbnz	r4, 801278a <_malloc_r+0x56>
 8012762:	4f20      	ldr	r7, [pc, #128]	; (80127e4 <_malloc_r+0xb0>)
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	b923      	cbnz	r3, 8012772 <_malloc_r+0x3e>
 8012768:	4621      	mov	r1, r4
 801276a:	4630      	mov	r0, r6
 801276c:	f000 feae 	bl	80134cc <_sbrk_r>
 8012770:	6038      	str	r0, [r7, #0]
 8012772:	4629      	mov	r1, r5
 8012774:	4630      	mov	r0, r6
 8012776:	f000 fea9 	bl	80134cc <_sbrk_r>
 801277a:	1c43      	adds	r3, r0, #1
 801277c:	d123      	bne.n	80127c6 <_malloc_r+0x92>
 801277e:	230c      	movs	r3, #12
 8012780:	4630      	mov	r0, r6
 8012782:	6033      	str	r3, [r6, #0]
 8012784:	f003 f882 	bl	801588c <__malloc_unlock>
 8012788:	e7e3      	b.n	8012752 <_malloc_r+0x1e>
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	1b5b      	subs	r3, r3, r5
 801278e:	d417      	bmi.n	80127c0 <_malloc_r+0x8c>
 8012790:	2b0b      	cmp	r3, #11
 8012792:	d903      	bls.n	801279c <_malloc_r+0x68>
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	441c      	add	r4, r3
 8012798:	6025      	str	r5, [r4, #0]
 801279a:	e004      	b.n	80127a6 <_malloc_r+0x72>
 801279c:	6863      	ldr	r3, [r4, #4]
 801279e:	42a2      	cmp	r2, r4
 80127a0:	bf0c      	ite	eq
 80127a2:	600b      	streq	r3, [r1, #0]
 80127a4:	6053      	strne	r3, [r2, #4]
 80127a6:	4630      	mov	r0, r6
 80127a8:	f003 f870 	bl	801588c <__malloc_unlock>
 80127ac:	f104 000b 	add.w	r0, r4, #11
 80127b0:	1d23      	adds	r3, r4, #4
 80127b2:	f020 0007 	bic.w	r0, r0, #7
 80127b6:	1ac2      	subs	r2, r0, r3
 80127b8:	d0cc      	beq.n	8012754 <_malloc_r+0x20>
 80127ba:	1a1b      	subs	r3, r3, r0
 80127bc:	50a3      	str	r3, [r4, r2]
 80127be:	e7c9      	b.n	8012754 <_malloc_r+0x20>
 80127c0:	4622      	mov	r2, r4
 80127c2:	6864      	ldr	r4, [r4, #4]
 80127c4:	e7cc      	b.n	8012760 <_malloc_r+0x2c>
 80127c6:	1cc4      	adds	r4, r0, #3
 80127c8:	f024 0403 	bic.w	r4, r4, #3
 80127cc:	42a0      	cmp	r0, r4
 80127ce:	d0e3      	beq.n	8012798 <_malloc_r+0x64>
 80127d0:	1a21      	subs	r1, r4, r0
 80127d2:	4630      	mov	r0, r6
 80127d4:	f000 fe7a 	bl	80134cc <_sbrk_r>
 80127d8:	3001      	adds	r0, #1
 80127da:	d1dd      	bne.n	8012798 <_malloc_r+0x64>
 80127dc:	e7cf      	b.n	801277e <_malloc_r+0x4a>
 80127de:	bf00      	nop
 80127e0:	200009c8 	.word	0x200009c8
 80127e4:	200009cc 	.word	0x200009cc

080127e8 <__cvt>:
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ee:	461f      	mov	r7, r3
 80127f0:	bfbb      	ittet	lt
 80127f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80127f6:	461f      	movlt	r7, r3
 80127f8:	2300      	movge	r3, #0
 80127fa:	232d      	movlt	r3, #45	; 0x2d
 80127fc:	b088      	sub	sp, #32
 80127fe:	4614      	mov	r4, r2
 8012800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012802:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012804:	7013      	strb	r3, [r2, #0]
 8012806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012808:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801280c:	f023 0820 	bic.w	r8, r3, #32
 8012810:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012814:	d005      	beq.n	8012822 <__cvt+0x3a>
 8012816:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801281a:	d100      	bne.n	801281e <__cvt+0x36>
 801281c:	3501      	adds	r5, #1
 801281e:	2302      	movs	r3, #2
 8012820:	e000      	b.n	8012824 <__cvt+0x3c>
 8012822:	2303      	movs	r3, #3
 8012824:	aa07      	add	r2, sp, #28
 8012826:	9204      	str	r2, [sp, #16]
 8012828:	aa06      	add	r2, sp, #24
 801282a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801282e:	e9cd 3500 	strd	r3, r5, [sp]
 8012832:	4622      	mov	r2, r4
 8012834:	463b      	mov	r3, r7
 8012836:	f001 fea7 	bl	8014588 <_dtoa_r>
 801283a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801283e:	4606      	mov	r6, r0
 8012840:	d102      	bne.n	8012848 <__cvt+0x60>
 8012842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012844:	07db      	lsls	r3, r3, #31
 8012846:	d522      	bpl.n	801288e <__cvt+0xa6>
 8012848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801284c:	eb06 0905 	add.w	r9, r6, r5
 8012850:	d110      	bne.n	8012874 <__cvt+0x8c>
 8012852:	7833      	ldrb	r3, [r6, #0]
 8012854:	2b30      	cmp	r3, #48	; 0x30
 8012856:	d10a      	bne.n	801286e <__cvt+0x86>
 8012858:	2200      	movs	r2, #0
 801285a:	2300      	movs	r3, #0
 801285c:	4620      	mov	r0, r4
 801285e:	4639      	mov	r1, r7
 8012860:	f7ee f8ba 	bl	80009d8 <__aeabi_dcmpeq>
 8012864:	b918      	cbnz	r0, 801286e <__cvt+0x86>
 8012866:	f1c5 0501 	rsb	r5, r5, #1
 801286a:	f8ca 5000 	str.w	r5, [sl]
 801286e:	f8da 3000 	ldr.w	r3, [sl]
 8012872:	4499      	add	r9, r3
 8012874:	2200      	movs	r2, #0
 8012876:	2300      	movs	r3, #0
 8012878:	4620      	mov	r0, r4
 801287a:	4639      	mov	r1, r7
 801287c:	f7ee f8ac 	bl	80009d8 <__aeabi_dcmpeq>
 8012880:	b108      	cbz	r0, 8012886 <__cvt+0x9e>
 8012882:	f8cd 901c 	str.w	r9, [sp, #28]
 8012886:	2230      	movs	r2, #48	; 0x30
 8012888:	9b07      	ldr	r3, [sp, #28]
 801288a:	454b      	cmp	r3, r9
 801288c:	d307      	bcc.n	801289e <__cvt+0xb6>
 801288e:	4630      	mov	r0, r6
 8012890:	9b07      	ldr	r3, [sp, #28]
 8012892:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012894:	1b9b      	subs	r3, r3, r6
 8012896:	6013      	str	r3, [r2, #0]
 8012898:	b008      	add	sp, #32
 801289a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801289e:	1c59      	adds	r1, r3, #1
 80128a0:	9107      	str	r1, [sp, #28]
 80128a2:	701a      	strb	r2, [r3, #0]
 80128a4:	e7f0      	b.n	8012888 <__cvt+0xa0>

080128a6 <__exponent>:
 80128a6:	4603      	mov	r3, r0
 80128a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128aa:	2900      	cmp	r1, #0
 80128ac:	f803 2b02 	strb.w	r2, [r3], #2
 80128b0:	bfb6      	itet	lt
 80128b2:	222d      	movlt	r2, #45	; 0x2d
 80128b4:	222b      	movge	r2, #43	; 0x2b
 80128b6:	4249      	neglt	r1, r1
 80128b8:	2909      	cmp	r1, #9
 80128ba:	7042      	strb	r2, [r0, #1]
 80128bc:	dd2b      	ble.n	8012916 <__exponent+0x70>
 80128be:	f10d 0407 	add.w	r4, sp, #7
 80128c2:	46a4      	mov	ip, r4
 80128c4:	270a      	movs	r7, #10
 80128c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80128ca:	460a      	mov	r2, r1
 80128cc:	46a6      	mov	lr, r4
 80128ce:	fb07 1516 	mls	r5, r7, r6, r1
 80128d2:	2a63      	cmp	r2, #99	; 0x63
 80128d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80128d8:	4631      	mov	r1, r6
 80128da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80128de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80128e2:	dcf0      	bgt.n	80128c6 <__exponent+0x20>
 80128e4:	3130      	adds	r1, #48	; 0x30
 80128e6:	f1ae 0502 	sub.w	r5, lr, #2
 80128ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80128ee:	4629      	mov	r1, r5
 80128f0:	1c44      	adds	r4, r0, #1
 80128f2:	4561      	cmp	r1, ip
 80128f4:	d30a      	bcc.n	801290c <__exponent+0x66>
 80128f6:	f10d 0209 	add.w	r2, sp, #9
 80128fa:	eba2 020e 	sub.w	r2, r2, lr
 80128fe:	4565      	cmp	r5, ip
 8012900:	bf88      	it	hi
 8012902:	2200      	movhi	r2, #0
 8012904:	4413      	add	r3, r2
 8012906:	1a18      	subs	r0, r3, r0
 8012908:	b003      	add	sp, #12
 801290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012910:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012914:	e7ed      	b.n	80128f2 <__exponent+0x4c>
 8012916:	2330      	movs	r3, #48	; 0x30
 8012918:	3130      	adds	r1, #48	; 0x30
 801291a:	7083      	strb	r3, [r0, #2]
 801291c:	70c1      	strb	r1, [r0, #3]
 801291e:	1d03      	adds	r3, r0, #4
 8012920:	e7f1      	b.n	8012906 <__exponent+0x60>
	...

08012924 <_printf_float>:
 8012924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012928:	b091      	sub	sp, #68	; 0x44
 801292a:	460c      	mov	r4, r1
 801292c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012930:	4616      	mov	r6, r2
 8012932:	461f      	mov	r7, r3
 8012934:	4605      	mov	r5, r0
 8012936:	f002 ff7b 	bl	8015830 <_localeconv_r>
 801293a:	6803      	ldr	r3, [r0, #0]
 801293c:	4618      	mov	r0, r3
 801293e:	9309      	str	r3, [sp, #36]	; 0x24
 8012940:	f7ed fc1e 	bl	8000180 <strlen>
 8012944:	2300      	movs	r3, #0
 8012946:	930e      	str	r3, [sp, #56]	; 0x38
 8012948:	f8d8 3000 	ldr.w	r3, [r8]
 801294c:	900a      	str	r0, [sp, #40]	; 0x28
 801294e:	3307      	adds	r3, #7
 8012950:	f023 0307 	bic.w	r3, r3, #7
 8012954:	f103 0208 	add.w	r2, r3, #8
 8012958:	f894 9018 	ldrb.w	r9, [r4, #24]
 801295c:	f8d4 b000 	ldr.w	fp, [r4]
 8012960:	f8c8 2000 	str.w	r2, [r8]
 8012964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012968:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801296c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012970:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012974:	930b      	str	r3, [sp, #44]	; 0x2c
 8012976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801297a:	4640      	mov	r0, r8
 801297c:	4b9c      	ldr	r3, [pc, #624]	; (8012bf0 <_printf_float+0x2cc>)
 801297e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012980:	f7ee f85c 	bl	8000a3c <__aeabi_dcmpun>
 8012984:	bb70      	cbnz	r0, 80129e4 <_printf_float+0xc0>
 8012986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801298a:	4640      	mov	r0, r8
 801298c:	4b98      	ldr	r3, [pc, #608]	; (8012bf0 <_printf_float+0x2cc>)
 801298e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012990:	f7ee f836 	bl	8000a00 <__aeabi_dcmple>
 8012994:	bb30      	cbnz	r0, 80129e4 <_printf_float+0xc0>
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	4640      	mov	r0, r8
 801299c:	4651      	mov	r1, sl
 801299e:	f7ee f825 	bl	80009ec <__aeabi_dcmplt>
 80129a2:	b110      	cbz	r0, 80129aa <_printf_float+0x86>
 80129a4:	232d      	movs	r3, #45	; 0x2d
 80129a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129aa:	4b92      	ldr	r3, [pc, #584]	; (8012bf4 <_printf_float+0x2d0>)
 80129ac:	4892      	ldr	r0, [pc, #584]	; (8012bf8 <_printf_float+0x2d4>)
 80129ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80129b2:	bf94      	ite	ls
 80129b4:	4698      	movls	r8, r3
 80129b6:	4680      	movhi	r8, r0
 80129b8:	2303      	movs	r3, #3
 80129ba:	f04f 0a00 	mov.w	sl, #0
 80129be:	6123      	str	r3, [r4, #16]
 80129c0:	f02b 0304 	bic.w	r3, fp, #4
 80129c4:	6023      	str	r3, [r4, #0]
 80129c6:	4633      	mov	r3, r6
 80129c8:	4621      	mov	r1, r4
 80129ca:	4628      	mov	r0, r5
 80129cc:	9700      	str	r7, [sp, #0]
 80129ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80129d0:	f000 f9d4 	bl	8012d7c <_printf_common>
 80129d4:	3001      	adds	r0, #1
 80129d6:	f040 8090 	bne.w	8012afa <_printf_float+0x1d6>
 80129da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129de:	b011      	add	sp, #68	; 0x44
 80129e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e4:	4642      	mov	r2, r8
 80129e6:	4653      	mov	r3, sl
 80129e8:	4640      	mov	r0, r8
 80129ea:	4651      	mov	r1, sl
 80129ec:	f7ee f826 	bl	8000a3c <__aeabi_dcmpun>
 80129f0:	b148      	cbz	r0, 8012a06 <_printf_float+0xe2>
 80129f2:	f1ba 0f00 	cmp.w	sl, #0
 80129f6:	bfb8      	it	lt
 80129f8:	232d      	movlt	r3, #45	; 0x2d
 80129fa:	4880      	ldr	r0, [pc, #512]	; (8012bfc <_printf_float+0x2d8>)
 80129fc:	bfb8      	it	lt
 80129fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a02:	4b7f      	ldr	r3, [pc, #508]	; (8012c00 <_printf_float+0x2dc>)
 8012a04:	e7d3      	b.n	80129ae <_printf_float+0x8a>
 8012a06:	6863      	ldr	r3, [r4, #4]
 8012a08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012a0c:	1c5a      	adds	r2, r3, #1
 8012a0e:	d142      	bne.n	8012a96 <_printf_float+0x172>
 8012a10:	2306      	movs	r3, #6
 8012a12:	6063      	str	r3, [r4, #4]
 8012a14:	2200      	movs	r2, #0
 8012a16:	9206      	str	r2, [sp, #24]
 8012a18:	aa0e      	add	r2, sp, #56	; 0x38
 8012a1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012a1e:	aa0d      	add	r2, sp, #52	; 0x34
 8012a20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012a24:	9203      	str	r2, [sp, #12]
 8012a26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8012a2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012a2e:	6023      	str	r3, [r4, #0]
 8012a30:	6863      	ldr	r3, [r4, #4]
 8012a32:	4642      	mov	r2, r8
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	4628      	mov	r0, r5
 8012a38:	4653      	mov	r3, sl
 8012a3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8012a3c:	f7ff fed4 	bl	80127e8 <__cvt>
 8012a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a42:	4680      	mov	r8, r0
 8012a44:	2947      	cmp	r1, #71	; 0x47
 8012a46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a48:	d108      	bne.n	8012a5c <_printf_float+0x138>
 8012a4a:	1cc8      	adds	r0, r1, #3
 8012a4c:	db02      	blt.n	8012a54 <_printf_float+0x130>
 8012a4e:	6863      	ldr	r3, [r4, #4]
 8012a50:	4299      	cmp	r1, r3
 8012a52:	dd40      	ble.n	8012ad6 <_printf_float+0x1b2>
 8012a54:	f1a9 0902 	sub.w	r9, r9, #2
 8012a58:	fa5f f989 	uxtb.w	r9, r9
 8012a5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a60:	d81f      	bhi.n	8012aa2 <_printf_float+0x17e>
 8012a62:	464a      	mov	r2, r9
 8012a64:	3901      	subs	r1, #1
 8012a66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a6a:	910d      	str	r1, [sp, #52]	; 0x34
 8012a6c:	f7ff ff1b 	bl	80128a6 <__exponent>
 8012a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a72:	4682      	mov	sl, r0
 8012a74:	1813      	adds	r3, r2, r0
 8012a76:	2a01      	cmp	r2, #1
 8012a78:	6123      	str	r3, [r4, #16]
 8012a7a:	dc02      	bgt.n	8012a82 <_printf_float+0x15e>
 8012a7c:	6822      	ldr	r2, [r4, #0]
 8012a7e:	07d2      	lsls	r2, r2, #31
 8012a80:	d501      	bpl.n	8012a86 <_printf_float+0x162>
 8012a82:	3301      	adds	r3, #1
 8012a84:	6123      	str	r3, [r4, #16]
 8012a86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d09b      	beq.n	80129c6 <_printf_float+0xa2>
 8012a8e:	232d      	movs	r3, #45	; 0x2d
 8012a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a94:	e797      	b.n	80129c6 <_printf_float+0xa2>
 8012a96:	2947      	cmp	r1, #71	; 0x47
 8012a98:	d1bc      	bne.n	8012a14 <_printf_float+0xf0>
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d1ba      	bne.n	8012a14 <_printf_float+0xf0>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e7b7      	b.n	8012a12 <_printf_float+0xee>
 8012aa2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012aa6:	d118      	bne.n	8012ada <_printf_float+0x1b6>
 8012aa8:	2900      	cmp	r1, #0
 8012aaa:	6863      	ldr	r3, [r4, #4]
 8012aac:	dd0b      	ble.n	8012ac6 <_printf_float+0x1a2>
 8012aae:	6121      	str	r1, [r4, #16]
 8012ab0:	b913      	cbnz	r3, 8012ab8 <_printf_float+0x194>
 8012ab2:	6822      	ldr	r2, [r4, #0]
 8012ab4:	07d0      	lsls	r0, r2, #31
 8012ab6:	d502      	bpl.n	8012abe <_printf_float+0x19a>
 8012ab8:	3301      	adds	r3, #1
 8012aba:	440b      	add	r3, r1
 8012abc:	6123      	str	r3, [r4, #16]
 8012abe:	f04f 0a00 	mov.w	sl, #0
 8012ac2:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ac4:	e7df      	b.n	8012a86 <_printf_float+0x162>
 8012ac6:	b913      	cbnz	r3, 8012ace <_printf_float+0x1aa>
 8012ac8:	6822      	ldr	r2, [r4, #0]
 8012aca:	07d2      	lsls	r2, r2, #31
 8012acc:	d501      	bpl.n	8012ad2 <_printf_float+0x1ae>
 8012ace:	3302      	adds	r3, #2
 8012ad0:	e7f4      	b.n	8012abc <_printf_float+0x198>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e7f2      	b.n	8012abc <_printf_float+0x198>
 8012ad6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012adc:	4299      	cmp	r1, r3
 8012ade:	db05      	blt.n	8012aec <_printf_float+0x1c8>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	6121      	str	r1, [r4, #16]
 8012ae4:	07d8      	lsls	r0, r3, #31
 8012ae6:	d5ea      	bpl.n	8012abe <_printf_float+0x19a>
 8012ae8:	1c4b      	adds	r3, r1, #1
 8012aea:	e7e7      	b.n	8012abc <_printf_float+0x198>
 8012aec:	2900      	cmp	r1, #0
 8012aee:	bfcc      	ite	gt
 8012af0:	2201      	movgt	r2, #1
 8012af2:	f1c1 0202 	rsble	r2, r1, #2
 8012af6:	4413      	add	r3, r2
 8012af8:	e7e0      	b.n	8012abc <_printf_float+0x198>
 8012afa:	6823      	ldr	r3, [r4, #0]
 8012afc:	055a      	lsls	r2, r3, #21
 8012afe:	d407      	bmi.n	8012b10 <_printf_float+0x1ec>
 8012b00:	6923      	ldr	r3, [r4, #16]
 8012b02:	4642      	mov	r2, r8
 8012b04:	4631      	mov	r1, r6
 8012b06:	4628      	mov	r0, r5
 8012b08:	47b8      	blx	r7
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	d12b      	bne.n	8012b66 <_printf_float+0x242>
 8012b0e:	e764      	b.n	80129da <_printf_float+0xb6>
 8012b10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012b14:	f240 80dd 	bls.w	8012cd2 <_printf_float+0x3ae>
 8012b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2300      	movs	r3, #0
 8012b20:	f7ed ff5a 	bl	80009d8 <__aeabi_dcmpeq>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d033      	beq.n	8012b90 <_printf_float+0x26c>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	4631      	mov	r1, r6
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	4a35      	ldr	r2, [pc, #212]	; (8012c04 <_printf_float+0x2e0>)
 8012b30:	47b8      	blx	r7
 8012b32:	3001      	adds	r0, #1
 8012b34:	f43f af51 	beq.w	80129da <_printf_float+0xb6>
 8012b38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	db02      	blt.n	8012b46 <_printf_float+0x222>
 8012b40:	6823      	ldr	r3, [r4, #0]
 8012b42:	07d8      	lsls	r0, r3, #31
 8012b44:	d50f      	bpl.n	8012b66 <_printf_float+0x242>
 8012b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	f43f af42 	beq.w	80129da <_printf_float+0xb6>
 8012b56:	f04f 0800 	mov.w	r8, #0
 8012b5a:	f104 091a 	add.w	r9, r4, #26
 8012b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b60:	3b01      	subs	r3, #1
 8012b62:	4543      	cmp	r3, r8
 8012b64:	dc09      	bgt.n	8012b7a <_printf_float+0x256>
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	079b      	lsls	r3, r3, #30
 8012b6a:	f100 8102 	bmi.w	8012d72 <_printf_float+0x44e>
 8012b6e:	68e0      	ldr	r0, [r4, #12]
 8012b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b72:	4298      	cmp	r0, r3
 8012b74:	bfb8      	it	lt
 8012b76:	4618      	movlt	r0, r3
 8012b78:	e731      	b.n	80129de <_printf_float+0xba>
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	464a      	mov	r2, r9
 8012b7e:	4631      	mov	r1, r6
 8012b80:	4628      	mov	r0, r5
 8012b82:	47b8      	blx	r7
 8012b84:	3001      	adds	r0, #1
 8012b86:	f43f af28 	beq.w	80129da <_printf_float+0xb6>
 8012b8a:	f108 0801 	add.w	r8, r8, #1
 8012b8e:	e7e6      	b.n	8012b5e <_printf_float+0x23a>
 8012b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	dc38      	bgt.n	8012c08 <_printf_float+0x2e4>
 8012b96:	2301      	movs	r3, #1
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	4a19      	ldr	r2, [pc, #100]	; (8012c04 <_printf_float+0x2e0>)
 8012b9e:	47b8      	blx	r7
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	f43f af1a 	beq.w	80129da <_printf_float+0xb6>
 8012ba6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012baa:	4313      	orrs	r3, r2
 8012bac:	d102      	bne.n	8012bb4 <_printf_float+0x290>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	07d9      	lsls	r1, r3, #31
 8012bb2:	d5d8      	bpl.n	8012b66 <_printf_float+0x242>
 8012bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bb8:	4631      	mov	r1, r6
 8012bba:	4628      	mov	r0, r5
 8012bbc:	47b8      	blx	r7
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	f43f af0b 	beq.w	80129da <_printf_float+0xb6>
 8012bc4:	f04f 0900 	mov.w	r9, #0
 8012bc8:	f104 0a1a 	add.w	sl, r4, #26
 8012bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bce:	425b      	negs	r3, r3
 8012bd0:	454b      	cmp	r3, r9
 8012bd2:	dc01      	bgt.n	8012bd8 <_printf_float+0x2b4>
 8012bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bd6:	e794      	b.n	8012b02 <_printf_float+0x1de>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	4652      	mov	r2, sl
 8012bdc:	4631      	mov	r1, r6
 8012bde:	4628      	mov	r0, r5
 8012be0:	47b8      	blx	r7
 8012be2:	3001      	adds	r0, #1
 8012be4:	f43f aef9 	beq.w	80129da <_printf_float+0xb6>
 8012be8:	f109 0901 	add.w	r9, r9, #1
 8012bec:	e7ee      	b.n	8012bcc <_printf_float+0x2a8>
 8012bee:	bf00      	nop
 8012bf0:	7fefffff 	.word	0x7fefffff
 8012bf4:	08017b74 	.word	0x08017b74
 8012bf8:	08017b78 	.word	0x08017b78
 8012bfc:	08017b80 	.word	0x08017b80
 8012c00:	08017b7c 	.word	0x08017b7c
 8012c04:	08017f89 	.word	0x08017f89
 8012c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	bfa8      	it	ge
 8012c10:	461a      	movge	r2, r3
 8012c12:	2a00      	cmp	r2, #0
 8012c14:	4691      	mov	r9, r2
 8012c16:	dc37      	bgt.n	8012c88 <_printf_float+0x364>
 8012c18:	f04f 0b00 	mov.w	fp, #0
 8012c1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c20:	f104 021a 	add.w	r2, r4, #26
 8012c24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012c28:	ebaa 0309 	sub.w	r3, sl, r9
 8012c2c:	455b      	cmp	r3, fp
 8012c2e:	dc33      	bgt.n	8012c98 <_printf_float+0x374>
 8012c30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012c34:	429a      	cmp	r2, r3
 8012c36:	db3b      	blt.n	8012cb0 <_printf_float+0x38c>
 8012c38:	6823      	ldr	r3, [r4, #0]
 8012c3a:	07da      	lsls	r2, r3, #31
 8012c3c:	d438      	bmi.n	8012cb0 <_printf_float+0x38c>
 8012c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012c42:	eba2 030a 	sub.w	r3, r2, sl
 8012c46:	eba2 0901 	sub.w	r9, r2, r1
 8012c4a:	4599      	cmp	r9, r3
 8012c4c:	bfa8      	it	ge
 8012c4e:	4699      	movge	r9, r3
 8012c50:	f1b9 0f00 	cmp.w	r9, #0
 8012c54:	dc34      	bgt.n	8012cc0 <_printf_float+0x39c>
 8012c56:	f04f 0800 	mov.w	r8, #0
 8012c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c5e:	f104 0a1a 	add.w	sl, r4, #26
 8012c62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012c66:	1a9b      	subs	r3, r3, r2
 8012c68:	eba3 0309 	sub.w	r3, r3, r9
 8012c6c:	4543      	cmp	r3, r8
 8012c6e:	f77f af7a 	ble.w	8012b66 <_printf_float+0x242>
 8012c72:	2301      	movs	r3, #1
 8012c74:	4652      	mov	r2, sl
 8012c76:	4631      	mov	r1, r6
 8012c78:	4628      	mov	r0, r5
 8012c7a:	47b8      	blx	r7
 8012c7c:	3001      	adds	r0, #1
 8012c7e:	f43f aeac 	beq.w	80129da <_printf_float+0xb6>
 8012c82:	f108 0801 	add.w	r8, r8, #1
 8012c86:	e7ec      	b.n	8012c62 <_printf_float+0x33e>
 8012c88:	4613      	mov	r3, r2
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	4642      	mov	r2, r8
 8012c8e:	4628      	mov	r0, r5
 8012c90:	47b8      	blx	r7
 8012c92:	3001      	adds	r0, #1
 8012c94:	d1c0      	bne.n	8012c18 <_printf_float+0x2f4>
 8012c96:	e6a0      	b.n	80129da <_printf_float+0xb6>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012ca0:	47b8      	blx	r7
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	f43f ae99 	beq.w	80129da <_printf_float+0xb6>
 8012ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012caa:	f10b 0b01 	add.w	fp, fp, #1
 8012cae:	e7b9      	b.n	8012c24 <_printf_float+0x300>
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	47b8      	blx	r7
 8012cba:	3001      	adds	r0, #1
 8012cbc:	d1bf      	bne.n	8012c3e <_printf_float+0x31a>
 8012cbe:	e68c      	b.n	80129da <_printf_float+0xb6>
 8012cc0:	464b      	mov	r3, r9
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	eb08 020a 	add.w	r2, r8, sl
 8012cca:	47b8      	blx	r7
 8012ccc:	3001      	adds	r0, #1
 8012cce:	d1c2      	bne.n	8012c56 <_printf_float+0x332>
 8012cd0:	e683      	b.n	80129da <_printf_float+0xb6>
 8012cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012cd4:	2a01      	cmp	r2, #1
 8012cd6:	dc01      	bgt.n	8012cdc <_printf_float+0x3b8>
 8012cd8:	07db      	lsls	r3, r3, #31
 8012cda:	d537      	bpl.n	8012d4c <_printf_float+0x428>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	4642      	mov	r2, r8
 8012ce0:	4631      	mov	r1, r6
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	47b8      	blx	r7
 8012ce6:	3001      	adds	r0, #1
 8012ce8:	f43f ae77 	beq.w	80129da <_printf_float+0xb6>
 8012cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cf0:	4631      	mov	r1, r6
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	47b8      	blx	r7
 8012cf6:	3001      	adds	r0, #1
 8012cf8:	f43f ae6f 	beq.w	80129da <_printf_float+0xb6>
 8012cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d00:	2200      	movs	r2, #0
 8012d02:	2300      	movs	r3, #0
 8012d04:	f7ed fe68 	bl	80009d8 <__aeabi_dcmpeq>
 8012d08:	b9d8      	cbnz	r0, 8012d42 <_printf_float+0x41e>
 8012d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d0c:	f108 0201 	add.w	r2, r8, #1
 8012d10:	3b01      	subs	r3, #1
 8012d12:	4631      	mov	r1, r6
 8012d14:	4628      	mov	r0, r5
 8012d16:	47b8      	blx	r7
 8012d18:	3001      	adds	r0, #1
 8012d1a:	d10e      	bne.n	8012d3a <_printf_float+0x416>
 8012d1c:	e65d      	b.n	80129da <_printf_float+0xb6>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	464a      	mov	r2, r9
 8012d22:	4631      	mov	r1, r6
 8012d24:	4628      	mov	r0, r5
 8012d26:	47b8      	blx	r7
 8012d28:	3001      	adds	r0, #1
 8012d2a:	f43f ae56 	beq.w	80129da <_printf_float+0xb6>
 8012d2e:	f108 0801 	add.w	r8, r8, #1
 8012d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d34:	3b01      	subs	r3, #1
 8012d36:	4543      	cmp	r3, r8
 8012d38:	dcf1      	bgt.n	8012d1e <_printf_float+0x3fa>
 8012d3a:	4653      	mov	r3, sl
 8012d3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d40:	e6e0      	b.n	8012b04 <_printf_float+0x1e0>
 8012d42:	f04f 0800 	mov.w	r8, #0
 8012d46:	f104 091a 	add.w	r9, r4, #26
 8012d4a:	e7f2      	b.n	8012d32 <_printf_float+0x40e>
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	4642      	mov	r2, r8
 8012d50:	e7df      	b.n	8012d12 <_printf_float+0x3ee>
 8012d52:	2301      	movs	r3, #1
 8012d54:	464a      	mov	r2, r9
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b8      	blx	r7
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	f43f ae3c 	beq.w	80129da <_printf_float+0xb6>
 8012d62:	f108 0801 	add.w	r8, r8, #1
 8012d66:	68e3      	ldr	r3, [r4, #12]
 8012d68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012d6a:	1a5b      	subs	r3, r3, r1
 8012d6c:	4543      	cmp	r3, r8
 8012d6e:	dcf0      	bgt.n	8012d52 <_printf_float+0x42e>
 8012d70:	e6fd      	b.n	8012b6e <_printf_float+0x24a>
 8012d72:	f04f 0800 	mov.w	r8, #0
 8012d76:	f104 0919 	add.w	r9, r4, #25
 8012d7a:	e7f4      	b.n	8012d66 <_printf_float+0x442>

08012d7c <_printf_common>:
 8012d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d80:	4616      	mov	r6, r2
 8012d82:	4699      	mov	r9, r3
 8012d84:	688a      	ldr	r2, [r1, #8]
 8012d86:	690b      	ldr	r3, [r1, #16]
 8012d88:	4607      	mov	r7, r0
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	bfb8      	it	lt
 8012d8e:	4613      	movlt	r3, r2
 8012d90:	6033      	str	r3, [r6, #0]
 8012d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d96:	460c      	mov	r4, r1
 8012d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d9c:	b10a      	cbz	r2, 8012da2 <_printf_common+0x26>
 8012d9e:	3301      	adds	r3, #1
 8012da0:	6033      	str	r3, [r6, #0]
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	0699      	lsls	r1, r3, #26
 8012da6:	bf42      	ittt	mi
 8012da8:	6833      	ldrmi	r3, [r6, #0]
 8012daa:	3302      	addmi	r3, #2
 8012dac:	6033      	strmi	r3, [r6, #0]
 8012dae:	6825      	ldr	r5, [r4, #0]
 8012db0:	f015 0506 	ands.w	r5, r5, #6
 8012db4:	d106      	bne.n	8012dc4 <_printf_common+0x48>
 8012db6:	f104 0a19 	add.w	sl, r4, #25
 8012dba:	68e3      	ldr	r3, [r4, #12]
 8012dbc:	6832      	ldr	r2, [r6, #0]
 8012dbe:	1a9b      	subs	r3, r3, r2
 8012dc0:	42ab      	cmp	r3, r5
 8012dc2:	dc28      	bgt.n	8012e16 <_printf_common+0x9a>
 8012dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012dc8:	1e13      	subs	r3, r2, #0
 8012dca:	6822      	ldr	r2, [r4, #0]
 8012dcc:	bf18      	it	ne
 8012dce:	2301      	movne	r3, #1
 8012dd0:	0692      	lsls	r2, r2, #26
 8012dd2:	d42d      	bmi.n	8012e30 <_printf_common+0xb4>
 8012dd4:	4649      	mov	r1, r9
 8012dd6:	4638      	mov	r0, r7
 8012dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ddc:	47c0      	blx	r8
 8012dde:	3001      	adds	r0, #1
 8012de0:	d020      	beq.n	8012e24 <_printf_common+0xa8>
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	68e5      	ldr	r5, [r4, #12]
 8012de6:	f003 0306 	and.w	r3, r3, #6
 8012dea:	2b04      	cmp	r3, #4
 8012dec:	bf18      	it	ne
 8012dee:	2500      	movne	r5, #0
 8012df0:	6832      	ldr	r2, [r6, #0]
 8012df2:	f04f 0600 	mov.w	r6, #0
 8012df6:	68a3      	ldr	r3, [r4, #8]
 8012df8:	bf08      	it	eq
 8012dfa:	1aad      	subeq	r5, r5, r2
 8012dfc:	6922      	ldr	r2, [r4, #16]
 8012dfe:	bf08      	it	eq
 8012e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e04:	4293      	cmp	r3, r2
 8012e06:	bfc4      	itt	gt
 8012e08:	1a9b      	subgt	r3, r3, r2
 8012e0a:	18ed      	addgt	r5, r5, r3
 8012e0c:	341a      	adds	r4, #26
 8012e0e:	42b5      	cmp	r5, r6
 8012e10:	d11a      	bne.n	8012e48 <_printf_common+0xcc>
 8012e12:	2000      	movs	r0, #0
 8012e14:	e008      	b.n	8012e28 <_printf_common+0xac>
 8012e16:	2301      	movs	r3, #1
 8012e18:	4652      	mov	r2, sl
 8012e1a:	4649      	mov	r1, r9
 8012e1c:	4638      	mov	r0, r7
 8012e1e:	47c0      	blx	r8
 8012e20:	3001      	adds	r0, #1
 8012e22:	d103      	bne.n	8012e2c <_printf_common+0xb0>
 8012e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e2c:	3501      	adds	r5, #1
 8012e2e:	e7c4      	b.n	8012dba <_printf_common+0x3e>
 8012e30:	2030      	movs	r0, #48	; 0x30
 8012e32:	18e1      	adds	r1, r4, r3
 8012e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e38:	1c5a      	adds	r2, r3, #1
 8012e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e3e:	4422      	add	r2, r4
 8012e40:	3302      	adds	r3, #2
 8012e42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e46:	e7c5      	b.n	8012dd4 <_printf_common+0x58>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	4622      	mov	r2, r4
 8012e4c:	4649      	mov	r1, r9
 8012e4e:	4638      	mov	r0, r7
 8012e50:	47c0      	blx	r8
 8012e52:	3001      	adds	r0, #1
 8012e54:	d0e6      	beq.n	8012e24 <_printf_common+0xa8>
 8012e56:	3601      	adds	r6, #1
 8012e58:	e7d9      	b.n	8012e0e <_printf_common+0x92>
	...

08012e5c <_printf_i>:
 8012e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	460c      	mov	r4, r1
 8012e62:	7e27      	ldrb	r7, [r4, #24]
 8012e64:	4691      	mov	r9, r2
 8012e66:	2f78      	cmp	r7, #120	; 0x78
 8012e68:	4680      	mov	r8, r0
 8012e6a:	469a      	mov	sl, r3
 8012e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e72:	d807      	bhi.n	8012e84 <_printf_i+0x28>
 8012e74:	2f62      	cmp	r7, #98	; 0x62
 8012e76:	d80a      	bhi.n	8012e8e <_printf_i+0x32>
 8012e78:	2f00      	cmp	r7, #0
 8012e7a:	f000 80d9 	beq.w	8013030 <_printf_i+0x1d4>
 8012e7e:	2f58      	cmp	r7, #88	; 0x58
 8012e80:	f000 80a4 	beq.w	8012fcc <_printf_i+0x170>
 8012e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e8c:	e03a      	b.n	8012f04 <_printf_i+0xa8>
 8012e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e92:	2b15      	cmp	r3, #21
 8012e94:	d8f6      	bhi.n	8012e84 <_printf_i+0x28>
 8012e96:	a001      	add	r0, pc, #4	; (adr r0, 8012e9c <_printf_i+0x40>)
 8012e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012e9c:	08012ef5 	.word	0x08012ef5
 8012ea0:	08012f09 	.word	0x08012f09
 8012ea4:	08012e85 	.word	0x08012e85
 8012ea8:	08012e85 	.word	0x08012e85
 8012eac:	08012e85 	.word	0x08012e85
 8012eb0:	08012e85 	.word	0x08012e85
 8012eb4:	08012f09 	.word	0x08012f09
 8012eb8:	08012e85 	.word	0x08012e85
 8012ebc:	08012e85 	.word	0x08012e85
 8012ec0:	08012e85 	.word	0x08012e85
 8012ec4:	08012e85 	.word	0x08012e85
 8012ec8:	08013017 	.word	0x08013017
 8012ecc:	08012f39 	.word	0x08012f39
 8012ed0:	08012ff9 	.word	0x08012ff9
 8012ed4:	08012e85 	.word	0x08012e85
 8012ed8:	08012e85 	.word	0x08012e85
 8012edc:	08013039 	.word	0x08013039
 8012ee0:	08012e85 	.word	0x08012e85
 8012ee4:	08012f39 	.word	0x08012f39
 8012ee8:	08012e85 	.word	0x08012e85
 8012eec:	08012e85 	.word	0x08012e85
 8012ef0:	08013001 	.word	0x08013001
 8012ef4:	680b      	ldr	r3, [r1, #0]
 8012ef6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012efa:	1d1a      	adds	r2, r3, #4
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	600a      	str	r2, [r1, #0]
 8012f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f04:	2301      	movs	r3, #1
 8012f06:	e0a4      	b.n	8013052 <_printf_i+0x1f6>
 8012f08:	6825      	ldr	r5, [r4, #0]
 8012f0a:	6808      	ldr	r0, [r1, #0]
 8012f0c:	062e      	lsls	r6, r5, #24
 8012f0e:	f100 0304 	add.w	r3, r0, #4
 8012f12:	d50a      	bpl.n	8012f2a <_printf_i+0xce>
 8012f14:	6805      	ldr	r5, [r0, #0]
 8012f16:	600b      	str	r3, [r1, #0]
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	da03      	bge.n	8012f24 <_printf_i+0xc8>
 8012f1c:	232d      	movs	r3, #45	; 0x2d
 8012f1e:	426d      	negs	r5, r5
 8012f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f24:	230a      	movs	r3, #10
 8012f26:	485e      	ldr	r0, [pc, #376]	; (80130a0 <_printf_i+0x244>)
 8012f28:	e019      	b.n	8012f5e <_printf_i+0x102>
 8012f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012f2e:	6805      	ldr	r5, [r0, #0]
 8012f30:	600b      	str	r3, [r1, #0]
 8012f32:	bf18      	it	ne
 8012f34:	b22d      	sxthne	r5, r5
 8012f36:	e7ef      	b.n	8012f18 <_printf_i+0xbc>
 8012f38:	680b      	ldr	r3, [r1, #0]
 8012f3a:	6825      	ldr	r5, [r4, #0]
 8012f3c:	1d18      	adds	r0, r3, #4
 8012f3e:	6008      	str	r0, [r1, #0]
 8012f40:	0628      	lsls	r0, r5, #24
 8012f42:	d501      	bpl.n	8012f48 <_printf_i+0xec>
 8012f44:	681d      	ldr	r5, [r3, #0]
 8012f46:	e002      	b.n	8012f4e <_printf_i+0xf2>
 8012f48:	0669      	lsls	r1, r5, #25
 8012f4a:	d5fb      	bpl.n	8012f44 <_printf_i+0xe8>
 8012f4c:	881d      	ldrh	r5, [r3, #0]
 8012f4e:	2f6f      	cmp	r7, #111	; 0x6f
 8012f50:	bf0c      	ite	eq
 8012f52:	2308      	moveq	r3, #8
 8012f54:	230a      	movne	r3, #10
 8012f56:	4852      	ldr	r0, [pc, #328]	; (80130a0 <_printf_i+0x244>)
 8012f58:	2100      	movs	r1, #0
 8012f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f5e:	6866      	ldr	r6, [r4, #4]
 8012f60:	2e00      	cmp	r6, #0
 8012f62:	bfa8      	it	ge
 8012f64:	6821      	ldrge	r1, [r4, #0]
 8012f66:	60a6      	str	r6, [r4, #8]
 8012f68:	bfa4      	itt	ge
 8012f6a:	f021 0104 	bicge.w	r1, r1, #4
 8012f6e:	6021      	strge	r1, [r4, #0]
 8012f70:	b90d      	cbnz	r5, 8012f76 <_printf_i+0x11a>
 8012f72:	2e00      	cmp	r6, #0
 8012f74:	d04d      	beq.n	8013012 <_printf_i+0x1b6>
 8012f76:	4616      	mov	r6, r2
 8012f78:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f7c:	fb03 5711 	mls	r7, r3, r1, r5
 8012f80:	5dc7      	ldrb	r7, [r0, r7]
 8012f82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f86:	462f      	mov	r7, r5
 8012f88:	42bb      	cmp	r3, r7
 8012f8a:	460d      	mov	r5, r1
 8012f8c:	d9f4      	bls.n	8012f78 <_printf_i+0x11c>
 8012f8e:	2b08      	cmp	r3, #8
 8012f90:	d10b      	bne.n	8012faa <_printf_i+0x14e>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	07df      	lsls	r7, r3, #31
 8012f96:	d508      	bpl.n	8012faa <_printf_i+0x14e>
 8012f98:	6923      	ldr	r3, [r4, #16]
 8012f9a:	6861      	ldr	r1, [r4, #4]
 8012f9c:	4299      	cmp	r1, r3
 8012f9e:	bfde      	ittt	le
 8012fa0:	2330      	movle	r3, #48	; 0x30
 8012fa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012fa6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012faa:	1b92      	subs	r2, r2, r6
 8012fac:	6122      	str	r2, [r4, #16]
 8012fae:	464b      	mov	r3, r9
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	4640      	mov	r0, r8
 8012fb4:	f8cd a000 	str.w	sl, [sp]
 8012fb8:	aa03      	add	r2, sp, #12
 8012fba:	f7ff fedf 	bl	8012d7c <_printf_common>
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	d14c      	bne.n	801305c <_printf_i+0x200>
 8012fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fc6:	b004      	add	sp, #16
 8012fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fcc:	4834      	ldr	r0, [pc, #208]	; (80130a0 <_printf_i+0x244>)
 8012fce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012fd2:	680e      	ldr	r6, [r1, #0]
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8012fda:	061f      	lsls	r7, r3, #24
 8012fdc:	600e      	str	r6, [r1, #0]
 8012fde:	d514      	bpl.n	801300a <_printf_i+0x1ae>
 8012fe0:	07d9      	lsls	r1, r3, #31
 8012fe2:	bf44      	itt	mi
 8012fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8012fe8:	6023      	strmi	r3, [r4, #0]
 8012fea:	b91d      	cbnz	r5, 8012ff4 <_printf_i+0x198>
 8012fec:	6823      	ldr	r3, [r4, #0]
 8012fee:	f023 0320 	bic.w	r3, r3, #32
 8012ff2:	6023      	str	r3, [r4, #0]
 8012ff4:	2310      	movs	r3, #16
 8012ff6:	e7af      	b.n	8012f58 <_printf_i+0xfc>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	f043 0320 	orr.w	r3, r3, #32
 8012ffe:	6023      	str	r3, [r4, #0]
 8013000:	2378      	movs	r3, #120	; 0x78
 8013002:	4828      	ldr	r0, [pc, #160]	; (80130a4 <_printf_i+0x248>)
 8013004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013008:	e7e3      	b.n	8012fd2 <_printf_i+0x176>
 801300a:	065e      	lsls	r6, r3, #25
 801300c:	bf48      	it	mi
 801300e:	b2ad      	uxthmi	r5, r5
 8013010:	e7e6      	b.n	8012fe0 <_printf_i+0x184>
 8013012:	4616      	mov	r6, r2
 8013014:	e7bb      	b.n	8012f8e <_printf_i+0x132>
 8013016:	680b      	ldr	r3, [r1, #0]
 8013018:	6826      	ldr	r6, [r4, #0]
 801301a:	1d1d      	adds	r5, r3, #4
 801301c:	6960      	ldr	r0, [r4, #20]
 801301e:	600d      	str	r5, [r1, #0]
 8013020:	0635      	lsls	r5, r6, #24
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	d501      	bpl.n	801302a <_printf_i+0x1ce>
 8013026:	6018      	str	r0, [r3, #0]
 8013028:	e002      	b.n	8013030 <_printf_i+0x1d4>
 801302a:	0671      	lsls	r1, r6, #25
 801302c:	d5fb      	bpl.n	8013026 <_printf_i+0x1ca>
 801302e:	8018      	strh	r0, [r3, #0]
 8013030:	2300      	movs	r3, #0
 8013032:	4616      	mov	r6, r2
 8013034:	6123      	str	r3, [r4, #16]
 8013036:	e7ba      	b.n	8012fae <_printf_i+0x152>
 8013038:	680b      	ldr	r3, [r1, #0]
 801303a:	1d1a      	adds	r2, r3, #4
 801303c:	600a      	str	r2, [r1, #0]
 801303e:	681e      	ldr	r6, [r3, #0]
 8013040:	2100      	movs	r1, #0
 8013042:	4630      	mov	r0, r6
 8013044:	6862      	ldr	r2, [r4, #4]
 8013046:	f7ff fadd 	bl	8012604 <memchr>
 801304a:	b108      	cbz	r0, 8013050 <_printf_i+0x1f4>
 801304c:	1b80      	subs	r0, r0, r6
 801304e:	6060      	str	r0, [r4, #4]
 8013050:	6863      	ldr	r3, [r4, #4]
 8013052:	6123      	str	r3, [r4, #16]
 8013054:	2300      	movs	r3, #0
 8013056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801305a:	e7a8      	b.n	8012fae <_printf_i+0x152>
 801305c:	4632      	mov	r2, r6
 801305e:	4649      	mov	r1, r9
 8013060:	4640      	mov	r0, r8
 8013062:	6923      	ldr	r3, [r4, #16]
 8013064:	47d0      	blx	sl
 8013066:	3001      	adds	r0, #1
 8013068:	d0ab      	beq.n	8012fc2 <_printf_i+0x166>
 801306a:	6823      	ldr	r3, [r4, #0]
 801306c:	079b      	lsls	r3, r3, #30
 801306e:	d413      	bmi.n	8013098 <_printf_i+0x23c>
 8013070:	68e0      	ldr	r0, [r4, #12]
 8013072:	9b03      	ldr	r3, [sp, #12]
 8013074:	4298      	cmp	r0, r3
 8013076:	bfb8      	it	lt
 8013078:	4618      	movlt	r0, r3
 801307a:	e7a4      	b.n	8012fc6 <_printf_i+0x16a>
 801307c:	2301      	movs	r3, #1
 801307e:	4632      	mov	r2, r6
 8013080:	4649      	mov	r1, r9
 8013082:	4640      	mov	r0, r8
 8013084:	47d0      	blx	sl
 8013086:	3001      	adds	r0, #1
 8013088:	d09b      	beq.n	8012fc2 <_printf_i+0x166>
 801308a:	3501      	adds	r5, #1
 801308c:	68e3      	ldr	r3, [r4, #12]
 801308e:	9903      	ldr	r1, [sp, #12]
 8013090:	1a5b      	subs	r3, r3, r1
 8013092:	42ab      	cmp	r3, r5
 8013094:	dcf2      	bgt.n	801307c <_printf_i+0x220>
 8013096:	e7eb      	b.n	8013070 <_printf_i+0x214>
 8013098:	2500      	movs	r5, #0
 801309a:	f104 0619 	add.w	r6, r4, #25
 801309e:	e7f5      	b.n	801308c <_printf_i+0x230>
 80130a0:	08017b84 	.word	0x08017b84
 80130a4:	08017b95 	.word	0x08017b95

080130a8 <_scanf_float>:
 80130a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	b087      	sub	sp, #28
 80130ae:	9303      	str	r3, [sp, #12]
 80130b0:	688b      	ldr	r3, [r1, #8]
 80130b2:	4617      	mov	r7, r2
 80130b4:	1e5a      	subs	r2, r3, #1
 80130b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80130ba:	bf85      	ittet	hi
 80130bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80130c0:	195b      	addhi	r3, r3, r5
 80130c2:	2300      	movls	r3, #0
 80130c4:	9302      	strhi	r3, [sp, #8]
 80130c6:	bf88      	it	hi
 80130c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80130cc:	468b      	mov	fp, r1
 80130ce:	f04f 0500 	mov.w	r5, #0
 80130d2:	bf8c      	ite	hi
 80130d4:	608b      	strhi	r3, [r1, #8]
 80130d6:	9302      	strls	r3, [sp, #8]
 80130d8:	680b      	ldr	r3, [r1, #0]
 80130da:	4680      	mov	r8, r0
 80130dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80130e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80130e4:	460c      	mov	r4, r1
 80130e6:	465e      	mov	r6, fp
 80130e8:	46aa      	mov	sl, r5
 80130ea:	46a9      	mov	r9, r5
 80130ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80130f0:	9501      	str	r5, [sp, #4]
 80130f2:	68a2      	ldr	r2, [r4, #8]
 80130f4:	b152      	cbz	r2, 801310c <_scanf_float+0x64>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b4e      	cmp	r3, #78	; 0x4e
 80130fc:	d864      	bhi.n	80131c8 <_scanf_float+0x120>
 80130fe:	2b40      	cmp	r3, #64	; 0x40
 8013100:	d83c      	bhi.n	801317c <_scanf_float+0xd4>
 8013102:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013106:	b2c8      	uxtb	r0, r1
 8013108:	280e      	cmp	r0, #14
 801310a:	d93a      	bls.n	8013182 <_scanf_float+0xda>
 801310c:	f1b9 0f00 	cmp.w	r9, #0
 8013110:	d003      	beq.n	801311a <_scanf_float+0x72>
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013118:	6023      	str	r3, [r4, #0]
 801311a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801311e:	f1ba 0f01 	cmp.w	sl, #1
 8013122:	f200 8113 	bhi.w	801334c <_scanf_float+0x2a4>
 8013126:	455e      	cmp	r6, fp
 8013128:	f200 8105 	bhi.w	8013336 <_scanf_float+0x28e>
 801312c:	2501      	movs	r5, #1
 801312e:	4628      	mov	r0, r5
 8013130:	b007      	add	sp, #28
 8013132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013136:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801313a:	2a0d      	cmp	r2, #13
 801313c:	d8e6      	bhi.n	801310c <_scanf_float+0x64>
 801313e:	a101      	add	r1, pc, #4	; (adr r1, 8013144 <_scanf_float+0x9c>)
 8013140:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013144:	08013283 	.word	0x08013283
 8013148:	0801310d 	.word	0x0801310d
 801314c:	0801310d 	.word	0x0801310d
 8013150:	0801310d 	.word	0x0801310d
 8013154:	080132e3 	.word	0x080132e3
 8013158:	080132bb 	.word	0x080132bb
 801315c:	0801310d 	.word	0x0801310d
 8013160:	0801310d 	.word	0x0801310d
 8013164:	08013291 	.word	0x08013291
 8013168:	0801310d 	.word	0x0801310d
 801316c:	0801310d 	.word	0x0801310d
 8013170:	0801310d 	.word	0x0801310d
 8013174:	0801310d 	.word	0x0801310d
 8013178:	08013249 	.word	0x08013249
 801317c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013180:	e7db      	b.n	801313a <_scanf_float+0x92>
 8013182:	290e      	cmp	r1, #14
 8013184:	d8c2      	bhi.n	801310c <_scanf_float+0x64>
 8013186:	a001      	add	r0, pc, #4	; (adr r0, 801318c <_scanf_float+0xe4>)
 8013188:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801318c:	0801323b 	.word	0x0801323b
 8013190:	0801310d 	.word	0x0801310d
 8013194:	0801323b 	.word	0x0801323b
 8013198:	080132cf 	.word	0x080132cf
 801319c:	0801310d 	.word	0x0801310d
 80131a0:	080131e9 	.word	0x080131e9
 80131a4:	08013225 	.word	0x08013225
 80131a8:	08013225 	.word	0x08013225
 80131ac:	08013225 	.word	0x08013225
 80131b0:	08013225 	.word	0x08013225
 80131b4:	08013225 	.word	0x08013225
 80131b8:	08013225 	.word	0x08013225
 80131bc:	08013225 	.word	0x08013225
 80131c0:	08013225 	.word	0x08013225
 80131c4:	08013225 	.word	0x08013225
 80131c8:	2b6e      	cmp	r3, #110	; 0x6e
 80131ca:	d809      	bhi.n	80131e0 <_scanf_float+0x138>
 80131cc:	2b60      	cmp	r3, #96	; 0x60
 80131ce:	d8b2      	bhi.n	8013136 <_scanf_float+0x8e>
 80131d0:	2b54      	cmp	r3, #84	; 0x54
 80131d2:	d077      	beq.n	80132c4 <_scanf_float+0x21c>
 80131d4:	2b59      	cmp	r3, #89	; 0x59
 80131d6:	d199      	bne.n	801310c <_scanf_float+0x64>
 80131d8:	2d07      	cmp	r5, #7
 80131da:	d197      	bne.n	801310c <_scanf_float+0x64>
 80131dc:	2508      	movs	r5, #8
 80131de:	e029      	b.n	8013234 <_scanf_float+0x18c>
 80131e0:	2b74      	cmp	r3, #116	; 0x74
 80131e2:	d06f      	beq.n	80132c4 <_scanf_float+0x21c>
 80131e4:	2b79      	cmp	r3, #121	; 0x79
 80131e6:	e7f6      	b.n	80131d6 <_scanf_float+0x12e>
 80131e8:	6821      	ldr	r1, [r4, #0]
 80131ea:	05c8      	lsls	r0, r1, #23
 80131ec:	d51a      	bpl.n	8013224 <_scanf_float+0x17c>
 80131ee:	9b02      	ldr	r3, [sp, #8]
 80131f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80131f4:	6021      	str	r1, [r4, #0]
 80131f6:	f109 0901 	add.w	r9, r9, #1
 80131fa:	b11b      	cbz	r3, 8013204 <_scanf_float+0x15c>
 80131fc:	3b01      	subs	r3, #1
 80131fe:	3201      	adds	r2, #1
 8013200:	9302      	str	r3, [sp, #8]
 8013202:	60a2      	str	r2, [r4, #8]
 8013204:	68a3      	ldr	r3, [r4, #8]
 8013206:	3b01      	subs	r3, #1
 8013208:	60a3      	str	r3, [r4, #8]
 801320a:	6923      	ldr	r3, [r4, #16]
 801320c:	3301      	adds	r3, #1
 801320e:	6123      	str	r3, [r4, #16]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	3b01      	subs	r3, #1
 8013214:	2b00      	cmp	r3, #0
 8013216:	607b      	str	r3, [r7, #4]
 8013218:	f340 8084 	ble.w	8013324 <_scanf_float+0x27c>
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	3301      	adds	r3, #1
 8013220:	603b      	str	r3, [r7, #0]
 8013222:	e766      	b.n	80130f2 <_scanf_float+0x4a>
 8013224:	eb1a 0f05 	cmn.w	sl, r5
 8013228:	f47f af70 	bne.w	801310c <_scanf_float+0x64>
 801322c:	6822      	ldr	r2, [r4, #0]
 801322e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013232:	6022      	str	r2, [r4, #0]
 8013234:	f806 3b01 	strb.w	r3, [r6], #1
 8013238:	e7e4      	b.n	8013204 <_scanf_float+0x15c>
 801323a:	6822      	ldr	r2, [r4, #0]
 801323c:	0610      	lsls	r0, r2, #24
 801323e:	f57f af65 	bpl.w	801310c <_scanf_float+0x64>
 8013242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013246:	e7f4      	b.n	8013232 <_scanf_float+0x18a>
 8013248:	f1ba 0f00 	cmp.w	sl, #0
 801324c:	d10e      	bne.n	801326c <_scanf_float+0x1c4>
 801324e:	f1b9 0f00 	cmp.w	r9, #0
 8013252:	d10e      	bne.n	8013272 <_scanf_float+0x1ca>
 8013254:	6822      	ldr	r2, [r4, #0]
 8013256:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801325a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801325e:	d108      	bne.n	8013272 <_scanf_float+0x1ca>
 8013260:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013264:	f04f 0a01 	mov.w	sl, #1
 8013268:	6022      	str	r2, [r4, #0]
 801326a:	e7e3      	b.n	8013234 <_scanf_float+0x18c>
 801326c:	f1ba 0f02 	cmp.w	sl, #2
 8013270:	d055      	beq.n	801331e <_scanf_float+0x276>
 8013272:	2d01      	cmp	r5, #1
 8013274:	d002      	beq.n	801327c <_scanf_float+0x1d4>
 8013276:	2d04      	cmp	r5, #4
 8013278:	f47f af48 	bne.w	801310c <_scanf_float+0x64>
 801327c:	3501      	adds	r5, #1
 801327e:	b2ed      	uxtb	r5, r5
 8013280:	e7d8      	b.n	8013234 <_scanf_float+0x18c>
 8013282:	f1ba 0f01 	cmp.w	sl, #1
 8013286:	f47f af41 	bne.w	801310c <_scanf_float+0x64>
 801328a:	f04f 0a02 	mov.w	sl, #2
 801328e:	e7d1      	b.n	8013234 <_scanf_float+0x18c>
 8013290:	b97d      	cbnz	r5, 80132b2 <_scanf_float+0x20a>
 8013292:	f1b9 0f00 	cmp.w	r9, #0
 8013296:	f47f af3c 	bne.w	8013112 <_scanf_float+0x6a>
 801329a:	6822      	ldr	r2, [r4, #0]
 801329c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80132a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80132a4:	f47f af39 	bne.w	801311a <_scanf_float+0x72>
 80132a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80132ac:	2501      	movs	r5, #1
 80132ae:	6022      	str	r2, [r4, #0]
 80132b0:	e7c0      	b.n	8013234 <_scanf_float+0x18c>
 80132b2:	2d03      	cmp	r5, #3
 80132b4:	d0e2      	beq.n	801327c <_scanf_float+0x1d4>
 80132b6:	2d05      	cmp	r5, #5
 80132b8:	e7de      	b.n	8013278 <_scanf_float+0x1d0>
 80132ba:	2d02      	cmp	r5, #2
 80132bc:	f47f af26 	bne.w	801310c <_scanf_float+0x64>
 80132c0:	2503      	movs	r5, #3
 80132c2:	e7b7      	b.n	8013234 <_scanf_float+0x18c>
 80132c4:	2d06      	cmp	r5, #6
 80132c6:	f47f af21 	bne.w	801310c <_scanf_float+0x64>
 80132ca:	2507      	movs	r5, #7
 80132cc:	e7b2      	b.n	8013234 <_scanf_float+0x18c>
 80132ce:	6822      	ldr	r2, [r4, #0]
 80132d0:	0591      	lsls	r1, r2, #22
 80132d2:	f57f af1b 	bpl.w	801310c <_scanf_float+0x64>
 80132d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80132da:	6022      	str	r2, [r4, #0]
 80132dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80132e0:	e7a8      	b.n	8013234 <_scanf_float+0x18c>
 80132e2:	6822      	ldr	r2, [r4, #0]
 80132e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80132e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80132ec:	d006      	beq.n	80132fc <_scanf_float+0x254>
 80132ee:	0550      	lsls	r0, r2, #21
 80132f0:	f57f af0c 	bpl.w	801310c <_scanf_float+0x64>
 80132f4:	f1b9 0f00 	cmp.w	r9, #0
 80132f8:	f43f af0f 	beq.w	801311a <_scanf_float+0x72>
 80132fc:	0591      	lsls	r1, r2, #22
 80132fe:	bf58      	it	pl
 8013300:	9901      	ldrpl	r1, [sp, #4]
 8013302:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013306:	bf58      	it	pl
 8013308:	eba9 0101 	subpl.w	r1, r9, r1
 801330c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013310:	f04f 0900 	mov.w	r9, #0
 8013314:	bf58      	it	pl
 8013316:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801331a:	6022      	str	r2, [r4, #0]
 801331c:	e78a      	b.n	8013234 <_scanf_float+0x18c>
 801331e:	f04f 0a03 	mov.w	sl, #3
 8013322:	e787      	b.n	8013234 <_scanf_float+0x18c>
 8013324:	4639      	mov	r1, r7
 8013326:	4640      	mov	r0, r8
 8013328:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801332c:	4798      	blx	r3
 801332e:	2800      	cmp	r0, #0
 8013330:	f43f aedf 	beq.w	80130f2 <_scanf_float+0x4a>
 8013334:	e6ea      	b.n	801310c <_scanf_float+0x64>
 8013336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801333a:	463a      	mov	r2, r7
 801333c:	4640      	mov	r0, r8
 801333e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013342:	4798      	blx	r3
 8013344:	6923      	ldr	r3, [r4, #16]
 8013346:	3b01      	subs	r3, #1
 8013348:	6123      	str	r3, [r4, #16]
 801334a:	e6ec      	b.n	8013126 <_scanf_float+0x7e>
 801334c:	1e6b      	subs	r3, r5, #1
 801334e:	2b06      	cmp	r3, #6
 8013350:	d825      	bhi.n	801339e <_scanf_float+0x2f6>
 8013352:	2d02      	cmp	r5, #2
 8013354:	d836      	bhi.n	80133c4 <_scanf_float+0x31c>
 8013356:	455e      	cmp	r6, fp
 8013358:	f67f aee8 	bls.w	801312c <_scanf_float+0x84>
 801335c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013360:	463a      	mov	r2, r7
 8013362:	4640      	mov	r0, r8
 8013364:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013368:	4798      	blx	r3
 801336a:	6923      	ldr	r3, [r4, #16]
 801336c:	3b01      	subs	r3, #1
 801336e:	6123      	str	r3, [r4, #16]
 8013370:	e7f1      	b.n	8013356 <_scanf_float+0x2ae>
 8013372:	9802      	ldr	r0, [sp, #8]
 8013374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013378:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801337c:	463a      	mov	r2, r7
 801337e:	9002      	str	r0, [sp, #8]
 8013380:	4640      	mov	r0, r8
 8013382:	4798      	blx	r3
 8013384:	6923      	ldr	r3, [r4, #16]
 8013386:	3b01      	subs	r3, #1
 8013388:	6123      	str	r3, [r4, #16]
 801338a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801338e:	fa5f fa8a 	uxtb.w	sl, sl
 8013392:	f1ba 0f02 	cmp.w	sl, #2
 8013396:	d1ec      	bne.n	8013372 <_scanf_float+0x2ca>
 8013398:	3d03      	subs	r5, #3
 801339a:	b2ed      	uxtb	r5, r5
 801339c:	1b76      	subs	r6, r6, r5
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	05da      	lsls	r2, r3, #23
 80133a2:	d52f      	bpl.n	8013404 <_scanf_float+0x35c>
 80133a4:	055b      	lsls	r3, r3, #21
 80133a6:	d510      	bpl.n	80133ca <_scanf_float+0x322>
 80133a8:	455e      	cmp	r6, fp
 80133aa:	f67f aebf 	bls.w	801312c <_scanf_float+0x84>
 80133ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133b2:	463a      	mov	r2, r7
 80133b4:	4640      	mov	r0, r8
 80133b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80133ba:	4798      	blx	r3
 80133bc:	6923      	ldr	r3, [r4, #16]
 80133be:	3b01      	subs	r3, #1
 80133c0:	6123      	str	r3, [r4, #16]
 80133c2:	e7f1      	b.n	80133a8 <_scanf_float+0x300>
 80133c4:	46aa      	mov	sl, r5
 80133c6:	9602      	str	r6, [sp, #8]
 80133c8:	e7df      	b.n	801338a <_scanf_float+0x2e2>
 80133ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80133ce:	6923      	ldr	r3, [r4, #16]
 80133d0:	2965      	cmp	r1, #101	; 0x65
 80133d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80133d6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80133da:	6123      	str	r3, [r4, #16]
 80133dc:	d00c      	beq.n	80133f8 <_scanf_float+0x350>
 80133de:	2945      	cmp	r1, #69	; 0x45
 80133e0:	d00a      	beq.n	80133f8 <_scanf_float+0x350>
 80133e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133e6:	463a      	mov	r2, r7
 80133e8:	4640      	mov	r0, r8
 80133ea:	4798      	blx	r3
 80133ec:	6923      	ldr	r3, [r4, #16]
 80133ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80133f2:	3b01      	subs	r3, #1
 80133f4:	1eb5      	subs	r5, r6, #2
 80133f6:	6123      	str	r3, [r4, #16]
 80133f8:	463a      	mov	r2, r7
 80133fa:	4640      	mov	r0, r8
 80133fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013400:	4798      	blx	r3
 8013402:	462e      	mov	r6, r5
 8013404:	6825      	ldr	r5, [r4, #0]
 8013406:	f015 0510 	ands.w	r5, r5, #16
 801340a:	d159      	bne.n	80134c0 <_scanf_float+0x418>
 801340c:	7035      	strb	r5, [r6, #0]
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013418:	d11c      	bne.n	8013454 <_scanf_float+0x3ac>
 801341a:	9b01      	ldr	r3, [sp, #4]
 801341c:	454b      	cmp	r3, r9
 801341e:	eba3 0209 	sub.w	r2, r3, r9
 8013422:	d124      	bne.n	801346e <_scanf_float+0x3c6>
 8013424:	2200      	movs	r2, #0
 8013426:	4659      	mov	r1, fp
 8013428:	4640      	mov	r0, r8
 801342a:	f000 ff6d 	bl	8014308 <_strtod_r>
 801342e:	f8d4 c000 	ldr.w	ip, [r4]
 8013432:	9b03      	ldr	r3, [sp, #12]
 8013434:	f01c 0f02 	tst.w	ip, #2
 8013438:	4606      	mov	r6, r0
 801343a:	460f      	mov	r7, r1
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	d021      	beq.n	8013484 <_scanf_float+0x3dc>
 8013440:	9903      	ldr	r1, [sp, #12]
 8013442:	1d1a      	adds	r2, r3, #4
 8013444:	600a      	str	r2, [r1, #0]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	e9c3 6700 	strd	r6, r7, [r3]
 801344c:	68e3      	ldr	r3, [r4, #12]
 801344e:	3301      	adds	r3, #1
 8013450:	60e3      	str	r3, [r4, #12]
 8013452:	e66c      	b.n	801312e <_scanf_float+0x86>
 8013454:	9b04      	ldr	r3, [sp, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d0e4      	beq.n	8013424 <_scanf_float+0x37c>
 801345a:	9905      	ldr	r1, [sp, #20]
 801345c:	230a      	movs	r3, #10
 801345e:	462a      	mov	r2, r5
 8013460:	4640      	mov	r0, r8
 8013462:	3101      	adds	r1, #1
 8013464:	f000 ffdc 	bl	8014420 <_strtol_r>
 8013468:	9b04      	ldr	r3, [sp, #16]
 801346a:	9e05      	ldr	r6, [sp, #20]
 801346c:	1ac2      	subs	r2, r0, r3
 801346e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013472:	429e      	cmp	r6, r3
 8013474:	bf28      	it	cs
 8013476:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801347a:	4630      	mov	r0, r6
 801347c:	4911      	ldr	r1, [pc, #68]	; (80134c4 <_scanf_float+0x41c>)
 801347e:	f000 f87d 	bl	801357c <siprintf>
 8013482:	e7cf      	b.n	8013424 <_scanf_float+0x37c>
 8013484:	f01c 0f04 	tst.w	ip, #4
 8013488:	f103 0e04 	add.w	lr, r3, #4
 801348c:	d003      	beq.n	8013496 <_scanf_float+0x3ee>
 801348e:	9903      	ldr	r1, [sp, #12]
 8013490:	f8c1 e000 	str.w	lr, [r1]
 8013494:	e7d7      	b.n	8013446 <_scanf_float+0x39e>
 8013496:	9a03      	ldr	r2, [sp, #12]
 8013498:	f8c2 e000 	str.w	lr, [r2]
 801349c:	f8d3 8000 	ldr.w	r8, [r3]
 80134a0:	4602      	mov	r2, r0
 80134a2:	460b      	mov	r3, r1
 80134a4:	f7ed faca 	bl	8000a3c <__aeabi_dcmpun>
 80134a8:	b128      	cbz	r0, 80134b6 <_scanf_float+0x40e>
 80134aa:	4807      	ldr	r0, [pc, #28]	; (80134c8 <_scanf_float+0x420>)
 80134ac:	f000 f81e 	bl	80134ec <nanf>
 80134b0:	f8c8 0000 	str.w	r0, [r8]
 80134b4:	e7ca      	b.n	801344c <_scanf_float+0x3a4>
 80134b6:	4630      	mov	r0, r6
 80134b8:	4639      	mov	r1, r7
 80134ba:	f7ed fb1d 	bl	8000af8 <__aeabi_d2f>
 80134be:	e7f7      	b.n	80134b0 <_scanf_float+0x408>
 80134c0:	2500      	movs	r5, #0
 80134c2:	e634      	b.n	801312e <_scanf_float+0x86>
 80134c4:	08017ba6 	.word	0x08017ba6
 80134c8:	08017fdb 	.word	0x08017fdb

080134cc <_sbrk_r>:
 80134cc:	b538      	push	{r3, r4, r5, lr}
 80134ce:	2300      	movs	r3, #0
 80134d0:	4d05      	ldr	r5, [pc, #20]	; (80134e8 <_sbrk_r+0x1c>)
 80134d2:	4604      	mov	r4, r0
 80134d4:	4608      	mov	r0, r1
 80134d6:	602b      	str	r3, [r5, #0]
 80134d8:	f7f0 ff10 	bl	80042fc <_sbrk>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_sbrk_r+0x1a>
 80134e0:	682b      	ldr	r3, [r5, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_sbrk_r+0x1a>
 80134e4:	6023      	str	r3, [r4, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	20001dec 	.word	0x20001dec

080134ec <nanf>:
 80134ec:	4800      	ldr	r0, [pc, #0]	; (80134f0 <nanf+0x4>)
 80134ee:	4770      	bx	lr
 80134f0:	7fc00000 	.word	0x7fc00000

080134f4 <_raise_r>:
 80134f4:	291f      	cmp	r1, #31
 80134f6:	b538      	push	{r3, r4, r5, lr}
 80134f8:	4604      	mov	r4, r0
 80134fa:	460d      	mov	r5, r1
 80134fc:	d904      	bls.n	8013508 <_raise_r+0x14>
 80134fe:	2316      	movs	r3, #22
 8013500:	6003      	str	r3, [r0, #0]
 8013502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013506:	bd38      	pop	{r3, r4, r5, pc}
 8013508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801350a:	b112      	cbz	r2, 8013512 <_raise_r+0x1e>
 801350c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013510:	b94b      	cbnz	r3, 8013526 <_raise_r+0x32>
 8013512:	4620      	mov	r0, r4
 8013514:	f000 f830 	bl	8013578 <_getpid_r>
 8013518:	462a      	mov	r2, r5
 801351a:	4601      	mov	r1, r0
 801351c:	4620      	mov	r0, r4
 801351e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013522:	f000 b817 	b.w	8013554 <_kill_r>
 8013526:	2b01      	cmp	r3, #1
 8013528:	d00a      	beq.n	8013540 <_raise_r+0x4c>
 801352a:	1c59      	adds	r1, r3, #1
 801352c:	d103      	bne.n	8013536 <_raise_r+0x42>
 801352e:	2316      	movs	r3, #22
 8013530:	6003      	str	r3, [r0, #0]
 8013532:	2001      	movs	r0, #1
 8013534:	e7e7      	b.n	8013506 <_raise_r+0x12>
 8013536:	2400      	movs	r4, #0
 8013538:	4628      	mov	r0, r5
 801353a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801353e:	4798      	blx	r3
 8013540:	2000      	movs	r0, #0
 8013542:	e7e0      	b.n	8013506 <_raise_r+0x12>

08013544 <raise>:
 8013544:	4b02      	ldr	r3, [pc, #8]	; (8013550 <raise+0xc>)
 8013546:	4601      	mov	r1, r0
 8013548:	6818      	ldr	r0, [r3, #0]
 801354a:	f7ff bfd3 	b.w	80134f4 <_raise_r>
 801354e:	bf00      	nop
 8013550:	2000022c 	.word	0x2000022c

08013554 <_kill_r>:
 8013554:	b538      	push	{r3, r4, r5, lr}
 8013556:	2300      	movs	r3, #0
 8013558:	4d06      	ldr	r5, [pc, #24]	; (8013574 <_kill_r+0x20>)
 801355a:	4604      	mov	r4, r0
 801355c:	4608      	mov	r0, r1
 801355e:	4611      	mov	r1, r2
 8013560:	602b      	str	r3, [r5, #0]
 8013562:	f7f0 fe48 	bl	80041f6 <_kill>
 8013566:	1c43      	adds	r3, r0, #1
 8013568:	d102      	bne.n	8013570 <_kill_r+0x1c>
 801356a:	682b      	ldr	r3, [r5, #0]
 801356c:	b103      	cbz	r3, 8013570 <_kill_r+0x1c>
 801356e:	6023      	str	r3, [r4, #0]
 8013570:	bd38      	pop	{r3, r4, r5, pc}
 8013572:	bf00      	nop
 8013574:	20001dec 	.word	0x20001dec

08013578 <_getpid_r>:
 8013578:	f7f0 be36 	b.w	80041e8 <_getpid>

0801357c <siprintf>:
 801357c:	b40e      	push	{r1, r2, r3}
 801357e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013582:	b500      	push	{lr}
 8013584:	b09c      	sub	sp, #112	; 0x70
 8013586:	ab1d      	add	r3, sp, #116	; 0x74
 8013588:	9002      	str	r0, [sp, #8]
 801358a:	9006      	str	r0, [sp, #24]
 801358c:	9107      	str	r1, [sp, #28]
 801358e:	9104      	str	r1, [sp, #16]
 8013590:	4808      	ldr	r0, [pc, #32]	; (80135b4 <siprintf+0x38>)
 8013592:	4909      	ldr	r1, [pc, #36]	; (80135b8 <siprintf+0x3c>)
 8013594:	f853 2b04 	ldr.w	r2, [r3], #4
 8013598:	9105      	str	r1, [sp, #20]
 801359a:	6800      	ldr	r0, [r0, #0]
 801359c:	a902      	add	r1, sp, #8
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	f002 fe8e 	bl	80162c0 <_svfiprintf_r>
 80135a4:	2200      	movs	r2, #0
 80135a6:	9b02      	ldr	r3, [sp, #8]
 80135a8:	701a      	strb	r2, [r3, #0]
 80135aa:	b01c      	add	sp, #112	; 0x70
 80135ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80135b0:	b003      	add	sp, #12
 80135b2:	4770      	bx	lr
 80135b4:	2000022c 	.word	0x2000022c
 80135b8:	ffff0208 	.word	0xffff0208

080135bc <siscanf>:
 80135bc:	b40e      	push	{r1, r2, r3}
 80135be:	f44f 7201 	mov.w	r2, #516	; 0x204
 80135c2:	b530      	push	{r4, r5, lr}
 80135c4:	b09c      	sub	sp, #112	; 0x70
 80135c6:	ac1f      	add	r4, sp, #124	; 0x7c
 80135c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80135cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80135d0:	9002      	str	r0, [sp, #8]
 80135d2:	9006      	str	r0, [sp, #24]
 80135d4:	f7ec fdd4 	bl	8000180 <strlen>
 80135d8:	4b0b      	ldr	r3, [pc, #44]	; (8013608 <siscanf+0x4c>)
 80135da:	9003      	str	r0, [sp, #12]
 80135dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80135de:	2300      	movs	r3, #0
 80135e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80135e2:	9314      	str	r3, [sp, #80]	; 0x50
 80135e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135e8:	9007      	str	r0, [sp, #28]
 80135ea:	4808      	ldr	r0, [pc, #32]	; (801360c <siscanf+0x50>)
 80135ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135f0:	462a      	mov	r2, r5
 80135f2:	4623      	mov	r3, r4
 80135f4:	a902      	add	r1, sp, #8
 80135f6:	6800      	ldr	r0, [r0, #0]
 80135f8:	9401      	str	r4, [sp, #4]
 80135fa:	f002 ffbb 	bl	8016574 <__ssvfiscanf_r>
 80135fe:	b01c      	add	sp, #112	; 0x70
 8013600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013604:	b003      	add	sp, #12
 8013606:	4770      	bx	lr
 8013608:	08013633 	.word	0x08013633
 801360c:	2000022c 	.word	0x2000022c

08013610 <__sread>:
 8013610:	b510      	push	{r4, lr}
 8013612:	460c      	mov	r4, r1
 8013614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013618:	f003 fa70 	bl	8016afc <_read_r>
 801361c:	2800      	cmp	r0, #0
 801361e:	bfab      	itete	ge
 8013620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013622:	89a3      	ldrhlt	r3, [r4, #12]
 8013624:	181b      	addge	r3, r3, r0
 8013626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801362a:	bfac      	ite	ge
 801362c:	6563      	strge	r3, [r4, #84]	; 0x54
 801362e:	81a3      	strhlt	r3, [r4, #12]
 8013630:	bd10      	pop	{r4, pc}

08013632 <__seofread>:
 8013632:	2000      	movs	r0, #0
 8013634:	4770      	bx	lr

08013636 <__swrite>:
 8013636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801363a:	461f      	mov	r7, r3
 801363c:	898b      	ldrh	r3, [r1, #12]
 801363e:	4605      	mov	r5, r0
 8013640:	05db      	lsls	r3, r3, #23
 8013642:	460c      	mov	r4, r1
 8013644:	4616      	mov	r6, r2
 8013646:	d505      	bpl.n	8013654 <__swrite+0x1e>
 8013648:	2302      	movs	r3, #2
 801364a:	2200      	movs	r2, #0
 801364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013650:	f002 f8f2 	bl	8015838 <_lseek_r>
 8013654:	89a3      	ldrh	r3, [r4, #12]
 8013656:	4632      	mov	r2, r6
 8013658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801365c:	81a3      	strh	r3, [r4, #12]
 801365e:	4628      	mov	r0, r5
 8013660:	463b      	mov	r3, r7
 8013662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801366a:	f000 bedb 	b.w	8014424 <_write_r>

0801366e <__sseek>:
 801366e:	b510      	push	{r4, lr}
 8013670:	460c      	mov	r4, r1
 8013672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013676:	f002 f8df 	bl	8015838 <_lseek_r>
 801367a:	1c43      	adds	r3, r0, #1
 801367c:	89a3      	ldrh	r3, [r4, #12]
 801367e:	bf15      	itete	ne
 8013680:	6560      	strne	r0, [r4, #84]	; 0x54
 8013682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801368a:	81a3      	strheq	r3, [r4, #12]
 801368c:	bf18      	it	ne
 801368e:	81a3      	strhne	r3, [r4, #12]
 8013690:	bd10      	pop	{r4, pc}

08013692 <__sclose>:
 8013692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013696:	f000 bed7 	b.w	8014448 <_close_r>

0801369a <strcpy>:
 801369a:	4603      	mov	r3, r0
 801369c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136a0:	f803 2b01 	strb.w	r2, [r3], #1
 80136a4:	2a00      	cmp	r2, #0
 80136a6:	d1f9      	bne.n	801369c <strcpy+0x2>
 80136a8:	4770      	bx	lr

080136aa <strstr>:
 80136aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ac:	780c      	ldrb	r4, [r1, #0]
 80136ae:	b164      	cbz	r4, 80136ca <strstr+0x20>
 80136b0:	4603      	mov	r3, r0
 80136b2:	781a      	ldrb	r2, [r3, #0]
 80136b4:	4618      	mov	r0, r3
 80136b6:	1c5e      	adds	r6, r3, #1
 80136b8:	b90a      	cbnz	r2, 80136be <strstr+0x14>
 80136ba:	4610      	mov	r0, r2
 80136bc:	e005      	b.n	80136ca <strstr+0x20>
 80136be:	4294      	cmp	r4, r2
 80136c0:	d108      	bne.n	80136d4 <strstr+0x2a>
 80136c2:	460d      	mov	r5, r1
 80136c4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80136c8:	b902      	cbnz	r2, 80136cc <strstr+0x22>
 80136ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80136d0:	4297      	cmp	r7, r2
 80136d2:	d0f7      	beq.n	80136c4 <strstr+0x1a>
 80136d4:	4633      	mov	r3, r6
 80136d6:	e7ec      	b.n	80136b2 <strstr+0x8>

080136d8 <sulp>:
 80136d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136dc:	460f      	mov	r7, r1
 80136de:	4690      	mov	r8, r2
 80136e0:	f002 fc4a 	bl	8015f78 <__ulp>
 80136e4:	4604      	mov	r4, r0
 80136e6:	460d      	mov	r5, r1
 80136e8:	f1b8 0f00 	cmp.w	r8, #0
 80136ec:	d011      	beq.n	8013712 <sulp+0x3a>
 80136ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80136f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	dd0b      	ble.n	8013712 <sulp+0x3a>
 80136fa:	2400      	movs	r4, #0
 80136fc:	051b      	lsls	r3, r3, #20
 80136fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013702:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013706:	4622      	mov	r2, r4
 8013708:	462b      	mov	r3, r5
 801370a:	f7ec fefd 	bl	8000508 <__aeabi_dmul>
 801370e:	4604      	mov	r4, r0
 8013710:	460d      	mov	r5, r1
 8013712:	4620      	mov	r0, r4
 8013714:	4629      	mov	r1, r5
 8013716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371a:	0000      	movs	r0, r0
 801371c:	0000      	movs	r0, r0
	...

08013720 <_strtod_l>:
 8013720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013724:	469b      	mov	fp, r3
 8013726:	2300      	movs	r3, #0
 8013728:	b0a1      	sub	sp, #132	; 0x84
 801372a:	931c      	str	r3, [sp, #112]	; 0x70
 801372c:	4ba1      	ldr	r3, [pc, #644]	; (80139b4 <_strtod_l+0x294>)
 801372e:	4682      	mov	sl, r0
 8013730:	681f      	ldr	r7, [r3, #0]
 8013732:	460e      	mov	r6, r1
 8013734:	4638      	mov	r0, r7
 8013736:	9217      	str	r2, [sp, #92]	; 0x5c
 8013738:	f7ec fd22 	bl	8000180 <strlen>
 801373c:	f04f 0800 	mov.w	r8, #0
 8013740:	4604      	mov	r4, r0
 8013742:	f04f 0900 	mov.w	r9, #0
 8013746:	961b      	str	r6, [sp, #108]	; 0x6c
 8013748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801374a:	781a      	ldrb	r2, [r3, #0]
 801374c:	2a2b      	cmp	r2, #43	; 0x2b
 801374e:	d04c      	beq.n	80137ea <_strtod_l+0xca>
 8013750:	d83a      	bhi.n	80137c8 <_strtod_l+0xa8>
 8013752:	2a0d      	cmp	r2, #13
 8013754:	d833      	bhi.n	80137be <_strtod_l+0x9e>
 8013756:	2a08      	cmp	r2, #8
 8013758:	d833      	bhi.n	80137c2 <_strtod_l+0xa2>
 801375a:	2a00      	cmp	r2, #0
 801375c:	d03d      	beq.n	80137da <_strtod_l+0xba>
 801375e:	2300      	movs	r3, #0
 8013760:	930c      	str	r3, [sp, #48]	; 0x30
 8013762:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013764:	782b      	ldrb	r3, [r5, #0]
 8013766:	2b30      	cmp	r3, #48	; 0x30
 8013768:	f040 80af 	bne.w	80138ca <_strtod_l+0x1aa>
 801376c:	786b      	ldrb	r3, [r5, #1]
 801376e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013772:	2b58      	cmp	r3, #88	; 0x58
 8013774:	d16c      	bne.n	8013850 <_strtod_l+0x130>
 8013776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013778:	4650      	mov	r0, sl
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	ab1c      	add	r3, sp, #112	; 0x70
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	4a8d      	ldr	r2, [pc, #564]	; (80139b8 <_strtod_l+0x298>)
 8013782:	f8cd b008 	str.w	fp, [sp, #8]
 8013786:	ab1d      	add	r3, sp, #116	; 0x74
 8013788:	a91b      	add	r1, sp, #108	; 0x6c
 801378a:	f001 fd53 	bl	8015234 <__gethex>
 801378e:	f010 0607 	ands.w	r6, r0, #7
 8013792:	4604      	mov	r4, r0
 8013794:	d005      	beq.n	80137a2 <_strtod_l+0x82>
 8013796:	2e06      	cmp	r6, #6
 8013798:	d129      	bne.n	80137ee <_strtod_l+0xce>
 801379a:	2300      	movs	r3, #0
 801379c:	3501      	adds	r5, #1
 801379e:	951b      	str	r5, [sp, #108]	; 0x6c
 80137a0:	930c      	str	r3, [sp, #48]	; 0x30
 80137a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	f040 8596 	bne.w	80142d6 <_strtod_l+0xbb6>
 80137aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137ac:	b1d3      	cbz	r3, 80137e4 <_strtod_l+0xc4>
 80137ae:	4642      	mov	r2, r8
 80137b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80137b4:	4610      	mov	r0, r2
 80137b6:	4619      	mov	r1, r3
 80137b8:	b021      	add	sp, #132	; 0x84
 80137ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137be:	2a20      	cmp	r2, #32
 80137c0:	d1cd      	bne.n	801375e <_strtod_l+0x3e>
 80137c2:	3301      	adds	r3, #1
 80137c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80137c6:	e7bf      	b.n	8013748 <_strtod_l+0x28>
 80137c8:	2a2d      	cmp	r2, #45	; 0x2d
 80137ca:	d1c8      	bne.n	801375e <_strtod_l+0x3e>
 80137cc:	2201      	movs	r2, #1
 80137ce:	920c      	str	r2, [sp, #48]	; 0x30
 80137d0:	1c5a      	adds	r2, r3, #1
 80137d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80137d4:	785b      	ldrb	r3, [r3, #1]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1c3      	bne.n	8013762 <_strtod_l+0x42>
 80137da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	f040 8577 	bne.w	80142d2 <_strtod_l+0xbb2>
 80137e4:	4642      	mov	r2, r8
 80137e6:	464b      	mov	r3, r9
 80137e8:	e7e4      	b.n	80137b4 <_strtod_l+0x94>
 80137ea:	2200      	movs	r2, #0
 80137ec:	e7ef      	b.n	80137ce <_strtod_l+0xae>
 80137ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80137f0:	b13a      	cbz	r2, 8013802 <_strtod_l+0xe2>
 80137f2:	2135      	movs	r1, #53	; 0x35
 80137f4:	a81e      	add	r0, sp, #120	; 0x78
 80137f6:	f002 fcc3 	bl	8016180 <__copybits>
 80137fa:	4650      	mov	r0, sl
 80137fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137fe:	f002 f88b 	bl	8015918 <_Bfree>
 8013802:	3e01      	subs	r6, #1
 8013804:	2e05      	cmp	r6, #5
 8013806:	d807      	bhi.n	8013818 <_strtod_l+0xf8>
 8013808:	e8df f006 	tbb	[pc, r6]
 801380c:	1d180b0e 	.word	0x1d180b0e
 8013810:	030e      	.short	0x030e
 8013812:	f04f 0900 	mov.w	r9, #0
 8013816:	46c8      	mov	r8, r9
 8013818:	0721      	lsls	r1, r4, #28
 801381a:	d5c2      	bpl.n	80137a2 <_strtod_l+0x82>
 801381c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8013820:	e7bf      	b.n	80137a2 <_strtod_l+0x82>
 8013822:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8013826:	e7f7      	b.n	8013818 <_strtod_l+0xf8>
 8013828:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801382a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 801382e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013836:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801383a:	e7ed      	b.n	8013818 <_strtod_l+0xf8>
 801383c:	f04f 0800 	mov.w	r8, #0
 8013840:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80139bc <_strtod_l+0x29c>
 8013844:	e7e8      	b.n	8013818 <_strtod_l+0xf8>
 8013846:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801384a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801384e:	e7e3      	b.n	8013818 <_strtod_l+0xf8>
 8013850:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013852:	1c5a      	adds	r2, r3, #1
 8013854:	921b      	str	r2, [sp, #108]	; 0x6c
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b30      	cmp	r3, #48	; 0x30
 801385a:	d0f9      	beq.n	8013850 <_strtod_l+0x130>
 801385c:	2b00      	cmp	r3, #0
 801385e:	d0a0      	beq.n	80137a2 <_strtod_l+0x82>
 8013860:	2301      	movs	r3, #1
 8013862:	9307      	str	r3, [sp, #28]
 8013864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013866:	220a      	movs	r2, #10
 8013868:	9308      	str	r3, [sp, #32]
 801386a:	2300      	movs	r3, #0
 801386c:	469b      	mov	fp, r3
 801386e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013872:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013874:	7805      	ldrb	r5, [r0, #0]
 8013876:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801387a:	b2d9      	uxtb	r1, r3
 801387c:	2909      	cmp	r1, #9
 801387e:	d926      	bls.n	80138ce <_strtod_l+0x1ae>
 8013880:	4622      	mov	r2, r4
 8013882:	4639      	mov	r1, r7
 8013884:	f003 f98c 	bl	8016ba0 <strncmp>
 8013888:	2800      	cmp	r0, #0
 801388a:	d032      	beq.n	80138f2 <_strtod_l+0x1d2>
 801388c:	2000      	movs	r0, #0
 801388e:	462b      	mov	r3, r5
 8013890:	465c      	mov	r4, fp
 8013892:	4602      	mov	r2, r0
 8013894:	9004      	str	r0, [sp, #16]
 8013896:	2b65      	cmp	r3, #101	; 0x65
 8013898:	d001      	beq.n	801389e <_strtod_l+0x17e>
 801389a:	2b45      	cmp	r3, #69	; 0x45
 801389c:	d113      	bne.n	80138c6 <_strtod_l+0x1a6>
 801389e:	b91c      	cbnz	r4, 80138a8 <_strtod_l+0x188>
 80138a0:	9b07      	ldr	r3, [sp, #28]
 80138a2:	4303      	orrs	r3, r0
 80138a4:	d099      	beq.n	80137da <_strtod_l+0xba>
 80138a6:	2400      	movs	r4, #0
 80138a8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80138aa:	1c73      	adds	r3, r6, #1
 80138ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80138ae:	7873      	ldrb	r3, [r6, #1]
 80138b0:	2b2b      	cmp	r3, #43	; 0x2b
 80138b2:	d078      	beq.n	80139a6 <_strtod_l+0x286>
 80138b4:	2b2d      	cmp	r3, #45	; 0x2d
 80138b6:	d07b      	beq.n	80139b0 <_strtod_l+0x290>
 80138b8:	2700      	movs	r7, #0
 80138ba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80138be:	2909      	cmp	r1, #9
 80138c0:	f240 8082 	bls.w	80139c8 <_strtod_l+0x2a8>
 80138c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80138c6:	2500      	movs	r5, #0
 80138c8:	e09e      	b.n	8013a08 <_strtod_l+0x2e8>
 80138ca:	2300      	movs	r3, #0
 80138cc:	e7c9      	b.n	8013862 <_strtod_l+0x142>
 80138ce:	f1bb 0f08 	cmp.w	fp, #8
 80138d2:	bfd5      	itete	le
 80138d4:	9906      	ldrle	r1, [sp, #24]
 80138d6:	9905      	ldrgt	r1, [sp, #20]
 80138d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80138dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80138e0:	f100 0001 	add.w	r0, r0, #1
 80138e4:	bfd4      	ite	le
 80138e6:	9306      	strle	r3, [sp, #24]
 80138e8:	9305      	strgt	r3, [sp, #20]
 80138ea:	f10b 0b01 	add.w	fp, fp, #1
 80138ee:	901b      	str	r0, [sp, #108]	; 0x6c
 80138f0:	e7bf      	b.n	8013872 <_strtod_l+0x152>
 80138f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138f4:	191a      	adds	r2, r3, r4
 80138f6:	921b      	str	r2, [sp, #108]	; 0x6c
 80138f8:	5d1b      	ldrb	r3, [r3, r4]
 80138fa:	f1bb 0f00 	cmp.w	fp, #0
 80138fe:	d036      	beq.n	801396e <_strtod_l+0x24e>
 8013900:	465c      	mov	r4, fp
 8013902:	9004      	str	r0, [sp, #16]
 8013904:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013908:	2a09      	cmp	r2, #9
 801390a:	d912      	bls.n	8013932 <_strtod_l+0x212>
 801390c:	2201      	movs	r2, #1
 801390e:	e7c2      	b.n	8013896 <_strtod_l+0x176>
 8013910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013912:	3001      	adds	r0, #1
 8013914:	1c5a      	adds	r2, r3, #1
 8013916:	921b      	str	r2, [sp, #108]	; 0x6c
 8013918:	785b      	ldrb	r3, [r3, #1]
 801391a:	2b30      	cmp	r3, #48	; 0x30
 801391c:	d0f8      	beq.n	8013910 <_strtod_l+0x1f0>
 801391e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013922:	2a08      	cmp	r2, #8
 8013924:	f200 84dc 	bhi.w	80142e0 <_strtod_l+0xbc0>
 8013928:	9004      	str	r0, [sp, #16]
 801392a:	2000      	movs	r0, #0
 801392c:	4604      	mov	r4, r0
 801392e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013930:	9208      	str	r2, [sp, #32]
 8013932:	3b30      	subs	r3, #48	; 0x30
 8013934:	f100 0201 	add.w	r2, r0, #1
 8013938:	d013      	beq.n	8013962 <_strtod_l+0x242>
 801393a:	9904      	ldr	r1, [sp, #16]
 801393c:	1905      	adds	r5, r0, r4
 801393e:	4411      	add	r1, r2
 8013940:	9104      	str	r1, [sp, #16]
 8013942:	4622      	mov	r2, r4
 8013944:	210a      	movs	r1, #10
 8013946:	42aa      	cmp	r2, r5
 8013948:	d113      	bne.n	8013972 <_strtod_l+0x252>
 801394a:	1822      	adds	r2, r4, r0
 801394c:	2a08      	cmp	r2, #8
 801394e:	f104 0401 	add.w	r4, r4, #1
 8013952:	4404      	add	r4, r0
 8013954:	dc1b      	bgt.n	801398e <_strtod_l+0x26e>
 8013956:	220a      	movs	r2, #10
 8013958:	9906      	ldr	r1, [sp, #24]
 801395a:	fb02 3301 	mla	r3, r2, r1, r3
 801395e:	9306      	str	r3, [sp, #24]
 8013960:	2200      	movs	r2, #0
 8013962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013964:	4610      	mov	r0, r2
 8013966:	1c59      	adds	r1, r3, #1
 8013968:	911b      	str	r1, [sp, #108]	; 0x6c
 801396a:	785b      	ldrb	r3, [r3, #1]
 801396c:	e7ca      	b.n	8013904 <_strtod_l+0x1e4>
 801396e:	4658      	mov	r0, fp
 8013970:	e7d3      	b.n	801391a <_strtod_l+0x1fa>
 8013972:	2a08      	cmp	r2, #8
 8013974:	dc04      	bgt.n	8013980 <_strtod_l+0x260>
 8013976:	9f06      	ldr	r7, [sp, #24]
 8013978:	434f      	muls	r7, r1
 801397a:	9706      	str	r7, [sp, #24]
 801397c:	3201      	adds	r2, #1
 801397e:	e7e2      	b.n	8013946 <_strtod_l+0x226>
 8013980:	1c57      	adds	r7, r2, #1
 8013982:	2f10      	cmp	r7, #16
 8013984:	bfde      	ittt	le
 8013986:	9f05      	ldrle	r7, [sp, #20]
 8013988:	434f      	mulle	r7, r1
 801398a:	9705      	strle	r7, [sp, #20]
 801398c:	e7f6      	b.n	801397c <_strtod_l+0x25c>
 801398e:	2c10      	cmp	r4, #16
 8013990:	bfdf      	itttt	le
 8013992:	220a      	movle	r2, #10
 8013994:	9905      	ldrle	r1, [sp, #20]
 8013996:	fb02 3301 	mlale	r3, r2, r1, r3
 801399a:	9305      	strle	r3, [sp, #20]
 801399c:	e7e0      	b.n	8013960 <_strtod_l+0x240>
 801399e:	2300      	movs	r3, #0
 80139a0:	2201      	movs	r2, #1
 80139a2:	9304      	str	r3, [sp, #16]
 80139a4:	e77c      	b.n	80138a0 <_strtod_l+0x180>
 80139a6:	2700      	movs	r7, #0
 80139a8:	1cb3      	adds	r3, r6, #2
 80139aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80139ac:	78b3      	ldrb	r3, [r6, #2]
 80139ae:	e784      	b.n	80138ba <_strtod_l+0x19a>
 80139b0:	2701      	movs	r7, #1
 80139b2:	e7f9      	b.n	80139a8 <_strtod_l+0x288>
 80139b4:	08017e00 	.word	0x08017e00
 80139b8:	08017bac 	.word	0x08017bac
 80139bc:	7ff00000 	.word	0x7ff00000
 80139c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139c2:	1c59      	adds	r1, r3, #1
 80139c4:	911b      	str	r1, [sp, #108]	; 0x6c
 80139c6:	785b      	ldrb	r3, [r3, #1]
 80139c8:	2b30      	cmp	r3, #48	; 0x30
 80139ca:	d0f9      	beq.n	80139c0 <_strtod_l+0x2a0>
 80139cc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80139d0:	2908      	cmp	r1, #8
 80139d2:	f63f af78 	bhi.w	80138c6 <_strtod_l+0x1a6>
 80139d6:	f04f 0e0a 	mov.w	lr, #10
 80139da:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80139de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139e0:	9309      	str	r3, [sp, #36]	; 0x24
 80139e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139e4:	1c59      	adds	r1, r3, #1
 80139e6:	911b      	str	r1, [sp, #108]	; 0x6c
 80139e8:	785b      	ldrb	r3, [r3, #1]
 80139ea:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80139ee:	2d09      	cmp	r5, #9
 80139f0:	d935      	bls.n	8013a5e <_strtod_l+0x33e>
 80139f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80139f4:	1b49      	subs	r1, r1, r5
 80139f6:	2908      	cmp	r1, #8
 80139f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80139fc:	dc02      	bgt.n	8013a04 <_strtod_l+0x2e4>
 80139fe:	4565      	cmp	r5, ip
 8013a00:	bfa8      	it	ge
 8013a02:	4665      	movge	r5, ip
 8013a04:	b107      	cbz	r7, 8013a08 <_strtod_l+0x2e8>
 8013a06:	426d      	negs	r5, r5
 8013a08:	2c00      	cmp	r4, #0
 8013a0a:	d14c      	bne.n	8013aa6 <_strtod_l+0x386>
 8013a0c:	9907      	ldr	r1, [sp, #28]
 8013a0e:	4301      	orrs	r1, r0
 8013a10:	f47f aec7 	bne.w	80137a2 <_strtod_l+0x82>
 8013a14:	2a00      	cmp	r2, #0
 8013a16:	f47f aee0 	bne.w	80137da <_strtod_l+0xba>
 8013a1a:	2b69      	cmp	r3, #105	; 0x69
 8013a1c:	d026      	beq.n	8013a6c <_strtod_l+0x34c>
 8013a1e:	dc23      	bgt.n	8013a68 <_strtod_l+0x348>
 8013a20:	2b49      	cmp	r3, #73	; 0x49
 8013a22:	d023      	beq.n	8013a6c <_strtod_l+0x34c>
 8013a24:	2b4e      	cmp	r3, #78	; 0x4e
 8013a26:	f47f aed8 	bne.w	80137da <_strtod_l+0xba>
 8013a2a:	499c      	ldr	r1, [pc, #624]	; (8013c9c <_strtod_l+0x57c>)
 8013a2c:	a81b      	add	r0, sp, #108	; 0x6c
 8013a2e:	f001 fe4f 	bl	80156d0 <__match>
 8013a32:	2800      	cmp	r0, #0
 8013a34:	f43f aed1 	beq.w	80137da <_strtod_l+0xba>
 8013a38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	2b28      	cmp	r3, #40	; 0x28
 8013a3e:	d12c      	bne.n	8013a9a <_strtod_l+0x37a>
 8013a40:	4997      	ldr	r1, [pc, #604]	; (8013ca0 <_strtod_l+0x580>)
 8013a42:	aa1e      	add	r2, sp, #120	; 0x78
 8013a44:	a81b      	add	r0, sp, #108	; 0x6c
 8013a46:	f001 fe57 	bl	80156f8 <__hexnan>
 8013a4a:	2805      	cmp	r0, #5
 8013a4c:	d125      	bne.n	8013a9a <_strtod_l+0x37a>
 8013a4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a50:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013a54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013a58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013a5c:	e6a1      	b.n	80137a2 <_strtod_l+0x82>
 8013a5e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8013a62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013a66:	e7bc      	b.n	80139e2 <_strtod_l+0x2c2>
 8013a68:	2b6e      	cmp	r3, #110	; 0x6e
 8013a6a:	e7dc      	b.n	8013a26 <_strtod_l+0x306>
 8013a6c:	498d      	ldr	r1, [pc, #564]	; (8013ca4 <_strtod_l+0x584>)
 8013a6e:	a81b      	add	r0, sp, #108	; 0x6c
 8013a70:	f001 fe2e 	bl	80156d0 <__match>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f43f aeb0 	beq.w	80137da <_strtod_l+0xba>
 8013a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a7c:	498a      	ldr	r1, [pc, #552]	; (8013ca8 <_strtod_l+0x588>)
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	a81b      	add	r0, sp, #108	; 0x6c
 8013a82:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a84:	f001 fe24 	bl	80156d0 <__match>
 8013a88:	b910      	cbnz	r0, 8013a90 <_strtod_l+0x370>
 8013a8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a90:	f04f 0800 	mov.w	r8, #0
 8013a94:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8013cb8 <_strtod_l+0x598>
 8013a98:	e683      	b.n	80137a2 <_strtod_l+0x82>
 8013a9a:	4884      	ldr	r0, [pc, #528]	; (8013cac <_strtod_l+0x58c>)
 8013a9c:	f003 f840 	bl	8016b20 <nan>
 8013aa0:	4680      	mov	r8, r0
 8013aa2:	4689      	mov	r9, r1
 8013aa4:	e67d      	b.n	80137a2 <_strtod_l+0x82>
 8013aa6:	9b04      	ldr	r3, [sp, #16]
 8013aa8:	f1bb 0f00 	cmp.w	fp, #0
 8013aac:	bf08      	it	eq
 8013aae:	46a3      	moveq	fp, r4
 8013ab0:	1aeb      	subs	r3, r5, r3
 8013ab2:	2c10      	cmp	r4, #16
 8013ab4:	9806      	ldr	r0, [sp, #24]
 8013ab6:	4626      	mov	r6, r4
 8013ab8:	9307      	str	r3, [sp, #28]
 8013aba:	bfa8      	it	ge
 8013abc:	2610      	movge	r6, #16
 8013abe:	f7ec fca9 	bl	8000414 <__aeabi_ui2d>
 8013ac2:	2c09      	cmp	r4, #9
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4689      	mov	r9, r1
 8013ac8:	dd13      	ble.n	8013af2 <_strtod_l+0x3d2>
 8013aca:	4b79      	ldr	r3, [pc, #484]	; (8013cb0 <_strtod_l+0x590>)
 8013acc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013ad0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013ad4:	f7ec fd18 	bl	8000508 <__aeabi_dmul>
 8013ad8:	4680      	mov	r8, r0
 8013ada:	9805      	ldr	r0, [sp, #20]
 8013adc:	4689      	mov	r9, r1
 8013ade:	f7ec fc99 	bl	8000414 <__aeabi_ui2d>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	4640      	mov	r0, r8
 8013ae8:	4649      	mov	r1, r9
 8013aea:	f7ec fb57 	bl	800019c <__adddf3>
 8013aee:	4680      	mov	r8, r0
 8013af0:	4689      	mov	r9, r1
 8013af2:	2c0f      	cmp	r4, #15
 8013af4:	dc36      	bgt.n	8013b64 <_strtod_l+0x444>
 8013af6:	9b07      	ldr	r3, [sp, #28]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f43f ae52 	beq.w	80137a2 <_strtod_l+0x82>
 8013afe:	dd22      	ble.n	8013b46 <_strtod_l+0x426>
 8013b00:	2b16      	cmp	r3, #22
 8013b02:	dc09      	bgt.n	8013b18 <_strtod_l+0x3f8>
 8013b04:	4c6a      	ldr	r4, [pc, #424]	; (8013cb0 <_strtod_l+0x590>)
 8013b06:	4642      	mov	r2, r8
 8013b08:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8013b0c:	464b      	mov	r3, r9
 8013b0e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013b12:	f7ec fcf9 	bl	8000508 <__aeabi_dmul>
 8013b16:	e7c3      	b.n	8013aa0 <_strtod_l+0x380>
 8013b18:	9a07      	ldr	r2, [sp, #28]
 8013b1a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	db20      	blt.n	8013b64 <_strtod_l+0x444>
 8013b22:	4d63      	ldr	r5, [pc, #396]	; (8013cb0 <_strtod_l+0x590>)
 8013b24:	f1c4 040f 	rsb	r4, r4, #15
 8013b28:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013b2c:	4642      	mov	r2, r8
 8013b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b32:	464b      	mov	r3, r9
 8013b34:	f7ec fce8 	bl	8000508 <__aeabi_dmul>
 8013b38:	9b07      	ldr	r3, [sp, #28]
 8013b3a:	1b1c      	subs	r4, r3, r4
 8013b3c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b44:	e7e5      	b.n	8013b12 <_strtod_l+0x3f2>
 8013b46:	9b07      	ldr	r3, [sp, #28]
 8013b48:	3316      	adds	r3, #22
 8013b4a:	db0b      	blt.n	8013b64 <_strtod_l+0x444>
 8013b4c:	9b04      	ldr	r3, [sp, #16]
 8013b4e:	4a58      	ldr	r2, [pc, #352]	; (8013cb0 <_strtod_l+0x590>)
 8013b50:	1b5d      	subs	r5, r3, r5
 8013b52:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013b56:	4640      	mov	r0, r8
 8013b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	f7ec fdfd 	bl	800075c <__aeabi_ddiv>
 8013b62:	e79d      	b.n	8013aa0 <_strtod_l+0x380>
 8013b64:	9b07      	ldr	r3, [sp, #28]
 8013b66:	1ba6      	subs	r6, r4, r6
 8013b68:	441e      	add	r6, r3
 8013b6a:	2e00      	cmp	r6, #0
 8013b6c:	dd71      	ble.n	8013c52 <_strtod_l+0x532>
 8013b6e:	f016 030f 	ands.w	r3, r6, #15
 8013b72:	d00a      	beq.n	8013b8a <_strtod_l+0x46a>
 8013b74:	494e      	ldr	r1, [pc, #312]	; (8013cb0 <_strtod_l+0x590>)
 8013b76:	4642      	mov	r2, r8
 8013b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b80:	464b      	mov	r3, r9
 8013b82:	f7ec fcc1 	bl	8000508 <__aeabi_dmul>
 8013b86:	4680      	mov	r8, r0
 8013b88:	4689      	mov	r9, r1
 8013b8a:	f036 060f 	bics.w	r6, r6, #15
 8013b8e:	d050      	beq.n	8013c32 <_strtod_l+0x512>
 8013b90:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8013b94:	dd27      	ble.n	8013be6 <_strtod_l+0x4c6>
 8013b96:	f04f 0b00 	mov.w	fp, #0
 8013b9a:	f8cd b010 	str.w	fp, [sp, #16]
 8013b9e:	f8cd b020 	str.w	fp, [sp, #32]
 8013ba2:	f8cd b018 	str.w	fp, [sp, #24]
 8013ba6:	2322      	movs	r3, #34	; 0x22
 8013ba8:	f04f 0800 	mov.w	r8, #0
 8013bac:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013cb8 <_strtod_l+0x598>
 8013bb0:	f8ca 3000 	str.w	r3, [sl]
 8013bb4:	9b08      	ldr	r3, [sp, #32]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f43f adf3 	beq.w	80137a2 <_strtod_l+0x82>
 8013bbc:	4650      	mov	r0, sl
 8013bbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bc0:	f001 feaa 	bl	8015918 <_Bfree>
 8013bc4:	4650      	mov	r0, sl
 8013bc6:	9906      	ldr	r1, [sp, #24]
 8013bc8:	f001 fea6 	bl	8015918 <_Bfree>
 8013bcc:	4650      	mov	r0, sl
 8013bce:	9904      	ldr	r1, [sp, #16]
 8013bd0:	f001 fea2 	bl	8015918 <_Bfree>
 8013bd4:	4650      	mov	r0, sl
 8013bd6:	9908      	ldr	r1, [sp, #32]
 8013bd8:	f001 fe9e 	bl	8015918 <_Bfree>
 8013bdc:	4659      	mov	r1, fp
 8013bde:	4650      	mov	r0, sl
 8013be0:	f001 fe9a 	bl	8015918 <_Bfree>
 8013be4:	e5dd      	b.n	80137a2 <_strtod_l+0x82>
 8013be6:	2300      	movs	r3, #0
 8013be8:	4640      	mov	r0, r8
 8013bea:	4649      	mov	r1, r9
 8013bec:	461f      	mov	r7, r3
 8013bee:	1136      	asrs	r6, r6, #4
 8013bf0:	2e01      	cmp	r6, #1
 8013bf2:	dc21      	bgt.n	8013c38 <_strtod_l+0x518>
 8013bf4:	b10b      	cbz	r3, 8013bfa <_strtod_l+0x4da>
 8013bf6:	4680      	mov	r8, r0
 8013bf8:	4689      	mov	r9, r1
 8013bfa:	4b2e      	ldr	r3, [pc, #184]	; (8013cb4 <_strtod_l+0x594>)
 8013bfc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013c00:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013c04:	4642      	mov	r2, r8
 8013c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013c0a:	464b      	mov	r3, r9
 8013c0c:	f7ec fc7c 	bl	8000508 <__aeabi_dmul>
 8013c10:	4b29      	ldr	r3, [pc, #164]	; (8013cb8 <_strtod_l+0x598>)
 8013c12:	460a      	mov	r2, r1
 8013c14:	400b      	ands	r3, r1
 8013c16:	4929      	ldr	r1, [pc, #164]	; (8013cbc <_strtod_l+0x59c>)
 8013c18:	4680      	mov	r8, r0
 8013c1a:	428b      	cmp	r3, r1
 8013c1c:	d8bb      	bhi.n	8013b96 <_strtod_l+0x476>
 8013c1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013c22:	428b      	cmp	r3, r1
 8013c24:	bf86      	itte	hi
 8013c26:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8013c2a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8013cc0 <_strtod_l+0x5a0>
 8013c2e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013c32:	2300      	movs	r3, #0
 8013c34:	9305      	str	r3, [sp, #20]
 8013c36:	e07e      	b.n	8013d36 <_strtod_l+0x616>
 8013c38:	07f2      	lsls	r2, r6, #31
 8013c3a:	d507      	bpl.n	8013c4c <_strtod_l+0x52c>
 8013c3c:	4b1d      	ldr	r3, [pc, #116]	; (8013cb4 <_strtod_l+0x594>)
 8013c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c46:	f7ec fc5f 	bl	8000508 <__aeabi_dmul>
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	3701      	adds	r7, #1
 8013c4e:	1076      	asrs	r6, r6, #1
 8013c50:	e7ce      	b.n	8013bf0 <_strtod_l+0x4d0>
 8013c52:	d0ee      	beq.n	8013c32 <_strtod_l+0x512>
 8013c54:	4276      	negs	r6, r6
 8013c56:	f016 020f 	ands.w	r2, r6, #15
 8013c5a:	d00a      	beq.n	8013c72 <_strtod_l+0x552>
 8013c5c:	4b14      	ldr	r3, [pc, #80]	; (8013cb0 <_strtod_l+0x590>)
 8013c5e:	4640      	mov	r0, r8
 8013c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c64:	4649      	mov	r1, r9
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	f7ec fd77 	bl	800075c <__aeabi_ddiv>
 8013c6e:	4680      	mov	r8, r0
 8013c70:	4689      	mov	r9, r1
 8013c72:	1136      	asrs	r6, r6, #4
 8013c74:	d0dd      	beq.n	8013c32 <_strtod_l+0x512>
 8013c76:	2e1f      	cmp	r6, #31
 8013c78:	dd24      	ble.n	8013cc4 <_strtod_l+0x5a4>
 8013c7a:	f04f 0b00 	mov.w	fp, #0
 8013c7e:	f8cd b010 	str.w	fp, [sp, #16]
 8013c82:	f8cd b020 	str.w	fp, [sp, #32]
 8013c86:	f8cd b018 	str.w	fp, [sp, #24]
 8013c8a:	2322      	movs	r3, #34	; 0x22
 8013c8c:	f04f 0800 	mov.w	r8, #0
 8013c90:	f04f 0900 	mov.w	r9, #0
 8013c94:	f8ca 3000 	str.w	r3, [sl]
 8013c98:	e78c      	b.n	8013bb4 <_strtod_l+0x494>
 8013c9a:	bf00      	nop
 8013c9c:	08017b81 	.word	0x08017b81
 8013ca0:	08017bc0 	.word	0x08017bc0
 8013ca4:	08017b79 	.word	0x08017b79
 8013ca8:	08017d04 	.word	0x08017d04
 8013cac:	08017fdb 	.word	0x08017fdb
 8013cb0:	08017ea0 	.word	0x08017ea0
 8013cb4:	08017e78 	.word	0x08017e78
 8013cb8:	7ff00000 	.word	0x7ff00000
 8013cbc:	7ca00000 	.word	0x7ca00000
 8013cc0:	7fefffff 	.word	0x7fefffff
 8013cc4:	f016 0310 	ands.w	r3, r6, #16
 8013cc8:	bf18      	it	ne
 8013cca:	236a      	movne	r3, #106	; 0x6a
 8013ccc:	4640      	mov	r0, r8
 8013cce:	9305      	str	r3, [sp, #20]
 8013cd0:	4649      	mov	r1, r9
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	4fb2      	ldr	r7, [pc, #712]	; (8013fa0 <_strtod_l+0x880>)
 8013cd6:	07f2      	lsls	r2, r6, #31
 8013cd8:	d504      	bpl.n	8013ce4 <_strtod_l+0x5c4>
 8013cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cde:	f7ec fc13 	bl	8000508 <__aeabi_dmul>
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	1076      	asrs	r6, r6, #1
 8013ce6:	f107 0708 	add.w	r7, r7, #8
 8013cea:	d1f4      	bne.n	8013cd6 <_strtod_l+0x5b6>
 8013cec:	b10b      	cbz	r3, 8013cf2 <_strtod_l+0x5d2>
 8013cee:	4680      	mov	r8, r0
 8013cf0:	4689      	mov	r9, r1
 8013cf2:	9b05      	ldr	r3, [sp, #20]
 8013cf4:	b1bb      	cbz	r3, 8013d26 <_strtod_l+0x606>
 8013cf6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8013cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	4649      	mov	r1, r9
 8013d02:	dd10      	ble.n	8013d26 <_strtod_l+0x606>
 8013d04:	2b1f      	cmp	r3, #31
 8013d06:	f340 812b 	ble.w	8013f60 <_strtod_l+0x840>
 8013d0a:	2b34      	cmp	r3, #52	; 0x34
 8013d0c:	bfd8      	it	le
 8013d0e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8013d12:	f04f 0800 	mov.w	r8, #0
 8013d16:	bfcf      	iteee	gt
 8013d18:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013d1c:	3b20      	suble	r3, #32
 8013d1e:	fa02 f303 	lslle.w	r3, r2, r3
 8013d22:	ea03 0901 	andle.w	r9, r3, r1
 8013d26:	2200      	movs	r2, #0
 8013d28:	2300      	movs	r3, #0
 8013d2a:	4640      	mov	r0, r8
 8013d2c:	4649      	mov	r1, r9
 8013d2e:	f7ec fe53 	bl	80009d8 <__aeabi_dcmpeq>
 8013d32:	2800      	cmp	r0, #0
 8013d34:	d1a1      	bne.n	8013c7a <_strtod_l+0x55a>
 8013d36:	9b06      	ldr	r3, [sp, #24]
 8013d38:	465a      	mov	r2, fp
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	4650      	mov	r0, sl
 8013d3e:	4623      	mov	r3, r4
 8013d40:	9908      	ldr	r1, [sp, #32]
 8013d42:	f001 fe55 	bl	80159f0 <__s2b>
 8013d46:	9008      	str	r0, [sp, #32]
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	f43f af24 	beq.w	8013b96 <_strtod_l+0x476>
 8013d4e:	9b04      	ldr	r3, [sp, #16]
 8013d50:	f04f 0b00 	mov.w	fp, #0
 8013d54:	1b5d      	subs	r5, r3, r5
 8013d56:	9b07      	ldr	r3, [sp, #28]
 8013d58:	f8cd b010 	str.w	fp, [sp, #16]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	bfb4      	ite	lt
 8013d60:	462b      	movlt	r3, r5
 8013d62:	2300      	movge	r3, #0
 8013d64:	930e      	str	r3, [sp, #56]	; 0x38
 8013d66:	9b07      	ldr	r3, [sp, #28]
 8013d68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d6c:	9316      	str	r3, [sp, #88]	; 0x58
 8013d6e:	9b08      	ldr	r3, [sp, #32]
 8013d70:	4650      	mov	r0, sl
 8013d72:	6859      	ldr	r1, [r3, #4]
 8013d74:	f001 fd90 	bl	8015898 <_Balloc>
 8013d78:	9006      	str	r0, [sp, #24]
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	f43f af13 	beq.w	8013ba6 <_strtod_l+0x486>
 8013d80:	9b08      	ldr	r3, [sp, #32]
 8013d82:	300c      	adds	r0, #12
 8013d84:	691a      	ldr	r2, [r3, #16]
 8013d86:	f103 010c 	add.w	r1, r3, #12
 8013d8a:	3202      	adds	r2, #2
 8013d8c:	0092      	lsls	r2, r2, #2
 8013d8e:	f7fe fc47 	bl	8012620 <memcpy>
 8013d92:	ab1e      	add	r3, sp, #120	; 0x78
 8013d94:	9301      	str	r3, [sp, #4]
 8013d96:	ab1d      	add	r3, sp, #116	; 0x74
 8013d98:	9300      	str	r3, [sp, #0]
 8013d9a:	4642      	mov	r2, r8
 8013d9c:	464b      	mov	r3, r9
 8013d9e:	4650      	mov	r0, sl
 8013da0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8013da4:	f002 f962 	bl	801606c <__d2b>
 8013da8:	901c      	str	r0, [sp, #112]	; 0x70
 8013daa:	2800      	cmp	r0, #0
 8013dac:	f43f aefb 	beq.w	8013ba6 <_strtod_l+0x486>
 8013db0:	2101      	movs	r1, #1
 8013db2:	4650      	mov	r0, sl
 8013db4:	f001 feb4 	bl	8015b20 <__i2b>
 8013db8:	4603      	mov	r3, r0
 8013dba:	9004      	str	r0, [sp, #16]
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	f43f aef2 	beq.w	8013ba6 <_strtod_l+0x486>
 8013dc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013dc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013dc6:	2d00      	cmp	r5, #0
 8013dc8:	bfab      	itete	ge
 8013dca:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013dcc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013dce:	18ee      	addge	r6, r5, r3
 8013dd0:	1b5c      	sublt	r4, r3, r5
 8013dd2:	9b05      	ldr	r3, [sp, #20]
 8013dd4:	bfa8      	it	ge
 8013dd6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8013dd8:	eba5 0503 	sub.w	r5, r5, r3
 8013ddc:	4415      	add	r5, r2
 8013dde:	4b71      	ldr	r3, [pc, #452]	; (8013fa4 <_strtod_l+0x884>)
 8013de0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8013de4:	bfb8      	it	lt
 8013de6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8013de8:	429d      	cmp	r5, r3
 8013dea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013dee:	f280 80c9 	bge.w	8013f84 <_strtod_l+0x864>
 8013df2:	1b5b      	subs	r3, r3, r5
 8013df4:	2b1f      	cmp	r3, #31
 8013df6:	f04f 0701 	mov.w	r7, #1
 8013dfa:	eba2 0203 	sub.w	r2, r2, r3
 8013dfe:	f300 80b6 	bgt.w	8013f6e <_strtod_l+0x84e>
 8013e02:	2500      	movs	r5, #0
 8013e04:	fa07 f303 	lsl.w	r3, r7, r3
 8013e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e0a:	18b7      	adds	r7, r6, r2
 8013e0c:	9b05      	ldr	r3, [sp, #20]
 8013e0e:	42be      	cmp	r6, r7
 8013e10:	4414      	add	r4, r2
 8013e12:	441c      	add	r4, r3
 8013e14:	4633      	mov	r3, r6
 8013e16:	bfa8      	it	ge
 8013e18:	463b      	movge	r3, r7
 8013e1a:	42a3      	cmp	r3, r4
 8013e1c:	bfa8      	it	ge
 8013e1e:	4623      	movge	r3, r4
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	bfc2      	ittt	gt
 8013e24:	1aff      	subgt	r7, r7, r3
 8013e26:	1ae4      	subgt	r4, r4, r3
 8013e28:	1af6      	subgt	r6, r6, r3
 8013e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	dd17      	ble.n	8013e60 <_strtod_l+0x740>
 8013e30:	461a      	mov	r2, r3
 8013e32:	4650      	mov	r0, sl
 8013e34:	9904      	ldr	r1, [sp, #16]
 8013e36:	f001 ff2d 	bl	8015c94 <__pow5mult>
 8013e3a:	9004      	str	r0, [sp, #16]
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	f43f aeb2 	beq.w	8013ba6 <_strtod_l+0x486>
 8013e42:	4601      	mov	r1, r0
 8013e44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e46:	4650      	mov	r0, sl
 8013e48:	f001 fe80 	bl	8015b4c <__multiply>
 8013e4c:	9009      	str	r0, [sp, #36]	; 0x24
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	f43f aea9 	beq.w	8013ba6 <_strtod_l+0x486>
 8013e54:	4650      	mov	r0, sl
 8013e56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e58:	f001 fd5e 	bl	8015918 <_Bfree>
 8013e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e5e:	931c      	str	r3, [sp, #112]	; 0x70
 8013e60:	2f00      	cmp	r7, #0
 8013e62:	f300 8093 	bgt.w	8013f8c <_strtod_l+0x86c>
 8013e66:	9b07      	ldr	r3, [sp, #28]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	dd08      	ble.n	8013e7e <_strtod_l+0x75e>
 8013e6c:	4650      	mov	r0, sl
 8013e6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013e70:	9906      	ldr	r1, [sp, #24]
 8013e72:	f001 ff0f 	bl	8015c94 <__pow5mult>
 8013e76:	9006      	str	r0, [sp, #24]
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	f43f ae94 	beq.w	8013ba6 <_strtod_l+0x486>
 8013e7e:	2c00      	cmp	r4, #0
 8013e80:	dd08      	ble.n	8013e94 <_strtod_l+0x774>
 8013e82:	4622      	mov	r2, r4
 8013e84:	4650      	mov	r0, sl
 8013e86:	9906      	ldr	r1, [sp, #24]
 8013e88:	f001 ff5e 	bl	8015d48 <__lshift>
 8013e8c:	9006      	str	r0, [sp, #24]
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f43f ae89 	beq.w	8013ba6 <_strtod_l+0x486>
 8013e94:	2e00      	cmp	r6, #0
 8013e96:	dd08      	ble.n	8013eaa <_strtod_l+0x78a>
 8013e98:	4632      	mov	r2, r6
 8013e9a:	4650      	mov	r0, sl
 8013e9c:	9904      	ldr	r1, [sp, #16]
 8013e9e:	f001 ff53 	bl	8015d48 <__lshift>
 8013ea2:	9004      	str	r0, [sp, #16]
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	f43f ae7e 	beq.w	8013ba6 <_strtod_l+0x486>
 8013eaa:	4650      	mov	r0, sl
 8013eac:	9a06      	ldr	r2, [sp, #24]
 8013eae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013eb0:	f001 ffd2 	bl	8015e58 <__mdiff>
 8013eb4:	4683      	mov	fp, r0
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	f43f ae75 	beq.w	8013ba6 <_strtod_l+0x486>
 8013ebc:	2400      	movs	r4, #0
 8013ebe:	68c3      	ldr	r3, [r0, #12]
 8013ec0:	9904      	ldr	r1, [sp, #16]
 8013ec2:	60c4      	str	r4, [r0, #12]
 8013ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8013ec6:	f001 ffab 	bl	8015e20 <__mcmp>
 8013eca:	42a0      	cmp	r0, r4
 8013ecc:	da70      	bge.n	8013fb0 <_strtod_l+0x890>
 8013ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ed0:	ea53 0308 	orrs.w	r3, r3, r8
 8013ed4:	f040 8096 	bne.w	8014004 <_strtod_l+0x8e4>
 8013ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f040 8091 	bne.w	8014004 <_strtod_l+0x8e4>
 8013ee2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ee6:	0d1b      	lsrs	r3, r3, #20
 8013ee8:	051b      	lsls	r3, r3, #20
 8013eea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013eee:	f240 8089 	bls.w	8014004 <_strtod_l+0x8e4>
 8013ef2:	f8db 3014 	ldr.w	r3, [fp, #20]
 8013ef6:	b923      	cbnz	r3, 8013f02 <_strtod_l+0x7e2>
 8013ef8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	f340 8081 	ble.w	8014004 <_strtod_l+0x8e4>
 8013f02:	4659      	mov	r1, fp
 8013f04:	2201      	movs	r2, #1
 8013f06:	4650      	mov	r0, sl
 8013f08:	f001 ff1e 	bl	8015d48 <__lshift>
 8013f0c:	9904      	ldr	r1, [sp, #16]
 8013f0e:	4683      	mov	fp, r0
 8013f10:	f001 ff86 	bl	8015e20 <__mcmp>
 8013f14:	2800      	cmp	r0, #0
 8013f16:	dd75      	ble.n	8014004 <_strtod_l+0x8e4>
 8013f18:	9905      	ldr	r1, [sp, #20]
 8013f1a:	464b      	mov	r3, r9
 8013f1c:	4a22      	ldr	r2, [pc, #136]	; (8013fa8 <_strtod_l+0x888>)
 8013f1e:	2900      	cmp	r1, #0
 8013f20:	f000 8091 	beq.w	8014046 <_strtod_l+0x926>
 8013f24:	ea02 0109 	and.w	r1, r2, r9
 8013f28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013f2c:	f300 808b 	bgt.w	8014046 <_strtod_l+0x926>
 8013f30:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013f34:	f77f aea9 	ble.w	8013c8a <_strtod_l+0x56a>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4a1c      	ldr	r2, [pc, #112]	; (8013fac <_strtod_l+0x88c>)
 8013f3c:	4640      	mov	r0, r8
 8013f3e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013f42:	4649      	mov	r1, r9
 8013f44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013f48:	f7ec fade 	bl	8000508 <__aeabi_dmul>
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	4303      	orrs	r3, r0
 8013f50:	bf08      	it	eq
 8013f52:	2322      	moveq	r3, #34	; 0x22
 8013f54:	4680      	mov	r8, r0
 8013f56:	4689      	mov	r9, r1
 8013f58:	bf08      	it	eq
 8013f5a:	f8ca 3000 	streq.w	r3, [sl]
 8013f5e:	e62d      	b.n	8013bbc <_strtod_l+0x49c>
 8013f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f64:	fa02 f303 	lsl.w	r3, r2, r3
 8013f68:	ea03 0808 	and.w	r8, r3, r8
 8013f6c:	e6db      	b.n	8013d26 <_strtod_l+0x606>
 8013f6e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8013f72:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8013f76:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8013f7a:	35e2      	adds	r5, #226	; 0xe2
 8013f7c:	fa07 f505 	lsl.w	r5, r7, r5
 8013f80:	970f      	str	r7, [sp, #60]	; 0x3c
 8013f82:	e742      	b.n	8013e0a <_strtod_l+0x6ea>
 8013f84:	2301      	movs	r3, #1
 8013f86:	2500      	movs	r5, #0
 8013f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f8a:	e73e      	b.n	8013e0a <_strtod_l+0x6ea>
 8013f8c:	463a      	mov	r2, r7
 8013f8e:	4650      	mov	r0, sl
 8013f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f92:	f001 fed9 	bl	8015d48 <__lshift>
 8013f96:	901c      	str	r0, [sp, #112]	; 0x70
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	f47f af64 	bne.w	8013e66 <_strtod_l+0x746>
 8013f9e:	e602      	b.n	8013ba6 <_strtod_l+0x486>
 8013fa0:	08017bd8 	.word	0x08017bd8
 8013fa4:	fffffc02 	.word	0xfffffc02
 8013fa8:	7ff00000 	.word	0x7ff00000
 8013fac:	39500000 	.word	0x39500000
 8013fb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013fb4:	d166      	bne.n	8014084 <_strtod_l+0x964>
 8013fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013fbc:	b35a      	cbz	r2, 8014016 <_strtod_l+0x8f6>
 8013fbe:	4a9c      	ldr	r2, [pc, #624]	; (8014230 <_strtod_l+0xb10>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d12c      	bne.n	801401e <_strtod_l+0x8fe>
 8013fc4:	9b05      	ldr	r3, [sp, #20]
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	b303      	cbz	r3, 801400c <_strtod_l+0x8ec>
 8013fca:	464b      	mov	r3, r9
 8013fcc:	4a99      	ldr	r2, [pc, #612]	; (8014234 <_strtod_l+0xb14>)
 8013fce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013fd2:	401a      	ands	r2, r3
 8013fd4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013fd8:	d81b      	bhi.n	8014012 <_strtod_l+0x8f2>
 8013fda:	0d12      	lsrs	r2, r2, #20
 8013fdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8013fe4:	4298      	cmp	r0, r3
 8013fe6:	d11a      	bne.n	801401e <_strtod_l+0x8fe>
 8013fe8:	4b93      	ldr	r3, [pc, #588]	; (8014238 <_strtod_l+0xb18>)
 8013fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d102      	bne.n	8013ff6 <_strtod_l+0x8d6>
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	f43f add8 	beq.w	8013ba6 <_strtod_l+0x486>
 8013ff6:	f04f 0800 	mov.w	r8, #0
 8013ffa:	4b8e      	ldr	r3, [pc, #568]	; (8014234 <_strtod_l+0xb14>)
 8013ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ffe:	401a      	ands	r2, r3
 8014000:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8014004:	9b05      	ldr	r3, [sp, #20]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d196      	bne.n	8013f38 <_strtod_l+0x818>
 801400a:	e5d7      	b.n	8013bbc <_strtod_l+0x49c>
 801400c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014010:	e7e8      	b.n	8013fe4 <_strtod_l+0x8c4>
 8014012:	460b      	mov	r3, r1
 8014014:	e7e6      	b.n	8013fe4 <_strtod_l+0x8c4>
 8014016:	ea53 0308 	orrs.w	r3, r3, r8
 801401a:	f43f af7d 	beq.w	8013f18 <_strtod_l+0x7f8>
 801401e:	b1e5      	cbz	r5, 801405a <_strtod_l+0x93a>
 8014020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014022:	421d      	tst	r5, r3
 8014024:	d0ee      	beq.n	8014004 <_strtod_l+0x8e4>
 8014026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014028:	4640      	mov	r0, r8
 801402a:	4649      	mov	r1, r9
 801402c:	9a05      	ldr	r2, [sp, #20]
 801402e:	b1c3      	cbz	r3, 8014062 <_strtod_l+0x942>
 8014030:	f7ff fb52 	bl	80136d8 <sulp>
 8014034:	4602      	mov	r2, r0
 8014036:	460b      	mov	r3, r1
 8014038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801403c:	f7ec f8ae 	bl	800019c <__adddf3>
 8014040:	4680      	mov	r8, r0
 8014042:	4689      	mov	r9, r1
 8014044:	e7de      	b.n	8014004 <_strtod_l+0x8e4>
 8014046:	4013      	ands	r3, r2
 8014048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801404c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014050:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014054:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014058:	e7d4      	b.n	8014004 <_strtod_l+0x8e4>
 801405a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801405c:	ea13 0f08 	tst.w	r3, r8
 8014060:	e7e0      	b.n	8014024 <_strtod_l+0x904>
 8014062:	f7ff fb39 	bl	80136d8 <sulp>
 8014066:	4602      	mov	r2, r0
 8014068:	460b      	mov	r3, r1
 801406a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801406e:	f7ec f893 	bl	8000198 <__aeabi_dsub>
 8014072:	2200      	movs	r2, #0
 8014074:	2300      	movs	r3, #0
 8014076:	4680      	mov	r8, r0
 8014078:	4689      	mov	r9, r1
 801407a:	f7ec fcad 	bl	80009d8 <__aeabi_dcmpeq>
 801407e:	2800      	cmp	r0, #0
 8014080:	d0c0      	beq.n	8014004 <_strtod_l+0x8e4>
 8014082:	e602      	b.n	8013c8a <_strtod_l+0x56a>
 8014084:	4658      	mov	r0, fp
 8014086:	9904      	ldr	r1, [sp, #16]
 8014088:	f002 f84c 	bl	8016124 <__ratio>
 801408c:	2200      	movs	r2, #0
 801408e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014092:	4606      	mov	r6, r0
 8014094:	460f      	mov	r7, r1
 8014096:	f7ec fcb3 	bl	8000a00 <__aeabi_dcmple>
 801409a:	2800      	cmp	r0, #0
 801409c:	d075      	beq.n	801418a <_strtod_l+0xa6a>
 801409e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d047      	beq.n	8014134 <_strtod_l+0xa14>
 80140a4:	2600      	movs	r6, #0
 80140a6:	4f65      	ldr	r7, [pc, #404]	; (801423c <_strtod_l+0xb1c>)
 80140a8:	4d64      	ldr	r5, [pc, #400]	; (801423c <_strtod_l+0xb1c>)
 80140aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80140b0:	0d1b      	lsrs	r3, r3, #20
 80140b2:	051b      	lsls	r3, r3, #20
 80140b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80140b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140b8:	4b61      	ldr	r3, [pc, #388]	; (8014240 <_strtod_l+0xb20>)
 80140ba:	429a      	cmp	r2, r3
 80140bc:	f040 80c8 	bne.w	8014250 <_strtod_l+0xb30>
 80140c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80140c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ca:	4640      	mov	r0, r8
 80140cc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80140d0:	4649      	mov	r1, r9
 80140d2:	f001 ff51 	bl	8015f78 <__ulp>
 80140d6:	4602      	mov	r2, r0
 80140d8:	460b      	mov	r3, r1
 80140da:	4630      	mov	r0, r6
 80140dc:	4639      	mov	r1, r7
 80140de:	f7ec fa13 	bl	8000508 <__aeabi_dmul>
 80140e2:	4642      	mov	r2, r8
 80140e4:	464b      	mov	r3, r9
 80140e6:	f7ec f859 	bl	800019c <__adddf3>
 80140ea:	460b      	mov	r3, r1
 80140ec:	4951      	ldr	r1, [pc, #324]	; (8014234 <_strtod_l+0xb14>)
 80140ee:	4a55      	ldr	r2, [pc, #340]	; (8014244 <_strtod_l+0xb24>)
 80140f0:	4019      	ands	r1, r3
 80140f2:	4291      	cmp	r1, r2
 80140f4:	4680      	mov	r8, r0
 80140f6:	d95e      	bls.n	80141b6 <_strtod_l+0xa96>
 80140f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80140fe:	4293      	cmp	r3, r2
 8014100:	d103      	bne.n	801410a <_strtod_l+0x9ea>
 8014102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014104:	3301      	adds	r3, #1
 8014106:	f43f ad4e 	beq.w	8013ba6 <_strtod_l+0x486>
 801410a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801410e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8014238 <_strtod_l+0xb18>
 8014112:	4650      	mov	r0, sl
 8014114:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014116:	f001 fbff 	bl	8015918 <_Bfree>
 801411a:	4650      	mov	r0, sl
 801411c:	9906      	ldr	r1, [sp, #24]
 801411e:	f001 fbfb 	bl	8015918 <_Bfree>
 8014122:	4650      	mov	r0, sl
 8014124:	9904      	ldr	r1, [sp, #16]
 8014126:	f001 fbf7 	bl	8015918 <_Bfree>
 801412a:	4659      	mov	r1, fp
 801412c:	4650      	mov	r0, sl
 801412e:	f001 fbf3 	bl	8015918 <_Bfree>
 8014132:	e61c      	b.n	8013d6e <_strtod_l+0x64e>
 8014134:	f1b8 0f00 	cmp.w	r8, #0
 8014138:	d119      	bne.n	801416e <_strtod_l+0xa4e>
 801413a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801413c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014140:	b9e3      	cbnz	r3, 801417c <_strtod_l+0xa5c>
 8014142:	2200      	movs	r2, #0
 8014144:	4630      	mov	r0, r6
 8014146:	4639      	mov	r1, r7
 8014148:	4b3c      	ldr	r3, [pc, #240]	; (801423c <_strtod_l+0xb1c>)
 801414a:	f7ec fc4f 	bl	80009ec <__aeabi_dcmplt>
 801414e:	b9c8      	cbnz	r0, 8014184 <_strtod_l+0xa64>
 8014150:	2200      	movs	r2, #0
 8014152:	4630      	mov	r0, r6
 8014154:	4639      	mov	r1, r7
 8014156:	4b3c      	ldr	r3, [pc, #240]	; (8014248 <_strtod_l+0xb28>)
 8014158:	f7ec f9d6 	bl	8000508 <__aeabi_dmul>
 801415c:	4604      	mov	r4, r0
 801415e:	460d      	mov	r5, r1
 8014160:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8014164:	9418      	str	r4, [sp, #96]	; 0x60
 8014166:	9319      	str	r3, [sp, #100]	; 0x64
 8014168:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801416c:	e79d      	b.n	80140aa <_strtod_l+0x98a>
 801416e:	f1b8 0f01 	cmp.w	r8, #1
 8014172:	d103      	bne.n	801417c <_strtod_l+0xa5c>
 8014174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014176:	2b00      	cmp	r3, #0
 8014178:	f43f ad87 	beq.w	8013c8a <_strtod_l+0x56a>
 801417c:	2600      	movs	r6, #0
 801417e:	2400      	movs	r4, #0
 8014180:	4f32      	ldr	r7, [pc, #200]	; (801424c <_strtod_l+0xb2c>)
 8014182:	e791      	b.n	80140a8 <_strtod_l+0x988>
 8014184:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014186:	4d30      	ldr	r5, [pc, #192]	; (8014248 <_strtod_l+0xb28>)
 8014188:	e7ea      	b.n	8014160 <_strtod_l+0xa40>
 801418a:	4b2f      	ldr	r3, [pc, #188]	; (8014248 <_strtod_l+0xb28>)
 801418c:	2200      	movs	r2, #0
 801418e:	4630      	mov	r0, r6
 8014190:	4639      	mov	r1, r7
 8014192:	f7ec f9b9 	bl	8000508 <__aeabi_dmul>
 8014196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014198:	4604      	mov	r4, r0
 801419a:	460d      	mov	r5, r1
 801419c:	b933      	cbnz	r3, 80141ac <_strtod_l+0xa8c>
 801419e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141a2:	9010      	str	r0, [sp, #64]	; 0x40
 80141a4:	9311      	str	r3, [sp, #68]	; 0x44
 80141a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80141aa:	e77e      	b.n	80140aa <_strtod_l+0x98a>
 80141ac:	4602      	mov	r2, r0
 80141ae:	460b      	mov	r3, r1
 80141b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80141b4:	e7f7      	b.n	80141a6 <_strtod_l+0xa86>
 80141b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80141ba:	9b05      	ldr	r3, [sp, #20]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d1a8      	bne.n	8014112 <_strtod_l+0x9f2>
 80141c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141c6:	0d1b      	lsrs	r3, r3, #20
 80141c8:	051b      	lsls	r3, r3, #20
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d1a1      	bne.n	8014112 <_strtod_l+0x9f2>
 80141ce:	4620      	mov	r0, r4
 80141d0:	4629      	mov	r1, r5
 80141d2:	f7ec ff7d 	bl	80010d0 <__aeabi_d2lz>
 80141d6:	f7ec f969 	bl	80004ac <__aeabi_l2d>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	4620      	mov	r0, r4
 80141e0:	4629      	mov	r1, r5
 80141e2:	f7eb ffd9 	bl	8000198 <__aeabi_dsub>
 80141e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141ec:	ea43 0308 	orr.w	r3, r3, r8
 80141f0:	4313      	orrs	r3, r2
 80141f2:	4604      	mov	r4, r0
 80141f4:	460d      	mov	r5, r1
 80141f6:	d066      	beq.n	80142c6 <_strtod_l+0xba6>
 80141f8:	a309      	add	r3, pc, #36	; (adr r3, 8014220 <_strtod_l+0xb00>)
 80141fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fe:	f7ec fbf5 	bl	80009ec <__aeabi_dcmplt>
 8014202:	2800      	cmp	r0, #0
 8014204:	f47f acda 	bne.w	8013bbc <_strtod_l+0x49c>
 8014208:	a307      	add	r3, pc, #28	; (adr r3, 8014228 <_strtod_l+0xb08>)
 801420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420e:	4620      	mov	r0, r4
 8014210:	4629      	mov	r1, r5
 8014212:	f7ec fc09 	bl	8000a28 <__aeabi_dcmpgt>
 8014216:	2800      	cmp	r0, #0
 8014218:	f43f af7b 	beq.w	8014112 <_strtod_l+0x9f2>
 801421c:	e4ce      	b.n	8013bbc <_strtod_l+0x49c>
 801421e:	bf00      	nop
 8014220:	94a03595 	.word	0x94a03595
 8014224:	3fdfffff 	.word	0x3fdfffff
 8014228:	35afe535 	.word	0x35afe535
 801422c:	3fe00000 	.word	0x3fe00000
 8014230:	000fffff 	.word	0x000fffff
 8014234:	7ff00000 	.word	0x7ff00000
 8014238:	7fefffff 	.word	0x7fefffff
 801423c:	3ff00000 	.word	0x3ff00000
 8014240:	7fe00000 	.word	0x7fe00000
 8014244:	7c9fffff 	.word	0x7c9fffff
 8014248:	3fe00000 	.word	0x3fe00000
 801424c:	bff00000 	.word	0xbff00000
 8014250:	9b05      	ldr	r3, [sp, #20]
 8014252:	b313      	cbz	r3, 801429a <_strtod_l+0xb7a>
 8014254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014256:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801425a:	d81e      	bhi.n	801429a <_strtod_l+0xb7a>
 801425c:	a326      	add	r3, pc, #152	; (adr r3, 80142f8 <_strtod_l+0xbd8>)
 801425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014262:	4620      	mov	r0, r4
 8014264:	4629      	mov	r1, r5
 8014266:	f7ec fbcb 	bl	8000a00 <__aeabi_dcmple>
 801426a:	b190      	cbz	r0, 8014292 <_strtod_l+0xb72>
 801426c:	4629      	mov	r1, r5
 801426e:	4620      	mov	r0, r4
 8014270:	f7ec fc22 	bl	8000ab8 <__aeabi_d2uiz>
 8014274:	2801      	cmp	r0, #1
 8014276:	bf38      	it	cc
 8014278:	2001      	movcc	r0, #1
 801427a:	f7ec f8cb 	bl	8000414 <__aeabi_ui2d>
 801427e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014280:	4604      	mov	r4, r0
 8014282:	460d      	mov	r5, r1
 8014284:	b9d3      	cbnz	r3, 80142bc <_strtod_l+0xb9c>
 8014286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801428a:	9012      	str	r0, [sp, #72]	; 0x48
 801428c:	9313      	str	r3, [sp, #76]	; 0x4c
 801428e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8014292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014294:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8014298:	1a9f      	subs	r7, r3, r2
 801429a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801429e:	f001 fe6b 	bl	8015f78 <__ulp>
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	4630      	mov	r0, r6
 80142a8:	4639      	mov	r1, r7
 80142aa:	f7ec f92d 	bl	8000508 <__aeabi_dmul>
 80142ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142b2:	f7eb ff73 	bl	800019c <__adddf3>
 80142b6:	4680      	mov	r8, r0
 80142b8:	4689      	mov	r9, r1
 80142ba:	e77e      	b.n	80141ba <_strtod_l+0xa9a>
 80142bc:	4602      	mov	r2, r0
 80142be:	460b      	mov	r3, r1
 80142c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80142c4:	e7e3      	b.n	801428e <_strtod_l+0xb6e>
 80142c6:	a30e      	add	r3, pc, #56	; (adr r3, 8014300 <_strtod_l+0xbe0>)
 80142c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142cc:	f7ec fb8e 	bl	80009ec <__aeabi_dcmplt>
 80142d0:	e7a1      	b.n	8014216 <_strtod_l+0xaf6>
 80142d2:	2300      	movs	r3, #0
 80142d4:	930c      	str	r3, [sp, #48]	; 0x30
 80142d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142da:	6013      	str	r3, [r2, #0]
 80142dc:	f7ff ba65 	b.w	80137aa <_strtod_l+0x8a>
 80142e0:	2b65      	cmp	r3, #101	; 0x65
 80142e2:	f43f ab5c 	beq.w	801399e <_strtod_l+0x27e>
 80142e6:	2b45      	cmp	r3, #69	; 0x45
 80142e8:	f43f ab59 	beq.w	801399e <_strtod_l+0x27e>
 80142ec:	2201      	movs	r2, #1
 80142ee:	f7ff bb8d 	b.w	8013a0c <_strtod_l+0x2ec>
 80142f2:	bf00      	nop
 80142f4:	f3af 8000 	nop.w
 80142f8:	ffc00000 	.word	0xffc00000
 80142fc:	41dfffff 	.word	0x41dfffff
 8014300:	94a03595 	.word	0x94a03595
 8014304:	3fcfffff 	.word	0x3fcfffff

08014308 <_strtod_r>:
 8014308:	4b01      	ldr	r3, [pc, #4]	; (8014310 <_strtod_r+0x8>)
 801430a:	f7ff ba09 	b.w	8013720 <_strtod_l>
 801430e:	bf00      	nop
 8014310:	20000294 	.word	0x20000294

08014314 <_strtol_l.isra.0>:
 8014314:	2b01      	cmp	r3, #1
 8014316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801431a:	4686      	mov	lr, r0
 801431c:	d001      	beq.n	8014322 <_strtol_l.isra.0+0xe>
 801431e:	2b24      	cmp	r3, #36	; 0x24
 8014320:	d906      	bls.n	8014330 <_strtol_l.isra.0+0x1c>
 8014322:	f7fe f935 	bl	8012590 <__errno>
 8014326:	2316      	movs	r3, #22
 8014328:	6003      	str	r3, [r0, #0]
 801432a:	2000      	movs	r0, #0
 801432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014330:	468c      	mov	ip, r1
 8014332:	4e3a      	ldr	r6, [pc, #232]	; (801441c <_strtol_l.isra.0+0x108>)
 8014334:	4660      	mov	r0, ip
 8014336:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801433a:	5da5      	ldrb	r5, [r4, r6]
 801433c:	f015 0508 	ands.w	r5, r5, #8
 8014340:	d1f8      	bne.n	8014334 <_strtol_l.isra.0+0x20>
 8014342:	2c2d      	cmp	r4, #45	; 0x2d
 8014344:	d133      	bne.n	80143ae <_strtol_l.isra.0+0x9a>
 8014346:	f04f 0801 	mov.w	r8, #1
 801434a:	f89c 4000 	ldrb.w	r4, [ip]
 801434e:	f100 0c02 	add.w	ip, r0, #2
 8014352:	2b00      	cmp	r3, #0
 8014354:	d05d      	beq.n	8014412 <_strtol_l.isra.0+0xfe>
 8014356:	2b10      	cmp	r3, #16
 8014358:	d10c      	bne.n	8014374 <_strtol_l.isra.0+0x60>
 801435a:	2c30      	cmp	r4, #48	; 0x30
 801435c:	d10a      	bne.n	8014374 <_strtol_l.isra.0+0x60>
 801435e:	f89c 0000 	ldrb.w	r0, [ip]
 8014362:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014366:	2858      	cmp	r0, #88	; 0x58
 8014368:	d14e      	bne.n	8014408 <_strtol_l.isra.0+0xf4>
 801436a:	2310      	movs	r3, #16
 801436c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014370:	f10c 0c02 	add.w	ip, ip, #2
 8014374:	2500      	movs	r5, #0
 8014376:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801437a:	3f01      	subs	r7, #1
 801437c:	fbb7 f9f3 	udiv	r9, r7, r3
 8014380:	4628      	mov	r0, r5
 8014382:	fb03 7a19 	mls	sl, r3, r9, r7
 8014386:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801438a:	2e09      	cmp	r6, #9
 801438c:	d818      	bhi.n	80143c0 <_strtol_l.isra.0+0xac>
 801438e:	4634      	mov	r4, r6
 8014390:	42a3      	cmp	r3, r4
 8014392:	dd24      	ble.n	80143de <_strtol_l.isra.0+0xca>
 8014394:	2d00      	cmp	r5, #0
 8014396:	db1f      	blt.n	80143d8 <_strtol_l.isra.0+0xc4>
 8014398:	4581      	cmp	r9, r0
 801439a:	d31d      	bcc.n	80143d8 <_strtol_l.isra.0+0xc4>
 801439c:	d101      	bne.n	80143a2 <_strtol_l.isra.0+0x8e>
 801439e:	45a2      	cmp	sl, r4
 80143a0:	db1a      	blt.n	80143d8 <_strtol_l.isra.0+0xc4>
 80143a2:	2501      	movs	r5, #1
 80143a4:	fb00 4003 	mla	r0, r0, r3, r4
 80143a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80143ac:	e7eb      	b.n	8014386 <_strtol_l.isra.0+0x72>
 80143ae:	2c2b      	cmp	r4, #43	; 0x2b
 80143b0:	bf08      	it	eq
 80143b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80143b6:	46a8      	mov	r8, r5
 80143b8:	bf08      	it	eq
 80143ba:	f100 0c02 	addeq.w	ip, r0, #2
 80143be:	e7c8      	b.n	8014352 <_strtol_l.isra.0+0x3e>
 80143c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80143c4:	2e19      	cmp	r6, #25
 80143c6:	d801      	bhi.n	80143cc <_strtol_l.isra.0+0xb8>
 80143c8:	3c37      	subs	r4, #55	; 0x37
 80143ca:	e7e1      	b.n	8014390 <_strtol_l.isra.0+0x7c>
 80143cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80143d0:	2e19      	cmp	r6, #25
 80143d2:	d804      	bhi.n	80143de <_strtol_l.isra.0+0xca>
 80143d4:	3c57      	subs	r4, #87	; 0x57
 80143d6:	e7db      	b.n	8014390 <_strtol_l.isra.0+0x7c>
 80143d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80143dc:	e7e4      	b.n	80143a8 <_strtol_l.isra.0+0x94>
 80143de:	2d00      	cmp	r5, #0
 80143e0:	da08      	bge.n	80143f4 <_strtol_l.isra.0+0xe0>
 80143e2:	2322      	movs	r3, #34	; 0x22
 80143e4:	4638      	mov	r0, r7
 80143e6:	f8ce 3000 	str.w	r3, [lr]
 80143ea:	2a00      	cmp	r2, #0
 80143ec:	d09e      	beq.n	801432c <_strtol_l.isra.0+0x18>
 80143ee:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80143f2:	e007      	b.n	8014404 <_strtol_l.isra.0+0xf0>
 80143f4:	f1b8 0f00 	cmp.w	r8, #0
 80143f8:	d000      	beq.n	80143fc <_strtol_l.isra.0+0xe8>
 80143fa:	4240      	negs	r0, r0
 80143fc:	2a00      	cmp	r2, #0
 80143fe:	d095      	beq.n	801432c <_strtol_l.isra.0+0x18>
 8014400:	2d00      	cmp	r5, #0
 8014402:	d1f4      	bne.n	80143ee <_strtol_l.isra.0+0xda>
 8014404:	6011      	str	r1, [r2, #0]
 8014406:	e791      	b.n	801432c <_strtol_l.isra.0+0x18>
 8014408:	2430      	movs	r4, #48	; 0x30
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1b2      	bne.n	8014374 <_strtol_l.isra.0+0x60>
 801440e:	2308      	movs	r3, #8
 8014410:	e7b0      	b.n	8014374 <_strtol_l.isra.0+0x60>
 8014412:	2c30      	cmp	r4, #48	; 0x30
 8014414:	d0a3      	beq.n	801435e <_strtol_l.isra.0+0x4a>
 8014416:	230a      	movs	r3, #10
 8014418:	e7ac      	b.n	8014374 <_strtol_l.isra.0+0x60>
 801441a:	bf00      	nop
 801441c:	08017c01 	.word	0x08017c01

08014420 <_strtol_r>:
 8014420:	f7ff bf78 	b.w	8014314 <_strtol_l.isra.0>

08014424 <_write_r>:
 8014424:	b538      	push	{r3, r4, r5, lr}
 8014426:	4604      	mov	r4, r0
 8014428:	4608      	mov	r0, r1
 801442a:	4611      	mov	r1, r2
 801442c:	2200      	movs	r2, #0
 801442e:	4d05      	ldr	r5, [pc, #20]	; (8014444 <_write_r+0x20>)
 8014430:	602a      	str	r2, [r5, #0]
 8014432:	461a      	mov	r2, r3
 8014434:	f7ef ff16 	bl	8004264 <_write>
 8014438:	1c43      	adds	r3, r0, #1
 801443a:	d102      	bne.n	8014442 <_write_r+0x1e>
 801443c:	682b      	ldr	r3, [r5, #0]
 801443e:	b103      	cbz	r3, 8014442 <_write_r+0x1e>
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	bd38      	pop	{r3, r4, r5, pc}
 8014444:	20001dec 	.word	0x20001dec

08014448 <_close_r>:
 8014448:	b538      	push	{r3, r4, r5, lr}
 801444a:	2300      	movs	r3, #0
 801444c:	4d05      	ldr	r5, [pc, #20]	; (8014464 <_close_r+0x1c>)
 801444e:	4604      	mov	r4, r0
 8014450:	4608      	mov	r0, r1
 8014452:	602b      	str	r3, [r5, #0]
 8014454:	f7ef ff22 	bl	800429c <_close>
 8014458:	1c43      	adds	r3, r0, #1
 801445a:	d102      	bne.n	8014462 <_close_r+0x1a>
 801445c:	682b      	ldr	r3, [r5, #0]
 801445e:	b103      	cbz	r3, 8014462 <_close_r+0x1a>
 8014460:	6023      	str	r3, [r4, #0]
 8014462:	bd38      	pop	{r3, r4, r5, pc}
 8014464:	20001dec 	.word	0x20001dec

08014468 <quorem>:
 8014468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	6903      	ldr	r3, [r0, #16]
 801446e:	690c      	ldr	r4, [r1, #16]
 8014470:	4607      	mov	r7, r0
 8014472:	42a3      	cmp	r3, r4
 8014474:	f2c0 8083 	blt.w	801457e <quorem+0x116>
 8014478:	3c01      	subs	r4, #1
 801447a:	f100 0514 	add.w	r5, r0, #20
 801447e:	f101 0814 	add.w	r8, r1, #20
 8014482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014486:	9301      	str	r3, [sp, #4]
 8014488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801448c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014490:	3301      	adds	r3, #1
 8014492:	429a      	cmp	r2, r3
 8014494:	fbb2 f6f3 	udiv	r6, r2, r3
 8014498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801449c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80144a0:	d332      	bcc.n	8014508 <quorem+0xa0>
 80144a2:	f04f 0e00 	mov.w	lr, #0
 80144a6:	4640      	mov	r0, r8
 80144a8:	46ac      	mov	ip, r5
 80144aa:	46f2      	mov	sl, lr
 80144ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80144b0:	b293      	uxth	r3, r2
 80144b2:	fb06 e303 	mla	r3, r6, r3, lr
 80144b6:	0c12      	lsrs	r2, r2, #16
 80144b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80144bc:	fb06 e202 	mla	r2, r6, r2, lr
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	ebaa 0303 	sub.w	r3, sl, r3
 80144c6:	f8dc a000 	ldr.w	sl, [ip]
 80144ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80144ce:	fa1f fa8a 	uxth.w	sl, sl
 80144d2:	4453      	add	r3, sl
 80144d4:	fa1f fa82 	uxth.w	sl, r2
 80144d8:	f8dc 2000 	ldr.w	r2, [ip]
 80144dc:	4581      	cmp	r9, r0
 80144de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80144e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80144f0:	f84c 3b04 	str.w	r3, [ip], #4
 80144f4:	d2da      	bcs.n	80144ac <quorem+0x44>
 80144f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80144fa:	b92b      	cbnz	r3, 8014508 <quorem+0xa0>
 80144fc:	9b01      	ldr	r3, [sp, #4]
 80144fe:	3b04      	subs	r3, #4
 8014500:	429d      	cmp	r5, r3
 8014502:	461a      	mov	r2, r3
 8014504:	d32f      	bcc.n	8014566 <quorem+0xfe>
 8014506:	613c      	str	r4, [r7, #16]
 8014508:	4638      	mov	r0, r7
 801450a:	f001 fc89 	bl	8015e20 <__mcmp>
 801450e:	2800      	cmp	r0, #0
 8014510:	db25      	blt.n	801455e <quorem+0xf6>
 8014512:	4628      	mov	r0, r5
 8014514:	f04f 0c00 	mov.w	ip, #0
 8014518:	3601      	adds	r6, #1
 801451a:	f858 1b04 	ldr.w	r1, [r8], #4
 801451e:	f8d0 e000 	ldr.w	lr, [r0]
 8014522:	b28b      	uxth	r3, r1
 8014524:	ebac 0303 	sub.w	r3, ip, r3
 8014528:	fa1f f28e 	uxth.w	r2, lr
 801452c:	4413      	add	r3, r2
 801452e:	0c0a      	lsrs	r2, r1, #16
 8014530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014538:	b29b      	uxth	r3, r3
 801453a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801453e:	45c1      	cmp	r9, r8
 8014540:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014544:	f840 3b04 	str.w	r3, [r0], #4
 8014548:	d2e7      	bcs.n	801451a <quorem+0xb2>
 801454a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801454e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014552:	b922      	cbnz	r2, 801455e <quorem+0xf6>
 8014554:	3b04      	subs	r3, #4
 8014556:	429d      	cmp	r5, r3
 8014558:	461a      	mov	r2, r3
 801455a:	d30a      	bcc.n	8014572 <quorem+0x10a>
 801455c:	613c      	str	r4, [r7, #16]
 801455e:	4630      	mov	r0, r6
 8014560:	b003      	add	sp, #12
 8014562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014566:	6812      	ldr	r2, [r2, #0]
 8014568:	3b04      	subs	r3, #4
 801456a:	2a00      	cmp	r2, #0
 801456c:	d1cb      	bne.n	8014506 <quorem+0x9e>
 801456e:	3c01      	subs	r4, #1
 8014570:	e7c6      	b.n	8014500 <quorem+0x98>
 8014572:	6812      	ldr	r2, [r2, #0]
 8014574:	3b04      	subs	r3, #4
 8014576:	2a00      	cmp	r2, #0
 8014578:	d1f0      	bne.n	801455c <quorem+0xf4>
 801457a:	3c01      	subs	r4, #1
 801457c:	e7eb      	b.n	8014556 <quorem+0xee>
 801457e:	2000      	movs	r0, #0
 8014580:	e7ee      	b.n	8014560 <quorem+0xf8>
 8014582:	0000      	movs	r0, r0
 8014584:	0000      	movs	r0, r0
	...

08014588 <_dtoa_r>:
 8014588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458c:	4616      	mov	r6, r2
 801458e:	461f      	mov	r7, r3
 8014590:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014592:	b099      	sub	sp, #100	; 0x64
 8014594:	4605      	mov	r5, r0
 8014596:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801459a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801459e:	b974      	cbnz	r4, 80145be <_dtoa_r+0x36>
 80145a0:	2010      	movs	r0, #16
 80145a2:	f7fe f81f 	bl	80125e4 <malloc>
 80145a6:	4602      	mov	r2, r0
 80145a8:	6268      	str	r0, [r5, #36]	; 0x24
 80145aa:	b920      	cbnz	r0, 80145b6 <_dtoa_r+0x2e>
 80145ac:	21ea      	movs	r1, #234	; 0xea
 80145ae:	4bae      	ldr	r3, [pc, #696]	; (8014868 <_dtoa_r+0x2e0>)
 80145b0:	48ae      	ldr	r0, [pc, #696]	; (801486c <_dtoa_r+0x2e4>)
 80145b2:	f002 fbcb 	bl	8016d4c <__assert_func>
 80145b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145ba:	6004      	str	r4, [r0, #0]
 80145bc:	60c4      	str	r4, [r0, #12]
 80145be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80145c0:	6819      	ldr	r1, [r3, #0]
 80145c2:	b151      	cbz	r1, 80145da <_dtoa_r+0x52>
 80145c4:	685a      	ldr	r2, [r3, #4]
 80145c6:	2301      	movs	r3, #1
 80145c8:	4093      	lsls	r3, r2
 80145ca:	604a      	str	r2, [r1, #4]
 80145cc:	608b      	str	r3, [r1, #8]
 80145ce:	4628      	mov	r0, r5
 80145d0:	f001 f9a2 	bl	8015918 <_Bfree>
 80145d4:	2200      	movs	r2, #0
 80145d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80145d8:	601a      	str	r2, [r3, #0]
 80145da:	1e3b      	subs	r3, r7, #0
 80145dc:	bfaf      	iteee	ge
 80145de:	2300      	movge	r3, #0
 80145e0:	2201      	movlt	r2, #1
 80145e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80145e6:	9305      	strlt	r3, [sp, #20]
 80145e8:	bfa8      	it	ge
 80145ea:	f8c8 3000 	strge.w	r3, [r8]
 80145ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80145f2:	4b9f      	ldr	r3, [pc, #636]	; (8014870 <_dtoa_r+0x2e8>)
 80145f4:	bfb8      	it	lt
 80145f6:	f8c8 2000 	strlt.w	r2, [r8]
 80145fa:	ea33 0309 	bics.w	r3, r3, r9
 80145fe:	d119      	bne.n	8014634 <_dtoa_r+0xac>
 8014600:	f242 730f 	movw	r3, #9999	; 0x270f
 8014604:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014606:	6013      	str	r3, [r2, #0]
 8014608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801460c:	4333      	orrs	r3, r6
 801460e:	f000 8580 	beq.w	8015112 <_dtoa_r+0xb8a>
 8014612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014614:	b953      	cbnz	r3, 801462c <_dtoa_r+0xa4>
 8014616:	4b97      	ldr	r3, [pc, #604]	; (8014874 <_dtoa_r+0x2ec>)
 8014618:	e022      	b.n	8014660 <_dtoa_r+0xd8>
 801461a:	4b97      	ldr	r3, [pc, #604]	; (8014878 <_dtoa_r+0x2f0>)
 801461c:	9308      	str	r3, [sp, #32]
 801461e:	3308      	adds	r3, #8
 8014620:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	9808      	ldr	r0, [sp, #32]
 8014626:	b019      	add	sp, #100	; 0x64
 8014628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801462c:	4b91      	ldr	r3, [pc, #580]	; (8014874 <_dtoa_r+0x2ec>)
 801462e:	9308      	str	r3, [sp, #32]
 8014630:	3303      	adds	r3, #3
 8014632:	e7f5      	b.n	8014620 <_dtoa_r+0x98>
 8014634:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014638:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801463c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014640:	2200      	movs	r2, #0
 8014642:	2300      	movs	r3, #0
 8014644:	f7ec f9c8 	bl	80009d8 <__aeabi_dcmpeq>
 8014648:	4680      	mov	r8, r0
 801464a:	b158      	cbz	r0, 8014664 <_dtoa_r+0xdc>
 801464c:	2301      	movs	r3, #1
 801464e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014650:	6013      	str	r3, [r2, #0]
 8014652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014654:	2b00      	cmp	r3, #0
 8014656:	f000 8559 	beq.w	801510c <_dtoa_r+0xb84>
 801465a:	4888      	ldr	r0, [pc, #544]	; (801487c <_dtoa_r+0x2f4>)
 801465c:	6018      	str	r0, [r3, #0]
 801465e:	1e43      	subs	r3, r0, #1
 8014660:	9308      	str	r3, [sp, #32]
 8014662:	e7df      	b.n	8014624 <_dtoa_r+0x9c>
 8014664:	ab16      	add	r3, sp, #88	; 0x58
 8014666:	9301      	str	r3, [sp, #4]
 8014668:	ab17      	add	r3, sp, #92	; 0x5c
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	4628      	mov	r0, r5
 801466e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014672:	f001 fcfb 	bl	801606c <__d2b>
 8014676:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801467a:	4682      	mov	sl, r0
 801467c:	2c00      	cmp	r4, #0
 801467e:	d07e      	beq.n	801477e <_dtoa_r+0x1f6>
 8014680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014686:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801468a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801468e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014692:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014696:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801469a:	2200      	movs	r2, #0
 801469c:	4b78      	ldr	r3, [pc, #480]	; (8014880 <_dtoa_r+0x2f8>)
 801469e:	f7eb fd7b 	bl	8000198 <__aeabi_dsub>
 80146a2:	a36b      	add	r3, pc, #428	; (adr r3, 8014850 <_dtoa_r+0x2c8>)
 80146a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a8:	f7eb ff2e 	bl	8000508 <__aeabi_dmul>
 80146ac:	a36a      	add	r3, pc, #424	; (adr r3, 8014858 <_dtoa_r+0x2d0>)
 80146ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b2:	f7eb fd73 	bl	800019c <__adddf3>
 80146b6:	4606      	mov	r6, r0
 80146b8:	4620      	mov	r0, r4
 80146ba:	460f      	mov	r7, r1
 80146bc:	f7eb feba 	bl	8000434 <__aeabi_i2d>
 80146c0:	a367      	add	r3, pc, #412	; (adr r3, 8014860 <_dtoa_r+0x2d8>)
 80146c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c6:	f7eb ff1f 	bl	8000508 <__aeabi_dmul>
 80146ca:	4602      	mov	r2, r0
 80146cc:	460b      	mov	r3, r1
 80146ce:	4630      	mov	r0, r6
 80146d0:	4639      	mov	r1, r7
 80146d2:	f7eb fd63 	bl	800019c <__adddf3>
 80146d6:	4606      	mov	r6, r0
 80146d8:	460f      	mov	r7, r1
 80146da:	f7ec f9c5 	bl	8000a68 <__aeabi_d2iz>
 80146de:	2200      	movs	r2, #0
 80146e0:	4681      	mov	r9, r0
 80146e2:	2300      	movs	r3, #0
 80146e4:	4630      	mov	r0, r6
 80146e6:	4639      	mov	r1, r7
 80146e8:	f7ec f980 	bl	80009ec <__aeabi_dcmplt>
 80146ec:	b148      	cbz	r0, 8014702 <_dtoa_r+0x17a>
 80146ee:	4648      	mov	r0, r9
 80146f0:	f7eb fea0 	bl	8000434 <__aeabi_i2d>
 80146f4:	4632      	mov	r2, r6
 80146f6:	463b      	mov	r3, r7
 80146f8:	f7ec f96e 	bl	80009d8 <__aeabi_dcmpeq>
 80146fc:	b908      	cbnz	r0, 8014702 <_dtoa_r+0x17a>
 80146fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014702:	f1b9 0f16 	cmp.w	r9, #22
 8014706:	d857      	bhi.n	80147b8 <_dtoa_r+0x230>
 8014708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801470c:	4b5d      	ldr	r3, [pc, #372]	; (8014884 <_dtoa_r+0x2fc>)
 801470e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014716:	f7ec f969 	bl	80009ec <__aeabi_dcmplt>
 801471a:	2800      	cmp	r0, #0
 801471c:	d04e      	beq.n	80147bc <_dtoa_r+0x234>
 801471e:	2300      	movs	r3, #0
 8014720:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014724:	930f      	str	r3, [sp, #60]	; 0x3c
 8014726:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014728:	1b1c      	subs	r4, r3, r4
 801472a:	1e63      	subs	r3, r4, #1
 801472c:	9309      	str	r3, [sp, #36]	; 0x24
 801472e:	bf49      	itett	mi
 8014730:	f1c4 0301 	rsbmi	r3, r4, #1
 8014734:	2300      	movpl	r3, #0
 8014736:	9306      	strmi	r3, [sp, #24]
 8014738:	2300      	movmi	r3, #0
 801473a:	bf54      	ite	pl
 801473c:	9306      	strpl	r3, [sp, #24]
 801473e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014740:	f1b9 0f00 	cmp.w	r9, #0
 8014744:	db3c      	blt.n	80147c0 <_dtoa_r+0x238>
 8014746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014748:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801474c:	444b      	add	r3, r9
 801474e:	9309      	str	r3, [sp, #36]	; 0x24
 8014750:	2300      	movs	r3, #0
 8014752:	930a      	str	r3, [sp, #40]	; 0x28
 8014754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014756:	2b09      	cmp	r3, #9
 8014758:	d86c      	bhi.n	8014834 <_dtoa_r+0x2ac>
 801475a:	2b05      	cmp	r3, #5
 801475c:	bfc4      	itt	gt
 801475e:	3b04      	subgt	r3, #4
 8014760:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014764:	bfc8      	it	gt
 8014766:	2400      	movgt	r4, #0
 8014768:	f1a3 0302 	sub.w	r3, r3, #2
 801476c:	bfd8      	it	le
 801476e:	2401      	movle	r4, #1
 8014770:	2b03      	cmp	r3, #3
 8014772:	f200 808b 	bhi.w	801488c <_dtoa_r+0x304>
 8014776:	e8df f003 	tbb	[pc, r3]
 801477a:	4f2d      	.short	0x4f2d
 801477c:	5b4d      	.short	0x5b4d
 801477e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014782:	441c      	add	r4, r3
 8014784:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014788:	2b20      	cmp	r3, #32
 801478a:	bfc3      	ittte	gt
 801478c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014790:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8014794:	fa09 f303 	lslgt.w	r3, r9, r3
 8014798:	f1c3 0320 	rsble	r3, r3, #32
 801479c:	bfc6      	itte	gt
 801479e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80147a2:	4318      	orrgt	r0, r3
 80147a4:	fa06 f003 	lslle.w	r0, r6, r3
 80147a8:	f7eb fe34 	bl	8000414 <__aeabi_ui2d>
 80147ac:	2301      	movs	r3, #1
 80147ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80147b2:	3c01      	subs	r4, #1
 80147b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80147b6:	e770      	b.n	801469a <_dtoa_r+0x112>
 80147b8:	2301      	movs	r3, #1
 80147ba:	e7b3      	b.n	8014724 <_dtoa_r+0x19c>
 80147bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80147be:	e7b2      	b.n	8014726 <_dtoa_r+0x19e>
 80147c0:	9b06      	ldr	r3, [sp, #24]
 80147c2:	eba3 0309 	sub.w	r3, r3, r9
 80147c6:	9306      	str	r3, [sp, #24]
 80147c8:	f1c9 0300 	rsb	r3, r9, #0
 80147cc:	930a      	str	r3, [sp, #40]	; 0x28
 80147ce:	2300      	movs	r3, #0
 80147d0:	930e      	str	r3, [sp, #56]	; 0x38
 80147d2:	e7bf      	b.n	8014754 <_dtoa_r+0x1cc>
 80147d4:	2300      	movs	r3, #0
 80147d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80147d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80147da:	2b00      	cmp	r3, #0
 80147dc:	dc59      	bgt.n	8014892 <_dtoa_r+0x30a>
 80147de:	f04f 0b01 	mov.w	fp, #1
 80147e2:	465b      	mov	r3, fp
 80147e4:	f8cd b008 	str.w	fp, [sp, #8]
 80147e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80147ec:	2200      	movs	r2, #0
 80147ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80147f0:	6042      	str	r2, [r0, #4]
 80147f2:	2204      	movs	r2, #4
 80147f4:	f102 0614 	add.w	r6, r2, #20
 80147f8:	429e      	cmp	r6, r3
 80147fa:	6841      	ldr	r1, [r0, #4]
 80147fc:	d94f      	bls.n	801489e <_dtoa_r+0x316>
 80147fe:	4628      	mov	r0, r5
 8014800:	f001 f84a 	bl	8015898 <_Balloc>
 8014804:	9008      	str	r0, [sp, #32]
 8014806:	2800      	cmp	r0, #0
 8014808:	d14d      	bne.n	80148a6 <_dtoa_r+0x31e>
 801480a:	4602      	mov	r2, r0
 801480c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014810:	4b1d      	ldr	r3, [pc, #116]	; (8014888 <_dtoa_r+0x300>)
 8014812:	e6cd      	b.n	80145b0 <_dtoa_r+0x28>
 8014814:	2301      	movs	r3, #1
 8014816:	e7de      	b.n	80147d6 <_dtoa_r+0x24e>
 8014818:	2300      	movs	r3, #0
 801481a:	930b      	str	r3, [sp, #44]	; 0x2c
 801481c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801481e:	eb09 0b03 	add.w	fp, r9, r3
 8014822:	f10b 0301 	add.w	r3, fp, #1
 8014826:	2b01      	cmp	r3, #1
 8014828:	9302      	str	r3, [sp, #8]
 801482a:	bfb8      	it	lt
 801482c:	2301      	movlt	r3, #1
 801482e:	e7dd      	b.n	80147ec <_dtoa_r+0x264>
 8014830:	2301      	movs	r3, #1
 8014832:	e7f2      	b.n	801481a <_dtoa_r+0x292>
 8014834:	2401      	movs	r4, #1
 8014836:	2300      	movs	r3, #0
 8014838:	940b      	str	r4, [sp, #44]	; 0x2c
 801483a:	9322      	str	r3, [sp, #136]	; 0x88
 801483c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014840:	2200      	movs	r2, #0
 8014842:	2312      	movs	r3, #18
 8014844:	f8cd b008 	str.w	fp, [sp, #8]
 8014848:	9223      	str	r2, [sp, #140]	; 0x8c
 801484a:	e7cf      	b.n	80147ec <_dtoa_r+0x264>
 801484c:	f3af 8000 	nop.w
 8014850:	636f4361 	.word	0x636f4361
 8014854:	3fd287a7 	.word	0x3fd287a7
 8014858:	8b60c8b3 	.word	0x8b60c8b3
 801485c:	3fc68a28 	.word	0x3fc68a28
 8014860:	509f79fb 	.word	0x509f79fb
 8014864:	3fd34413 	.word	0x3fd34413
 8014868:	08017d0e 	.word	0x08017d0e
 801486c:	08017d25 	.word	0x08017d25
 8014870:	7ff00000 	.word	0x7ff00000
 8014874:	08017d0a 	.word	0x08017d0a
 8014878:	08017d01 	.word	0x08017d01
 801487c:	08017f8a 	.word	0x08017f8a
 8014880:	3ff80000 	.word	0x3ff80000
 8014884:	08017ea0 	.word	0x08017ea0
 8014888:	08017d84 	.word	0x08017d84
 801488c:	2301      	movs	r3, #1
 801488e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014890:	e7d4      	b.n	801483c <_dtoa_r+0x2b4>
 8014892:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014896:	465b      	mov	r3, fp
 8014898:	f8cd b008 	str.w	fp, [sp, #8]
 801489c:	e7a6      	b.n	80147ec <_dtoa_r+0x264>
 801489e:	3101      	adds	r1, #1
 80148a0:	6041      	str	r1, [r0, #4]
 80148a2:	0052      	lsls	r2, r2, #1
 80148a4:	e7a6      	b.n	80147f4 <_dtoa_r+0x26c>
 80148a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80148a8:	9a08      	ldr	r2, [sp, #32]
 80148aa:	601a      	str	r2, [r3, #0]
 80148ac:	9b02      	ldr	r3, [sp, #8]
 80148ae:	2b0e      	cmp	r3, #14
 80148b0:	f200 80a8 	bhi.w	8014a04 <_dtoa_r+0x47c>
 80148b4:	2c00      	cmp	r4, #0
 80148b6:	f000 80a5 	beq.w	8014a04 <_dtoa_r+0x47c>
 80148ba:	f1b9 0f00 	cmp.w	r9, #0
 80148be:	dd34      	ble.n	801492a <_dtoa_r+0x3a2>
 80148c0:	4a9a      	ldr	r2, [pc, #616]	; (8014b2c <_dtoa_r+0x5a4>)
 80148c2:	f009 030f 	and.w	r3, r9, #15
 80148c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80148ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80148ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80148d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80148d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80148da:	d016      	beq.n	801490a <_dtoa_r+0x382>
 80148dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148e0:	4b93      	ldr	r3, [pc, #588]	; (8014b30 <_dtoa_r+0x5a8>)
 80148e2:	2703      	movs	r7, #3
 80148e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80148e8:	f7eb ff38 	bl	800075c <__aeabi_ddiv>
 80148ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80148f0:	f004 040f 	and.w	r4, r4, #15
 80148f4:	4e8e      	ldr	r6, [pc, #568]	; (8014b30 <_dtoa_r+0x5a8>)
 80148f6:	b954      	cbnz	r4, 801490e <_dtoa_r+0x386>
 80148f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80148fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014900:	f7eb ff2c 	bl	800075c <__aeabi_ddiv>
 8014904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014908:	e029      	b.n	801495e <_dtoa_r+0x3d6>
 801490a:	2702      	movs	r7, #2
 801490c:	e7f2      	b.n	80148f4 <_dtoa_r+0x36c>
 801490e:	07e1      	lsls	r1, r4, #31
 8014910:	d508      	bpl.n	8014924 <_dtoa_r+0x39c>
 8014912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014916:	e9d6 2300 	ldrd	r2, r3, [r6]
 801491a:	f7eb fdf5 	bl	8000508 <__aeabi_dmul>
 801491e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014922:	3701      	adds	r7, #1
 8014924:	1064      	asrs	r4, r4, #1
 8014926:	3608      	adds	r6, #8
 8014928:	e7e5      	b.n	80148f6 <_dtoa_r+0x36e>
 801492a:	f000 80a5 	beq.w	8014a78 <_dtoa_r+0x4f0>
 801492e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014932:	f1c9 0400 	rsb	r4, r9, #0
 8014936:	4b7d      	ldr	r3, [pc, #500]	; (8014b2c <_dtoa_r+0x5a4>)
 8014938:	f004 020f 	and.w	r2, r4, #15
 801493c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014944:	f7eb fde0 	bl	8000508 <__aeabi_dmul>
 8014948:	2702      	movs	r7, #2
 801494a:	2300      	movs	r3, #0
 801494c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014950:	4e77      	ldr	r6, [pc, #476]	; (8014b30 <_dtoa_r+0x5a8>)
 8014952:	1124      	asrs	r4, r4, #4
 8014954:	2c00      	cmp	r4, #0
 8014956:	f040 8084 	bne.w	8014a62 <_dtoa_r+0x4da>
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1d2      	bne.n	8014904 <_dtoa_r+0x37c>
 801495e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 808b 	beq.w	8014a7c <_dtoa_r+0x4f4>
 8014966:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801496a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801496e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014972:	2200      	movs	r2, #0
 8014974:	4b6f      	ldr	r3, [pc, #444]	; (8014b34 <_dtoa_r+0x5ac>)
 8014976:	f7ec f839 	bl	80009ec <__aeabi_dcmplt>
 801497a:	2800      	cmp	r0, #0
 801497c:	d07e      	beq.n	8014a7c <_dtoa_r+0x4f4>
 801497e:	9b02      	ldr	r3, [sp, #8]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d07b      	beq.n	8014a7c <_dtoa_r+0x4f4>
 8014984:	f1bb 0f00 	cmp.w	fp, #0
 8014988:	dd38      	ble.n	80149fc <_dtoa_r+0x474>
 801498a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801498e:	2200      	movs	r2, #0
 8014990:	4b69      	ldr	r3, [pc, #420]	; (8014b38 <_dtoa_r+0x5b0>)
 8014992:	f7eb fdb9 	bl	8000508 <__aeabi_dmul>
 8014996:	465c      	mov	r4, fp
 8014998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801499c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80149a0:	3701      	adds	r7, #1
 80149a2:	4638      	mov	r0, r7
 80149a4:	f7eb fd46 	bl	8000434 <__aeabi_i2d>
 80149a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149ac:	f7eb fdac 	bl	8000508 <__aeabi_dmul>
 80149b0:	2200      	movs	r2, #0
 80149b2:	4b62      	ldr	r3, [pc, #392]	; (8014b3c <_dtoa_r+0x5b4>)
 80149b4:	f7eb fbf2 	bl	800019c <__adddf3>
 80149b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80149bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80149c0:	9611      	str	r6, [sp, #68]	; 0x44
 80149c2:	2c00      	cmp	r4, #0
 80149c4:	d15d      	bne.n	8014a82 <_dtoa_r+0x4fa>
 80149c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80149ca:	2200      	movs	r2, #0
 80149cc:	4b5c      	ldr	r3, [pc, #368]	; (8014b40 <_dtoa_r+0x5b8>)
 80149ce:	f7eb fbe3 	bl	8000198 <__aeabi_dsub>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80149da:	4633      	mov	r3, r6
 80149dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80149de:	f7ec f823 	bl	8000a28 <__aeabi_dcmpgt>
 80149e2:	2800      	cmp	r0, #0
 80149e4:	f040 829e 	bne.w	8014f24 <_dtoa_r+0x99c>
 80149e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80149ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80149ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80149f2:	f7eb fffb 	bl	80009ec <__aeabi_dcmplt>
 80149f6:	2800      	cmp	r0, #0
 80149f8:	f040 8292 	bne.w	8014f20 <_dtoa_r+0x998>
 80149fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014a00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	f2c0 8153 	blt.w	8014cb2 <_dtoa_r+0x72a>
 8014a0c:	f1b9 0f0e 	cmp.w	r9, #14
 8014a10:	f300 814f 	bgt.w	8014cb2 <_dtoa_r+0x72a>
 8014a14:	4b45      	ldr	r3, [pc, #276]	; (8014b2c <_dtoa_r+0x5a4>)
 8014a16:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014a1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	f280 80db 	bge.w	8014be0 <_dtoa_r+0x658>
 8014a2a:	9b02      	ldr	r3, [sp, #8]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f300 80d7 	bgt.w	8014be0 <_dtoa_r+0x658>
 8014a32:	f040 8274 	bne.w	8014f1e <_dtoa_r+0x996>
 8014a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	4b40      	ldr	r3, [pc, #256]	; (8014b40 <_dtoa_r+0x5b8>)
 8014a3e:	f7eb fd63 	bl	8000508 <__aeabi_dmul>
 8014a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a46:	f7eb ffe5 	bl	8000a14 <__aeabi_dcmpge>
 8014a4a:	9c02      	ldr	r4, [sp, #8]
 8014a4c:	4626      	mov	r6, r4
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	f040 824a 	bne.w	8014ee8 <_dtoa_r+0x960>
 8014a54:	2331      	movs	r3, #49	; 0x31
 8014a56:	9f08      	ldr	r7, [sp, #32]
 8014a58:	f109 0901 	add.w	r9, r9, #1
 8014a5c:	f807 3b01 	strb.w	r3, [r7], #1
 8014a60:	e246      	b.n	8014ef0 <_dtoa_r+0x968>
 8014a62:	07e2      	lsls	r2, r4, #31
 8014a64:	d505      	bpl.n	8014a72 <_dtoa_r+0x4ea>
 8014a66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014a6a:	f7eb fd4d 	bl	8000508 <__aeabi_dmul>
 8014a6e:	2301      	movs	r3, #1
 8014a70:	3701      	adds	r7, #1
 8014a72:	1064      	asrs	r4, r4, #1
 8014a74:	3608      	adds	r6, #8
 8014a76:	e76d      	b.n	8014954 <_dtoa_r+0x3cc>
 8014a78:	2702      	movs	r7, #2
 8014a7a:	e770      	b.n	801495e <_dtoa_r+0x3d6>
 8014a7c:	46c8      	mov	r8, r9
 8014a7e:	9c02      	ldr	r4, [sp, #8]
 8014a80:	e78f      	b.n	80149a2 <_dtoa_r+0x41a>
 8014a82:	9908      	ldr	r1, [sp, #32]
 8014a84:	4b29      	ldr	r3, [pc, #164]	; (8014b2c <_dtoa_r+0x5a4>)
 8014a86:	4421      	add	r1, r4
 8014a88:	9112      	str	r1, [sp, #72]	; 0x48
 8014a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014a90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014a94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014a98:	2900      	cmp	r1, #0
 8014a9a:	d055      	beq.n	8014b48 <_dtoa_r+0x5c0>
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	4929      	ldr	r1, [pc, #164]	; (8014b44 <_dtoa_r+0x5bc>)
 8014aa0:	f7eb fe5c 	bl	800075c <__aeabi_ddiv>
 8014aa4:	463b      	mov	r3, r7
 8014aa6:	4632      	mov	r2, r6
 8014aa8:	f7eb fb76 	bl	8000198 <__aeabi_dsub>
 8014aac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014ab0:	9f08      	ldr	r7, [sp, #32]
 8014ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ab6:	f7eb ffd7 	bl	8000a68 <__aeabi_d2iz>
 8014aba:	4604      	mov	r4, r0
 8014abc:	f7eb fcba 	bl	8000434 <__aeabi_i2d>
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	460b      	mov	r3, r1
 8014ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ac8:	f7eb fb66 	bl	8000198 <__aeabi_dsub>
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	3430      	adds	r4, #48	; 0x30
 8014ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ada:	f807 4b01 	strb.w	r4, [r7], #1
 8014ade:	f7eb ff85 	bl	80009ec <__aeabi_dcmplt>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d174      	bne.n	8014bd0 <_dtoa_r+0x648>
 8014ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014aea:	2000      	movs	r0, #0
 8014aec:	4911      	ldr	r1, [pc, #68]	; (8014b34 <_dtoa_r+0x5ac>)
 8014aee:	f7eb fb53 	bl	8000198 <__aeabi_dsub>
 8014af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014af6:	f7eb ff79 	bl	80009ec <__aeabi_dcmplt>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	f040 80b6 	bne.w	8014c6c <_dtoa_r+0x6e4>
 8014b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b02:	429f      	cmp	r7, r3
 8014b04:	f43f af7a 	beq.w	80149fc <_dtoa_r+0x474>
 8014b08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	4b0a      	ldr	r3, [pc, #40]	; (8014b38 <_dtoa_r+0x5b0>)
 8014b10:	f7eb fcfa 	bl	8000508 <__aeabi_dmul>
 8014b14:	2200      	movs	r2, #0
 8014b16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b1e:	4b06      	ldr	r3, [pc, #24]	; (8014b38 <_dtoa_r+0x5b0>)
 8014b20:	f7eb fcf2 	bl	8000508 <__aeabi_dmul>
 8014b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b28:	e7c3      	b.n	8014ab2 <_dtoa_r+0x52a>
 8014b2a:	bf00      	nop
 8014b2c:	08017ea0 	.word	0x08017ea0
 8014b30:	08017e78 	.word	0x08017e78
 8014b34:	3ff00000 	.word	0x3ff00000
 8014b38:	40240000 	.word	0x40240000
 8014b3c:	401c0000 	.word	0x401c0000
 8014b40:	40140000 	.word	0x40140000
 8014b44:	3fe00000 	.word	0x3fe00000
 8014b48:	4630      	mov	r0, r6
 8014b4a:	4639      	mov	r1, r7
 8014b4c:	f7eb fcdc 	bl	8000508 <__aeabi_dmul>
 8014b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014b56:	9c08      	ldr	r4, [sp, #32]
 8014b58:	9314      	str	r3, [sp, #80]	; 0x50
 8014b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b5e:	f7eb ff83 	bl	8000a68 <__aeabi_d2iz>
 8014b62:	9015      	str	r0, [sp, #84]	; 0x54
 8014b64:	f7eb fc66 	bl	8000434 <__aeabi_i2d>
 8014b68:	4602      	mov	r2, r0
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b70:	f7eb fb12 	bl	8000198 <__aeabi_dsub>
 8014b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b76:	4606      	mov	r6, r0
 8014b78:	3330      	adds	r3, #48	; 0x30
 8014b7a:	f804 3b01 	strb.w	r3, [r4], #1
 8014b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b80:	460f      	mov	r7, r1
 8014b82:	429c      	cmp	r4, r3
 8014b84:	f04f 0200 	mov.w	r2, #0
 8014b88:	d124      	bne.n	8014bd4 <_dtoa_r+0x64c>
 8014b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b8e:	4bb3      	ldr	r3, [pc, #716]	; (8014e5c <_dtoa_r+0x8d4>)
 8014b90:	f7eb fb04 	bl	800019c <__adddf3>
 8014b94:	4602      	mov	r2, r0
 8014b96:	460b      	mov	r3, r1
 8014b98:	4630      	mov	r0, r6
 8014b9a:	4639      	mov	r1, r7
 8014b9c:	f7eb ff44 	bl	8000a28 <__aeabi_dcmpgt>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d162      	bne.n	8014c6a <_dtoa_r+0x6e2>
 8014ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ba8:	2000      	movs	r0, #0
 8014baa:	49ac      	ldr	r1, [pc, #688]	; (8014e5c <_dtoa_r+0x8d4>)
 8014bac:	f7eb faf4 	bl	8000198 <__aeabi_dsub>
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	4639      	mov	r1, r7
 8014bb8:	f7eb ff18 	bl	80009ec <__aeabi_dcmplt>
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	f43f af1d 	beq.w	80149fc <_dtoa_r+0x474>
 8014bc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014bc4:	1e7b      	subs	r3, r7, #1
 8014bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8014bc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8014bcc:	2b30      	cmp	r3, #48	; 0x30
 8014bce:	d0f8      	beq.n	8014bc2 <_dtoa_r+0x63a>
 8014bd0:	46c1      	mov	r9, r8
 8014bd2:	e03a      	b.n	8014c4a <_dtoa_r+0x6c2>
 8014bd4:	4ba2      	ldr	r3, [pc, #648]	; (8014e60 <_dtoa_r+0x8d8>)
 8014bd6:	f7eb fc97 	bl	8000508 <__aeabi_dmul>
 8014bda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bde:	e7bc      	b.n	8014b5a <_dtoa_r+0x5d2>
 8014be0:	9f08      	ldr	r7, [sp, #32]
 8014be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bea:	f7eb fdb7 	bl	800075c <__aeabi_ddiv>
 8014bee:	f7eb ff3b 	bl	8000a68 <__aeabi_d2iz>
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	f7eb fc1e 	bl	8000434 <__aeabi_i2d>
 8014bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bfc:	f7eb fc84 	bl	8000508 <__aeabi_dmul>
 8014c00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014c04:	460b      	mov	r3, r1
 8014c06:	4602      	mov	r2, r0
 8014c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c0c:	f7eb fac4 	bl	8000198 <__aeabi_dsub>
 8014c10:	f807 6b01 	strb.w	r6, [r7], #1
 8014c14:	9e08      	ldr	r6, [sp, #32]
 8014c16:	9b02      	ldr	r3, [sp, #8]
 8014c18:	1bbe      	subs	r6, r7, r6
 8014c1a:	42b3      	cmp	r3, r6
 8014c1c:	d13a      	bne.n	8014c94 <_dtoa_r+0x70c>
 8014c1e:	4602      	mov	r2, r0
 8014c20:	460b      	mov	r3, r1
 8014c22:	f7eb fabb 	bl	800019c <__adddf3>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c32:	f7eb fef9 	bl	8000a28 <__aeabi_dcmpgt>
 8014c36:	bb58      	cbnz	r0, 8014c90 <_dtoa_r+0x708>
 8014c38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c40:	f7eb feca 	bl	80009d8 <__aeabi_dcmpeq>
 8014c44:	b108      	cbz	r0, 8014c4a <_dtoa_r+0x6c2>
 8014c46:	07e1      	lsls	r1, r4, #31
 8014c48:	d422      	bmi.n	8014c90 <_dtoa_r+0x708>
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	4651      	mov	r1, sl
 8014c4e:	f000 fe63 	bl	8015918 <_Bfree>
 8014c52:	2300      	movs	r3, #0
 8014c54:	703b      	strb	r3, [r7, #0]
 8014c56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c58:	f109 0001 	add.w	r0, r9, #1
 8014c5c:	6018      	str	r0, [r3, #0]
 8014c5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f43f acdf 	beq.w	8014624 <_dtoa_r+0x9c>
 8014c66:	601f      	str	r7, [r3, #0]
 8014c68:	e4dc      	b.n	8014624 <_dtoa_r+0x9c>
 8014c6a:	4627      	mov	r7, r4
 8014c6c:	463b      	mov	r3, r7
 8014c6e:	461f      	mov	r7, r3
 8014c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c74:	2a39      	cmp	r2, #57	; 0x39
 8014c76:	d107      	bne.n	8014c88 <_dtoa_r+0x700>
 8014c78:	9a08      	ldr	r2, [sp, #32]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d1f7      	bne.n	8014c6e <_dtoa_r+0x6e6>
 8014c7e:	2230      	movs	r2, #48	; 0x30
 8014c80:	9908      	ldr	r1, [sp, #32]
 8014c82:	f108 0801 	add.w	r8, r8, #1
 8014c86:	700a      	strb	r2, [r1, #0]
 8014c88:	781a      	ldrb	r2, [r3, #0]
 8014c8a:	3201      	adds	r2, #1
 8014c8c:	701a      	strb	r2, [r3, #0]
 8014c8e:	e79f      	b.n	8014bd0 <_dtoa_r+0x648>
 8014c90:	46c8      	mov	r8, r9
 8014c92:	e7eb      	b.n	8014c6c <_dtoa_r+0x6e4>
 8014c94:	2200      	movs	r2, #0
 8014c96:	4b72      	ldr	r3, [pc, #456]	; (8014e60 <_dtoa_r+0x8d8>)
 8014c98:	f7eb fc36 	bl	8000508 <__aeabi_dmul>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	f7eb fe96 	bl	80009d8 <__aeabi_dcmpeq>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d098      	beq.n	8014be2 <_dtoa_r+0x65a>
 8014cb0:	e7cb      	b.n	8014c4a <_dtoa_r+0x6c2>
 8014cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014cb4:	2a00      	cmp	r2, #0
 8014cb6:	f000 80cd 	beq.w	8014e54 <_dtoa_r+0x8cc>
 8014cba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014cbc:	2a01      	cmp	r2, #1
 8014cbe:	f300 80af 	bgt.w	8014e20 <_dtoa_r+0x898>
 8014cc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cc4:	2a00      	cmp	r2, #0
 8014cc6:	f000 80a7 	beq.w	8014e18 <_dtoa_r+0x890>
 8014cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014cd0:	9f06      	ldr	r7, [sp, #24]
 8014cd2:	9a06      	ldr	r2, [sp, #24]
 8014cd4:	2101      	movs	r1, #1
 8014cd6:	441a      	add	r2, r3
 8014cd8:	9206      	str	r2, [sp, #24]
 8014cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cdc:	4628      	mov	r0, r5
 8014cde:	441a      	add	r2, r3
 8014ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8014ce2:	f000 ff1d 	bl	8015b20 <__i2b>
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	2f00      	cmp	r7, #0
 8014cea:	dd0c      	ble.n	8014d06 <_dtoa_r+0x77e>
 8014cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	dd09      	ble.n	8014d06 <_dtoa_r+0x77e>
 8014cf2:	42bb      	cmp	r3, r7
 8014cf4:	bfa8      	it	ge
 8014cf6:	463b      	movge	r3, r7
 8014cf8:	9a06      	ldr	r2, [sp, #24]
 8014cfa:	1aff      	subs	r7, r7, r3
 8014cfc:	1ad2      	subs	r2, r2, r3
 8014cfe:	9206      	str	r2, [sp, #24]
 8014d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	9309      	str	r3, [sp, #36]	; 0x24
 8014d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d08:	b1f3      	cbz	r3, 8014d48 <_dtoa_r+0x7c0>
 8014d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f000 80a9 	beq.w	8014e64 <_dtoa_r+0x8dc>
 8014d12:	2c00      	cmp	r4, #0
 8014d14:	dd10      	ble.n	8014d38 <_dtoa_r+0x7b0>
 8014d16:	4631      	mov	r1, r6
 8014d18:	4622      	mov	r2, r4
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f000 ffba 	bl	8015c94 <__pow5mult>
 8014d20:	4652      	mov	r2, sl
 8014d22:	4601      	mov	r1, r0
 8014d24:	4606      	mov	r6, r0
 8014d26:	4628      	mov	r0, r5
 8014d28:	f000 ff10 	bl	8015b4c <__multiply>
 8014d2c:	4680      	mov	r8, r0
 8014d2e:	4651      	mov	r1, sl
 8014d30:	4628      	mov	r0, r5
 8014d32:	f000 fdf1 	bl	8015918 <_Bfree>
 8014d36:	46c2      	mov	sl, r8
 8014d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d3a:	1b1a      	subs	r2, r3, r4
 8014d3c:	d004      	beq.n	8014d48 <_dtoa_r+0x7c0>
 8014d3e:	4651      	mov	r1, sl
 8014d40:	4628      	mov	r0, r5
 8014d42:	f000 ffa7 	bl	8015c94 <__pow5mult>
 8014d46:	4682      	mov	sl, r0
 8014d48:	2101      	movs	r1, #1
 8014d4a:	4628      	mov	r0, r5
 8014d4c:	f000 fee8 	bl	8015b20 <__i2b>
 8014d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d52:	4604      	mov	r4, r0
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f340 8087 	ble.w	8014e68 <_dtoa_r+0x8e0>
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	4601      	mov	r1, r0
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f000 ff98 	bl	8015c94 <__pow5mult>
 8014d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014d66:	4604      	mov	r4, r0
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	f340 8080 	ble.w	8014e6e <_dtoa_r+0x8e6>
 8014d6e:	f04f 0800 	mov.w	r8, #0
 8014d72:	6923      	ldr	r3, [r4, #16]
 8014d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d78:	6918      	ldr	r0, [r3, #16]
 8014d7a:	f000 fe83 	bl	8015a84 <__hi0bits>
 8014d7e:	f1c0 0020 	rsb	r0, r0, #32
 8014d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d84:	4418      	add	r0, r3
 8014d86:	f010 001f 	ands.w	r0, r0, #31
 8014d8a:	f000 8092 	beq.w	8014eb2 <_dtoa_r+0x92a>
 8014d8e:	f1c0 0320 	rsb	r3, r0, #32
 8014d92:	2b04      	cmp	r3, #4
 8014d94:	f340 808a 	ble.w	8014eac <_dtoa_r+0x924>
 8014d98:	f1c0 001c 	rsb	r0, r0, #28
 8014d9c:	9b06      	ldr	r3, [sp, #24]
 8014d9e:	4407      	add	r7, r0
 8014da0:	4403      	add	r3, r0
 8014da2:	9306      	str	r3, [sp, #24]
 8014da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da6:	4403      	add	r3, r0
 8014da8:	9309      	str	r3, [sp, #36]	; 0x24
 8014daa:	9b06      	ldr	r3, [sp, #24]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	dd05      	ble.n	8014dbc <_dtoa_r+0x834>
 8014db0:	4651      	mov	r1, sl
 8014db2:	461a      	mov	r2, r3
 8014db4:	4628      	mov	r0, r5
 8014db6:	f000 ffc7 	bl	8015d48 <__lshift>
 8014dba:	4682      	mov	sl, r0
 8014dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	dd05      	ble.n	8014dce <_dtoa_r+0x846>
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f000 ffbe 	bl	8015d48 <__lshift>
 8014dcc:	4604      	mov	r4, r0
 8014dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d070      	beq.n	8014eb6 <_dtoa_r+0x92e>
 8014dd4:	4621      	mov	r1, r4
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	f001 f822 	bl	8015e20 <__mcmp>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	da6a      	bge.n	8014eb6 <_dtoa_r+0x92e>
 8014de0:	2300      	movs	r3, #0
 8014de2:	4651      	mov	r1, sl
 8014de4:	220a      	movs	r2, #10
 8014de6:	4628      	mov	r0, r5
 8014de8:	f000 fdb8 	bl	801595c <__multadd>
 8014dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dee:	4682      	mov	sl, r0
 8014df0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	f000 8193 	beq.w	8015120 <_dtoa_r+0xb98>
 8014dfa:	4631      	mov	r1, r6
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	220a      	movs	r2, #10
 8014e00:	4628      	mov	r0, r5
 8014e02:	f000 fdab 	bl	801595c <__multadd>
 8014e06:	f1bb 0f00 	cmp.w	fp, #0
 8014e0a:	4606      	mov	r6, r0
 8014e0c:	f300 8093 	bgt.w	8014f36 <_dtoa_r+0x9ae>
 8014e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e12:	2b02      	cmp	r3, #2
 8014e14:	dc57      	bgt.n	8014ec6 <_dtoa_r+0x93e>
 8014e16:	e08e      	b.n	8014f36 <_dtoa_r+0x9ae>
 8014e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014e1e:	e756      	b.n	8014cce <_dtoa_r+0x746>
 8014e20:	9b02      	ldr	r3, [sp, #8]
 8014e22:	1e5c      	subs	r4, r3, #1
 8014e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e26:	42a3      	cmp	r3, r4
 8014e28:	bfb7      	itett	lt
 8014e2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014e2c:	1b1c      	subge	r4, r3, r4
 8014e2e:	1ae2      	sublt	r2, r4, r3
 8014e30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014e32:	bfbe      	ittt	lt
 8014e34:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014e36:	189b      	addlt	r3, r3, r2
 8014e38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014e3a:	9b02      	ldr	r3, [sp, #8]
 8014e3c:	bfb8      	it	lt
 8014e3e:	2400      	movlt	r4, #0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	bfbb      	ittet	lt
 8014e44:	9b06      	ldrlt	r3, [sp, #24]
 8014e46:	9a02      	ldrlt	r2, [sp, #8]
 8014e48:	9f06      	ldrge	r7, [sp, #24]
 8014e4a:	1a9f      	sublt	r7, r3, r2
 8014e4c:	bfac      	ite	ge
 8014e4e:	9b02      	ldrge	r3, [sp, #8]
 8014e50:	2300      	movlt	r3, #0
 8014e52:	e73e      	b.n	8014cd2 <_dtoa_r+0x74a>
 8014e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e56:	9f06      	ldr	r7, [sp, #24]
 8014e58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014e5a:	e745      	b.n	8014ce8 <_dtoa_r+0x760>
 8014e5c:	3fe00000 	.word	0x3fe00000
 8014e60:	40240000 	.word	0x40240000
 8014e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e66:	e76a      	b.n	8014d3e <_dtoa_r+0x7b6>
 8014e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	dc19      	bgt.n	8014ea2 <_dtoa_r+0x91a>
 8014e6e:	9b04      	ldr	r3, [sp, #16]
 8014e70:	b9bb      	cbnz	r3, 8014ea2 <_dtoa_r+0x91a>
 8014e72:	9b05      	ldr	r3, [sp, #20]
 8014e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e78:	b99b      	cbnz	r3, 8014ea2 <_dtoa_r+0x91a>
 8014e7a:	9b05      	ldr	r3, [sp, #20]
 8014e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e80:	0d1b      	lsrs	r3, r3, #20
 8014e82:	051b      	lsls	r3, r3, #20
 8014e84:	b183      	cbz	r3, 8014ea8 <_dtoa_r+0x920>
 8014e86:	f04f 0801 	mov.w	r8, #1
 8014e8a:	9b06      	ldr	r3, [sp, #24]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	9306      	str	r3, [sp, #24]
 8014e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e92:	3301      	adds	r3, #1
 8014e94:	9309      	str	r3, [sp, #36]	; 0x24
 8014e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	f47f af6a 	bne.w	8014d72 <_dtoa_r+0x7ea>
 8014e9e:	2001      	movs	r0, #1
 8014ea0:	e76f      	b.n	8014d82 <_dtoa_r+0x7fa>
 8014ea2:	f04f 0800 	mov.w	r8, #0
 8014ea6:	e7f6      	b.n	8014e96 <_dtoa_r+0x90e>
 8014ea8:	4698      	mov	r8, r3
 8014eaa:	e7f4      	b.n	8014e96 <_dtoa_r+0x90e>
 8014eac:	f43f af7d 	beq.w	8014daa <_dtoa_r+0x822>
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	301c      	adds	r0, #28
 8014eb4:	e772      	b.n	8014d9c <_dtoa_r+0x814>
 8014eb6:	9b02      	ldr	r3, [sp, #8]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	dc36      	bgt.n	8014f2a <_dtoa_r+0x9a2>
 8014ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ebe:	2b02      	cmp	r3, #2
 8014ec0:	dd33      	ble.n	8014f2a <_dtoa_r+0x9a2>
 8014ec2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014ec6:	f1bb 0f00 	cmp.w	fp, #0
 8014eca:	d10d      	bne.n	8014ee8 <_dtoa_r+0x960>
 8014ecc:	4621      	mov	r1, r4
 8014ece:	465b      	mov	r3, fp
 8014ed0:	2205      	movs	r2, #5
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f000 fd42 	bl	801595c <__multadd>
 8014ed8:	4601      	mov	r1, r0
 8014eda:	4604      	mov	r4, r0
 8014edc:	4650      	mov	r0, sl
 8014ede:	f000 ff9f 	bl	8015e20 <__mcmp>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	f73f adb6 	bgt.w	8014a54 <_dtoa_r+0x4cc>
 8014ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014eea:	9f08      	ldr	r7, [sp, #32]
 8014eec:	ea6f 0903 	mvn.w	r9, r3
 8014ef0:	f04f 0800 	mov.w	r8, #0
 8014ef4:	4621      	mov	r1, r4
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	f000 fd0e 	bl	8015918 <_Bfree>
 8014efc:	2e00      	cmp	r6, #0
 8014efe:	f43f aea4 	beq.w	8014c4a <_dtoa_r+0x6c2>
 8014f02:	f1b8 0f00 	cmp.w	r8, #0
 8014f06:	d005      	beq.n	8014f14 <_dtoa_r+0x98c>
 8014f08:	45b0      	cmp	r8, r6
 8014f0a:	d003      	beq.n	8014f14 <_dtoa_r+0x98c>
 8014f0c:	4641      	mov	r1, r8
 8014f0e:	4628      	mov	r0, r5
 8014f10:	f000 fd02 	bl	8015918 <_Bfree>
 8014f14:	4631      	mov	r1, r6
 8014f16:	4628      	mov	r0, r5
 8014f18:	f000 fcfe 	bl	8015918 <_Bfree>
 8014f1c:	e695      	b.n	8014c4a <_dtoa_r+0x6c2>
 8014f1e:	2400      	movs	r4, #0
 8014f20:	4626      	mov	r6, r4
 8014f22:	e7e1      	b.n	8014ee8 <_dtoa_r+0x960>
 8014f24:	46c1      	mov	r9, r8
 8014f26:	4626      	mov	r6, r4
 8014f28:	e594      	b.n	8014a54 <_dtoa_r+0x4cc>
 8014f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f000 80fc 	beq.w	801512e <_dtoa_r+0xba6>
 8014f36:	2f00      	cmp	r7, #0
 8014f38:	dd05      	ble.n	8014f46 <_dtoa_r+0x9be>
 8014f3a:	4631      	mov	r1, r6
 8014f3c:	463a      	mov	r2, r7
 8014f3e:	4628      	mov	r0, r5
 8014f40:	f000 ff02 	bl	8015d48 <__lshift>
 8014f44:	4606      	mov	r6, r0
 8014f46:	f1b8 0f00 	cmp.w	r8, #0
 8014f4a:	d05c      	beq.n	8015006 <_dtoa_r+0xa7e>
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	6871      	ldr	r1, [r6, #4]
 8014f50:	f000 fca2 	bl	8015898 <_Balloc>
 8014f54:	4607      	mov	r7, r0
 8014f56:	b928      	cbnz	r0, 8014f64 <_dtoa_r+0x9dc>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014f5e:	4b7e      	ldr	r3, [pc, #504]	; (8015158 <_dtoa_r+0xbd0>)
 8014f60:	f7ff bb26 	b.w	80145b0 <_dtoa_r+0x28>
 8014f64:	6932      	ldr	r2, [r6, #16]
 8014f66:	f106 010c 	add.w	r1, r6, #12
 8014f6a:	3202      	adds	r2, #2
 8014f6c:	0092      	lsls	r2, r2, #2
 8014f6e:	300c      	adds	r0, #12
 8014f70:	f7fd fb56 	bl	8012620 <memcpy>
 8014f74:	2201      	movs	r2, #1
 8014f76:	4639      	mov	r1, r7
 8014f78:	4628      	mov	r0, r5
 8014f7a:	f000 fee5 	bl	8015d48 <__lshift>
 8014f7e:	46b0      	mov	r8, r6
 8014f80:	4606      	mov	r6, r0
 8014f82:	9b08      	ldr	r3, [sp, #32]
 8014f84:	3301      	adds	r3, #1
 8014f86:	9302      	str	r3, [sp, #8]
 8014f88:	9b08      	ldr	r3, [sp, #32]
 8014f8a:	445b      	add	r3, fp
 8014f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8014f8e:	9b04      	ldr	r3, [sp, #16]
 8014f90:	f003 0301 	and.w	r3, r3, #1
 8014f94:	9309      	str	r3, [sp, #36]	; 0x24
 8014f96:	9b02      	ldr	r3, [sp, #8]
 8014f98:	4621      	mov	r1, r4
 8014f9a:	4650      	mov	r0, sl
 8014f9c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014fa0:	f7ff fa62 	bl	8014468 <quorem>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	4641      	mov	r1, r8
 8014fa8:	3330      	adds	r3, #48	; 0x30
 8014faa:	9004      	str	r0, [sp, #16]
 8014fac:	4650      	mov	r0, sl
 8014fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fb0:	f000 ff36 	bl	8015e20 <__mcmp>
 8014fb4:	4632      	mov	r2, r6
 8014fb6:	9006      	str	r0, [sp, #24]
 8014fb8:	4621      	mov	r1, r4
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f000 ff4c 	bl	8015e58 <__mdiff>
 8014fc0:	68c2      	ldr	r2, [r0, #12]
 8014fc2:	4607      	mov	r7, r0
 8014fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fc6:	bb02      	cbnz	r2, 801500a <_dtoa_r+0xa82>
 8014fc8:	4601      	mov	r1, r0
 8014fca:	4650      	mov	r0, sl
 8014fcc:	f000 ff28 	bl	8015e20 <__mcmp>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fd4:	4639      	mov	r1, r7
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014fdc:	f000 fc9c 	bl	8015918 <_Bfree>
 8014fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fe4:	9f02      	ldr	r7, [sp, #8]
 8014fe6:	ea43 0102 	orr.w	r1, r3, r2
 8014fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fec:	430b      	orrs	r3, r1
 8014fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ff0:	d10d      	bne.n	801500e <_dtoa_r+0xa86>
 8014ff2:	2b39      	cmp	r3, #57	; 0x39
 8014ff4:	d027      	beq.n	8015046 <_dtoa_r+0xabe>
 8014ff6:	9a06      	ldr	r2, [sp, #24]
 8014ff8:	2a00      	cmp	r2, #0
 8014ffa:	dd01      	ble.n	8015000 <_dtoa_r+0xa78>
 8014ffc:	9b04      	ldr	r3, [sp, #16]
 8014ffe:	3331      	adds	r3, #49	; 0x31
 8015000:	f88b 3000 	strb.w	r3, [fp]
 8015004:	e776      	b.n	8014ef4 <_dtoa_r+0x96c>
 8015006:	4630      	mov	r0, r6
 8015008:	e7b9      	b.n	8014f7e <_dtoa_r+0x9f6>
 801500a:	2201      	movs	r2, #1
 801500c:	e7e2      	b.n	8014fd4 <_dtoa_r+0xa4c>
 801500e:	9906      	ldr	r1, [sp, #24]
 8015010:	2900      	cmp	r1, #0
 8015012:	db04      	blt.n	801501e <_dtoa_r+0xa96>
 8015014:	9822      	ldr	r0, [sp, #136]	; 0x88
 8015016:	4301      	orrs	r1, r0
 8015018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801501a:	4301      	orrs	r1, r0
 801501c:	d120      	bne.n	8015060 <_dtoa_r+0xad8>
 801501e:	2a00      	cmp	r2, #0
 8015020:	ddee      	ble.n	8015000 <_dtoa_r+0xa78>
 8015022:	4651      	mov	r1, sl
 8015024:	2201      	movs	r2, #1
 8015026:	4628      	mov	r0, r5
 8015028:	9302      	str	r3, [sp, #8]
 801502a:	f000 fe8d 	bl	8015d48 <__lshift>
 801502e:	4621      	mov	r1, r4
 8015030:	4682      	mov	sl, r0
 8015032:	f000 fef5 	bl	8015e20 <__mcmp>
 8015036:	2800      	cmp	r0, #0
 8015038:	9b02      	ldr	r3, [sp, #8]
 801503a:	dc02      	bgt.n	8015042 <_dtoa_r+0xaba>
 801503c:	d1e0      	bne.n	8015000 <_dtoa_r+0xa78>
 801503e:	07da      	lsls	r2, r3, #31
 8015040:	d5de      	bpl.n	8015000 <_dtoa_r+0xa78>
 8015042:	2b39      	cmp	r3, #57	; 0x39
 8015044:	d1da      	bne.n	8014ffc <_dtoa_r+0xa74>
 8015046:	2339      	movs	r3, #57	; 0x39
 8015048:	f88b 3000 	strb.w	r3, [fp]
 801504c:	463b      	mov	r3, r7
 801504e:	461f      	mov	r7, r3
 8015050:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8015054:	3b01      	subs	r3, #1
 8015056:	2a39      	cmp	r2, #57	; 0x39
 8015058:	d050      	beq.n	80150fc <_dtoa_r+0xb74>
 801505a:	3201      	adds	r2, #1
 801505c:	701a      	strb	r2, [r3, #0]
 801505e:	e749      	b.n	8014ef4 <_dtoa_r+0x96c>
 8015060:	2a00      	cmp	r2, #0
 8015062:	dd03      	ble.n	801506c <_dtoa_r+0xae4>
 8015064:	2b39      	cmp	r3, #57	; 0x39
 8015066:	d0ee      	beq.n	8015046 <_dtoa_r+0xabe>
 8015068:	3301      	adds	r3, #1
 801506a:	e7c9      	b.n	8015000 <_dtoa_r+0xa78>
 801506c:	9a02      	ldr	r2, [sp, #8]
 801506e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015070:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015074:	428a      	cmp	r2, r1
 8015076:	d02a      	beq.n	80150ce <_dtoa_r+0xb46>
 8015078:	4651      	mov	r1, sl
 801507a:	2300      	movs	r3, #0
 801507c:	220a      	movs	r2, #10
 801507e:	4628      	mov	r0, r5
 8015080:	f000 fc6c 	bl	801595c <__multadd>
 8015084:	45b0      	cmp	r8, r6
 8015086:	4682      	mov	sl, r0
 8015088:	f04f 0300 	mov.w	r3, #0
 801508c:	f04f 020a 	mov.w	r2, #10
 8015090:	4641      	mov	r1, r8
 8015092:	4628      	mov	r0, r5
 8015094:	d107      	bne.n	80150a6 <_dtoa_r+0xb1e>
 8015096:	f000 fc61 	bl	801595c <__multadd>
 801509a:	4680      	mov	r8, r0
 801509c:	4606      	mov	r6, r0
 801509e:	9b02      	ldr	r3, [sp, #8]
 80150a0:	3301      	adds	r3, #1
 80150a2:	9302      	str	r3, [sp, #8]
 80150a4:	e777      	b.n	8014f96 <_dtoa_r+0xa0e>
 80150a6:	f000 fc59 	bl	801595c <__multadd>
 80150aa:	4631      	mov	r1, r6
 80150ac:	4680      	mov	r8, r0
 80150ae:	2300      	movs	r3, #0
 80150b0:	220a      	movs	r2, #10
 80150b2:	4628      	mov	r0, r5
 80150b4:	f000 fc52 	bl	801595c <__multadd>
 80150b8:	4606      	mov	r6, r0
 80150ba:	e7f0      	b.n	801509e <_dtoa_r+0xb16>
 80150bc:	f1bb 0f00 	cmp.w	fp, #0
 80150c0:	bfcc      	ite	gt
 80150c2:	465f      	movgt	r7, fp
 80150c4:	2701      	movle	r7, #1
 80150c6:	f04f 0800 	mov.w	r8, #0
 80150ca:	9a08      	ldr	r2, [sp, #32]
 80150cc:	4417      	add	r7, r2
 80150ce:	4651      	mov	r1, sl
 80150d0:	2201      	movs	r2, #1
 80150d2:	4628      	mov	r0, r5
 80150d4:	9302      	str	r3, [sp, #8]
 80150d6:	f000 fe37 	bl	8015d48 <__lshift>
 80150da:	4621      	mov	r1, r4
 80150dc:	4682      	mov	sl, r0
 80150de:	f000 fe9f 	bl	8015e20 <__mcmp>
 80150e2:	2800      	cmp	r0, #0
 80150e4:	dcb2      	bgt.n	801504c <_dtoa_r+0xac4>
 80150e6:	d102      	bne.n	80150ee <_dtoa_r+0xb66>
 80150e8:	9b02      	ldr	r3, [sp, #8]
 80150ea:	07db      	lsls	r3, r3, #31
 80150ec:	d4ae      	bmi.n	801504c <_dtoa_r+0xac4>
 80150ee:	463b      	mov	r3, r7
 80150f0:	461f      	mov	r7, r3
 80150f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150f6:	2a30      	cmp	r2, #48	; 0x30
 80150f8:	d0fa      	beq.n	80150f0 <_dtoa_r+0xb68>
 80150fa:	e6fb      	b.n	8014ef4 <_dtoa_r+0x96c>
 80150fc:	9a08      	ldr	r2, [sp, #32]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d1a5      	bne.n	801504e <_dtoa_r+0xac6>
 8015102:	2331      	movs	r3, #49	; 0x31
 8015104:	f109 0901 	add.w	r9, r9, #1
 8015108:	7013      	strb	r3, [r2, #0]
 801510a:	e6f3      	b.n	8014ef4 <_dtoa_r+0x96c>
 801510c:	4b13      	ldr	r3, [pc, #76]	; (801515c <_dtoa_r+0xbd4>)
 801510e:	f7ff baa7 	b.w	8014660 <_dtoa_r+0xd8>
 8015112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015114:	2b00      	cmp	r3, #0
 8015116:	f47f aa80 	bne.w	801461a <_dtoa_r+0x92>
 801511a:	4b11      	ldr	r3, [pc, #68]	; (8015160 <_dtoa_r+0xbd8>)
 801511c:	f7ff baa0 	b.w	8014660 <_dtoa_r+0xd8>
 8015120:	f1bb 0f00 	cmp.w	fp, #0
 8015124:	dc03      	bgt.n	801512e <_dtoa_r+0xba6>
 8015126:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015128:	2b02      	cmp	r3, #2
 801512a:	f73f aecc 	bgt.w	8014ec6 <_dtoa_r+0x93e>
 801512e:	9f08      	ldr	r7, [sp, #32]
 8015130:	4621      	mov	r1, r4
 8015132:	4650      	mov	r0, sl
 8015134:	f7ff f998 	bl	8014468 <quorem>
 8015138:	9a08      	ldr	r2, [sp, #32]
 801513a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801513e:	f807 3b01 	strb.w	r3, [r7], #1
 8015142:	1aba      	subs	r2, r7, r2
 8015144:	4593      	cmp	fp, r2
 8015146:	ddb9      	ble.n	80150bc <_dtoa_r+0xb34>
 8015148:	4651      	mov	r1, sl
 801514a:	2300      	movs	r3, #0
 801514c:	220a      	movs	r2, #10
 801514e:	4628      	mov	r0, r5
 8015150:	f000 fc04 	bl	801595c <__multadd>
 8015154:	4682      	mov	sl, r0
 8015156:	e7eb      	b.n	8015130 <_dtoa_r+0xba8>
 8015158:	08017d84 	.word	0x08017d84
 801515c:	08017f89 	.word	0x08017f89
 8015160:	08017d01 	.word	0x08017d01

08015164 <rshift>:
 8015164:	6903      	ldr	r3, [r0, #16]
 8015166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801516a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801516e:	f100 0414 	add.w	r4, r0, #20
 8015172:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015176:	dd46      	ble.n	8015206 <rshift+0xa2>
 8015178:	f011 011f 	ands.w	r1, r1, #31
 801517c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015184:	d10c      	bne.n	80151a0 <rshift+0x3c>
 8015186:	4629      	mov	r1, r5
 8015188:	f100 0710 	add.w	r7, r0, #16
 801518c:	42b1      	cmp	r1, r6
 801518e:	d335      	bcc.n	80151fc <rshift+0x98>
 8015190:	1a9b      	subs	r3, r3, r2
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	1eea      	subs	r2, r5, #3
 8015196:	4296      	cmp	r6, r2
 8015198:	bf38      	it	cc
 801519a:	2300      	movcc	r3, #0
 801519c:	4423      	add	r3, r4
 801519e:	e015      	b.n	80151cc <rshift+0x68>
 80151a0:	46a1      	mov	r9, r4
 80151a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80151a6:	f1c1 0820 	rsb	r8, r1, #32
 80151aa:	40cf      	lsrs	r7, r1
 80151ac:	f105 0e04 	add.w	lr, r5, #4
 80151b0:	4576      	cmp	r6, lr
 80151b2:	46f4      	mov	ip, lr
 80151b4:	d816      	bhi.n	80151e4 <rshift+0x80>
 80151b6:	1a9b      	subs	r3, r3, r2
 80151b8:	009a      	lsls	r2, r3, #2
 80151ba:	3a04      	subs	r2, #4
 80151bc:	3501      	adds	r5, #1
 80151be:	42ae      	cmp	r6, r5
 80151c0:	bf38      	it	cc
 80151c2:	2200      	movcc	r2, #0
 80151c4:	18a3      	adds	r3, r4, r2
 80151c6:	50a7      	str	r7, [r4, r2]
 80151c8:	b107      	cbz	r7, 80151cc <rshift+0x68>
 80151ca:	3304      	adds	r3, #4
 80151cc:	42a3      	cmp	r3, r4
 80151ce:	eba3 0204 	sub.w	r2, r3, r4
 80151d2:	bf08      	it	eq
 80151d4:	2300      	moveq	r3, #0
 80151d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80151da:	6102      	str	r2, [r0, #16]
 80151dc:	bf08      	it	eq
 80151de:	6143      	streq	r3, [r0, #20]
 80151e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151e4:	f8dc c000 	ldr.w	ip, [ip]
 80151e8:	fa0c fc08 	lsl.w	ip, ip, r8
 80151ec:	ea4c 0707 	orr.w	r7, ip, r7
 80151f0:	f849 7b04 	str.w	r7, [r9], #4
 80151f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151f8:	40cf      	lsrs	r7, r1
 80151fa:	e7d9      	b.n	80151b0 <rshift+0x4c>
 80151fc:	f851 cb04 	ldr.w	ip, [r1], #4
 8015200:	f847 cf04 	str.w	ip, [r7, #4]!
 8015204:	e7c2      	b.n	801518c <rshift+0x28>
 8015206:	4623      	mov	r3, r4
 8015208:	e7e0      	b.n	80151cc <rshift+0x68>

0801520a <__hexdig_fun>:
 801520a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801520e:	2b09      	cmp	r3, #9
 8015210:	d802      	bhi.n	8015218 <__hexdig_fun+0xe>
 8015212:	3820      	subs	r0, #32
 8015214:	b2c0      	uxtb	r0, r0
 8015216:	4770      	bx	lr
 8015218:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801521c:	2b05      	cmp	r3, #5
 801521e:	d801      	bhi.n	8015224 <__hexdig_fun+0x1a>
 8015220:	3847      	subs	r0, #71	; 0x47
 8015222:	e7f7      	b.n	8015214 <__hexdig_fun+0xa>
 8015224:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015228:	2b05      	cmp	r3, #5
 801522a:	d801      	bhi.n	8015230 <__hexdig_fun+0x26>
 801522c:	3827      	subs	r0, #39	; 0x27
 801522e:	e7f1      	b.n	8015214 <__hexdig_fun+0xa>
 8015230:	2000      	movs	r0, #0
 8015232:	4770      	bx	lr

08015234 <__gethex>:
 8015234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015238:	b08b      	sub	sp, #44	; 0x2c
 801523a:	9306      	str	r3, [sp, #24]
 801523c:	4bb9      	ldr	r3, [pc, #740]	; (8015524 <__gethex+0x2f0>)
 801523e:	9002      	str	r0, [sp, #8]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	468b      	mov	fp, r1
 8015244:	4618      	mov	r0, r3
 8015246:	4690      	mov	r8, r2
 8015248:	9303      	str	r3, [sp, #12]
 801524a:	f7ea ff99 	bl	8000180 <strlen>
 801524e:	4682      	mov	sl, r0
 8015250:	9b03      	ldr	r3, [sp, #12]
 8015252:	f8db 2000 	ldr.w	r2, [fp]
 8015256:	4403      	add	r3, r0
 8015258:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801525c:	9307      	str	r3, [sp, #28]
 801525e:	1c93      	adds	r3, r2, #2
 8015260:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015264:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015268:	32fe      	adds	r2, #254	; 0xfe
 801526a:	18d1      	adds	r1, r2, r3
 801526c:	461f      	mov	r7, r3
 801526e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015272:	9101      	str	r1, [sp, #4]
 8015274:	2830      	cmp	r0, #48	; 0x30
 8015276:	d0f8      	beq.n	801526a <__gethex+0x36>
 8015278:	f7ff ffc7 	bl	801520a <__hexdig_fun>
 801527c:	4604      	mov	r4, r0
 801527e:	2800      	cmp	r0, #0
 8015280:	d13a      	bne.n	80152f8 <__gethex+0xc4>
 8015282:	4652      	mov	r2, sl
 8015284:	4638      	mov	r0, r7
 8015286:	9903      	ldr	r1, [sp, #12]
 8015288:	f001 fc8a 	bl	8016ba0 <strncmp>
 801528c:	4605      	mov	r5, r0
 801528e:	2800      	cmp	r0, #0
 8015290:	d166      	bne.n	8015360 <__gethex+0x12c>
 8015292:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015296:	eb07 060a 	add.w	r6, r7, sl
 801529a:	f7ff ffb6 	bl	801520a <__hexdig_fun>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d060      	beq.n	8015364 <__gethex+0x130>
 80152a2:	4633      	mov	r3, r6
 80152a4:	7818      	ldrb	r0, [r3, #0]
 80152a6:	461f      	mov	r7, r3
 80152a8:	2830      	cmp	r0, #48	; 0x30
 80152aa:	f103 0301 	add.w	r3, r3, #1
 80152ae:	d0f9      	beq.n	80152a4 <__gethex+0x70>
 80152b0:	f7ff ffab 	bl	801520a <__hexdig_fun>
 80152b4:	2301      	movs	r3, #1
 80152b6:	fab0 f480 	clz	r4, r0
 80152ba:	4635      	mov	r5, r6
 80152bc:	0964      	lsrs	r4, r4, #5
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	463a      	mov	r2, r7
 80152c2:	4616      	mov	r6, r2
 80152c4:	7830      	ldrb	r0, [r6, #0]
 80152c6:	3201      	adds	r2, #1
 80152c8:	f7ff ff9f 	bl	801520a <__hexdig_fun>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d1f8      	bne.n	80152c2 <__gethex+0x8e>
 80152d0:	4652      	mov	r2, sl
 80152d2:	4630      	mov	r0, r6
 80152d4:	9903      	ldr	r1, [sp, #12]
 80152d6:	f001 fc63 	bl	8016ba0 <strncmp>
 80152da:	b980      	cbnz	r0, 80152fe <__gethex+0xca>
 80152dc:	b94d      	cbnz	r5, 80152f2 <__gethex+0xbe>
 80152de:	eb06 050a 	add.w	r5, r6, sl
 80152e2:	462a      	mov	r2, r5
 80152e4:	4616      	mov	r6, r2
 80152e6:	7830      	ldrb	r0, [r6, #0]
 80152e8:	3201      	adds	r2, #1
 80152ea:	f7ff ff8e 	bl	801520a <__hexdig_fun>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d1f8      	bne.n	80152e4 <__gethex+0xb0>
 80152f2:	1bad      	subs	r5, r5, r6
 80152f4:	00ad      	lsls	r5, r5, #2
 80152f6:	e004      	b.n	8015302 <__gethex+0xce>
 80152f8:	2400      	movs	r4, #0
 80152fa:	4625      	mov	r5, r4
 80152fc:	e7e0      	b.n	80152c0 <__gethex+0x8c>
 80152fe:	2d00      	cmp	r5, #0
 8015300:	d1f7      	bne.n	80152f2 <__gethex+0xbe>
 8015302:	7833      	ldrb	r3, [r6, #0]
 8015304:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015308:	2b50      	cmp	r3, #80	; 0x50
 801530a:	d139      	bne.n	8015380 <__gethex+0x14c>
 801530c:	7873      	ldrb	r3, [r6, #1]
 801530e:	2b2b      	cmp	r3, #43	; 0x2b
 8015310:	d02a      	beq.n	8015368 <__gethex+0x134>
 8015312:	2b2d      	cmp	r3, #45	; 0x2d
 8015314:	d02c      	beq.n	8015370 <__gethex+0x13c>
 8015316:	f04f 0900 	mov.w	r9, #0
 801531a:	1c71      	adds	r1, r6, #1
 801531c:	7808      	ldrb	r0, [r1, #0]
 801531e:	f7ff ff74 	bl	801520a <__hexdig_fun>
 8015322:	1e43      	subs	r3, r0, #1
 8015324:	b2db      	uxtb	r3, r3
 8015326:	2b18      	cmp	r3, #24
 8015328:	d82a      	bhi.n	8015380 <__gethex+0x14c>
 801532a:	f1a0 0210 	sub.w	r2, r0, #16
 801532e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015332:	f7ff ff6a 	bl	801520a <__hexdig_fun>
 8015336:	1e43      	subs	r3, r0, #1
 8015338:	b2db      	uxtb	r3, r3
 801533a:	2b18      	cmp	r3, #24
 801533c:	d91b      	bls.n	8015376 <__gethex+0x142>
 801533e:	f1b9 0f00 	cmp.w	r9, #0
 8015342:	d000      	beq.n	8015346 <__gethex+0x112>
 8015344:	4252      	negs	r2, r2
 8015346:	4415      	add	r5, r2
 8015348:	f8cb 1000 	str.w	r1, [fp]
 801534c:	b1d4      	cbz	r4, 8015384 <__gethex+0x150>
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	2b00      	cmp	r3, #0
 8015352:	bf14      	ite	ne
 8015354:	2700      	movne	r7, #0
 8015356:	2706      	moveq	r7, #6
 8015358:	4638      	mov	r0, r7
 801535a:	b00b      	add	sp, #44	; 0x2c
 801535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015360:	463e      	mov	r6, r7
 8015362:	4625      	mov	r5, r4
 8015364:	2401      	movs	r4, #1
 8015366:	e7cc      	b.n	8015302 <__gethex+0xce>
 8015368:	f04f 0900 	mov.w	r9, #0
 801536c:	1cb1      	adds	r1, r6, #2
 801536e:	e7d5      	b.n	801531c <__gethex+0xe8>
 8015370:	f04f 0901 	mov.w	r9, #1
 8015374:	e7fa      	b.n	801536c <__gethex+0x138>
 8015376:	230a      	movs	r3, #10
 8015378:	fb03 0202 	mla	r2, r3, r2, r0
 801537c:	3a10      	subs	r2, #16
 801537e:	e7d6      	b.n	801532e <__gethex+0xfa>
 8015380:	4631      	mov	r1, r6
 8015382:	e7e1      	b.n	8015348 <__gethex+0x114>
 8015384:	4621      	mov	r1, r4
 8015386:	1bf3      	subs	r3, r6, r7
 8015388:	3b01      	subs	r3, #1
 801538a:	2b07      	cmp	r3, #7
 801538c:	dc0a      	bgt.n	80153a4 <__gethex+0x170>
 801538e:	9802      	ldr	r0, [sp, #8]
 8015390:	f000 fa82 	bl	8015898 <_Balloc>
 8015394:	4604      	mov	r4, r0
 8015396:	b940      	cbnz	r0, 80153aa <__gethex+0x176>
 8015398:	4602      	mov	r2, r0
 801539a:	21de      	movs	r1, #222	; 0xde
 801539c:	4b62      	ldr	r3, [pc, #392]	; (8015528 <__gethex+0x2f4>)
 801539e:	4863      	ldr	r0, [pc, #396]	; (801552c <__gethex+0x2f8>)
 80153a0:	f001 fcd4 	bl	8016d4c <__assert_func>
 80153a4:	3101      	adds	r1, #1
 80153a6:	105b      	asrs	r3, r3, #1
 80153a8:	e7ef      	b.n	801538a <__gethex+0x156>
 80153aa:	f04f 0b00 	mov.w	fp, #0
 80153ae:	f100 0914 	add.w	r9, r0, #20
 80153b2:	f1ca 0301 	rsb	r3, sl, #1
 80153b6:	f8cd 9010 	str.w	r9, [sp, #16]
 80153ba:	f8cd b004 	str.w	fp, [sp, #4]
 80153be:	9308      	str	r3, [sp, #32]
 80153c0:	42b7      	cmp	r7, r6
 80153c2:	d33f      	bcc.n	8015444 <__gethex+0x210>
 80153c4:	9f04      	ldr	r7, [sp, #16]
 80153c6:	9b01      	ldr	r3, [sp, #4]
 80153c8:	f847 3b04 	str.w	r3, [r7], #4
 80153cc:	eba7 0709 	sub.w	r7, r7, r9
 80153d0:	10bf      	asrs	r7, r7, #2
 80153d2:	6127      	str	r7, [r4, #16]
 80153d4:	4618      	mov	r0, r3
 80153d6:	f000 fb55 	bl	8015a84 <__hi0bits>
 80153da:	017f      	lsls	r7, r7, #5
 80153dc:	f8d8 6000 	ldr.w	r6, [r8]
 80153e0:	1a3f      	subs	r7, r7, r0
 80153e2:	42b7      	cmp	r7, r6
 80153e4:	dd62      	ble.n	80154ac <__gethex+0x278>
 80153e6:	1bbf      	subs	r7, r7, r6
 80153e8:	4639      	mov	r1, r7
 80153ea:	4620      	mov	r0, r4
 80153ec:	f000 feeb 	bl	80161c6 <__any_on>
 80153f0:	4682      	mov	sl, r0
 80153f2:	b1a8      	cbz	r0, 8015420 <__gethex+0x1ec>
 80153f4:	f04f 0a01 	mov.w	sl, #1
 80153f8:	1e7b      	subs	r3, r7, #1
 80153fa:	1159      	asrs	r1, r3, #5
 80153fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015400:	f003 021f 	and.w	r2, r3, #31
 8015404:	fa0a f202 	lsl.w	r2, sl, r2
 8015408:	420a      	tst	r2, r1
 801540a:	d009      	beq.n	8015420 <__gethex+0x1ec>
 801540c:	4553      	cmp	r3, sl
 801540e:	dd05      	ble.n	801541c <__gethex+0x1e8>
 8015410:	4620      	mov	r0, r4
 8015412:	1eb9      	subs	r1, r7, #2
 8015414:	f000 fed7 	bl	80161c6 <__any_on>
 8015418:	2800      	cmp	r0, #0
 801541a:	d144      	bne.n	80154a6 <__gethex+0x272>
 801541c:	f04f 0a02 	mov.w	sl, #2
 8015420:	4639      	mov	r1, r7
 8015422:	4620      	mov	r0, r4
 8015424:	f7ff fe9e 	bl	8015164 <rshift>
 8015428:	443d      	add	r5, r7
 801542a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801542e:	42ab      	cmp	r3, r5
 8015430:	da4a      	bge.n	80154c8 <__gethex+0x294>
 8015432:	4621      	mov	r1, r4
 8015434:	9802      	ldr	r0, [sp, #8]
 8015436:	f000 fa6f 	bl	8015918 <_Bfree>
 801543a:	2300      	movs	r3, #0
 801543c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801543e:	27a3      	movs	r7, #163	; 0xa3
 8015440:	6013      	str	r3, [r2, #0]
 8015442:	e789      	b.n	8015358 <__gethex+0x124>
 8015444:	1e73      	subs	r3, r6, #1
 8015446:	9a07      	ldr	r2, [sp, #28]
 8015448:	9305      	str	r3, [sp, #20]
 801544a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801544e:	4293      	cmp	r3, r2
 8015450:	d019      	beq.n	8015486 <__gethex+0x252>
 8015452:	f1bb 0f20 	cmp.w	fp, #32
 8015456:	d107      	bne.n	8015468 <__gethex+0x234>
 8015458:	9b04      	ldr	r3, [sp, #16]
 801545a:	9a01      	ldr	r2, [sp, #4]
 801545c:	f843 2b04 	str.w	r2, [r3], #4
 8015460:	9304      	str	r3, [sp, #16]
 8015462:	2300      	movs	r3, #0
 8015464:	469b      	mov	fp, r3
 8015466:	9301      	str	r3, [sp, #4]
 8015468:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801546c:	f7ff fecd 	bl	801520a <__hexdig_fun>
 8015470:	9b01      	ldr	r3, [sp, #4]
 8015472:	f000 000f 	and.w	r0, r0, #15
 8015476:	fa00 f00b 	lsl.w	r0, r0, fp
 801547a:	4303      	orrs	r3, r0
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	f10b 0b04 	add.w	fp, fp, #4
 8015482:	9b05      	ldr	r3, [sp, #20]
 8015484:	e00d      	b.n	80154a2 <__gethex+0x26e>
 8015486:	9b05      	ldr	r3, [sp, #20]
 8015488:	9a08      	ldr	r2, [sp, #32]
 801548a:	4413      	add	r3, r2
 801548c:	42bb      	cmp	r3, r7
 801548e:	d3e0      	bcc.n	8015452 <__gethex+0x21e>
 8015490:	4618      	mov	r0, r3
 8015492:	4652      	mov	r2, sl
 8015494:	9903      	ldr	r1, [sp, #12]
 8015496:	9309      	str	r3, [sp, #36]	; 0x24
 8015498:	f001 fb82 	bl	8016ba0 <strncmp>
 801549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801549e:	2800      	cmp	r0, #0
 80154a0:	d1d7      	bne.n	8015452 <__gethex+0x21e>
 80154a2:	461e      	mov	r6, r3
 80154a4:	e78c      	b.n	80153c0 <__gethex+0x18c>
 80154a6:	f04f 0a03 	mov.w	sl, #3
 80154aa:	e7b9      	b.n	8015420 <__gethex+0x1ec>
 80154ac:	da09      	bge.n	80154c2 <__gethex+0x28e>
 80154ae:	1bf7      	subs	r7, r6, r7
 80154b0:	4621      	mov	r1, r4
 80154b2:	463a      	mov	r2, r7
 80154b4:	9802      	ldr	r0, [sp, #8]
 80154b6:	f000 fc47 	bl	8015d48 <__lshift>
 80154ba:	4604      	mov	r4, r0
 80154bc:	1bed      	subs	r5, r5, r7
 80154be:	f100 0914 	add.w	r9, r0, #20
 80154c2:	f04f 0a00 	mov.w	sl, #0
 80154c6:	e7b0      	b.n	801542a <__gethex+0x1f6>
 80154c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80154cc:	42a8      	cmp	r0, r5
 80154ce:	dd71      	ble.n	80155b4 <__gethex+0x380>
 80154d0:	1b45      	subs	r5, r0, r5
 80154d2:	42ae      	cmp	r6, r5
 80154d4:	dc34      	bgt.n	8015540 <__gethex+0x30c>
 80154d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154da:	2b02      	cmp	r3, #2
 80154dc:	d028      	beq.n	8015530 <__gethex+0x2fc>
 80154de:	2b03      	cmp	r3, #3
 80154e0:	d02a      	beq.n	8015538 <__gethex+0x304>
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d115      	bne.n	8015512 <__gethex+0x2de>
 80154e6:	42ae      	cmp	r6, r5
 80154e8:	d113      	bne.n	8015512 <__gethex+0x2de>
 80154ea:	2e01      	cmp	r6, #1
 80154ec:	d10b      	bne.n	8015506 <__gethex+0x2d2>
 80154ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154f2:	9a06      	ldr	r2, [sp, #24]
 80154f4:	2762      	movs	r7, #98	; 0x62
 80154f6:	6013      	str	r3, [r2, #0]
 80154f8:	2301      	movs	r3, #1
 80154fa:	6123      	str	r3, [r4, #16]
 80154fc:	f8c9 3000 	str.w	r3, [r9]
 8015500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015502:	601c      	str	r4, [r3, #0]
 8015504:	e728      	b.n	8015358 <__gethex+0x124>
 8015506:	4620      	mov	r0, r4
 8015508:	1e71      	subs	r1, r6, #1
 801550a:	f000 fe5c 	bl	80161c6 <__any_on>
 801550e:	2800      	cmp	r0, #0
 8015510:	d1ed      	bne.n	80154ee <__gethex+0x2ba>
 8015512:	4621      	mov	r1, r4
 8015514:	9802      	ldr	r0, [sp, #8]
 8015516:	f000 f9ff 	bl	8015918 <_Bfree>
 801551a:	2300      	movs	r3, #0
 801551c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801551e:	2750      	movs	r7, #80	; 0x50
 8015520:	6013      	str	r3, [r2, #0]
 8015522:	e719      	b.n	8015358 <__gethex+0x124>
 8015524:	08017e00 	.word	0x08017e00
 8015528:	08017d84 	.word	0x08017d84
 801552c:	08017d95 	.word	0x08017d95
 8015530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015532:	2b00      	cmp	r3, #0
 8015534:	d1ed      	bne.n	8015512 <__gethex+0x2de>
 8015536:	e7da      	b.n	80154ee <__gethex+0x2ba>
 8015538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801553a:	2b00      	cmp	r3, #0
 801553c:	d1d7      	bne.n	80154ee <__gethex+0x2ba>
 801553e:	e7e8      	b.n	8015512 <__gethex+0x2de>
 8015540:	1e6f      	subs	r7, r5, #1
 8015542:	f1ba 0f00 	cmp.w	sl, #0
 8015546:	d132      	bne.n	80155ae <__gethex+0x37a>
 8015548:	b127      	cbz	r7, 8015554 <__gethex+0x320>
 801554a:	4639      	mov	r1, r7
 801554c:	4620      	mov	r0, r4
 801554e:	f000 fe3a 	bl	80161c6 <__any_on>
 8015552:	4682      	mov	sl, r0
 8015554:	2101      	movs	r1, #1
 8015556:	117b      	asrs	r3, r7, #5
 8015558:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801555c:	f007 071f 	and.w	r7, r7, #31
 8015560:	fa01 f707 	lsl.w	r7, r1, r7
 8015564:	421f      	tst	r7, r3
 8015566:	f04f 0702 	mov.w	r7, #2
 801556a:	4629      	mov	r1, r5
 801556c:	4620      	mov	r0, r4
 801556e:	bf18      	it	ne
 8015570:	f04a 0a02 	orrne.w	sl, sl, #2
 8015574:	1b76      	subs	r6, r6, r5
 8015576:	f7ff fdf5 	bl	8015164 <rshift>
 801557a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801557e:	f1ba 0f00 	cmp.w	sl, #0
 8015582:	d048      	beq.n	8015616 <__gethex+0x3e2>
 8015584:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015588:	2b02      	cmp	r3, #2
 801558a:	d015      	beq.n	80155b8 <__gethex+0x384>
 801558c:	2b03      	cmp	r3, #3
 801558e:	d017      	beq.n	80155c0 <__gethex+0x38c>
 8015590:	2b01      	cmp	r3, #1
 8015592:	d109      	bne.n	80155a8 <__gethex+0x374>
 8015594:	f01a 0f02 	tst.w	sl, #2
 8015598:	d006      	beq.n	80155a8 <__gethex+0x374>
 801559a:	f8d9 0000 	ldr.w	r0, [r9]
 801559e:	ea4a 0a00 	orr.w	sl, sl, r0
 80155a2:	f01a 0f01 	tst.w	sl, #1
 80155a6:	d10e      	bne.n	80155c6 <__gethex+0x392>
 80155a8:	f047 0710 	orr.w	r7, r7, #16
 80155ac:	e033      	b.n	8015616 <__gethex+0x3e2>
 80155ae:	f04f 0a01 	mov.w	sl, #1
 80155b2:	e7cf      	b.n	8015554 <__gethex+0x320>
 80155b4:	2701      	movs	r7, #1
 80155b6:	e7e2      	b.n	801557e <__gethex+0x34a>
 80155b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155ba:	f1c3 0301 	rsb	r3, r3, #1
 80155be:	9315      	str	r3, [sp, #84]	; 0x54
 80155c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d0f0      	beq.n	80155a8 <__gethex+0x374>
 80155c6:	f04f 0c00 	mov.w	ip, #0
 80155ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80155ce:	f104 0314 	add.w	r3, r4, #20
 80155d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80155d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80155da:	4618      	mov	r0, r3
 80155dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80155e0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80155e4:	d01c      	beq.n	8015620 <__gethex+0x3ec>
 80155e6:	3201      	adds	r2, #1
 80155e8:	6002      	str	r2, [r0, #0]
 80155ea:	2f02      	cmp	r7, #2
 80155ec:	f104 0314 	add.w	r3, r4, #20
 80155f0:	d13d      	bne.n	801566e <__gethex+0x43a>
 80155f2:	f8d8 2000 	ldr.w	r2, [r8]
 80155f6:	3a01      	subs	r2, #1
 80155f8:	42b2      	cmp	r2, r6
 80155fa:	d10a      	bne.n	8015612 <__gethex+0x3de>
 80155fc:	2201      	movs	r2, #1
 80155fe:	1171      	asrs	r1, r6, #5
 8015600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015604:	f006 061f 	and.w	r6, r6, #31
 8015608:	fa02 f606 	lsl.w	r6, r2, r6
 801560c:	421e      	tst	r6, r3
 801560e:	bf18      	it	ne
 8015610:	4617      	movne	r7, r2
 8015612:	f047 0720 	orr.w	r7, r7, #32
 8015616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015618:	601c      	str	r4, [r3, #0]
 801561a:	9b06      	ldr	r3, [sp, #24]
 801561c:	601d      	str	r5, [r3, #0]
 801561e:	e69b      	b.n	8015358 <__gethex+0x124>
 8015620:	4299      	cmp	r1, r3
 8015622:	f843 cc04 	str.w	ip, [r3, #-4]
 8015626:	d8d8      	bhi.n	80155da <__gethex+0x3a6>
 8015628:	68a3      	ldr	r3, [r4, #8]
 801562a:	459b      	cmp	fp, r3
 801562c:	db17      	blt.n	801565e <__gethex+0x42a>
 801562e:	6861      	ldr	r1, [r4, #4]
 8015630:	9802      	ldr	r0, [sp, #8]
 8015632:	3101      	adds	r1, #1
 8015634:	f000 f930 	bl	8015898 <_Balloc>
 8015638:	4681      	mov	r9, r0
 801563a:	b918      	cbnz	r0, 8015644 <__gethex+0x410>
 801563c:	4602      	mov	r2, r0
 801563e:	2184      	movs	r1, #132	; 0x84
 8015640:	4b19      	ldr	r3, [pc, #100]	; (80156a8 <__gethex+0x474>)
 8015642:	e6ac      	b.n	801539e <__gethex+0x16a>
 8015644:	6922      	ldr	r2, [r4, #16]
 8015646:	f104 010c 	add.w	r1, r4, #12
 801564a:	3202      	adds	r2, #2
 801564c:	0092      	lsls	r2, r2, #2
 801564e:	300c      	adds	r0, #12
 8015650:	f7fc ffe6 	bl	8012620 <memcpy>
 8015654:	4621      	mov	r1, r4
 8015656:	9802      	ldr	r0, [sp, #8]
 8015658:	f000 f95e 	bl	8015918 <_Bfree>
 801565c:	464c      	mov	r4, r9
 801565e:	6923      	ldr	r3, [r4, #16]
 8015660:	1c5a      	adds	r2, r3, #1
 8015662:	6122      	str	r2, [r4, #16]
 8015664:	2201      	movs	r2, #1
 8015666:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801566a:	615a      	str	r2, [r3, #20]
 801566c:	e7bd      	b.n	80155ea <__gethex+0x3b6>
 801566e:	6922      	ldr	r2, [r4, #16]
 8015670:	455a      	cmp	r2, fp
 8015672:	dd0b      	ble.n	801568c <__gethex+0x458>
 8015674:	2101      	movs	r1, #1
 8015676:	4620      	mov	r0, r4
 8015678:	f7ff fd74 	bl	8015164 <rshift>
 801567c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015680:	3501      	adds	r5, #1
 8015682:	42ab      	cmp	r3, r5
 8015684:	f6ff aed5 	blt.w	8015432 <__gethex+0x1fe>
 8015688:	2701      	movs	r7, #1
 801568a:	e7c2      	b.n	8015612 <__gethex+0x3de>
 801568c:	f016 061f 	ands.w	r6, r6, #31
 8015690:	d0fa      	beq.n	8015688 <__gethex+0x454>
 8015692:	449a      	add	sl, r3
 8015694:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015698:	f000 f9f4 	bl	8015a84 <__hi0bits>
 801569c:	f1c6 0620 	rsb	r6, r6, #32
 80156a0:	42b0      	cmp	r0, r6
 80156a2:	dbe7      	blt.n	8015674 <__gethex+0x440>
 80156a4:	e7f0      	b.n	8015688 <__gethex+0x454>
 80156a6:	bf00      	nop
 80156a8:	08017d84 	.word	0x08017d84

080156ac <L_shift>:
 80156ac:	f1c2 0208 	rsb	r2, r2, #8
 80156b0:	0092      	lsls	r2, r2, #2
 80156b2:	b570      	push	{r4, r5, r6, lr}
 80156b4:	f1c2 0620 	rsb	r6, r2, #32
 80156b8:	6843      	ldr	r3, [r0, #4]
 80156ba:	6804      	ldr	r4, [r0, #0]
 80156bc:	fa03 f506 	lsl.w	r5, r3, r6
 80156c0:	432c      	orrs	r4, r5
 80156c2:	40d3      	lsrs	r3, r2
 80156c4:	6004      	str	r4, [r0, #0]
 80156c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80156ca:	4288      	cmp	r0, r1
 80156cc:	d3f4      	bcc.n	80156b8 <L_shift+0xc>
 80156ce:	bd70      	pop	{r4, r5, r6, pc}

080156d0 <__match>:
 80156d0:	b530      	push	{r4, r5, lr}
 80156d2:	6803      	ldr	r3, [r0, #0]
 80156d4:	3301      	adds	r3, #1
 80156d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156da:	b914      	cbnz	r4, 80156e2 <__match+0x12>
 80156dc:	6003      	str	r3, [r0, #0]
 80156de:	2001      	movs	r0, #1
 80156e0:	bd30      	pop	{r4, r5, pc}
 80156e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80156ea:	2d19      	cmp	r5, #25
 80156ec:	bf98      	it	ls
 80156ee:	3220      	addls	r2, #32
 80156f0:	42a2      	cmp	r2, r4
 80156f2:	d0f0      	beq.n	80156d6 <__match+0x6>
 80156f4:	2000      	movs	r0, #0
 80156f6:	e7f3      	b.n	80156e0 <__match+0x10>

080156f8 <__hexnan>:
 80156f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fc:	2500      	movs	r5, #0
 80156fe:	680b      	ldr	r3, [r1, #0]
 8015700:	4682      	mov	sl, r0
 8015702:	115e      	asrs	r6, r3, #5
 8015704:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015708:	f013 031f 	ands.w	r3, r3, #31
 801570c:	bf18      	it	ne
 801570e:	3604      	addne	r6, #4
 8015710:	1f37      	subs	r7, r6, #4
 8015712:	4690      	mov	r8, r2
 8015714:	46b9      	mov	r9, r7
 8015716:	463c      	mov	r4, r7
 8015718:	46ab      	mov	fp, r5
 801571a:	b087      	sub	sp, #28
 801571c:	6801      	ldr	r1, [r0, #0]
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	f846 5c04 	str.w	r5, [r6, #-4]
 8015724:	9502      	str	r5, [sp, #8]
 8015726:	784a      	ldrb	r2, [r1, #1]
 8015728:	1c4b      	adds	r3, r1, #1
 801572a:	9303      	str	r3, [sp, #12]
 801572c:	b342      	cbz	r2, 8015780 <__hexnan+0x88>
 801572e:	4610      	mov	r0, r2
 8015730:	9105      	str	r1, [sp, #20]
 8015732:	9204      	str	r2, [sp, #16]
 8015734:	f7ff fd69 	bl	801520a <__hexdig_fun>
 8015738:	2800      	cmp	r0, #0
 801573a:	d14f      	bne.n	80157dc <__hexnan+0xe4>
 801573c:	9a04      	ldr	r2, [sp, #16]
 801573e:	9905      	ldr	r1, [sp, #20]
 8015740:	2a20      	cmp	r2, #32
 8015742:	d818      	bhi.n	8015776 <__hexnan+0x7e>
 8015744:	9b02      	ldr	r3, [sp, #8]
 8015746:	459b      	cmp	fp, r3
 8015748:	dd13      	ble.n	8015772 <__hexnan+0x7a>
 801574a:	454c      	cmp	r4, r9
 801574c:	d206      	bcs.n	801575c <__hexnan+0x64>
 801574e:	2d07      	cmp	r5, #7
 8015750:	dc04      	bgt.n	801575c <__hexnan+0x64>
 8015752:	462a      	mov	r2, r5
 8015754:	4649      	mov	r1, r9
 8015756:	4620      	mov	r0, r4
 8015758:	f7ff ffa8 	bl	80156ac <L_shift>
 801575c:	4544      	cmp	r4, r8
 801575e:	d950      	bls.n	8015802 <__hexnan+0x10a>
 8015760:	2300      	movs	r3, #0
 8015762:	f1a4 0904 	sub.w	r9, r4, #4
 8015766:	f844 3c04 	str.w	r3, [r4, #-4]
 801576a:	461d      	mov	r5, r3
 801576c:	464c      	mov	r4, r9
 801576e:	f8cd b008 	str.w	fp, [sp, #8]
 8015772:	9903      	ldr	r1, [sp, #12]
 8015774:	e7d7      	b.n	8015726 <__hexnan+0x2e>
 8015776:	2a29      	cmp	r2, #41	; 0x29
 8015778:	d156      	bne.n	8015828 <__hexnan+0x130>
 801577a:	3102      	adds	r1, #2
 801577c:	f8ca 1000 	str.w	r1, [sl]
 8015780:	f1bb 0f00 	cmp.w	fp, #0
 8015784:	d050      	beq.n	8015828 <__hexnan+0x130>
 8015786:	454c      	cmp	r4, r9
 8015788:	d206      	bcs.n	8015798 <__hexnan+0xa0>
 801578a:	2d07      	cmp	r5, #7
 801578c:	dc04      	bgt.n	8015798 <__hexnan+0xa0>
 801578e:	462a      	mov	r2, r5
 8015790:	4649      	mov	r1, r9
 8015792:	4620      	mov	r0, r4
 8015794:	f7ff ff8a 	bl	80156ac <L_shift>
 8015798:	4544      	cmp	r4, r8
 801579a:	d934      	bls.n	8015806 <__hexnan+0x10e>
 801579c:	4623      	mov	r3, r4
 801579e:	f1a8 0204 	sub.w	r2, r8, #4
 80157a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80157a6:	429f      	cmp	r7, r3
 80157a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80157ac:	d2f9      	bcs.n	80157a2 <__hexnan+0xaa>
 80157ae:	1b3b      	subs	r3, r7, r4
 80157b0:	f023 0303 	bic.w	r3, r3, #3
 80157b4:	3304      	adds	r3, #4
 80157b6:	3401      	adds	r4, #1
 80157b8:	3e03      	subs	r6, #3
 80157ba:	42b4      	cmp	r4, r6
 80157bc:	bf88      	it	hi
 80157be:	2304      	movhi	r3, #4
 80157c0:	2200      	movs	r2, #0
 80157c2:	4443      	add	r3, r8
 80157c4:	f843 2b04 	str.w	r2, [r3], #4
 80157c8:	429f      	cmp	r7, r3
 80157ca:	d2fb      	bcs.n	80157c4 <__hexnan+0xcc>
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	b91b      	cbnz	r3, 80157d8 <__hexnan+0xe0>
 80157d0:	4547      	cmp	r7, r8
 80157d2:	d127      	bne.n	8015824 <__hexnan+0x12c>
 80157d4:	2301      	movs	r3, #1
 80157d6:	603b      	str	r3, [r7, #0]
 80157d8:	2005      	movs	r0, #5
 80157da:	e026      	b.n	801582a <__hexnan+0x132>
 80157dc:	3501      	adds	r5, #1
 80157de:	2d08      	cmp	r5, #8
 80157e0:	f10b 0b01 	add.w	fp, fp, #1
 80157e4:	dd06      	ble.n	80157f4 <__hexnan+0xfc>
 80157e6:	4544      	cmp	r4, r8
 80157e8:	d9c3      	bls.n	8015772 <__hexnan+0x7a>
 80157ea:	2300      	movs	r3, #0
 80157ec:	2501      	movs	r5, #1
 80157ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80157f2:	3c04      	subs	r4, #4
 80157f4:	6822      	ldr	r2, [r4, #0]
 80157f6:	f000 000f 	and.w	r0, r0, #15
 80157fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80157fe:	6022      	str	r2, [r4, #0]
 8015800:	e7b7      	b.n	8015772 <__hexnan+0x7a>
 8015802:	2508      	movs	r5, #8
 8015804:	e7b5      	b.n	8015772 <__hexnan+0x7a>
 8015806:	9b01      	ldr	r3, [sp, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d0df      	beq.n	80157cc <__hexnan+0xd4>
 801580c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015810:	f1c3 0320 	rsb	r3, r3, #32
 8015814:	fa22 f303 	lsr.w	r3, r2, r3
 8015818:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801581c:	401a      	ands	r2, r3
 801581e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015822:	e7d3      	b.n	80157cc <__hexnan+0xd4>
 8015824:	3f04      	subs	r7, #4
 8015826:	e7d1      	b.n	80157cc <__hexnan+0xd4>
 8015828:	2004      	movs	r0, #4
 801582a:	b007      	add	sp, #28
 801582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015830 <_localeconv_r>:
 8015830:	4800      	ldr	r0, [pc, #0]	; (8015834 <_localeconv_r+0x4>)
 8015832:	4770      	bx	lr
 8015834:	20000384 	.word	0x20000384

08015838 <_lseek_r>:
 8015838:	b538      	push	{r3, r4, r5, lr}
 801583a:	4604      	mov	r4, r0
 801583c:	4608      	mov	r0, r1
 801583e:	4611      	mov	r1, r2
 8015840:	2200      	movs	r2, #0
 8015842:	4d05      	ldr	r5, [pc, #20]	; (8015858 <_lseek_r+0x20>)
 8015844:	602a      	str	r2, [r5, #0]
 8015846:	461a      	mov	r2, r3
 8015848:	f7ee fd4c 	bl	80042e4 <_lseek>
 801584c:	1c43      	adds	r3, r0, #1
 801584e:	d102      	bne.n	8015856 <_lseek_r+0x1e>
 8015850:	682b      	ldr	r3, [r5, #0]
 8015852:	b103      	cbz	r3, 8015856 <_lseek_r+0x1e>
 8015854:	6023      	str	r3, [r4, #0]
 8015856:	bd38      	pop	{r3, r4, r5, pc}
 8015858:	20001dec 	.word	0x20001dec

0801585c <__ascii_mbtowc>:
 801585c:	b082      	sub	sp, #8
 801585e:	b901      	cbnz	r1, 8015862 <__ascii_mbtowc+0x6>
 8015860:	a901      	add	r1, sp, #4
 8015862:	b142      	cbz	r2, 8015876 <__ascii_mbtowc+0x1a>
 8015864:	b14b      	cbz	r3, 801587a <__ascii_mbtowc+0x1e>
 8015866:	7813      	ldrb	r3, [r2, #0]
 8015868:	600b      	str	r3, [r1, #0]
 801586a:	7812      	ldrb	r2, [r2, #0]
 801586c:	1e10      	subs	r0, r2, #0
 801586e:	bf18      	it	ne
 8015870:	2001      	movne	r0, #1
 8015872:	b002      	add	sp, #8
 8015874:	4770      	bx	lr
 8015876:	4610      	mov	r0, r2
 8015878:	e7fb      	b.n	8015872 <__ascii_mbtowc+0x16>
 801587a:	f06f 0001 	mvn.w	r0, #1
 801587e:	e7f8      	b.n	8015872 <__ascii_mbtowc+0x16>

08015880 <__malloc_lock>:
 8015880:	4801      	ldr	r0, [pc, #4]	; (8015888 <__malloc_lock+0x8>)
 8015882:	f7ee be38 	b.w	80044f6 <__retarget_lock_acquire_recursive>
 8015886:	bf00      	nop
 8015888:	20000768 	.word	0x20000768

0801588c <__malloc_unlock>:
 801588c:	4801      	ldr	r0, [pc, #4]	; (8015894 <__malloc_unlock+0x8>)
 801588e:	f7ee be46 	b.w	800451e <__retarget_lock_release_recursive>
 8015892:	bf00      	nop
 8015894:	20000768 	.word	0x20000768

08015898 <_Balloc>:
 8015898:	b570      	push	{r4, r5, r6, lr}
 801589a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801589c:	4604      	mov	r4, r0
 801589e:	460d      	mov	r5, r1
 80158a0:	b976      	cbnz	r6, 80158c0 <_Balloc+0x28>
 80158a2:	2010      	movs	r0, #16
 80158a4:	f7fc fe9e 	bl	80125e4 <malloc>
 80158a8:	4602      	mov	r2, r0
 80158aa:	6260      	str	r0, [r4, #36]	; 0x24
 80158ac:	b920      	cbnz	r0, 80158b8 <_Balloc+0x20>
 80158ae:	2166      	movs	r1, #102	; 0x66
 80158b0:	4b17      	ldr	r3, [pc, #92]	; (8015910 <_Balloc+0x78>)
 80158b2:	4818      	ldr	r0, [pc, #96]	; (8015914 <_Balloc+0x7c>)
 80158b4:	f001 fa4a 	bl	8016d4c <__assert_func>
 80158b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158bc:	6006      	str	r6, [r0, #0]
 80158be:	60c6      	str	r6, [r0, #12]
 80158c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80158c2:	68f3      	ldr	r3, [r6, #12]
 80158c4:	b183      	cbz	r3, 80158e8 <_Balloc+0x50>
 80158c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80158ce:	b9b8      	cbnz	r0, 8015900 <_Balloc+0x68>
 80158d0:	2101      	movs	r1, #1
 80158d2:	fa01 f605 	lsl.w	r6, r1, r5
 80158d6:	1d72      	adds	r2, r6, #5
 80158d8:	4620      	mov	r0, r4
 80158da:	0092      	lsls	r2, r2, #2
 80158dc:	f7fc fed0 	bl	8012680 <_calloc_r>
 80158e0:	b160      	cbz	r0, 80158fc <_Balloc+0x64>
 80158e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80158e6:	e00e      	b.n	8015906 <_Balloc+0x6e>
 80158e8:	2221      	movs	r2, #33	; 0x21
 80158ea:	2104      	movs	r1, #4
 80158ec:	4620      	mov	r0, r4
 80158ee:	f7fc fec7 	bl	8012680 <_calloc_r>
 80158f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158f4:	60f0      	str	r0, [r6, #12]
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1e4      	bne.n	80158c6 <_Balloc+0x2e>
 80158fc:	2000      	movs	r0, #0
 80158fe:	bd70      	pop	{r4, r5, r6, pc}
 8015900:	6802      	ldr	r2, [r0, #0]
 8015902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015906:	2300      	movs	r3, #0
 8015908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801590c:	e7f7      	b.n	80158fe <_Balloc+0x66>
 801590e:	bf00      	nop
 8015910:	08017d0e 	.word	0x08017d0e
 8015914:	08017e14 	.word	0x08017e14

08015918 <_Bfree>:
 8015918:	b570      	push	{r4, r5, r6, lr}
 801591a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801591c:	4605      	mov	r5, r0
 801591e:	460c      	mov	r4, r1
 8015920:	b976      	cbnz	r6, 8015940 <_Bfree+0x28>
 8015922:	2010      	movs	r0, #16
 8015924:	f7fc fe5e 	bl	80125e4 <malloc>
 8015928:	4602      	mov	r2, r0
 801592a:	6268      	str	r0, [r5, #36]	; 0x24
 801592c:	b920      	cbnz	r0, 8015938 <_Bfree+0x20>
 801592e:	218a      	movs	r1, #138	; 0x8a
 8015930:	4b08      	ldr	r3, [pc, #32]	; (8015954 <_Bfree+0x3c>)
 8015932:	4809      	ldr	r0, [pc, #36]	; (8015958 <_Bfree+0x40>)
 8015934:	f001 fa0a 	bl	8016d4c <__assert_func>
 8015938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801593c:	6006      	str	r6, [r0, #0]
 801593e:	60c6      	str	r6, [r0, #12]
 8015940:	b13c      	cbz	r4, 8015952 <_Bfree+0x3a>
 8015942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015944:	6862      	ldr	r2, [r4, #4]
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801594c:	6021      	str	r1, [r4, #0]
 801594e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015952:	bd70      	pop	{r4, r5, r6, pc}
 8015954:	08017d0e 	.word	0x08017d0e
 8015958:	08017e14 	.word	0x08017e14

0801595c <__multadd>:
 801595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015960:	4698      	mov	r8, r3
 8015962:	460c      	mov	r4, r1
 8015964:	2300      	movs	r3, #0
 8015966:	690e      	ldr	r6, [r1, #16]
 8015968:	4607      	mov	r7, r0
 801596a:	f101 0014 	add.w	r0, r1, #20
 801596e:	6805      	ldr	r5, [r0, #0]
 8015970:	3301      	adds	r3, #1
 8015972:	b2a9      	uxth	r1, r5
 8015974:	fb02 8101 	mla	r1, r2, r1, r8
 8015978:	0c2d      	lsrs	r5, r5, #16
 801597a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801597e:	fb02 c505 	mla	r5, r2, r5, ip
 8015982:	b289      	uxth	r1, r1
 8015984:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015988:	429e      	cmp	r6, r3
 801598a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801598e:	f840 1b04 	str.w	r1, [r0], #4
 8015992:	dcec      	bgt.n	801596e <__multadd+0x12>
 8015994:	f1b8 0f00 	cmp.w	r8, #0
 8015998:	d022      	beq.n	80159e0 <__multadd+0x84>
 801599a:	68a3      	ldr	r3, [r4, #8]
 801599c:	42b3      	cmp	r3, r6
 801599e:	dc19      	bgt.n	80159d4 <__multadd+0x78>
 80159a0:	6861      	ldr	r1, [r4, #4]
 80159a2:	4638      	mov	r0, r7
 80159a4:	3101      	adds	r1, #1
 80159a6:	f7ff ff77 	bl	8015898 <_Balloc>
 80159aa:	4605      	mov	r5, r0
 80159ac:	b928      	cbnz	r0, 80159ba <__multadd+0x5e>
 80159ae:	4602      	mov	r2, r0
 80159b0:	21b5      	movs	r1, #181	; 0xb5
 80159b2:	4b0d      	ldr	r3, [pc, #52]	; (80159e8 <__multadd+0x8c>)
 80159b4:	480d      	ldr	r0, [pc, #52]	; (80159ec <__multadd+0x90>)
 80159b6:	f001 f9c9 	bl	8016d4c <__assert_func>
 80159ba:	6922      	ldr	r2, [r4, #16]
 80159bc:	f104 010c 	add.w	r1, r4, #12
 80159c0:	3202      	adds	r2, #2
 80159c2:	0092      	lsls	r2, r2, #2
 80159c4:	300c      	adds	r0, #12
 80159c6:	f7fc fe2b 	bl	8012620 <memcpy>
 80159ca:	4621      	mov	r1, r4
 80159cc:	4638      	mov	r0, r7
 80159ce:	f7ff ffa3 	bl	8015918 <_Bfree>
 80159d2:	462c      	mov	r4, r5
 80159d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80159d8:	3601      	adds	r6, #1
 80159da:	f8c3 8014 	str.w	r8, [r3, #20]
 80159de:	6126      	str	r6, [r4, #16]
 80159e0:	4620      	mov	r0, r4
 80159e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e6:	bf00      	nop
 80159e8:	08017d84 	.word	0x08017d84
 80159ec:	08017e14 	.word	0x08017e14

080159f0 <__s2b>:
 80159f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159f4:	4615      	mov	r5, r2
 80159f6:	2209      	movs	r2, #9
 80159f8:	461f      	mov	r7, r3
 80159fa:	3308      	adds	r3, #8
 80159fc:	460c      	mov	r4, r1
 80159fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a02:	4606      	mov	r6, r0
 8015a04:	2201      	movs	r2, #1
 8015a06:	2100      	movs	r1, #0
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	db09      	blt.n	8015a20 <__s2b+0x30>
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f7ff ff43 	bl	8015898 <_Balloc>
 8015a12:	b940      	cbnz	r0, 8015a26 <__s2b+0x36>
 8015a14:	4602      	mov	r2, r0
 8015a16:	21ce      	movs	r1, #206	; 0xce
 8015a18:	4b18      	ldr	r3, [pc, #96]	; (8015a7c <__s2b+0x8c>)
 8015a1a:	4819      	ldr	r0, [pc, #100]	; (8015a80 <__s2b+0x90>)
 8015a1c:	f001 f996 	bl	8016d4c <__assert_func>
 8015a20:	0052      	lsls	r2, r2, #1
 8015a22:	3101      	adds	r1, #1
 8015a24:	e7f0      	b.n	8015a08 <__s2b+0x18>
 8015a26:	9b08      	ldr	r3, [sp, #32]
 8015a28:	2d09      	cmp	r5, #9
 8015a2a:	6143      	str	r3, [r0, #20]
 8015a2c:	f04f 0301 	mov.w	r3, #1
 8015a30:	6103      	str	r3, [r0, #16]
 8015a32:	dd16      	ble.n	8015a62 <__s2b+0x72>
 8015a34:	f104 0909 	add.w	r9, r4, #9
 8015a38:	46c8      	mov	r8, r9
 8015a3a:	442c      	add	r4, r5
 8015a3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a40:	4601      	mov	r1, r0
 8015a42:	220a      	movs	r2, #10
 8015a44:	4630      	mov	r0, r6
 8015a46:	3b30      	subs	r3, #48	; 0x30
 8015a48:	f7ff ff88 	bl	801595c <__multadd>
 8015a4c:	45a0      	cmp	r8, r4
 8015a4e:	d1f5      	bne.n	8015a3c <__s2b+0x4c>
 8015a50:	f1a5 0408 	sub.w	r4, r5, #8
 8015a54:	444c      	add	r4, r9
 8015a56:	1b2d      	subs	r5, r5, r4
 8015a58:	1963      	adds	r3, r4, r5
 8015a5a:	42bb      	cmp	r3, r7
 8015a5c:	db04      	blt.n	8015a68 <__s2b+0x78>
 8015a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a62:	2509      	movs	r5, #9
 8015a64:	340a      	adds	r4, #10
 8015a66:	e7f6      	b.n	8015a56 <__s2b+0x66>
 8015a68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a6c:	4601      	mov	r1, r0
 8015a6e:	220a      	movs	r2, #10
 8015a70:	4630      	mov	r0, r6
 8015a72:	3b30      	subs	r3, #48	; 0x30
 8015a74:	f7ff ff72 	bl	801595c <__multadd>
 8015a78:	e7ee      	b.n	8015a58 <__s2b+0x68>
 8015a7a:	bf00      	nop
 8015a7c:	08017d84 	.word	0x08017d84
 8015a80:	08017e14 	.word	0x08017e14

08015a84 <__hi0bits>:
 8015a84:	0c02      	lsrs	r2, r0, #16
 8015a86:	0412      	lsls	r2, r2, #16
 8015a88:	4603      	mov	r3, r0
 8015a8a:	b9ca      	cbnz	r2, 8015ac0 <__hi0bits+0x3c>
 8015a8c:	0403      	lsls	r3, r0, #16
 8015a8e:	2010      	movs	r0, #16
 8015a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015a94:	bf04      	itt	eq
 8015a96:	021b      	lsleq	r3, r3, #8
 8015a98:	3008      	addeq	r0, #8
 8015a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015a9e:	bf04      	itt	eq
 8015aa0:	011b      	lsleq	r3, r3, #4
 8015aa2:	3004      	addeq	r0, #4
 8015aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015aa8:	bf04      	itt	eq
 8015aaa:	009b      	lsleq	r3, r3, #2
 8015aac:	3002      	addeq	r0, #2
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	db05      	blt.n	8015abe <__hi0bits+0x3a>
 8015ab2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8015ab6:	f100 0001 	add.w	r0, r0, #1
 8015aba:	bf08      	it	eq
 8015abc:	2020      	moveq	r0, #32
 8015abe:	4770      	bx	lr
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	e7e5      	b.n	8015a90 <__hi0bits+0xc>

08015ac4 <__lo0bits>:
 8015ac4:	6803      	ldr	r3, [r0, #0]
 8015ac6:	4602      	mov	r2, r0
 8015ac8:	f013 0007 	ands.w	r0, r3, #7
 8015acc:	d00b      	beq.n	8015ae6 <__lo0bits+0x22>
 8015ace:	07d9      	lsls	r1, r3, #31
 8015ad0:	d422      	bmi.n	8015b18 <__lo0bits+0x54>
 8015ad2:	0798      	lsls	r0, r3, #30
 8015ad4:	bf49      	itett	mi
 8015ad6:	085b      	lsrmi	r3, r3, #1
 8015ad8:	089b      	lsrpl	r3, r3, #2
 8015ada:	2001      	movmi	r0, #1
 8015adc:	6013      	strmi	r3, [r2, #0]
 8015ade:	bf5c      	itt	pl
 8015ae0:	2002      	movpl	r0, #2
 8015ae2:	6013      	strpl	r3, [r2, #0]
 8015ae4:	4770      	bx	lr
 8015ae6:	b299      	uxth	r1, r3
 8015ae8:	b909      	cbnz	r1, 8015aee <__lo0bits+0x2a>
 8015aea:	2010      	movs	r0, #16
 8015aec:	0c1b      	lsrs	r3, r3, #16
 8015aee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015af2:	bf04      	itt	eq
 8015af4:	0a1b      	lsreq	r3, r3, #8
 8015af6:	3008      	addeq	r0, #8
 8015af8:	0719      	lsls	r1, r3, #28
 8015afa:	bf04      	itt	eq
 8015afc:	091b      	lsreq	r3, r3, #4
 8015afe:	3004      	addeq	r0, #4
 8015b00:	0799      	lsls	r1, r3, #30
 8015b02:	bf04      	itt	eq
 8015b04:	089b      	lsreq	r3, r3, #2
 8015b06:	3002      	addeq	r0, #2
 8015b08:	07d9      	lsls	r1, r3, #31
 8015b0a:	d403      	bmi.n	8015b14 <__lo0bits+0x50>
 8015b0c:	085b      	lsrs	r3, r3, #1
 8015b0e:	f100 0001 	add.w	r0, r0, #1
 8015b12:	d003      	beq.n	8015b1c <__lo0bits+0x58>
 8015b14:	6013      	str	r3, [r2, #0]
 8015b16:	4770      	bx	lr
 8015b18:	2000      	movs	r0, #0
 8015b1a:	4770      	bx	lr
 8015b1c:	2020      	movs	r0, #32
 8015b1e:	4770      	bx	lr

08015b20 <__i2b>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	460c      	mov	r4, r1
 8015b24:	2101      	movs	r1, #1
 8015b26:	f7ff feb7 	bl	8015898 <_Balloc>
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	b928      	cbnz	r0, 8015b3a <__i2b+0x1a>
 8015b2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015b32:	4b04      	ldr	r3, [pc, #16]	; (8015b44 <__i2b+0x24>)
 8015b34:	4804      	ldr	r0, [pc, #16]	; (8015b48 <__i2b+0x28>)
 8015b36:	f001 f909 	bl	8016d4c <__assert_func>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	6144      	str	r4, [r0, #20]
 8015b3e:	6103      	str	r3, [r0, #16]
 8015b40:	bd10      	pop	{r4, pc}
 8015b42:	bf00      	nop
 8015b44:	08017d84 	.word	0x08017d84
 8015b48:	08017e14 	.word	0x08017e14

08015b4c <__multiply>:
 8015b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b50:	4614      	mov	r4, r2
 8015b52:	690a      	ldr	r2, [r1, #16]
 8015b54:	6923      	ldr	r3, [r4, #16]
 8015b56:	460d      	mov	r5, r1
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	bfbe      	ittt	lt
 8015b5c:	460b      	movlt	r3, r1
 8015b5e:	4625      	movlt	r5, r4
 8015b60:	461c      	movlt	r4, r3
 8015b62:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015b66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b6a:	68ab      	ldr	r3, [r5, #8]
 8015b6c:	6869      	ldr	r1, [r5, #4]
 8015b6e:	eb0a 0709 	add.w	r7, sl, r9
 8015b72:	42bb      	cmp	r3, r7
 8015b74:	b085      	sub	sp, #20
 8015b76:	bfb8      	it	lt
 8015b78:	3101      	addlt	r1, #1
 8015b7a:	f7ff fe8d 	bl	8015898 <_Balloc>
 8015b7e:	b930      	cbnz	r0, 8015b8e <__multiply+0x42>
 8015b80:	4602      	mov	r2, r0
 8015b82:	f240 115d 	movw	r1, #349	; 0x15d
 8015b86:	4b41      	ldr	r3, [pc, #260]	; (8015c8c <__multiply+0x140>)
 8015b88:	4841      	ldr	r0, [pc, #260]	; (8015c90 <__multiply+0x144>)
 8015b8a:	f001 f8df 	bl	8016d4c <__assert_func>
 8015b8e:	f100 0614 	add.w	r6, r0, #20
 8015b92:	4633      	mov	r3, r6
 8015b94:	2200      	movs	r2, #0
 8015b96:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015b9a:	4543      	cmp	r3, r8
 8015b9c:	d31e      	bcc.n	8015bdc <__multiply+0x90>
 8015b9e:	f105 0c14 	add.w	ip, r5, #20
 8015ba2:	f104 0314 	add.w	r3, r4, #20
 8015ba6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015baa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015bae:	9202      	str	r2, [sp, #8]
 8015bb0:	ebac 0205 	sub.w	r2, ip, r5
 8015bb4:	3a15      	subs	r2, #21
 8015bb6:	f022 0203 	bic.w	r2, r2, #3
 8015bba:	3204      	adds	r2, #4
 8015bbc:	f105 0115 	add.w	r1, r5, #21
 8015bc0:	458c      	cmp	ip, r1
 8015bc2:	bf38      	it	cc
 8015bc4:	2204      	movcc	r2, #4
 8015bc6:	9201      	str	r2, [sp, #4]
 8015bc8:	9a02      	ldr	r2, [sp, #8]
 8015bca:	9303      	str	r3, [sp, #12]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d808      	bhi.n	8015be2 <__multiply+0x96>
 8015bd0:	2f00      	cmp	r7, #0
 8015bd2:	dc55      	bgt.n	8015c80 <__multiply+0x134>
 8015bd4:	6107      	str	r7, [r0, #16]
 8015bd6:	b005      	add	sp, #20
 8015bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bdc:	f843 2b04 	str.w	r2, [r3], #4
 8015be0:	e7db      	b.n	8015b9a <__multiply+0x4e>
 8015be2:	f8b3 a000 	ldrh.w	sl, [r3]
 8015be6:	f1ba 0f00 	cmp.w	sl, #0
 8015bea:	d020      	beq.n	8015c2e <__multiply+0xe2>
 8015bec:	46b1      	mov	r9, r6
 8015bee:	2200      	movs	r2, #0
 8015bf0:	f105 0e14 	add.w	lr, r5, #20
 8015bf4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015bf8:	f8d9 b000 	ldr.w	fp, [r9]
 8015bfc:	b2a1      	uxth	r1, r4
 8015bfe:	fa1f fb8b 	uxth.w	fp, fp
 8015c02:	fb0a b101 	mla	r1, sl, r1, fp
 8015c06:	4411      	add	r1, r2
 8015c08:	f8d9 2000 	ldr.w	r2, [r9]
 8015c0c:	0c24      	lsrs	r4, r4, #16
 8015c0e:	0c12      	lsrs	r2, r2, #16
 8015c10:	fb0a 2404 	mla	r4, sl, r4, r2
 8015c14:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015c18:	b289      	uxth	r1, r1
 8015c1a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015c1e:	45f4      	cmp	ip, lr
 8015c20:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015c24:	f849 1b04 	str.w	r1, [r9], #4
 8015c28:	d8e4      	bhi.n	8015bf4 <__multiply+0xa8>
 8015c2a:	9901      	ldr	r1, [sp, #4]
 8015c2c:	5072      	str	r2, [r6, r1]
 8015c2e:	9a03      	ldr	r2, [sp, #12]
 8015c30:	3304      	adds	r3, #4
 8015c32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c36:	f1b9 0f00 	cmp.w	r9, #0
 8015c3a:	d01f      	beq.n	8015c7c <__multiply+0x130>
 8015c3c:	46b6      	mov	lr, r6
 8015c3e:	f04f 0a00 	mov.w	sl, #0
 8015c42:	6834      	ldr	r4, [r6, #0]
 8015c44:	f105 0114 	add.w	r1, r5, #20
 8015c48:	880a      	ldrh	r2, [r1, #0]
 8015c4a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015c4e:	b2a4      	uxth	r4, r4
 8015c50:	fb09 b202 	mla	r2, r9, r2, fp
 8015c54:	4492      	add	sl, r2
 8015c56:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015c5a:	f84e 4b04 	str.w	r4, [lr], #4
 8015c5e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015c62:	f8be 2000 	ldrh.w	r2, [lr]
 8015c66:	0c24      	lsrs	r4, r4, #16
 8015c68:	fb09 2404 	mla	r4, r9, r4, r2
 8015c6c:	458c      	cmp	ip, r1
 8015c6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015c72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015c76:	d8e7      	bhi.n	8015c48 <__multiply+0xfc>
 8015c78:	9a01      	ldr	r2, [sp, #4]
 8015c7a:	50b4      	str	r4, [r6, r2]
 8015c7c:	3604      	adds	r6, #4
 8015c7e:	e7a3      	b.n	8015bc8 <__multiply+0x7c>
 8015c80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d1a5      	bne.n	8015bd4 <__multiply+0x88>
 8015c88:	3f01      	subs	r7, #1
 8015c8a:	e7a1      	b.n	8015bd0 <__multiply+0x84>
 8015c8c:	08017d84 	.word	0x08017d84
 8015c90:	08017e14 	.word	0x08017e14

08015c94 <__pow5mult>:
 8015c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c98:	4615      	mov	r5, r2
 8015c9a:	f012 0203 	ands.w	r2, r2, #3
 8015c9e:	4606      	mov	r6, r0
 8015ca0:	460f      	mov	r7, r1
 8015ca2:	d007      	beq.n	8015cb4 <__pow5mult+0x20>
 8015ca4:	4c25      	ldr	r4, [pc, #148]	; (8015d3c <__pow5mult+0xa8>)
 8015ca6:	3a01      	subs	r2, #1
 8015ca8:	2300      	movs	r3, #0
 8015caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015cae:	f7ff fe55 	bl	801595c <__multadd>
 8015cb2:	4607      	mov	r7, r0
 8015cb4:	10ad      	asrs	r5, r5, #2
 8015cb6:	d03d      	beq.n	8015d34 <__pow5mult+0xa0>
 8015cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015cba:	b97c      	cbnz	r4, 8015cdc <__pow5mult+0x48>
 8015cbc:	2010      	movs	r0, #16
 8015cbe:	f7fc fc91 	bl	80125e4 <malloc>
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8015cc6:	b928      	cbnz	r0, 8015cd4 <__pow5mult+0x40>
 8015cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015ccc:	4b1c      	ldr	r3, [pc, #112]	; (8015d40 <__pow5mult+0xac>)
 8015cce:	481d      	ldr	r0, [pc, #116]	; (8015d44 <__pow5mult+0xb0>)
 8015cd0:	f001 f83c 	bl	8016d4c <__assert_func>
 8015cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cd8:	6004      	str	r4, [r0, #0]
 8015cda:	60c4      	str	r4, [r0, #12]
 8015cdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015ce4:	b94c      	cbnz	r4, 8015cfa <__pow5mult+0x66>
 8015ce6:	f240 2171 	movw	r1, #625	; 0x271
 8015cea:	4630      	mov	r0, r6
 8015cec:	f7ff ff18 	bl	8015b20 <__i2b>
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cf8:	6003      	str	r3, [r0, #0]
 8015cfa:	f04f 0900 	mov.w	r9, #0
 8015cfe:	07eb      	lsls	r3, r5, #31
 8015d00:	d50a      	bpl.n	8015d18 <__pow5mult+0x84>
 8015d02:	4639      	mov	r1, r7
 8015d04:	4622      	mov	r2, r4
 8015d06:	4630      	mov	r0, r6
 8015d08:	f7ff ff20 	bl	8015b4c <__multiply>
 8015d0c:	4680      	mov	r8, r0
 8015d0e:	4639      	mov	r1, r7
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7ff fe01 	bl	8015918 <_Bfree>
 8015d16:	4647      	mov	r7, r8
 8015d18:	106d      	asrs	r5, r5, #1
 8015d1a:	d00b      	beq.n	8015d34 <__pow5mult+0xa0>
 8015d1c:	6820      	ldr	r0, [r4, #0]
 8015d1e:	b938      	cbnz	r0, 8015d30 <__pow5mult+0x9c>
 8015d20:	4622      	mov	r2, r4
 8015d22:	4621      	mov	r1, r4
 8015d24:	4630      	mov	r0, r6
 8015d26:	f7ff ff11 	bl	8015b4c <__multiply>
 8015d2a:	6020      	str	r0, [r4, #0]
 8015d2c:	f8c0 9000 	str.w	r9, [r0]
 8015d30:	4604      	mov	r4, r0
 8015d32:	e7e4      	b.n	8015cfe <__pow5mult+0x6a>
 8015d34:	4638      	mov	r0, r7
 8015d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d3a:	bf00      	nop
 8015d3c:	08017f68 	.word	0x08017f68
 8015d40:	08017d0e 	.word	0x08017d0e
 8015d44:	08017e14 	.word	0x08017e14

08015d48 <__lshift>:
 8015d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	4607      	mov	r7, r0
 8015d50:	4691      	mov	r9, r2
 8015d52:	6923      	ldr	r3, [r4, #16]
 8015d54:	6849      	ldr	r1, [r1, #4]
 8015d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d5a:	68a3      	ldr	r3, [r4, #8]
 8015d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d60:	f108 0601 	add.w	r6, r8, #1
 8015d64:	42b3      	cmp	r3, r6
 8015d66:	db0b      	blt.n	8015d80 <__lshift+0x38>
 8015d68:	4638      	mov	r0, r7
 8015d6a:	f7ff fd95 	bl	8015898 <_Balloc>
 8015d6e:	4605      	mov	r5, r0
 8015d70:	b948      	cbnz	r0, 8015d86 <__lshift+0x3e>
 8015d72:	4602      	mov	r2, r0
 8015d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015d78:	4b27      	ldr	r3, [pc, #156]	; (8015e18 <__lshift+0xd0>)
 8015d7a:	4828      	ldr	r0, [pc, #160]	; (8015e1c <__lshift+0xd4>)
 8015d7c:	f000 ffe6 	bl	8016d4c <__assert_func>
 8015d80:	3101      	adds	r1, #1
 8015d82:	005b      	lsls	r3, r3, #1
 8015d84:	e7ee      	b.n	8015d64 <__lshift+0x1c>
 8015d86:	2300      	movs	r3, #0
 8015d88:	f100 0114 	add.w	r1, r0, #20
 8015d8c:	f100 0210 	add.w	r2, r0, #16
 8015d90:	4618      	mov	r0, r3
 8015d92:	4553      	cmp	r3, sl
 8015d94:	db33      	blt.n	8015dfe <__lshift+0xb6>
 8015d96:	6920      	ldr	r0, [r4, #16]
 8015d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d9c:	f104 0314 	add.w	r3, r4, #20
 8015da0:	f019 091f 	ands.w	r9, r9, #31
 8015da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015da8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015dac:	d02b      	beq.n	8015e06 <__lshift+0xbe>
 8015dae:	468a      	mov	sl, r1
 8015db0:	2200      	movs	r2, #0
 8015db2:	f1c9 0e20 	rsb	lr, r9, #32
 8015db6:	6818      	ldr	r0, [r3, #0]
 8015db8:	fa00 f009 	lsl.w	r0, r0, r9
 8015dbc:	4302      	orrs	r2, r0
 8015dbe:	f84a 2b04 	str.w	r2, [sl], #4
 8015dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dc6:	459c      	cmp	ip, r3
 8015dc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8015dcc:	d8f3      	bhi.n	8015db6 <__lshift+0x6e>
 8015dce:	ebac 0304 	sub.w	r3, ip, r4
 8015dd2:	3b15      	subs	r3, #21
 8015dd4:	f023 0303 	bic.w	r3, r3, #3
 8015dd8:	3304      	adds	r3, #4
 8015dda:	f104 0015 	add.w	r0, r4, #21
 8015dde:	4584      	cmp	ip, r0
 8015de0:	bf38      	it	cc
 8015de2:	2304      	movcc	r3, #4
 8015de4:	50ca      	str	r2, [r1, r3]
 8015de6:	b10a      	cbz	r2, 8015dec <__lshift+0xa4>
 8015de8:	f108 0602 	add.w	r6, r8, #2
 8015dec:	3e01      	subs	r6, #1
 8015dee:	4638      	mov	r0, r7
 8015df0:	4621      	mov	r1, r4
 8015df2:	612e      	str	r6, [r5, #16]
 8015df4:	f7ff fd90 	bl	8015918 <_Bfree>
 8015df8:	4628      	mov	r0, r5
 8015dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e02:	3301      	adds	r3, #1
 8015e04:	e7c5      	b.n	8015d92 <__lshift+0x4a>
 8015e06:	3904      	subs	r1, #4
 8015e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e0c:	459c      	cmp	ip, r3
 8015e0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e12:	d8f9      	bhi.n	8015e08 <__lshift+0xc0>
 8015e14:	e7ea      	b.n	8015dec <__lshift+0xa4>
 8015e16:	bf00      	nop
 8015e18:	08017d84 	.word	0x08017d84
 8015e1c:	08017e14 	.word	0x08017e14

08015e20 <__mcmp>:
 8015e20:	4603      	mov	r3, r0
 8015e22:	690a      	ldr	r2, [r1, #16]
 8015e24:	6900      	ldr	r0, [r0, #16]
 8015e26:	b530      	push	{r4, r5, lr}
 8015e28:	1a80      	subs	r0, r0, r2
 8015e2a:	d10d      	bne.n	8015e48 <__mcmp+0x28>
 8015e2c:	3314      	adds	r3, #20
 8015e2e:	3114      	adds	r1, #20
 8015e30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015e34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015e3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015e40:	4295      	cmp	r5, r2
 8015e42:	d002      	beq.n	8015e4a <__mcmp+0x2a>
 8015e44:	d304      	bcc.n	8015e50 <__mcmp+0x30>
 8015e46:	2001      	movs	r0, #1
 8015e48:	bd30      	pop	{r4, r5, pc}
 8015e4a:	42a3      	cmp	r3, r4
 8015e4c:	d3f4      	bcc.n	8015e38 <__mcmp+0x18>
 8015e4e:	e7fb      	b.n	8015e48 <__mcmp+0x28>
 8015e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e54:	e7f8      	b.n	8015e48 <__mcmp+0x28>
	...

08015e58 <__mdiff>:
 8015e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	4606      	mov	r6, r0
 8015e60:	4611      	mov	r1, r2
 8015e62:	4620      	mov	r0, r4
 8015e64:	4692      	mov	sl, r2
 8015e66:	f7ff ffdb 	bl	8015e20 <__mcmp>
 8015e6a:	1e05      	subs	r5, r0, #0
 8015e6c:	d111      	bne.n	8015e92 <__mdiff+0x3a>
 8015e6e:	4629      	mov	r1, r5
 8015e70:	4630      	mov	r0, r6
 8015e72:	f7ff fd11 	bl	8015898 <_Balloc>
 8015e76:	4602      	mov	r2, r0
 8015e78:	b928      	cbnz	r0, 8015e86 <__mdiff+0x2e>
 8015e7a:	f240 2132 	movw	r1, #562	; 0x232
 8015e7e:	4b3c      	ldr	r3, [pc, #240]	; (8015f70 <__mdiff+0x118>)
 8015e80:	483c      	ldr	r0, [pc, #240]	; (8015f74 <__mdiff+0x11c>)
 8015e82:	f000 ff63 	bl	8016d4c <__assert_func>
 8015e86:	2301      	movs	r3, #1
 8015e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e8c:	4610      	mov	r0, r2
 8015e8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e92:	bfa4      	itt	ge
 8015e94:	4653      	movge	r3, sl
 8015e96:	46a2      	movge	sl, r4
 8015e98:	4630      	mov	r0, r6
 8015e9a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015e9e:	bfa6      	itte	ge
 8015ea0:	461c      	movge	r4, r3
 8015ea2:	2500      	movge	r5, #0
 8015ea4:	2501      	movlt	r5, #1
 8015ea6:	f7ff fcf7 	bl	8015898 <_Balloc>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	b918      	cbnz	r0, 8015eb6 <__mdiff+0x5e>
 8015eae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015eb2:	4b2f      	ldr	r3, [pc, #188]	; (8015f70 <__mdiff+0x118>)
 8015eb4:	e7e4      	b.n	8015e80 <__mdiff+0x28>
 8015eb6:	f100 0814 	add.w	r8, r0, #20
 8015eba:	f8da 7010 	ldr.w	r7, [sl, #16]
 8015ebe:	60c5      	str	r5, [r0, #12]
 8015ec0:	f04f 0c00 	mov.w	ip, #0
 8015ec4:	f10a 0514 	add.w	r5, sl, #20
 8015ec8:	f10a 0010 	add.w	r0, sl, #16
 8015ecc:	46c2      	mov	sl, r8
 8015ece:	6926      	ldr	r6, [r4, #16]
 8015ed0:	f104 0914 	add.w	r9, r4, #20
 8015ed4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8015ed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015edc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8015ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ee4:	fa1f f18b 	uxth.w	r1, fp
 8015ee8:	4461      	add	r1, ip
 8015eea:	fa1f fc83 	uxth.w	ip, r3
 8015eee:	0c1b      	lsrs	r3, r3, #16
 8015ef0:	eba1 010c 	sub.w	r1, r1, ip
 8015ef4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015ef8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015efc:	b289      	uxth	r1, r1
 8015efe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015f02:	454e      	cmp	r6, r9
 8015f04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015f08:	f84a 3b04 	str.w	r3, [sl], #4
 8015f0c:	d8e6      	bhi.n	8015edc <__mdiff+0x84>
 8015f0e:	1b33      	subs	r3, r6, r4
 8015f10:	3b15      	subs	r3, #21
 8015f12:	f023 0303 	bic.w	r3, r3, #3
 8015f16:	3415      	adds	r4, #21
 8015f18:	3304      	adds	r3, #4
 8015f1a:	42a6      	cmp	r6, r4
 8015f1c:	bf38      	it	cc
 8015f1e:	2304      	movcc	r3, #4
 8015f20:	441d      	add	r5, r3
 8015f22:	4443      	add	r3, r8
 8015f24:	461e      	mov	r6, r3
 8015f26:	462c      	mov	r4, r5
 8015f28:	4574      	cmp	r4, lr
 8015f2a:	d30e      	bcc.n	8015f4a <__mdiff+0xf2>
 8015f2c:	f10e 0103 	add.w	r1, lr, #3
 8015f30:	1b49      	subs	r1, r1, r5
 8015f32:	f021 0103 	bic.w	r1, r1, #3
 8015f36:	3d03      	subs	r5, #3
 8015f38:	45ae      	cmp	lr, r5
 8015f3a:	bf38      	it	cc
 8015f3c:	2100      	movcc	r1, #0
 8015f3e:	4419      	add	r1, r3
 8015f40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015f44:	b18b      	cbz	r3, 8015f6a <__mdiff+0x112>
 8015f46:	6117      	str	r7, [r2, #16]
 8015f48:	e7a0      	b.n	8015e8c <__mdiff+0x34>
 8015f4a:	f854 8b04 	ldr.w	r8, [r4], #4
 8015f4e:	fa1f f188 	uxth.w	r1, r8
 8015f52:	4461      	add	r1, ip
 8015f54:	1408      	asrs	r0, r1, #16
 8015f56:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8015f5a:	b289      	uxth	r1, r1
 8015f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015f60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f64:	f846 1b04 	str.w	r1, [r6], #4
 8015f68:	e7de      	b.n	8015f28 <__mdiff+0xd0>
 8015f6a:	3f01      	subs	r7, #1
 8015f6c:	e7e8      	b.n	8015f40 <__mdiff+0xe8>
 8015f6e:	bf00      	nop
 8015f70:	08017d84 	.word	0x08017d84
 8015f74:	08017e14 	.word	0x08017e14

08015f78 <__ulp>:
 8015f78:	4b11      	ldr	r3, [pc, #68]	; (8015fc0 <__ulp+0x48>)
 8015f7a:	400b      	ands	r3, r1
 8015f7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	dd02      	ble.n	8015f8a <__ulp+0x12>
 8015f84:	2000      	movs	r0, #0
 8015f86:	4619      	mov	r1, r3
 8015f88:	4770      	bx	lr
 8015f8a:	425b      	negs	r3, r3
 8015f8c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015f90:	f04f 0000 	mov.w	r0, #0
 8015f94:	f04f 0100 	mov.w	r1, #0
 8015f98:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015f9c:	da04      	bge.n	8015fa8 <__ulp+0x30>
 8015f9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015fa2:	fa43 f102 	asr.w	r1, r3, r2
 8015fa6:	4770      	bx	lr
 8015fa8:	f1a2 0314 	sub.w	r3, r2, #20
 8015fac:	2b1e      	cmp	r3, #30
 8015fae:	bfd6      	itet	le
 8015fb0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015fb4:	2301      	movgt	r3, #1
 8015fb6:	fa22 f303 	lsrle.w	r3, r2, r3
 8015fba:	4618      	mov	r0, r3
 8015fbc:	4770      	bx	lr
 8015fbe:	bf00      	nop
 8015fc0:	7ff00000 	.word	0x7ff00000

08015fc4 <__b2d>:
 8015fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc8:	6907      	ldr	r7, [r0, #16]
 8015fca:	f100 0914 	add.w	r9, r0, #20
 8015fce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8015fd2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8015fd6:	f1a7 0804 	sub.w	r8, r7, #4
 8015fda:	4630      	mov	r0, r6
 8015fdc:	f7ff fd52 	bl	8015a84 <__hi0bits>
 8015fe0:	f1c0 0320 	rsb	r3, r0, #32
 8015fe4:	280a      	cmp	r0, #10
 8015fe6:	600b      	str	r3, [r1, #0]
 8015fe8:	491f      	ldr	r1, [pc, #124]	; (8016068 <__b2d+0xa4>)
 8015fea:	dc17      	bgt.n	801601c <__b2d+0x58>
 8015fec:	45c1      	cmp	r9, r8
 8015fee:	bf28      	it	cs
 8015ff0:	2200      	movcs	r2, #0
 8015ff2:	f1c0 0c0b 	rsb	ip, r0, #11
 8015ff6:	fa26 f30c 	lsr.w	r3, r6, ip
 8015ffa:	bf38      	it	cc
 8015ffc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016000:	ea43 0501 	orr.w	r5, r3, r1
 8016004:	f100 0315 	add.w	r3, r0, #21
 8016008:	fa06 f303 	lsl.w	r3, r6, r3
 801600c:	fa22 f20c 	lsr.w	r2, r2, ip
 8016010:	ea43 0402 	orr.w	r4, r3, r2
 8016014:	4620      	mov	r0, r4
 8016016:	4629      	mov	r1, r5
 8016018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801601c:	45c1      	cmp	r9, r8
 801601e:	bf2e      	itee	cs
 8016020:	2200      	movcs	r2, #0
 8016022:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016026:	f1a7 0808 	subcc.w	r8, r7, #8
 801602a:	f1b0 030b 	subs.w	r3, r0, #11
 801602e:	d016      	beq.n	801605e <__b2d+0x9a>
 8016030:	f1c3 0720 	rsb	r7, r3, #32
 8016034:	fa22 f107 	lsr.w	r1, r2, r7
 8016038:	45c8      	cmp	r8, r9
 801603a:	fa06 f603 	lsl.w	r6, r6, r3
 801603e:	ea46 0601 	orr.w	r6, r6, r1
 8016042:	bf94      	ite	ls
 8016044:	2100      	movls	r1, #0
 8016046:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801604a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801604e:	fa02 f003 	lsl.w	r0, r2, r3
 8016052:	40f9      	lsrs	r1, r7
 8016054:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016058:	ea40 0401 	orr.w	r4, r0, r1
 801605c:	e7da      	b.n	8016014 <__b2d+0x50>
 801605e:	4614      	mov	r4, r2
 8016060:	ea46 0501 	orr.w	r5, r6, r1
 8016064:	e7d6      	b.n	8016014 <__b2d+0x50>
 8016066:	bf00      	nop
 8016068:	3ff00000 	.word	0x3ff00000

0801606c <__d2b>:
 801606c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016070:	2101      	movs	r1, #1
 8016072:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8016076:	4690      	mov	r8, r2
 8016078:	461d      	mov	r5, r3
 801607a:	f7ff fc0d 	bl	8015898 <_Balloc>
 801607e:	4604      	mov	r4, r0
 8016080:	b930      	cbnz	r0, 8016090 <__d2b+0x24>
 8016082:	4602      	mov	r2, r0
 8016084:	f240 310a 	movw	r1, #778	; 0x30a
 8016088:	4b24      	ldr	r3, [pc, #144]	; (801611c <__d2b+0xb0>)
 801608a:	4825      	ldr	r0, [pc, #148]	; (8016120 <__d2b+0xb4>)
 801608c:	f000 fe5e 	bl	8016d4c <__assert_func>
 8016090:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8016094:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8016098:	bb2d      	cbnz	r5, 80160e6 <__d2b+0x7a>
 801609a:	9301      	str	r3, [sp, #4]
 801609c:	f1b8 0300 	subs.w	r3, r8, #0
 80160a0:	d026      	beq.n	80160f0 <__d2b+0x84>
 80160a2:	4668      	mov	r0, sp
 80160a4:	9300      	str	r3, [sp, #0]
 80160a6:	f7ff fd0d 	bl	8015ac4 <__lo0bits>
 80160aa:	9900      	ldr	r1, [sp, #0]
 80160ac:	b1f0      	cbz	r0, 80160ec <__d2b+0x80>
 80160ae:	9a01      	ldr	r2, [sp, #4]
 80160b0:	f1c0 0320 	rsb	r3, r0, #32
 80160b4:	fa02 f303 	lsl.w	r3, r2, r3
 80160b8:	430b      	orrs	r3, r1
 80160ba:	40c2      	lsrs	r2, r0
 80160bc:	6163      	str	r3, [r4, #20]
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	bf14      	ite	ne
 80160c6:	2102      	movne	r1, #2
 80160c8:	2101      	moveq	r1, #1
 80160ca:	61a3      	str	r3, [r4, #24]
 80160cc:	6121      	str	r1, [r4, #16]
 80160ce:	b1c5      	cbz	r5, 8016102 <__d2b+0x96>
 80160d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80160d4:	4405      	add	r5, r0
 80160d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80160da:	603d      	str	r5, [r7, #0]
 80160dc:	6030      	str	r0, [r6, #0]
 80160de:	4620      	mov	r0, r4
 80160e0:	b002      	add	sp, #8
 80160e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80160ea:	e7d6      	b.n	801609a <__d2b+0x2e>
 80160ec:	6161      	str	r1, [r4, #20]
 80160ee:	e7e7      	b.n	80160c0 <__d2b+0x54>
 80160f0:	a801      	add	r0, sp, #4
 80160f2:	f7ff fce7 	bl	8015ac4 <__lo0bits>
 80160f6:	2101      	movs	r1, #1
 80160f8:	9b01      	ldr	r3, [sp, #4]
 80160fa:	6121      	str	r1, [r4, #16]
 80160fc:	6163      	str	r3, [r4, #20]
 80160fe:	3020      	adds	r0, #32
 8016100:	e7e5      	b.n	80160ce <__d2b+0x62>
 8016102:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8016106:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801610a:	6038      	str	r0, [r7, #0]
 801610c:	6918      	ldr	r0, [r3, #16]
 801610e:	f7ff fcb9 	bl	8015a84 <__hi0bits>
 8016112:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8016116:	6031      	str	r1, [r6, #0]
 8016118:	e7e1      	b.n	80160de <__d2b+0x72>
 801611a:	bf00      	nop
 801611c:	08017d84 	.word	0x08017d84
 8016120:	08017e14 	.word	0x08017e14

08016124 <__ratio>:
 8016124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016128:	4688      	mov	r8, r1
 801612a:	4669      	mov	r1, sp
 801612c:	4681      	mov	r9, r0
 801612e:	f7ff ff49 	bl	8015fc4 <__b2d>
 8016132:	460f      	mov	r7, r1
 8016134:	4604      	mov	r4, r0
 8016136:	460d      	mov	r5, r1
 8016138:	4640      	mov	r0, r8
 801613a:	a901      	add	r1, sp, #4
 801613c:	f7ff ff42 	bl	8015fc4 <__b2d>
 8016140:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016144:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016148:	468b      	mov	fp, r1
 801614a:	eba3 0c02 	sub.w	ip, r3, r2
 801614e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016152:	1a9b      	subs	r3, r3, r2
 8016154:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016158:	2b00      	cmp	r3, #0
 801615a:	bfd5      	itete	le
 801615c:	460a      	movle	r2, r1
 801615e:	462a      	movgt	r2, r5
 8016160:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016164:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016168:	bfd8      	it	le
 801616a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801616e:	465b      	mov	r3, fp
 8016170:	4602      	mov	r2, r0
 8016172:	4639      	mov	r1, r7
 8016174:	4620      	mov	r0, r4
 8016176:	f7ea faf1 	bl	800075c <__aeabi_ddiv>
 801617a:	b003      	add	sp, #12
 801617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016180 <__copybits>:
 8016180:	3901      	subs	r1, #1
 8016182:	b570      	push	{r4, r5, r6, lr}
 8016184:	1149      	asrs	r1, r1, #5
 8016186:	6914      	ldr	r4, [r2, #16]
 8016188:	3101      	adds	r1, #1
 801618a:	f102 0314 	add.w	r3, r2, #20
 801618e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016192:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016196:	1f05      	subs	r5, r0, #4
 8016198:	42a3      	cmp	r3, r4
 801619a:	d30c      	bcc.n	80161b6 <__copybits+0x36>
 801619c:	1aa3      	subs	r3, r4, r2
 801619e:	3b11      	subs	r3, #17
 80161a0:	f023 0303 	bic.w	r3, r3, #3
 80161a4:	3211      	adds	r2, #17
 80161a6:	42a2      	cmp	r2, r4
 80161a8:	bf88      	it	hi
 80161aa:	2300      	movhi	r3, #0
 80161ac:	4418      	add	r0, r3
 80161ae:	2300      	movs	r3, #0
 80161b0:	4288      	cmp	r0, r1
 80161b2:	d305      	bcc.n	80161c0 <__copybits+0x40>
 80161b4:	bd70      	pop	{r4, r5, r6, pc}
 80161b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80161ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80161be:	e7eb      	b.n	8016198 <__copybits+0x18>
 80161c0:	f840 3b04 	str.w	r3, [r0], #4
 80161c4:	e7f4      	b.n	80161b0 <__copybits+0x30>

080161c6 <__any_on>:
 80161c6:	f100 0214 	add.w	r2, r0, #20
 80161ca:	6900      	ldr	r0, [r0, #16]
 80161cc:	114b      	asrs	r3, r1, #5
 80161ce:	4298      	cmp	r0, r3
 80161d0:	b510      	push	{r4, lr}
 80161d2:	db11      	blt.n	80161f8 <__any_on+0x32>
 80161d4:	dd0a      	ble.n	80161ec <__any_on+0x26>
 80161d6:	f011 011f 	ands.w	r1, r1, #31
 80161da:	d007      	beq.n	80161ec <__any_on+0x26>
 80161dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161e0:	fa24 f001 	lsr.w	r0, r4, r1
 80161e4:	fa00 f101 	lsl.w	r1, r0, r1
 80161e8:	428c      	cmp	r4, r1
 80161ea:	d10b      	bne.n	8016204 <__any_on+0x3e>
 80161ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80161f0:	4293      	cmp	r3, r2
 80161f2:	d803      	bhi.n	80161fc <__any_on+0x36>
 80161f4:	2000      	movs	r0, #0
 80161f6:	bd10      	pop	{r4, pc}
 80161f8:	4603      	mov	r3, r0
 80161fa:	e7f7      	b.n	80161ec <__any_on+0x26>
 80161fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016200:	2900      	cmp	r1, #0
 8016202:	d0f5      	beq.n	80161f0 <__any_on+0x2a>
 8016204:	2001      	movs	r0, #1
 8016206:	e7f6      	b.n	80161f6 <__any_on+0x30>

08016208 <__ssputs_r>:
 8016208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801620c:	688e      	ldr	r6, [r1, #8]
 801620e:	4682      	mov	sl, r0
 8016210:	429e      	cmp	r6, r3
 8016212:	460c      	mov	r4, r1
 8016214:	4690      	mov	r8, r2
 8016216:	461f      	mov	r7, r3
 8016218:	d838      	bhi.n	801628c <__ssputs_r+0x84>
 801621a:	898a      	ldrh	r2, [r1, #12]
 801621c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016220:	d032      	beq.n	8016288 <__ssputs_r+0x80>
 8016222:	6825      	ldr	r5, [r4, #0]
 8016224:	6909      	ldr	r1, [r1, #16]
 8016226:	3301      	adds	r3, #1
 8016228:	eba5 0901 	sub.w	r9, r5, r1
 801622c:	6965      	ldr	r5, [r4, #20]
 801622e:	444b      	add	r3, r9
 8016230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016238:	106d      	asrs	r5, r5, #1
 801623a:	429d      	cmp	r5, r3
 801623c:	bf38      	it	cc
 801623e:	461d      	movcc	r5, r3
 8016240:	0553      	lsls	r3, r2, #21
 8016242:	d531      	bpl.n	80162a8 <__ssputs_r+0xa0>
 8016244:	4629      	mov	r1, r5
 8016246:	f7fc fa75 	bl	8012734 <_malloc_r>
 801624a:	4606      	mov	r6, r0
 801624c:	b950      	cbnz	r0, 8016264 <__ssputs_r+0x5c>
 801624e:	230c      	movs	r3, #12
 8016250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016254:	f8ca 3000 	str.w	r3, [sl]
 8016258:	89a3      	ldrh	r3, [r4, #12]
 801625a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801625e:	81a3      	strh	r3, [r4, #12]
 8016260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016264:	464a      	mov	r2, r9
 8016266:	6921      	ldr	r1, [r4, #16]
 8016268:	f7fc f9da 	bl	8012620 <memcpy>
 801626c:	89a3      	ldrh	r3, [r4, #12]
 801626e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016276:	81a3      	strh	r3, [r4, #12]
 8016278:	6126      	str	r6, [r4, #16]
 801627a:	444e      	add	r6, r9
 801627c:	6026      	str	r6, [r4, #0]
 801627e:	463e      	mov	r6, r7
 8016280:	6165      	str	r5, [r4, #20]
 8016282:	eba5 0509 	sub.w	r5, r5, r9
 8016286:	60a5      	str	r5, [r4, #8]
 8016288:	42be      	cmp	r6, r7
 801628a:	d900      	bls.n	801628e <__ssputs_r+0x86>
 801628c:	463e      	mov	r6, r7
 801628e:	4632      	mov	r2, r6
 8016290:	4641      	mov	r1, r8
 8016292:	6820      	ldr	r0, [r4, #0]
 8016294:	f7fc f9d2 	bl	801263c <memmove>
 8016298:	68a3      	ldr	r3, [r4, #8]
 801629a:	6822      	ldr	r2, [r4, #0]
 801629c:	1b9b      	subs	r3, r3, r6
 801629e:	4432      	add	r2, r6
 80162a0:	2000      	movs	r0, #0
 80162a2:	60a3      	str	r3, [r4, #8]
 80162a4:	6022      	str	r2, [r4, #0]
 80162a6:	e7db      	b.n	8016260 <__ssputs_r+0x58>
 80162a8:	462a      	mov	r2, r5
 80162aa:	f000 ff36 	bl	801711a <_realloc_r>
 80162ae:	4606      	mov	r6, r0
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d1e1      	bne.n	8016278 <__ssputs_r+0x70>
 80162b4:	4650      	mov	r0, sl
 80162b6:	6921      	ldr	r1, [r4, #16]
 80162b8:	f7fc f9f0 	bl	801269c <_free_r>
 80162bc:	e7c7      	b.n	801624e <__ssputs_r+0x46>
	...

080162c0 <_svfiprintf_r>:
 80162c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c4:	4698      	mov	r8, r3
 80162c6:	898b      	ldrh	r3, [r1, #12]
 80162c8:	4607      	mov	r7, r0
 80162ca:	061b      	lsls	r3, r3, #24
 80162cc:	460d      	mov	r5, r1
 80162ce:	4614      	mov	r4, r2
 80162d0:	b09d      	sub	sp, #116	; 0x74
 80162d2:	d50e      	bpl.n	80162f2 <_svfiprintf_r+0x32>
 80162d4:	690b      	ldr	r3, [r1, #16]
 80162d6:	b963      	cbnz	r3, 80162f2 <_svfiprintf_r+0x32>
 80162d8:	2140      	movs	r1, #64	; 0x40
 80162da:	f7fc fa2b 	bl	8012734 <_malloc_r>
 80162de:	6028      	str	r0, [r5, #0]
 80162e0:	6128      	str	r0, [r5, #16]
 80162e2:	b920      	cbnz	r0, 80162ee <_svfiprintf_r+0x2e>
 80162e4:	230c      	movs	r3, #12
 80162e6:	603b      	str	r3, [r7, #0]
 80162e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162ec:	e0d1      	b.n	8016492 <_svfiprintf_r+0x1d2>
 80162ee:	2340      	movs	r3, #64	; 0x40
 80162f0:	616b      	str	r3, [r5, #20]
 80162f2:	2300      	movs	r3, #0
 80162f4:	9309      	str	r3, [sp, #36]	; 0x24
 80162f6:	2320      	movs	r3, #32
 80162f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162fc:	2330      	movs	r3, #48	; 0x30
 80162fe:	f04f 0901 	mov.w	r9, #1
 8016302:	f8cd 800c 	str.w	r8, [sp, #12]
 8016306:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80164ac <_svfiprintf_r+0x1ec>
 801630a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801630e:	4623      	mov	r3, r4
 8016310:	469a      	mov	sl, r3
 8016312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016316:	b10a      	cbz	r2, 801631c <_svfiprintf_r+0x5c>
 8016318:	2a25      	cmp	r2, #37	; 0x25
 801631a:	d1f9      	bne.n	8016310 <_svfiprintf_r+0x50>
 801631c:	ebba 0b04 	subs.w	fp, sl, r4
 8016320:	d00b      	beq.n	801633a <_svfiprintf_r+0x7a>
 8016322:	465b      	mov	r3, fp
 8016324:	4622      	mov	r2, r4
 8016326:	4629      	mov	r1, r5
 8016328:	4638      	mov	r0, r7
 801632a:	f7ff ff6d 	bl	8016208 <__ssputs_r>
 801632e:	3001      	adds	r0, #1
 8016330:	f000 80aa 	beq.w	8016488 <_svfiprintf_r+0x1c8>
 8016334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016336:	445a      	add	r2, fp
 8016338:	9209      	str	r2, [sp, #36]	; 0x24
 801633a:	f89a 3000 	ldrb.w	r3, [sl]
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 80a2 	beq.w	8016488 <_svfiprintf_r+0x1c8>
 8016344:	2300      	movs	r3, #0
 8016346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801634a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801634e:	f10a 0a01 	add.w	sl, sl, #1
 8016352:	9304      	str	r3, [sp, #16]
 8016354:	9307      	str	r3, [sp, #28]
 8016356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801635a:	931a      	str	r3, [sp, #104]	; 0x68
 801635c:	4654      	mov	r4, sl
 801635e:	2205      	movs	r2, #5
 8016360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016364:	4851      	ldr	r0, [pc, #324]	; (80164ac <_svfiprintf_r+0x1ec>)
 8016366:	f7fc f94d 	bl	8012604 <memchr>
 801636a:	9a04      	ldr	r2, [sp, #16]
 801636c:	b9d8      	cbnz	r0, 80163a6 <_svfiprintf_r+0xe6>
 801636e:	06d0      	lsls	r0, r2, #27
 8016370:	bf44      	itt	mi
 8016372:	2320      	movmi	r3, #32
 8016374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016378:	0711      	lsls	r1, r2, #28
 801637a:	bf44      	itt	mi
 801637c:	232b      	movmi	r3, #43	; 0x2b
 801637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016382:	f89a 3000 	ldrb.w	r3, [sl]
 8016386:	2b2a      	cmp	r3, #42	; 0x2a
 8016388:	d015      	beq.n	80163b6 <_svfiprintf_r+0xf6>
 801638a:	4654      	mov	r4, sl
 801638c:	2000      	movs	r0, #0
 801638e:	f04f 0c0a 	mov.w	ip, #10
 8016392:	9a07      	ldr	r2, [sp, #28]
 8016394:	4621      	mov	r1, r4
 8016396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801639a:	3b30      	subs	r3, #48	; 0x30
 801639c:	2b09      	cmp	r3, #9
 801639e:	d94e      	bls.n	801643e <_svfiprintf_r+0x17e>
 80163a0:	b1b0      	cbz	r0, 80163d0 <_svfiprintf_r+0x110>
 80163a2:	9207      	str	r2, [sp, #28]
 80163a4:	e014      	b.n	80163d0 <_svfiprintf_r+0x110>
 80163a6:	eba0 0308 	sub.w	r3, r0, r8
 80163aa:	fa09 f303 	lsl.w	r3, r9, r3
 80163ae:	4313      	orrs	r3, r2
 80163b0:	46a2      	mov	sl, r4
 80163b2:	9304      	str	r3, [sp, #16]
 80163b4:	e7d2      	b.n	801635c <_svfiprintf_r+0x9c>
 80163b6:	9b03      	ldr	r3, [sp, #12]
 80163b8:	1d19      	adds	r1, r3, #4
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	9103      	str	r1, [sp, #12]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	bfbb      	ittet	lt
 80163c2:	425b      	neglt	r3, r3
 80163c4:	f042 0202 	orrlt.w	r2, r2, #2
 80163c8:	9307      	strge	r3, [sp, #28]
 80163ca:	9307      	strlt	r3, [sp, #28]
 80163cc:	bfb8      	it	lt
 80163ce:	9204      	strlt	r2, [sp, #16]
 80163d0:	7823      	ldrb	r3, [r4, #0]
 80163d2:	2b2e      	cmp	r3, #46	; 0x2e
 80163d4:	d10c      	bne.n	80163f0 <_svfiprintf_r+0x130>
 80163d6:	7863      	ldrb	r3, [r4, #1]
 80163d8:	2b2a      	cmp	r3, #42	; 0x2a
 80163da:	d135      	bne.n	8016448 <_svfiprintf_r+0x188>
 80163dc:	9b03      	ldr	r3, [sp, #12]
 80163de:	3402      	adds	r4, #2
 80163e0:	1d1a      	adds	r2, r3, #4
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	9203      	str	r2, [sp, #12]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	bfb8      	it	lt
 80163ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80163ee:	9305      	str	r3, [sp, #20]
 80163f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164bc <_svfiprintf_r+0x1fc>
 80163f4:	2203      	movs	r2, #3
 80163f6:	4650      	mov	r0, sl
 80163f8:	7821      	ldrb	r1, [r4, #0]
 80163fa:	f7fc f903 	bl	8012604 <memchr>
 80163fe:	b140      	cbz	r0, 8016412 <_svfiprintf_r+0x152>
 8016400:	2340      	movs	r3, #64	; 0x40
 8016402:	eba0 000a 	sub.w	r0, r0, sl
 8016406:	fa03 f000 	lsl.w	r0, r3, r0
 801640a:	9b04      	ldr	r3, [sp, #16]
 801640c:	3401      	adds	r4, #1
 801640e:	4303      	orrs	r3, r0
 8016410:	9304      	str	r3, [sp, #16]
 8016412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016416:	2206      	movs	r2, #6
 8016418:	4825      	ldr	r0, [pc, #148]	; (80164b0 <_svfiprintf_r+0x1f0>)
 801641a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801641e:	f7fc f8f1 	bl	8012604 <memchr>
 8016422:	2800      	cmp	r0, #0
 8016424:	d038      	beq.n	8016498 <_svfiprintf_r+0x1d8>
 8016426:	4b23      	ldr	r3, [pc, #140]	; (80164b4 <_svfiprintf_r+0x1f4>)
 8016428:	bb1b      	cbnz	r3, 8016472 <_svfiprintf_r+0x1b2>
 801642a:	9b03      	ldr	r3, [sp, #12]
 801642c:	3307      	adds	r3, #7
 801642e:	f023 0307 	bic.w	r3, r3, #7
 8016432:	3308      	adds	r3, #8
 8016434:	9303      	str	r3, [sp, #12]
 8016436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016438:	4433      	add	r3, r6
 801643a:	9309      	str	r3, [sp, #36]	; 0x24
 801643c:	e767      	b.n	801630e <_svfiprintf_r+0x4e>
 801643e:	460c      	mov	r4, r1
 8016440:	2001      	movs	r0, #1
 8016442:	fb0c 3202 	mla	r2, ip, r2, r3
 8016446:	e7a5      	b.n	8016394 <_svfiprintf_r+0xd4>
 8016448:	2300      	movs	r3, #0
 801644a:	f04f 0c0a 	mov.w	ip, #10
 801644e:	4619      	mov	r1, r3
 8016450:	3401      	adds	r4, #1
 8016452:	9305      	str	r3, [sp, #20]
 8016454:	4620      	mov	r0, r4
 8016456:	f810 2b01 	ldrb.w	r2, [r0], #1
 801645a:	3a30      	subs	r2, #48	; 0x30
 801645c:	2a09      	cmp	r2, #9
 801645e:	d903      	bls.n	8016468 <_svfiprintf_r+0x1a8>
 8016460:	2b00      	cmp	r3, #0
 8016462:	d0c5      	beq.n	80163f0 <_svfiprintf_r+0x130>
 8016464:	9105      	str	r1, [sp, #20]
 8016466:	e7c3      	b.n	80163f0 <_svfiprintf_r+0x130>
 8016468:	4604      	mov	r4, r0
 801646a:	2301      	movs	r3, #1
 801646c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016470:	e7f0      	b.n	8016454 <_svfiprintf_r+0x194>
 8016472:	ab03      	add	r3, sp, #12
 8016474:	9300      	str	r3, [sp, #0]
 8016476:	462a      	mov	r2, r5
 8016478:	4638      	mov	r0, r7
 801647a:	4b0f      	ldr	r3, [pc, #60]	; (80164b8 <_svfiprintf_r+0x1f8>)
 801647c:	a904      	add	r1, sp, #16
 801647e:	f7fc fa51 	bl	8012924 <_printf_float>
 8016482:	1c42      	adds	r2, r0, #1
 8016484:	4606      	mov	r6, r0
 8016486:	d1d6      	bne.n	8016436 <_svfiprintf_r+0x176>
 8016488:	89ab      	ldrh	r3, [r5, #12]
 801648a:	065b      	lsls	r3, r3, #25
 801648c:	f53f af2c 	bmi.w	80162e8 <_svfiprintf_r+0x28>
 8016490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016492:	b01d      	add	sp, #116	; 0x74
 8016494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016498:	ab03      	add	r3, sp, #12
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	462a      	mov	r2, r5
 801649e:	4638      	mov	r0, r7
 80164a0:	4b05      	ldr	r3, [pc, #20]	; (80164b8 <_svfiprintf_r+0x1f8>)
 80164a2:	a904      	add	r1, sp, #16
 80164a4:	f7fc fcda 	bl	8012e5c <_printf_i>
 80164a8:	e7eb      	b.n	8016482 <_svfiprintf_r+0x1c2>
 80164aa:	bf00      	nop
 80164ac:	08017f74 	.word	0x08017f74
 80164b0:	08017f7e 	.word	0x08017f7e
 80164b4:	08012925 	.word	0x08012925
 80164b8:	08016209 	.word	0x08016209
 80164bc:	08017f7a 	.word	0x08017f7a

080164c0 <_sungetc_r>:
 80164c0:	b538      	push	{r3, r4, r5, lr}
 80164c2:	1c4b      	adds	r3, r1, #1
 80164c4:	4614      	mov	r4, r2
 80164c6:	d103      	bne.n	80164d0 <_sungetc_r+0x10>
 80164c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80164cc:	4628      	mov	r0, r5
 80164ce:	bd38      	pop	{r3, r4, r5, pc}
 80164d0:	8993      	ldrh	r3, [r2, #12]
 80164d2:	b2cd      	uxtb	r5, r1
 80164d4:	f023 0320 	bic.w	r3, r3, #32
 80164d8:	8193      	strh	r3, [r2, #12]
 80164da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164dc:	6852      	ldr	r2, [r2, #4]
 80164de:	b18b      	cbz	r3, 8016504 <_sungetc_r+0x44>
 80164e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80164e2:	4293      	cmp	r3, r2
 80164e4:	dd08      	ble.n	80164f8 <_sungetc_r+0x38>
 80164e6:	6823      	ldr	r3, [r4, #0]
 80164e8:	1e5a      	subs	r2, r3, #1
 80164ea:	6022      	str	r2, [r4, #0]
 80164ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80164f0:	6863      	ldr	r3, [r4, #4]
 80164f2:	3301      	adds	r3, #1
 80164f4:	6063      	str	r3, [r4, #4]
 80164f6:	e7e9      	b.n	80164cc <_sungetc_r+0xc>
 80164f8:	4621      	mov	r1, r4
 80164fa:	f000 fbe1 	bl	8016cc0 <__submore>
 80164fe:	2800      	cmp	r0, #0
 8016500:	d0f1      	beq.n	80164e6 <_sungetc_r+0x26>
 8016502:	e7e1      	b.n	80164c8 <_sungetc_r+0x8>
 8016504:	6921      	ldr	r1, [r4, #16]
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	b151      	cbz	r1, 8016520 <_sungetc_r+0x60>
 801650a:	4299      	cmp	r1, r3
 801650c:	d208      	bcs.n	8016520 <_sungetc_r+0x60>
 801650e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016512:	42a9      	cmp	r1, r5
 8016514:	d104      	bne.n	8016520 <_sungetc_r+0x60>
 8016516:	3b01      	subs	r3, #1
 8016518:	3201      	adds	r2, #1
 801651a:	6023      	str	r3, [r4, #0]
 801651c:	6062      	str	r2, [r4, #4]
 801651e:	e7d5      	b.n	80164cc <_sungetc_r+0xc>
 8016520:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016528:	6363      	str	r3, [r4, #52]	; 0x34
 801652a:	2303      	movs	r3, #3
 801652c:	63a3      	str	r3, [r4, #56]	; 0x38
 801652e:	4623      	mov	r3, r4
 8016530:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016534:	6023      	str	r3, [r4, #0]
 8016536:	2301      	movs	r3, #1
 8016538:	e7dc      	b.n	80164f4 <_sungetc_r+0x34>

0801653a <__ssrefill_r>:
 801653a:	b510      	push	{r4, lr}
 801653c:	460c      	mov	r4, r1
 801653e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016540:	b169      	cbz	r1, 801655e <__ssrefill_r+0x24>
 8016542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016546:	4299      	cmp	r1, r3
 8016548:	d001      	beq.n	801654e <__ssrefill_r+0x14>
 801654a:	f7fc f8a7 	bl	801269c <_free_r>
 801654e:	2000      	movs	r0, #0
 8016550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016552:	6360      	str	r0, [r4, #52]	; 0x34
 8016554:	6063      	str	r3, [r4, #4]
 8016556:	b113      	cbz	r3, 801655e <__ssrefill_r+0x24>
 8016558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801655a:	6023      	str	r3, [r4, #0]
 801655c:	bd10      	pop	{r4, pc}
 801655e:	6923      	ldr	r3, [r4, #16]
 8016560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016564:	6023      	str	r3, [r4, #0]
 8016566:	2300      	movs	r3, #0
 8016568:	6063      	str	r3, [r4, #4]
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	f043 0320 	orr.w	r3, r3, #32
 8016570:	81a3      	strh	r3, [r4, #12]
 8016572:	e7f3      	b.n	801655c <__ssrefill_r+0x22>

08016574 <__ssvfiscanf_r>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	460c      	mov	r4, r1
 801657a:	2100      	movs	r1, #0
 801657c:	4606      	mov	r6, r0
 801657e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016582:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016586:	49b3      	ldr	r1, [pc, #716]	; (8016854 <__ssvfiscanf_r+0x2e0>)
 8016588:	f10d 0804 	add.w	r8, sp, #4
 801658c:	91a0      	str	r1, [sp, #640]	; 0x280
 801658e:	49b2      	ldr	r1, [pc, #712]	; (8016858 <__ssvfiscanf_r+0x2e4>)
 8016590:	4fb2      	ldr	r7, [pc, #712]	; (801685c <__ssvfiscanf_r+0x2e8>)
 8016592:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8016860 <__ssvfiscanf_r+0x2ec>
 8016596:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801659a:	91a1      	str	r1, [sp, #644]	; 0x284
 801659c:	9300      	str	r3, [sp, #0]
 801659e:	f892 a000 	ldrb.w	sl, [r2]
 80165a2:	f1ba 0f00 	cmp.w	sl, #0
 80165a6:	f000 8153 	beq.w	8016850 <__ssvfiscanf_r+0x2dc>
 80165aa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80165ae:	1c55      	adds	r5, r2, #1
 80165b0:	f013 0308 	ands.w	r3, r3, #8
 80165b4:	d019      	beq.n	80165ea <__ssvfiscanf_r+0x76>
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	dd0f      	ble.n	80165dc <__ssvfiscanf_r+0x68>
 80165bc:	6823      	ldr	r3, [r4, #0]
 80165be:	781a      	ldrb	r2, [r3, #0]
 80165c0:	5cba      	ldrb	r2, [r7, r2]
 80165c2:	0712      	lsls	r2, r2, #28
 80165c4:	d401      	bmi.n	80165ca <__ssvfiscanf_r+0x56>
 80165c6:	462a      	mov	r2, r5
 80165c8:	e7e9      	b.n	801659e <__ssvfiscanf_r+0x2a>
 80165ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80165cc:	3301      	adds	r3, #1
 80165ce:	3201      	adds	r2, #1
 80165d0:	9245      	str	r2, [sp, #276]	; 0x114
 80165d2:	6862      	ldr	r2, [r4, #4]
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	3a01      	subs	r2, #1
 80165d8:	6062      	str	r2, [r4, #4]
 80165da:	e7ec      	b.n	80165b6 <__ssvfiscanf_r+0x42>
 80165dc:	4621      	mov	r1, r4
 80165de:	4630      	mov	r0, r6
 80165e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165e2:	4798      	blx	r3
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d0e9      	beq.n	80165bc <__ssvfiscanf_r+0x48>
 80165e8:	e7ed      	b.n	80165c6 <__ssvfiscanf_r+0x52>
 80165ea:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80165ee:	f040 8086 	bne.w	80166fe <__ssvfiscanf_r+0x18a>
 80165f2:	9341      	str	r3, [sp, #260]	; 0x104
 80165f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80165f6:	7853      	ldrb	r3, [r2, #1]
 80165f8:	2b2a      	cmp	r3, #42	; 0x2a
 80165fa:	bf04      	itt	eq
 80165fc:	2310      	moveq	r3, #16
 80165fe:	1c95      	addeq	r5, r2, #2
 8016600:	f04f 020a 	mov.w	r2, #10
 8016604:	bf08      	it	eq
 8016606:	9341      	streq	r3, [sp, #260]	; 0x104
 8016608:	46ab      	mov	fp, r5
 801660a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801660e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016612:	2b09      	cmp	r3, #9
 8016614:	d91d      	bls.n	8016652 <__ssvfiscanf_r+0xde>
 8016616:	2203      	movs	r2, #3
 8016618:	4891      	ldr	r0, [pc, #580]	; (8016860 <__ssvfiscanf_r+0x2ec>)
 801661a:	f7fb fff3 	bl	8012604 <memchr>
 801661e:	b140      	cbz	r0, 8016632 <__ssvfiscanf_r+0xbe>
 8016620:	2301      	movs	r3, #1
 8016622:	465d      	mov	r5, fp
 8016624:	eba0 0009 	sub.w	r0, r0, r9
 8016628:	fa03 f000 	lsl.w	r0, r3, r0
 801662c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801662e:	4318      	orrs	r0, r3
 8016630:	9041      	str	r0, [sp, #260]	; 0x104
 8016632:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016636:	2b78      	cmp	r3, #120	; 0x78
 8016638:	d806      	bhi.n	8016648 <__ssvfiscanf_r+0xd4>
 801663a:	2b57      	cmp	r3, #87	; 0x57
 801663c:	d810      	bhi.n	8016660 <__ssvfiscanf_r+0xec>
 801663e:	2b25      	cmp	r3, #37	; 0x25
 8016640:	d05d      	beq.n	80166fe <__ssvfiscanf_r+0x18a>
 8016642:	d857      	bhi.n	80166f4 <__ssvfiscanf_r+0x180>
 8016644:	2b00      	cmp	r3, #0
 8016646:	d075      	beq.n	8016734 <__ssvfiscanf_r+0x1c0>
 8016648:	2303      	movs	r3, #3
 801664a:	9347      	str	r3, [sp, #284]	; 0x11c
 801664c:	230a      	movs	r3, #10
 801664e:	9342      	str	r3, [sp, #264]	; 0x108
 8016650:	e082      	b.n	8016758 <__ssvfiscanf_r+0x1e4>
 8016652:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016654:	465d      	mov	r5, fp
 8016656:	fb02 1303 	mla	r3, r2, r3, r1
 801665a:	3b30      	subs	r3, #48	; 0x30
 801665c:	9343      	str	r3, [sp, #268]	; 0x10c
 801665e:	e7d3      	b.n	8016608 <__ssvfiscanf_r+0x94>
 8016660:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016664:	2a20      	cmp	r2, #32
 8016666:	d8ef      	bhi.n	8016648 <__ssvfiscanf_r+0xd4>
 8016668:	a101      	add	r1, pc, #4	; (adr r1, 8016670 <__ssvfiscanf_r+0xfc>)
 801666a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801666e:	bf00      	nop
 8016670:	08016743 	.word	0x08016743
 8016674:	08016649 	.word	0x08016649
 8016678:	08016649 	.word	0x08016649
 801667c:	080167a1 	.word	0x080167a1
 8016680:	08016649 	.word	0x08016649
 8016684:	08016649 	.word	0x08016649
 8016688:	08016649 	.word	0x08016649
 801668c:	08016649 	.word	0x08016649
 8016690:	08016649 	.word	0x08016649
 8016694:	08016649 	.word	0x08016649
 8016698:	08016649 	.word	0x08016649
 801669c:	080167b7 	.word	0x080167b7
 80166a0:	0801678d 	.word	0x0801678d
 80166a4:	080166fb 	.word	0x080166fb
 80166a8:	080166fb 	.word	0x080166fb
 80166ac:	080166fb 	.word	0x080166fb
 80166b0:	08016649 	.word	0x08016649
 80166b4:	08016791 	.word	0x08016791
 80166b8:	08016649 	.word	0x08016649
 80166bc:	08016649 	.word	0x08016649
 80166c0:	08016649 	.word	0x08016649
 80166c4:	08016649 	.word	0x08016649
 80166c8:	080167c7 	.word	0x080167c7
 80166cc:	08016799 	.word	0x08016799
 80166d0:	0801673b 	.word	0x0801673b
 80166d4:	08016649 	.word	0x08016649
 80166d8:	08016649 	.word	0x08016649
 80166dc:	080167c3 	.word	0x080167c3
 80166e0:	08016649 	.word	0x08016649
 80166e4:	0801678d 	.word	0x0801678d
 80166e8:	08016649 	.word	0x08016649
 80166ec:	08016649 	.word	0x08016649
 80166f0:	08016743 	.word	0x08016743
 80166f4:	3b45      	subs	r3, #69	; 0x45
 80166f6:	2b02      	cmp	r3, #2
 80166f8:	d8a6      	bhi.n	8016648 <__ssvfiscanf_r+0xd4>
 80166fa:	2305      	movs	r3, #5
 80166fc:	e02b      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 80166fe:	6863      	ldr	r3, [r4, #4]
 8016700:	2b00      	cmp	r3, #0
 8016702:	dd0d      	ble.n	8016720 <__ssvfiscanf_r+0x1ac>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	781a      	ldrb	r2, [r3, #0]
 8016708:	4552      	cmp	r2, sl
 801670a:	f040 80a1 	bne.w	8016850 <__ssvfiscanf_r+0x2dc>
 801670e:	3301      	adds	r3, #1
 8016710:	6862      	ldr	r2, [r4, #4]
 8016712:	6023      	str	r3, [r4, #0]
 8016714:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016716:	3a01      	subs	r2, #1
 8016718:	3301      	adds	r3, #1
 801671a:	6062      	str	r2, [r4, #4]
 801671c:	9345      	str	r3, [sp, #276]	; 0x114
 801671e:	e752      	b.n	80165c6 <__ssvfiscanf_r+0x52>
 8016720:	4621      	mov	r1, r4
 8016722:	4630      	mov	r0, r6
 8016724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016726:	4798      	blx	r3
 8016728:	2800      	cmp	r0, #0
 801672a:	d0eb      	beq.n	8016704 <__ssvfiscanf_r+0x190>
 801672c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801672e:	2800      	cmp	r0, #0
 8016730:	f040 8084 	bne.w	801683c <__ssvfiscanf_r+0x2c8>
 8016734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016738:	e086      	b.n	8016848 <__ssvfiscanf_r+0x2d4>
 801673a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801673c:	f042 0220 	orr.w	r2, r2, #32
 8016740:	9241      	str	r2, [sp, #260]	; 0x104
 8016742:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016748:	9241      	str	r2, [sp, #260]	; 0x104
 801674a:	2210      	movs	r2, #16
 801674c:	2b6f      	cmp	r3, #111	; 0x6f
 801674e:	bf34      	ite	cc
 8016750:	2303      	movcc	r3, #3
 8016752:	2304      	movcs	r3, #4
 8016754:	9242      	str	r2, [sp, #264]	; 0x108
 8016756:	9347      	str	r3, [sp, #284]	; 0x11c
 8016758:	6863      	ldr	r3, [r4, #4]
 801675a:	2b00      	cmp	r3, #0
 801675c:	dd41      	ble.n	80167e2 <__ssvfiscanf_r+0x26e>
 801675e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016760:	0659      	lsls	r1, r3, #25
 8016762:	d404      	bmi.n	801676e <__ssvfiscanf_r+0x1fa>
 8016764:	6823      	ldr	r3, [r4, #0]
 8016766:	781a      	ldrb	r2, [r3, #0]
 8016768:	5cba      	ldrb	r2, [r7, r2]
 801676a:	0712      	lsls	r2, r2, #28
 801676c:	d440      	bmi.n	80167f0 <__ssvfiscanf_r+0x27c>
 801676e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016770:	2b02      	cmp	r3, #2
 8016772:	dc4f      	bgt.n	8016814 <__ssvfiscanf_r+0x2a0>
 8016774:	466b      	mov	r3, sp
 8016776:	4622      	mov	r2, r4
 8016778:	4630      	mov	r0, r6
 801677a:	a941      	add	r1, sp, #260	; 0x104
 801677c:	f000 f874 	bl	8016868 <_scanf_chars>
 8016780:	2801      	cmp	r0, #1
 8016782:	d065      	beq.n	8016850 <__ssvfiscanf_r+0x2dc>
 8016784:	2802      	cmp	r0, #2
 8016786:	f47f af1e 	bne.w	80165c6 <__ssvfiscanf_r+0x52>
 801678a:	e7cf      	b.n	801672c <__ssvfiscanf_r+0x1b8>
 801678c:	220a      	movs	r2, #10
 801678e:	e7dd      	b.n	801674c <__ssvfiscanf_r+0x1d8>
 8016790:	2300      	movs	r3, #0
 8016792:	9342      	str	r3, [sp, #264]	; 0x108
 8016794:	2303      	movs	r3, #3
 8016796:	e7de      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 8016798:	2308      	movs	r3, #8
 801679a:	9342      	str	r3, [sp, #264]	; 0x108
 801679c:	2304      	movs	r3, #4
 801679e:	e7da      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 80167a0:	4629      	mov	r1, r5
 80167a2:	4640      	mov	r0, r8
 80167a4:	f000 f9c2 	bl	8016b2c <__sccl>
 80167a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167aa:	4605      	mov	r5, r0
 80167ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167b0:	9341      	str	r3, [sp, #260]	; 0x104
 80167b2:	2301      	movs	r3, #1
 80167b4:	e7cf      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 80167b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167bc:	9341      	str	r3, [sp, #260]	; 0x104
 80167be:	2300      	movs	r3, #0
 80167c0:	e7c9      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 80167c2:	2302      	movs	r3, #2
 80167c4:	e7c7      	b.n	8016756 <__ssvfiscanf_r+0x1e2>
 80167c6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80167c8:	06c3      	lsls	r3, r0, #27
 80167ca:	f53f aefc 	bmi.w	80165c6 <__ssvfiscanf_r+0x52>
 80167ce:	9b00      	ldr	r3, [sp, #0]
 80167d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80167d2:	1d19      	adds	r1, r3, #4
 80167d4:	9100      	str	r1, [sp, #0]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	07c0      	lsls	r0, r0, #31
 80167da:	bf4c      	ite	mi
 80167dc:	801a      	strhmi	r2, [r3, #0]
 80167de:	601a      	strpl	r2, [r3, #0]
 80167e0:	e6f1      	b.n	80165c6 <__ssvfiscanf_r+0x52>
 80167e2:	4621      	mov	r1, r4
 80167e4:	4630      	mov	r0, r6
 80167e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167e8:	4798      	blx	r3
 80167ea:	2800      	cmp	r0, #0
 80167ec:	d0b7      	beq.n	801675e <__ssvfiscanf_r+0x1ea>
 80167ee:	e79d      	b.n	801672c <__ssvfiscanf_r+0x1b8>
 80167f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80167f2:	3201      	adds	r2, #1
 80167f4:	9245      	str	r2, [sp, #276]	; 0x114
 80167f6:	6862      	ldr	r2, [r4, #4]
 80167f8:	3a01      	subs	r2, #1
 80167fa:	2a00      	cmp	r2, #0
 80167fc:	6062      	str	r2, [r4, #4]
 80167fe:	dd02      	ble.n	8016806 <__ssvfiscanf_r+0x292>
 8016800:	3301      	adds	r3, #1
 8016802:	6023      	str	r3, [r4, #0]
 8016804:	e7ae      	b.n	8016764 <__ssvfiscanf_r+0x1f0>
 8016806:	4621      	mov	r1, r4
 8016808:	4630      	mov	r0, r6
 801680a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801680c:	4798      	blx	r3
 801680e:	2800      	cmp	r0, #0
 8016810:	d0a8      	beq.n	8016764 <__ssvfiscanf_r+0x1f0>
 8016812:	e78b      	b.n	801672c <__ssvfiscanf_r+0x1b8>
 8016814:	2b04      	cmp	r3, #4
 8016816:	dc06      	bgt.n	8016826 <__ssvfiscanf_r+0x2b2>
 8016818:	466b      	mov	r3, sp
 801681a:	4622      	mov	r2, r4
 801681c:	4630      	mov	r0, r6
 801681e:	a941      	add	r1, sp, #260	; 0x104
 8016820:	f000 f87a 	bl	8016918 <_scanf_i>
 8016824:	e7ac      	b.n	8016780 <__ssvfiscanf_r+0x20c>
 8016826:	4b0f      	ldr	r3, [pc, #60]	; (8016864 <__ssvfiscanf_r+0x2f0>)
 8016828:	2b00      	cmp	r3, #0
 801682a:	f43f aecc 	beq.w	80165c6 <__ssvfiscanf_r+0x52>
 801682e:	466b      	mov	r3, sp
 8016830:	4622      	mov	r2, r4
 8016832:	4630      	mov	r0, r6
 8016834:	a941      	add	r1, sp, #260	; 0x104
 8016836:	f7fc fc37 	bl	80130a8 <_scanf_float>
 801683a:	e7a1      	b.n	8016780 <__ssvfiscanf_r+0x20c>
 801683c:	89a3      	ldrh	r3, [r4, #12]
 801683e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016842:	bf18      	it	ne
 8016844:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8016848:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016850:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016852:	e7f9      	b.n	8016848 <__ssvfiscanf_r+0x2d4>
 8016854:	080164c1 	.word	0x080164c1
 8016858:	0801653b 	.word	0x0801653b
 801685c:	08017c01 	.word	0x08017c01
 8016860:	08017f7a 	.word	0x08017f7a
 8016864:	080130a9 	.word	0x080130a9

08016868 <_scanf_chars>:
 8016868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801686c:	4615      	mov	r5, r2
 801686e:	688a      	ldr	r2, [r1, #8]
 8016870:	4680      	mov	r8, r0
 8016872:	460c      	mov	r4, r1
 8016874:	b932      	cbnz	r2, 8016884 <_scanf_chars+0x1c>
 8016876:	698a      	ldr	r2, [r1, #24]
 8016878:	2a00      	cmp	r2, #0
 801687a:	bf0c      	ite	eq
 801687c:	2201      	moveq	r2, #1
 801687e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8016882:	608a      	str	r2, [r1, #8]
 8016884:	2700      	movs	r7, #0
 8016886:	6822      	ldr	r2, [r4, #0]
 8016888:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8016914 <_scanf_chars+0xac>
 801688c:	06d1      	lsls	r1, r2, #27
 801688e:	bf5f      	itttt	pl
 8016890:	681a      	ldrpl	r2, [r3, #0]
 8016892:	1d11      	addpl	r1, r2, #4
 8016894:	6019      	strpl	r1, [r3, #0]
 8016896:	6816      	ldrpl	r6, [r2, #0]
 8016898:	69a0      	ldr	r0, [r4, #24]
 801689a:	b188      	cbz	r0, 80168c0 <_scanf_chars+0x58>
 801689c:	2801      	cmp	r0, #1
 801689e:	d107      	bne.n	80168b0 <_scanf_chars+0x48>
 80168a0:	682b      	ldr	r3, [r5, #0]
 80168a2:	781a      	ldrb	r2, [r3, #0]
 80168a4:	6963      	ldr	r3, [r4, #20]
 80168a6:	5c9b      	ldrb	r3, [r3, r2]
 80168a8:	b953      	cbnz	r3, 80168c0 <_scanf_chars+0x58>
 80168aa:	bb27      	cbnz	r7, 80168f6 <_scanf_chars+0x8e>
 80168ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168b0:	2802      	cmp	r0, #2
 80168b2:	d120      	bne.n	80168f6 <_scanf_chars+0x8e>
 80168b4:	682b      	ldr	r3, [r5, #0]
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80168bc:	071b      	lsls	r3, r3, #28
 80168be:	d41a      	bmi.n	80168f6 <_scanf_chars+0x8e>
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	3701      	adds	r7, #1
 80168c4:	06da      	lsls	r2, r3, #27
 80168c6:	bf5e      	ittt	pl
 80168c8:	682b      	ldrpl	r3, [r5, #0]
 80168ca:	781b      	ldrbpl	r3, [r3, #0]
 80168cc:	f806 3b01 	strbpl.w	r3, [r6], #1
 80168d0:	682a      	ldr	r2, [r5, #0]
 80168d2:	686b      	ldr	r3, [r5, #4]
 80168d4:	3201      	adds	r2, #1
 80168d6:	602a      	str	r2, [r5, #0]
 80168d8:	68a2      	ldr	r2, [r4, #8]
 80168da:	3b01      	subs	r3, #1
 80168dc:	3a01      	subs	r2, #1
 80168de:	606b      	str	r3, [r5, #4]
 80168e0:	60a2      	str	r2, [r4, #8]
 80168e2:	b142      	cbz	r2, 80168f6 <_scanf_chars+0x8e>
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dcd7      	bgt.n	8016898 <_scanf_chars+0x30>
 80168e8:	4629      	mov	r1, r5
 80168ea:	4640      	mov	r0, r8
 80168ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168f0:	4798      	blx	r3
 80168f2:	2800      	cmp	r0, #0
 80168f4:	d0d0      	beq.n	8016898 <_scanf_chars+0x30>
 80168f6:	6823      	ldr	r3, [r4, #0]
 80168f8:	f013 0310 	ands.w	r3, r3, #16
 80168fc:	d105      	bne.n	801690a <_scanf_chars+0xa2>
 80168fe:	68e2      	ldr	r2, [r4, #12]
 8016900:	3201      	adds	r2, #1
 8016902:	60e2      	str	r2, [r4, #12]
 8016904:	69a2      	ldr	r2, [r4, #24]
 8016906:	b102      	cbz	r2, 801690a <_scanf_chars+0xa2>
 8016908:	7033      	strb	r3, [r6, #0]
 801690a:	6923      	ldr	r3, [r4, #16]
 801690c:	2000      	movs	r0, #0
 801690e:	441f      	add	r7, r3
 8016910:	6127      	str	r7, [r4, #16]
 8016912:	e7cb      	b.n	80168ac <_scanf_chars+0x44>
 8016914:	08017c01 	.word	0x08017c01

08016918 <_scanf_i>:
 8016918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691c:	460c      	mov	r4, r1
 801691e:	4698      	mov	r8, r3
 8016920:	4b72      	ldr	r3, [pc, #456]	; (8016aec <_scanf_i+0x1d4>)
 8016922:	b087      	sub	sp, #28
 8016924:	4682      	mov	sl, r0
 8016926:	4616      	mov	r6, r2
 8016928:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801692c:	ab03      	add	r3, sp, #12
 801692e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016932:	4b6f      	ldr	r3, [pc, #444]	; (8016af0 <_scanf_i+0x1d8>)
 8016934:	69a1      	ldr	r1, [r4, #24]
 8016936:	4a6f      	ldr	r2, [pc, #444]	; (8016af4 <_scanf_i+0x1dc>)
 8016938:	4627      	mov	r7, r4
 801693a:	2903      	cmp	r1, #3
 801693c:	bf18      	it	ne
 801693e:	461a      	movne	r2, r3
 8016940:	68a3      	ldr	r3, [r4, #8]
 8016942:	9201      	str	r2, [sp, #4]
 8016944:	1e5a      	subs	r2, r3, #1
 8016946:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801694a:	bf81      	itttt	hi
 801694c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016950:	eb03 0905 	addhi.w	r9, r3, r5
 8016954:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016958:	60a3      	strhi	r3, [r4, #8]
 801695a:	f857 3b1c 	ldr.w	r3, [r7], #28
 801695e:	bf98      	it	ls
 8016960:	f04f 0900 	movls.w	r9, #0
 8016964:	463d      	mov	r5, r7
 8016966:	f04f 0b00 	mov.w	fp, #0
 801696a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	6831      	ldr	r1, [r6, #0]
 8016972:	ab03      	add	r3, sp, #12
 8016974:	2202      	movs	r2, #2
 8016976:	7809      	ldrb	r1, [r1, #0]
 8016978:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801697c:	f7fb fe42 	bl	8012604 <memchr>
 8016980:	b328      	cbz	r0, 80169ce <_scanf_i+0xb6>
 8016982:	f1bb 0f01 	cmp.w	fp, #1
 8016986:	d159      	bne.n	8016a3c <_scanf_i+0x124>
 8016988:	6862      	ldr	r2, [r4, #4]
 801698a:	b92a      	cbnz	r2, 8016998 <_scanf_i+0x80>
 801698c:	2308      	movs	r3, #8
 801698e:	6822      	ldr	r2, [r4, #0]
 8016990:	6063      	str	r3, [r4, #4]
 8016992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016996:	6022      	str	r2, [r4, #0]
 8016998:	6822      	ldr	r2, [r4, #0]
 801699a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801699e:	6022      	str	r2, [r4, #0]
 80169a0:	68a2      	ldr	r2, [r4, #8]
 80169a2:	1e51      	subs	r1, r2, #1
 80169a4:	60a1      	str	r1, [r4, #8]
 80169a6:	b192      	cbz	r2, 80169ce <_scanf_i+0xb6>
 80169a8:	6832      	ldr	r2, [r6, #0]
 80169aa:	1c51      	adds	r1, r2, #1
 80169ac:	6031      	str	r1, [r6, #0]
 80169ae:	7812      	ldrb	r2, [r2, #0]
 80169b0:	f805 2b01 	strb.w	r2, [r5], #1
 80169b4:	6872      	ldr	r2, [r6, #4]
 80169b6:	3a01      	subs	r2, #1
 80169b8:	2a00      	cmp	r2, #0
 80169ba:	6072      	str	r2, [r6, #4]
 80169bc:	dc07      	bgt.n	80169ce <_scanf_i+0xb6>
 80169be:	4631      	mov	r1, r6
 80169c0:	4650      	mov	r0, sl
 80169c2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80169c6:	4790      	blx	r2
 80169c8:	2800      	cmp	r0, #0
 80169ca:	f040 8085 	bne.w	8016ad8 <_scanf_i+0x1c0>
 80169ce:	f10b 0b01 	add.w	fp, fp, #1
 80169d2:	f1bb 0f03 	cmp.w	fp, #3
 80169d6:	d1cb      	bne.n	8016970 <_scanf_i+0x58>
 80169d8:	6863      	ldr	r3, [r4, #4]
 80169da:	b90b      	cbnz	r3, 80169e0 <_scanf_i+0xc8>
 80169dc:	230a      	movs	r3, #10
 80169de:	6063      	str	r3, [r4, #4]
 80169e0:	6863      	ldr	r3, [r4, #4]
 80169e2:	4945      	ldr	r1, [pc, #276]	; (8016af8 <_scanf_i+0x1e0>)
 80169e4:	6960      	ldr	r0, [r4, #20]
 80169e6:	1ac9      	subs	r1, r1, r3
 80169e8:	f000 f8a0 	bl	8016b2c <__sccl>
 80169ec:	f04f 0b00 	mov.w	fp, #0
 80169f0:	68a3      	ldr	r3, [r4, #8]
 80169f2:	6822      	ldr	r2, [r4, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d03d      	beq.n	8016a74 <_scanf_i+0x15c>
 80169f8:	6831      	ldr	r1, [r6, #0]
 80169fa:	6960      	ldr	r0, [r4, #20]
 80169fc:	f891 c000 	ldrb.w	ip, [r1]
 8016a00:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d035      	beq.n	8016a74 <_scanf_i+0x15c>
 8016a08:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016a0c:	d124      	bne.n	8016a58 <_scanf_i+0x140>
 8016a0e:	0510      	lsls	r0, r2, #20
 8016a10:	d522      	bpl.n	8016a58 <_scanf_i+0x140>
 8016a12:	f10b 0b01 	add.w	fp, fp, #1
 8016a16:	f1b9 0f00 	cmp.w	r9, #0
 8016a1a:	d003      	beq.n	8016a24 <_scanf_i+0x10c>
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8016a22:	60a3      	str	r3, [r4, #8]
 8016a24:	6873      	ldr	r3, [r6, #4]
 8016a26:	3b01      	subs	r3, #1
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	6073      	str	r3, [r6, #4]
 8016a2c:	dd1b      	ble.n	8016a66 <_scanf_i+0x14e>
 8016a2e:	6833      	ldr	r3, [r6, #0]
 8016a30:	3301      	adds	r3, #1
 8016a32:	6033      	str	r3, [r6, #0]
 8016a34:	68a3      	ldr	r3, [r4, #8]
 8016a36:	3b01      	subs	r3, #1
 8016a38:	60a3      	str	r3, [r4, #8]
 8016a3a:	e7d9      	b.n	80169f0 <_scanf_i+0xd8>
 8016a3c:	f1bb 0f02 	cmp.w	fp, #2
 8016a40:	d1ae      	bne.n	80169a0 <_scanf_i+0x88>
 8016a42:	6822      	ldr	r2, [r4, #0]
 8016a44:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016a48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016a4c:	d1bf      	bne.n	80169ce <_scanf_i+0xb6>
 8016a4e:	2310      	movs	r3, #16
 8016a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016a54:	6063      	str	r3, [r4, #4]
 8016a56:	e7a2      	b.n	801699e <_scanf_i+0x86>
 8016a58:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016a5c:	6022      	str	r2, [r4, #0]
 8016a5e:	780b      	ldrb	r3, [r1, #0]
 8016a60:	f805 3b01 	strb.w	r3, [r5], #1
 8016a64:	e7de      	b.n	8016a24 <_scanf_i+0x10c>
 8016a66:	4631      	mov	r1, r6
 8016a68:	4650      	mov	r0, sl
 8016a6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a6e:	4798      	blx	r3
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d0df      	beq.n	8016a34 <_scanf_i+0x11c>
 8016a74:	6823      	ldr	r3, [r4, #0]
 8016a76:	05d9      	lsls	r1, r3, #23
 8016a78:	d50d      	bpl.n	8016a96 <_scanf_i+0x17e>
 8016a7a:	42bd      	cmp	r5, r7
 8016a7c:	d909      	bls.n	8016a92 <_scanf_i+0x17a>
 8016a7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016a82:	4632      	mov	r2, r6
 8016a84:	4650      	mov	r0, sl
 8016a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a8a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8016a8e:	4798      	blx	r3
 8016a90:	464d      	mov	r5, r9
 8016a92:	42bd      	cmp	r5, r7
 8016a94:	d028      	beq.n	8016ae8 <_scanf_i+0x1d0>
 8016a96:	6822      	ldr	r2, [r4, #0]
 8016a98:	f012 0210 	ands.w	r2, r2, #16
 8016a9c:	d113      	bne.n	8016ac6 <_scanf_i+0x1ae>
 8016a9e:	702a      	strb	r2, [r5, #0]
 8016aa0:	4639      	mov	r1, r7
 8016aa2:	6863      	ldr	r3, [r4, #4]
 8016aa4:	4650      	mov	r0, sl
 8016aa6:	9e01      	ldr	r6, [sp, #4]
 8016aa8:	47b0      	blx	r6
 8016aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8016aae:	6821      	ldr	r1, [r4, #0]
 8016ab0:	1d1a      	adds	r2, r3, #4
 8016ab2:	f8c8 2000 	str.w	r2, [r8]
 8016ab6:	f011 0f20 	tst.w	r1, #32
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	d00f      	beq.n	8016ade <_scanf_i+0x1c6>
 8016abe:	6018      	str	r0, [r3, #0]
 8016ac0:	68e3      	ldr	r3, [r4, #12]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	60e3      	str	r3, [r4, #12]
 8016ac6:	2000      	movs	r0, #0
 8016ac8:	1bed      	subs	r5, r5, r7
 8016aca:	44ab      	add	fp, r5
 8016acc:	6925      	ldr	r5, [r4, #16]
 8016ace:	445d      	add	r5, fp
 8016ad0:	6125      	str	r5, [r4, #16]
 8016ad2:	b007      	add	sp, #28
 8016ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ad8:	f04f 0b00 	mov.w	fp, #0
 8016adc:	e7ca      	b.n	8016a74 <_scanf_i+0x15c>
 8016ade:	07ca      	lsls	r2, r1, #31
 8016ae0:	bf4c      	ite	mi
 8016ae2:	8018      	strhmi	r0, [r3, #0]
 8016ae4:	6018      	strpl	r0, [r3, #0]
 8016ae6:	e7eb      	b.n	8016ac0 <_scanf_i+0x1a8>
 8016ae8:	2001      	movs	r0, #1
 8016aea:	e7f2      	b.n	8016ad2 <_scanf_i+0x1ba>
 8016aec:	080178e8 	.word	0x080178e8
 8016af0:	08016cbd 	.word	0x08016cbd
 8016af4:	08014421 	.word	0x08014421
 8016af8:	08017f9e 	.word	0x08017f9e

08016afc <_read_r>:
 8016afc:	b538      	push	{r3, r4, r5, lr}
 8016afe:	4604      	mov	r4, r0
 8016b00:	4608      	mov	r0, r1
 8016b02:	4611      	mov	r1, r2
 8016b04:	2200      	movs	r2, #0
 8016b06:	4d05      	ldr	r5, [pc, #20]	; (8016b1c <_read_r+0x20>)
 8016b08:	602a      	str	r2, [r5, #0]
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	f7ed fb8d 	bl	800422a <_read>
 8016b10:	1c43      	adds	r3, r0, #1
 8016b12:	d102      	bne.n	8016b1a <_read_r+0x1e>
 8016b14:	682b      	ldr	r3, [r5, #0]
 8016b16:	b103      	cbz	r3, 8016b1a <_read_r+0x1e>
 8016b18:	6023      	str	r3, [r4, #0]
 8016b1a:	bd38      	pop	{r3, r4, r5, pc}
 8016b1c:	20001dec 	.word	0x20001dec

08016b20 <nan>:
 8016b20:	2000      	movs	r0, #0
 8016b22:	4901      	ldr	r1, [pc, #4]	; (8016b28 <nan+0x8>)
 8016b24:	4770      	bx	lr
 8016b26:	bf00      	nop
 8016b28:	7ff80000 	.word	0x7ff80000

08016b2c <__sccl>:
 8016b2c:	b570      	push	{r4, r5, r6, lr}
 8016b2e:	780b      	ldrb	r3, [r1, #0]
 8016b30:	4604      	mov	r4, r0
 8016b32:	2b5e      	cmp	r3, #94	; 0x5e
 8016b34:	bf13      	iteet	ne
 8016b36:	2200      	movne	r2, #0
 8016b38:	2201      	moveq	r2, #1
 8016b3a:	784b      	ldrbeq	r3, [r1, #1]
 8016b3c:	1c48      	addne	r0, r1, #1
 8016b3e:	bf08      	it	eq
 8016b40:	1c88      	addeq	r0, r1, #2
 8016b42:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016b46:	1e61      	subs	r1, r4, #1
 8016b48:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016b4c:	42a9      	cmp	r1, r5
 8016b4e:	d1fb      	bne.n	8016b48 <__sccl+0x1c>
 8016b50:	b90b      	cbnz	r3, 8016b56 <__sccl+0x2a>
 8016b52:	3801      	subs	r0, #1
 8016b54:	bd70      	pop	{r4, r5, r6, pc}
 8016b56:	f082 0101 	eor.w	r1, r2, #1
 8016b5a:	54e1      	strb	r1, [r4, r3]
 8016b5c:	1c42      	adds	r2, r0, #1
 8016b5e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016b62:	4610      	mov	r0, r2
 8016b64:	2d2d      	cmp	r5, #45	; 0x2d
 8016b66:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8016b6a:	d006      	beq.n	8016b7a <__sccl+0x4e>
 8016b6c:	2d5d      	cmp	r5, #93	; 0x5d
 8016b6e:	d0f1      	beq.n	8016b54 <__sccl+0x28>
 8016b70:	b90d      	cbnz	r5, 8016b76 <__sccl+0x4a>
 8016b72:	4630      	mov	r0, r6
 8016b74:	e7ee      	b.n	8016b54 <__sccl+0x28>
 8016b76:	462b      	mov	r3, r5
 8016b78:	e7ef      	b.n	8016b5a <__sccl+0x2e>
 8016b7a:	7816      	ldrb	r6, [r2, #0]
 8016b7c:	2e5d      	cmp	r6, #93	; 0x5d
 8016b7e:	d0fa      	beq.n	8016b76 <__sccl+0x4a>
 8016b80:	42b3      	cmp	r3, r6
 8016b82:	dcf8      	bgt.n	8016b76 <__sccl+0x4a>
 8016b84:	4618      	mov	r0, r3
 8016b86:	3001      	adds	r0, #1
 8016b88:	4286      	cmp	r6, r0
 8016b8a:	5421      	strb	r1, [r4, r0]
 8016b8c:	dcfb      	bgt.n	8016b86 <__sccl+0x5a>
 8016b8e:	43d8      	mvns	r0, r3
 8016b90:	4430      	add	r0, r6
 8016b92:	42b3      	cmp	r3, r6
 8016b94:	bfa8      	it	ge
 8016b96:	2000      	movge	r0, #0
 8016b98:	1c5d      	adds	r5, r3, #1
 8016b9a:	182b      	adds	r3, r5, r0
 8016b9c:	3202      	adds	r2, #2
 8016b9e:	e7de      	b.n	8016b5e <__sccl+0x32>

08016ba0 <strncmp>:
 8016ba0:	b510      	push	{r4, lr}
 8016ba2:	b16a      	cbz	r2, 8016bc0 <strncmp+0x20>
 8016ba4:	3901      	subs	r1, #1
 8016ba6:	1884      	adds	r4, r0, r2
 8016ba8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016bac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	d103      	bne.n	8016bbc <strncmp+0x1c>
 8016bb4:	42a0      	cmp	r0, r4
 8016bb6:	d001      	beq.n	8016bbc <strncmp+0x1c>
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d1f5      	bne.n	8016ba8 <strncmp+0x8>
 8016bbc:	1a98      	subs	r0, r3, r2
 8016bbe:	bd10      	pop	{r4, pc}
 8016bc0:	4610      	mov	r0, r2
 8016bc2:	e7fc      	b.n	8016bbe <strncmp+0x1e>

08016bc4 <_strtoul_l.isra.0>:
 8016bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bc8:	468c      	mov	ip, r1
 8016bca:	4686      	mov	lr, r0
 8016bcc:	4e3a      	ldr	r6, [pc, #232]	; (8016cb8 <_strtoul_l.isra.0+0xf4>)
 8016bce:	4660      	mov	r0, ip
 8016bd0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016bd4:	5da5      	ldrb	r5, [r4, r6]
 8016bd6:	f015 0508 	ands.w	r5, r5, #8
 8016bda:	d1f8      	bne.n	8016bce <_strtoul_l.isra.0+0xa>
 8016bdc:	2c2d      	cmp	r4, #45	; 0x2d
 8016bde:	d134      	bne.n	8016c4a <_strtoul_l.isra.0+0x86>
 8016be0:	f04f 0801 	mov.w	r8, #1
 8016be4:	f89c 4000 	ldrb.w	r4, [ip]
 8016be8:	f100 0c02 	add.w	ip, r0, #2
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d05e      	beq.n	8016cae <_strtoul_l.isra.0+0xea>
 8016bf0:	2b10      	cmp	r3, #16
 8016bf2:	d10c      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016bf4:	2c30      	cmp	r4, #48	; 0x30
 8016bf6:	d10a      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016bf8:	f89c 0000 	ldrb.w	r0, [ip]
 8016bfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016c00:	2858      	cmp	r0, #88	; 0x58
 8016c02:	d14f      	bne.n	8016ca4 <_strtoul_l.isra.0+0xe0>
 8016c04:	2310      	movs	r3, #16
 8016c06:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8016c0a:	f10c 0c02 	add.w	ip, ip, #2
 8016c0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016c12:	fbb7 f7f3 	udiv	r7, r7, r3
 8016c16:	2500      	movs	r5, #0
 8016c18:	fb03 f907 	mul.w	r9, r3, r7
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	ea6f 0909 	mvn.w	r9, r9
 8016c22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8016c26:	2e09      	cmp	r6, #9
 8016c28:	d818      	bhi.n	8016c5c <_strtoul_l.isra.0+0x98>
 8016c2a:	4634      	mov	r4, r6
 8016c2c:	42a3      	cmp	r3, r4
 8016c2e:	dd24      	ble.n	8016c7a <_strtoul_l.isra.0+0xb6>
 8016c30:	2d00      	cmp	r5, #0
 8016c32:	db1f      	blt.n	8016c74 <_strtoul_l.isra.0+0xb0>
 8016c34:	4287      	cmp	r7, r0
 8016c36:	d31d      	bcc.n	8016c74 <_strtoul_l.isra.0+0xb0>
 8016c38:	d101      	bne.n	8016c3e <_strtoul_l.isra.0+0x7a>
 8016c3a:	45a1      	cmp	r9, r4
 8016c3c:	db1a      	blt.n	8016c74 <_strtoul_l.isra.0+0xb0>
 8016c3e:	2501      	movs	r5, #1
 8016c40:	fb00 4003 	mla	r0, r0, r3, r4
 8016c44:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016c48:	e7eb      	b.n	8016c22 <_strtoul_l.isra.0+0x5e>
 8016c4a:	2c2b      	cmp	r4, #43	; 0x2b
 8016c4c:	bf08      	it	eq
 8016c4e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8016c52:	46a8      	mov	r8, r5
 8016c54:	bf08      	it	eq
 8016c56:	f100 0c02 	addeq.w	ip, r0, #2
 8016c5a:	e7c7      	b.n	8016bec <_strtoul_l.isra.0+0x28>
 8016c5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016c60:	2e19      	cmp	r6, #25
 8016c62:	d801      	bhi.n	8016c68 <_strtoul_l.isra.0+0xa4>
 8016c64:	3c37      	subs	r4, #55	; 0x37
 8016c66:	e7e1      	b.n	8016c2c <_strtoul_l.isra.0+0x68>
 8016c68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8016c6c:	2e19      	cmp	r6, #25
 8016c6e:	d804      	bhi.n	8016c7a <_strtoul_l.isra.0+0xb6>
 8016c70:	3c57      	subs	r4, #87	; 0x57
 8016c72:	e7db      	b.n	8016c2c <_strtoul_l.isra.0+0x68>
 8016c74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c78:	e7e4      	b.n	8016c44 <_strtoul_l.isra.0+0x80>
 8016c7a:	2d00      	cmp	r5, #0
 8016c7c:	da07      	bge.n	8016c8e <_strtoul_l.isra.0+0xca>
 8016c7e:	2322      	movs	r3, #34	; 0x22
 8016c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c84:	f8ce 3000 	str.w	r3, [lr]
 8016c88:	b942      	cbnz	r2, 8016c9c <_strtoul_l.isra.0+0xd8>
 8016c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c8e:	f1b8 0f00 	cmp.w	r8, #0
 8016c92:	d000      	beq.n	8016c96 <_strtoul_l.isra.0+0xd2>
 8016c94:	4240      	negs	r0, r0
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	d0f7      	beq.n	8016c8a <_strtoul_l.isra.0+0xc6>
 8016c9a:	b10d      	cbz	r5, 8016ca0 <_strtoul_l.isra.0+0xdc>
 8016c9c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8016ca0:	6011      	str	r1, [r2, #0]
 8016ca2:	e7f2      	b.n	8016c8a <_strtoul_l.isra.0+0xc6>
 8016ca4:	2430      	movs	r4, #48	; 0x30
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d1b1      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016caa:	2308      	movs	r3, #8
 8016cac:	e7af      	b.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016cae:	2c30      	cmp	r4, #48	; 0x30
 8016cb0:	d0a2      	beq.n	8016bf8 <_strtoul_l.isra.0+0x34>
 8016cb2:	230a      	movs	r3, #10
 8016cb4:	e7ab      	b.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016cb6:	bf00      	nop
 8016cb8:	08017c01 	.word	0x08017c01

08016cbc <_strtoul_r>:
 8016cbc:	f7ff bf82 	b.w	8016bc4 <_strtoul_l.isra.0>

08016cc0 <__submore>:
 8016cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ccc:	4299      	cmp	r1, r3
 8016cce:	d11b      	bne.n	8016d08 <__submore+0x48>
 8016cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016cd4:	f7fb fd2e 	bl	8012734 <_malloc_r>
 8016cd8:	b918      	cbnz	r0, 8016ce2 <__submore+0x22>
 8016cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ce6:	63a3      	str	r3, [r4, #56]	; 0x38
 8016ce8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016cec:	6360      	str	r0, [r4, #52]	; 0x34
 8016cee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016cf2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016cf6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016cfa:	7043      	strb	r3, [r0, #1]
 8016cfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d00:	7003      	strb	r3, [r0, #0]
 8016d02:	6020      	str	r0, [r4, #0]
 8016d04:	2000      	movs	r0, #0
 8016d06:	e7ea      	b.n	8016cde <__submore+0x1e>
 8016d08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016d0a:	0077      	lsls	r7, r6, #1
 8016d0c:	463a      	mov	r2, r7
 8016d0e:	f000 fa04 	bl	801711a <_realloc_r>
 8016d12:	4605      	mov	r5, r0
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d0e0      	beq.n	8016cda <__submore+0x1a>
 8016d18:	eb00 0806 	add.w	r8, r0, r6
 8016d1c:	4601      	mov	r1, r0
 8016d1e:	4632      	mov	r2, r6
 8016d20:	4640      	mov	r0, r8
 8016d22:	f7fb fc7d 	bl	8012620 <memcpy>
 8016d26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016d2a:	f8c4 8000 	str.w	r8, [r4]
 8016d2e:	e7e9      	b.n	8016d04 <__submore+0x44>

08016d30 <__ascii_wctomb>:
 8016d30:	4603      	mov	r3, r0
 8016d32:	4608      	mov	r0, r1
 8016d34:	b141      	cbz	r1, 8016d48 <__ascii_wctomb+0x18>
 8016d36:	2aff      	cmp	r2, #255	; 0xff
 8016d38:	d904      	bls.n	8016d44 <__ascii_wctomb+0x14>
 8016d3a:	228a      	movs	r2, #138	; 0x8a
 8016d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d40:	601a      	str	r2, [r3, #0]
 8016d42:	4770      	bx	lr
 8016d44:	2001      	movs	r0, #1
 8016d46:	700a      	strb	r2, [r1, #0]
 8016d48:	4770      	bx	lr
	...

08016d4c <__assert_func>:
 8016d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d4e:	4614      	mov	r4, r2
 8016d50:	461a      	mov	r2, r3
 8016d52:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <__assert_func+0x2c>)
 8016d54:	4605      	mov	r5, r0
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	68d8      	ldr	r0, [r3, #12]
 8016d5a:	b14c      	cbz	r4, 8016d70 <__assert_func+0x24>
 8016d5c:	4b07      	ldr	r3, [pc, #28]	; (8016d7c <__assert_func+0x30>)
 8016d5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d62:	9100      	str	r1, [sp, #0]
 8016d64:	462b      	mov	r3, r5
 8016d66:	4906      	ldr	r1, [pc, #24]	; (8016d80 <__assert_func+0x34>)
 8016d68:	f000 f9a6 	bl	80170b8 <fiprintf>
 8016d6c:	f7fb fc00 	bl	8012570 <abort>
 8016d70:	4b04      	ldr	r3, [pc, #16]	; (8016d84 <__assert_func+0x38>)
 8016d72:	461c      	mov	r4, r3
 8016d74:	e7f3      	b.n	8016d5e <__assert_func+0x12>
 8016d76:	bf00      	nop
 8016d78:	2000022c 	.word	0x2000022c
 8016d7c:	08017fa0 	.word	0x08017fa0
 8016d80:	08017fad 	.word	0x08017fad
 8016d84:	08017fdb 	.word	0x08017fdb

08016d88 <__sflush_r>:
 8016d88:	898a      	ldrh	r2, [r1, #12]
 8016d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d8e:	4605      	mov	r5, r0
 8016d90:	0710      	lsls	r0, r2, #28
 8016d92:	460c      	mov	r4, r1
 8016d94:	d458      	bmi.n	8016e48 <__sflush_r+0xc0>
 8016d96:	684b      	ldr	r3, [r1, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	dc05      	bgt.n	8016da8 <__sflush_r+0x20>
 8016d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	dc02      	bgt.n	8016da8 <__sflush_r+0x20>
 8016da2:	2000      	movs	r0, #0
 8016da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016daa:	2e00      	cmp	r6, #0
 8016dac:	d0f9      	beq.n	8016da2 <__sflush_r+0x1a>
 8016dae:	2300      	movs	r3, #0
 8016db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016db4:	682f      	ldr	r7, [r5, #0]
 8016db6:	602b      	str	r3, [r5, #0]
 8016db8:	d032      	beq.n	8016e20 <__sflush_r+0x98>
 8016dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016dbc:	89a3      	ldrh	r3, [r4, #12]
 8016dbe:	075a      	lsls	r2, r3, #29
 8016dc0:	d505      	bpl.n	8016dce <__sflush_r+0x46>
 8016dc2:	6863      	ldr	r3, [r4, #4]
 8016dc4:	1ac0      	subs	r0, r0, r3
 8016dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016dc8:	b10b      	cbz	r3, 8016dce <__sflush_r+0x46>
 8016dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016dcc:	1ac0      	subs	r0, r0, r3
 8016dce:	2300      	movs	r3, #0
 8016dd0:	4602      	mov	r2, r0
 8016dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	6a21      	ldr	r1, [r4, #32]
 8016dd8:	47b0      	blx	r6
 8016dda:	1c43      	adds	r3, r0, #1
 8016ddc:	89a3      	ldrh	r3, [r4, #12]
 8016dde:	d106      	bne.n	8016dee <__sflush_r+0x66>
 8016de0:	6829      	ldr	r1, [r5, #0]
 8016de2:	291d      	cmp	r1, #29
 8016de4:	d82c      	bhi.n	8016e40 <__sflush_r+0xb8>
 8016de6:	4a2a      	ldr	r2, [pc, #168]	; (8016e90 <__sflush_r+0x108>)
 8016de8:	40ca      	lsrs	r2, r1
 8016dea:	07d6      	lsls	r6, r2, #31
 8016dec:	d528      	bpl.n	8016e40 <__sflush_r+0xb8>
 8016dee:	2200      	movs	r2, #0
 8016df0:	6062      	str	r2, [r4, #4]
 8016df2:	6922      	ldr	r2, [r4, #16]
 8016df4:	04d9      	lsls	r1, r3, #19
 8016df6:	6022      	str	r2, [r4, #0]
 8016df8:	d504      	bpl.n	8016e04 <__sflush_r+0x7c>
 8016dfa:	1c42      	adds	r2, r0, #1
 8016dfc:	d101      	bne.n	8016e02 <__sflush_r+0x7a>
 8016dfe:	682b      	ldr	r3, [r5, #0]
 8016e00:	b903      	cbnz	r3, 8016e04 <__sflush_r+0x7c>
 8016e02:	6560      	str	r0, [r4, #84]	; 0x54
 8016e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e06:	602f      	str	r7, [r5, #0]
 8016e08:	2900      	cmp	r1, #0
 8016e0a:	d0ca      	beq.n	8016da2 <__sflush_r+0x1a>
 8016e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e10:	4299      	cmp	r1, r3
 8016e12:	d002      	beq.n	8016e1a <__sflush_r+0x92>
 8016e14:	4628      	mov	r0, r5
 8016e16:	f7fb fc41 	bl	801269c <_free_r>
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e1e:	e7c1      	b.n	8016da4 <__sflush_r+0x1c>
 8016e20:	6a21      	ldr	r1, [r4, #32]
 8016e22:	2301      	movs	r3, #1
 8016e24:	4628      	mov	r0, r5
 8016e26:	47b0      	blx	r6
 8016e28:	1c41      	adds	r1, r0, #1
 8016e2a:	d1c7      	bne.n	8016dbc <__sflush_r+0x34>
 8016e2c:	682b      	ldr	r3, [r5, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d0c4      	beq.n	8016dbc <__sflush_r+0x34>
 8016e32:	2b1d      	cmp	r3, #29
 8016e34:	d001      	beq.n	8016e3a <__sflush_r+0xb2>
 8016e36:	2b16      	cmp	r3, #22
 8016e38:	d101      	bne.n	8016e3e <__sflush_r+0xb6>
 8016e3a:	602f      	str	r7, [r5, #0]
 8016e3c:	e7b1      	b.n	8016da2 <__sflush_r+0x1a>
 8016e3e:	89a3      	ldrh	r3, [r4, #12]
 8016e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e44:	81a3      	strh	r3, [r4, #12]
 8016e46:	e7ad      	b.n	8016da4 <__sflush_r+0x1c>
 8016e48:	690f      	ldr	r7, [r1, #16]
 8016e4a:	2f00      	cmp	r7, #0
 8016e4c:	d0a9      	beq.n	8016da2 <__sflush_r+0x1a>
 8016e4e:	0793      	lsls	r3, r2, #30
 8016e50:	bf18      	it	ne
 8016e52:	2300      	movne	r3, #0
 8016e54:	680e      	ldr	r6, [r1, #0]
 8016e56:	bf08      	it	eq
 8016e58:	694b      	ldreq	r3, [r1, #20]
 8016e5a:	eba6 0807 	sub.w	r8, r6, r7
 8016e5e:	600f      	str	r7, [r1, #0]
 8016e60:	608b      	str	r3, [r1, #8]
 8016e62:	f1b8 0f00 	cmp.w	r8, #0
 8016e66:	dd9c      	ble.n	8016da2 <__sflush_r+0x1a>
 8016e68:	4643      	mov	r3, r8
 8016e6a:	463a      	mov	r2, r7
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	6a21      	ldr	r1, [r4, #32]
 8016e70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e72:	47b0      	blx	r6
 8016e74:	2800      	cmp	r0, #0
 8016e76:	dc06      	bgt.n	8016e86 <__sflush_r+0xfe>
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e82:	81a3      	strh	r3, [r4, #12]
 8016e84:	e78e      	b.n	8016da4 <__sflush_r+0x1c>
 8016e86:	4407      	add	r7, r0
 8016e88:	eba8 0800 	sub.w	r8, r8, r0
 8016e8c:	e7e9      	b.n	8016e62 <__sflush_r+0xda>
 8016e8e:	bf00      	nop
 8016e90:	20400001 	.word	0x20400001

08016e94 <_fflush_r>:
 8016e94:	b538      	push	{r3, r4, r5, lr}
 8016e96:	690b      	ldr	r3, [r1, #16]
 8016e98:	4605      	mov	r5, r0
 8016e9a:	460c      	mov	r4, r1
 8016e9c:	b913      	cbnz	r3, 8016ea4 <_fflush_r+0x10>
 8016e9e:	2500      	movs	r5, #0
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	bd38      	pop	{r3, r4, r5, pc}
 8016ea4:	b118      	cbz	r0, 8016eae <_fflush_r+0x1a>
 8016ea6:	6983      	ldr	r3, [r0, #24]
 8016ea8:	b90b      	cbnz	r3, 8016eae <_fflush_r+0x1a>
 8016eaa:	f000 f887 	bl	8016fbc <__sinit>
 8016eae:	4b14      	ldr	r3, [pc, #80]	; (8016f00 <_fflush_r+0x6c>)
 8016eb0:	429c      	cmp	r4, r3
 8016eb2:	d11b      	bne.n	8016eec <_fflush_r+0x58>
 8016eb4:	686c      	ldr	r4, [r5, #4]
 8016eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d0ef      	beq.n	8016e9e <_fflush_r+0xa>
 8016ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016ec0:	07d0      	lsls	r0, r2, #31
 8016ec2:	d404      	bmi.n	8016ece <_fflush_r+0x3a>
 8016ec4:	0599      	lsls	r1, r3, #22
 8016ec6:	d402      	bmi.n	8016ece <_fflush_r+0x3a>
 8016ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016eca:	f7ed fb14 	bl	80044f6 <__retarget_lock_acquire_recursive>
 8016ece:	4628      	mov	r0, r5
 8016ed0:	4621      	mov	r1, r4
 8016ed2:	f7ff ff59 	bl	8016d88 <__sflush_r>
 8016ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ed8:	4605      	mov	r5, r0
 8016eda:	07da      	lsls	r2, r3, #31
 8016edc:	d4e0      	bmi.n	8016ea0 <_fflush_r+0xc>
 8016ede:	89a3      	ldrh	r3, [r4, #12]
 8016ee0:	059b      	lsls	r3, r3, #22
 8016ee2:	d4dd      	bmi.n	8016ea0 <_fflush_r+0xc>
 8016ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ee6:	f7ed fb1a 	bl	800451e <__retarget_lock_release_recursive>
 8016eea:	e7d9      	b.n	8016ea0 <_fflush_r+0xc>
 8016eec:	4b05      	ldr	r3, [pc, #20]	; (8016f04 <_fflush_r+0x70>)
 8016eee:	429c      	cmp	r4, r3
 8016ef0:	d101      	bne.n	8016ef6 <_fflush_r+0x62>
 8016ef2:	68ac      	ldr	r4, [r5, #8]
 8016ef4:	e7df      	b.n	8016eb6 <_fflush_r+0x22>
 8016ef6:	4b04      	ldr	r3, [pc, #16]	; (8016f08 <_fflush_r+0x74>)
 8016ef8:	429c      	cmp	r4, r3
 8016efa:	bf08      	it	eq
 8016efc:	68ec      	ldreq	r4, [r5, #12]
 8016efe:	e7da      	b.n	8016eb6 <_fflush_r+0x22>
 8016f00:	08017ffc 	.word	0x08017ffc
 8016f04:	0801801c 	.word	0x0801801c
 8016f08:	08017fdc 	.word	0x08017fdc

08016f0c <std>:
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	b510      	push	{r4, lr}
 8016f10:	4604      	mov	r4, r0
 8016f12:	e9c0 3300 	strd	r3, r3, [r0]
 8016f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f1a:	6083      	str	r3, [r0, #8]
 8016f1c:	8181      	strh	r1, [r0, #12]
 8016f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8016f20:	81c2      	strh	r2, [r0, #14]
 8016f22:	6183      	str	r3, [r0, #24]
 8016f24:	4619      	mov	r1, r3
 8016f26:	2208      	movs	r2, #8
 8016f28:	305c      	adds	r0, #92	; 0x5c
 8016f2a:	f7fb fba1 	bl	8012670 <memset>
 8016f2e:	4b05      	ldr	r3, [pc, #20]	; (8016f44 <std+0x38>)
 8016f30:	6224      	str	r4, [r4, #32]
 8016f32:	6263      	str	r3, [r4, #36]	; 0x24
 8016f34:	4b04      	ldr	r3, [pc, #16]	; (8016f48 <std+0x3c>)
 8016f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f38:	4b04      	ldr	r3, [pc, #16]	; (8016f4c <std+0x40>)
 8016f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f3c:	4b04      	ldr	r3, [pc, #16]	; (8016f50 <std+0x44>)
 8016f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8016f40:	bd10      	pop	{r4, pc}
 8016f42:	bf00      	nop
 8016f44:	08013611 	.word	0x08013611
 8016f48:	08013637 	.word	0x08013637
 8016f4c:	0801366f 	.word	0x0801366f
 8016f50:	08013693 	.word	0x08013693

08016f54 <_cleanup_r>:
 8016f54:	4901      	ldr	r1, [pc, #4]	; (8016f5c <_cleanup_r+0x8>)
 8016f56:	f000 b8c1 	b.w	80170dc <_fwalk_reent>
 8016f5a:	bf00      	nop
 8016f5c:	08016e95 	.word	0x08016e95

08016f60 <__sfmoreglue>:
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	2568      	movs	r5, #104	; 0x68
 8016f64:	1e4a      	subs	r2, r1, #1
 8016f66:	4355      	muls	r5, r2
 8016f68:	460e      	mov	r6, r1
 8016f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f6e:	f7fb fbe1 	bl	8012734 <_malloc_r>
 8016f72:	4604      	mov	r4, r0
 8016f74:	b140      	cbz	r0, 8016f88 <__sfmoreglue+0x28>
 8016f76:	2100      	movs	r1, #0
 8016f78:	e9c0 1600 	strd	r1, r6, [r0]
 8016f7c:	300c      	adds	r0, #12
 8016f7e:	60a0      	str	r0, [r4, #8]
 8016f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016f84:	f7fb fb74 	bl	8012670 <memset>
 8016f88:	4620      	mov	r0, r4
 8016f8a:	bd70      	pop	{r4, r5, r6, pc}

08016f8c <__sfp_lock_acquire>:
 8016f8c:	4801      	ldr	r0, [pc, #4]	; (8016f94 <__sfp_lock_acquire+0x8>)
 8016f8e:	f7ed bab2 	b.w	80044f6 <__retarget_lock_acquire_recursive>
 8016f92:	bf00      	nop
 8016f94:	20000764 	.word	0x20000764

08016f98 <__sfp_lock_release>:
 8016f98:	4801      	ldr	r0, [pc, #4]	; (8016fa0 <__sfp_lock_release+0x8>)
 8016f9a:	f7ed bac0 	b.w	800451e <__retarget_lock_release_recursive>
 8016f9e:	bf00      	nop
 8016fa0:	20000764 	.word	0x20000764

08016fa4 <__sinit_lock_acquire>:
 8016fa4:	4801      	ldr	r0, [pc, #4]	; (8016fac <__sinit_lock_acquire+0x8>)
 8016fa6:	f7ed baa6 	b.w	80044f6 <__retarget_lock_acquire_recursive>
 8016faa:	bf00      	nop
 8016fac:	20000760 	.word	0x20000760

08016fb0 <__sinit_lock_release>:
 8016fb0:	4801      	ldr	r0, [pc, #4]	; (8016fb8 <__sinit_lock_release+0x8>)
 8016fb2:	f7ed bab4 	b.w	800451e <__retarget_lock_release_recursive>
 8016fb6:	bf00      	nop
 8016fb8:	20000760 	.word	0x20000760

08016fbc <__sinit>:
 8016fbc:	b510      	push	{r4, lr}
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	f7ff fff0 	bl	8016fa4 <__sinit_lock_acquire>
 8016fc4:	69a3      	ldr	r3, [r4, #24]
 8016fc6:	b11b      	cbz	r3, 8016fd0 <__sinit+0x14>
 8016fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fcc:	f7ff bff0 	b.w	8016fb0 <__sinit_lock_release>
 8016fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8016fd6:	4b13      	ldr	r3, [pc, #76]	; (8017024 <__sinit+0x68>)
 8016fd8:	4a13      	ldr	r2, [pc, #76]	; (8017028 <__sinit+0x6c>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8016fde:	42a3      	cmp	r3, r4
 8016fe0:	bf08      	it	eq
 8016fe2:	2301      	moveq	r3, #1
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	bf08      	it	eq
 8016fe8:	61a3      	streq	r3, [r4, #24]
 8016fea:	f000 f81f 	bl	801702c <__sfp>
 8016fee:	6060      	str	r0, [r4, #4]
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f000 f81b 	bl	801702c <__sfp>
 8016ff6:	60a0      	str	r0, [r4, #8]
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 f817 	bl	801702c <__sfp>
 8016ffe:	2200      	movs	r2, #0
 8017000:	2104      	movs	r1, #4
 8017002:	60e0      	str	r0, [r4, #12]
 8017004:	6860      	ldr	r0, [r4, #4]
 8017006:	f7ff ff81 	bl	8016f0c <std>
 801700a:	2201      	movs	r2, #1
 801700c:	2109      	movs	r1, #9
 801700e:	68a0      	ldr	r0, [r4, #8]
 8017010:	f7ff ff7c 	bl	8016f0c <std>
 8017014:	2202      	movs	r2, #2
 8017016:	2112      	movs	r1, #18
 8017018:	68e0      	ldr	r0, [r4, #12]
 801701a:	f7ff ff77 	bl	8016f0c <std>
 801701e:	2301      	movs	r3, #1
 8017020:	61a3      	str	r3, [r4, #24]
 8017022:	e7d1      	b.n	8016fc8 <__sinit+0xc>
 8017024:	08017b70 	.word	0x08017b70
 8017028:	08016f55 	.word	0x08016f55

0801702c <__sfp>:
 801702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801702e:	4607      	mov	r7, r0
 8017030:	f7ff ffac 	bl	8016f8c <__sfp_lock_acquire>
 8017034:	4b1e      	ldr	r3, [pc, #120]	; (80170b0 <__sfp+0x84>)
 8017036:	681e      	ldr	r6, [r3, #0]
 8017038:	69b3      	ldr	r3, [r6, #24]
 801703a:	b913      	cbnz	r3, 8017042 <__sfp+0x16>
 801703c:	4630      	mov	r0, r6
 801703e:	f7ff ffbd 	bl	8016fbc <__sinit>
 8017042:	3648      	adds	r6, #72	; 0x48
 8017044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017048:	3b01      	subs	r3, #1
 801704a:	d503      	bpl.n	8017054 <__sfp+0x28>
 801704c:	6833      	ldr	r3, [r6, #0]
 801704e:	b30b      	cbz	r3, 8017094 <__sfp+0x68>
 8017050:	6836      	ldr	r6, [r6, #0]
 8017052:	e7f7      	b.n	8017044 <__sfp+0x18>
 8017054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017058:	b9d5      	cbnz	r5, 8017090 <__sfp+0x64>
 801705a:	4b16      	ldr	r3, [pc, #88]	; (80170b4 <__sfp+0x88>)
 801705c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017060:	60e3      	str	r3, [r4, #12]
 8017062:	6665      	str	r5, [r4, #100]	; 0x64
 8017064:	f7ed fa21 	bl	80044aa <__retarget_lock_init_recursive>
 8017068:	f7ff ff96 	bl	8016f98 <__sfp_lock_release>
 801706c:	2208      	movs	r2, #8
 801706e:	4629      	mov	r1, r5
 8017070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017078:	6025      	str	r5, [r4, #0]
 801707a:	61a5      	str	r5, [r4, #24]
 801707c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017080:	f7fb faf6 	bl	8012670 <memset>
 8017084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801708c:	4620      	mov	r0, r4
 801708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017090:	3468      	adds	r4, #104	; 0x68
 8017092:	e7d9      	b.n	8017048 <__sfp+0x1c>
 8017094:	2104      	movs	r1, #4
 8017096:	4638      	mov	r0, r7
 8017098:	f7ff ff62 	bl	8016f60 <__sfmoreglue>
 801709c:	4604      	mov	r4, r0
 801709e:	6030      	str	r0, [r6, #0]
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d1d5      	bne.n	8017050 <__sfp+0x24>
 80170a4:	f7ff ff78 	bl	8016f98 <__sfp_lock_release>
 80170a8:	230c      	movs	r3, #12
 80170aa:	603b      	str	r3, [r7, #0]
 80170ac:	e7ee      	b.n	801708c <__sfp+0x60>
 80170ae:	bf00      	nop
 80170b0:	08017b70 	.word	0x08017b70
 80170b4:	ffff0001 	.word	0xffff0001

080170b8 <fiprintf>:
 80170b8:	b40e      	push	{r1, r2, r3}
 80170ba:	b503      	push	{r0, r1, lr}
 80170bc:	4601      	mov	r1, r0
 80170be:	ab03      	add	r3, sp, #12
 80170c0:	4805      	ldr	r0, [pc, #20]	; (80170d8 <fiprintf+0x20>)
 80170c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80170c6:	6800      	ldr	r0, [r0, #0]
 80170c8:	9301      	str	r3, [sp, #4]
 80170ca:	f000 f873 	bl	80171b4 <_vfiprintf_r>
 80170ce:	b002      	add	sp, #8
 80170d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80170d4:	b003      	add	sp, #12
 80170d6:	4770      	bx	lr
 80170d8:	2000022c 	.word	0x2000022c

080170dc <_fwalk_reent>:
 80170dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170e0:	4606      	mov	r6, r0
 80170e2:	4688      	mov	r8, r1
 80170e4:	2700      	movs	r7, #0
 80170e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170ee:	f1b9 0901 	subs.w	r9, r9, #1
 80170f2:	d505      	bpl.n	8017100 <_fwalk_reent+0x24>
 80170f4:	6824      	ldr	r4, [r4, #0]
 80170f6:	2c00      	cmp	r4, #0
 80170f8:	d1f7      	bne.n	80170ea <_fwalk_reent+0xe>
 80170fa:	4638      	mov	r0, r7
 80170fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017100:	89ab      	ldrh	r3, [r5, #12]
 8017102:	2b01      	cmp	r3, #1
 8017104:	d907      	bls.n	8017116 <_fwalk_reent+0x3a>
 8017106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801710a:	3301      	adds	r3, #1
 801710c:	d003      	beq.n	8017116 <_fwalk_reent+0x3a>
 801710e:	4629      	mov	r1, r5
 8017110:	4630      	mov	r0, r6
 8017112:	47c0      	blx	r8
 8017114:	4307      	orrs	r7, r0
 8017116:	3568      	adds	r5, #104	; 0x68
 8017118:	e7e9      	b.n	80170ee <_fwalk_reent+0x12>

0801711a <_realloc_r>:
 801711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711c:	4607      	mov	r7, r0
 801711e:	4614      	mov	r4, r2
 8017120:	460e      	mov	r6, r1
 8017122:	b921      	cbnz	r1, 801712e <_realloc_r+0x14>
 8017124:	4611      	mov	r1, r2
 8017126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801712a:	f7fb bb03 	b.w	8012734 <_malloc_r>
 801712e:	b922      	cbnz	r2, 801713a <_realloc_r+0x20>
 8017130:	f7fb fab4 	bl	801269c <_free_r>
 8017134:	4625      	mov	r5, r4
 8017136:	4628      	mov	r0, r5
 8017138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801713a:	f000 fa8f 	bl	801765c <_malloc_usable_size_r>
 801713e:	42a0      	cmp	r0, r4
 8017140:	d20f      	bcs.n	8017162 <_realloc_r+0x48>
 8017142:	4621      	mov	r1, r4
 8017144:	4638      	mov	r0, r7
 8017146:	f7fb faf5 	bl	8012734 <_malloc_r>
 801714a:	4605      	mov	r5, r0
 801714c:	2800      	cmp	r0, #0
 801714e:	d0f2      	beq.n	8017136 <_realloc_r+0x1c>
 8017150:	4631      	mov	r1, r6
 8017152:	4622      	mov	r2, r4
 8017154:	f7fb fa64 	bl	8012620 <memcpy>
 8017158:	4631      	mov	r1, r6
 801715a:	4638      	mov	r0, r7
 801715c:	f7fb fa9e 	bl	801269c <_free_r>
 8017160:	e7e9      	b.n	8017136 <_realloc_r+0x1c>
 8017162:	4635      	mov	r5, r6
 8017164:	e7e7      	b.n	8017136 <_realloc_r+0x1c>

08017166 <__sfputc_r>:
 8017166:	6893      	ldr	r3, [r2, #8]
 8017168:	b410      	push	{r4}
 801716a:	3b01      	subs	r3, #1
 801716c:	2b00      	cmp	r3, #0
 801716e:	6093      	str	r3, [r2, #8]
 8017170:	da07      	bge.n	8017182 <__sfputc_r+0x1c>
 8017172:	6994      	ldr	r4, [r2, #24]
 8017174:	42a3      	cmp	r3, r4
 8017176:	db01      	blt.n	801717c <__sfputc_r+0x16>
 8017178:	290a      	cmp	r1, #10
 801717a:	d102      	bne.n	8017182 <__sfputc_r+0x1c>
 801717c:	bc10      	pop	{r4}
 801717e:	f000 b949 	b.w	8017414 <__swbuf_r>
 8017182:	6813      	ldr	r3, [r2, #0]
 8017184:	1c58      	adds	r0, r3, #1
 8017186:	6010      	str	r0, [r2, #0]
 8017188:	7019      	strb	r1, [r3, #0]
 801718a:	4608      	mov	r0, r1
 801718c:	bc10      	pop	{r4}
 801718e:	4770      	bx	lr

08017190 <__sfputs_r>:
 8017190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017192:	4606      	mov	r6, r0
 8017194:	460f      	mov	r7, r1
 8017196:	4614      	mov	r4, r2
 8017198:	18d5      	adds	r5, r2, r3
 801719a:	42ac      	cmp	r4, r5
 801719c:	d101      	bne.n	80171a2 <__sfputs_r+0x12>
 801719e:	2000      	movs	r0, #0
 80171a0:	e007      	b.n	80171b2 <__sfputs_r+0x22>
 80171a2:	463a      	mov	r2, r7
 80171a4:	4630      	mov	r0, r6
 80171a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171aa:	f7ff ffdc 	bl	8017166 <__sfputc_r>
 80171ae:	1c43      	adds	r3, r0, #1
 80171b0:	d1f3      	bne.n	801719a <__sfputs_r+0xa>
 80171b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080171b4 <_vfiprintf_r>:
 80171b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171b8:	460d      	mov	r5, r1
 80171ba:	4614      	mov	r4, r2
 80171bc:	4698      	mov	r8, r3
 80171be:	4606      	mov	r6, r0
 80171c0:	b09d      	sub	sp, #116	; 0x74
 80171c2:	b118      	cbz	r0, 80171cc <_vfiprintf_r+0x18>
 80171c4:	6983      	ldr	r3, [r0, #24]
 80171c6:	b90b      	cbnz	r3, 80171cc <_vfiprintf_r+0x18>
 80171c8:	f7ff fef8 	bl	8016fbc <__sinit>
 80171cc:	4b89      	ldr	r3, [pc, #548]	; (80173f4 <_vfiprintf_r+0x240>)
 80171ce:	429d      	cmp	r5, r3
 80171d0:	d11b      	bne.n	801720a <_vfiprintf_r+0x56>
 80171d2:	6875      	ldr	r5, [r6, #4]
 80171d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171d6:	07d9      	lsls	r1, r3, #31
 80171d8:	d405      	bmi.n	80171e6 <_vfiprintf_r+0x32>
 80171da:	89ab      	ldrh	r3, [r5, #12]
 80171dc:	059a      	lsls	r2, r3, #22
 80171de:	d402      	bmi.n	80171e6 <_vfiprintf_r+0x32>
 80171e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80171e2:	f7ed f988 	bl	80044f6 <__retarget_lock_acquire_recursive>
 80171e6:	89ab      	ldrh	r3, [r5, #12]
 80171e8:	071b      	lsls	r3, r3, #28
 80171ea:	d501      	bpl.n	80171f0 <_vfiprintf_r+0x3c>
 80171ec:	692b      	ldr	r3, [r5, #16]
 80171ee:	b9eb      	cbnz	r3, 801722c <_vfiprintf_r+0x78>
 80171f0:	4629      	mov	r1, r5
 80171f2:	4630      	mov	r0, r6
 80171f4:	f000 f960 	bl	80174b8 <__swsetup_r>
 80171f8:	b1c0      	cbz	r0, 801722c <_vfiprintf_r+0x78>
 80171fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171fc:	07dc      	lsls	r4, r3, #31
 80171fe:	d50e      	bpl.n	801721e <_vfiprintf_r+0x6a>
 8017200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017204:	b01d      	add	sp, #116	; 0x74
 8017206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801720a:	4b7b      	ldr	r3, [pc, #492]	; (80173f8 <_vfiprintf_r+0x244>)
 801720c:	429d      	cmp	r5, r3
 801720e:	d101      	bne.n	8017214 <_vfiprintf_r+0x60>
 8017210:	68b5      	ldr	r5, [r6, #8]
 8017212:	e7df      	b.n	80171d4 <_vfiprintf_r+0x20>
 8017214:	4b79      	ldr	r3, [pc, #484]	; (80173fc <_vfiprintf_r+0x248>)
 8017216:	429d      	cmp	r5, r3
 8017218:	bf08      	it	eq
 801721a:	68f5      	ldreq	r5, [r6, #12]
 801721c:	e7da      	b.n	80171d4 <_vfiprintf_r+0x20>
 801721e:	89ab      	ldrh	r3, [r5, #12]
 8017220:	0598      	lsls	r0, r3, #22
 8017222:	d4ed      	bmi.n	8017200 <_vfiprintf_r+0x4c>
 8017224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017226:	f7ed f97a 	bl	800451e <__retarget_lock_release_recursive>
 801722a:	e7e9      	b.n	8017200 <_vfiprintf_r+0x4c>
 801722c:	2300      	movs	r3, #0
 801722e:	9309      	str	r3, [sp, #36]	; 0x24
 8017230:	2320      	movs	r3, #32
 8017232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017236:	2330      	movs	r3, #48	; 0x30
 8017238:	f04f 0901 	mov.w	r9, #1
 801723c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017240:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8017400 <_vfiprintf_r+0x24c>
 8017244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017248:	4623      	mov	r3, r4
 801724a:	469a      	mov	sl, r3
 801724c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017250:	b10a      	cbz	r2, 8017256 <_vfiprintf_r+0xa2>
 8017252:	2a25      	cmp	r2, #37	; 0x25
 8017254:	d1f9      	bne.n	801724a <_vfiprintf_r+0x96>
 8017256:	ebba 0b04 	subs.w	fp, sl, r4
 801725a:	d00b      	beq.n	8017274 <_vfiprintf_r+0xc0>
 801725c:	465b      	mov	r3, fp
 801725e:	4622      	mov	r2, r4
 8017260:	4629      	mov	r1, r5
 8017262:	4630      	mov	r0, r6
 8017264:	f7ff ff94 	bl	8017190 <__sfputs_r>
 8017268:	3001      	adds	r0, #1
 801726a:	f000 80aa 	beq.w	80173c2 <_vfiprintf_r+0x20e>
 801726e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017270:	445a      	add	r2, fp
 8017272:	9209      	str	r2, [sp, #36]	; 0x24
 8017274:	f89a 3000 	ldrb.w	r3, [sl]
 8017278:	2b00      	cmp	r3, #0
 801727a:	f000 80a2 	beq.w	80173c2 <_vfiprintf_r+0x20e>
 801727e:	2300      	movs	r3, #0
 8017280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017288:	f10a 0a01 	add.w	sl, sl, #1
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	9307      	str	r3, [sp, #28]
 8017290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017294:	931a      	str	r3, [sp, #104]	; 0x68
 8017296:	4654      	mov	r4, sl
 8017298:	2205      	movs	r2, #5
 801729a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801729e:	4858      	ldr	r0, [pc, #352]	; (8017400 <_vfiprintf_r+0x24c>)
 80172a0:	f7fb f9b0 	bl	8012604 <memchr>
 80172a4:	9a04      	ldr	r2, [sp, #16]
 80172a6:	b9d8      	cbnz	r0, 80172e0 <_vfiprintf_r+0x12c>
 80172a8:	06d1      	lsls	r1, r2, #27
 80172aa:	bf44      	itt	mi
 80172ac:	2320      	movmi	r3, #32
 80172ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172b2:	0713      	lsls	r3, r2, #28
 80172b4:	bf44      	itt	mi
 80172b6:	232b      	movmi	r3, #43	; 0x2b
 80172b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172bc:	f89a 3000 	ldrb.w	r3, [sl]
 80172c0:	2b2a      	cmp	r3, #42	; 0x2a
 80172c2:	d015      	beq.n	80172f0 <_vfiprintf_r+0x13c>
 80172c4:	4654      	mov	r4, sl
 80172c6:	2000      	movs	r0, #0
 80172c8:	f04f 0c0a 	mov.w	ip, #10
 80172cc:	9a07      	ldr	r2, [sp, #28]
 80172ce:	4621      	mov	r1, r4
 80172d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172d4:	3b30      	subs	r3, #48	; 0x30
 80172d6:	2b09      	cmp	r3, #9
 80172d8:	d94e      	bls.n	8017378 <_vfiprintf_r+0x1c4>
 80172da:	b1b0      	cbz	r0, 801730a <_vfiprintf_r+0x156>
 80172dc:	9207      	str	r2, [sp, #28]
 80172de:	e014      	b.n	801730a <_vfiprintf_r+0x156>
 80172e0:	eba0 0308 	sub.w	r3, r0, r8
 80172e4:	fa09 f303 	lsl.w	r3, r9, r3
 80172e8:	4313      	orrs	r3, r2
 80172ea:	46a2      	mov	sl, r4
 80172ec:	9304      	str	r3, [sp, #16]
 80172ee:	e7d2      	b.n	8017296 <_vfiprintf_r+0xe2>
 80172f0:	9b03      	ldr	r3, [sp, #12]
 80172f2:	1d19      	adds	r1, r3, #4
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	9103      	str	r1, [sp, #12]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	bfbb      	ittet	lt
 80172fc:	425b      	neglt	r3, r3
 80172fe:	f042 0202 	orrlt.w	r2, r2, #2
 8017302:	9307      	strge	r3, [sp, #28]
 8017304:	9307      	strlt	r3, [sp, #28]
 8017306:	bfb8      	it	lt
 8017308:	9204      	strlt	r2, [sp, #16]
 801730a:	7823      	ldrb	r3, [r4, #0]
 801730c:	2b2e      	cmp	r3, #46	; 0x2e
 801730e:	d10c      	bne.n	801732a <_vfiprintf_r+0x176>
 8017310:	7863      	ldrb	r3, [r4, #1]
 8017312:	2b2a      	cmp	r3, #42	; 0x2a
 8017314:	d135      	bne.n	8017382 <_vfiprintf_r+0x1ce>
 8017316:	9b03      	ldr	r3, [sp, #12]
 8017318:	3402      	adds	r4, #2
 801731a:	1d1a      	adds	r2, r3, #4
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	9203      	str	r2, [sp, #12]
 8017320:	2b00      	cmp	r3, #0
 8017322:	bfb8      	it	lt
 8017324:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017328:	9305      	str	r3, [sp, #20]
 801732a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017410 <_vfiprintf_r+0x25c>
 801732e:	2203      	movs	r2, #3
 8017330:	4650      	mov	r0, sl
 8017332:	7821      	ldrb	r1, [r4, #0]
 8017334:	f7fb f966 	bl	8012604 <memchr>
 8017338:	b140      	cbz	r0, 801734c <_vfiprintf_r+0x198>
 801733a:	2340      	movs	r3, #64	; 0x40
 801733c:	eba0 000a 	sub.w	r0, r0, sl
 8017340:	fa03 f000 	lsl.w	r0, r3, r0
 8017344:	9b04      	ldr	r3, [sp, #16]
 8017346:	3401      	adds	r4, #1
 8017348:	4303      	orrs	r3, r0
 801734a:	9304      	str	r3, [sp, #16]
 801734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017350:	2206      	movs	r2, #6
 8017352:	482c      	ldr	r0, [pc, #176]	; (8017404 <_vfiprintf_r+0x250>)
 8017354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017358:	f7fb f954 	bl	8012604 <memchr>
 801735c:	2800      	cmp	r0, #0
 801735e:	d03f      	beq.n	80173e0 <_vfiprintf_r+0x22c>
 8017360:	4b29      	ldr	r3, [pc, #164]	; (8017408 <_vfiprintf_r+0x254>)
 8017362:	bb1b      	cbnz	r3, 80173ac <_vfiprintf_r+0x1f8>
 8017364:	9b03      	ldr	r3, [sp, #12]
 8017366:	3307      	adds	r3, #7
 8017368:	f023 0307 	bic.w	r3, r3, #7
 801736c:	3308      	adds	r3, #8
 801736e:	9303      	str	r3, [sp, #12]
 8017370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017372:	443b      	add	r3, r7
 8017374:	9309      	str	r3, [sp, #36]	; 0x24
 8017376:	e767      	b.n	8017248 <_vfiprintf_r+0x94>
 8017378:	460c      	mov	r4, r1
 801737a:	2001      	movs	r0, #1
 801737c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017380:	e7a5      	b.n	80172ce <_vfiprintf_r+0x11a>
 8017382:	2300      	movs	r3, #0
 8017384:	f04f 0c0a 	mov.w	ip, #10
 8017388:	4619      	mov	r1, r3
 801738a:	3401      	adds	r4, #1
 801738c:	9305      	str	r3, [sp, #20]
 801738e:	4620      	mov	r0, r4
 8017390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017394:	3a30      	subs	r2, #48	; 0x30
 8017396:	2a09      	cmp	r2, #9
 8017398:	d903      	bls.n	80173a2 <_vfiprintf_r+0x1ee>
 801739a:	2b00      	cmp	r3, #0
 801739c:	d0c5      	beq.n	801732a <_vfiprintf_r+0x176>
 801739e:	9105      	str	r1, [sp, #20]
 80173a0:	e7c3      	b.n	801732a <_vfiprintf_r+0x176>
 80173a2:	4604      	mov	r4, r0
 80173a4:	2301      	movs	r3, #1
 80173a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80173aa:	e7f0      	b.n	801738e <_vfiprintf_r+0x1da>
 80173ac:	ab03      	add	r3, sp, #12
 80173ae:	9300      	str	r3, [sp, #0]
 80173b0:	462a      	mov	r2, r5
 80173b2:	4630      	mov	r0, r6
 80173b4:	4b15      	ldr	r3, [pc, #84]	; (801740c <_vfiprintf_r+0x258>)
 80173b6:	a904      	add	r1, sp, #16
 80173b8:	f7fb fab4 	bl	8012924 <_printf_float>
 80173bc:	4607      	mov	r7, r0
 80173be:	1c78      	adds	r0, r7, #1
 80173c0:	d1d6      	bne.n	8017370 <_vfiprintf_r+0x1bc>
 80173c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80173c4:	07d9      	lsls	r1, r3, #31
 80173c6:	d405      	bmi.n	80173d4 <_vfiprintf_r+0x220>
 80173c8:	89ab      	ldrh	r3, [r5, #12]
 80173ca:	059a      	lsls	r2, r3, #22
 80173cc:	d402      	bmi.n	80173d4 <_vfiprintf_r+0x220>
 80173ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173d0:	f7ed f8a5 	bl	800451e <__retarget_lock_release_recursive>
 80173d4:	89ab      	ldrh	r3, [r5, #12]
 80173d6:	065b      	lsls	r3, r3, #25
 80173d8:	f53f af12 	bmi.w	8017200 <_vfiprintf_r+0x4c>
 80173dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173de:	e711      	b.n	8017204 <_vfiprintf_r+0x50>
 80173e0:	ab03      	add	r3, sp, #12
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	462a      	mov	r2, r5
 80173e6:	4630      	mov	r0, r6
 80173e8:	4b08      	ldr	r3, [pc, #32]	; (801740c <_vfiprintf_r+0x258>)
 80173ea:	a904      	add	r1, sp, #16
 80173ec:	f7fb fd36 	bl	8012e5c <_printf_i>
 80173f0:	e7e4      	b.n	80173bc <_vfiprintf_r+0x208>
 80173f2:	bf00      	nop
 80173f4:	08017ffc 	.word	0x08017ffc
 80173f8:	0801801c 	.word	0x0801801c
 80173fc:	08017fdc 	.word	0x08017fdc
 8017400:	08017f74 	.word	0x08017f74
 8017404:	08017f7e 	.word	0x08017f7e
 8017408:	08012925 	.word	0x08012925
 801740c:	08017191 	.word	0x08017191
 8017410:	08017f7a 	.word	0x08017f7a

08017414 <__swbuf_r>:
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017416:	460e      	mov	r6, r1
 8017418:	4614      	mov	r4, r2
 801741a:	4605      	mov	r5, r0
 801741c:	b118      	cbz	r0, 8017426 <__swbuf_r+0x12>
 801741e:	6983      	ldr	r3, [r0, #24]
 8017420:	b90b      	cbnz	r3, 8017426 <__swbuf_r+0x12>
 8017422:	f7ff fdcb 	bl	8016fbc <__sinit>
 8017426:	4b21      	ldr	r3, [pc, #132]	; (80174ac <__swbuf_r+0x98>)
 8017428:	429c      	cmp	r4, r3
 801742a:	d12b      	bne.n	8017484 <__swbuf_r+0x70>
 801742c:	686c      	ldr	r4, [r5, #4]
 801742e:	69a3      	ldr	r3, [r4, #24]
 8017430:	60a3      	str	r3, [r4, #8]
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	071a      	lsls	r2, r3, #28
 8017436:	d52f      	bpl.n	8017498 <__swbuf_r+0x84>
 8017438:	6923      	ldr	r3, [r4, #16]
 801743a:	b36b      	cbz	r3, 8017498 <__swbuf_r+0x84>
 801743c:	6923      	ldr	r3, [r4, #16]
 801743e:	6820      	ldr	r0, [r4, #0]
 8017440:	b2f6      	uxtb	r6, r6
 8017442:	1ac0      	subs	r0, r0, r3
 8017444:	6963      	ldr	r3, [r4, #20]
 8017446:	4637      	mov	r7, r6
 8017448:	4283      	cmp	r3, r0
 801744a:	dc04      	bgt.n	8017456 <__swbuf_r+0x42>
 801744c:	4621      	mov	r1, r4
 801744e:	4628      	mov	r0, r5
 8017450:	f7ff fd20 	bl	8016e94 <_fflush_r>
 8017454:	bb30      	cbnz	r0, 80174a4 <__swbuf_r+0x90>
 8017456:	68a3      	ldr	r3, [r4, #8]
 8017458:	3001      	adds	r0, #1
 801745a:	3b01      	subs	r3, #1
 801745c:	60a3      	str	r3, [r4, #8]
 801745e:	6823      	ldr	r3, [r4, #0]
 8017460:	1c5a      	adds	r2, r3, #1
 8017462:	6022      	str	r2, [r4, #0]
 8017464:	701e      	strb	r6, [r3, #0]
 8017466:	6963      	ldr	r3, [r4, #20]
 8017468:	4283      	cmp	r3, r0
 801746a:	d004      	beq.n	8017476 <__swbuf_r+0x62>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	07db      	lsls	r3, r3, #31
 8017470:	d506      	bpl.n	8017480 <__swbuf_r+0x6c>
 8017472:	2e0a      	cmp	r6, #10
 8017474:	d104      	bne.n	8017480 <__swbuf_r+0x6c>
 8017476:	4621      	mov	r1, r4
 8017478:	4628      	mov	r0, r5
 801747a:	f7ff fd0b 	bl	8016e94 <_fflush_r>
 801747e:	b988      	cbnz	r0, 80174a4 <__swbuf_r+0x90>
 8017480:	4638      	mov	r0, r7
 8017482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017484:	4b0a      	ldr	r3, [pc, #40]	; (80174b0 <__swbuf_r+0x9c>)
 8017486:	429c      	cmp	r4, r3
 8017488:	d101      	bne.n	801748e <__swbuf_r+0x7a>
 801748a:	68ac      	ldr	r4, [r5, #8]
 801748c:	e7cf      	b.n	801742e <__swbuf_r+0x1a>
 801748e:	4b09      	ldr	r3, [pc, #36]	; (80174b4 <__swbuf_r+0xa0>)
 8017490:	429c      	cmp	r4, r3
 8017492:	bf08      	it	eq
 8017494:	68ec      	ldreq	r4, [r5, #12]
 8017496:	e7ca      	b.n	801742e <__swbuf_r+0x1a>
 8017498:	4621      	mov	r1, r4
 801749a:	4628      	mov	r0, r5
 801749c:	f000 f80c 	bl	80174b8 <__swsetup_r>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	d0cb      	beq.n	801743c <__swbuf_r+0x28>
 80174a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80174a8:	e7ea      	b.n	8017480 <__swbuf_r+0x6c>
 80174aa:	bf00      	nop
 80174ac:	08017ffc 	.word	0x08017ffc
 80174b0:	0801801c 	.word	0x0801801c
 80174b4:	08017fdc 	.word	0x08017fdc

080174b8 <__swsetup_r>:
 80174b8:	4b32      	ldr	r3, [pc, #200]	; (8017584 <__swsetup_r+0xcc>)
 80174ba:	b570      	push	{r4, r5, r6, lr}
 80174bc:	681d      	ldr	r5, [r3, #0]
 80174be:	4606      	mov	r6, r0
 80174c0:	460c      	mov	r4, r1
 80174c2:	b125      	cbz	r5, 80174ce <__swsetup_r+0x16>
 80174c4:	69ab      	ldr	r3, [r5, #24]
 80174c6:	b913      	cbnz	r3, 80174ce <__swsetup_r+0x16>
 80174c8:	4628      	mov	r0, r5
 80174ca:	f7ff fd77 	bl	8016fbc <__sinit>
 80174ce:	4b2e      	ldr	r3, [pc, #184]	; (8017588 <__swsetup_r+0xd0>)
 80174d0:	429c      	cmp	r4, r3
 80174d2:	d10f      	bne.n	80174f4 <__swsetup_r+0x3c>
 80174d4:	686c      	ldr	r4, [r5, #4]
 80174d6:	89a3      	ldrh	r3, [r4, #12]
 80174d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80174dc:	0719      	lsls	r1, r3, #28
 80174de:	d42c      	bmi.n	801753a <__swsetup_r+0x82>
 80174e0:	06dd      	lsls	r5, r3, #27
 80174e2:	d411      	bmi.n	8017508 <__swsetup_r+0x50>
 80174e4:	2309      	movs	r3, #9
 80174e6:	6033      	str	r3, [r6, #0]
 80174e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80174ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174f0:	81a3      	strh	r3, [r4, #12]
 80174f2:	e03e      	b.n	8017572 <__swsetup_r+0xba>
 80174f4:	4b25      	ldr	r3, [pc, #148]	; (801758c <__swsetup_r+0xd4>)
 80174f6:	429c      	cmp	r4, r3
 80174f8:	d101      	bne.n	80174fe <__swsetup_r+0x46>
 80174fa:	68ac      	ldr	r4, [r5, #8]
 80174fc:	e7eb      	b.n	80174d6 <__swsetup_r+0x1e>
 80174fe:	4b24      	ldr	r3, [pc, #144]	; (8017590 <__swsetup_r+0xd8>)
 8017500:	429c      	cmp	r4, r3
 8017502:	bf08      	it	eq
 8017504:	68ec      	ldreq	r4, [r5, #12]
 8017506:	e7e6      	b.n	80174d6 <__swsetup_r+0x1e>
 8017508:	0758      	lsls	r0, r3, #29
 801750a:	d512      	bpl.n	8017532 <__swsetup_r+0x7a>
 801750c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801750e:	b141      	cbz	r1, 8017522 <__swsetup_r+0x6a>
 8017510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017514:	4299      	cmp	r1, r3
 8017516:	d002      	beq.n	801751e <__swsetup_r+0x66>
 8017518:	4630      	mov	r0, r6
 801751a:	f7fb f8bf 	bl	801269c <_free_r>
 801751e:	2300      	movs	r3, #0
 8017520:	6363      	str	r3, [r4, #52]	; 0x34
 8017522:	89a3      	ldrh	r3, [r4, #12]
 8017524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017528:	81a3      	strh	r3, [r4, #12]
 801752a:	2300      	movs	r3, #0
 801752c:	6063      	str	r3, [r4, #4]
 801752e:	6923      	ldr	r3, [r4, #16]
 8017530:	6023      	str	r3, [r4, #0]
 8017532:	89a3      	ldrh	r3, [r4, #12]
 8017534:	f043 0308 	orr.w	r3, r3, #8
 8017538:	81a3      	strh	r3, [r4, #12]
 801753a:	6923      	ldr	r3, [r4, #16]
 801753c:	b94b      	cbnz	r3, 8017552 <__swsetup_r+0x9a>
 801753e:	89a3      	ldrh	r3, [r4, #12]
 8017540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017548:	d003      	beq.n	8017552 <__swsetup_r+0x9a>
 801754a:	4621      	mov	r1, r4
 801754c:	4630      	mov	r0, r6
 801754e:	f000 f845 	bl	80175dc <__smakebuf_r>
 8017552:	89a0      	ldrh	r0, [r4, #12]
 8017554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017558:	f010 0301 	ands.w	r3, r0, #1
 801755c:	d00a      	beq.n	8017574 <__swsetup_r+0xbc>
 801755e:	2300      	movs	r3, #0
 8017560:	60a3      	str	r3, [r4, #8]
 8017562:	6963      	ldr	r3, [r4, #20]
 8017564:	425b      	negs	r3, r3
 8017566:	61a3      	str	r3, [r4, #24]
 8017568:	6923      	ldr	r3, [r4, #16]
 801756a:	b943      	cbnz	r3, 801757e <__swsetup_r+0xc6>
 801756c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017570:	d1ba      	bne.n	80174e8 <__swsetup_r+0x30>
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	0781      	lsls	r1, r0, #30
 8017576:	bf58      	it	pl
 8017578:	6963      	ldrpl	r3, [r4, #20]
 801757a:	60a3      	str	r3, [r4, #8]
 801757c:	e7f4      	b.n	8017568 <__swsetup_r+0xb0>
 801757e:	2000      	movs	r0, #0
 8017580:	e7f7      	b.n	8017572 <__swsetup_r+0xba>
 8017582:	bf00      	nop
 8017584:	2000022c 	.word	0x2000022c
 8017588:	08017ffc 	.word	0x08017ffc
 801758c:	0801801c 	.word	0x0801801c
 8017590:	08017fdc 	.word	0x08017fdc

08017594 <__swhatbuf_r>:
 8017594:	b570      	push	{r4, r5, r6, lr}
 8017596:	460e      	mov	r6, r1
 8017598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801759c:	4614      	mov	r4, r2
 801759e:	2900      	cmp	r1, #0
 80175a0:	461d      	mov	r5, r3
 80175a2:	b096      	sub	sp, #88	; 0x58
 80175a4:	da07      	bge.n	80175b6 <__swhatbuf_r+0x22>
 80175a6:	2300      	movs	r3, #0
 80175a8:	602b      	str	r3, [r5, #0]
 80175aa:	89b3      	ldrh	r3, [r6, #12]
 80175ac:	061a      	lsls	r2, r3, #24
 80175ae:	d410      	bmi.n	80175d2 <__swhatbuf_r+0x3e>
 80175b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80175b4:	e00e      	b.n	80175d4 <__swhatbuf_r+0x40>
 80175b6:	466a      	mov	r2, sp
 80175b8:	f000 f858 	bl	801766c <_fstat_r>
 80175bc:	2800      	cmp	r0, #0
 80175be:	dbf2      	blt.n	80175a6 <__swhatbuf_r+0x12>
 80175c0:	9a01      	ldr	r2, [sp, #4]
 80175c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80175c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80175ca:	425a      	negs	r2, r3
 80175cc:	415a      	adcs	r2, r3
 80175ce:	602a      	str	r2, [r5, #0]
 80175d0:	e7ee      	b.n	80175b0 <__swhatbuf_r+0x1c>
 80175d2:	2340      	movs	r3, #64	; 0x40
 80175d4:	2000      	movs	r0, #0
 80175d6:	6023      	str	r3, [r4, #0]
 80175d8:	b016      	add	sp, #88	; 0x58
 80175da:	bd70      	pop	{r4, r5, r6, pc}

080175dc <__smakebuf_r>:
 80175dc:	898b      	ldrh	r3, [r1, #12]
 80175de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175e0:	079d      	lsls	r5, r3, #30
 80175e2:	4606      	mov	r6, r0
 80175e4:	460c      	mov	r4, r1
 80175e6:	d507      	bpl.n	80175f8 <__smakebuf_r+0x1c>
 80175e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80175ec:	6023      	str	r3, [r4, #0]
 80175ee:	6123      	str	r3, [r4, #16]
 80175f0:	2301      	movs	r3, #1
 80175f2:	6163      	str	r3, [r4, #20]
 80175f4:	b002      	add	sp, #8
 80175f6:	bd70      	pop	{r4, r5, r6, pc}
 80175f8:	466a      	mov	r2, sp
 80175fa:	ab01      	add	r3, sp, #4
 80175fc:	f7ff ffca 	bl	8017594 <__swhatbuf_r>
 8017600:	9900      	ldr	r1, [sp, #0]
 8017602:	4605      	mov	r5, r0
 8017604:	4630      	mov	r0, r6
 8017606:	f7fb f895 	bl	8012734 <_malloc_r>
 801760a:	b948      	cbnz	r0, 8017620 <__smakebuf_r+0x44>
 801760c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017610:	059a      	lsls	r2, r3, #22
 8017612:	d4ef      	bmi.n	80175f4 <__smakebuf_r+0x18>
 8017614:	f023 0303 	bic.w	r3, r3, #3
 8017618:	f043 0302 	orr.w	r3, r3, #2
 801761c:	81a3      	strh	r3, [r4, #12]
 801761e:	e7e3      	b.n	80175e8 <__smakebuf_r+0xc>
 8017620:	4b0d      	ldr	r3, [pc, #52]	; (8017658 <__smakebuf_r+0x7c>)
 8017622:	62b3      	str	r3, [r6, #40]	; 0x28
 8017624:	89a3      	ldrh	r3, [r4, #12]
 8017626:	6020      	str	r0, [r4, #0]
 8017628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801762c:	81a3      	strh	r3, [r4, #12]
 801762e:	9b00      	ldr	r3, [sp, #0]
 8017630:	6120      	str	r0, [r4, #16]
 8017632:	6163      	str	r3, [r4, #20]
 8017634:	9b01      	ldr	r3, [sp, #4]
 8017636:	b15b      	cbz	r3, 8017650 <__smakebuf_r+0x74>
 8017638:	4630      	mov	r0, r6
 801763a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801763e:	f000 f827 	bl	8017690 <_isatty_r>
 8017642:	b128      	cbz	r0, 8017650 <__smakebuf_r+0x74>
 8017644:	89a3      	ldrh	r3, [r4, #12]
 8017646:	f023 0303 	bic.w	r3, r3, #3
 801764a:	f043 0301 	orr.w	r3, r3, #1
 801764e:	81a3      	strh	r3, [r4, #12]
 8017650:	89a0      	ldrh	r0, [r4, #12]
 8017652:	4305      	orrs	r5, r0
 8017654:	81a5      	strh	r5, [r4, #12]
 8017656:	e7cd      	b.n	80175f4 <__smakebuf_r+0x18>
 8017658:	08016f55 	.word	0x08016f55

0801765c <_malloc_usable_size_r>:
 801765c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017660:	1f18      	subs	r0, r3, #4
 8017662:	2b00      	cmp	r3, #0
 8017664:	bfbc      	itt	lt
 8017666:	580b      	ldrlt	r3, [r1, r0]
 8017668:	18c0      	addlt	r0, r0, r3
 801766a:	4770      	bx	lr

0801766c <_fstat_r>:
 801766c:	b538      	push	{r3, r4, r5, lr}
 801766e:	2300      	movs	r3, #0
 8017670:	4d06      	ldr	r5, [pc, #24]	; (801768c <_fstat_r+0x20>)
 8017672:	4604      	mov	r4, r0
 8017674:	4608      	mov	r0, r1
 8017676:	4611      	mov	r1, r2
 8017678:	602b      	str	r3, [r5, #0]
 801767a:	f7ec fe1a 	bl	80042b2 <_fstat>
 801767e:	1c43      	adds	r3, r0, #1
 8017680:	d102      	bne.n	8017688 <_fstat_r+0x1c>
 8017682:	682b      	ldr	r3, [r5, #0]
 8017684:	b103      	cbz	r3, 8017688 <_fstat_r+0x1c>
 8017686:	6023      	str	r3, [r4, #0]
 8017688:	bd38      	pop	{r3, r4, r5, pc}
 801768a:	bf00      	nop
 801768c:	20001dec 	.word	0x20001dec

08017690 <_isatty_r>:
 8017690:	b538      	push	{r3, r4, r5, lr}
 8017692:	2300      	movs	r3, #0
 8017694:	4d05      	ldr	r5, [pc, #20]	; (80176ac <_isatty_r+0x1c>)
 8017696:	4604      	mov	r4, r0
 8017698:	4608      	mov	r0, r1
 801769a:	602b      	str	r3, [r5, #0]
 801769c:	f7ec fe18 	bl	80042d0 <_isatty>
 80176a0:	1c43      	adds	r3, r0, #1
 80176a2:	d102      	bne.n	80176aa <_isatty_r+0x1a>
 80176a4:	682b      	ldr	r3, [r5, #0]
 80176a6:	b103      	cbz	r3, 80176aa <_isatty_r+0x1a>
 80176a8:	6023      	str	r3, [r4, #0]
 80176aa:	bd38      	pop	{r3, r4, r5, pc}
 80176ac:	20001dec 	.word	0x20001dec

080176b0 <_init>:
 80176b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b2:	bf00      	nop
 80176b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176b6:	bc08      	pop	{r3}
 80176b8:	469e      	mov	lr, r3
 80176ba:	4770      	bx	lr

080176bc <_fini>:
 80176bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176be:	bf00      	nop
 80176c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176c2:	bc08      	pop	{r3}
 80176c4:	469e      	mov	lr, r3
 80176c6:	4770      	bx	lr
