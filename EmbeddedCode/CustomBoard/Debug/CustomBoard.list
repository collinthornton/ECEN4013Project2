
CustomBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d718  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9ac  0800d9ac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9ac  0800d9ac  0001d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b4  0800d9b4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032e8  200001fc  0800dbc8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034e4  0800dbc8  000234e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000453bb  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007845  00000000  00000000  000655e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d8  00000000  00000000  0006ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a8  00000000  00000000  0006f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e591  00000000  00000000  000717a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c6c  00000000  00000000  0008fd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad88a  00000000  00000000  000b99a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016722f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a890  00000000  00000000  00167284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d840 	.word	0x0800d840

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	0800d840 	.word	0x0800d840

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000194:	f000 b96e 	b.w	8000474 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	468e      	mov	lr, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	f040 8083 	bne.w	80002c8 <__udivmoddi4+0x118>
 80001c2:	428a      	cmp	r2, r1
 80001c4:	4617      	mov	r7, r2
 80001c6:	d947      	bls.n	8000258 <__udivmoddi4+0xa8>
 80001c8:	fab2 f382 	clz	r3, r2
 80001cc:	b14b      	cbz	r3, 80001e2 <__udivmoddi4+0x32>
 80001ce:	f1c3 0120 	rsb	r1, r3, #32
 80001d2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d6:	fa20 f101 	lsr.w	r1, r0, r1
 80001da:	409f      	lsls	r7, r3
 80001dc:	ea41 0e0e 	orr.w	lr, r1, lr
 80001e0:	409c      	lsls	r4, r3
 80001e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e6:	fbbe fcf8 	udiv	ip, lr, r8
 80001ea:	fa1f f987 	uxth.w	r9, r7
 80001ee:	fb08 e21c 	mls	r2, r8, ip, lr
 80001f2:	fb0c f009 	mul.w	r0, ip, r9
 80001f6:	0c21      	lsrs	r1, r4, #16
 80001f8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001fc:	4290      	cmp	r0, r2
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	18ba      	adds	r2, r7, r2
 8000202:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000206:	f080 8118 	bcs.w	800043a <__udivmoddi4+0x28a>
 800020a:	4290      	cmp	r0, r2
 800020c:	f240 8115 	bls.w	800043a <__udivmoddi4+0x28a>
 8000210:	f1ac 0c02 	sub.w	ip, ip, #2
 8000214:	443a      	add	r2, r7
 8000216:	1a12      	subs	r2, r2, r0
 8000218:	fbb2 f0f8 	udiv	r0, r2, r8
 800021c:	fb08 2210 	mls	r2, r8, r0, r2
 8000220:	fb00 f109 	mul.w	r1, r0, r9
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	42a1      	cmp	r1, r4
 800022c:	d909      	bls.n	8000242 <__udivmoddi4+0x92>
 800022e:	193c      	adds	r4, r7, r4
 8000230:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000234:	f080 8103 	bcs.w	800043e <__udivmoddi4+0x28e>
 8000238:	42a1      	cmp	r1, r4
 800023a:	f240 8100 	bls.w	800043e <__udivmoddi4+0x28e>
 800023e:	3802      	subs	r0, #2
 8000240:	443c      	add	r4, r7
 8000242:	1a64      	subs	r4, r4, r1
 8000244:	2100      	movs	r1, #0
 8000246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa4>
 800024c:	2200      	movs	r2, #0
 800024e:	40dc      	lsrs	r4, r3
 8000250:	e9c6 4200 	strd	r4, r2, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	b902      	cbnz	r2, 800025c <__udivmoddi4+0xac>
 800025a:	deff      	udf	#255	; 0xff
 800025c:	fab2 f382 	clz	r3, r2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14f      	bne.n	8000304 <__udivmoddi4+0x154>
 8000264:	1a8d      	subs	r5, r1, r2
 8000266:	2101      	movs	r1, #1
 8000268:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800026c:	fa1f f882 	uxth.w	r8, r2
 8000270:	fbb5 fcfe 	udiv	ip, r5, lr
 8000274:	fb0e 551c 	mls	r5, lr, ip, r5
 8000278:	fb08 f00c 	mul.w	r0, r8, ip
 800027c:	0c22      	lsrs	r2, r4, #16
 800027e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000282:	42a8      	cmp	r0, r5
 8000284:	d907      	bls.n	8000296 <__udivmoddi4+0xe6>
 8000286:	197d      	adds	r5, r7, r5
 8000288:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800028c:	d202      	bcs.n	8000294 <__udivmoddi4+0xe4>
 800028e:	42a8      	cmp	r0, r5
 8000290:	f200 80e9 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 8000294:	4694      	mov	ip, r2
 8000296:	1a2d      	subs	r5, r5, r0
 8000298:	fbb5 f0fe 	udiv	r0, r5, lr
 800029c:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002aa:	45a0      	cmp	r8, r4
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0x10e>
 80002ae:	193c      	adds	r4, r7, r4
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b4:	d202      	bcs.n	80002bc <__udivmoddi4+0x10c>
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	f200 80d9 	bhi.w	800046e <__udivmoddi4+0x2be>
 80002bc:	4610      	mov	r0, r2
 80002be:	eba4 0408 	sub.w	r4, r4, r8
 80002c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c6:	e7c0      	b.n	800024a <__udivmoddi4+0x9a>
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d908      	bls.n	80002de <__udivmoddi4+0x12e>
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	f000 80b1 	beq.w	8000434 <__udivmoddi4+0x284>
 80002d2:	2100      	movs	r1, #0
 80002d4:	e9c6 0500 	strd	r0, r5, [r6]
 80002d8:	4608      	mov	r0, r1
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d14b      	bne.n	800037e <__udivmoddi4+0x1ce>
 80002e6:	42ab      	cmp	r3, r5
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0x140>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80b9 	bhi.w	8000462 <__udivmoddi4+0x2b2>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb65 0303 	sbc.w	r3, r5, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0aa      	beq.n	8000254 <__udivmoddi4+0xa4>
 80002fe:	e9c6 4e00 	strd	r4, lr, [r6]
 8000302:	e7a7      	b.n	8000254 <__udivmoddi4+0xa4>
 8000304:	409f      	lsls	r7, r3
 8000306:	f1c3 0220 	rsb	r2, r3, #32
 800030a:	40d1      	lsrs	r1, r2
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	fbb1 f0fe 	udiv	r0, r1, lr
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	fa24 f202 	lsr.w	r2, r4, r2
 8000320:	409d      	lsls	r5, r3
 8000322:	fb00 fc08 	mul.w	ip, r0, r8
 8000326:	432a      	orrs	r2, r5
 8000328:	0c15      	lsrs	r5, r2, #16
 800032a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032e:	45ac      	cmp	ip, r5
 8000330:	fa04 f403 	lsl.w	r4, r4, r3
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x19a>
 8000336:	197d      	adds	r5, r7, r5
 8000338:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800033c:	f080 808f 	bcs.w	800045e <__udivmoddi4+0x2ae>
 8000340:	45ac      	cmp	ip, r5
 8000342:	f240 808c 	bls.w	800045e <__udivmoddi4+0x2ae>
 8000346:	3802      	subs	r0, #2
 8000348:	443d      	add	r5, r7
 800034a:	eba5 050c 	sub.w	r5, r5, ip
 800034e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000352:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000356:	fb01 f908 	mul.w	r9, r1, r8
 800035a:	b295      	uxth	r5, r2
 800035c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000360:	45a9      	cmp	r9, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x1c4>
 8000364:	197d      	adds	r5, r7, r5
 8000366:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800036a:	d274      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 800036c:	45a9      	cmp	r9, r5
 800036e:	d972      	bls.n	8000456 <__udivmoddi4+0x2a6>
 8000370:	3902      	subs	r1, #2
 8000372:	443d      	add	r5, r7
 8000374:	eba5 0509 	sub.w	r5, r5, r9
 8000378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800037c:	e778      	b.n	8000270 <__udivmoddi4+0xc0>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	408b      	lsls	r3, r1
 8000384:	fa22 fc07 	lsr.w	ip, r2, r7
 8000388:	ea4c 0c03 	orr.w	ip, ip, r3
 800038c:	fa25 f407 	lsr.w	r4, r5, r7
 8000390:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000394:	fbb4 f9fe 	udiv	r9, r4, lr
 8000398:	fa1f f88c 	uxth.w	r8, ip
 800039c:	fb0e 4419 	mls	r4, lr, r9, r4
 80003a0:	fa20 f307 	lsr.w	r3, r0, r7
 80003a4:	fb09 fa08 	mul.w	sl, r9, r8
 80003a8:	408d      	lsls	r5, r1
 80003aa:	431d      	orrs	r5, r3
 80003ac:	0c2b      	lsrs	r3, r5, #16
 80003ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b2:	45a2      	cmp	sl, r4
 80003b4:	fa02 f201 	lsl.w	r2, r2, r1
 80003b8:	fa00 f301 	lsl.w	r3, r0, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x222>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c6:	d248      	bcs.n	800045a <__udivmoddi4+0x2aa>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d946      	bls.n	800045a <__udivmoddi4+0x2aa>
 80003cc:	f1a9 0902 	sub.w	r9, r9, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	eba4 040a 	sub.w	r4, r4, sl
 80003d6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003da:	fb0e 4410 	mls	r4, lr, r0, r4
 80003de:	fb00 fa08 	mul.w	sl, r0, r8
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x24e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003f4:	d22d      	bcs.n	8000452 <__udivmoddi4+0x2a2>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d92b      	bls.n	8000452 <__udivmoddi4+0x2a2>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c6      	mov	lr, r8
 800040e:	464d      	mov	r5, r9
 8000410:	d319      	bcc.n	8000446 <__udivmoddi4+0x296>
 8000412:	d016      	beq.n	8000442 <__udivmoddi4+0x292>
 8000414:	b15e      	cbz	r6, 800042e <__udivmoddi4+0x27e>
 8000416:	ebb3 020e 	subs.w	r2, r3, lr
 800041a:	eb64 0405 	sbc.w	r4, r4, r5
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431f      	orrs	r7, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c6 7400 	strd	r7, r4, [r6]
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70c      	b.n	8000254 <__udivmoddi4+0xa4>
 800043a:	468c      	mov	ip, r1
 800043c:	e6eb      	b.n	8000216 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6ff      	b.n	8000242 <__udivmoddi4+0x92>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e6      	bcs.n	8000414 <__udivmoddi4+0x264>
 8000446:	ebb8 0e02 	subs.w	lr, r8, r2
 800044a:	eb69 050c 	sbc.w	r5, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7e0      	b.n	8000414 <__udivmoddi4+0x264>
 8000452:	4628      	mov	r0, r5
 8000454:	e7d3      	b.n	80003fe <__udivmoddi4+0x24e>
 8000456:	4611      	mov	r1, r2
 8000458:	e78c      	b.n	8000374 <__udivmoddi4+0x1c4>
 800045a:	4681      	mov	r9, r0
 800045c:	e7b9      	b.n	80003d2 <__udivmoddi4+0x222>
 800045e:	4608      	mov	r0, r1
 8000460:	e773      	b.n	800034a <__udivmoddi4+0x19a>
 8000462:	4608      	mov	r0, r1
 8000464:	e749      	b.n	80002fa <__udivmoddi4+0x14a>
 8000466:	f1ac 0c02 	sub.w	ip, ip, #2
 800046a:	443d      	add	r5, r7
 800046c:	e713      	b.n	8000296 <__udivmoddi4+0xe6>
 800046e:	3802      	subs	r0, #2
 8000470:	443c      	add	r4, r7
 8000472:	e724      	b.n	80002be <__udivmoddi4+0x10e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 f805 	bl	80004ac <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
    }
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f9ac 	bl	800083c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f98a 	bl	8000812 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ffeb 	bl	80004ee <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f991 	bl	8000854 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f9aa 	bl	800089e <_ZNSaIhED1Ev>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f98d 	bl	800087e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ffeb 	bl	8000554 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>:


std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <_ZN4UARTC1EP20__UART_HandleTypeDef+0x30>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3308      	adds	r3, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffe6 	bl	800056e <_ZNSt6vectorIhSaIhEEC1Ev>
	this->handle = handle;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
	uartBuff = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
}
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800d8d8 	.word	0x0800d8d8

080005bc <_ZN4UARTD1Ev>:

UART::~UART() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <_ZN4UARTD1Ev+0x80>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
	if (uartBuff != NULL) free(uartBuff);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <_ZN4UARTD1Ev+0x20>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00c ff7c 	bl	800d4d4 <free>

	HAL_UART_AbortReceive_IT(handle);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fb71 	bl	8005cc8 <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f996 	bl	800091c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle->Instance);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 80005f8:	f000 f99d 	bl	8000936 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 8000602:	f000 f9a7 	bl	8000954 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8000606:	4603      	mov	r3, r0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f9aa 	bl	800096e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <_ZN4UARTD1Ev+0x6c>
		objectMap.erase(it);
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <_ZN4UARTD1Ev+0x84>)
 8000624:	f000 f9b6 	bl	8000994 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
UART::~UART() {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3308      	adds	r3, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f95a 	bl	80008e6 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800d8d8 	.word	0x0800d8d8
 8000640:	20000218 	.word	0x20000218

08000644 <_ZN4UARTD0Ev>:
UART::~UART() {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
}
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffb5 	bl	80005bc <_ZN4UARTD1Ev>
 8000652:	2120      	movs	r1, #32
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f00c fd4f 	bl	800d0f8 <_ZdlPvj>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <_ZN4UART4initEP13USART_TypeDefii>:

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	619a      	str	r2, [r3, #24]

	uartBuff = (uint8_t*)calloc(this->packetSize_Bytes+1, sizeof(uint8_t));
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	3301      	adds	r3, #1
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f00c feed 	bl	800d460 <calloc>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	615a      	str	r2, [r3, #20]

	handle->Instance = port;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	601a      	str	r2, [r3, #0]
	handle->Init.BaudRate = baud;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	605a      	str	r2, [r3, #4]
	handle->Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
	handle->Init.StopBits = UART_STOPBITS_1;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	handle->Init.Parity = UART_PARITY_NONE;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
	handle->Init.Mode = UART_MODE_TX_RX;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
	handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
	handle->Init.OverSampling = UART_OVERSAMPLING_16;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(handle) != HAL_OK)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f9e8 	bl	8005aa8 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <_ZN4UART4initEP13USART_TypeDefii+0x8a>
	{
		return -1;
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ec:	e01e      	b.n	800072c <_ZN4UART4initEP13USART_TypeDefii+0xc8>
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
 80006f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f956 	bl	80009b2 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	f107 021c 	add.w	r2, r7, #28
 800070e:	4909      	ldr	r1, [pc, #36]	; (8000734 <_ZN4UART4initEP13USART_TypeDefii+0xd0>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f967 	bl	80009e4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6959      	ldr	r1, [r3, #20]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	b29b      	uxth	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	f005 fa9e 	bl	8005c66 <HAL_UART_Receive_IT>
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000218 	.word	0x20000218

08000738 <_ZN4UART7hasDataEv>:

bool UART::hasData() {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(handle);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fabf 	bl	8005cc8 <HAL_UART_AbortReceive_IT>
	bool tmp = dataReady;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7f1b      	ldrb	r3, [r3, #28]
 800074e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6858      	ldr	r0, [r3, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6959      	ldr	r1, [r3, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	b29b      	uxth	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	f005 fa81 	bl	8005c66 <HAL_UART_Receive_IT>
	return tmp;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_ZN4UART7getDataEPh>:

int UART::getData(uint8_t *buff) {
 800076e:	b590      	push	{r4, r7, lr}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	HAL_UART_AbortReceive_IT(handle);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	f005 faa3 	bl	8005cc8 <HAL_UART_AbortReceive_IT>

	memset(buff, '\0', sizeof(buff));
 8000782:	2204      	movs	r2, #4
 8000784:	2100      	movs	r1, #0
 8000786:	6838      	ldr	r0, [r7, #0]
 8000788:	f00c fed4 	bl	800d534 <memset>
	int len = msgBuff.size();
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3308      	adds	r3, #8
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f93b 	bl	8000a0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000796:	4603      	mov	r3, r0
 8000798:	60fb      	str	r3, [r7, #12]
	std::copy(msgBuff.begin(), msgBuff.end(), buff);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3308      	adds	r3, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f942 	bl	8000a28 <_ZNSt6vectorIhSaIhEE5beginEv>
 80007a4:	4604      	mov	r4, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3308      	adds	r3, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f94c 	bl	8000a48 <_ZNSt6vectorIhSaIhEE3endEv>
 80007b0:	4603      	mov	r3, r0
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4620      	mov	r0, r4
 80007b8:	f000 f957 	bl	8000a6a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>
	msgBuff.clear();
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3308      	adds	r3, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f96a 	bl	8000a9a <_ZNSt6vectorIhSaIhEE5clearEv>
	dataReady = false;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6858      	ldr	r0, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6959      	ldr	r1, [r3, #20]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	f005 fa43 	bl	8005c66 <HAL_UART_Receive_IT>
	return len;
 80007e0:	68fb      	ldr	r3, [r7, #12]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}

080007ea <_ZN4UART8sendDataEPhii>:

short UART::sendData(uint8_t *data, int numBytes, int timeout) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(handle, data, numBytes, timeout);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6858      	ldr	r0, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	f005 f99d 	bl	8005b42 <HAL_UART_Transmit>

	return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f94b 	bl	8000ab6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f953 	bl	8000ace <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3304      	adds	r3, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fe2e 	bl	800048e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f94c 	bl	8000ae2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f969 	bl	8000b34 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000862:	4603      	mov	r3, r0
 8000864:	4619      	mov	r1, r3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 f945 	bl	8000af6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe31 	bl	80004d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f95f 	bl	8000b4a <_ZNSaIhEC1Ev>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f967 	bl	8000b62 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_ZNSaIhED1Ev>:
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f96e 	bl	8000b88 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80008cc:	461a      	mov	r2, r3
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f964 	bl	8000b9c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe30 	bl	800053c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80008e6:	b5b0      	push	{r4, r5, r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681c      	ldr	r4, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f962 	bl	8000bc2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80008fe:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000900:	461a      	mov	r2, r3
 8000902:	4629      	mov	r1, r5
 8000904:	4620      	mov	r0, r4
 8000906:	f000 f966 	bl	8000bd6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffd2 	bl	80008b6 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bdb0      	pop	{r4, r5, r7, pc}

0800091c <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6839      	ldr	r1, [r7, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f954 	bl	8000bf2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800094a:	4603      	mov	r3, r0
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f986 	bl	8000c70 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000964:	4603      	mov	r3, r0
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6839      	ldr	r1, [r7, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f975 	bl	8000c92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80009be:	68b8      	ldr	r0, [r7, #8]
 80009c0:	f000 f983 	bl	8000cca <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80009c4:	4603      	mov	r3, r0
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f986 	bl	8000cde <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 80009d2:	4603      	mov	r3, r0
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>:
	insert(_Pair&& __x)
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 80009f0:	68bc      	ldr	r4, [r7, #8]
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 f97d 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4621      	mov	r1, r4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f981 	bl	8000d06 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f9ae 	bl	8000d9a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1d1a      	adds	r2, r3, #4
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f99d 	bl	8000d9a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000a6a:	b590      	push	{r4, r7, lr}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f99e 	bl	8000db8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	68b8      	ldr	r0, [r7, #8]
 8000a80:	f000 f99a 	bl	8000db8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8000a84:	4603      	mov	r3, r0
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f000 f99e 	bl	8000dcc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>
 8000a90:	4603      	mov	r3, r0
    }
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}

08000a9a <_ZNSt6vectorIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f9b2 	bl	8000e12 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f9c7 	bl	8000e52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
      { }
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d012      	beq.n	8000b2c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f000 f9ad 	bl	8000e66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fff0 	bl	8000af6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f000 f9b0 	bl	8000e7c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000b1c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f9b6 	bl	8000e92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000b2a:	e7e9      	b.n	8000b00 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <_ZNSaIhEC1Ev>:
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f9ae 	bl	8000eb4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	{ }
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	if (__p)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d005      	beq.n	8000bba <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f987 	bl	8000ec8 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f000 f97e 	bl	8000ee6 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bf2:	b5b0      	push	{r4, r5, r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff99 	bl	8000b34 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000c02:	4604      	mov	r4, r0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f97b 	bl	8000f00 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	4621      	mov	r1, r4
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f980 	bl	8000f16 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8000c16:	4603      	mov	r3, r0
 8000c18:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f828 	bl	8000c70 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000c20:	4603      	mov	r3, r0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	f107 020c 	add.w	r2, r7, #12
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f9a4 	bl	8000f7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8000c34:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d110      	bne.n	8000c5c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8000c3a:	687c      	ldr	r4, [r7, #4]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f9ad 	bl	8000fa2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000c48:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4629      	mov	r1, r5
 8000c50:	4620      	mov	r0, r4
 8000c52:	f000 f9b2 	bl	8000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f807 	bl	8000c70 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000c62:	4603      	mov	r3, r0
 8000c64:	e000      	b.n	8000c68 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8000c66:	68bb      	ldr	r3, [r7, #8]
    }
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bdb0      	pop	{r4, r5, r7, pc}

08000c70 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1d1a      	adds	r2, r3, #4
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f9ab 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	60bb      	str	r3, [r7, #8]
	++__result;
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f9a8 	bl	8000ffa <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 8000caa:	463a      	mov	r2, r7
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f9b2 	bl	800101c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8000cb8:	68f9      	ldr	r1, [r7, #12]
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f9bd 	bl	800103a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
      }
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b08c      	sub	sp, #48	; 0x30
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffed 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	68b8      	ldr	r0, [r7, #8]
 8000d1e:	f000 f9a6 	bl	800106e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000d22:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 8000d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d26:	f000 fa43 	bl	80011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f9b2 	bl	800109c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	    if (__res.second)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d013      	beq.n	8000d66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8000d3e:	6979      	ldr	r1, [r7, #20]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	68b8      	ldr	r0, [r7, #8]
 8000d46:	f000 fa46 	bl	80011d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d54:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fa78 	bl	8001254 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
 8000d64:	e015      	b.n	8000d92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8000d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	f000 f892 	bl	8000e92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return _Res(iterator(__res.first), false);
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f931 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d82:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f000 fa61 	bl	8001254 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 fa54 	bl	8001286 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000dde:	4604      	mov	r4, r0
 8000de0:	68b8      	ldr	r0, [r7, #8]
 8000de2:	f000 fa50 	bl	8001286 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000de6:	4605      	mov	r5, r0
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fa59 	bl	80012a2 <_ZSt12__niter_baseIPhET_S1_>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4629      	mov	r1, r5
 8000df6:	4620      	mov	r0, r4
 8000df8:	f000 fa5d 	bl	80012b6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fa69 	bl	80012da <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8000e08:	4603      	mov	r3, r0
    }
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}

08000e12 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000e12:	b590      	push	{r4, r7, lr}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00e      	beq.n	8000e4a <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fec5 	bl	8000bc2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000e38:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	6838      	ldr	r0, [r7, #0]
 8000e40:	f7ff fec9 	bl	8000bd6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}

08000e52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 fa30 	bl	8001304 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fa41 	bl	800132e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f000 fa3a 	bl	8001352 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000ef0:	6839      	ldr	r1, [r7, #0]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 fa3a 	bl	800136c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f16:	b590      	push	{r4, r7, lr}
 8000f18:	b087      	sub	sp, #28
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01d      	beq.n	8000f66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8000f2a:	68fc      	ldr	r4, [r7, #12]
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f000 f93f 	bl	80011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f32:	4603      	mov	r3, r0
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f000 f83c 	bl	8000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	f7ff ff92 	bl	8000e7c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000f58:	60b8      	str	r0, [r7, #8]
 8000f5a:	e7e3      	b.n	8000f24 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f7ff ff82 	bl	8000e66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000f62:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8000f64:	e7de      	b.n	8000f24 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f836 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 8000f72:	697b      	ldr	r3, [r7, #20]
    }
 8000f74:	4618      	mov	r0, r3
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f900 	bl	80011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	bf34      	ite	cc
 8000fce:	2301      	movcc	r3, #1
 8000fd0:	2300      	movcs	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
      }
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f00c f8cb 	bl	800d1a2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
	return *this;
 8001012:	687b      	ldr	r3, [r7, #4]
      }
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 8001044:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f00c f919 	bl	800d284 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 8001052:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 8001054:	68f9      	ldr	r1, [r7, #12]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff1b 	bl	8000e92 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	615a      	str	r2, [r3, #20]
    }
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f981 	bl	8001380 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800107e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff fe36 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f988 	bl	80013a2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001092:	68fb      	ldr	r3, [r7, #12]
	}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f7ff fd43 	bl	8000b34 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80010ae:	4603      	mov	r3, r0
 80010b0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80010b2:	68b8      	ldr	r0, [r7, #8]
 80010b4:	f7ff ff24 	bl	8000f00 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80010cc:	68bc      	ldr	r4, [r7, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681d      	ldr	r5, [r3, #0]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f86b 	bl	80011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80010da:	4603      	mov	r3, r0
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4629      	mov	r1, r5
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff ff69 	bl	8000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80010ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff febf 	bl	8000e7c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80010fe:	4603      	mov	r3, r0
 8001100:	e004      	b.n	800110c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff feae 	bl	8000e66 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800110a:	4603      	mov	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800110e:	e7d8      	b.n	80010c2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff60 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01d      	beq.n	8001162 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 f95b 	bl	80013e2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800112c:	4603      	mov	r3, r0
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	f107 021c 	add.w	r2, r7, #28
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff1e 	bl	8000f7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001146:	f107 0214 	add.w	r2, r7, #20
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4619      	mov	r1, r3
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f957 	bl	8001404 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001156:	e027      	b.n	80011a8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f96a 	bl	8001436 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001162:	68bc      	ldr	r4, [r7, #8]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff1b 	bl	8000fa2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800116c:	4603      	mov	r3, r0
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff ff1f 	bl	8000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001182:	f107 0214 	add.w	r2, r7, #20
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4619      	mov	r1, r3
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f939 	bl	8001404 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 8001192:	e009      	b.n	80011a8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	f107 0220 	add.w	r2, r7, #32
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 f958 	bl	8001458 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}

080011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f963 	bl	8001484 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 80011be:	4602      	mov	r2, r0
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f96a 	bl	80014a0 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 80011cc:	4603      	mov	r3, r0
      }
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80011d6:	b5b0      	push	{r4, r5, r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d119      	bne.n	800121e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fe88 	bl	8000f00 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 80011f8:	68fc      	ldr	r4, [r7, #12]
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff ffd8 	bl	80011b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001200:	4603      	mov	r3, r0
 8001202:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fecc 	bl	8000fa2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800120a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4629      	mov	r1, r5
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff fed1 	bl	8000fba <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001222:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001224:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800122a:	7df8      	ldrb	r0, [r7, #23]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	f00b ffcc 	bl	800d1cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff feca 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800124a:	693b      	ldr	r3, [r7, #16]
    }
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bdb0      	pop	{r4, r5, r7, pc}

08001254 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f000 f928 	bl	80014b6 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f92b 	bl	80014ca <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001274:	4603      	mov	r3, r0
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	711a      	strb	r2, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f82d 	bl	80012f0 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001296:	4603      	mov	r3, r0
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f907 	bl	80014de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80012d0:	4603      	mov	r3, r0
    }
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
    { return __res; }
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8ff 	bl	8001512 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001314:	4604      	mov	r4, r0
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f000 f905 	bl	8001526 <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f000 f90e 	bl	8001542 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}

0800132e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f8ea 	bl	8001512 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800133e:	4603      	mov	r3, r0
 8001340:	2201      	movs	r2, #1
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f909 	bl	800155c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f00b fec8 	bl	800d0f4 <_ZdlPv>
      }
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8c2 	bl	8001512 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800138e:	4603      	mov	r3, r0
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f8f1 	bl	800157a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80013a2:	b5b0      	push	{r4, r5, r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2018      	movs	r0, #24
 80013b4:	f7ff f860 	bl	8000478 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f8aa 	bl	8001512 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80013be:	4604      	mov	r4, r0
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f000 f8b0 	bl	8001526 <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 80013c6:	4605      	mov	r5, r0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fc92 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4629      	mov	r1, r5
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 f8df 	bl	8001598 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>
	}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}

080013e2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fdf2 	bl	8000fde <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f000 f8d4 	bl	80015be <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>
 8001416:	4603      	mov	r3, r0
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f8d7 	bl	80015d2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001424:	4603      	mov	r3, r0
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f00b fec0 	bl	800d1c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
	return *this;
 800144e:	687b      	ldr	r3, [r7, #4]
      }
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f000 f8b4 	bl	80015d2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800146a:	4603      	mov	r3, r0
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3310      	adds	r3, #16
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f8a8 	bl	80015e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 8001496:	4603      	mov	r3, r0
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f00b fffe 	bl	800d500 <memmove>
	  return __result + _Num;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
	}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3310      	adds	r3, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f863 	bl	80015fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f861 	bl	8001616 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f85c 	bl	800162a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001584:	2200      	movs	r2, #0
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f85b 	bl	8001644 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>
 800158e:	4603      	mov	r3, r0
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fba4 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f868 	bl	8001686 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f861 	bl	80016b6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f85f 	bl	80016ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 800160c:	4603      	mov	r3, r0
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f00b fd5c 	bl	800d0f4 <_ZdlPv>
      }
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f845 	bl	80016e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>
 8001656:	4602      	mov	r2, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4293      	cmp	r3, r2
 800165c:	bf8c      	ite	hi
 800165e:	2301      	movhi	r3, #1
 8001660:	2300      	movls	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001668:	f00b fee6 	bl	800d438 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4618      	mov	r0, r3
 8001678:	f00b fd40 	bl	800d0fc <_Znwj>
 800167c:	4603      	mov	r3, r0
      }
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fb2d 	bl	8000cf2 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001698:	4604      	mov	r4, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4619      	mov	r1, r3
 800169e:	2008      	movs	r0, #8
 80016a0:	f7fe feea 	bl	8000478 <_ZnwjPv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4621      	mov	r1, r4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f825 	bl	80016f8 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}

080016b6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv+0x14>)
      }
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	05555555 	.word	0x05555555

080016f8 <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f812 	bl	800172e <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800170a:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3304      	adds	r3, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fae1 	bl	8000cde <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 800171c:	4603      	mov	r3, r0
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <_Z41__static_initialization_and_destruction_0ii>:
	for (int i=0; i<packetSize_Bytes; ++i) {
		msgBuff.push_back(uartBuff[i]);
	}

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
}
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d110      	bne.n	8001776 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175a:	4293      	cmp	r3, r2
 800175c:	d10b      	bne.n	8001776 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001760:	461a      	mov	r2, r3
 8001762:	2300      	movs	r3, #0
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	6053      	str	r3, [r2, #4]
 8001768:	6093      	str	r3, [r2, #8]
 800176a:	60d3      	str	r3, [r2, #12]
 800176c:	6113      	str	r3, [r2, #16]
 800176e:	6153      	str	r3, [r2, #20]
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001772:	f7fe fec9 	bl	8000508 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <_Z41__static_initialization_and_destruction_0ii+0x48>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <_Z41__static_initialization_and_destruction_0ii+0x48>
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001788:	f7fe fecb 	bl	8000522 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000218 	.word	0x20000218

08001798 <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
 800179c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff ffcf 	bl	8001744 <_Z41__static_initialization_and_destruction_0ii>
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ffc7 	bl	8001744 <_Z41__static_initialization_and_destruction_0ii>
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f000 fdeb 	bl	8002396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 f838 	bl	8001834 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f000 f962 	bl	8001a8c <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 80017c8:	f000 f88e 	bl	80018e8 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 80017cc:	f000 f8ee 	bl	80019ac <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 80017d0:	f000 f920 	bl	8001a14 <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 80017d4:	f006 fec4 	bl	8008560 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80017d8:	f00a ff80 	bl	800c6dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ble.init(USART1, 9600, 1);
 80017dc:	2301      	movs	r3, #1
 80017de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017e2:	490c      	ldr	r1, [pc, #48]	; (8001814 <main+0x5c>)
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <main+0x60>)
 80017e6:	f7fe ff3d 	bl	8000664 <_ZN4UART4initEP13USART_TypeDefii>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017ea:	f008 fa6f 	bl	8009ccc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <main+0x64>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <main+0x68>)
 80017f4:	f008 fad0 	bl	8009d98 <osThreadNew>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <main+0x6c>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ledDisplayHandle = osThreadNew(StartLEDDisplay, NULL, &ledDisplay_attributes);
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <main+0x70>)
 8001800:	2100      	movs	r1, #0
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <main+0x74>)
 8001804:	f008 fac8 	bl	8009d98 <osThreadNew>
 8001808:	4603      	mov	r3, r0
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <main+0x78>)
 800180c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800180e:	f008 fa8f 	bl	8009d30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0x5a>
 8001814:	40013800 	.word	0x40013800
 8001818:	20000418 	.word	0x20000418
 800181c:	0800d8e0 	.word	0x0800d8e0
 8001820:	08001bcd 	.word	0x08001bcd
 8001824:	20000438 	.word	0x20000438
 8001828:	0800d904 	.word	0x0800d904
 800182c:	08001c81 	.word	0x08001c81
 8001830:	2000043c 	.word	0x2000043c

08001834 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b092      	sub	sp, #72	; 0x48
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f00b fe76 	bl	800d534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <_Z18SystemClock_Configv+0xb0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <_Z18SystemClock_Configv+0xb0>)
 8001860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001864:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001866:	2303      	movs	r3, #3
 8001868:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186e:	2301      	movs	r3, #1
 8001870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001872:	2310      	movs	r3, #16
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	2302      	movs	r3, #2
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001884:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f8c5 	bl	8004a20 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 80018a6:	f000 fa21 	bl	8001cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fbdc 	bl	8005080 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80018d8:	f000 fa08 	bl	8001cec <Error_Handler>
  }
}
 80018dc:	bf00      	nop
 80018de:	3748      	adds	r7, #72	; 0x48
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40007000 	.word	0x40007000

080018e8 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 80018fa:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <_ZL11MX_ADC_Initv+0xc0>)
 80018fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018fe:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001938:	2201      	movs	r2, #1
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001946:	2210      	movs	r2, #16
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 800195a:	f000 fd73 	bl	8002444 <HAL_ADC_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 800196e:	f000 f9bd 	bl	8001cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001972:	2309      	movs	r3, #9
 8001974:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001976:	2301      	movs	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <_ZL11MX_ADC_Initv+0xbc>)
 8001984:	f000 fea4 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 8001998:	f000 f9a8 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000270 	.word	0x20000270
 80019a8:	40012400 	.word	0x40012400

080019ac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <_ZL12MX_I2C1_Initv+0x60>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <_ZL12MX_I2C1_Initv+0x64>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ea:	f001 faa9 	bl	8002f40 <HAL_I2C_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80019fe:	f000 f975 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002c4 	.word	0x200002c4
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <_ZL12MX_SPI1_Initv+0x74>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a60:	220a      	movs	r2, #10
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a66:	f003 fda7 	bl	80055b8 <HAL_SPI_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001a7a:	f000 f937 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000318 	.word	0x20000318
 8001a88:	40013000 	.word	0x40013000

08001a8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a39      	ldr	r2, [pc, #228]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <_ZL12MX_GPIO_Initv+0x130>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <_ZL12MX_GPIO_Initv+0x134>)
 8001b0a:	f001 f9e8 	bl	8002ede <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f240 1103 	movw	r1, #259	; 0x103
 8001b14:	482b      	ldr	r0, [pc, #172]	; (8001bc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001b16:	f001 f9e2 	bl	8002ede <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f64d 2101 	movw	r1, #55809	; 0xda01
 8001b20:	4829      	ldr	r0, [pc, #164]	; (8001bc8 <_ZL12MX_GPIO_Initv+0x13c>)
 8001b22:	f001 f9dc 	bl	8002ede <HAL_GPIO_WritePin>
                          |BLE_EN_Pin|PWR_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 8001b26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <_ZL12MX_GPIO_Initv+0x134>)
 8001b40:	f001 f836 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_G_Pin PWR_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWR_LED_G_Pin|PWR_LED_R_Pin|GPS_LED_G_Pin;
 8001b44:	f240 1303 	movw	r3, #259	; 0x103
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4819      	ldr	r0, [pc, #100]	; (8001bc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001b5e:	f001 f827 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BAT_P_Pin */
  GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8001b62:	2310      	movs	r3, #16
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b66:	2303      	movs	r3, #3
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001b76:	f001 f81b 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SD_CS_Pin MLX_TRIG_Pin SD_LED_G_Pin BLE_STATUS_Pin
                           BLE_EN_Pin PWR_LED_B_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_STATUS_Pin
 8001b7a:	f64d 2301 	movw	r3, #55809	; 0xda01
 8001b7e:	617b      	str	r3, [r7, #20]
                          |BLE_EN_Pin|PWR_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <_ZL12MX_GPIO_Initv+0x13c>)
 8001b94:	f001 f80c 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MLX_RDY_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MLX_RDY_Pin|BLE_INT_Pin;
 8001b98:	f242 4304 	movw	r3, #9220	; 0x2404
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <_ZL12MX_GPIO_Initv+0x13c>)
 8001bae:	f000 ffff 	bl	8002bb0 <HAL_GPIO_Init>

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400

08001bcc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bd4:	f00a fd82 	bl	800c6dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  uint8_t buff[10] = "+++";//{0};
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <_Z16StartDefaultTaskPv+0xa4>)
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	809a      	strh	r2, [r3, #4]

  HAL_GPIO_WritePin(BLE_EN_GPIO_Port, BLE_EN_Pin, GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bec:	4821      	ldr	r0, [pc, #132]	; (8001c74 <_Z16StartDefaultTaskPv+0xa8>)
 8001bee:	f001 f976 	bl	8002ede <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8001bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf6:	f000 fc03 	bl	8002400 <HAL_Delay>
  ble.sendData(buff, sizeof(buff), 100);
 8001bfa:	f107 010c 	add.w	r1, r7, #12
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	220a      	movs	r2, #10
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <_Z16StartDefaultTaskPv+0xac>)
 8001c04:	f7fe fdf1 	bl	80007ea <_ZN4UART8sendDataEPhii>
  CDC_Transmit_FS(buff, sizeof(buff));
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00a fe44 	bl	800c89c <CDC_Transmit_FS>
  /* Infinite loop */
  for(;;)
  {
	  //CDC_Transmit_FS(buff, sizeof(buff));

	  if(CDC_ReadLine(usbBuffer)) {
 8001c14:	4819      	ldr	r0, [pc, #100]	; (8001c7c <_Z16StartDefaultTaskPv+0xb0>)
 8001c16:	f00a fe67 	bl	800c8e8 <CDC_ReadLine>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <_Z16StartDefaultTaskPv+0x76>
		  //int len = usb.getData(buff);
		  CDC_Transmit_FS(usbBuffer, sizeof(usbBuffer));
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	4813      	ldr	r0, [pc, #76]	; (8001c7c <_Z16StartDefaultTaskPv+0xb0>)
 8001c2e:	f00a fe35 	bl	800c89c <CDC_Transmit_FS>
		  ble.sendData(usbBuffer, sizeof(usbBuffer), 100);
 8001c32:	2364      	movs	r3, #100	; 0x64
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	4911      	ldr	r1, [pc, #68]	; (8001c7c <_Z16StartDefaultTaskPv+0xb0>)
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <_Z16StartDefaultTaskPv+0xac>)
 8001c3a:	f7fe fdd6 	bl	80007ea <_ZN4UART8sendDataEPhii>

		  CDC_ClearBuffer();
 8001c3e:	f00a fe7b 	bl	800c938 <CDC_ClearBuffer>
	  }
	  if(ble.hasData()) {
 8001c42:	480d      	ldr	r0, [pc, #52]	; (8001c78 <_Z16StartDefaultTaskPv+0xac>)
 8001c44:	f7fe fd78 	bl	8000738 <_ZN4UART7hasDataEv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <_Z16StartDefaultTaskPv+0x9a>
		  ble.getData(buff);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <_Z16StartDefaultTaskPv+0xac>)
 8001c56:	f7fe fd8a 	bl	800076e <_ZN4UART7getDataEPh>
		  CDC_Transmit_FS(buff, sizeof(buff));
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	210a      	movs	r1, #10
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00a fe1b 	bl	800c89c <CDC_Transmit_FS>
		  //usb.sendData(buff, len, 2);
	  }
	  osDelay(10);
 8001c66:	200a      	movs	r0, #10
 8001c68:	f008 f940 	bl	8009eec <osDelay>
	  if(CDC_ReadLine(usbBuffer)) {
 8001c6c:	e7d2      	b.n	8001c14 <_Z16StartDefaultTaskPv+0x48>
 8001c6e:	bf00      	nop
 8001c70:	002b2b2b 	.word	0x002b2b2b
 8001c74:	40020400 	.word	0x40020400
 8001c78:	20000418 	.word	0x20000418
 8001c7c:	20000230 	.word	0x20000230

08001c80 <_Z15StartLEDDisplayPv>:
  }
  /* USER CODE END 5 */
}

void StartLEDDisplay(void *arguments) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_GPIO_TogglePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin);
 8001c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <_Z15StartLEDDisplayPv+0x40>)
 8001c8e:	f001 f93e 	bl	8002f0e <HAL_GPIO_TogglePin>
	if(HAL_GPIO_ReadPin(BLE_STATUS_GPIO_Port, BLE_STATUS_Pin) == GPIO_PIN_SET) osDelay(100);
 8001c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <_Z15StartLEDDisplayPv+0x44>)
 8001c98:	f001 f90a 	bl	8002eb0 <HAL_GPIO_ReadPin>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <_Z15StartLEDDisplayPv+0x34>
 8001cac:	2064      	movs	r0, #100	; 0x64
 8001cae:	f008 f91d 	bl	8009eec <osDelay>
 8001cb2:	e7e9      	b.n	8001c88 <_Z15StartLEDDisplayPv+0x8>
	else osDelay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f008 f918 	bl	8009eec <osDelay>
	HAL_GPIO_TogglePin(BLE_LED_G_GPIO_Port, BLE_LED_G_Pin);
 8001cbc:	e7e4      	b.n	8001c88 <_Z15StartLEDDisplayPv+0x8>
 8001cbe:	bf00      	nop
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cda:	f000 fb75 	bl	80023c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40011000 	.word	0x40011000

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10c      	bne.n	8001d22 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d107      	bne.n	8001d22 <_Z41__static_initialization_and_destruction_0ii+0x2a>
UART usb(&huart1), ble(&huart2);
 8001d12:	490d      	ldr	r1, [pc, #52]	; (8001d48 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001d16:	f7fe fc37 	bl	8000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001d1e:	f7fe fc33 	bl	8000588 <_ZN4UARTC1EP20__UART_HandleTypeDef>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d105      	bne.n	8001d3e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001d34:	f7fe fc42 	bl	80005bc <_ZN4UARTD1Ev>
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001d3a:	f7fe fc3f 	bl	80005bc <_ZN4UARTD1Ev>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000370 	.word	0x20000370
 8001d4c:	200003f8 	.word	0x200003f8
 8001d50:	200003b4 	.word	0x200003b4
 8001d54:	20000418 	.word	0x20000418

08001d58 <_GLOBAL__sub_I_usbBuffer>:
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff ffc9 	bl	8001cf8 <_Z41__static_initialization_and_destruction_0ii>
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_GLOBAL__sub_D_usbBuffer>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ffc1 	bl	8001cf8 <_Z41__static_initialization_and_destruction_0ii>
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_MspInit+0x64>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_MspInit+0x64>)
 8001d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d88:	6253      	str	r3, [r2, #36]	; 0x24
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_MspInit+0x64>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_MspInit+0x64>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_MspInit+0x64>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_MspInit+0x64>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_MspInit+0x64>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_MspInit+0x64>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6253      	str	r3, [r2, #36]	; 0x24
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_MspInit+0x64>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210f      	movs	r1, #15
 8001dca:	f06f 0001 	mvn.w	r0, #1
 8001dce:	f000 fe84 	bl	8002ada <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_ADC_MspInit+0xa4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d13b      	bne.n	8001e7a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_ADC_MspInit+0xa8>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <HAL_ADC_MspInit+0xac>)
 8001e5e:	f000 fea7 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 8001e62:	2302      	movs	r3, #2
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <HAL_ADC_MspInit+0xb0>)
 8001e76:	f000 fe9b 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40012400 	.word	0x40012400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_I2C_MspInit+0x7c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d127      	bne.n	8001f06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed2:	2312      	movs	r3, #18
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <HAL_I2C_MspInit+0x84>)
 8001eea:	f000 fe61 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_I2C_MspInit+0x80>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_SPI_MspInit+0x7c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d127      	bne.n	8001f8e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_SPI_MspInit+0x80>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f6e:	23e0      	movs	r3, #224	; 0xe0
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_SPI_MspInit+0x84>)
 8001f8a:	f000 fe11 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_UART_MspInit+0xd8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d129      	bne.n	800201a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002008:	2307      	movs	r3, #7
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	481c      	ldr	r0, [pc, #112]	; (8002084 <HAL_UART_MspInit+0xe0>)
 8002014:	f000 fdcc 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002018:	e02c      	b.n	8002074 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_UART_MspInit+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d127      	bne.n	8002074 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_UART_MspInit+0xdc>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202e:	6253      	str	r3, [r2, #36]	; 0x24
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_UART_MspInit+0xdc>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_UART_MspInit+0xdc>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	61d3      	str	r3, [r2, #28]
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_UART_MspInit+0xdc>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002054:	230c      	movs	r3, #12
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002064:	2307      	movs	r3, #7
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_UART_MspInit+0xe0>)
 8002070:	f000 fd9e 	bl	8002bb0 <HAL_GPIO_Init>
}
 8002074:	bf00      	nop
 8002076:	3730      	adds	r7, #48	; 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000
 8002088:	40004400 	.word	0x40004400

0800208c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	201b      	movs	r0, #27
 80020a2:	f000 fd1a 	bl	8002ada <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 80020a6:	201b      	movs	r0, #27
 80020a8:	f000 fd33 	bl	8002b12 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_InitTick+0x9c>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_InitTick+0x9c>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_InitTick+0x9c>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c4:	f107 0210 	add.w	r2, r7, #16
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 f9e2 	bl	8005498 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020d4:	f003 f9cc 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 80020d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_InitTick+0xa0>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3b01      	subs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_InitTick+0xa4>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_InitTick+0xa8>)
 80020ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_InitTick+0xa4>)
 80020f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020f4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_InitTick+0xa4>)
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_InitTick+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_InitTick+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8002108:	4809      	ldr	r0, [pc, #36]	; (8002130 <HAL_InitTick+0xa4>)
 800210a:	f003 fad1 	bl	80056b0 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002114:	4806      	ldr	r0, [pc, #24]	; (8002130 <HAL_InitTick+0xa4>)
 8002116:	f003 fb13 	bl	8005740 <HAL_TIM_Base_Start_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3730      	adds	r7, #48	; 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	431bde83 	.word	0x431bde83
 8002130:	20002058 	.word	0x20002058
 8002134:	40011000 	.word	0x40011000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <USB_LP_IRQHandler+0x10>)
 800216a:	f001 f931 	bl	80033d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200031f4 	.word	0x200031f4

08002178 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <TIM11_IRQHandler+0x10>)
 800217e:	f003 fb31 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20002058 	.word	0x20002058

0800218c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
	return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_kill>:

int _kill(int pid, int sig)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021a4:	f00b f964 	bl	800d470 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2216      	movs	r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
	return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_exit>:

void _exit (int status)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffe7 	bl	800219a <_kill>
	while (1) {}		/* Make sure we hang here */
 80021cc:	e7fe      	b.n	80021cc <_exit+0x12>
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f00b f936 	bl	800d470 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20004000 	.word	0x20004000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000440 	.word	0x20000440
 8002238:	200034e8 	.word	0x200034e8

0800223c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800226e:	f7ff ffe5 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f00b f903 	bl	800d47c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002276:	f7ff fa9f 	bl	80017b8 <main>
  bx lr
 800227a:	4770      	bx	lr
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002284:	0800d9cc 	.word	0x0800d9cc
  ldr r2, =_sbss
 8002288:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800228c:	200034e4 	.word	0x200034e4

08002290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_IRQHandler>

08002292 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
 80022a4:	f7ff fd22 	bl	8001cec <Error_Handler>
 80022a8:	e7fe      	b.n	80022a8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7a1b      	ldrb	r3, [r3, #8]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d904      	bls.n	80022bc <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80022b2:	b672      	cpsid	i
}
 80022b4:	bf00      	nop
 80022b6:	f7ff fd19 	bl	8001cec <Error_Handler>
 80022ba:	e7fe      	b.n	80022ba <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7a1b      	ldrb	r3, [r3, #8]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	b2d1      	uxtb	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	7211      	strb	r1, [r2, #8]
 80022c8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022ca:	f3ef 8211 	mrs	r2, BASEPRI
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
 8002304:	f7ff fcf2 	bl	8001cec <Error_Handler>
 8002308:	e7fe      	b.n	8002308 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7a1b      	ldrb	r3, [r3, #8]
 800230e:	3b01      	subs	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7a1b      	ldrb	r3, [r3, #8]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d904      	bls.n	8002328 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800231e:	b672      	cpsid	i
}
 8002320:	bf00      	nop
 8002322:	f7ff fce3 	bl	8001cec <Error_Handler>
 8002326:	e7fe      	b.n	8002326 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7a1b      	ldrb	r3, [r3, #8]
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800233c:	bf00      	nop
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
 8002358:	f7ff fcc8 	bl	8001cec <Error_Handler>
 800235c:	e7fe      	b.n	800235c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff96 	bl	8002292 <stm32_lock_acquire>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
 8002380:	f7ff fcb4 	bl	8001cec <Error_Handler>
 8002384:	e7fe      	b.n	8002384 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ffb2 	bl	80022f2 <stm32_lock_release>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 fb8f 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	200f      	movs	r0, #15
 80023a8:	f7ff fe70 	bl	800208c <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fcde 	bl	8001d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_IncTick+0x1c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_IncTick+0x20>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_IncTick+0x1c>)
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20002098 	.word	0x20002098
 80023e8:	20000008 	.word	0x20000008

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <HAL_GetTick+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20002098 	.word	0x20002098

08002400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fff0 	bl	80023ec <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002418:	d004      	beq.n	8002424 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_Delay+0x40>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002424:	bf00      	nop
 8002426:	f7ff ffe1 	bl	80023ec <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	429a      	cmp	r2, r3
 8002434:	d8f7      	bhi.n	8002426 <HAL_Delay+0x26>
  {
  }
}
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e127      	b.n	80026b4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_ADC_Init+0x278>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a8d      	ldr	r2, [pc, #564]	; (80026bc <HAL_ADC_Init+0x278>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_ADC_Init+0x278>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fca1 	bl	8001de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80ff 	bne.w	80026aa <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b4:	f023 0302 	bic.w	r3, r3, #2
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80024c0:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_ADC_Init+0x27c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	497c      	ldr	r1, [pc, #496]	; (80026c0 <HAL_ADC_Init+0x27c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80024da:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	4619      	mov	r1, r3
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80024fe:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002504:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	2302      	movs	r3, #2
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002526:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	4313      	orrs	r3, r2
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	2b10      	cmp	r3, #16
 8002534:	d007      	beq.n	8002546 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800253e:	4313      	orrs	r3, r2
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	4313      	orrs	r3, r2
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d04f      	beq.n	80025f4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	4313      	orrs	r3, r2
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002566:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6912      	ldr	r2, [r2, #16]
 800256c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002570:	d003      	beq.n	800257a <HAL_ADC_Init+0x136>
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6912      	ldr	r2, [r2, #16]
 8002576:	2a01      	cmp	r2, #1
 8002578:	d102      	bne.n	8002580 <HAL_ADC_Init+0x13c>
 800257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257e:	e000      	b.n	8002582 <HAL_ADC_Init+0x13e>
 8002580:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002582:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002586:	4313      	orrs	r3, r2
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d125      	bne.n	80025e0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80025a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	fa92 f2a2 	rbit	r2, r2
 80025b0:	617a      	str	r2, [r7, #20]
  return result;
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c2:	4313      	orrs	r3, r2
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	e00b      	b.n	80025e0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_ADC_Init+0x280>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_ADC_Init+0x284>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002610:	d003      	beq.n	800261a <HAL_ADC_Init+0x1d6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d119      	bne.n	800264e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800262e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	fa92 f2a2 	rbit	r2, r2
 8002636:	60fa      	str	r2, [r7, #12]
  return result;
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	fab2 f282 	clz	r2, r2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	fa03 f202 	lsl.w	r2, r3, r2
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
 800264c:	e007      	b.n	800265e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_ADC_Init+0x288>)
 8002666:	4013      	ands	r3, r2
 8002668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266a:	429a      	cmp	r2, r3
 800266c:	d10b      	bne.n	8002686 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	f023 0303 	bic.w	r3, r3, #3
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
 8002684:	e014      	b.n	80026b0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f023 0312 	bic.w	r3, r3, #18
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40012700 	.word	0x40012700
 80026c4:	fcfc16ff 	.word	0xfcfc16ff
 80026c8:	c0fff18d 	.word	0xc0fff18d
 80026cc:	bf80fffe 	.word	0xbf80fffe

080026d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x20>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e134      	b.n	800295a <HAL_ADC_ConfigChannel+0x28a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d81c      	bhi.n	800273a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	221f      	movs	r2, #31
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	4019      	ands	r1, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b05      	subs	r3, #5
 800272c:	fa00 f203 	lsl.w	r2, r0, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
 8002738:	e07e      	b.n	8002838 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d81c      	bhi.n	800277c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b23      	subs	r3, #35	; 0x23
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	4019      	ands	r1, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b23      	subs	r3, #35	; 0x23
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c
 800277a:	e05d      	b.n	8002838 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d81c      	bhi.n	80027be <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b41      	subs	r3, #65	; 0x41
 8002796:	221f      	movs	r2, #31
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	4019      	ands	r1, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	; 0x41
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
 80027bc:	e03c      	b.n	8002838 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b18      	cmp	r3, #24
 80027c4:	d81c      	bhi.n	8002800 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3b5f      	subs	r3, #95	; 0x5f
 80027d8:	221f      	movs	r2, #31
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	4019      	ands	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b5f      	subs	r3, #95	; 0x5f
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
 80027fe:	e01b      	b.n	8002838 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b7d      	subs	r3, #125	; 0x7d
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	4019      	ands	r1, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b7d      	subs	r3, #125	; 0x7d
 800282c:	fa00 f203 	lsl.w	r2, r0, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b09      	cmp	r3, #9
 800283e:	d81a      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	2207      	movs	r2, #7
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	4019      	ands	r1, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6898      	ldr	r0, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	615a      	str	r2, [r3, #20]
 8002874:	e042      	b.n	80028fc <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b13      	cmp	r3, #19
 800287c:	d81c      	bhi.n	80028b8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3b1e      	subs	r3, #30
 8002890:	2207      	movs	r2, #7
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	4019      	ands	r1, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6898      	ldr	r0, [r3, #8]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	3b1e      	subs	r3, #30
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	e021      	b.n	80028fc <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b1a      	cmp	r3, #26
 80028be:	d81c      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68d9      	ldr	r1, [r3, #12]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	3b3c      	subs	r3, #60	; 0x3c
 80028d2:	2207      	movs	r2, #7
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	4019      	ands	r1, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6898      	ldr	r0, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	3b3c      	subs	r3, #60	; 0x3c
 80028ec:	fa00 f203 	lsl.w	r2, r0, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	e000      	b.n	80028fc <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80028fa:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b10      	cmp	r3, #16
 8002902:	d003      	beq.n	800290c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002908:	2b11      	cmp	r3, #17
 800290a:	d121      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_ADC_ConfigChannel+0x294>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11b      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_ADC_ConfigChannel+0x294>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_ADC_ConfigChannel+0x294>)
 800291e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002922:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b10      	cmp	r3, #16
 800292a:	d111      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_ADC_ConfigChannel+0x298>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_ADC_ConfigChannel+0x29c>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9a      	lsrs	r2, r3, #18
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002942:	e002      	b.n	800294a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3b01      	subs	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012700 	.word	0x40012700
 8002968:	20000000 	.word	0x20000000
 800296c:	431bde83 	.word	0x431bde83

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <__NVIC_EnableIRQ+0x34>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff4f 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff64 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ffb2 	bl	8002a60 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff81 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff57 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d005      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e029      	b.n	8002ba6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020e 	bic.w	r2, r2, #14
 8002b60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 021c 	and.w	r2, r3, #28
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
    }
  }
  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bc6:	e154      	b.n	8002e72 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8146 	beq.w	8002e6c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d005      	beq.n	8002bf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0201 	and.w	r2, r3, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d017      	beq.n	8002c96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d123      	bne.n	8002cea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	6939      	ldr	r1, [r7, #16]
 8002ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a0 	beq.w	8002e6c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_GPIO_Init+0x2e0>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d44:	4a53      	ldr	r2, [pc, #332]	; (8002e94 <HAL_GPIO_Init+0x2e4>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a4b      	ldr	r2, [pc, #300]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d019      	beq.n	8002da4 <HAL_GPIO_Init+0x1f4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_GPIO_Init+0x2ec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_GPIO_Init+0x1f0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a49      	ldr	r2, [pc, #292]	; (8002ea0 <HAL_GPIO_Init+0x2f0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00d      	beq.n	8002d9c <HAL_GPIO_Init+0x1ec>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <HAL_GPIO_Init+0x2f4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <HAL_GPIO_Init+0x1e8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_GPIO_Init+0x2f8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e008      	b.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002d94:	2305      	movs	r3, #5
 8002d96:	e006      	b.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e004      	b.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002da4:	2300      	movs	r3, #0
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_GPIO_Init+0x2e4>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002de8:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e12:	4a26      	ldr	r2, [pc, #152]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f aea3 	bne.w	8002bc8 <HAL_GPIO_Init+0x18>
  }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e001      	b.n	8002ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]
 8002eea:	4613      	mov	r3, r2
 8002eec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eee:	787b      	ldrb	r3, [r7, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002efa:	e003      	b.n	8002f04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	041a      	lsls	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f20:	887a      	ldrh	r2, [r7, #2]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	041a      	lsls	r2, r3, #16
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	400b      	ands	r3, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e12b      	b.n	80031aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe ff94 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f002 fa50 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a81      	ldr	r2, [pc, #516]	; (80031b4 <HAL_I2C_Init+0x274>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d807      	bhi.n	8002fc4 <HAL_I2C_Init+0x84>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a80      	ldr	r2, [pc, #512]	; (80031b8 <HAL_I2C_Init+0x278>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bf94      	ite	ls
 8002fbc:	2301      	movls	r3, #1
 8002fbe:	2300      	movhi	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e006      	b.n	8002fd2 <HAL_I2C_Init+0x92>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a7d      	ldr	r2, [pc, #500]	; (80031bc <HAL_I2C_Init+0x27c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bf94      	ite	ls
 8002fcc:	2301      	movls	r3, #1
 8002fce:	2300      	movhi	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0e7      	b.n	80031aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a78      	ldr	r2, [pc, #480]	; (80031c0 <HAL_I2C_Init+0x280>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a6a      	ldr	r2, [pc, #424]	; (80031b4 <HAL_I2C_Init+0x274>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d802      	bhi.n	8003014 <HAL_I2C_Init+0xd4>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	e009      	b.n	8003028 <HAL_I2C_Init+0xe8>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	4a69      	ldr	r2, [pc, #420]	; (80031c4 <HAL_I2C_Init+0x284>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	3301      	adds	r3, #1
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800303a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	495c      	ldr	r1, [pc, #368]	; (80031b4 <HAL_I2C_Init+0x274>)
 8003044:	428b      	cmp	r3, r1
 8003046:	d819      	bhi.n	800307c <HAL_I2C_Init+0x13c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e59      	subs	r1, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fbb1 f3f3 	udiv	r3, r1, r3
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	f640 73fc 	movw	r3, #4092	; 0xffc
 800305c:	400b      	ands	r3, r1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_I2C_Init+0x138>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e59      	subs	r1, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	e051      	b.n	800311c <HAL_I2C_Init+0x1dc>
 8003078:	2304      	movs	r3, #4
 800307a:	e04f      	b.n	800311c <HAL_I2C_Init+0x1dc>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <HAL_I2C_Init+0x168>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e012      	b.n	80030ce <HAL_I2C_Init+0x18e>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x196>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_I2C_Init+0x1dc>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <HAL_I2C_Init+0x1bc>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e58      	subs	r0, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	440b      	add	r3, r1
 80030ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fa:	e00f      	b.n	800311c <HAL_I2C_Init+0x1dc>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	0099      	lsls	r1, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	6809      	ldr	r1, [r1, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800314a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6911      	ldr	r1, [r2, #16]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68d2      	ldr	r2, [r2, #12]
 8003156:	4311      	orrs	r1, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	430b      	orrs	r3, r1
 800315e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	000186a0 	.word	0x000186a0
 80031b8:	001e847f 	.word	0x001e847f
 80031bc:	003d08ff 	.word	0x003d08ff
 80031c0:	431bde83 	.word	0x431bde83
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	b08b      	sub	sp, #44	; 0x2c
 80031cc:	af06      	add	r7, sp, #24
 80031ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0d0      	b.n	800337c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f009 fce0 	bl	800cbb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 ff69 	bl	80060d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e04c      	b.n	80032a6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3301      	adds	r3, #1
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	b298      	uxth	r0, r3
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	3336      	adds	r3, #54	; 0x36
 800324a:	4602      	mov	r2, r0
 800324c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	3303      	adds	r3, #3
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3338      	adds	r3, #56	; 0x38
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	333c      	adds	r3, #60	; 0x3c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	3340      	adds	r3, #64	; 0x40
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3ad      	bcc.n	800320c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e044      	b.n	8003340 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b5      	bcc.n	80032b6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	687e      	ldr	r6, [r7, #4]
 8003352:	466d      	mov	r5, sp
 8003354:	f106 0410 	add.w	r4, r6, #16
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	1d33      	adds	r3, r6, #4
 8003362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003364:	6838      	ldr	r0, [r7, #0]
 8003366:	f002 fed1 	bl	800610c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003384 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_PCD_Start+0x16>
 8003396:	2302      	movs	r3, #2
 8003398:	e016      	b.n	80033c8 <HAL_PCD_Start+0x44>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fe80 	bl	80060ac <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033ac:	2101      	movs	r1, #1
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f009 fbe2 	bl	800cb78 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 f824 	bl	8008406 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 f81c 	bl	800841a <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ec:	d102      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 faf5 	bl	80039de <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f005 f80e 	bl	800841a <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003408:	d112      	bne.n	8003430 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	b292      	uxth	r2, r2
 800341e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f009 fc41 	bl	800ccaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003428:	2100      	movs	r1, #0
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8c7 	bl	80035be <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fff0 	bl	800841a <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d10b      	bne.n	800345e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003458:	b292      	uxth	r2, r2
 800345a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 ffd9 	bl	800841a <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	d10b      	bne.n	800348c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	b292      	uxth	r2, r2
 8003488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 ffc2 	bl	800841a <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d126      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0204 	bic.w	r2, r2, #4
 80034b4:	b292      	uxth	r2, r2
 80034b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	b292      	uxth	r2, r2
 80034ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f009 fc22 	bl	800cd1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ea:	b292      	uxth	r2, r2
 80034ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 ff90 	bl	800841a <USB_ReadInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003504:	d126      	bne.n	8003554 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	b292      	uxth	r2, r2
 800351a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003530:	b292      	uxth	r2, r2
 8003532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	b292      	uxth	r2, r2
 800354a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f009 fbca 	bl	800cce8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 ff5e 	bl	800841a <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d10e      	bne.n	8003588 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800357c:	b292      	uxth	r2, r2
 800357e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f009 fb83 	bl	800cc8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f004 ff44 	bl	800841a <USB_ReadInterrupts>
 8003592:	4603      	mov	r3, r0
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359c:	d10b      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b0:	b292      	uxth	r2, r2
 80035b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_SetAddress+0x1a>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e013      	b.n	8003600 <HAL_PCD_SetAddress+0x42>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 fef5 	bl	80083e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	70fb      	strb	r3, [r7, #3]
 800361a:	460b      	mov	r3, r1
 800361c:	803b      	strh	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	da0e      	bge.n	800364c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	705a      	strb	r2, [r3, #1]
 800364a:	e00e      	b.n	800366a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 0207 	and.w	r2, r3, #7
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003676:	883a      	ldrh	r2, [r7, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	78ba      	ldrb	r2, [r7, #2]
 8003680:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003694:	78bb      	ldrb	r3, [r7, #2]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d102      	bne.n	80036a0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_EP_Open+0xa6>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e00e      	b.n	80036cc <HAL_PCD_EP_Open+0xc4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fd45 	bl	800614c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da0e      	bge.n	8003706 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	705a      	strb	r2, [r3, #1]
 8003704:	e00e      	b.n	8003724 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 0207 	and.w	r2, r3, #7
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_PCD_EP_Close+0x6a>
 800373a:	2302      	movs	r3, #2
 800373c:	e00e      	b.n	800375c <HAL_PCD_EP_Close+0x88>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 f867 	bl	8006820 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	460b      	mov	r3, r1
 8003772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	f003 0207 	and.w	r2, r3, #7
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 fa19 	bl	8006bf8 <USB_EPStartXfer>
 80037c6:	e005      	b.n	80037d4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fa12 	bl	8006bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003800:	681b      	ldr	r3, [r3, #0]
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	460b      	mov	r3, r1
 800381a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2201      	movs	r2, #1
 8003856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2da      	uxtb	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6979      	ldr	r1, [r7, #20]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 f9bf 	bl	8006bf8 <USB_EPStartXfer>
 800387a:	e005      	b.n	8003888 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f9b8 	bl	8006bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 0207 	and.w	r2, r3, #7
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d901      	bls.n	80038b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e03e      	b.n	800392e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da0e      	bge.n	80038d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	705a      	strb	r2, [r3, #1]
 80038d4:	e00c      	b.n	80038f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_PCD_EP_SetStall+0x7e>
 800390c:	2302      	movs	r3, #2
 800390e:	e00e      	b.n	800392e <HAL_PCD_EP_SetStall+0x9c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68f9      	ldr	r1, [r7, #12]
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fc61 	bl	80081e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d901      	bls.n	8003954 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e040      	b.n	80039d6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0e      	bge.n	800397a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
 8003978:	e00e      	b.n	8003998 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 0207 	and.w	r2, r3, #7
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_PCD_EP_ClrStall+0x82>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e00e      	b.n	80039d6 <HAL_PCD_EP_ClrStall+0xa0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fc5d 	bl	8008286 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08e      	sub	sp, #56	; 0x38
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039e6:	e2ec      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80039fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8161 	bne.w	8003cca <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d152      	bne.n	8003ab8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	81fb      	strh	r3, [r7, #14]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	89fb      	ldrh	r3, [r7, #14]
 8003a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3328      	adds	r3, #40	; 0x28
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3302      	adds	r3, #2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	441a      	add	r2, r3
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a76:	2100      	movs	r1, #0
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f009 f8ee 	bl	800cc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 829b 	beq.w	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 8296 	bne.w	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ab6:	e284      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ac8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d034      	beq.n	8003b3c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3306      	adds	r3, #6
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f004 fcd6 	bl	80084c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b22:	4013      	ands	r3, r2
 8003b24:	823b      	strh	r3, [r7, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	8a3a      	ldrh	r2, [r7, #16]
 8003b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b30:	b292      	uxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f009 f863 	bl	800cc00 <HAL_PCD_SetupStageCallback>
 8003b3a:	e242      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b3c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f280 823e 	bge.w	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b52:	4013      	ands	r3, r2
 8003b54:	83bb      	strh	r3, [r7, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	8bba      	ldrh	r2, [r7, #28]
 8003b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b60:	b292      	uxth	r2, r2
 8003b62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	3306      	adds	r3, #6
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d019      	beq.n	8003bcc <PCD_EP_ISR_Handler+0x1ee>
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f004 fc86 	bl	80084c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	441a      	add	r2, r3
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f009 f82c 	bl	800cc24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 81f2 	bne.w	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d112      	bne.n	8003c2c <PCD_EP_ISR_Handler+0x24e>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e02f      	b.n	8003c8c <PCD_EP_ISR_Handler+0x2ae>
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b3e      	cmp	r3, #62	; 0x3e
 8003c32:	d813      	bhi.n	8003c5c <PCD_EP_ISR_Handler+0x27e>
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <PCD_EP_ISR_Handler+0x270>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	e017      	b.n	8003c8c <PCD_EP_ISR_Handler+0x2ae>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <PCD_EP_ISR_Handler+0x298>
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	3b01      	subs	r3, #1
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	827b      	strh	r3, [r7, #18]
 8003c9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ca0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ca4:	827b      	strh	r3, [r7, #18]
 8003ca6:	8a7b      	ldrh	r3, [r7, #18]
 8003ca8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cac:	827b      	strh	r3, [r7, #18]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	8a7b      	ldrh	r3, [r7, #18]
 8003cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]
 8003cc8:	e17b      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f280 80ea 	bge.w	8003eba <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d14:	b292      	uxth	r2, r2
 8003d16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d18:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	7b1b      	ldrb	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d122      	bne.n	8003d7c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	3306      	adds	r3, #6
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003d60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8087 	beq.w	8003e76 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	6959      	ldr	r1, [r3, #20]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	88da      	ldrh	r2, [r3, #6]
 8003d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d76:	f004 fba4 	bl	80084c2 <USB_ReadPMA>
 8003d7a:	e07c      	b.n	8003e76 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d108      	bne.n	8003d96 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d86:	461a      	mov	r2, r3
 8003d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f927 	bl	8003fde <HAL_PCD_EP_DB_Receive>
 8003d90:	4603      	mov	r3, r0
 8003d92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d94:	e06f      	b.n	8003e76 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	441a      	add	r2, r3
 8003dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	3302      	adds	r3, #2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e18:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02a      	beq.n	8003e76 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	6959      	ldr	r1, [r3, #20]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	891a      	ldrh	r2, [r3, #8]
 8003e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e2e:	f004 fb48 	bl	80084c2 <USB_ReadPMA>
 8003e32:	e020      	b.n	8003e76 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	3306      	adds	r3, #6
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	6959      	ldr	r1, [r3, #20]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	895a      	ldrh	r2, [r3, #10]
 8003e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e72:	f004 fb26 	bl	80084c2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e7c:	441a      	add	r2, r3
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e88:	441a      	add	r2, r3
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <PCD_EP_ISR_Handler+0x4c2>
 8003e96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d206      	bcs.n	8003eae <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f008 febc 	bl	800cc24 <HAL_PCD_DataOutStageCallback>
 8003eac:	e005      	b.n	8003eba <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 fe9f 	bl	8006bf8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07e      	beq.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ec4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	843b      	strh	r3, [r7, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	8c3b      	ldrh	r3, [r7, #32]
 8003f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	78db      	ldrb	r3, [r3, #3]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d00c      	beq.n	8003f32 <PCD_EP_ISR_Handler+0x554>
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d146      	bne.n	8003fb6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d141      	bne.n	8003fb6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	3302      	adds	r3, #2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f5a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	8bfb      	ldrh	r3, [r7, #30]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d906      	bls.n	8003f74 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	8bfb      	ldrh	r3, [r7, #30]
 8003f6c:	1ad2      	subs	r2, r2, r3
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	619a      	str	r2, [r3, #24]
 8003f72:	e002      	b.n	8003f7a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f008 fe66 	bl	800cc5a <HAL_PCD_DataInStageCallback>
 8003f8e:	e018      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	8bfb      	ldrh	r3, [r7, #30]
 8003f96:	441a      	add	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	8bfb      	ldrh	r3, [r7, #30]
 8003fa2:	441a      	add	r2, r3
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 fe22 	bl	8006bf8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003fb4:	e005      	b.n	8003fc2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003fb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f91b 	bl	80041f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	b21b      	sxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f6ff ad0a 	blt.w	80039e8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3738      	adds	r7, #56	; 0x38
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b088      	sub	sp, #32
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d07e      	beq.n	80040f4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	3302      	adds	r3, #2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800401e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	8b7b      	ldrh	r3, [r7, #26]
 8004026:	429a      	cmp	r2, r3
 8004028:	d306      	bcc.n	8004038 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	1ad2      	subs	r2, r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e002      	b.n	800403e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d123      	bne.n	800408e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	833b      	strh	r3, [r7, #24]
 8004062:	8b3b      	ldrh	r3, [r7, #24]
 8004064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004068:	833b      	strh	r3, [r7, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	8b3b      	ldrh	r3, [r7, #24]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01f      	beq.n	80040d8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	82fb      	strh	r3, [r7, #22]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	8afb      	ldrh	r3, [r7, #22]
 80040c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8087 	beq.w	80041ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6959      	ldr	r1, [r3, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	891a      	ldrh	r2, [r3, #8]
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	f004 f9e8 	bl	80084c2 <USB_ReadPMA>
 80040f2:	e07c      	b.n	80041ee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	3306      	adds	r3, #6
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	8b7b      	ldrh	r3, [r7, #26]
 8004124:	429a      	cmp	r2, r3
 8004126:	d306      	bcc.n	8004136 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	619a      	str	r2, [r3, #24]
 8004134:	e002      	b.n	800413c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d123      	bne.n	800418c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	83fb      	strh	r3, [r7, #30]
 8004160:	8bfb      	ldrh	r3, [r7, #30]
 8004162:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004166:	83fb      	strh	r3, [r7, #30]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	8bfb      	ldrh	r3, [r7, #30]
 8004178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	b29b      	uxth	r3, r3
 800418a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11f      	bne.n	80041d6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	83bb      	strh	r3, [r7, #28]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	8bbb      	ldrh	r3, [r7, #28]
 80041c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041d6:	8b7b      	ldrh	r3, [r7, #26]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6959      	ldr	r1, [r3, #20]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	895a      	ldrh	r2, [r3, #10]
 80041e8:	8b7b      	ldrh	r3, [r7, #26]
 80041ea:	f004 f96a 	bl	80084c2 <USB_ReadPMA>
    }
  }

  return count;
 80041ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b0a2      	sub	sp, #136	; 0x88
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 81c7 	beq.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	3302      	adds	r3, #2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004246:	429a      	cmp	r2, r3
 8004248:	d907      	bls.n	800425a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	619a      	str	r2, [r3, #24]
 8004258:	e002      	b.n	8004260 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 80b9 	bne.w	80043dc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d126      	bne.n	80042c0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	4413      	add	r3, r2
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	011a      	lsls	r2, r3, #4
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	4413      	add	r3, r2
 8004294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	e01a      	b.n	80042f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d116      	bne.n	80042f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	4413      	add	r3, r2
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	011a      	lsls	r2, r3, #4
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	4413      	add	r3, r2
 80042ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2200      	movs	r2, #0
 80042f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d126      	bne.n	8004352 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	4413      	add	r3, r2
 8004326:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004336:	b29a      	uxth	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434a:	b29a      	uxth	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e017      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d113      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x18a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	4413      	add	r3, r2
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	011a      	lsls	r2, r3, #4
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	4413      	add	r3, r2
 8004376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2200      	movs	r2, #0
 8004380:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f008 fc66 	bl	800cc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 82d4 	beq.w	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	827b      	strh	r3, [r7, #18]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	8a7b      	ldrh	r3, [r7, #18]
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]
 80043da:	e2b2      	b.n	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d021      	beq.n	800442a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 8286 	bne.w	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800443e:	441a      	add	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800444c:	441a      	add	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	d309      	bcc.n	8004472 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	621a      	str	r2, [r3, #32]
 8004470:	e015      	b.n	800449e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800447a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800447e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004488:	e009      	b.n	800449e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2200      	movs	r2, #0
 800449c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d155      	bne.n	8004552 <HAL_PCD_EP_DB_Transmit+0x35a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	4413      	add	r3, r2
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	011a      	lsls	r2, r3, #4
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	4413      	add	r3, r2
 80044c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d112      	bne.n	80044fa <HAL_PCD_EP_DB_Transmit+0x302>
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e047      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x392>
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	2b3e      	cmp	r3, #62	; 0x3e
 80044fe:	d811      	bhi.n	8004524 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	64bb      	str	r3, [r7, #72]	; 0x48
 8004506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	3301      	adds	r3, #1
 8004514:	64bb      	str	r3, [r7, #72]	; 0x48
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	b29b      	uxth	r3, r3
 800451a:	029b      	lsls	r3, r3, #10
 800451c:	b29a      	uxth	r2, r3
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	e032      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x392>
 8004524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	64bb      	str	r3, [r7, #72]	; 0x48
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <HAL_PCD_EP_DB_Transmit+0x342>
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004536:	3b01      	subs	r3, #1
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
 800453a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29b      	uxth	r3, r3
 8004542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454a:	b29a      	uxth	r2, r3
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	e01b      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x392>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d117      	bne.n	800458a <HAL_PCD_EP_DB_Transmit+0x392>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004568:	b29b      	uxth	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456e:	4413      	add	r3, r2
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	011a      	lsls	r2, r3, #4
 8004578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457a:	4413      	add	r3, r2
 800457c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	b29a      	uxth	r2, r3
 8004586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004588:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	891a      	ldrh	r2, [r3, #8]
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 ff4d 	bl	8008438 <USB_WritePMA>
 800459e:	e1d0      	b.n	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	3306      	adds	r3, #6
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d307      	bcc.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e002      	b.n	80045ee <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 80c4 	bne.w	8004780 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d126      	bne.n	800464e <HAL_PCD_EP_DB_Transmit+0x456>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	4413      	add	r3, r2
 8004616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	011a      	lsls	r2, r3, #4
 800461e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004620:	4413      	add	r3, r2
 8004622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004626:	66bb      	str	r3, [r7, #104]	; 0x68
 8004628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004632:	b29a      	uxth	r2, r3
 8004634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004646:	b29a      	uxth	r2, r3
 8004648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e01a      	b.n	8004684 <HAL_PCD_EP_DB_Transmit+0x48c>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d116      	bne.n	8004684 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	677b      	str	r3, [r7, #116]	; 0x74
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004664:	b29b      	uxth	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800466a:	4413      	add	r3, r2
 800466c:	677b      	str	r3, [r7, #116]	; 0x74
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	011a      	lsls	r2, r3, #4
 8004674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004676:	4413      	add	r3, r2
 8004678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800467c:	673b      	str	r3, [r7, #112]	; 0x70
 800467e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004680:	2200      	movs	r2, #0
 8004682:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	67bb      	str	r3, [r7, #120]	; 0x78
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d12f      	bne.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046aa:	4413      	add	r3, r2
 80046ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	011a      	lsls	r2, r3, #4
 80046b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ba:	4413      	add	r3, r2
 80046bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e017      	b.n	8004722 <HAL_PCD_EP_DB_Transmit+0x52a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d113      	bne.n	8004722 <HAL_PCD_EP_DB_Transmit+0x52a>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004708:	4413      	add	r3, r2
 800470a:	67bb      	str	r3, [r7, #120]	; 0x78
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	011a      	lsls	r2, r3, #4
 8004712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004714:	4413      	add	r3, r2
 8004716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800471a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800471c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800471e:	2200      	movs	r2, #0
 8004720:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f008 fa96 	bl	800cc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8104 	bne.w	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
 800477e:	e0e0      	b.n	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d121      	bne.n	80047ce <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 80b4 	bne.w	8004942 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047e2:	441a      	add	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047f0:	441a      	add	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d309      	bcc.n	8004816 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	621a      	str	r2, [r3, #32]
 8004814:	e015      	b.n	8004842 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800481e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800482c:	e009      	b.n	8004842 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	667b      	str	r3, [r7, #100]	; 0x64
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d155      	bne.n	80048fc <HAL_PCD_EP_DB_Transmit+0x704>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	4413      	add	r3, r2
 8004866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	011a      	lsls	r2, r3, #4
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	4413      	add	r3, r2
 8004872:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004876:	65bb      	str	r3, [r7, #88]	; 0x58
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	2b00      	cmp	r3, #0
 800487c:	d112      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800487e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004888:	b29a      	uxth	r2, r3
 800488a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e044      	b.n	800492e <HAL_PCD_EP_DB_Transmit+0x736>
 80048a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a6:	2b3e      	cmp	r3, #62	; 0x3e
 80048a8:	d811      	bhi.n	80048ce <HAL_PCD_EP_DB_Transmit+0x6d6>
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	657b      	str	r3, [r7, #84]	; 0x54
 80048b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	3301      	adds	r3, #1
 80048be:	657b      	str	r3, [r7, #84]	; 0x54
 80048c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	029b      	lsls	r3, r3, #10
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	e02f      	b.n	800492e <HAL_PCD_EP_DB_Transmit+0x736>
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	657b      	str	r3, [r7, #84]	; 0x54
 80048d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	3b01      	subs	r3, #1
 80048e2:	657b      	str	r3, [r7, #84]	; 0x54
 80048e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e018      	b.n	800492e <HAL_PCD_EP_DB_Transmit+0x736>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d114      	bne.n	800492e <HAL_PCD_EP_DB_Transmit+0x736>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004912:	4413      	add	r3, r2
 8004914:	667b      	str	r3, [r7, #100]	; 0x64
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491e:	4413      	add	r3, r2
 8004920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
 8004926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004928:	b29a      	uxth	r2, r3
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6959      	ldr	r1, [r3, #20]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	895a      	ldrh	r2, [r3, #10]
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	f003 fd7b 	bl	8008438 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495c:	823b      	strh	r3, [r7, #16]
 800495e:	8a3b      	ldrh	r3, [r7, #16]
 8004960:	f083 0310 	eor.w	r3, r3, #16
 8004964:	823b      	strh	r3, [r7, #16]
 8004966:	8a3b      	ldrh	r3, [r7, #16]
 8004968:	f083 0320 	eor.w	r3, r3, #32
 800496c:	823b      	strh	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8a3b      	ldrh	r3, [r7, #16]
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3788      	adds	r7, #136	; 0x88
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	817b      	strh	r3, [r7, #10]
 80049aa:	4613      	mov	r3, r2
 80049ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049ae:	897b      	ldrh	r3, [r7, #10]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e009      	b.n	80049e6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049d2:	897a      	ldrh	r2, [r7, #10]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049e6:	893b      	ldrh	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	80da      	strh	r2, [r3, #6]
 80049fa:	e00b      	b.n	8004a14 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2201      	movs	r2, #1
 8004a00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e31d      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a32:	4b94      	ldr	r3, [pc, #592]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a3c:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a44:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d07b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d006      	beq.n	8004a66 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d10f      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06a      	beq.n	8004b48 <HAL_RCC_OscConfig+0x128>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d166      	bne.n	8004b48 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e2f7      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d106      	bne.n	8004a94 <HAL_RCC_OscConfig+0x74>
 8004a86:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7e      	ldr	r2, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e02d      	b.n	8004af0 <HAL_RCC_OscConfig+0xd0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x96>
 8004a9c:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a78      	ldr	r2, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a75      	ldr	r2, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e01c      	b.n	8004af0 <HAL_RCC_OscConfig+0xd0>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xb8>
 8004abe:	4b71      	ldr	r3, [pc, #452]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b6e      	ldr	r3, [pc, #440]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6d      	ldr	r2, [pc, #436]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xd0>
 8004ad8:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a69      	ldr	r2, [pc, #420]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a66      	ldr	r2, [pc, #408]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd fc78 	bl	80023ec <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd fc74 	bl	80023ec <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e2ad      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b12:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xe0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fc64 	bl	80023ec <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fc60 	bl	80023ec <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e299      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b3a:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x108>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d05a      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d119      	bne.n	8004b96 <HAL_RCC_OscConfig+0x176>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b68:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x160>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e276      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b94:	e03a      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <HAL_RCC_OscConfig+0x268>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fc22 	bl	80023ec <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fd fc1e 	bl	80023ec <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e257      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	492a      	ldr	r1, [pc, #168]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	e015      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be0:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_RCC_OscConfig+0x268>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd fc01 	bl	80023ec <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fd fbfd 	bl	80023ec <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e236      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b8 	beq.w	8004d8a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d170      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c20:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x218>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e21a      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d921      	bls.n	8004c8c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fc53 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e208      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4906      	ldr	r1, [pc, #24]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	4901      	ldr	r1, [pc, #4]	; (8004c84 <HAL_RCC_OscConfig+0x264>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
 8004c82:	e020      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2a6>
 8004c84:	40023800 	.word	0x40023800
 8004c88:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8c:	4ba4      	ldr	r3, [pc, #656]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	49a1      	ldr	r1, [pc, #644]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9e:	4ba0      	ldr	r3, [pc, #640]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	499c      	ldr	r1, [pc, #624]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fc1e 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1d3      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	0b5b      	lsrs	r3, r3, #13
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004cd6:	4a92      	ldr	r2, [pc, #584]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	0912      	lsrs	r2, r2, #4
 8004cdc:	f002 020f 	and.w	r2, r2, #15
 8004ce0:	4990      	ldr	r1, [pc, #576]	; (8004f24 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	5c8a      	ldrb	r2, [r1, r2]
 8004ce4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ce6:	4a90      	ldr	r2, [pc, #576]	; (8004f28 <HAL_RCC_OscConfig+0x508>)
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cea:	4b90      	ldr	r3, [pc, #576]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd f9cc 	bl	800208c <HAL_InitTick>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d045      	beq.n	8004d8a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	e1b5      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d029      	beq.n	8004d5e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d0a:	4b89      	ldr	r3, [pc, #548]	; (8004f30 <HAL_RCC_OscConfig+0x510>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd fb6c 	bl	80023ec <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d18:	f7fd fb68 	bl	80023ec <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1a1      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d36:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4977      	ldr	r1, [pc, #476]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d48:	4b75      	ldr	r3, [pc, #468]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	4972      	ldr	r1, [pc, #456]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d5e:	4b74      	ldr	r3, [pc, #464]	; (8004f30 <HAL_RCC_OscConfig+0x510>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd fb42 	bl	80023ec <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fb3e 	bl	80023ec <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e177      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d7e:	4b68      	ldr	r3, [pc, #416]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d030      	beq.n	8004df8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x514>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da4:	f7fd fb22 	bl	80023ec <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fd fb1e 	bl	80023ec <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e157      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dbe:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x38c>
 8004dca:	e015      	b.n	8004df8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_OscConfig+0x514>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fb0b 	bl	80023ec <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fd fb07 	bl	80023ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e140      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dec:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80b5 	beq.w	8004f70 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	4b42      	ldr	r3, [pc, #264]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	4a41      	ldr	r2, [pc, #260]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6253      	str	r3, [r2, #36]	; 0x24
 8004e22:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	4b41      	ldr	r3, [pc, #260]	; (8004f38 <HAL_RCC_OscConfig+0x518>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3e:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <HAL_RCC_OscConfig+0x518>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <HAL_RCC_OscConfig+0x518>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fd facf 	bl	80023ec <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fd facb 	bl	80023ec <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	; 0x64
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e104      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b34      	ldr	r3, [pc, #208]	; (8004f38 <HAL_RCC_OscConfig+0x518>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x466>
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6353      	str	r3, [r2, #52]	; 0x34
 8004e84:	e02d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4c2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x488>
 8004e8e:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	6353      	str	r3, [r2, #52]	; 0x34
 8004e9a:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8004ea6:	e01c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4c2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d10c      	bne.n	8004eca <HAL_RCC_OscConfig+0x4aa>
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eba:	6353      	str	r3, [r2, #52]	; 0x34
 8004ebc:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6353      	str	r3, [r2, #52]	; 0x34
 8004ec8:	e00b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4c2>
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	6353      	str	r3, [r2, #52]	; 0x34
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ee0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d015      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eea:	f7fd fa7f 	bl	80023ec <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fd fa7b 	bl	80023ec <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0b2      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_OscConfig+0x500>)
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ee      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x4d2>
 8004f14:	e023      	b.n	8004f5e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f16:	f7fd fa69 	bl	80023ec <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f1c:	e019      	b.n	8004f52 <HAL_RCC_OscConfig+0x532>
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800d934 	.word	0x0800d934
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	20000004 	.word	0x20000004
 8004f30:	42470020 	.word	0x42470020
 8004f34:	42470680 	.word	0x42470680
 8004f38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fa56 	bl	80023ec <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e08d      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f52:	4b49      	ldr	r3, [pc, #292]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1ee      	bne.n	8004f3c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f64:	4b44      	ldr	r3, [pc, #272]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	4a43      	ldr	r2, [pc, #268]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d079      	beq.n	800506c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d056      	beq.n	800502c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d13b      	bne.n	8004ffe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <HAL_RCC_OscConfig+0x65c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fd fa2e 	bl	80023ec <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fd fa2a 	bl	80023ec <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e063      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fa6:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4319      	orrs	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	492b      	ldr	r1, [pc, #172]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b2a      	ldr	r3, [pc, #168]	; (800507c <HAL_RCC_OscConfig+0x65c>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd fa09 	bl	80023ec <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fd fa05 	bl	80023ec <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e03e      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x5be>
 8004ffc:	e036      	b.n	800506c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_RCC_OscConfig+0x65c>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fd f9f2 	bl	80023ec <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500c:	f7fd f9ee 	bl	80023ec <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e027      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800501e:	4b16      	ldr	r3, [pc, #88]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x5ec>
 800502a:	e01f      	b.n	800506c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e01a      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_RCC_OscConfig+0x658>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	429a      	cmp	r2, r3
 800504a:	d10d      	bne.n	8005068 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d106      	bne.n	8005068 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	42470060 	.word	0x42470060

08005080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e11a      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005094:	4b8f      	ldr	r3, [pc, #572]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d919      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x34>
 80050a8:	4b8a      	ldr	r3, [pc, #552]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a89      	ldr	r2, [pc, #548]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 0201 	bic.w	r2, r3, #1
 80050bc:	4985      	ldr	r1, [pc, #532]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c4:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0f9      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e2:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	497a      	ldr	r1, [pc, #488]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 808e 	beq.w	800521e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800510a:	4b73      	ldr	r3, [pc, #460]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d121      	bne.n	800515a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0d7      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005122:	4b6d      	ldr	r3, [pc, #436]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d115      	bne.n	800515a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0cb      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513a:	4b67      	ldr	r3, [pc, #412]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0bf      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0b7      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	495c      	ldr	r1, [pc, #368]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800516c:	f7fd f93e 	bl	80023ec <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d112      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fd f936 	bl	80023ec <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e09b      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	2b08      	cmp	r3, #8
 800519c:	d1ee      	bne.n	800517c <HAL_RCC_ClockConfig+0xfc>
 800519e:	e03e      	b.n	800521e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d112      	bne.n	80051ce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051aa:	f7fd f91f 	bl	80023ec <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e084      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c0:	4b45      	ldr	r3, [pc, #276]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d1ee      	bne.n	80051aa <HAL_RCC_ClockConfig+0x12a>
 80051cc:	e027      	b.n	800521e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d11d      	bne.n	8005212 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7fd f908 	bl	80023ec <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e06d      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d1ee      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x158>
 80051fa:	e010      	b.n	800521e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fd f8f6 	bl	80023ec <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	; 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e05b      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ee      	bne.n	80051fc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800521e:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d219      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <HAL_RCC_ClockConfig+0x1be>
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	4923      	ldr	r1, [pc, #140]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCC_ClockConfig+0x254>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e034      	b.n	80052ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4917      	ldr	r1, [pc, #92]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490f      	ldr	r1, [pc, #60]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f823 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCC_ClockConfig+0x258>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	490b      	ldr	r1, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x25c>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fc fee4 	bl	800208c <HAL_InitTick>
 80052c4:	4603      	mov	r3, r0
 80052c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80052c8:	7afb      	ldrb	r3, [r7, #11]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023c00 	.word	0x40023c00
 80052d8:	40023800 	.word	0x40023800
 80052dc:	0800d934 	.word	0x0800d934
 80052e0:	20000000 	.word	0x20000000
 80052e4:	20000004 	.word	0x20000004

080052e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80052ee:	4b4d      	ldr	r3, [pc, #308]	; (8005424 <HAL_RCC_GetSysClockFreq+0x13c>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d00c      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x30>
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d87c      	bhi.n	80053fc <HAL_RCC_GetSysClockFreq+0x114>
 8005302:	2b04      	cmp	r3, #4
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x24>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x2a>
 800530a:	e077      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_RCC_GetSysClockFreq+0x140>)
 800530e:	613b      	str	r3, [r7, #16]
      break;
 8005310:	e082      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005312:	4b46      	ldr	r3, [pc, #280]	; (800542c <HAL_RCC_GetSysClockFreq+0x144>)
 8005314:	613b      	str	r3, [r7, #16]
      break;
 8005316:	e07f      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	4a43      	ldr	r2, [pc, #268]	; (8005430 <HAL_RCC_GetSysClockFreq+0x148>)
 8005322:	5cd3      	ldrb	r3, [r2, r3]
 8005324:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	0d9b      	lsrs	r3, r3, #22
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005332:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01a      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	461a      	mov	r2, r3
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	4939      	ldr	r1, [pc, #228]	; (800542c <HAL_RCC_GetSysClockFreq+0x144>)
 8005348:	fb01 f003 	mul.w	r0, r1, r3
 800534c:	2100      	movs	r1, #0
 800534e:	fb01 f102 	mul.w	r1, r1, r2
 8005352:	1844      	adds	r4, r0, r1
 8005354:	4935      	ldr	r1, [pc, #212]	; (800542c <HAL_RCC_GetSysClockFreq+0x144>)
 8005356:	fba2 0101 	umull	r0, r1, r2, r1
 800535a:	1863      	adds	r3, r4, r1
 800535c:	4619      	mov	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f7fa ff0b 	bl	8000180 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e040      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	461c      	mov	r4, r3
 8005378:	f04f 0500 	mov.w	r5, #0
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	014b      	lsls	r3, r1, #5
 800538a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800538e:	0142      	lsls	r2, r0, #5
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	1b00      	subs	r0, r0, r4
 8005396:	eb61 0105 	sbc.w	r1, r1, r5
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	018b      	lsls	r3, r1, #6
 80053a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053a8:	0182      	lsls	r2, r0, #6
 80053aa:	1a12      	subs	r2, r2, r0
 80053ac:	eb63 0301 	sbc.w	r3, r3, r1
 80053b0:	f04f 0000 	mov.w	r0, #0
 80053b4:	f04f 0100 	mov.w	r1, #0
 80053b8:	00d9      	lsls	r1, r3, #3
 80053ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053be:	00d0      	lsls	r0, r2, #3
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	1912      	adds	r2, r2, r4
 80053c6:	eb45 0303 	adc.w	r3, r5, r3
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	0299      	lsls	r1, r3, #10
 80053d4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053d8:	0290      	lsls	r0, r2, #10
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f7fa fec9 	bl	8000180 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4613      	mov	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
      break;
 80053fa:	e00d      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_RCC_GetSysClockFreq+0x13c>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	0b5b      	lsrs	r3, r3, #13
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
      break;
 8005416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005418:	693b      	ldr	r3, [r7, #16]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bdb0      	pop	{r4, r5, r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	00f42400 	.word	0x00f42400
 800542c:	016e3600 	.word	0x016e3600
 8005430:	0800d928 	.word	0x0800d928

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <HAL_RCC_GetHCLKFreq+0x10>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	20000000 	.word	0x20000000

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800544c:	f7ff fff2 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4903      	ldr	r1, [pc, #12]	; (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40023800 	.word	0x40023800
 800546c:	0800d944 	.word	0x0800d944

08005470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005474:	f7ff ffde 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0adb      	lsrs	r3, r3, #11
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4903      	ldr	r1, [pc, #12]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40023800 	.word	0x40023800
 8005494:	0800d944 	.word	0x0800d944

08005498 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	220f      	movs	r2, #15
 80054a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_RCC_GetClockConfig+0x58>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <HAL_RCC_GetClockConfig+0x58>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_GetClockConfig+0x58>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCC_GetClockConfig+0x58>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0201 	and.w	r2, r3, #1
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40023c00 	.word	0x40023c00

080054f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005504:	4b29      	ldr	r3, [pc, #164]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d12c      	bne.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005510:	4b26      	ldr	r3, [pc, #152]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800551c:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e016      	b.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800552e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005532:	6253      	str	r3, [r2, #36]	; 0x24
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005540:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005548:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	4a17      	ldr	r2, [pc, #92]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005554:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800555c:	d105      	bne.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005564:	d101      	bne.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005566:	2301      	movs	r3, #1
 8005568:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 0201 	bic.w	r2, r3, #1
 8005584:	490b      	ldr	r1, [pc, #44]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d001      	beq.n	800559e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40007000 	.word	0x40007000
 80055b4:	40023c00 	.word	0x40023c00

080055b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06e      	b.n	80056a8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055da:	d009      	beq.n	80055f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	61da      	str	r2, [r3, #28]
 80055e2:	e005      	b.n	80055f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fc86 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	ea42 0103 	orr.w	r1, r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	0c1a      	lsrs	r2, r3, #16
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f002 0204 	and.w	r2, r2, #4
 8005696:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e031      	b.n	8005726 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f829 	bl	800572e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f000 f978 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e03a      	b.n	80057ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d00e      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x58>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_TIM_Base_Start_IT+0x98>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x58>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <HAL_TIM_Base_Start_IT+0x9c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x58>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d111      	bne.n	80057bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d010      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e007      	b.n	80057cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40010800 	.word	0x40010800

080057e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8c1 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8b4 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8c3 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0204 	mvn.w	r2, #4
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f897 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f88a 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f899 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0208 	mvn.w	r2, #8
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2204      	movs	r2, #4
 80058be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f86d 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f860 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f86f 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0210 	mvn.w	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2208      	movs	r2, #8
 8005912:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f843 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f836 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f845 	bl	80059c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fc f9b0 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f81f 	bl	80059d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x28>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <TIM_Base_SetConfig+0xb0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x28>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <TIM_Base_SetConfig+0xb4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d013      	beq.n	8005a4e <TIM_Base_SetConfig+0x6a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <TIM_Base_SetConfig+0xb0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_Base_SetConfig+0x6a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <TIM_Base_SetConfig+0xb4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_Base_SetConfig+0x6a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_Base_SetConfig+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_Base_SetConfig+0x6a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_Base_SetConfig+0xbc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_Base_SetConfig+0x6a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <TIM_Base_SetConfig+0xc0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d108      	bne.n	8005a60 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	615a      	str	r2, [r3, #20]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40010800 	.word	0x40010800
 8005aa0:	40010c00 	.word	0x40010c00
 8005aa4:	40011000 	.word	0x40011000

08005aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e03f      	b.n	8005b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fc fa68 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9f9 	bl	8005ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d17c      	bne.n	8005c5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_UART_Transmit+0x2c>
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e075      	b.n	8005c5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UART_Transmit+0x3e>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e06e      	b.n	8005c5e <HAL_UART_Transmit+0x11c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2221      	movs	r2, #33	; 0x21
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b96:	f7fc fc29 	bl	80023ec <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d108      	bne.n	8005bc4 <HAL_UART_Transmit+0x82>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e003      	b.n	8005bcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bd4:	e02a      	b.n	8005c2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f8e4 	bl	8005dae <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e036      	b.n	8005c5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3302      	adds	r3, #2
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e007      	b.n	8005c1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cf      	bne.n	8005bd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2140      	movs	r1, #64	; 0x40
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f8b4 	bl	8005dae <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e006      	b.n	8005c5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d11d      	bne.n	8005cbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_UART_Receive_IT+0x26>
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e016      	b.n	8005cbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Receive_IT+0x38>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e00f      	b.n	8005cbe <HAL_UART_Receive_IT+0x58>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f8c5 	bl	8005e42 <UART_Start_Receive_IT>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	e000      	b.n	8005cbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d107      	bne.n	8005d08 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0210 	bic.w	r2, r2, #16
 8005d06:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d12d      	bne.n	8005d72 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d24:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d013      	beq.n	8005d56 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <HAL_UART_AbortReceive_IT+0xd0>)
 8005d34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fc fef7 	bl	8002b2e <HAL_DMA_Abort_IT>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d022      	beq.n	8005d8c <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	e01a      	b.n	8005d8c <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f816 	bl	8005d9c <HAL_UART_AbortReceiveCpltCallback>
 8005d70:	e00c      	b.n	8005d8c <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f808 	bl	8005d9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	08005eb5 	.word	0x08005eb5

08005d9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	e02c      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc6:	d028      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x30>
 8005dce:	f7fc fb0d 	bl	80023ec <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d21d      	bcs.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e00f      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4013      	ands	r3, r2
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d0c3      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2222      	movs	r2, #34	; 0x22
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e86:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0220 	orr.w	r2, r2, #32
 8005ea6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff ff60 	bl	8005d9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f24:	f023 030c 	bic.w	r3, r3, #12
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a55      	ldr	r2, [pc, #340]	; (80060a4 <UART_SetConfig+0x1c0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d103      	bne.n	8005f5a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f52:	f7ff fa8d 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	e002      	b.n	8005f60 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7ff fa75 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8005f5e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d14c      	bne.n	8006004 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009a      	lsls	r2, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	4a49      	ldr	r2, [pc, #292]	; (80060a8 <UART_SetConfig+0x1c4>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	0119      	lsls	r1, r3, #4
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009a      	lsls	r2, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa0:	4b41      	ldr	r3, [pc, #260]	; (80060a8 <UART_SetConfig+0x1c4>)
 8005fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2064      	movs	r0, #100	; 0x64
 8005faa:	fb00 f303 	mul.w	r3, r0, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	3332      	adds	r3, #50	; 0x32
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <UART_SetConfig+0x1c4>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fc2:	4419      	add	r1, r3
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009a      	lsls	r2, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fda:	4b33      	ldr	r3, [pc, #204]	; (80060a8 <UART_SetConfig+0x1c4>)
 8005fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2064      	movs	r0, #100	; 0x64
 8005fe4:	fb00 f303 	mul.w	r3, r0, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a2e      	ldr	r2, [pc, #184]	; (80060a8 <UART_SetConfig+0x1c4>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	440a      	add	r2, r1
 8006000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006002:	e04a      	b.n	800609a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009a      	lsls	r2, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <UART_SetConfig+0x1c4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	0119      	lsls	r1, r3, #4
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009a      	lsls	r2, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	fbb2 f2f3 	udiv	r2, r2, r3
 800603a:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <UART_SetConfig+0x1c4>)
 800603c:	fba3 0302 	umull	r0, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2064      	movs	r0, #100	; 0x64
 8006044:	fb00 f303 	mul.w	r3, r0, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <UART_SetConfig+0x1c4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605a:	4419      	add	r1, r3
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009a      	lsls	r2, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006072:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <UART_SetConfig+0x1c4>)
 8006074:	fba3 0302 	umull	r0, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2064      	movs	r0, #100	; 0x64
 800607c:	fb00 f303 	mul.w	r3, r0, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <UART_SetConfig+0x1c4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	440a      	add	r2, r1
 8006098:	609a      	str	r2, [r3, #8]
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40013800 	.word	0x40013800
 80060a8:	51eb851f 	.word	0x51eb851f

080060ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800610c:	b084      	sub	sp, #16
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	f107 0014 	add.w	r0, r7, #20
 800611a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	b004      	add	sp, #16
 800614a:	4770      	bx	lr

0800614c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800614c:	b480      	push	{r7}
 800614e:	b09b      	sub	sp, #108	; 0x6c
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d81f      	bhi.n	80061be <USB_ActivateEndpoint+0x72>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <USB_ActivateEndpoint+0x38>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	08006195 	.word	0x08006195
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061c7 	.word	0x080061c7
 8006190:	080061a3 	.word	0x080061a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006194:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800619c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80061a0:	e012      	b.n	80061c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80061aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80061ae:	e00b      	b.n	80061c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80061bc:	e004      	b.n	80061c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80061c4:	e000      	b.n	80061c8 <USB_ActivateEndpoint+0x7c>
      break;
 80061c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	b29a      	uxth	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	7b1b      	ldrb	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 8149 	bne.w	80064cc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8084 	beq.w	800634c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	011a      	lsls	r2, r3, #4
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	88db      	ldrh	r3, [r3, #6]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	81fb      	strh	r3, [r7, #14]
 8006286:	89fb      	ldrh	r3, [r7, #14]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <USB_ActivateEndpoint+0x17c>
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	81bb      	strh	r3, [r7, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	89bb      	ldrh	r3, [r7, #12]
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	78db      	ldrb	r3, [r3, #3]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d020      	beq.n	8006312 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e6:	813b      	strh	r3, [r7, #8]
 80062e8:	893b      	ldrh	r3, [r7, #8]
 80062ea:	f083 0320 	eor.w	r3, r3, #32
 80062ee:	813b      	strh	r3, [r7, #8]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	441a      	add	r2, r3
 80062fa:	893b      	ldrh	r3, [r7, #8]
 80062fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630c:	b29b      	uxth	r3, r3
 800630e:	8013      	strh	r3, [r2, #0]
 8006310:	e27f      	b.n	8006812 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006328:	817b      	strh	r3, [r7, #10]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	441a      	add	r2, r3
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e262      	b.n	8006812 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	4413      	add	r3, r2
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	011a      	lsls	r2, r3, #4
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	4413      	add	r3, r2
 800636a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	b29b      	uxth	r3, r3
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	4413      	add	r3, r2
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	011a      	lsls	r2, r3, #4
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	4413      	add	r3, r2
 800639e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d112      	bne.n	80063d2 <USB_ActivateEndpoint+0x286>
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e02f      	b.n	8006432 <USB_ActivateEndpoint+0x2e6>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b3e      	cmp	r3, #62	; 0x3e
 80063d8:	d813      	bhi.n	8006402 <USB_ActivateEndpoint+0x2b6>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	663b      	str	r3, [r7, #96]	; 0x60
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <USB_ActivateEndpoint+0x2a8>
 80063ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f0:	3301      	adds	r3, #1
 80063f2:	663b      	str	r3, [r7, #96]	; 0x60
 80063f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e017      	b.n	8006432 <USB_ActivateEndpoint+0x2e6>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	663b      	str	r3, [r7, #96]	; 0x60
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <USB_ActivateEndpoint+0x2d0>
 8006416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006418:	3b01      	subs	r3, #1
 800641a:	663b      	str	r3, [r7, #96]	; 0x60
 800641c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641e:	b29b      	uxth	r3, r3
 8006420:	029b      	lsls	r3, r3, #10
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	83fb      	strh	r3, [r7, #30]
 8006440:	8bfb      	ldrh	r3, [r7, #30]
 8006442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01b      	beq.n	8006482 <USB_ActivateEndpoint+0x336>
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	83bb      	strh	r3, [r7, #28]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	8bbb      	ldrh	r3, [r7, #28]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006498:	837b      	strh	r3, [r7, #26]
 800649a:	8b7b      	ldrh	r3, [r7, #26]
 800649c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064a0:	837b      	strh	r3, [r7, #26]
 80064a2:	8b7b      	ldrh	r3, [r7, #26]
 80064a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064a8:	837b      	strh	r3, [r7, #26]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	8b7b      	ldrh	r3, [r7, #26]
 80064b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	8013      	strh	r3, [r2, #0]
 80064ca:	e1a2      	b.n	8006812 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	441a      	add	r2, r3
 80064f0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	65bb      	str	r3, [r7, #88]	; 0x58
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006518:	4413      	add	r3, r2
 800651a:	65bb      	str	r3, [r7, #88]	; 0x58
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	011a      	lsls	r2, r3, #4
 8006522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006524:	4413      	add	r3, r2
 8006526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652a:	657b      	str	r3, [r7, #84]	; 0x54
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	891b      	ldrh	r3, [r3, #8]
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	b29b      	uxth	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	653b      	str	r3, [r7, #80]	; 0x50
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006546:	b29b      	uxth	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	4413      	add	r3, r2
 800654e:	653b      	str	r3, [r7, #80]	; 0x50
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	4413      	add	r3, r2
 800655a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	895b      	ldrh	r3, [r3, #10]
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	b29b      	uxth	r3, r3
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8091 	bne.w	800669c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006588:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800658a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <USB_ActivateEndpoint+0x47e>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80065d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01b      	beq.n	800661a <USB_ActivateEndpoint+0x4ce>
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006630:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006632:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006634:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006638:	86bb      	strh	r3, [r7, #52]	; 0x34
 800663a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800663c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006640:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	867b      	strh	r3, [r7, #50]	; 0x32
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
 800669a:	e0ba      	b.n	8006812 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80066ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80066b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <USB_ActivateEndpoint+0x5a8>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006704:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01d      	beq.n	800674c <USB_ActivateEndpoint+0x600>
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d024      	beq.n	800679e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800676e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006772:	f083 0320 	eor.w	r3, r3, #32
 8006776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
 800679c:	e01d      	b.n	80067da <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006816:	4618      	mov	r0, r3
 8006818:	376c      	adds	r7, #108	; 0x6c
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006820:	b480      	push	{r7}
 8006822:	b08d      	sub	sp, #52	; 0x34
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	7b1b      	ldrb	r3, [r3, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 808e 	bne.w	8006950 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d044      	beq.n	80068c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	81bb      	strh	r3, [r7, #12]
 800684a:	89bb      	ldrh	r3, [r7, #12]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01b      	beq.n	800688c <USB_DeactivateEndpoint+0x6c>
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	817b      	strh	r3, [r7, #10]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006888:	b29b      	uxth	r3, r3
 800688a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a2:	813b      	strh	r3, [r7, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	893b      	ldrh	r3, [r7, #8]
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
 80068c4:	e192      	b.n	8006bec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	827b      	strh	r3, [r7, #18]
 80068d4:	8a7b      	ldrh	r3, [r7, #18]
 80068d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <USB_DeactivateEndpoint+0xf6>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	823b      	strh	r3, [r7, #16]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	8a3b      	ldrh	r3, [r7, #16]
 8006902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	81fb      	strh	r3, [r7, #14]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e14d      	b.n	8006bec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 80a5 	bne.w	8006aa4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	843b      	strh	r3, [r7, #32]
 8006968:	8c3b      	ldrh	r3, [r7, #32]
 800696a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01b      	beq.n	80069aa <USB_DeactivateEndpoint+0x18a>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	83fb      	strh	r3, [r7, #30]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8bfb      	ldrh	r3, [r7, #30]
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	83bb      	strh	r3, [r7, #28]
 80069b8:	8bbb      	ldrh	r3, [r7, #28]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01b      	beq.n	80069fa <USB_DeactivateEndpoint+0x1da>
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	837b      	strh	r3, [r7, #26]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	8b7b      	ldrh	r3, [r7, #26]
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a10:	833b      	strh	r3, [r7, #24]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	8b3b      	ldrh	r3, [r7, #24]
 8006a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	82fb      	strh	r3, [r7, #22]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	8afb      	ldrh	r3, [r7, #22]
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a80:	82bb      	strh	r3, [r7, #20]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8abb      	ldrh	r3, [r7, #20]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]
 8006aa2:	e0a3      	b.n	8006bec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01b      	beq.n	8006af4 <USB_DeactivateEndpoint+0x2d4>
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <USB_DeactivateEndpoint+0x324>
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	441a      	add	r2, r3
 8006b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	441a      	add	r2, r3
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3734      	adds	r7, #52	; 0x34
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr

08006bf8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b0cc      	sub	sp, #304	; 0x130
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	463b      	mov	r3, r7
 8006c04:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c06:	463b      	mov	r3, r7
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	f040 872e 	bne.w	8007a6e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c12:	463b      	mov	r3, r7
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d905      	bls.n	8006c2e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006c2c:	e004      	b.n	8006c38 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006c2e:	463b      	mov	r3, r7
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	7b1b      	ldrb	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d134      	bne.n	8006cac <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6959      	ldr	r1, [r3, #20]
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	88da      	ldrh	r2, [r3, #6]
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	1d38      	adds	r0, r7, #4
 8006c56:	6800      	ldr	r0, [r0, #0]
 8006c58:	f001 fbee 	bl	8008438 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	1d3a      	adds	r2, r7, #4
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	f107 0310 	add.w	r3, r7, #16
 8006c76:	f107 0210 	add.w	r2, r7, #16
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	011a      	lsls	r2, r3, #4
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c94:	f107 030c 	add.w	r3, r7, #12
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	f000 beac 	b.w	8007a04 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cac:	463b      	mov	r3, r7
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	78db      	ldrb	r3, [r3, #3]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	f040 838c 	bne.w	80073d0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f240 8330 	bls.w	800732a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d0e:	463b      	mov	r3, r7
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	1ad2      	subs	r2, r2, r3
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d20:	1d3b      	adds	r3, r7, #4
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 819e 	beq.w	8007078 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d40:	1d3a      	adds	r2, r7, #4
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d17a      	bne.n	8006e46 <USB_EPStartXfer+0x24e>
 8006d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d54:	1d3a      	adds	r2, r7, #4
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4619      	mov	r1, r3
 8006d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	440a      	add	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	463b      	mov	r3, r7
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	011a      	lsls	r2, r3, #4
 8006d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d11a      	bne.n	8006dcc <USB_EPStartXfer+0x1d4>
 8006d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e062      	b.n	8006e92 <USB_EPStartXfer+0x29a>
 8006dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd2:	d819      	bhi.n	8006e08 <USB_EPStartXfer+0x210>
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <USB_EPStartXfer+0x1fc>
 8006dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dee:	3301      	adds	r3, #1
 8006df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006df4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	e044      	b.n	8006e92 <USB_EPStartXfer+0x29a>
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <USB_EPStartXfer+0x230>
 8006e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e22:	3b01      	subs	r3, #1
 8006e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	029b      	lsls	r3, r3, #10
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e025      	b.n	8006e92 <USB_EPStartXfer+0x29a>
 8006e46:	463b      	mov	r3, r7
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d120      	bne.n	8006e92 <USB_EPStartXfer+0x29a>
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	440a      	add	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	011a      	lsls	r2, r3, #4
 8006e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	895b      	ldrh	r3, [r3, #10]
 8006e98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6959      	ldr	r1, [r3, #20]
 8006ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006eac:	1d38      	adds	r0, r7, #4
 8006eae:	6800      	ldr	r0, [r0, #0]
 8006eb0:	f001 fac2 	bl	8008438 <USB_WritePMA>
            ep->xfer_buff += len;
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebe:	441a      	add	r2, r3
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	463b      	mov	r3, r7
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d909      	bls.n	8006eea <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	621a      	str	r2, [r3, #32]
 8006ee8:	e008      	b.n	8006efc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d17a      	bne.n	8006ffc <USB_EPStartXfer+0x404>
 8006f06:	f107 0318 	add.w	r3, r7, #24
 8006f0a:	1d3a      	adds	r2, r7, #4
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	1d3b      	adds	r3, r7, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	f107 0318 	add.w	r3, r7, #24
 8006f20:	f107 0218 	add.w	r2, r7, #24
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	440a      	add	r2, r1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	011a      	lsls	r2, r3, #4
 8006f32:	f107 0318 	add.w	r3, r7, #24
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d11a      	bne.n	8006f82 <USB_EPStartXfer+0x38a>
 8006f4c:	f107 0314 	add.w	r3, r7, #20
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e067      	b.n	8007052 <USB_EPStartXfer+0x45a>
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	2b3e      	cmp	r3, #62	; 0x3e
 8006f88:	d819      	bhi.n	8006fbe <USB_EPStartXfer+0x3c6>
 8006f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USB_EPStartXfer+0x3b2>
 8006fa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006faa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	029b      	lsls	r3, r3, #10
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e049      	b.n	8007052 <USB_EPStartXfer+0x45a>
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USB_EPStartXfer+0x3e6>
 8006fd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006fde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	029b      	lsls	r3, r3, #10
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f107 0314 	add.w	r3, r7, #20
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e02a      	b.n	8007052 <USB_EPStartXfer+0x45a>
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d125      	bne.n	8007052 <USB_EPStartXfer+0x45a>
 8007006:	f107 0320 	add.w	r3, r7, #32
 800700a:	1d3a      	adds	r2, r7, #4
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007018:	b29b      	uxth	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	f107 0320 	add.w	r3, r7, #32
 8007020:	f107 0220 	add.w	r2, r7, #32
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	440a      	add	r2, r1
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	011a      	lsls	r2, r3, #4
 8007032:	f107 0320 	add.w	r3, r7, #32
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4413      	add	r3, r2
 800703a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800703e:	f107 031c 	add.w	r3, r7, #28
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007048:	b29a      	uxth	r2, r3
 800704a:	f107 031c 	add.w	r3, r7, #28
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007052:	463b      	mov	r3, r7
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	891b      	ldrh	r3, [r3, #8]
 8007058:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800705c:	463b      	mov	r3, r7
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6959      	ldr	r1, [r3, #20]
 8007062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007066:	b29b      	uxth	r3, r3
 8007068:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800706c:	1d38      	adds	r0, r7, #4
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	f001 f9e2 	bl	8008438 <USB_WritePMA>
 8007074:	f000 bcc6 	b.w	8007a04 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007078:	463b      	mov	r3, r7
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d164      	bne.n	800714c <USB_EPStartXfer+0x554>
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	64bb      	str	r3, [r7, #72]	; 0x48
 8007088:	1d3b      	adds	r3, r7, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007096:	4413      	add	r3, r2
 8007098:	64bb      	str	r3, [r7, #72]	; 0x48
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	011a      	lsls	r2, r3, #4
 80070a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070aa:	647b      	str	r3, [r7, #68]	; 0x44
 80070ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d112      	bne.n	80070da <USB_EPStartXfer+0x4e2>
 80070b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e057      	b.n	800718a <USB_EPStartXfer+0x592>
 80070da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070de:	2b3e      	cmp	r3, #62	; 0x3e
 80070e0:	d817      	bhi.n	8007112 <USB_EPStartXfer+0x51a>
 80070e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <USB_EPStartXfer+0x50a>
 80070f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070fc:	3301      	adds	r3, #1
 80070fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007102:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29a      	uxth	r2, r3
 800710c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e03b      	b.n	800718a <USB_EPStartXfer+0x592>
 8007112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800711c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <USB_EPStartXfer+0x53a>
 8007128:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800712c:	3b01      	subs	r3, #1
 800712e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007132:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007136:	b29b      	uxth	r3, r3
 8007138:	029b      	lsls	r3, r3, #10
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e01e      	b.n	800718a <USB_EPStartXfer+0x592>
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d119      	bne.n	800718a <USB_EPStartXfer+0x592>
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	653b      	str	r3, [r7, #80]	; 0x50
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716a:	4413      	add	r3, r2
 800716c:	653b      	str	r3, [r7, #80]	; 0x50
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	011a      	lsls	r2, r3, #4
 8007176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007178:	4413      	add	r3, r2
 800717a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	b29a      	uxth	r2, r3
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800718a:	463b      	mov	r3, r7
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	891b      	ldrh	r3, [r3, #8]
 8007190:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6959      	ldr	r1, [r3, #20]
 800719a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071a4:	1d38      	adds	r0, r7, #4
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	f001 f946 	bl	8008438 <USB_WritePMA>
            ep->xfer_buff += len;
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	441a      	add	r2, r3
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a1a      	ldr	r2, [r3, #32]
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d909      	bls.n	80071e2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a1a      	ldr	r2, [r3, #32]
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	1ad2      	subs	r2, r2, r3
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	621a      	str	r2, [r3, #32]
 80071e0:	e008      	b.n	80071f4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80071e2:	463b      	mov	r3, r7
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2200      	movs	r2, #0
 80071f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071f4:	1d3b      	adds	r3, r7, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	643b      	str	r3, [r7, #64]	; 0x40
 80071fa:	463b      	mov	r3, r7
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d164      	bne.n	80072ce <USB_EPStartXfer+0x6d6>
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	4413      	add	r3, r2
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	4413      	add	r3, r2
 8007228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d112      	bne.n	800725c <USB_EPStartXfer+0x664>
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007240:	b29a      	uxth	r2, r3
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007254:	b29a      	uxth	r2, r3
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e054      	b.n	8007306 <USB_EPStartXfer+0x70e>
 800725c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007260:	2b3e      	cmp	r3, #62	; 0x3e
 8007262:	d817      	bhi.n	8007294 <USB_EPStartXfer+0x69c>
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800726e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <USB_EPStartXfer+0x68c>
 800727a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800727e:	3301      	adds	r3, #1
 8007280:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29a      	uxth	r2, r3
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	e038      	b.n	8007306 <USB_EPStartXfer+0x70e>
 8007294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <USB_EPStartXfer+0x6bc>
 80072aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072ae:	3b01      	subs	r3, #1
 80072b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	029b      	lsls	r3, r3, #10
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e01b      	b.n	8007306 <USB_EPStartXfer+0x70e>
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d116      	bne.n	8007306 <USB_EPStartXfer+0x70e>
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	4413      	add	r3, r2
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ea:	463b      	mov	r3, r7
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	011a      	lsls	r2, r3, #4
 80072f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	b29a      	uxth	r2, r3
 8007302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007306:	463b      	mov	r3, r7
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	895b      	ldrh	r3, [r3, #10]
 800730c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007310:	463b      	mov	r3, r7
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6959      	ldr	r1, [r3, #20]
 8007316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731a:	b29b      	uxth	r3, r3
 800731c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007320:	1d38      	adds	r0, r7, #4
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	f001 f888 	bl	8008438 <USB_WritePMA>
 8007328:	e36c      	b.n	8007a04 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800732a:	463b      	mov	r3, r7
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	463b      	mov	r3, r7
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007352:	1d3b      	adds	r3, r7, #4
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	441a      	add	r2, r3
 8007360:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	b29b      	uxth	r3, r3
 8007376:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800737e:	1d3b      	adds	r3, r7, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738c:	4413      	add	r3, r2
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	011a      	lsls	r2, r3, #4
 8007398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739a:	4413      	add	r3, r2
 800739c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	891b      	ldrh	r3, [r3, #8]
 80073b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b6:	463b      	mov	r3, r7
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6959      	ldr	r1, [r3, #20]
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073c6:	1d38      	adds	r0, r7, #4
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	f001 f835 	bl	8008438 <USB_WritePMA>
 80073ce:	e319      	b.n	8007a04 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80073d0:	1d3b      	adds	r3, r7, #4
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007408:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800740c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007410:	b29b      	uxth	r3, r3
 8007412:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007414:	463b      	mov	r3, r7
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007426:	1d3b      	adds	r3, r7, #4
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	463b      	mov	r3, r7
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8162 	beq.w	8007706 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800744a:	463b      	mov	r3, r7
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d164      	bne.n	800751e <USB_EPStartXfer+0x926>
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	67bb      	str	r3, [r7, #120]	; 0x78
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007462:	b29b      	uxth	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007468:	4413      	add	r3, r2
 800746a:	67bb      	str	r3, [r7, #120]	; 0x78
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	011a      	lsls	r2, r3, #4
 8007474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007476:	4413      	add	r3, r2
 8007478:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800747c:	677b      	str	r3, [r7, #116]	; 0x74
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d112      	bne.n	80074ac <USB_EPStartXfer+0x8b4>
 8007486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007490:	b29a      	uxth	r2, r3
 8007492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	e057      	b.n	800755c <USB_EPStartXfer+0x964>
 80074ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b0:	2b3e      	cmp	r3, #62	; 0x3e
 80074b2:	d817      	bhi.n	80074e4 <USB_EPStartXfer+0x8ec>
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <USB_EPStartXfer+0x8dc>
 80074ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074ce:	3301      	adds	r3, #1
 80074d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074d8:	b29b      	uxth	r3, r3
 80074da:	029b      	lsls	r3, r3, #10
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e03b      	b.n	800755c <USB_EPStartXfer+0x964>
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USB_EPStartXfer+0x90c>
 80074fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074fe:	3b01      	subs	r3, #1
 8007500:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007504:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29b      	uxth	r3, r3
 800750e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007516:	b29a      	uxth	r2, r3
 8007518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e01e      	b.n	800755c <USB_EPStartXfer+0x964>
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d119      	bne.n	800755c <USB_EPStartXfer+0x964>
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007538:	4413      	add	r3, r2
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	011a      	lsls	r2, r3, #4
 8007546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800754a:	4413      	add	r3, r2
 800754c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007556:	b29a      	uxth	r2, r3
 8007558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800755a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800755c:	463b      	mov	r3, r7
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	895b      	ldrh	r3, [r3, #10]
 8007562:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6959      	ldr	r1, [r3, #20]
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	b29b      	uxth	r3, r3
 8007572:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007576:	1d38      	adds	r0, r7, #4
 8007578:	6800      	ldr	r0, [r0, #0]
 800757a:	f000 ff5d 	bl	8008438 <USB_WritePMA>
          ep->xfer_buff += len;
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	441a      	add	r2, r3
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007590:	463b      	mov	r3, r7
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	463b      	mov	r3, r7
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	429a      	cmp	r2, r3
 800759e:	d909      	bls.n	80075b4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80075a0:	463b      	mov	r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	621a      	str	r2, [r3, #32]
 80075b2:	e008      	b.n	80075c6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075be:	463b      	mov	r3, r7
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 821a 	beq.w	8007a04 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075d0:	463b      	mov	r3, r7
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d164      	bne.n	80076a4 <USB_EPStartXfer+0xaac>
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	66bb      	str	r3, [r7, #104]	; 0x68
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ee:	4413      	add	r3, r2
 80075f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	011a      	lsls	r2, r3, #4
 80075fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075fc:	4413      	add	r3, r2
 80075fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007602:	667b      	str	r3, [r7, #100]	; 0x64
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d112      	bne.n	8007632 <USB_EPStartXfer+0xa3a>
 800760c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007616:	b29a      	uxth	r2, r3
 8007618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762a:	b29a      	uxth	r2, r3
 800762c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	e057      	b.n	80076e2 <USB_EPStartXfer+0xaea>
 8007632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007636:	2b3e      	cmp	r3, #62	; 0x3e
 8007638:	d817      	bhi.n	800766a <USB_EPStartXfer+0xa72>
 800763a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <USB_EPStartXfer+0xa62>
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765e:	b29b      	uxth	r3, r3
 8007660:	029b      	lsls	r3, r3, #10
 8007662:	b29a      	uxth	r2, r3
 8007664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	e03b      	b.n	80076e2 <USB_EPStartXfer+0xaea>
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <USB_EPStartXfer+0xa92>
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	3b01      	subs	r3, #1
 8007686:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769c:	b29a      	uxth	r2, r3
 800769e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	e01e      	b.n	80076e2 <USB_EPStartXfer+0xaea>
 80076a4:	463b      	mov	r3, r7
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d119      	bne.n	80076e2 <USB_EPStartXfer+0xaea>
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	673b      	str	r3, [r7, #112]	; 0x70
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c2:	4413      	add	r3, r2
 80076c4:	673b      	str	r3, [r7, #112]	; 0x70
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076d0:	4413      	add	r3, r2
 80076d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076e2:	463b      	mov	r3, r7
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	891b      	ldrh	r3, [r3, #8]
 80076e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076fc:	1d38      	adds	r0, r7, #4
 80076fe:	6800      	ldr	r0, [r0, #0]
 8007700:	f000 fe9a 	bl	8008438 <USB_WritePMA>
 8007704:	e17e      	b.n	8007a04 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007706:	463b      	mov	r3, r7
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d16f      	bne.n	80077f0 <USB_EPStartXfer+0xbf8>
 8007710:	1d3b      	adds	r3, r7, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007728:	4413      	add	r3, r2
 800772a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800772e:	463b      	mov	r3, r7
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800773a:	4413      	add	r3, r2
 800773c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d116      	bne.n	800777a <USB_EPStartXfer+0xb82>
 800774c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e05f      	b.n	800783a <USB_EPStartXfer+0xc42>
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	2b3e      	cmp	r3, #62	; 0x3e
 8007780:	d818      	bhi.n	80077b4 <USB_EPStartXfer+0xbbc>
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <USB_EPStartXfer+0xbaa>
 8007798:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80077a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e042      	b.n	800783a <USB_EPStartXfer+0xc42>
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <USB_EPStartXfer+0xbdc>
 80077ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80077d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80077d8:	b29b      	uxth	r3, r3
 80077da:	029b      	lsls	r3, r3, #10
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e024      	b.n	800783a <USB_EPStartXfer+0xc42>
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d11f      	bne.n	800783a <USB_EPStartXfer+0xc42>
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007812:	4413      	add	r3, r2
 8007814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	011a      	lsls	r2, r3, #4
 8007820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007824:	4413      	add	r3, r2
 8007826:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800782a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007838:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800783a:	463b      	mov	r3, r7
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	891b      	ldrh	r3, [r3, #8]
 8007840:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6959      	ldr	r1, [r3, #20]
 800784a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784e:	b29b      	uxth	r3, r3
 8007850:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007854:	1d38      	adds	r0, r7, #4
 8007856:	6800      	ldr	r0, [r0, #0]
 8007858:	f000 fdee 	bl	8008438 <USB_WritePMA>
          ep->xfer_buff += len;
 800785c:	463b      	mov	r3, r7
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007866:	441a      	add	r2, r3
 8007868:	463b      	mov	r3, r7
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800786e:	463b      	mov	r3, r7
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6a1a      	ldr	r2, [r3, #32]
 8007874:	463b      	mov	r3, r7
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	429a      	cmp	r2, r3
 800787c:	d909      	bls.n	8007892 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800787e:	463b      	mov	r3, r7
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007888:	1ad2      	subs	r2, r2, r3
 800788a:	463b      	mov	r3, r7
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	621a      	str	r2, [r3, #32]
 8007890:	e008      	b.n	80078a4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007892:	463b      	mov	r3, r7
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800789c:	463b      	mov	r3, r7
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80078a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80ab 	beq.w	8007a04 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078ae:	1d3b      	adds	r3, r7, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078b6:	463b      	mov	r3, r7
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d16f      	bne.n	80079a0 <USB_EPStartXfer+0xda8>
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078c8:	1d3b      	adds	r3, r7, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078d8:	4413      	add	r3, r2
 80078da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078de:	463b      	mov	r3, r7
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	011a      	lsls	r2, r3, #4
 80078e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <USB_EPStartXfer+0xd32>
 80078fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007908:	b29a      	uxth	r2, r3
 800790a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e05b      	b.n	80079e2 <USB_EPStartXfer+0xdea>
 800792a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792e:	2b3e      	cmp	r3, #62	; 0x3e
 8007930:	d818      	bhi.n	8007964 <USB_EPStartXfer+0xd6c>
 8007932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <USB_EPStartXfer+0xd5a>
 8007948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794c:	3301      	adds	r3, #1
 800794e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007956:	b29b      	uxth	r3, r3
 8007958:	029b      	lsls	r3, r3, #10
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e03e      	b.n	80079e2 <USB_EPStartXfer+0xdea>
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <USB_EPStartXfer+0xd8c>
 800797a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797e:	3b01      	subs	r3, #1
 8007980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007988:	b29b      	uxth	r3, r3
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e020      	b.n	80079e2 <USB_EPStartXfer+0xdea>
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d11b      	bne.n	80079e2 <USB_EPStartXfer+0xdea>
 80079aa:	1d3b      	adds	r3, r7, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ba:	4413      	add	r3, r2
 80079bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079c0:	463b      	mov	r3, r7
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	011a      	lsls	r2, r3, #4
 80079c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079cc:	4413      	add	r3, r2
 80079ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079e2:	463b      	mov	r3, r7
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	895b      	ldrh	r3, [r3, #10]
 80079e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6959      	ldr	r1, [r3, #20]
 80079f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079fc:	1d38      	adds	r0, r7, #4
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	f000 fd1a 	bl	8008438 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f107 020a 	add.w	r2, r7, #10
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a22:	8013      	strh	r3, [r2, #0]
 8007a24:	f107 030a 	add.w	r3, r7, #10
 8007a28:	f107 020a 	add.w	r2, r7, #10
 8007a2c:	8812      	ldrh	r2, [r2, #0]
 8007a2e:	f082 0210 	eor.w	r2, r2, #16
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	f107 030a 	add.w	r3, r7, #10
 8007a38:	f107 020a 	add.w	r2, r7, #10
 8007a3c:	8812      	ldrh	r2, [r2, #0]
 8007a3e:	f082 0220 	eor.w	r2, r2, #32
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	463b      	mov	r3, r7
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	f107 030a 	add.w	r3, r7, #10
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]
 8007a6c:	e3b5      	b.n	80081da <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a6e:	463b      	mov	r3, r7
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 8090 	bne.w	8007b9a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	463b      	mov	r3, r7
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d90e      	bls.n	8007aa8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007a94:	463b      	mov	r3, r7
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	619a      	str	r2, [r3, #24]
 8007aa6:	e008      	b.n	8007aba <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ac2:	1d3b      	adds	r3, r7, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ad8:	463b      	mov	r3, r7
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	011a      	lsls	r2, r3, #4
 8007ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d116      	bne.n	8007b24 <USB_EPStartXfer+0xf2c>
 8007af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e32c      	b.n	800817e <USB_EPStartXfer+0x1586>
 8007b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b28:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2a:	d818      	bhi.n	8007b5e <USB_EPStartXfer+0xf66>
 8007b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b30:	085b      	lsrs	r3, r3, #1
 8007b32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <USB_EPStartXfer+0xf54>
 8007b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	029b      	lsls	r3, r3, #10
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e30f      	b.n	800817e <USB_EPStartXfer+0x1586>
 8007b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USB_EPStartXfer+0xf86>
 8007b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e2f1      	b.n	800817e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f040 818f 	bne.w	8007ec4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d175      	bne.n	8007c9c <USB_EPStartXfer+0x10a4>
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bc8:	4413      	add	r3, r2
 8007bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bce:	463b      	mov	r3, r7
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	011a      	lsls	r2, r3, #4
 8007bd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bda:	4413      	add	r3, r2
 8007bdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d116      	bne.n	8007c1c <USB_EPStartXfer+0x1024>
 8007bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e065      	b.n	8007ce8 <USB_EPStartXfer+0x10f0>
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b3e      	cmp	r3, #62	; 0x3e
 8007c24:	d81a      	bhi.n	8007c5c <USB_EPStartXfer+0x1064>
 8007c26:	463b      	mov	r3, r7
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <USB_EPStartXfer+0x1052>
 8007c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c44:	3301      	adds	r3, #1
 8007c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	029b      	lsls	r3, r3, #10
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e045      	b.n	8007ce8 <USB_EPStartXfer+0x10f0>
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c68:	463b      	mov	r3, r7
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <USB_EPStartXfer+0x1088>
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	e025      	b.n	8007ce8 <USB_EPStartXfer+0x10f0>
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d120      	bne.n	8007ce8 <USB_EPStartXfer+0x10f0>
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	011a      	lsls	r2, r3, #4
 8007ccc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d175      	bne.n	8007de6 <USB_EPStartXfer+0x11ee>
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d12:	4413      	add	r3, r2
 8007d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	011a      	lsls	r2, r3, #4
 8007d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d2e:	463b      	mov	r3, r7
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d116      	bne.n	8007d66 <USB_EPStartXfer+0x116e>
 8007d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e061      	b.n	8007e2a <USB_EPStartXfer+0x1232>
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d6e:	d81a      	bhi.n	8007da6 <USB_EPStartXfer+0x11ae>
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <USB_EPStartXfer+0x119c>
 8007d8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	029b      	lsls	r3, r3, #10
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	e041      	b.n	8007e2a <USB_EPStartXfer+0x1232>
 8007da6:	463b      	mov	r3, r7
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007db2:	463b      	mov	r3, r7
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <USB_EPStartXfer+0x11d2>
 8007dc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de2:	801a      	strh	r2, [r3, #0]
 8007de4:	e021      	b.n	8007e2a <USB_EPStartXfer+0x1232>
 8007de6:	463b      	mov	r3, r7
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d11c      	bne.n	8007e2a <USB_EPStartXfer+0x1232>
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e00:	4413      	add	r3, r2
 8007e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e06:	463b      	mov	r3, r7
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	011a      	lsls	r2, r3, #4
 8007e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e12:	4413      	add	r3, r2
 8007e14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 81a4 	beq.w	800817e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e4a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <USB_EPStartXfer+0x126a>
 8007e56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10d      	bne.n	8007e7e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f040 8187 	bne.w	800817e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f040 8180 	bne.w	800817e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e7e:	1d3b      	adds	r3, r7, #4
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e98:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007e9c:	1d3b      	adds	r3, r7, #4
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]
 8007ec2:	e15c      	b.n	800817e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	78db      	ldrb	r3, [r3, #3]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	f040 8155 	bne.w	800817a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d90e      	bls.n	8007efe <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007eea:	463b      	mov	r3, r7
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	619a      	str	r2, [r3, #24]
 8007efc:	e008      	b.n	8007f10 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007efe:	463b      	mov	r3, r7
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007f08:	463b      	mov	r3, r7
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f10:	463b      	mov	r3, r7
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d16f      	bne.n	8007ffa <USB_EPStartXfer+0x1402>
 8007f1a:	1d3b      	adds	r3, r7, #4
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f32:	4413      	add	r3, r2
 8007f34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	011a      	lsls	r2, r3, #4
 8007f40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d116      	bne.n	8007f84 <USB_EPStartXfer+0x138c>
 8007f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	e05f      	b.n	8008044 <USB_EPStartXfer+0x144c>
 8007f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f88:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8a:	d818      	bhi.n	8007fbe <USB_EPStartXfer+0x13c6>
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <USB_EPStartXfer+0x13b4>
 8007fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	e042      	b.n	8008044 <USB_EPStartXfer+0x144c>
 8007fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <USB_EPStartXfer+0x13e6>
 8007fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	029b      	lsls	r3, r3, #10
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e024      	b.n	8008044 <USB_EPStartXfer+0x144c>
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11f      	bne.n	8008044 <USB_EPStartXfer+0x144c>
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008014:	b29b      	uxth	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	4413      	add	r3, r2
 800801e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008022:	463b      	mov	r3, r7
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	011a      	lsls	r2, r3, #4
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	4413      	add	r3, r2
 8008030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008034:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	1d3b      	adds	r3, r7, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d16f      	bne.n	8008136 <USB_EPStartXfer+0x153e>
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800805e:	1d3b      	adds	r3, r7, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008066:	b29b      	uxth	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	4413      	add	r3, r2
 8008070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008074:	463b      	mov	r3, r7
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	011a      	lsls	r2, r3, #4
 800807c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008080:	4413      	add	r3, r2
 8008082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800808a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d116      	bne.n	80080c0 <USB_EPStartXfer+0x14c8>
 8008092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800809e:	b29a      	uxth	r2, r3
 80080a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e05e      	b.n	800817e <USB_EPStartXfer+0x1586>
 80080c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c4:	2b3e      	cmp	r3, #62	; 0x3e
 80080c6:	d818      	bhi.n	80080fa <USB_EPStartXfer+0x1502>
 80080c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <USB_EPStartXfer+0x14f0>
 80080de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080e2:	3301      	adds	r3, #1
 80080e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	029b      	lsls	r3, r3, #10
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	e041      	b.n	800817e <USB_EPStartXfer+0x1586>
 80080fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <USB_EPStartXfer+0x1522>
 8008110:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008114:	3b01      	subs	r3, #1
 8008116:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800811a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800811e:	b29b      	uxth	r3, r3
 8008120:	029b      	lsls	r3, r3, #10
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812c:	b29a      	uxth	r2, r3
 800812e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	e023      	b.n	800817e <USB_EPStartXfer+0x1586>
 8008136:	463b      	mov	r3, r7
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d11e      	bne.n	800817e <USB_EPStartXfer+0x1586>
 8008140:	1d3b      	adds	r3, r7, #4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008148:	b29b      	uxth	r3, r3
 800814a:	461a      	mov	r2, r3
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	4413      	add	r3, r2
 8008152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008156:	463b      	mov	r3, r7
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	011a      	lsls	r2, r3, #4
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	4413      	add	r3, r2
 8008164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800816c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008170:	b29a      	uxth	r2, r3
 8008172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	e001      	b.n	800817e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e02e      	b.n	80081dc <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	463b      	mov	r3, r7
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008198:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800819c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081a4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	463b      	mov	r3, r7
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d020      	beq.n	800823a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820e:	81bb      	strh	r3, [r7, #12]
 8008210:	89bb      	ldrh	r3, [r7, #12]
 8008212:	f083 0310 	eor.w	r3, r3, #16
 8008216:	81bb      	strh	r3, [r7, #12]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	441a      	add	r2, r3
 8008222:	89bb      	ldrh	r3, [r7, #12]
 8008224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	b29b      	uxth	r3, r3
 8008236:	8013      	strh	r3, [r2, #0]
 8008238:	e01f      	b.n	800827a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800824c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008250:	81fb      	strh	r3, [r7, #14]
 8008252:	89fb      	ldrh	r3, [r7, #14]
 8008254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008258:	81fb      	strh	r3, [r7, #14]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008276:	b29b      	uxth	r3, r3
 8008278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008286:	b480      	push	{r7}
 8008288:	b087      	sub	sp, #28
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	7b1b      	ldrb	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 809d 	bne.w	80083d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d04c      	beq.n	800833c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	823b      	strh	r3, [r7, #16]
 80082b0:	8a3b      	ldrh	r3, [r7, #16]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01b      	beq.n	80082f2 <USB_EPClearStall+0x6c>
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d0:	81fb      	strh	r3, [r7, #14]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	89fb      	ldrh	r3, [r7, #14]
 80082de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	78db      	ldrb	r3, [r3, #3]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d06c      	beq.n	80083d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008310:	81bb      	strh	r3, [r7, #12]
 8008312:	89bb      	ldrh	r3, [r7, #12]
 8008314:	f083 0320 	eor.w	r3, r3, #32
 8008318:	81bb      	strh	r3, [r7, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	89bb      	ldrh	r3, [r7, #12]
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]
 800833a:	e04b      	b.n	80083d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	82fb      	strh	r3, [r7, #22]
 800834a:	8afb      	ldrh	r3, [r7, #22]
 800834c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <USB_EPClearStall+0x106>
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836a:	82bb      	strh	r3, [r7, #20]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	8abb      	ldrh	r3, [r7, #20]
 8008378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008388:	b29b      	uxth	r3, r3
 800838a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a2:	827b      	strh	r3, [r7, #18]
 80083a4:	8a7b      	ldrh	r3, [r7, #18]
 80083a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083aa:	827b      	strh	r3, [r7, #18]
 80083ac:	8a7b      	ldrh	r3, [r7, #18]
 80083ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083b2:	827b      	strh	r3, [r7, #18]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	441a      	add	r2, r3
 80083be:	8a7b      	ldrh	r3, [r7, #18]
 80083c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr

080083e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2280      	movs	r2, #128	; 0x80
 80083f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008428:	b29b      	uxth	r3, r3
 800842a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008438:	b480      	push	{r7}
 800843a:	b08d      	sub	sp, #52	; 0x34
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4611      	mov	r1, r2
 8008444:	461a      	mov	r2, r3
 8008446:	460b      	mov	r3, r1
 8008448:	80fb      	strh	r3, [r7, #6]
 800844a:	4613      	mov	r3, r2
 800844c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800844e:	88bb      	ldrh	r3, [r7, #4]
 8008450:	3301      	adds	r3, #1
 8008452:	085b      	lsrs	r3, r3, #1
 8008454:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	005a      	lsls	r2, r3, #1
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008470:	e01e      	b.n	80084b0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	3301      	adds	r3, #1
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	b29a      	uxth	r2, r3
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	3302      	adds	r3, #2
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	3302      	adds	r3, #2
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	3301      	adds	r3, #1
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	3b01      	subs	r3, #1
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1dd      	bne.n	8008472 <USB_WritePMA+0x3a>
  }
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	3734      	adds	r7, #52	; 0x34
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr

080084c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b08b      	sub	sp, #44	; 0x2c
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4611      	mov	r1, r2
 80084ce:	461a      	mov	r2, r3
 80084d0:	460b      	mov	r3, r1
 80084d2:	80fb      	strh	r3, [r7, #6]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084d8:	88bb      	ldrh	r3, [r7, #4]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	b29b      	uxth	r3, r3
 80084de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	005a      	lsls	r2, r3, #1
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
 80084fa:	e01b      	b.n	8008534 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	3302      	adds	r3, #2
 8008508:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	3301      	adds	r3, #1
 8008516:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	0a1b      	lsrs	r3, r3, #8
 800851c:	b2da      	uxtb	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	3302      	adds	r3, #2
 800852c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	3b01      	subs	r3, #1
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e0      	bne.n	80084fc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800853a:	88bb      	ldrh	r3, [r7, #4]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b29b      	uxth	r3, r3
 800854c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	701a      	strb	r2, [r3, #0]
  }
}
 8008556:	bf00      	nop
 8008558:	372c      	adds	r7, #44	; 0x2c
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008564:	4904      	ldr	r1, [pc, #16]	; (8008578 <MX_FATFS_Init+0x18>)
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <MX_FATFS_Init+0x1c>)
 8008568:	f001 fba0 	bl	8009cac <FATFS_LinkDriver>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <MX_FATFS_Init+0x20>)
 8008572:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008574:	bf00      	nop
 8008576:	bd80      	pop	{r7, pc}
 8008578:	2000209c 	.word	0x2000209c
 800857c:	20000010 	.word	0x20000010
 8008580:	200020a0 	.word	0x200020a0

08008584 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <USER_initialize+0x20>)
 8008590:	2201      	movs	r2, #1
 8008592:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008594:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USER_initialize+0x20>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc80      	pop	{r7}
 80085a2:	4770      	bx	lr
 80085a4:	2000000c 	.word	0x2000000c

080085a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <USER_status+0x20>)
 80085b4:	2201      	movs	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USER_status+0x20>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	2000000c 	.word	0x2000000c

080085cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80085dc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80085f8:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	603a      	str	r2, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
 8008610:	460b      	mov	r3, r1
 8008612:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
    return res;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7c1b      	ldrb	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d115      	bne.n	8008668 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800863c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008640:	2202      	movs	r2, #2
 8008642:	2181      	movs	r1, #129	; 0x81
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f004 fbec 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008654:	2202      	movs	r2, #2
 8008656:	2101      	movs	r1, #1
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f004 fbe2 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008666:	e012      	b.n	800868e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008668:	2340      	movs	r3, #64	; 0x40
 800866a:	2202      	movs	r2, #2
 800866c:	2181      	movs	r1, #129	; 0x81
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f004 fbd7 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	2202      	movs	r2, #2
 800867e:	2101      	movs	r1, #1
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f004 fbce 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800868e:	2308      	movs	r3, #8
 8008690:	2203      	movs	r2, #3
 8008692:	2182      	movs	r1, #130	; 0x82
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f004 fbc4 	bl	800ce22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80086a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086a4:	f004 fce4 	bl	800d070 <USBD_static_malloc>
 80086a8:	4602      	mov	r2, r0
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]
 80086be:	e026      	b.n	800870e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7c1b      	ldrb	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f4:	2101      	movs	r1, #1
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f004 fc84 	bl	800d004 <USBD_LL_PrepareReceive>
 80086fc:	e007      	b.n	800870e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	2101      	movs	r1, #1
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f004 fc7b 	bl	800d004 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008728:	2181      	movs	r1, #129	; 0x81
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f004 fb9f 	bl	800ce6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008736:	2101      	movs	r1, #1
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f004 fb98 	bl	800ce6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008746:	2182      	movs	r1, #130	; 0x82
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f004 fb90 	bl	800ce6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00e      	beq.n	800877c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800876e:	4618      	mov	r0, r3
 8008770:	f004 fc8a 	bl	800d088 <USBD_static_free>
    pdev->pClassData = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b086      	sub	sp, #24
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008796:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d039      	beq.n	8008824 <USBD_CDC_Setup+0x9e>
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d17f      	bne.n	80088b4 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	88db      	ldrh	r3, [r3, #6]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d029      	beq.n	8008810 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da11      	bge.n	80087ea <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80087d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	88d2      	ldrh	r2, [r2, #6]
 80087d8:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80087da:	6939      	ldr	r1, [r7, #16]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	88db      	ldrh	r3, [r3, #6]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f993 	bl	8009b0e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80087e8:	e06b      	b.n	80088c2 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	785a      	ldrb	r2, [r3, #1]
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	88db      	ldrh	r3, [r3, #6]
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008800:	6939      	ldr	r1, [r7, #16]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	88db      	ldrh	r3, [r3, #6]
 8008806:	461a      	mov	r2, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f9ae 	bl	8009b6a <USBD_CtlPrepareRx>
    break;
 800880e:	e058      	b.n	80088c2 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	7850      	ldrb	r0, [r2, #1]
 800881c:	2200      	movs	r2, #0
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	4798      	blx	r3
    break;
 8008822:	e04e      	b.n	80088c2 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b0b      	cmp	r3, #11
 800882a:	d02e      	beq.n	800888a <USBD_CDC_Setup+0x104>
 800882c:	2b0b      	cmp	r3, #11
 800882e:	dc38      	bgt.n	80088a2 <USBD_CDC_Setup+0x11c>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <USBD_CDC_Setup+0xb4>
 8008834:	2b0a      	cmp	r3, #10
 8008836:	d014      	beq.n	8008862 <USBD_CDC_Setup+0xdc>
 8008838:	e033      	b.n	80088a2 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008840:	2b03      	cmp	r3, #3
 8008842:	d107      	bne.n	8008854 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	2202      	movs	r2, #2
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f95e 	bl	8009b0e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008852:	e02e      	b.n	80088b2 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f8ef 	bl	8009a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	75fb      	strb	r3, [r7, #23]
      break;
 8008860:	e027      	b.n	80088b2 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008868:	2b03      	cmp	r3, #3
 800886a:	d107      	bne.n	800887c <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800886c:	f107 030f 	add.w	r3, r7, #15
 8008870:	2201      	movs	r2, #1
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f94a 	bl	8009b0e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800887a:	e01a      	b.n	80088b2 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f8db 	bl	8009a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8008884:	2302      	movs	r3, #2
 8008886:	75fb      	strb	r3, [r7, #23]
      break;
 8008888:	e013      	b.n	80088b2 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008890:	2b03      	cmp	r3, #3
 8008892:	d00d      	beq.n	80088b0 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 f8cf 	bl	8009a3a <USBD_CtlError>
			  ret = USBD_FAIL;
 800889c:	2302      	movs	r3, #2
 800889e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80088a0:	e006      	b.n	80088b0 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f8c8 	bl	8009a3a <USBD_CtlError>
      ret = USBD_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	75fb      	strb	r3, [r7, #23]
      break;
 80088ae:	e000      	b.n	80088b2 <USBD_CDC_Setup+0x12c>
      break;
 80088b0:	bf00      	nop
    }
    break;
 80088b2:	e006      	b.n	80088c2 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 f8bf 	bl	8009a3a <USBD_CtlError>
    ret = USBD_FAIL;
 80088bc:	2302      	movs	r3, #2
 80088be:	75fb      	strb	r3, [r7, #23]
    break;
 80088c0:	bf00      	nop
  }

  return ret;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088e6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d03a      	beq.n	8008968 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	331c      	adds	r3, #28
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d029      	beq.n	800895c <USBD_CDC_DataIn+0x90>
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	331c      	adds	r3, #28
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	78f9      	ldrb	r1, [r7, #3]
 800891c:	68b8      	ldr	r0, [r7, #8]
 800891e:	460b      	mov	r3, r1
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	4403      	add	r3, r0
 8008928:	3338      	adds	r3, #56	; 0x38
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008930:	fb03 f301 	mul.w	r3, r3, r1
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d110      	bne.n	800895c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	331c      	adds	r3, #28
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800894e:	78f9      	ldrb	r1, [r7, #3]
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f004 fb32 	bl	800cfbe <USBD_LL_Transmit>
 800895a:	e003      	b.n	8008964 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	e000      	b.n	800896a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008968:	2302      	movs	r3, #2
  }
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008984:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f004 fb5d 	bl	800d04a <USBD_LL_GetRxDataSize>
 8008990:	4602      	mov	r2, r0
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80089b6:	4611      	mov	r1, r2
 80089b8:	4798      	blx	r3

    return USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e000      	b.n	80089c0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089be:	2302      	movs	r3, #2
  }
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089d6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d015      	beq.n	8008a0e <USBD_CDC_EP0_RxReady+0x46>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089e8:	2bff      	cmp	r3, #255	; 0xff
 80089ea:	d010      	beq.n	8008a0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80089fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a02:	b292      	uxth	r2, r2
 8008a04:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2243      	movs	r2, #67	; 0x43
 8008a24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a26:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	200000ac 	.word	0x200000ac

08008a38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2243      	movs	r2, #67	; 0x43
 8008a44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a46:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000068 	.word	0x20000068

08008a58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2243      	movs	r2, #67	; 0x43
 8008a64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	200000f0 	.word	0x200000f0

08008a78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	220a      	movs	r2, #10
 8008a84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a86:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000024 	.word	0x20000024

08008a98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ad8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr

08008af6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b2a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d01c      	beq.n	8008b70 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d115      	bne.n	8008b6c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2181      	movs	r1, #129	; 0x81
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f004 fa2b 	bl	800cfbe <USBD_LL_Transmit>

      return USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e002      	b.n	8008b72 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d017      	beq.n	8008bc4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7c1b      	ldrb	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d109      	bne.n	8008bb0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f004 fa2b 	bl	800d004 <USBD_LL_PrepareReceive>
 8008bae:	e007      	b.n	8008bc0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bb6:	2340      	movs	r3, #64	; 0x40
 8008bb8:	2101      	movs	r1, #1
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f004 fa22 	bl	800d004 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e000      	b.n	8008bc6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bc4:	2302      	movs	r3, #2
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	e01a      	b.n	8008c1c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f004 f88f 	bl	800cd38 <USBD_LL_Init>

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
 8008c44:	e001      	b.n	8008c4a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr

08008c56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f004 f8c4 	bl	800cdec <USBD_LL_Start>

  return USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr

08008c82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008c8e:	2302      	movs	r3, #2
 8008c90:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	4798      	blx	r3
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4798      	blx	r3
  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fe62 	bl	80099c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d016      	beq.n	8008d50 <USBD_LL_SetupStage+0x6a>
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d81c      	bhi.n	8008d60 <USBD_LL_SetupStage+0x7a>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <USBD_LL_SetupStage+0x4a>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d008      	beq.n	8008d40 <USBD_LL_SetupStage+0x5a>
 8008d2e:	e017      	b.n	8008d60 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f9c5 	bl	80090c8 <USBD_StdDevReq>
    break;
 8008d3e:	e01a      	b.n	8008d76 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa27 	bl	800919c <USBD_StdItfReq>
    break;
 8008d4e:	e012      	b.n	8008d76 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa67 	bl	800922c <USBD_StdEPReq>
    break;
 8008d5e:	e00a      	b.n	8008d76 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008d66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f004 f89c 	bl	800ceac <USBD_LL_StallEP>
    break;
 8008d74:	bf00      	nop
  }

  return USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14b      	bne.n	8008e2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008d9a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d134      	bne.n	8008e10 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d919      	bls.n	8008de6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	1ad2      	subs	r2, r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d203      	bcs.n	8008dd4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	e002      	b.n	8008dda <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fee1 	bl	8009ba6 <USBD_CtlContinueRx>
 8008de4:	e038      	b.n	8008e58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d105      	bne.n	8008e08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fede 	bl	8009bca <USBD_CtlSendStatus>
 8008e0e:	e023      	b.n	8008e58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d11e      	bne.n	8008e58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008e22:	2100      	movs	r1, #0
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f004 f841 	bl	800ceac <USBD_LL_StallEP>
 8008e2a:	e015      	b.n	8008e58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d108      	bne.n	8008e54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	7afa      	ldrb	r2, [r7, #11]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	4798      	blx	r3
 8008e52:	e001      	b.n	8008e58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e54:	2302      	movs	r3, #2
 8008e56:	e000      	b.n	8008e5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d17f      	bne.n	8008f76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d15c      	bne.n	8008f40 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d915      	bls.n	8008ebe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	68da      	ldr	r2, [r3, #12]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 fe4b 	bl	8009b46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f004 f8a4 	bl	800d004 <USBD_LL_PrepareReceive>
 8008ebc:	e04e      	b.n	8008f5c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	6912      	ldr	r2, [r2, #16]
 8008ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eca:	fb02 f201 	mul.w	r2, r2, r1
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11c      	bne.n	8008f0e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d316      	bcc.n	8008f0e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d20f      	bcs.n	8008f0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fe27 	bl	8009b46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f004 f87c 	bl	800d004 <USBD_LL_PrepareReceive>
 8008f0c:	e026      	b.n	8008f5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d105      	bne.n	8008f30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f30:	2180      	movs	r1, #128	; 0x80
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f003 ffba 	bl	800ceac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fe59 	bl	8009bf0 <USBD_CtlReceiveStatus>
 8008f3e:	e00d      	b.n	8008f5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d004      	beq.n	8008f54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d103      	bne.n	8008f5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f54:	2180      	movs	r1, #128	; 0x80
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f003 ffa8 	bl	800ceac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d11d      	bne.n	8008fa2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fe81 	bl	8008c6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008f74:	e015      	b.n	8008fa2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00d      	beq.n	8008f9e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d108      	bne.n	8008f9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	7afa      	ldrb	r2, [r7, #11]
 8008f96:	4611      	mov	r1, r2
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	4798      	blx	r3
 8008f9c:	e001      	b.n	8008fa2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e000      	b.n	8008fa4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f003 ff31 	bl	800ce22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2240      	movs	r2, #64	; 0x40
 8008fcc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd0:	2340      	movs	r3, #64	; 0x40
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2180      	movs	r1, #128	; 0x80
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f003 ff23 	bl	800ce22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2240      	movs	r2, #64	; 0x40
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800900c:	2b00      	cmp	r3, #0
 800900e:	d009      	beq.n	8009024 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6852      	ldr	r2, [r2, #4]
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	4611      	mov	r1, r2
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
  }

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2204      	movs	r2, #4
 8009064:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr

08009074 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d10b      	bne.n	80090be <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090de:	2b40      	cmp	r3, #64	; 0x40
 80090e0:	d005      	beq.n	80090ee <USBD_StdDevReq+0x26>
 80090e2:	2b40      	cmp	r3, #64	; 0x40
 80090e4:	d84f      	bhi.n	8009186 <USBD_StdDevReq+0xbe>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <USBD_StdDevReq+0x36>
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d14b      	bne.n	8009186 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
    break;
 80090fc:	e048      	b.n	8009190 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b09      	cmp	r3, #9
 8009104:	d839      	bhi.n	800917a <USBD_StdDevReq+0xb2>
 8009106:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBD_StdDevReq+0x44>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	0800915d 	.word	0x0800915d
 8009110:	08009171 	.word	0x08009171
 8009114:	0800917b 	.word	0x0800917b
 8009118:	08009167 	.word	0x08009167
 800911c:	0800917b 	.word	0x0800917b
 8009120:	0800913f 	.word	0x0800913f
 8009124:	08009135 	.word	0x08009135
 8009128:	0800917b 	.word	0x0800917b
 800912c:	08009153 	.word	0x08009153
 8009130:	08009149 	.word	0x08009149
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9da 	bl	80094f0 <USBD_GetDescriptor>
      break;
 800913c:	e022      	b.n	8009184 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 facf 	bl	80096e4 <USBD_SetAddress>
      break;
 8009146:	e01d      	b.n	8009184 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fb0e 	bl	800976c <USBD_SetConfig>
      break;
 8009150:	e018      	b.n	8009184 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fb97 	bl	8009888 <USBD_GetConfig>
      break;
 800915a:	e013      	b.n	8009184 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fbc7 	bl	80098f2 <USBD_GetStatus>
      break;
 8009164:	e00e      	b.n	8009184 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fbf5 	bl	8009958 <USBD_SetFeature>
      break;
 800916e:	e009      	b.n	8009184 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fc04 	bl	8009980 <USBD_ClrFeature>
      break;
 8009178:	e004      	b.n	8009184 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fc5c 	bl	8009a3a <USBD_CtlError>
      break;
 8009182:	bf00      	nop
    }
    break;
 8009184:	e004      	b.n	8009190 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc56 	bl	8009a3a <USBD_CtlError>
    break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop

0800919c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d005      	beq.n	80091c2 <USBD_StdItfReq+0x26>
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d82e      	bhi.n	8009218 <USBD_StdItfReq+0x7c>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <USBD_StdItfReq+0x26>
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d12a      	bne.n	8009218 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091c8:	3b01      	subs	r3, #1
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d81d      	bhi.n	800920a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	889b      	ldrh	r3, [r3, #4]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d813      	bhi.n	8009200 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	88db      	ldrh	r3, [r3, #6]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d110      	bne.n	8009214 <USBD_StdItfReq+0x78>
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10d      	bne.n	8009214 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fce6 	bl	8009bca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80091fe:	e009      	b.n	8009214 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fc19 	bl	8009a3a <USBD_CtlError>
      break;
 8009208:	e004      	b.n	8009214 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fc14 	bl	8009a3a <USBD_CtlError>
      break;
 8009212:	e000      	b.n	8009216 <USBD_StdItfReq+0x7a>
      break;
 8009214:	bf00      	nop
    }
    break;
 8009216:	e004      	b.n	8009222 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fc0d 	bl	8009a3a <USBD_CtlError>
    break;
 8009220:	bf00      	nop
  }

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d007      	beq.n	800925c <USBD_StdEPReq+0x30>
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	f200 8144 	bhi.w	80094da <USBD_StdEPReq+0x2ae>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <USBD_StdEPReq+0x40>
 8009256:	2b20      	cmp	r3, #32
 8009258:	f040 813f 	bne.w	80094da <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
    break;
 800926a:	e13b      	b.n	80094e4 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009274:	2b20      	cmp	r3, #32
 8009276:	d10a      	bne.n	800928e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]

      return ret;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	e12b      	b.n	80094e6 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b03      	cmp	r3, #3
 8009294:	d007      	beq.n	80092a6 <USBD_StdEPReq+0x7a>
 8009296:	2b03      	cmp	r3, #3
 8009298:	f300 8119 	bgt.w	80094ce <USBD_StdEPReq+0x2a2>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d072      	beq.n	8009386 <USBD_StdEPReq+0x15a>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d03a      	beq.n	800931a <USBD_StdEPReq+0xee>
 80092a4:	e113      	b.n	80094ce <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_StdEPReq+0x8a>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d015      	beq.n	80092e0 <USBD_StdEPReq+0xb4>
 80092b4:	e02b      	b.n	800930e <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <USBD_StdEPReq+0xaa>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b80      	cmp	r3, #128	; 0x80
 80092c0:	d009      	beq.n	80092d6 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f003 fdf0 	bl	800ceac <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f003 fdec 	bl	800ceac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092d4:	e020      	b.n	8009318 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fbae 	bl	8009a3a <USBD_CtlError>
        break;
 80092de:	e01b      	b.n	8009318 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	885b      	ldrh	r3, [r3, #2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10e      	bne.n	8009306 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00b      	beq.n	8009306 <USBD_StdEPReq+0xda>
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b80      	cmp	r3, #128	; 0x80
 80092f2:	d008      	beq.n	8009306 <USBD_StdEPReq+0xda>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	88db      	ldrh	r3, [r3, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f003 fdd3 	bl	800ceac <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fc5f 	bl	8009bca <USBD_CtlSendStatus>

        break;
 800930c:	e004      	b.n	8009318 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fb92 	bl	8009a3a <USBD_CtlError>
        break;
 8009316:	bf00      	nop
      }
      break;
 8009318:	e0de      	b.n	80094d8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009320:	2b02      	cmp	r3, #2
 8009322:	d002      	beq.n	800932a <USBD_StdEPReq+0xfe>
 8009324:	2b03      	cmp	r3, #3
 8009326:	d015      	beq.n	8009354 <USBD_StdEPReq+0x128>
 8009328:	e026      	b.n	8009378 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00c      	beq.n	800934a <USBD_StdEPReq+0x11e>
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d009      	beq.n	800934a <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f003 fdb6 	bl	800ceac <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009340:	2180      	movs	r1, #128	; 0x80
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f003 fdb2 	bl	800ceac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009348:	e01c      	b.n	8009384 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fb74 	bl	8009a3a <USBD_CtlError>
        break;
 8009352:	e017      	b.n	8009384 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	885b      	ldrh	r3, [r3, #2]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d112      	bne.n	8009382 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009362:	2b00      	cmp	r3, #0
 8009364:	d004      	beq.n	8009370 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f003 fdbd 	bl	800ceea <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fc2a 	bl	8009bca <USBD_CtlSendStatus>
        }
        break;
 8009376:	e004      	b.n	8009382 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb5d 	bl	8009a3a <USBD_CtlError>
        break;
 8009380:	e000      	b.n	8009384 <USBD_StdEPReq+0x158>
        break;
 8009382:	bf00      	nop
      }
      break;
 8009384:	e0a8      	b.n	80094d8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800938c:	2b02      	cmp	r3, #2
 800938e:	d002      	beq.n	8009396 <USBD_StdEPReq+0x16a>
 8009390:	2b03      	cmp	r3, #3
 8009392:	d031      	beq.n	80093f8 <USBD_StdEPReq+0x1cc>
 8009394:	e095      	b.n	80094c2 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <USBD_StdEPReq+0x180>
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	2b80      	cmp	r3, #128	; 0x80
 80093a0:	d004      	beq.n	80093ac <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fb48 	bl	8009a3a <USBD_CtlError>
          break;
 80093aa:	e08f      	b.n	80094cc <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80093ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0b      	bge.n	80093cc <USBD_StdEPReq+0x1a0>
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	3310      	adds	r3, #16
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	e00a      	b.n	80093e2 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2202      	movs	r2, #2
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fb8c 	bl	8009b0e <USBD_CtlSendData>
          break;
 80093f6:	e069      	b.n	80094cc <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80093f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da11      	bge.n	8009424 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	f003 020f 	and.w	r2, r3, #15
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	3318      	adds	r3, #24
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d117      	bne.n	800944a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fb0c 	bl	8009a3a <USBD_CtlError>
            break;
 8009422:	e053      	b.n	80094cc <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	f003 020f 	and.w	r2, r3, #15
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 faf9 	bl	8009a3a <USBD_CtlError>
            break;
 8009448:	e040      	b.n	80094cc <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800944a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	da0b      	bge.n	800946a <USBD_StdEPReq+0x23e>
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	3310      	adds	r3, #16
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	4413      	add	r3, r2
 8009466:	3304      	adds	r3, #4
 8009468:	e00a      	b.n	8009480 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	4413      	add	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <USBD_StdEPReq+0x262>
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d103      	bne.n	8009496 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e00e      	b.n	80094b4 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f003 fd44 	bl	800cf28 <USBD_LL_IsStallEP>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2201      	movs	r2, #1
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	e002      	b.n	80094b4 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2202      	movs	r2, #2
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fb27 	bl	8009b0e <USBD_CtlSendData>
          break;
 80094c0:	e004      	b.n	80094cc <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fab8 	bl	8009a3a <USBD_CtlError>
        break;
 80094ca:	bf00      	nop
      }
      break;
 80094cc:	e004      	b.n	80094d8 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fab2 	bl	8009a3a <USBD_CtlError>
      break;
 80094d6:	bf00      	nop
    }
    break;
 80094d8:	e004      	b.n	80094e4 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 faac 	bl	8009a3a <USBD_CtlError>
    break;
 80094e2:	bf00      	nop
  }

  return ret;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	885b      	ldrh	r3, [r3, #2]
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	2b06      	cmp	r3, #6
 8009506:	f200 80c9 	bhi.w	800969c <USBD_GetDescriptor+0x1ac>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USBD_GetDescriptor+0x20>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	0800952d 	.word	0x0800952d
 8009514:	08009545 	.word	0x08009545
 8009518:	08009585 	.word	0x08009585
 800951c:	0800969d 	.word	0x0800969d
 8009520:	0800969d 	.word	0x0800969d
 8009524:	08009649 	.word	0x08009649
 8009528:	0800966f 	.word	0x0800966f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 010a 	add.w	r1, r7, #10
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
    break;
 8009542:	e0b0      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7c1b      	ldrb	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10d      	bne.n	8009568 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f107 020a 	add.w	r2, r7, #10
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009566:	e09e      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	f107 020a 	add.w	r2, r7, #10
 8009574:	4610      	mov	r0, r2
 8009576:	4798      	blx	r3
 8009578:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3301      	adds	r3, #1
 800957e:	2202      	movs	r2, #2
 8009580:	701a      	strb	r2, [r3, #0]
    break;
 8009582:	e090      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	885b      	ldrh	r3, [r3, #2]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b05      	cmp	r3, #5
 800958c:	d856      	bhi.n	800963c <USBD_GetDescriptor+0x14c>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBD_GetDescriptor+0xa4>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095ad 	.word	0x080095ad
 8009598:	080095c5 	.word	0x080095c5
 800959c:	080095dd 	.word	0x080095dd
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009625 	.word	0x08009625
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7c12      	ldrb	r2, [r2, #16]
 80095b8:	f107 010a 	add.w	r1, r7, #10
 80095bc:	4610      	mov	r0, r2
 80095be:	4798      	blx	r3
 80095c0:	60f8      	str	r0, [r7, #12]
      break;
 80095c2:	e040      	b.n	8009646 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	7c12      	ldrb	r2, [r2, #16]
 80095d0:	f107 010a 	add.w	r1, r7, #10
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
      break;
 80095da:	e034      	b.n	8009646 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	7c12      	ldrb	r2, [r2, #16]
 80095e8:	f107 010a 	add.w	r1, r7, #10
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
      break;
 80095f2:	e028      	b.n	8009646 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 010a 	add.w	r1, r7, #10
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
      break;
 800960a:	e01c      	b.n	8009646 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7c12      	ldrb	r2, [r2, #16]
 8009618:	f107 010a 	add.w	r1, r7, #10
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
 8009620:	60f8      	str	r0, [r7, #12]
      break;
 8009622:	e010      	b.n	8009646 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	7c12      	ldrb	r2, [r2, #16]
 8009630:	f107 010a 	add.w	r1, r7, #10
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
      break;
 800963a:	e004      	b.n	8009646 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9fb 	bl	8009a3a <USBD_CtlError>
      return;
 8009644:	e04b      	b.n	80096de <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009646:	e02e      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7c1b      	ldrb	r3, [r3, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	f107 020a 	add.w	r2, r7, #10
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
      break;
 8009662:	e020      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9e7 	bl	8009a3a <USBD_CtlError>
      return;
 800966c:	e037      	b.n	80096de <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7c1b      	ldrb	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10d      	bne.n	8009692 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800967c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967e:	f107 020a 	add.w	r2, r7, #10
 8009682:	4610      	mov	r0, r2
 8009684:	4798      	blx	r3
 8009686:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	2207      	movs	r2, #7
 800968e:	701a      	strb	r2, [r3, #0]
      break;
 8009690:	e009      	b.n	80096a6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f9d0 	bl	8009a3a <USBD_CtlError>
      return;
 800969a:	e020      	b.n	80096de <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f9cb 	bl	8009a3a <USBD_CtlError>
    return;
 80096a4:	e01b      	b.n	80096de <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80096a6:	897b      	ldrh	r3, [r7, #10]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d011      	beq.n	80096d0 <USBD_GetDescriptor+0x1e0>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	88db      	ldrh	r3, [r3, #6]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00d      	beq.n	80096d0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	88da      	ldrh	r2, [r3, #6]
 80096b8:	897b      	ldrh	r3, [r7, #10]
 80096ba:	4293      	cmp	r3, r2
 80096bc:	bf28      	it	cs
 80096be:	4613      	movcs	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80096c4:	897b      	ldrh	r3, [r7, #10]
 80096c6:	461a      	mov	r2, r3
 80096c8:	68f9      	ldr	r1, [r7, #12]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa1f 	bl	8009b0e <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	88db      	ldrh	r3, [r3, #6]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fa76 	bl	8009bca <USBD_CtlSendStatus>
  }
}
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	889b      	ldrh	r3, [r3, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d130      	bne.n	8009758 <USBD_SetAddress+0x74>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	88db      	ldrh	r3, [r3, #6]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d12c      	bne.n	8009758 <USBD_SetAddress+0x74>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	2b7f      	cmp	r3, #127	; 0x7f
 8009704:	d828      	bhi.n	8009758 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009718:	2b03      	cmp	r3, #3
 800971a:	d104      	bne.n	8009726 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f98b 	bl	8009a3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009724:	e01d      	b.n	8009762 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7bfa      	ldrb	r2, [r7, #15]
 800972a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f003 fc24 	bl	800cf80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fa46 	bl	8009bca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974c:	e009      	b.n	8009762 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	e004      	b.n	8009762 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f96d 	bl	8009a3a <USBD_CtlError>
  }
}
 8009760:	bf00      	nop
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	4b41      	ldr	r3, [pc, #260]	; (8009884 <USBD_SetConfig+0x118>)
 800977e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009780:	4b40      	ldr	r3, [pc, #256]	; (8009884 <USBD_SetConfig+0x118>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d904      	bls.n	8009792 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f955 	bl	8009a3a <USBD_CtlError>
 8009790:	e075      	b.n	800987e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009798:	2b02      	cmp	r3, #2
 800979a:	d002      	beq.n	80097a2 <USBD_SetConfig+0x36>
 800979c:	2b03      	cmp	r3, #3
 800979e:	d023      	beq.n	80097e8 <USBD_SetConfig+0x7c>
 80097a0:	e062      	b.n	8009868 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80097a2:	4b38      	ldr	r3, [pc, #224]	; (8009884 <USBD_SetConfig+0x118>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d01a      	beq.n	80097e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80097aa:	4b36      	ldr	r3, [pc, #216]	; (8009884 <USBD_SetConfig+0x118>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2203      	movs	r2, #3
 80097b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097bc:	4b31      	ldr	r3, [pc, #196]	; (8009884 <USBD_SetConfig+0x118>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fa5d 	bl	8008c82 <USBD_SetClassConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d104      	bne.n	80097d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f932 	bl	8009a3a <USBD_CtlError>
          return;
 80097d6:	e052      	b.n	800987e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9f6 	bl	8009bca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80097de:	e04e      	b.n	800987e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f9f2 	bl	8009bca <USBD_CtlSendStatus>
      break;
 80097e6:	e04a      	b.n	800987e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097e8:	4b26      	ldr	r3, [pc, #152]	; (8009884 <USBD_SetConfig+0x118>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d112      	bne.n	8009816 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80097f8:	4b22      	ldr	r3, [pc, #136]	; (8009884 <USBD_SetConfig+0x118>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009802:	4b20      	ldr	r3, [pc, #128]	; (8009884 <USBD_SetConfig+0x118>)
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fa59 	bl	8008cc0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f9db 	bl	8009bca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009814:	e033      	b.n	800987e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009816:	4b1b      	ldr	r3, [pc, #108]	; (8009884 <USBD_SetConfig+0x118>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d01d      	beq.n	8009860 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff fa47 	bl	8008cc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009832:	4b14      	ldr	r3, [pc, #80]	; (8009884 <USBD_SetConfig+0x118>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <USBD_SetConfig+0x118>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fa1d 	bl	8008c82 <USBD_SetClassConfig>
 8009848:	4603      	mov	r3, r0
 800984a:	2b02      	cmp	r3, #2
 800984c:	d104      	bne.n	8009858 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f8f2 	bl	8009a3a <USBD_CtlError>
          return;
 8009856:	e012      	b.n	800987e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9b6 	bl	8009bca <USBD_CtlSendStatus>
      break;
 800985e:	e00e      	b.n	800987e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9b2 	bl	8009bca <USBD_CtlSendStatus>
      break;
 8009866:	e00a      	b.n	800987e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8e5 	bl	8009a3a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <USBD_SetConfig+0x118>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff fa22 	bl	8008cc0 <USBD_ClrClassConfig>
      break;
 800987c:	bf00      	nop
    }
  }
}
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000450 	.word	0x20000450

08009888 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	88db      	ldrh	r3, [r3, #6]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d004      	beq.n	80098a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f8cc 	bl	8009a3a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80098a2:	e022      	b.n	80098ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	dc02      	bgt.n	80098b4 <USBD_GetConfig+0x2c>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dc03      	bgt.n	80098ba <USBD_GetConfig+0x32>
 80098b2:	e015      	b.n	80098e0 <USBD_GetConfig+0x58>
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d00b      	beq.n	80098d0 <USBD_GetConfig+0x48>
 80098b8:	e012      	b.n	80098e0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3308      	adds	r3, #8
 80098c4:	2201      	movs	r2, #1
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f920 	bl	8009b0e <USBD_CtlSendData>
      break;
 80098ce:	e00c      	b.n	80098ea <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
 80098d4:	2201      	movs	r2, #1
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f918 	bl	8009b0e <USBD_CtlSendData>
      break;
 80098de:	e004      	b.n	80098ea <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8a9 	bl	8009a3a <USBD_CtlError>
      break;
 80098e8:	bf00      	nop
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009902:	3b01      	subs	r3, #1
 8009904:	2b02      	cmp	r3, #2
 8009906:	d81e      	bhi.n	8009946 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	88db      	ldrh	r3, [r3, #6]
 800990c:	2b02      	cmp	r3, #2
 800990e:	d004      	beq.n	800991a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f891 	bl	8009a3a <USBD_CtlError>
      break;
 8009918:	e01a      	b.n	8009950 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f043 0202 	orr.w	r2, r3, #2
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	330c      	adds	r3, #12
 800993a:	2202      	movs	r2, #2
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f8e5 	bl	8009b0e <USBD_CtlSendData>
    break;
 8009944:	e004      	b.n	8009950 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f876 	bl	8009a3a <USBD_CtlError>
    break;
 800994e:	bf00      	nop
  }
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d106      	bne.n	8009978 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f929 	bl	8009bca <USBD_CtlSendStatus>
  }

}
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009990:	3b01      	subs	r3, #1
 8009992:	2b02      	cmp	r3, #2
 8009994:	d80b      	bhi.n	80099ae <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	885b      	ldrh	r3, [r3, #2]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d10c      	bne.n	80099b8 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f90f 	bl	8009bca <USBD_CtlSendStatus>
    }
    break;
 80099ac:	e004      	b.n	80099b8 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f842 	bl	8009a3a <USBD_CtlError>
    break;
 80099b6:	e000      	b.n	80099ba <USBD_ClrFeature+0x3a>
    break;
 80099b8:	bf00      	nop
  }
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	785a      	ldrb	r2, [r3, #1]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	3302      	adds	r3, #2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	3303      	adds	r3, #3
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	3304      	adds	r3, #4
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	3305      	adds	r3, #5
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	3306      	adds	r3, #6
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	3307      	adds	r3, #7
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4413      	add	r3, r2
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	80da      	strh	r2, [r3, #6]

}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009a44:	2180      	movs	r1, #128	; 0x80
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f003 fa30 	bl	800ceac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f003 fa2c 	bl	800ceac <USBD_LL_StallEP>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d032      	beq.n	8009ad8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 f834 	bl	8009ae0 <USBD_GetLen>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	75fa      	strb	r2, [r7, #23]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	4413      	add	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	75fa      	strb	r2, [r7, #23]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009aa8:	e012      	b.n	8009ad0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	60fa      	str	r2, [r7, #12]
 8009ab0:	7dfa      	ldrb	r2, [r7, #23]
 8009ab2:	1c51      	adds	r1, r2, #1
 8009ab4:	75f9      	strb	r1, [r7, #23]
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	440a      	add	r2, r1
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	75fa      	strb	r2, [r7, #23]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4413      	add	r3, r2
 8009acc:	2200      	movs	r2, #0
 8009ace:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e8      	bne.n	8009aaa <USBD_GetString+0x4e>
    }
  }
}
 8009ad8:	bf00      	nop
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009aec:	e005      	b.n	8009afa <USBD_GetLen+0x1a>
    {
        len++;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	3301      	adds	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3301      	adds	r3, #1
 8009af8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f5      	bne.n	8009aee <USBD_GetLen+0xe>
    }

    return len;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr

08009b0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b2a:	88fa      	ldrh	r2, [r7, #6]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f003 fa41 	bl	800cfbe <USBD_LL_Transmit>

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	4613      	mov	r3, r2
 8009b52:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f003 fa2f 	bl	800cfbe <USBD_LL_Transmit>

  return USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	4613      	mov	r3, r2
 8009b76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009b88:	88fa      	ldrh	r2, [r7, #6]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	2100      	movs	r1, #0
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f003 fa34 	bl	800d004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f003 fa22 	bl	800d004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f003 f9ec 	bl	800cfbe <USBD_LL_Transmit>

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2205      	movs	r2, #5
 8009bfc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009c00:	2300      	movs	r3, #0
 8009c02:	2200      	movs	r2, #0
 8009c04:	2100      	movs	r1, #0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f003 f9fc 	bl	800d004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	4613      	mov	r3, r2
 8009c24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c2e:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c30:	7a5b      	ldrb	r3, [r3, #9]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d131      	bne.n	8009c9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c38:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c3a:	7a5b      	ldrb	r3, [r3, #9]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4b19      	ldr	r3, [pc, #100]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c42:	2100      	movs	r1, #0
 8009c44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c46:	4b18      	ldr	r3, [pc, #96]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c48:	7a5b      	ldrb	r3, [r3, #9]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c58:	7a5b      	ldrb	r3, [r3, #9]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c60:	4413      	add	r3, r2
 8009c62:	79fa      	ldrb	r2, [r7, #7]
 8009c64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c66:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c68:	7a5b      	ldrb	r3, [r3, #9]
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	b2d1      	uxtb	r1, r2
 8009c70:	4a0d      	ldr	r2, [pc, #52]	; (8009ca8 <FATFS_LinkDriverEx+0x90>)
 8009c72:	7251      	strb	r1, [r2, #9]
 8009c74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c76:	7dbb      	ldrb	r3, [r7, #22]
 8009c78:	3330      	adds	r3, #48	; 0x30
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3301      	adds	r3, #1
 8009c84:	223a      	movs	r2, #58	; 0x3a
 8009c86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3302      	adds	r3, #2
 8009c8c:	222f      	movs	r2, #47	; 0x2f
 8009c8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	3303      	adds	r3, #3
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bc80      	pop	{r7}
 8009ca6:	4770      	bx	lr
 8009ca8:	20000454 	.word	0x20000454

08009cac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff ffac 	bl	8009c18 <FATFS_LinkDriverEx>
 8009cc0:	4603      	mov	r3, r0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd2:	f3ef 8305 	mrs	r3, IPSR
 8009cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10f      	bne.n	8009cfe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cde:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <osKernelInitialize+0x32>
 8009cea:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <osKernelInitialize+0x60>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d109      	bne.n	8009d06 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009cfe:	f06f 0305 	mvn.w	r3, #5
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e00c      	b.n	8009d20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <osKernelInitialize+0x60>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d105      	bne.n	8009d1a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <osKernelInitialize+0x60>)
 8009d10:	2201      	movs	r2, #1
 8009d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	e002      	b.n	8009d20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr
 8009d2c:	20000460 	.word	0x20000460

08009d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d36:	f3ef 8305 	mrs	r3, IPSR
 8009d3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10f      	bne.n	8009d62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d42:	f3ef 8310 	mrs	r3, PRIMASK
 8009d46:	607b      	str	r3, [r7, #4]
  return(result);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <osKernelStart+0x32>
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <osKernelStart+0x64>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d109      	bne.n	8009d6a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d56:	f3ef 8311 	mrs	r3, BASEPRI
 8009d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d62:	f06f 0305 	mvn.w	r3, #5
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e00e      	b.n	8009d88 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <osKernelStart+0x64>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d107      	bne.n	8009d82 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009d72:	4b08      	ldr	r3, [pc, #32]	; (8009d94 <osKernelStart+0x64>)
 8009d74:	2202      	movs	r2, #2
 8009d76:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009d78:	f001 f890 	bl	800ae9c <vTaskStartScheduler>
      stat = osOK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	e002      	b.n	8009d88 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d88:	68fb      	ldr	r3, [r7, #12]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000460 	.word	0x20000460

08009d98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b092      	sub	sp, #72	; 0x48
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f040 8094 	bne.w	8009ede <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009db6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dba:	623b      	str	r3, [r7, #32]
  return(result);
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f040 808d 	bne.w	8009ede <osThreadNew+0x146>
 8009dc4:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <osThreadNew+0x150>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d106      	bne.n	8009dda <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8009dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8082 	bne.w	8009ede <osThreadNew+0x146>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d07e      	beq.n	8009ede <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009de4:	2318      	movs	r3, #24
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009de8:	2300      	movs	r3, #0
 8009dea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009dec:	f107 031b 	add.w	r3, r7, #27
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d045      	beq.n	8009e8a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <osThreadNew+0x74>
        name = attr->name;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d008      	beq.n	8009e32 <osThreadNew+0x9a>
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	2b38      	cmp	r3, #56	; 0x38
 8009e24:	d805      	bhi.n	8009e32 <osThreadNew+0x9a>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <osThreadNew+0x9e>
        return (NULL);
 8009e32:	2300      	movs	r3, #0
 8009e34:	e054      	b.n	8009ee0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	089b      	lsrs	r3, r3, #2
 8009e44:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <osThreadNew+0xd4>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2bbb      	cmp	r3, #187	; 0xbb
 8009e54:	d90a      	bls.n	8009e6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d006      	beq.n	8009e6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <osThreadNew+0xd4>
        mem = 1;
 8009e66:	2301      	movs	r3, #1
 8009e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e6a:	e010      	b.n	8009e8e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10c      	bne.n	8009e8e <osThreadNew+0xf6>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d108      	bne.n	8009e8e <osThreadNew+0xf6>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d104      	bne.n	8009e8e <osThreadNew+0xf6>
          mem = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e88:	e001      	b.n	8009e8e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d110      	bne.n	8009eb6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e9c:	9202      	str	r2, [sp, #8]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 fe12 	bl	800aad4 <xTaskCreateStatic>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e013      	b.n	8009ede <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d110      	bne.n	8009ede <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 fe5c 	bl	800ab8c <xTaskCreate>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d001      	beq.n	8009ede <osThreadNew+0x146>
          hTask = NULL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ede:	697b      	ldr	r3, [r7, #20]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3738      	adds	r7, #56	; 0x38
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000460 	.word	0x20000460

08009eec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef4:	f3ef 8305 	mrs	r3, IPSR
 8009ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8009efa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10f      	bne.n	8009f20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f00:	f3ef 8310 	mrs	r3, PRIMASK
 8009f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <osDelay+0x34>
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <osDelay+0x58>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d109      	bne.n	8009f28 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f14:	f3ef 8311 	mrs	r3, BASEPRI
 8009f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <osDelay+0x3c>
    stat = osErrorISR;
 8009f20:	f06f 0305 	mvn.w	r3, #5
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	e007      	b.n	8009f38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 ff7e 	bl	800ae34 <vTaskDelay>
    }
  }

  return (stat);
 8009f38:	697b      	ldr	r3, [r7, #20]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000460 	.word	0x20000460

08009f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4a06      	ldr	r2, [pc, #24]	; (8009f70 <vApplicationGetIdleTaskMemory+0x28>)
 8009f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	4a05      	ldr	r2, [pc, #20]	; (8009f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2280      	movs	r2, #128	; 0x80
 8009f64:	601a      	str	r2, [r3, #0]
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bc80      	pop	{r7}
 8009f6e:	4770      	bx	lr
 8009f70:	20000464 	.word	0x20000464
 8009f74:	20000520 	.word	0x20000520

08009f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	4a06      	ldr	r2, [pc, #24]	; (8009fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8009f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f96:	601a      	str	r2, [r3, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20000720 	.word	0x20000720
 8009fa8:	200007dc 	.word	0x200007dc

08009fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f103 0208 	add.w	r2, r3, #8
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f103 0208 	add.w	r2, r3, #8
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f103 0208 	add.w	r2, r3, #8
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr

08009fea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr

0800a002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	bc80      	pop	{r7}
 800a046:	4770      	bx	lr

0800a048 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a05e:	d103      	bne.n	800a068 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e00c      	b.n	800a082 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3308      	adds	r3, #8
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	e002      	b.n	800a076 <vListInsert+0x2e>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d2f6      	bcs.n	800a070 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr

0800a0b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6892      	ldr	r2, [r2, #8]
 800a0ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6852      	ldr	r2, [r2, #4]
 800a0d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d103      	bne.n	800a0ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	1e5a      	subs	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	bc80      	pop	{r7}
 800a108:	4770      	bx	lr
	...

0800a10c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <xQueueGenericReset+0x2a>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	60bb      	str	r3, [r7, #8]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a136:	f001 fff9 	bl	800c12c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a142:	68f9      	ldr	r1, [r7, #12]
 800a144:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	441a      	add	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a166:	3b01      	subs	r3, #1
 800a168:	68f9      	ldr	r1, [r7, #12]
 800a16a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a16c:	fb01 f303 	mul.w	r3, r1, r3
 800a170:	441a      	add	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	22ff      	movs	r2, #255	; 0xff
 800a182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d114      	bne.n	800a1b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01a      	beq.n	800a1ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3310      	adds	r3, #16
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 f91b 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d012      	beq.n	800a1ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <xQueueGenericReset+0xcc>)
 800a1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	e009      	b.n	800a1ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3310      	adds	r3, #16
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff fef6 	bl	8009fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3324      	adds	r3, #36	; 0x24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff fef1 	bl	8009fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1ca:	f001 ffdf 	bl	800c18c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1ce:	2301      	movs	r3, #1
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08e      	sub	sp, #56	; 0x38
 800a1e0:	af02      	add	r7, sp, #8
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <xQueueGenericCreateStatic+0x52>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <xQueueGenericCreateStatic+0x56>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <xQueueGenericCreateStatic+0x58>
 800a232:	2300      	movs	r3, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	623b      	str	r3, [r7, #32]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <xQueueGenericCreateStatic+0x7e>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <xQueueGenericCreateStatic+0x82>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <xQueueGenericCreateStatic+0x84>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61fb      	str	r3, [r7, #28]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a27a:	2350      	movs	r3, #80	; 0x50
 800a27c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b50      	cmp	r3, #80	; 0x50
 800a282:	d00a      	beq.n	800a29a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	61bb      	str	r3, [r7, #24]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f805 	bl	800a2ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3730      	adds	r7, #48	; 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d103      	bne.n	800a2e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e002      	b.n	800a2ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	69b8      	ldr	r0, [r7, #24]
 800a2fc:	f7ff ff06 	bl	800a10c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	; 0x38
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueGenericSend+0x32>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <xQueueGenericSend+0x40>
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueGenericSend+0x44>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueGenericSend+0x46>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10a      	bne.n	800a370 <xQueueGenericSend+0x60>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d103      	bne.n	800a37e <xQueueGenericSend+0x6e>
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <xQueueGenericSend+0x72>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <xQueueGenericSend+0x74>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xQueueGenericSend+0x8e>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	623b      	str	r3, [r7, #32]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a39e:	f001 f9df 	bl	800b760 <xTaskGetSchedulerState>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <xQueueGenericSend+0x9e>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <xQueueGenericSend+0xa2>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <xQueueGenericSend+0xa4>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <xQueueGenericSend+0xbe>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	61fb      	str	r3, [r7, #28]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3ce:	f001 fead 	bl	800c12c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d302      	bcc.n	800a3e4 <xQueueGenericSend+0xd4>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d129      	bne.n	800a438 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ea:	f000 fa07 	bl	800a7fc <prvCopyDataToQueue>
 800a3ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d010      	beq.n	800a41a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 ffe9 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d013      	beq.n	800a430 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a408:	4b3f      	ldr	r3, [pc, #252]	; (800a508 <xQueueGenericSend+0x1f8>)
 800a40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	e00a      	b.n	800a430 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a420:	4b39      	ldr	r3, [pc, #228]	; (800a508 <xQueueGenericSend+0x1f8>)
 800a422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a430:	f001 feac 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 800a434:	2301      	movs	r3, #1
 800a436:	e063      	b.n	800a500 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a43e:	f001 fea5 	bl	800c18c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a442:	2300      	movs	r3, #0
 800a444:	e05c      	b.n	800a500 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d106      	bne.n	800a45a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a44c:	f107 0314 	add.w	r3, r7, #20
 800a450:	4618      	mov	r0, r3
 800a452:	f001 f823 	bl	800b49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a456:	2301      	movs	r3, #1
 800a458:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a45a:	f001 fe97 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a45e:	f000 fd8d 	bl	800af7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a462:	f001 fe63 	bl	800c12c <vPortEnterCritical>
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a472:	d103      	bne.n	800a47c <xQueueGenericSend+0x16c>
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a482:	b25b      	sxtb	r3, r3
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a488:	d103      	bne.n	800a492 <xQueueGenericSend+0x182>
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a492:	f001 fe7b 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a496:	1d3a      	adds	r2, r7, #4
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	4611      	mov	r1, r2
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 f812 	bl	800b4c8 <xTaskCheckForTimeOut>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d124      	bne.n	800a4f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ac:	f000 fa9e 	bl	800a9ec <prvIsQueueFull>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	3310      	adds	r3, #16
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 ff38 	bl	800b334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c6:	f000 fa29 	bl	800a91c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4ca:	f000 fd65 	bl	800af98 <xTaskResumeAll>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f47f af7c 	bne.w	800a3ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <xQueueGenericSend+0x1f8>)
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	e772      	b.n	800a3ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ea:	f000 fa17 	bl	800a91c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ee:	f000 fd53 	bl	800af98 <xTaskResumeAll>
 800a4f2:	e76c      	b.n	800a3ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f6:	f000 fa11 	bl	800a91c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4fa:	f000 fd4d 	bl	800af98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4fe:	2300      	movs	r3, #0
		}
	}
}
 800a500:	4618      	mov	r0, r3
 800a502:	3738      	adds	r7, #56	; 0x38
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08e      	sub	sp, #56	; 0x38
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <xQueueGenericSendFromISR+0x3c>
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <xQueueGenericSendFromISR+0x40>
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <xQueueGenericSendFromISR+0x42>
 800a54c:	2300      	movs	r3, #0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	623b      	str	r3, [r7, #32]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d103      	bne.n	800a576 <xQueueGenericSendFromISR+0x6a>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a572:	2b01      	cmp	r3, #1
 800a574:	d101      	bne.n	800a57a <xQueueGenericSendFromISR+0x6e>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <xQueueGenericSendFromISR+0x70>
 800a57a:	2300      	movs	r3, #0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61fb      	str	r3, [r7, #28]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a596:	f001 fe8b 	bl	800c2b0 <vPortValidateInterruptPriority>
	__asm volatile
 800a59a:	f3ef 8211 	mrs	r2, BASEPRI
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	61ba      	str	r2, [r7, #24]
 800a5b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <xQueueGenericSendFromISR+0xbc>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d12c      	bne.n	800a622 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d8:	f000 f910 	bl	800a7fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e4:	d112      	bne.n	800a60c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d016      	beq.n	800a61c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3324      	adds	r3, #36	; 0x24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 feee 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e007      	b.n	800a61c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a60c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a610:	3301      	adds	r3, #1
 800a612:	b2db      	uxtb	r3, r3
 800a614:	b25a      	sxtb	r2, r3
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a620:	e001      	b.n	800a626 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a622:	2300      	movs	r3, #0
 800a624:	637b      	str	r3, [r7, #52]	; 0x34
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f383 8811 	msr	BASEPRI, r3
}
 800a630:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a634:	4618      	mov	r0, r3
 800a636:	3738      	adds	r7, #56	; 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	; 0x30
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <xQueueReceive+0x30>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	623b      	str	r3, [r7, #32]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d103      	bne.n	800a67a <xQueueReceive+0x3e>
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <xQueueReceive+0x42>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueReceive+0x44>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xQueueReceive+0x5e>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61fb      	str	r3, [r7, #28]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a69a:	f001 f861 	bl	800b760 <xTaskGetSchedulerState>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <xQueueReceive+0x6e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <xQueueReceive+0x72>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <xQueueReceive+0x74>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <xQueueReceive+0x8e>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	61bb      	str	r3, [r7, #24]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ca:	f001 fd2f 	bl	800c12c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01f      	beq.n	800a71a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6de:	f000 f8f7 	bl	800a8d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00f      	beq.n	800a712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fe6c 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a702:	4b3d      	ldr	r3, [pc, #244]	; (800a7f8 <xQueueReceive+0x1bc>)
 800a704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a712:	f001 fd3b 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 800a716:	2301      	movs	r3, #1
 800a718:	e069      	b.n	800a7ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a720:	f001 fd34 	bl	800c18c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a724:	2300      	movs	r3, #0
 800a726:	e062      	b.n	800a7ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a72e:	f107 0310 	add.w	r3, r7, #16
 800a732:	4618      	mov	r0, r3
 800a734:	f000 feb2 	bl	800b49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a73c:	f001 fd26 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a740:	f000 fc1c 	bl	800af7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a744:	f001 fcf2 	bl	800c12c <vPortEnterCritical>
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a74e:	b25b      	sxtb	r3, r3
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d103      	bne.n	800a75e <xQueueReceive+0x122>
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a764:	b25b      	sxtb	r3, r3
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76a:	d103      	bne.n	800a774 <xQueueReceive+0x138>
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a774:	f001 fd0a 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a778:	1d3a      	adds	r2, r7, #4
 800a77a:	f107 0310 	add.w	r3, r7, #16
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fea1 	bl	800b4c8 <xTaskCheckForTimeOut>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d123      	bne.n	800a7d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a78e:	f000 f917 	bl	800a9c0 <prvIsQueueEmpty>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d017      	beq.n	800a7c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	3324      	adds	r3, #36	; 0x24
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fdc7 	bl	800b334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f000 f8b8 	bl	800a91c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7ac:	f000 fbf4 	bl	800af98 <xTaskResumeAll>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d189      	bne.n	800a6ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a7b6:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <xQueueReceive+0x1bc>)
 800a7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	e780      	b.n	800a6ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ca:	f000 f8a7 	bl	800a91c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ce:	f000 fbe3 	bl	800af98 <xTaskResumeAll>
 800a7d2:	e77a      	b.n	800a6ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d6:	f000 f8a1 	bl	800a91c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7da:	f000 fbdd 	bl	800af98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e0:	f000 f8ee 	bl	800a9c0 <prvIsQueueEmpty>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f43f af6f 	beq.w	800a6ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3730      	adds	r7, #48	; 0x30
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10d      	bne.n	800a836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d14d      	bne.n	800a8be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 ffb8 	bl	800b79c <xTaskPriorityDisinherit>
 800a82c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	605a      	str	r2, [r3, #4]
 800a834:	e043      	b.n	800a8be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d119      	bne.n	800a870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6898      	ldr	r0, [r3, #8]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	461a      	mov	r2, r3
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	f002 fe4c 	bl	800d4e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	441a      	add	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	429a      	cmp	r2, r3
 800a864:	d32b      	bcc.n	800a8be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	609a      	str	r2, [r3, #8]
 800a86e:	e026      	b.n	800a8be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68d8      	ldr	r0, [r3, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	461a      	mov	r2, r3
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	f002 fe32 	bl	800d4e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a888:	425b      	negs	r3, r3
 800a88a:	441a      	add	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d207      	bcs.n	800a8ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a4:	425b      	negs	r3, r3
 800a8a6:	441a      	add	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d105      	bne.n	800a8be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8c6:	697b      	ldr	r3, [r7, #20]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d018      	beq.n	800a914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	441a      	add	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d303      	bcc.n	800a904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68d9      	ldr	r1, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	461a      	mov	r2, r3
 800a90e:	6838      	ldr	r0, [r7, #0]
 800a910:	f002 fde8 	bl	800d4e4 <memcpy>
	}
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a924:	f001 fc02 	bl	800c12c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a930:	e011      	b.n	800a956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d012      	beq.n	800a960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3324      	adds	r3, #36	; 0x24
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 fd48 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a94a:	f000 fe1f 	bl	800b58c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
 800a950:	3b01      	subs	r3, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dce9      	bgt.n	800a932 <prvUnlockQueue+0x16>
 800a95e:	e000      	b.n	800a962 <prvUnlockQueue+0x46>
					break;
 800a960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a96a:	f001 fc0f 	bl	800c18c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a96e:	f001 fbdd 	bl	800c12c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a97a:	e011      	b.n	800a9a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d012      	beq.n	800a9aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3310      	adds	r3, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fd23 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a994:	f000 fdfa 	bl	800b58c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dce9      	bgt.n	800a97c <prvUnlockQueue+0x60>
 800a9a8:	e000      	b.n	800a9ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	22ff      	movs	r2, #255	; 0xff
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9b4:	f001 fbea 	bl	800c18c <vPortExitCritical>
}
 800a9b8:	bf00      	nop
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9c8:	f001 fbb0 	bl	800c12c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e001      	b.n	800a9de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9de:	f001 fbd5 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9f4:	f001 fb9a 	bl	800c12c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d102      	bne.n	800aa0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	e001      	b.n	800aa0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa0e:	f001 fbbd 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	e014      	b.n	800aa56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa2c:	4a0e      	ldr	r2, [pc, #56]	; (800aa68 <vQueueAddToRegistry+0x4c>)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10b      	bne.n	800aa50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa38:	490b      	ldr	r1, [pc, #44]	; (800aa68 <vQueueAddToRegistry+0x4c>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa42:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <vQueueAddToRegistry+0x4c>)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	4413      	add	r3, r2
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa4e:	e006      	b.n	800aa5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3301      	adds	r3, #1
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b07      	cmp	r3, #7
 800aa5a:	d9e7      	bls.n	800aa2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bc80      	pop	{r7}
 800aa66:	4770      	bx	lr
 800aa68:	20002508 	.word	0x20002508

0800aa6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa7c:	f001 fb56 	bl	800c12c <vPortEnterCritical>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa86:	b25b      	sxtb	r3, r3
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8c:	d103      	bne.n	800aa96 <vQueueWaitForMessageRestricted+0x2a>
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa9c:	b25b      	sxtb	r3, r3
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa2:	d103      	bne.n	800aaac <vQueueWaitForMessageRestricted+0x40>
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaac:	f001 fb6e 	bl	800c18c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d106      	bne.n	800aac6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	3324      	adds	r3, #36	; 0x24
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fc5b 	bl	800b37c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aac6:	6978      	ldr	r0, [r7, #20]
 800aac8:	f7ff ff28 	bl	800a91c <prvUnlockQueue>
	}
 800aacc:	bf00      	nop
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08e      	sub	sp, #56	; 0x38
 800aad8:	af04      	add	r7, sp, #16
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xTaskCreateStatic+0x2a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	623b      	str	r3, [r7, #32]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10a      	bne.n	800ab1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	61fb      	str	r3, [r7, #28]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab1a:	23bc      	movs	r3, #188	; 0xbc
 800ab1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2bbc      	cmp	r3, #188	; 0xbc
 800ab22:	d00a      	beq.n	800ab3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01e      	beq.n	800ab7e <xTaskCreateStatic+0xaa>
 800ab40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01b      	beq.n	800ab7e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9303      	str	r3, [sp, #12]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	f107 0314 	add.w	r3, r7, #20
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f851 	bl	800ac18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab78:	f000 f8ec 	bl	800ad54 <prvAddNewTaskToReadyList>
 800ab7c:	e001      	b.n	800ab82 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab82:	697b      	ldr	r3, [r7, #20]
	}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3728      	adds	r7, #40	; 0x28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08c      	sub	sp, #48	; 0x30
 800ab90:	af04      	add	r7, sp, #16
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 fbc3 	bl	800c32c <pvPortMalloc>
 800aba6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00e      	beq.n	800abcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800abae:	20bc      	movs	r0, #188	; 0xbc
 800abb0:	f001 fbbc 	bl	800c32c <pvPortMalloc>
 800abb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	631a      	str	r2, [r3, #48]	; 0x30
 800abc2:	e005      	b.n	800abd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abc4:	6978      	ldr	r0, [r7, #20]
 800abc6:	f001 fc75 	bl	800c4b4 <vPortFree>
 800abca:	e001      	b.n	800abd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d017      	beq.n	800ac06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abde:	88fa      	ldrh	r2, [r7, #6]
 800abe0:	2300      	movs	r3, #0
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 f80f 	bl	800ac18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abfa:	69f8      	ldr	r0, [r7, #28]
 800abfc:	f000 f8aa 	bl	800ad54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac00:	2301      	movs	r3, #1
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	e002      	b.n	800ac0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	461a      	mov	r2, r3
 800ac30:	21a5      	movs	r1, #165	; 0xa5
 800ac32:	f002 fc7f 	bl	800d534 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac40:	3b01      	subs	r3, #1
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	f023 0307 	bic.w	r3, r3, #7
 800ac4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	617b      	str	r3, [r7, #20]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac70:	2300      	movs	r3, #0
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	e012      	b.n	800ac9c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	4413      	add	r3, r2
 800ac84:	3334      	adds	r3, #52	; 0x34
 800ac86:	460a      	mov	r2, r1
 800ac88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d006      	beq.n	800aca4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	61fb      	str	r3, [r7, #28]
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	2b0f      	cmp	r3, #15
 800aca0:	d9e9      	bls.n	800ac76 <prvInitialiseNewTask+0x5e>
 800aca2:	e000      	b.n	800aca6 <prvInitialiseNewTask+0x8e>
		{
			break;
 800aca4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2b37      	cmp	r3, #55	; 0x37
 800acb2:	d901      	bls.n	800acb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acb4:	2337      	movs	r3, #55	; 0x37
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	2200      	movs	r2, #0
 800acc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff f98b 	bl	8009fea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	3318      	adds	r3, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff f986 	bl	8009fea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	3354      	adds	r3, #84	; 0x54
 800ad08:	2260      	movs	r2, #96	; 0x60
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fc11 	bl	800d534 <memset>
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	4a0c      	ldr	r2, [pc, #48]	; (800ad48 <prvInitialiseNewTask+0x130>)
 800ad16:	659a      	str	r2, [r3, #88]	; 0x58
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	4a0c      	ldr	r2, [pc, #48]	; (800ad4c <prvInitialiseNewTask+0x134>)
 800ad1c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	4a0b      	ldr	r2, [pc, #44]	; (800ad50 <prvInitialiseNewTask+0x138>)
 800ad22:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	68f9      	ldr	r1, [r7, #12]
 800ad28:	69b8      	ldr	r0, [r7, #24]
 800ad2a:	f001 f90b 	bl	800bf44 <pxPortInitialiseStack>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad40:	bf00      	nop
 800ad42:	3720      	adds	r7, #32
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	0800d96c 	.word	0x0800d96c
 800ad4c:	0800d98c 	.word	0x0800d98c
 800ad50:	0800d94c 	.word	0x0800d94c

0800ad54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad5c:	f001 f9e6 	bl	800c12c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a2c      	ldr	r2, [pc, #176]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad78:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d110      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad80:	f000 fc28 	bl	800b5d4 <prvInitialiseTaskLists>
 800ad84:	e00d      	b.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad86:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d802      	bhi.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ada2:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a1e      	ldr	r2, [pc, #120]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adac:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d903      	bls.n	800adc8 <prvAddNewTaskToReadyList+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a18      	ldr	r2, [pc, #96]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <prvAddNewTaskToReadyList+0xd8>)
 800add6:	441a      	add	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff f90f 	bl	800a002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 f9d2 	bl	800c18c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d207      	bcs.n	800ae0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adfe:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <prvAddNewTaskToReadyList+0xdc>)
 800ae00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	200010b0 	.word	0x200010b0
 800ae1c:	20000bdc 	.word	0x20000bdc
 800ae20:	200010bc 	.word	0x200010bc
 800ae24:	200010cc 	.word	0x200010cc
 800ae28:	200010b8 	.word	0x200010b8
 800ae2c:	20000be0 	.word	0x20000be0
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d017      	beq.n	800ae76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae46:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <vTaskDelay+0x60>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <vTaskDelay+0x30>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60bb      	str	r3, [r7, #8]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae64:	f000 f88a 	bl	800af7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae68:	2100      	movs	r1, #0
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fd04 	bl	800b878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae70:	f000 f892 	bl	800af98 <xTaskResumeAll>
 800ae74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d107      	bne.n	800ae8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae7c:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <vTaskDelay+0x64>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	200010d8 	.word	0x200010d8
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aeaa:	463a      	mov	r2, r7
 800aeac:	1d39      	adds	r1, r7, #4
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff f848 	bl	8009f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	9202      	str	r2, [sp, #8]
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	2300      	movs	r3, #0
 800aec8:	460a      	mov	r2, r1
 800aeca:	4924      	ldr	r1, [pc, #144]	; (800af5c <vTaskStartScheduler+0xc0>)
 800aecc:	4824      	ldr	r0, [pc, #144]	; (800af60 <vTaskStartScheduler+0xc4>)
 800aece:	f7ff fe01 	bl	800aad4 <xTaskCreateStatic>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4a23      	ldr	r2, [pc, #140]	; (800af64 <vTaskStartScheduler+0xc8>)
 800aed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aed8:	4b22      	ldr	r3, [pc, #136]	; (800af64 <vTaskStartScheduler+0xc8>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e001      	b.n	800aeea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d102      	bne.n	800aef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aef0:	f000 fd16 	bl	800b920 <xTimerCreateTimerTask>
 800aef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d11b      	bne.n	800af34 <vTaskStartScheduler+0x98>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	613b      	str	r3, [r7, #16]
}
 800af0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af10:	4b15      	ldr	r3, [pc, #84]	; (800af68 <vTaskStartScheduler+0xcc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3354      	adds	r3, #84	; 0x54
 800af16:	4a15      	ldr	r2, [pc, #84]	; (800af6c <vTaskStartScheduler+0xd0>)
 800af18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af1a:	4b15      	ldr	r3, [pc, #84]	; (800af70 <vTaskStartScheduler+0xd4>)
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af22:	4b14      	ldr	r3, [pc, #80]	; (800af74 <vTaskStartScheduler+0xd8>)
 800af24:	2201      	movs	r2, #1
 800af26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800af28:	4b13      	ldr	r3, [pc, #76]	; (800af78 <vTaskStartScheduler+0xdc>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af2e:	f001 f88b 	bl	800c048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af32:	e00e      	b.n	800af52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af3a:	d10a      	bne.n	800af52 <vTaskStartScheduler+0xb6>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	60fb      	str	r3, [r7, #12]
}
 800af4e:	bf00      	nop
 800af50:	e7fe      	b.n	800af50 <vTaskStartScheduler+0xb4>
}
 800af52:	bf00      	nop
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0800d870 	.word	0x0800d870
 800af60:	0800b5a5 	.word	0x0800b5a5
 800af64:	200010d4 	.word	0x200010d4
 800af68:	20000bdc 	.word	0x20000bdc
 800af6c:	20000198 	.word	0x20000198
 800af70:	200010d0 	.word	0x200010d0
 800af74:	200010bc 	.word	0x200010bc
 800af78:	200010b4 	.word	0x200010b4

0800af7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <vTaskSuspendAll+0x18>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	4a03      	ldr	r2, [pc, #12]	; (800af94 <vTaskSuspendAll+0x18>)
 800af88:	6013      	str	r3, [r2, #0]
}
 800af8a:	bf00      	nop
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	200010d8 	.word	0x200010d8

0800af98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afa6:	4b42      	ldr	r3, [pc, #264]	; (800b0b0 <xTaskResumeAll+0x118>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	603b      	str	r3, [r7, #0]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afc4:	f001 f8b2 	bl	800c12c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afc8:	4b39      	ldr	r3, [pc, #228]	; (800b0b0 <xTaskResumeAll+0x118>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3b01      	subs	r3, #1
 800afce:	4a38      	ldr	r2, [pc, #224]	; (800b0b0 <xTaskResumeAll+0x118>)
 800afd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd2:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <xTaskResumeAll+0x118>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d162      	bne.n	800b0a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afda:	4b36      	ldr	r3, [pc, #216]	; (800b0b4 <xTaskResumeAll+0x11c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d05e      	beq.n	800b0a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe2:	e02f      	b.n	800b044 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800afe4:	4b34      	ldr	r3, [pc, #208]	; (800b0b8 <xTaskResumeAll+0x120>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3318      	adds	r3, #24
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff f861 	bl	800a0b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3304      	adds	r3, #4
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff f85c 	bl	800a0b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	4b2d      	ldr	r3, [pc, #180]	; (800b0bc <xTaskResumeAll+0x124>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d903      	bls.n	800b014 <xTaskResumeAll+0x7c>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	4a2a      	ldr	r2, [pc, #168]	; (800b0bc <xTaskResumeAll+0x124>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4a27      	ldr	r2, [pc, #156]	; (800b0c0 <xTaskResumeAll+0x128>)
 800b022:	441a      	add	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3304      	adds	r3, #4
 800b028:	4619      	mov	r1, r3
 800b02a:	4610      	mov	r0, r2
 800b02c:	f7fe ffe9 	bl	800a002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b034:	4b23      	ldr	r3, [pc, #140]	; (800b0c4 <xTaskResumeAll+0x12c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d302      	bcc.n	800b044 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b03e:	4b22      	ldr	r3, [pc, #136]	; (800b0c8 <xTaskResumeAll+0x130>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b044:	4b1c      	ldr	r3, [pc, #112]	; (800b0b8 <xTaskResumeAll+0x120>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1cb      	bne.n	800afe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b052:	f000 fb61 	bl	800b718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b056:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <xTaskResumeAll+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d010      	beq.n	800b084 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b062:	f000 f845 	bl	800b0f0 <xTaskIncrementTick>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <xTaskResumeAll+0x130>)
 800b06e:	2201      	movs	r2, #1
 800b070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3b01      	subs	r3, #1
 800b076:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f1      	bne.n	800b062 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <xTaskResumeAll+0x134>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b084:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <xTaskResumeAll+0x130>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d009      	beq.n	800b0a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b090:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <xTaskResumeAll+0x138>)
 800b092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a0:	f001 f874 	bl	800c18c <vPortExitCritical>

	return xAlreadyYielded;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200010d8 	.word	0x200010d8
 800b0b4:	200010b0 	.word	0x200010b0
 800b0b8:	20001070 	.word	0x20001070
 800b0bc:	200010b8 	.word	0x200010b8
 800b0c0:	20000be0 	.word	0x20000be0
 800b0c4:	20000bdc 	.word	0x20000bdc
 800b0c8:	200010c4 	.word	0x200010c4
 800b0cc:	200010c0 	.word	0x200010c0
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0da:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <xTaskGetTickCount+0x18>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0e0:	687b      	ldr	r3, [r7, #4]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr
 800b0ec:	200010b4 	.word	0x200010b4

0800b0f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0fa:	4b51      	ldr	r3, [pc, #324]	; (800b240 <xTaskIncrementTick+0x150>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 808e 	bne.w	800b220 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b104:	4b4f      	ldr	r3, [pc, #316]	; (800b244 <xTaskIncrementTick+0x154>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b10c:	4a4d      	ldr	r2, [pc, #308]	; (800b244 <xTaskIncrementTick+0x154>)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d120      	bne.n	800b15a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b118:	4b4b      	ldr	r3, [pc, #300]	; (800b248 <xTaskIncrementTick+0x158>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00a      	beq.n	800b138 <xTaskIncrementTick+0x48>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	603b      	str	r3, [r7, #0]
}
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <xTaskIncrementTick+0x46>
 800b138:	4b43      	ldr	r3, [pc, #268]	; (800b248 <xTaskIncrementTick+0x158>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	4b43      	ldr	r3, [pc, #268]	; (800b24c <xTaskIncrementTick+0x15c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a41      	ldr	r2, [pc, #260]	; (800b248 <xTaskIncrementTick+0x158>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	4a41      	ldr	r2, [pc, #260]	; (800b24c <xTaskIncrementTick+0x15c>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6013      	str	r3, [r2, #0]
 800b14c:	4b40      	ldr	r3, [pc, #256]	; (800b250 <xTaskIncrementTick+0x160>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	4a3f      	ldr	r2, [pc, #252]	; (800b250 <xTaskIncrementTick+0x160>)
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	f000 fadf 	bl	800b718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b15a:	4b3e      	ldr	r3, [pc, #248]	; (800b254 <xTaskIncrementTick+0x164>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	429a      	cmp	r2, r3
 800b162:	d34e      	bcc.n	800b202 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b164:	4b38      	ldr	r3, [pc, #224]	; (800b248 <xTaskIncrementTick+0x158>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <xTaskIncrementTick+0x82>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <xTaskIncrementTick+0x84>
 800b172:	2300      	movs	r3, #0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d004      	beq.n	800b182 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b178:	4b36      	ldr	r3, [pc, #216]	; (800b254 <xTaskIncrementTick+0x164>)
 800b17a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b17e:	601a      	str	r2, [r3, #0]
					break;
 800b180:	e03f      	b.n	800b202 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b182:	4b31      	ldr	r3, [pc, #196]	; (800b248 <xTaskIncrementTick+0x158>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d203      	bcs.n	800b1a2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b19a:	4a2e      	ldr	r2, [pc, #184]	; (800b254 <xTaskIncrementTick+0x164>)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6013      	str	r3, [r2, #0]
						break;
 800b1a0:	e02f      	b.n	800b202 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe ff86 	bl	800a0b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d004      	beq.n	800b1be <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe ff7d 	bl	800a0b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	4b25      	ldr	r3, [pc, #148]	; (800b258 <xTaskIncrementTick+0x168>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <xTaskIncrementTick+0xe2>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	4a22      	ldr	r2, [pc, #136]	; (800b258 <xTaskIncrementTick+0x168>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <xTaskIncrementTick+0x16c>)
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe ff0a 	bl	800a002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <xTaskIncrementTick+0x170>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d3b3      	bcc.n	800b164 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b200:	e7b0      	b.n	800b164 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b202:	4b17      	ldr	r3, [pc, #92]	; (800b260 <xTaskIncrementTick+0x170>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4914      	ldr	r1, [pc, #80]	; (800b25c <xTaskIncrementTick+0x16c>)
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d907      	bls.n	800b22a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e004      	b.n	800b22a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b220:	4b10      	ldr	r3, [pc, #64]	; (800b264 <xTaskIncrementTick+0x174>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	4a0f      	ldr	r2, [pc, #60]	; (800b264 <xTaskIncrementTick+0x174>)
 800b228:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b22a:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <xTaskIncrementTick+0x178>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b232:	2301      	movs	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b236:	697b      	ldr	r3, [r7, #20]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200010d8 	.word	0x200010d8
 800b244:	200010b4 	.word	0x200010b4
 800b248:	20001068 	.word	0x20001068
 800b24c:	2000106c 	.word	0x2000106c
 800b250:	200010c8 	.word	0x200010c8
 800b254:	200010d0 	.word	0x200010d0
 800b258:	200010b8 	.word	0x200010b8
 800b25c:	20000be0 	.word	0x20000be0
 800b260:	20000bdc 	.word	0x20000bdc
 800b264:	200010c0 	.word	0x200010c0
 800b268:	200010c4 	.word	0x200010c4

0800b26c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b272:	4b2a      	ldr	r3, [pc, #168]	; (800b31c <vTaskSwitchContext+0xb0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b27a:	4b29      	ldr	r3, [pc, #164]	; (800b320 <vTaskSwitchContext+0xb4>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b280:	e046      	b.n	800b310 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b282:	4b27      	ldr	r3, [pc, #156]	; (800b320 <vTaskSwitchContext+0xb4>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b288:	4b26      	ldr	r3, [pc, #152]	; (800b324 <vTaskSwitchContext+0xb8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	e010      	b.n	800b2b2 <vTaskSwitchContext+0x46>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10a      	bne.n	800b2ac <vTaskSwitchContext+0x40>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	607b      	str	r3, [r7, #4]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <vTaskSwitchContext+0x3e>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	491d      	ldr	r1, [pc, #116]	; (800b328 <vTaskSwitchContext+0xbc>)
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0e4      	beq.n	800b290 <vTaskSwitchContext+0x24>
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4a15      	ldr	r2, [pc, #84]	; (800b328 <vTaskSwitchContext+0xbc>)
 800b2d2:	4413      	add	r3, r2
 800b2d4:	60bb      	str	r3, [r7, #8]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	605a      	str	r2, [r3, #4]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d104      	bne.n	800b2f6 <vTaskSwitchContext+0x8a>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	605a      	str	r2, [r3, #4]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	4a0b      	ldr	r2, [pc, #44]	; (800b32c <vTaskSwitchContext+0xc0>)
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	4a08      	ldr	r2, [pc, #32]	; (800b324 <vTaskSwitchContext+0xb8>)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b306:	4b09      	ldr	r3, [pc, #36]	; (800b32c <vTaskSwitchContext+0xc0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3354      	adds	r3, #84	; 0x54
 800b30c:	4a08      	ldr	r2, [pc, #32]	; (800b330 <vTaskSwitchContext+0xc4>)
 800b30e:	6013      	str	r3, [r2, #0]
}
 800b310:	bf00      	nop
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	200010d8 	.word	0x200010d8
 800b320:	200010c4 	.word	0x200010c4
 800b324:	200010b8 	.word	0x200010b8
 800b328:	20000be0 	.word	0x20000be0
 800b32c:	20000bdc 	.word	0x20000bdc
 800b330:	20000198 	.word	0x20000198

0800b334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	60fb      	str	r3, [r7, #12]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b35a:	4b07      	ldr	r3, [pc, #28]	; (800b378 <vTaskPlaceOnEventList+0x44>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3318      	adds	r3, #24
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7fe fe70 	bl	800a048 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b368:	2101      	movs	r1, #1
 800b36a:	6838      	ldr	r0, [r7, #0]
 800b36c:	f000 fa84 	bl	800b878 <prvAddCurrentTaskToDelayedList>
}
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000bdc 	.word	0x20000bdc

0800b37c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	617b      	str	r3, [r7, #20]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3318      	adds	r3, #24
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7fe fe28 	bl	800a002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f000 fa59 	bl	800b878 <prvAddCurrentTaskToDelayedList>
	}
 800b3c6:	bf00      	nop
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000bdc 	.word	0x20000bdc

0800b3d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	60fb      	str	r3, [r7, #12]
}
 800b3fc:	bf00      	nop
 800b3fe:	e7fe      	b.n	800b3fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	3318      	adds	r3, #24
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fe57 	bl	800a0b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b40a:	4b1e      	ldr	r3, [pc, #120]	; (800b484 <xTaskRemoveFromEventList+0xb0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d11d      	bne.n	800b44e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	3304      	adds	r3, #4
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fe4e 	bl	800a0b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4b19      	ldr	r3, [pc, #100]	; (800b488 <xTaskRemoveFromEventList+0xb4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d903      	bls.n	800b430 <xTaskRemoveFromEventList+0x5c>
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	4a16      	ldr	r2, [pc, #88]	; (800b488 <xTaskRemoveFromEventList+0xb4>)
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4613      	mov	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4a13      	ldr	r2, [pc, #76]	; (800b48c <xTaskRemoveFromEventList+0xb8>)
 800b43e:	441a      	add	r2, r3
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	3304      	adds	r3, #4
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7fe fddb 	bl	800a002 <vListInsertEnd>
 800b44c:	e005      	b.n	800b45a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3318      	adds	r3, #24
 800b452:	4619      	mov	r1, r3
 800b454:	480e      	ldr	r0, [pc, #56]	; (800b490 <xTaskRemoveFromEventList+0xbc>)
 800b456:	f7fe fdd4 	bl	800a002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45e:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <xTaskRemoveFromEventList+0xc0>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	429a      	cmp	r2, r3
 800b466:	d905      	bls.n	800b474 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b468:	2301      	movs	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b46c:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <xTaskRemoveFromEventList+0xc4>)
 800b46e:	2201      	movs	r2, #1
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	e001      	b.n	800b478 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b478:	697b      	ldr	r3, [r7, #20]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	200010d8 	.word	0x200010d8
 800b488:	200010b8 	.word	0x200010b8
 800b48c:	20000be0 	.word	0x20000be0
 800b490:	20001070 	.word	0x20001070
 800b494:	20000bdc 	.word	0x20000bdc
 800b498:	200010c4 	.word	0x200010c4

0800b49c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4a4:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <vTaskInternalSetTimeOutState+0x24>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <vTaskInternalSetTimeOutState+0x28>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	605a      	str	r2, [r3, #4]
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	200010c8 	.word	0x200010c8
 800b4c4:	200010b4 	.word	0x200010b4

0800b4c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	60fb      	str	r3, [r7, #12]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b50a:	f000 fe0f 	bl	800c12c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b50e:	4b1d      	ldr	r3, [pc, #116]	; (800b584 <xTaskCheckForTimeOut+0xbc>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	69ba      	ldr	r2, [r7, #24]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b526:	d102      	bne.n	800b52e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b528:	2300      	movs	r3, #0
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e023      	b.n	800b576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	4b15      	ldr	r3, [pc, #84]	; (800b588 <xTaskCheckForTimeOut+0xc0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d007      	beq.n	800b54a <xTaskCheckForTimeOut+0x82>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	d302      	bcc.n	800b54a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b544:	2301      	movs	r3, #1
 800b546:	61fb      	str	r3, [r7, #28]
 800b548:	e015      	b.n	800b576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	429a      	cmp	r2, r3
 800b552:	d20b      	bcs.n	800b56c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff ff9b 	bl	800b49c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b566:	2300      	movs	r3, #0
 800b568:	61fb      	str	r3, [r7, #28]
 800b56a:	e004      	b.n	800b576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b572:	2301      	movs	r3, #1
 800b574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b576:	f000 fe09 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800b57a:	69fb      	ldr	r3, [r7, #28]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	200010b4 	.word	0x200010b4
 800b588:	200010c8 	.word	0x200010c8

0800b58c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b590:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <vTaskMissedYield+0x14>)
 800b592:	2201      	movs	r2, #1
 800b594:	601a      	str	r2, [r3, #0]
}
 800b596:	bf00      	nop
 800b598:	46bd      	mov	sp, r7
 800b59a:	bc80      	pop	{r7}
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	200010c4 	.word	0x200010c4

0800b5a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5ac:	f000 f852 	bl	800b654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5b0:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <prvIdleTask+0x28>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d9f9      	bls.n	800b5ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <prvIdleTask+0x2c>)
 800b5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5c8:	e7f0      	b.n	800b5ac <prvIdleTask+0x8>
 800b5ca:	bf00      	nop
 800b5cc:	20000be0 	.word	0x20000be0
 800b5d0:	e000ed04 	.word	0xe000ed04

0800b5d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5da:	2300      	movs	r3, #0
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	e00c      	b.n	800b5fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4a12      	ldr	r2, [pc, #72]	; (800b634 <prvInitialiseTaskLists+0x60>)
 800b5ec:	4413      	add	r3, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fcdc 	bl	8009fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	607b      	str	r3, [r7, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b37      	cmp	r3, #55	; 0x37
 800b5fe:	d9ef      	bls.n	800b5e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b600:	480d      	ldr	r0, [pc, #52]	; (800b638 <prvInitialiseTaskLists+0x64>)
 800b602:	f7fe fcd3 	bl	8009fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b606:	480d      	ldr	r0, [pc, #52]	; (800b63c <prvInitialiseTaskLists+0x68>)
 800b608:	f7fe fcd0 	bl	8009fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b60c:	480c      	ldr	r0, [pc, #48]	; (800b640 <prvInitialiseTaskLists+0x6c>)
 800b60e:	f7fe fccd 	bl	8009fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b612:	480c      	ldr	r0, [pc, #48]	; (800b644 <prvInitialiseTaskLists+0x70>)
 800b614:	f7fe fcca 	bl	8009fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b618:	480b      	ldr	r0, [pc, #44]	; (800b648 <prvInitialiseTaskLists+0x74>)
 800b61a:	f7fe fcc7 	bl	8009fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b61e:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <prvInitialiseTaskLists+0x78>)
 800b620:	4a05      	ldr	r2, [pc, #20]	; (800b638 <prvInitialiseTaskLists+0x64>)
 800b622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b624:	4b0a      	ldr	r3, [pc, #40]	; (800b650 <prvInitialiseTaskLists+0x7c>)
 800b626:	4a05      	ldr	r2, [pc, #20]	; (800b63c <prvInitialiseTaskLists+0x68>)
 800b628:	601a      	str	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000be0 	.word	0x20000be0
 800b638:	20001040 	.word	0x20001040
 800b63c:	20001054 	.word	0x20001054
 800b640:	20001070 	.word	0x20001070
 800b644:	20001084 	.word	0x20001084
 800b648:	2000109c 	.word	0x2000109c
 800b64c:	20001068 	.word	0x20001068
 800b650:	2000106c 	.word	0x2000106c

0800b654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b65a:	e019      	b.n	800b690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b65c:	f000 fd66 	bl	800c12c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <prvCheckTasksWaitingTermination+0x50>)
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fd23 	bl	800a0b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b672:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <prvCheckTasksWaitingTermination+0x54>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3b01      	subs	r3, #1
 800b678:	4a0b      	ldr	r2, [pc, #44]	; (800b6a8 <prvCheckTasksWaitingTermination+0x54>)
 800b67a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b67c:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3b01      	subs	r3, #1
 800b682:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b686:	f000 fd81 	bl	800c18c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f810 	bl	800b6b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b690:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <prvCheckTasksWaitingTermination+0x58>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e1      	bne.n	800b65c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001084 	.word	0x20001084
 800b6a8:	200010b0 	.word	0x200010b0
 800b6ac:	20001098 	.word	0x20001098

0800b6b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3354      	adds	r3, #84	; 0x54
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 f803 	bl	800d6c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d108      	bne.n	800b6de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 feef 	bl	800c4b4 <vPortFree>
				vPortFree( pxTCB );
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 feec 	bl	800c4b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6dc:	e018      	b.n	800b710 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d103      	bne.n	800b6f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fee3 	bl	800c4b4 <vPortFree>
	}
 800b6ee:	e00f      	b.n	800b710 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d00a      	beq.n	800b710 <prvDeleteTCB+0x60>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60fb      	str	r3, [r7, #12]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <prvDeleteTCB+0x5e>
	}
 800b710:	bf00      	nop
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b71e:	4b0e      	ldr	r3, [pc, #56]	; (800b758 <prvResetNextTaskUnblockTime+0x40>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <prvResetNextTaskUnblockTime+0x14>
 800b728:	2301      	movs	r3, #1
 800b72a:	e000      	b.n	800b72e <prvResetNextTaskUnblockTime+0x16>
 800b72c:	2300      	movs	r3, #0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <prvResetNextTaskUnblockTime+0x44>)
 800b734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b738:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b73a:	e008      	b.n	800b74e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b73c:	4b06      	ldr	r3, [pc, #24]	; (800b758 <prvResetNextTaskUnblockTime+0x40>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4a04      	ldr	r2, [pc, #16]	; (800b75c <prvResetNextTaskUnblockTime+0x44>)
 800b74c:	6013      	str	r3, [r2, #0]
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr
 800b758:	20001068 	.word	0x20001068
 800b75c:	200010d0 	.word	0x200010d0

0800b760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b766:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <xTaskGetSchedulerState+0x34>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b76e:	2301      	movs	r3, #1
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	e008      	b.n	800b786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b774:	4b08      	ldr	r3, [pc, #32]	; (800b798 <xTaskGetSchedulerState+0x38>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b77c:	2302      	movs	r3, #2
 800b77e:	607b      	str	r3, [r7, #4]
 800b780:	e001      	b.n	800b786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b782:	2300      	movs	r3, #0
 800b784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b786:	687b      	ldr	r3, [r7, #4]
	}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bc80      	pop	{r7}
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	200010bc 	.word	0x200010bc
 800b798:	200010d8 	.word	0x200010d8

0800b79c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d056      	beq.n	800b860 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7b2:	4b2e      	ldr	r3, [pc, #184]	; (800b86c <xTaskPriorityDisinherit+0xd0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d00a      	beq.n	800b7d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	60fb      	str	r3, [r7, #12]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	60bb      	str	r3, [r7, #8]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b802:	429a      	cmp	r2, r3
 800b804:	d02c      	beq.n	800b860 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d128      	bne.n	800b860 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	3304      	adds	r3, #4
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fc50 	bl	800a0b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <xTaskPriorityDisinherit+0xd4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d903      	bls.n	800b840 <xTaskPriorityDisinherit+0xa4>
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	4a0c      	ldr	r2, [pc, #48]	; (800b870 <xTaskPriorityDisinherit+0xd4>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b844:	4613      	mov	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4a09      	ldr	r2, [pc, #36]	; (800b874 <xTaskPriorityDisinherit+0xd8>)
 800b84e:	441a      	add	r2, r3
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	3304      	adds	r3, #4
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f7fe fbd3 	bl	800a002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b85c:	2301      	movs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b860:	697b      	ldr	r3, [r7, #20]
	}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000bdc 	.word	0x20000bdc
 800b870:	200010b8 	.word	0x200010b8
 800b874:	20000be0 	.word	0x20000be0

0800b878 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b882:	4b21      	ldr	r3, [pc, #132]	; (800b908 <prvAddCurrentTaskToDelayedList+0x90>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b888:	4b20      	ldr	r3, [pc, #128]	; (800b90c <prvAddCurrentTaskToDelayedList+0x94>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fc12 	bl	800a0b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b89a:	d10a      	bne.n	800b8b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8a2:	4b1a      	ldr	r3, [pc, #104]	; (800b90c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4819      	ldr	r0, [pc, #100]	; (800b910 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8ac:	f7fe fba9 	bl	800a002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8b0:	e026      	b.n	800b900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8ba:	4b14      	ldr	r3, [pc, #80]	; (800b90c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d209      	bcs.n	800b8de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ca:	4b12      	ldr	r3, [pc, #72]	; (800b914 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe fbb6 	bl	800a048 <vListInsert>
}
 800b8dc:	e010      	b.n	800b900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8de:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	f7fe fbac 	bl	800a048 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d202      	bcs.n	800b900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8fa:	4a08      	ldr	r2, [pc, #32]	; (800b91c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	6013      	str	r3, [r2, #0]
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	200010b4 	.word	0x200010b4
 800b90c:	20000bdc 	.word	0x20000bdc
 800b910:	2000109c 	.word	0x2000109c
 800b914:	2000106c 	.word	0x2000106c
 800b918:	20001068 	.word	0x20001068
 800b91c:	200010d0 	.word	0x200010d0

0800b920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	; 0x28
 800b924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b92a:	f000 facb 	bl	800bec4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b92e:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <xTimerCreateTimerTask+0x80>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d021      	beq.n	800b97a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b93e:	1d3a      	adds	r2, r7, #4
 800b940:	f107 0108 	add.w	r1, r7, #8
 800b944:	f107 030c 	add.w	r3, r7, #12
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fb15 	bl	8009f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	9202      	str	r2, [sp, #8]
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	2302      	movs	r3, #2
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	2300      	movs	r3, #0
 800b95e:	460a      	mov	r2, r1
 800b960:	4910      	ldr	r1, [pc, #64]	; (800b9a4 <xTimerCreateTimerTask+0x84>)
 800b962:	4811      	ldr	r0, [pc, #68]	; (800b9a8 <xTimerCreateTimerTask+0x88>)
 800b964:	f7ff f8b6 	bl	800aad4 <xTaskCreateStatic>
 800b968:	4603      	mov	r3, r0
 800b96a:	4a10      	ldr	r2, [pc, #64]	; (800b9ac <xTimerCreateTimerTask+0x8c>)
 800b96c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b96e:	4b0f      	ldr	r3, [pc, #60]	; (800b9ac <xTimerCreateTimerTask+0x8c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b976:	2301      	movs	r3, #1
 800b978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10a      	bne.n	800b996 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	613b      	str	r3, [r7, #16]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b996:	697b      	ldr	r3, [r7, #20]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	2000110c 	.word	0x2000110c
 800b9a4:	0800d878 	.word	0x0800d878
 800b9a8:	0800bacd 	.word	0x0800bacd
 800b9ac:	20001110 	.word	0x20001110

0800b9b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	623b      	str	r3, [r7, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9de:	4b1a      	ldr	r3, [pc, #104]	; (800ba48 <xTimerGenericCommand+0x98>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d02a      	beq.n	800ba3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b05      	cmp	r3, #5
 800b9f6:	dc18      	bgt.n	800ba2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9f8:	f7ff feb2 	bl	800b760 <xTaskGetSchedulerState>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d109      	bne.n	800ba16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba02:	4b11      	ldr	r3, [pc, #68]	; (800ba48 <xTimerGenericCommand+0x98>)
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f107 0110 	add.w	r1, r7, #16
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0e:	f7fe fc7f 	bl	800a310 <xQueueGenericSend>
 800ba12:	6278      	str	r0, [r7, #36]	; 0x24
 800ba14:	e012      	b.n	800ba3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <xTimerGenericCommand+0x98>)
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f107 0110 	add.w	r1, r7, #16
 800ba1e:	2300      	movs	r3, #0
 800ba20:	2200      	movs	r2, #0
 800ba22:	f7fe fc75 	bl	800a310 <xQueueGenericSend>
 800ba26:	6278      	str	r0, [r7, #36]	; 0x24
 800ba28:	e008      	b.n	800ba3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba2a:	4b07      	ldr	r3, [pc, #28]	; (800ba48 <xTimerGenericCommand+0x98>)
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f107 0110 	add.w	r1, r7, #16
 800ba32:	2300      	movs	r3, #0
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	f7fe fd69 	bl	800a50c <xQueueGenericSendFromISR>
 800ba3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3728      	adds	r7, #40	; 0x28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	2000110c 	.word	0x2000110c

0800ba4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba56:	4b1c      	ldr	r3, [pc, #112]	; (800bac8 <prvProcessExpiredTimer+0x7c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	3304      	adds	r3, #4
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe fb27 	bl	800a0b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d122      	bne.n	800bab8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	699a      	ldr	r2, [r3, #24]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	18d1      	adds	r1, r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	f000 f8c8 	bl	800bc14 <prvInsertTimerInActiveList>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d016      	beq.n	800bab8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	2100      	movs	r1, #0
 800ba94:	6978      	ldr	r0, [r7, #20]
 800ba96:	f7ff ff8b 	bl	800b9b0 <xTimerGenericCommand>
 800ba9a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10a      	bne.n	800bab8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	60fb      	str	r3, [r7, #12]
}
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	6978      	ldr	r0, [r7, #20]
 800babe:	4798      	blx	r3
}
 800bac0:	bf00      	nop
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	20001104 	.word	0x20001104

0800bacc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bad4:	f107 0308 	add.w	r3, r7, #8
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 f857 	bl	800bb8c <prvGetNextExpireTime>
 800bade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	4619      	mov	r1, r3
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f803 	bl	800baf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800baea:	f000 f8d5 	bl	800bc98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baee:	e7f1      	b.n	800bad4 <prvTimerTask+0x8>

0800baf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bafa:	f7ff fa3f 	bl	800af7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bafe:	f107 0308 	add.w	r3, r7, #8
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 f866 	bl	800bbd4 <prvSampleTimeNow>
 800bb08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d130      	bne.n	800bb72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10a      	bne.n	800bb2c <prvProcessTimerOrBlockTask+0x3c>
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d806      	bhi.n	800bb2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb1e:	f7ff fa3b 	bl	800af98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff ff91 	bl	800ba4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb2a:	e024      	b.n	800bb76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d008      	beq.n	800bb44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb32:	4b13      	ldr	r3, [pc, #76]	; (800bb80 <prvProcessTimerOrBlockTask+0x90>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bf0c      	ite	eq
 800bb3c:	2301      	moveq	r3, #1
 800bb3e:	2300      	movne	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <prvProcessTimerOrBlockTask+0x94>)
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7fe ff8b 	bl	800aa6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb56:	f7ff fa1f 	bl	800af98 <xTaskResumeAll>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb60:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <prvProcessTimerOrBlockTask+0x98>)
 800bb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	f3bf 8f6f 	isb	sy
}
 800bb70:	e001      	b.n	800bb76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb72:	f7ff fa11 	bl	800af98 <xTaskResumeAll>
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20001108 	.word	0x20001108
 800bb84:	2000110c 	.word	0x2000110c
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb94:	4b0e      	ldr	r3, [pc, #56]	; (800bbd0 <prvGetNextExpireTime+0x44>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	bf0c      	ite	eq
 800bb9e:	2301      	moveq	r3, #1
 800bba0:	2300      	movne	r3, #0
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	461a      	mov	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d105      	bne.n	800bbbe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbb2:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <prvGetNextExpireTime+0x44>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	e001      	b.n	800bbc2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bc80      	pop	{r7}
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	20001104 	.word	0x20001104

0800bbd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbdc:	f7ff fa7a 	bl	800b0d4 <xTaskGetTickCount>
 800bbe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbe2:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <prvSampleTimeNow+0x3c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d205      	bcs.n	800bbf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbec:	f000 f908 	bl	800be00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e002      	b.n	800bbfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbfe:	4a04      	ldr	r2, [pc, #16]	; (800bc10 <prvSampleTimeNow+0x3c>)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc04:	68fb      	ldr	r3, [r7, #12]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20001114 	.word	0x20001114

0800bc14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d812      	bhi.n	800bc60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d302      	bcc.n	800bc4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	e01b      	b.n	800bc86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc4e:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <prvInsertTimerInActiveList+0x7c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3304      	adds	r3, #4
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f7fe f9f5 	bl	800a048 <vListInsert>
 800bc5e:	e012      	b.n	800bc86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d206      	bcs.n	800bc76 <prvInsertTimerInActiveList+0x62>
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d302      	bcc.n	800bc76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	e007      	b.n	800bc86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <prvInsertTimerInActiveList+0x80>)
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4619      	mov	r1, r3
 800bc80:	4610      	mov	r0, r2
 800bc82:	f7fe f9e1 	bl	800a048 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc86:	697b      	ldr	r3, [r7, #20]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20001108 	.word	0x20001108
 800bc94:	20001104 	.word	0x20001104

0800bc98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08e      	sub	sp, #56	; 0x38
 800bc9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc9e:	e09d      	b.n	800bddc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	da18      	bge.n	800bcd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bca6:	1d3b      	adds	r3, r7, #4
 800bca8:	3304      	adds	r3, #4
 800bcaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10a      	bne.n	800bcc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	61fb      	str	r3, [r7, #28]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcce:	6850      	ldr	r0, [r2, #4]
 800bcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd2:	6892      	ldr	r2, [r2, #8]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	db7d      	blt.n	800bdda <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	3304      	adds	r3, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe f9e2 	bl	800a0b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcf4:	463b      	mov	r3, r7
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ff6c 	bl	800bbd4 <prvSampleTimeNow>
 800bcfc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	d86b      	bhi.n	800bddc <prvProcessReceivedCommands+0x144>
 800bd04:	a201      	add	r2, pc, #4	; (adr r2, 800bd0c <prvProcessReceivedCommands+0x74>)
 800bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0a:	bf00      	nop
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bddd 	.word	0x0800bddd
 800bd1c:	0800bd91 	.word	0x0800bd91
 800bd20:	0800bdc9 	.word	0x0800bdc9
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bd35 	.word	0x0800bd35
 800bd2c:	0800bddd 	.word	0x0800bddd
 800bd30:	0800bd91 	.word	0x0800bd91
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	18d1      	adds	r1, r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd42:	f7ff ff67 	bl	800bc14 <prvInsertTimerInActiveList>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d047      	beq.n	800bddc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d13f      	bne.n	800bddc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	441a      	add	r2, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd6e:	f7ff fe1f 	bl	800b9b0 <xTimerGenericCommand>
 800bd72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d130      	bne.n	800bddc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	61bb      	str	r3, [r7, #24]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	617b      	str	r3, [r7, #20]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	699a      	ldr	r2, [r3, #24]
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	18d1      	adds	r1, r2, r3
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc2:	f7ff ff27 	bl	800bc14 <prvInsertTimerInActiveList>
					break;
 800bdc6:	e009      	b.n	800bddc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d104      	bne.n	800bddc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bdd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd4:	f000 fb6e 	bl	800c4b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bdd8:	e000      	b.n	800bddc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bdda:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bddc:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <prvProcessReceivedCommands+0x164>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	1d39      	adds	r1, r7, #4
 800bde2:	2200      	movs	r2, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fc29 	bl	800a63c <xQueueReceive>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f47f af57 	bne.w	800bca0 <prvProcessReceivedCommands+0x8>
	}
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	3730      	adds	r7, #48	; 0x30
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	2000110c 	.word	0x2000110c

0800be00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be06:	e045      	b.n	800be94 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be08:	4b2c      	ldr	r3, [pc, #176]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be12:	4b2a      	ldr	r3, [pc, #168]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3304      	adds	r3, #4
 800be20:	4618      	mov	r0, r3
 800be22:	f7fe f949 	bl	800a0b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d12e      	bne.n	800be94 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4413      	add	r3, r2
 800be3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	429a      	cmp	r2, r3
 800be46:	d90e      	bls.n	800be66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be54:	4b19      	ldr	r3, [pc, #100]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7fe f8f2 	bl	800a048 <vListInsert>
 800be64:	e016      	b.n	800be94 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be66:	2300      	movs	r3, #0
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	2300      	movs	r3, #0
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	2100      	movs	r1, #0
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fd9d 	bl	800b9b0 <xTimerGenericCommand>
 800be76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10a      	bne.n	800be94 <prvSwitchTimerLists+0x94>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	603b      	str	r3, [r7, #0]
}
 800be90:	bf00      	nop
 800be92:	e7fe      	b.n	800be92 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be94:	4b09      	ldr	r3, [pc, #36]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1b4      	bne.n	800be08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be9e:	4b07      	ldr	r3, [pc, #28]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bea4:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <prvSwitchTimerLists+0xc0>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a04      	ldr	r2, [pc, #16]	; (800bebc <prvSwitchTimerLists+0xbc>)
 800beaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800beac:	4a04      	ldr	r2, [pc, #16]	; (800bec0 <prvSwitchTimerLists+0xc0>)
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	6013      	str	r3, [r2, #0]
}
 800beb2:	bf00      	nop
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20001104 	.word	0x20001104
 800bec0:	20001108 	.word	0x20001108

0800bec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800beca:	f000 f92f 	bl	800c12c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <prvCheckForValidListAndQueue+0x60>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d120      	bne.n	800bf18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bed6:	4814      	ldr	r0, [pc, #80]	; (800bf28 <prvCheckForValidListAndQueue+0x64>)
 800bed8:	f7fe f868 	bl	8009fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bedc:	4813      	ldr	r0, [pc, #76]	; (800bf2c <prvCheckForValidListAndQueue+0x68>)
 800bede:	f7fe f865 	bl	8009fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bee2:	4b13      	ldr	r3, [pc, #76]	; (800bf30 <prvCheckForValidListAndQueue+0x6c>)
 800bee4:	4a10      	ldr	r2, [pc, #64]	; (800bf28 <prvCheckForValidListAndQueue+0x64>)
 800bee6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bee8:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <prvCheckForValidListAndQueue+0x70>)
 800beea:	4a10      	ldr	r2, [pc, #64]	; (800bf2c <prvCheckForValidListAndQueue+0x68>)
 800beec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800beee:	2300      	movs	r3, #0
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	4b11      	ldr	r3, [pc, #68]	; (800bf38 <prvCheckForValidListAndQueue+0x74>)
 800bef4:	4a11      	ldr	r2, [pc, #68]	; (800bf3c <prvCheckForValidListAndQueue+0x78>)
 800bef6:	2110      	movs	r1, #16
 800bef8:	200a      	movs	r0, #10
 800befa:	f7fe f96f 	bl	800a1dc <xQueueGenericCreateStatic>
 800befe:	4603      	mov	r3, r0
 800bf00:	4a08      	ldr	r2, [pc, #32]	; (800bf24 <prvCheckForValidListAndQueue+0x60>)
 800bf02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf04:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <prvCheckForValidListAndQueue+0x60>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf0c:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <prvCheckForValidListAndQueue+0x60>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	490b      	ldr	r1, [pc, #44]	; (800bf40 <prvCheckForValidListAndQueue+0x7c>)
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fd82 	bl	800aa1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf18:	f000 f938 	bl	800c18c <vPortExitCritical>
}
 800bf1c:	bf00      	nop
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000110c 	.word	0x2000110c
 800bf28:	200010dc 	.word	0x200010dc
 800bf2c:	200010f0 	.word	0x200010f0
 800bf30:	20001104 	.word	0x20001104
 800bf34:	20001108 	.word	0x20001108
 800bf38:	200011b8 	.word	0x200011b8
 800bf3c:	20001118 	.word	0x20001118
 800bf40:	0800d880 	.word	0x0800d880

0800bf44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3b04      	subs	r3, #4
 800bf54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3b04      	subs	r3, #4
 800bf62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0201 	bic.w	r2, r3, #1
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3b04      	subs	r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf74:	4a08      	ldr	r2, [pc, #32]	; (800bf98 <pxPortInitialiseStack+0x54>)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3b14      	subs	r3, #20
 800bf7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3b20      	subs	r3, #32
 800bf8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bc80      	pop	{r7}
 800bf96:	4770      	bx	lr
 800bf98:	0800bf9d 	.word	0x0800bf9d

0800bf9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfa6:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <prvTaskExitError+0x54>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfae:	d00a      	beq.n	800bfc6 <prvTaskExitError+0x2a>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	60fb      	str	r3, [r7, #12]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <prvTaskExitError+0x28>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	60bb      	str	r3, [r7, #8]
}
 800bfd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfda:	bf00      	nop
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0fc      	beq.n	800bfdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20000134 	.word	0x20000134
	...

0800c000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <pxCurrentTCBConst2>)
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	6808      	ldr	r0, [r1, #0]
 800c006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c00a:	f380 8809 	msr	PSP, r0
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f04f 0000 	mov.w	r0, #0
 800c016:	f380 8811 	msr	BASEPRI, r0
 800c01a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c01e:	4770      	bx	lr

0800c020 <pxCurrentTCBConst2>:
 800c020:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop

0800c028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c028:	4806      	ldr	r0, [pc, #24]	; (800c044 <prvPortStartFirstTask+0x1c>)
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	6800      	ldr	r0, [r0, #0]
 800c02e:	f380 8808 	msr	MSP, r0
 800c032:	b662      	cpsie	i
 800c034:	b661      	cpsie	f
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	df00      	svc	0
 800c040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c042:	bf00      	nop
 800c044:	e000ed08 	.word	0xe000ed08

0800c048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c04e:	4b32      	ldr	r3, [pc, #200]	; (800c118 <xPortStartScheduler+0xd0>)
 800c050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	; 0xff
 800c05e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c070:	b2da      	uxtb	r2, r3
 800c072:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <xPortStartScheduler+0xd4>)
 800c074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c076:	4b2a      	ldr	r3, [pc, #168]	; (800c120 <xPortStartScheduler+0xd8>)
 800c078:	2207      	movs	r2, #7
 800c07a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c07c:	e009      	b.n	800c092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c07e:	4b28      	ldr	r3, [pc, #160]	; (800c120 <xPortStartScheduler+0xd8>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3b01      	subs	r3, #1
 800c084:	4a26      	ldr	r2, [pc, #152]	; (800c120 <xPortStartScheduler+0xd8>)
 800c086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c092:	78fb      	ldrb	r3, [r7, #3]
 800c094:	b2db      	uxtb	r3, r3
 800c096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c09a:	2b80      	cmp	r3, #128	; 0x80
 800c09c:	d0ef      	beq.n	800c07e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c09e:	4b20      	ldr	r3, [pc, #128]	; (800c120 <xPortStartScheduler+0xd8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1c3 0307 	rsb	r3, r3, #7
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d00a      	beq.n	800c0c0 <xPortStartScheduler+0x78>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	60bb      	str	r3, [r7, #8]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0c0:	4b17      	ldr	r3, [pc, #92]	; (800c120 <xPortStartScheduler+0xd8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	4a16      	ldr	r2, [pc, #88]	; (800c120 <xPortStartScheduler+0xd8>)
 800c0c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ca:	4b15      	ldr	r3, [pc, #84]	; (800c120 <xPortStartScheduler+0xd8>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0d2:	4a13      	ldr	r2, [pc, #76]	; (800c120 <xPortStartScheduler+0xd8>)
 800c0d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0de:	4b11      	ldr	r3, [pc, #68]	; (800c124 <xPortStartScheduler+0xdc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a10      	ldr	r2, [pc, #64]	; (800c124 <xPortStartScheduler+0xdc>)
 800c0e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0ea:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <xPortStartScheduler+0xdc>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a0d      	ldr	r2, [pc, #52]	; (800c124 <xPortStartScheduler+0xdc>)
 800c0f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0f6:	f000 f8b9 	bl	800c26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <xPortStartScheduler+0xe0>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c100:	f7ff ff92 	bl	800c028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c104:	f7ff f8b2 	bl	800b26c <vTaskSwitchContext>
	prvTaskExitError();
 800c108:	f7ff ff48 	bl	800bf9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	e000e400 	.word	0xe000e400
 800c11c:	20001208 	.word	0x20001208
 800c120:	2000120c 	.word	0x2000120c
 800c124:	e000ed20 	.word	0xe000ed20
 800c128:	20000134 	.word	0x20000134

0800c12c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	607b      	str	r3, [r7, #4]
}
 800c144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c146:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <vPortEnterCritical+0x58>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	4a0d      	ldr	r2, [pc, #52]	; (800c184 <vPortEnterCritical+0x58>)
 800c14e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c150:	4b0c      	ldr	r3, [pc, #48]	; (800c184 <vPortEnterCritical+0x58>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d10f      	bne.n	800c178 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c158:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <vPortEnterCritical+0x5c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <vPortEnterCritical+0x4c>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	603b      	str	r3, [r7, #0]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <vPortEnterCritical+0x4a>
	}
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bc80      	pop	{r7}
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20000134 	.word	0x20000134
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c192:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <vPortExitCritical+0x4c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <vPortExitCritical+0x24>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	607b      	str	r3, [r7, #4]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <vPortExitCritical+0x4c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4a08      	ldr	r2, [pc, #32]	; (800c1d8 <vPortExitCritical+0x4c>)
 800c1b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1ba:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <vPortExitCritical+0x4c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <vPortExitCritical+0x42>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f383 8811 	msr	BASEPRI, r3
}
 800c1cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1ce:	bf00      	nop
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bc80      	pop	{r7}
 800c1d6:	4770      	bx	lr
 800c1d8:	20000134 	.word	0x20000134
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1e0:	f3ef 8009 	mrs	r0, PSP
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <pxCurrentTCBConst>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1f0:	6010      	str	r0, [r2, #0]
 800c1f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c1f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1fa:	f380 8811 	msr	BASEPRI, r0
 800c1fe:	f7ff f835 	bl	800b26c <vTaskSwitchContext>
 800c202:	f04f 0000 	mov.w	r0, #0
 800c206:	f380 8811 	msr	BASEPRI, r0
 800c20a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c20e:	6819      	ldr	r1, [r3, #0]
 800c210:	6808      	ldr	r0, [r1, #0]
 800c212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c216:	f380 8809 	msr	PSP, r0
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	4770      	bx	lr

0800c220 <pxCurrentTCBConst>:
 800c220:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop

0800c228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	607b      	str	r3, [r7, #4]
}
 800c240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c242:	f7fe ff55 	bl	800b0f0 <xTaskIncrementTick>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c24c:	4b06      	ldr	r3, [pc, #24]	; (800c268 <SysTick_Handler+0x40>)
 800c24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	2300      	movs	r3, #0
 800c256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	f383 8811 	msr	BASEPRI, r3
}
 800c25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c260:	bf00      	nop
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c270:	4b0a      	ldr	r3, [pc, #40]	; (800c29c <vPortSetupTimerInterrupt+0x30>)
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c276:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <vPortSetupTimerInterrupt+0x34>)
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c27c:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <vPortSetupTimerInterrupt+0x38>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a09      	ldr	r2, [pc, #36]	; (800c2a8 <vPortSetupTimerInterrupt+0x3c>)
 800c282:	fba2 2303 	umull	r2, r3, r2, r3
 800c286:	099b      	lsrs	r3, r3, #6
 800c288:	4a08      	ldr	r2, [pc, #32]	; (800c2ac <vPortSetupTimerInterrupt+0x40>)
 800c28a:	3b01      	subs	r3, #1
 800c28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c28e:	4b03      	ldr	r3, [pc, #12]	; (800c29c <vPortSetupTimerInterrupt+0x30>)
 800c290:	2207      	movs	r2, #7
 800c292:	601a      	str	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	46bd      	mov	sp, r7
 800c298:	bc80      	pop	{r7}
 800c29a:	4770      	bx	lr
 800c29c:	e000e010 	.word	0xe000e010
 800c2a0:	e000e018 	.word	0xe000e018
 800c2a4:	20000000 	.word	0x20000000
 800c2a8:	10624dd3 	.word	0x10624dd3
 800c2ac:	e000e014 	.word	0xe000e014

0800c2b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2b6:	f3ef 8305 	mrs	r3, IPSR
 800c2ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b0f      	cmp	r3, #15
 800c2c0:	d914      	bls.n	800c2ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2c2:	4a16      	ldr	r2, [pc, #88]	; (800c31c <vPortValidateInterruptPriority+0x6c>)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2cc:	4b14      	ldr	r3, [pc, #80]	; (800c320 <vPortValidateInterruptPriority+0x70>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	7afa      	ldrb	r2, [r7, #11]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d20a      	bcs.n	800c2ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	607b      	str	r3, [r7, #4]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	; (800c324 <vPortValidateInterruptPriority+0x74>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <vPortValidateInterruptPriority+0x78>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d90a      	bls.n	800c312 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	603b      	str	r3, [r7, #0]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <vPortValidateInterruptPriority+0x60>
	}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	bc80      	pop	{r7}
 800c31a:	4770      	bx	lr
 800c31c:	e000e3f0 	.word	0xe000e3f0
 800c320:	20001208 	.word	0x20001208
 800c324:	e000ed0c 	.word	0xe000ed0c
 800c328:	2000120c 	.word	0x2000120c

0800c32c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08a      	sub	sp, #40	; 0x28
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c334:	2300      	movs	r3, #0
 800c336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c338:	f7fe fe20 	bl	800af7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c33c:	4b58      	ldr	r3, [pc, #352]	; (800c4a0 <pvPortMalloc+0x174>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c344:	f000 f910 	bl	800c568 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c348:	4b56      	ldr	r3, [pc, #344]	; (800c4a4 <pvPortMalloc+0x178>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4013      	ands	r3, r2
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 808e 	bne.w	800c472 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d01d      	beq.n	800c398 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c35c:	2208      	movs	r2, #8
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4413      	add	r3, r2
 800c362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d014      	beq.n	800c398 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	3308      	adds	r3, #8
 800c376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <pvPortMalloc+0x6c>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	617b      	str	r3, [r7, #20]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d069      	beq.n	800c472 <pvPortMalloc+0x146>
 800c39e:	4b42      	ldr	r3, [pc, #264]	; (800c4a8 <pvPortMalloc+0x17c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d864      	bhi.n	800c472 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3a8:	4b40      	ldr	r3, [pc, #256]	; (800c4ac <pvPortMalloc+0x180>)
 800c3aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3ac:	4b3f      	ldr	r3, [pc, #252]	; (800c4ac <pvPortMalloc+0x180>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3b2:	e004      	b.n	800c3be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d903      	bls.n	800c3d0 <pvPortMalloc+0xa4>
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1f1      	bne.n	800c3b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3d0:	4b33      	ldr	r3, [pc, #204]	; (800c4a0 <pvPortMalloc+0x174>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d04b      	beq.n	800c472 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2208      	movs	r2, #8
 800c3e0:	4413      	add	r3, r2
 800c3e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	1ad2      	subs	r2, r2, r3
 800c3f4:	2308      	movs	r3, #8
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d91f      	bls.n	800c43c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <pvPortMalloc+0xf8>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	613b      	str	r3, [r7, #16]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	1ad2      	subs	r2, r2, r3
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c436:	69b8      	ldr	r0, [r7, #24]
 800c438:	f000 f8f8 	bl	800c62c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c43c:	4b1a      	ldr	r3, [pc, #104]	; (800c4a8 <pvPortMalloc+0x17c>)
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	4a18      	ldr	r2, [pc, #96]	; (800c4a8 <pvPortMalloc+0x17c>)
 800c448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c44a:	4b17      	ldr	r3, [pc, #92]	; (800c4a8 <pvPortMalloc+0x17c>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	4b18      	ldr	r3, [pc, #96]	; (800c4b0 <pvPortMalloc+0x184>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	429a      	cmp	r2, r3
 800c454:	d203      	bcs.n	800c45e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c456:	4b14      	ldr	r3, [pc, #80]	; (800c4a8 <pvPortMalloc+0x17c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a15      	ldr	r2, [pc, #84]	; (800c4b0 <pvPortMalloc+0x184>)
 800c45c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <pvPortMalloc+0x178>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	431a      	orrs	r2, r3
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c472:	f7fe fd91 	bl	800af98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	f003 0307 	and.w	r3, r3, #7
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00a      	beq.n	800c496 <pvPortMalloc+0x16a>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <pvPortMalloc+0x168>
	return pvReturn;
 800c496:	69fb      	ldr	r3, [r7, #28]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3728      	adds	r7, #40	; 0x28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20001e18 	.word	0x20001e18
 800c4a4:	20001e24 	.word	0x20001e24
 800c4a8:	20001e1c 	.word	0x20001e1c
 800c4ac:	20001e10 	.word	0x20001e10
 800c4b0:	20001e20 	.word	0x20001e20

0800c4b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d048      	beq.n	800c558 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4c6:	2308      	movs	r3, #8
 800c4c8:	425b      	negs	r3, r3
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	4b21      	ldr	r3, [pc, #132]	; (800c560 <vPortFree+0xac>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4013      	ands	r3, r2
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10a      	bne.n	800c4f8 <vPortFree+0x44>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	60fb      	str	r3, [r7, #12]
}
 800c4f4:	bf00      	nop
 800c4f6:	e7fe      	b.n	800c4f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00a      	beq.n	800c516 <vPortFree+0x62>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60bb      	str	r3, [r7, #8]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	4b11      	ldr	r3, [pc, #68]	; (800c560 <vPortFree+0xac>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4013      	ands	r3, r2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d019      	beq.n	800c558 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d115      	bne.n	800c558 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <vPortFree+0xac>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	43db      	mvns	r3, r3
 800c536:	401a      	ands	r2, r3
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c53c:	f7fe fd1e 	bl	800af7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	4b07      	ldr	r3, [pc, #28]	; (800c564 <vPortFree+0xb0>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4413      	add	r3, r2
 800c54a:	4a06      	ldr	r2, [pc, #24]	; (800c564 <vPortFree+0xb0>)
 800c54c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c54e:	6938      	ldr	r0, [r7, #16]
 800c550:	f000 f86c 	bl	800c62c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c554:	f7fe fd20 	bl	800af98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c558:	bf00      	nop
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	20001e24 	.word	0x20001e24
 800c564:	20001e1c 	.word	0x20001e1c

0800c568 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c56e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c572:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c574:	4b27      	ldr	r3, [pc, #156]	; (800c614 <prvHeapInit+0xac>)
 800c576:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00c      	beq.n	800c59c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3307      	adds	r3, #7
 800c586:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	4a1f      	ldr	r2, [pc, #124]	; (800c614 <prvHeapInit+0xac>)
 800c598:	4413      	add	r3, r2
 800c59a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5a0:	4a1d      	ldr	r2, [pc, #116]	; (800c618 <prvHeapInit+0xb0>)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5a6:	4b1c      	ldr	r3, [pc, #112]	; (800c618 <prvHeapInit+0xb0>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5b4:	2208      	movs	r2, #8
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	1a9b      	subs	r3, r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4a15      	ldr	r2, [pc, #84]	; (800c61c <prvHeapInit+0xb4>)
 800c5c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5ca:	4b14      	ldr	r3, [pc, #80]	; (800c61c <prvHeapInit+0xb4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5d2:	4b12      	ldr	r3, [pc, #72]	; (800c61c <prvHeapInit+0xb4>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	1ad2      	subs	r2, r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <prvHeapInit+0xb4>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4a0a      	ldr	r2, [pc, #40]	; (800c620 <prvHeapInit+0xb8>)
 800c5f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	4a09      	ldr	r2, [pc, #36]	; (800c624 <prvHeapInit+0xbc>)
 800c5fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c600:	4b09      	ldr	r3, [pc, #36]	; (800c628 <prvHeapInit+0xc0>)
 800c602:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c606:	601a      	str	r2, [r3, #0]
}
 800c608:	bf00      	nop
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bc80      	pop	{r7}
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20001210 	.word	0x20001210
 800c618:	20001e10 	.word	0x20001e10
 800c61c:	20001e18 	.word	0x20001e18
 800c620:	20001e20 	.word	0x20001e20
 800c624:	20001e1c 	.word	0x20001e1c
 800c628:	20001e24 	.word	0x20001e24

0800c62c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c634:	4b27      	ldr	r3, [pc, #156]	; (800c6d4 <prvInsertBlockIntoFreeList+0xa8>)
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e002      	b.n	800c640 <prvInsertBlockIntoFreeList+0x14>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	429a      	cmp	r2, r3
 800c648:	d8f7      	bhi.n	800c63a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	4413      	add	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d108      	bne.n	800c66e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	441a      	add	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d118      	bne.n	800c6b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4b14      	ldr	r3, [pc, #80]	; (800c6d8 <prvInsertBlockIntoFreeList+0xac>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d00d      	beq.n	800c6aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	441a      	add	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	e008      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6aa:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <prvInsertBlockIntoFreeList+0xac>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	e003      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d002      	beq.n	800c6ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bc80      	pop	{r7}
 800c6d2:	4770      	bx	lr
 800c6d4:	20001e10 	.word	0x20001e10
 800c6d8:	20001e18 	.word	0x20001e18

0800c6dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4912      	ldr	r1, [pc, #72]	; (800c72c <MX_USB_DEVICE_Init+0x50>)
 800c6e4:	4812      	ldr	r0, [pc, #72]	; (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c6e6:	f7fc fa72 	bl	8008bce <USBD_Init>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6f0:	f7f5 fafc 	bl	8001cec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6f4:	490f      	ldr	r1, [pc, #60]	; (800c734 <MX_USB_DEVICE_Init+0x58>)
 800c6f6:	480e      	ldr	r0, [pc, #56]	; (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c6f8:	f7fc fa94 	bl	8008c24 <USBD_RegisterClass>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c702:	f7f5 faf3 	bl	8001cec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c706:	490c      	ldr	r1, [pc, #48]	; (800c738 <MX_USB_DEVICE_Init+0x5c>)
 800c708:	4809      	ldr	r0, [pc, #36]	; (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c70a:	f7fc f9c5 	bl	8008a98 <USBD_CDC_RegisterInterface>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c714:	f7f5 faea 	bl	8001cec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c718:	4805      	ldr	r0, [pc, #20]	; (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c71a:	f7fc fa9c 	bl	8008c56 <USBD_Start>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c724:	f7f5 fae2 	bl	8001cec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20000148 	.word	0x20000148
 800c730:	20002548 	.word	0x20002548
 800c734:	20000030 	.word	0x20000030
 800c738:	20000138 	.word	0x20000138

0800c73c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c740:	2200      	movs	r2, #0
 800c742:	4905      	ldr	r1, [pc, #20]	; (800c758 <CDC_Init_FS+0x1c>)
 800c744:	4805      	ldr	r0, [pc, #20]	; (800c75c <CDC_Init_FS+0x20>)
 800c746:	f7fc f9bd 	bl	8008ac4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c74a:	4905      	ldr	r1, [pc, #20]	; (800c760 <CDC_Init_FS+0x24>)
 800c74c:	4803      	ldr	r0, [pc, #12]	; (800c75c <CDC_Init_FS+0x20>)
 800c74e:	f7fc f9d2 	bl	8008af6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c752:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c754:	4618      	mov	r0, r3
 800c756:	bd80      	pop	{r7, pc}
 800c758:	20002bcc 	.word	0x20002bcc
 800c75c:	20002548 	.word	0x20002548
 800c760:	200027e4 	.word	0x200027e4

0800c764 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c764:	b480      	push	{r7}
 800c766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c768:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr
	...

0800c774 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
 800c780:	4613      	mov	r3, r2
 800c782:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b23      	cmp	r3, #35	; 0x23
 800c788:	d84a      	bhi.n	800c820 <CDC_Control_FS+0xac>
 800c78a:	a201      	add	r2, pc, #4	; (adr r2, 800c790 <CDC_Control_FS+0x1c>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c821 	.word	0x0800c821
 800c794:	0800c821 	.word	0x0800c821
 800c798:	0800c821 	.word	0x0800c821
 800c79c:	0800c821 	.word	0x0800c821
 800c7a0:	0800c821 	.word	0x0800c821
 800c7a4:	0800c821 	.word	0x0800c821
 800c7a8:	0800c821 	.word	0x0800c821
 800c7ac:	0800c821 	.word	0x0800c821
 800c7b0:	0800c821 	.word	0x0800c821
 800c7b4:	0800c821 	.word	0x0800c821
 800c7b8:	0800c821 	.word	0x0800c821
 800c7bc:	0800c821 	.word	0x0800c821
 800c7c0:	0800c821 	.word	0x0800c821
 800c7c4:	0800c821 	.word	0x0800c821
 800c7c8:	0800c821 	.word	0x0800c821
 800c7cc:	0800c821 	.word	0x0800c821
 800c7d0:	0800c821 	.word	0x0800c821
 800c7d4:	0800c821 	.word	0x0800c821
 800c7d8:	0800c821 	.word	0x0800c821
 800c7dc:	0800c821 	.word	0x0800c821
 800c7e0:	0800c821 	.word	0x0800c821
 800c7e4:	0800c821 	.word	0x0800c821
 800c7e8:	0800c821 	.word	0x0800c821
 800c7ec:	0800c821 	.word	0x0800c821
 800c7f0:	0800c821 	.word	0x0800c821
 800c7f4:	0800c821 	.word	0x0800c821
 800c7f8:	0800c821 	.word	0x0800c821
 800c7fc:	0800c821 	.word	0x0800c821
 800c800:	0800c821 	.word	0x0800c821
 800c804:	0800c821 	.word	0x0800c821
 800c808:	0800c821 	.word	0x0800c821
 800c80c:	0800c821 	.word	0x0800c821
 800c810:	0800c821 	.word	0x0800c821
 800c814:	0800c821 	.word	0x0800c821
 800c818:	0800c821 	.word	0x0800c821
 800c81c:	0800c821 	.word	0x0800c821
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c820:	bf00      	nop
  }

  return (USBD_OK);
 800c822:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	4814      	ldr	r0, [pc, #80]	; (800c890 <CDC_Receive_FS+0x60>)
 800c83e:	f7fc f95a 	bl	8008af6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c842:	4813      	ldr	r0, [pc, #76]	; (800c890 <CDC_Receive_FS+0x60>)
 800c844:	f7fc f999 	bl	8008b7a <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	73fb      	strb	r3, [r7, #15]

  memcpy(buffer+length, Buf, len);
 800c84e:	4b11      	ldr	r3, [pc, #68]	; (800c894 <CDC_Receive_FS+0x64>)
 800c850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c854:	461a      	mov	r2, r3
 800c856:	4b10      	ldr	r3, [pc, #64]	; (800c898 <CDC_Receive_FS+0x68>)
 800c858:	4413      	add	r3, r2
 800c85a:	7bfa      	ldrb	r2, [r7, #15]
 800c85c:	6879      	ldr	r1, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fe40 	bl	800d4e4 <memcpy>
  memset(Buf, '\0', 64);
 800c864:	2240      	movs	r2, #64	; 0x40
 800c866:	2100      	movs	r1, #0
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fe63 	bl	800d534 <memset>

  length += len;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	b29a      	uxth	r2, r3
 800c872:	4b08      	ldr	r3, [pc, #32]	; (800c894 <CDC_Receive_FS+0x64>)
 800c874:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	4413      	add	r3, r2
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	b21a      	sxth	r2, r3
 800c880:	4b04      	ldr	r3, [pc, #16]	; (800c894 <CDC_Receive_FS+0x64>)
 800c882:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c884:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20002548 	.word	0x20002548
 800c894:	20001e28 	.word	0x20001e28
 800c898:	20002fb4 	.word	0x20002fb4

0800c89c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c8ac:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <CDC_Transmit_FS+0x48>)
 800c8ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e00b      	b.n	800c8da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c8c2:	887b      	ldrh	r3, [r7, #2]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	4806      	ldr	r0, [pc, #24]	; (800c8e4 <CDC_Transmit_FS+0x48>)
 800c8ca:	f7fc f8fb 	bl	8008ac4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c8ce:	4805      	ldr	r0, [pc, #20]	; (800c8e4 <CDC_Transmit_FS+0x48>)
 800c8d0:	f7fc f924 	bl	8008b1c <USBD_CDC_TransmitPacket>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20002548 	.word	0x20002548

0800c8e8 <CDC_ReadLine>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadLine(uint8_t* Buf)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
	memset(Buf, '\0', 64);
 800c8f0:	2240      	movs	r2, #64	; 0x40
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fe1d 	bl	800d534 <memset>

	while(buffer[length-1] != '\n') {
 800c8fa:	bf00      	nop
 800c8fc:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <CDC_ReadLine+0x48>)
 800c8fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c902:	3b01      	subs	r3, #1
 800c904:	4a0b      	ldr	r2, [pc, #44]	; (800c934 <CDC_ReadLine+0x4c>)
 800c906:	5cd3      	ldrb	r3, [r2, r3]
 800c908:	2b0a      	cmp	r3, #10
 800c90a:	d001      	beq.n	800c910 <CDC_ReadLine+0x28>
		return 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	e00b      	b.n	800c928 <CDC_ReadLine+0x40>
	}

	memcpy(Buf, buffer, length*sizeof(uint8_t));
 800c910:	4b07      	ldr	r3, [pc, #28]	; (800c930 <CDC_ReadLine+0x48>)
 800c912:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c916:	461a      	mov	r2, r3
 800c918:	4906      	ldr	r1, [pc, #24]	; (800c934 <CDC_ReadLine+0x4c>)
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fde2 	bl	800d4e4 <memcpy>
	return length;
 800c920:	4b03      	ldr	r3, [pc, #12]	; (800c930 <CDC_ReadLine+0x48>)
 800c922:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c926:	b2db      	uxtb	r3, r3
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20001e28 	.word	0x20001e28
 800c934:	20002fb4 	.word	0x20002fb4

0800c938 <CDC_ClearBuffer>:
	return length;
}


uint8_t CDC_ClearBuffer()
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
	memset(buffer, '\0', 64);
 800c93c:	2240      	movs	r2, #64	; 0x40
 800c93e:	2100      	movs	r1, #0
 800c940:	4804      	ldr	r0, [pc, #16]	; (800c954 <CDC_ClearBuffer+0x1c>)
 800c942:	f000 fdf7 	bl	800d534 <memset>
	length = 0;
 800c946:	4b04      	ldr	r3, [pc, #16]	; (800c958 <CDC_ClearBuffer+0x20>)
 800c948:	2200      	movs	r2, #0
 800c94a:	801a      	strh	r2, [r3, #0]
}
 800c94c:	bf00      	nop
 800c94e:	4618      	mov	r0, r3
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20002fb4 	.word	0x20002fb4
 800c958:	20001e28 	.word	0x20001e28

0800c95c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	6039      	str	r1, [r7, #0]
 800c966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2212      	movs	r2, #18
 800c96c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c96e:	4b03      	ldr	r3, [pc, #12]	; (800c97c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	bc80      	pop	{r7}
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	20000164 	.word	0x20000164

0800c980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	6039      	str	r1, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2204      	movs	r2, #4
 800c990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c992:	4b03      	ldr	r3, [pc, #12]	; (800c9a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c994:	4618      	mov	r0, r3
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	20000178 	.word	0x20000178

0800c9a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	6039      	str	r1, [r7, #0]
 800c9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d105      	bne.n	800c9c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	4907      	ldr	r1, [pc, #28]	; (800c9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9ba:	4808      	ldr	r0, [pc, #32]	; (800c9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c9bc:	f7fd f84e 	bl	8009a5c <USBD_GetString>
 800c9c0:	e004      	b.n	800c9cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	4904      	ldr	r1, [pc, #16]	; (800c9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9c6:	4805      	ldr	r0, [pc, #20]	; (800c9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c9c8:	f7fd f848 	bl	8009a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9cc:	4b02      	ldr	r3, [pc, #8]	; (800c9d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20002ff4 	.word	0x20002ff4
 800c9dc:	0800d888 	.word	0x0800d888

0800c9e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	6039      	str	r1, [r7, #0]
 800c9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	4904      	ldr	r1, [pc, #16]	; (800ca00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c9f0:	4804      	ldr	r0, [pc, #16]	; (800ca04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c9f2:	f7fd f833 	bl	8009a5c <USBD_GetString>
  return USBD_StrDesc;
 800c9f6:	4b02      	ldr	r3, [pc, #8]	; (800ca00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20002ff4 	.word	0x20002ff4
 800ca04:	0800d8a0 	.word	0x0800d8a0

0800ca08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	221a      	movs	r2, #26
 800ca18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca1a:	f000 f843 	bl	800caa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca1e:	4b02      	ldr	r3, [pc, #8]	; (800ca28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	2000017c 	.word	0x2000017c

0800ca2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	6039      	str	r1, [r7, #0]
 800ca36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d105      	bne.n	800ca4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	4907      	ldr	r1, [pc, #28]	; (800ca60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca42:	4808      	ldr	r0, [pc, #32]	; (800ca64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca44:	f7fd f80a 	bl	8009a5c <USBD_GetString>
 800ca48:	e004      	b.n	800ca54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	4904      	ldr	r1, [pc, #16]	; (800ca60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca4e:	4805      	ldr	r0, [pc, #20]	; (800ca64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca50:	f7fd f804 	bl	8009a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca54:	4b02      	ldr	r3, [pc, #8]	; (800ca60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20002ff4 	.word	0x20002ff4
 800ca64:	0800d8b4 	.word	0x0800d8b4

0800ca68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	4603      	mov	r3, r0
 800ca70:	6039      	str	r1, [r7, #0]
 800ca72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d105      	bne.n	800ca86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	4907      	ldr	r1, [pc, #28]	; (800ca9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca7e:	4808      	ldr	r0, [pc, #32]	; (800caa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca80:	f7fc ffec 	bl	8009a5c <USBD_GetString>
 800ca84:	e004      	b.n	800ca90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	4904      	ldr	r1, [pc, #16]	; (800ca9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca8a:	4805      	ldr	r0, [pc, #20]	; (800caa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca8c:	f7fc ffe6 	bl	8009a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca90:	4b02      	ldr	r3, [pc, #8]	; (800ca9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	20002ff4 	.word	0x20002ff4
 800caa0:	0800d8c0 	.word	0x0800d8c0

0800caa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caaa:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <Get_SerialNum+0x44>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cab0:	4b0e      	ldr	r3, [pc, #56]	; (800caec <Get_SerialNum+0x48>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cab6:	4b0e      	ldr	r3, [pc, #56]	; (800caf0 <Get_SerialNum+0x4c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d009      	beq.n	800cade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800caca:	2208      	movs	r2, #8
 800cacc:	4909      	ldr	r1, [pc, #36]	; (800caf4 <Get_SerialNum+0x50>)
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 f814 	bl	800cafc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cad4:	2204      	movs	r2, #4
 800cad6:	4908      	ldr	r1, [pc, #32]	; (800caf8 <Get_SerialNum+0x54>)
 800cad8:	68b8      	ldr	r0, [r7, #8]
 800cada:	f000 f80f 	bl	800cafc <IntToUnicode>
  }
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	1ff80050 	.word	0x1ff80050
 800caec:	1ff80054 	.word	0x1ff80054
 800caf0:	1ff80058 	.word	0x1ff80058
 800caf4:	2000017e 	.word	0x2000017e
 800caf8:	2000018e 	.word	0x2000018e

0800cafc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]
 800cb12:	e027      	b.n	800cb64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	0f1b      	lsrs	r3, r3, #28
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d80b      	bhi.n	800cb34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	0f1b      	lsrs	r3, r3, #28
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4619      	mov	r1, r3
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3230      	adds	r2, #48	; 0x30
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	e00a      	b.n	800cb4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	0f1b      	lsrs	r3, r3, #28
 800cb38:	b2da      	uxtb	r2, r3
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4619      	mov	r1, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	440b      	add	r3, r1
 800cb44:	3237      	adds	r2, #55	; 0x37
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	3301      	adds	r3, #1
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	4413      	add	r3, r2
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	3301      	adds	r3, #1
 800cb62:	75fb      	strb	r3, [r7, #23]
 800cb64:	7dfa      	ldrb	r2, [r7, #23]
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d3d3      	bcc.n	800cb14 <IntToUnicode+0x18>
  }
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	371c      	adds	r7, #28
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bc80      	pop	{r7}
 800cb76:	4770      	bx	lr

0800cb78 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d106      	bne.n	800cb98 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <HAL_PCDEx_SetConnectionState+0x38>)
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	4a08      	ldr	r2, [pc, #32]	; (800cbb0 <HAL_PCDEx_SetConnectionState+0x38>)
 800cb90:	f043 0301 	orr.w	r3, r3, #1
 800cb94:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800cb96:	e005      	b.n	800cba4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800cb98:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <HAL_PCDEx_SetConnectionState+0x38>)
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	4a04      	ldr	r2, [pc, #16]	; (800cbb0 <HAL_PCDEx_SetConnectionState+0x38>)
 800cb9e:	f023 0301 	bic.w	r3, r3, #1
 800cba2:	6053      	str	r3, [r2, #4]
}
 800cba4:	bf00      	nop
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bc80      	pop	{r7}
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	40010000 	.word	0x40010000

0800cbb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a0d      	ldr	r2, [pc, #52]	; (800cbf8 <HAL_PCD_MspInit+0x44>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d113      	bne.n	800cbee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <HAL_PCD_MspInit+0x48>)
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	4a0c      	ldr	r2, [pc, #48]	; (800cbfc <HAL_PCD_MspInit+0x48>)
 800cbcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbd0:	6253      	str	r3, [r2, #36]	; 0x24
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <HAL_PCD_MspInit+0x48>)
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800cbde:	2200      	movs	r2, #0
 800cbe0:	2105      	movs	r1, #5
 800cbe2:	2014      	movs	r0, #20
 800cbe4:	f7f5 ff79 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cbe8:	2014      	movs	r0, #20
 800cbea:	f7f5 ff92 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cbee:	bf00      	nop
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	40005c00 	.word	0x40005c00
 800cbfc:	40023800 	.word	0x40023800

0800cc00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cc14:	4619      	mov	r1, r3
 800cc16:	4610      	mov	r0, r2
 800cc18:	f7fc f865 	bl	8008ce6 <USBD_LL_SetupStage>
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	6879      	ldr	r1, [r7, #4]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	440b      	add	r3, r1
 800cc44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f7fc f897 	bl	8008d80 <USBD_LL_DataOutStage>
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cc6c:	78fa      	ldrb	r2, [r7, #3]
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4613      	mov	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	440b      	add	r3, r1
 800cc7a:	333c      	adds	r3, #60	; 0x3c
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	78fb      	ldrb	r3, [r7, #3]
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7fc f8ee 	bl	8008e62 <USBD_LL_DataInStage>
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fc f9f9 	bl	8009094 <USBD_LL_SOF>
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b084      	sub	sp, #16
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d001      	beq.n	800ccc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ccbe:	f7f5 f815 	bl	8001cec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ccc8:	7bfa      	ldrb	r2, [r7, #15]
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fc f9ae 	bl	800902e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fc f967 	bl	8008fac <USBD_LL_Reset>
}
 800ccde:	bf00      	nop
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fc f9a8 	bl	800904c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd04:	4b04      	ldr	r3, [pc, #16]	; (800cd18 <HAL_PCD_SuspendCallback+0x30>)
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	4a03      	ldr	r2, [pc, #12]	; (800cd18 <HAL_PCD_SuspendCallback+0x30>)
 800cd0a:	f043 0306 	orr.w	r3, r3, #6
 800cd0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed00 	.word	0xe000ed00

0800cd1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fc f9a2 	bl	8009074 <USBD_LL_Resume>
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cd40:	4a28      	ldr	r2, [pc, #160]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a26      	ldr	r2, [pc, #152]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800cd50:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd52:	4a25      	ldr	r2, [pc, #148]	; (800cde8 <USBD_LL_Init+0xb0>)
 800cd54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cd56:	4b23      	ldr	r3, [pc, #140]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd58:	2208      	movs	r2, #8
 800cd5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd5c:	4b21      	ldr	r3, [pc, #132]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd5e:	2202      	movs	r2, #2
 800cd60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd62:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd64:	2202      	movs	r2, #2
 800cd66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd68:	4b1e      	ldr	r3, [pc, #120]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd6e:	4b1d      	ldr	r3, [pc, #116]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cd74:	481b      	ldr	r0, [pc, #108]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd76:	f7f6 fa27 	bl	80031c8 <HAL_PCD_Init>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cd80:	f7f4 ffb4 	bl	8001cec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cd8a:	2318      	movs	r3, #24
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2100      	movs	r1, #0
 800cd90:	f7f7 fe04 	bl	800499c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cd9a:	2358      	movs	r3, #88	; 0x58
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2180      	movs	r1, #128	; 0x80
 800cda0:	f7f7 fdfc 	bl	800499c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cdaa:	23c0      	movs	r3, #192	; 0xc0
 800cdac:	2200      	movs	r2, #0
 800cdae:	2181      	movs	r1, #129	; 0x81
 800cdb0:	f7f7 fdf4 	bl	800499c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cdba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f7f7 fdeb 	bl	800499c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cdcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2182      	movs	r1, #130	; 0x82
 800cdd4:	f7f7 fde2 	bl	800499c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	200031f4 	.word	0x200031f4
 800cde8:	40005c00 	.word	0x40005c00

0800cdec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f6 fabe 	bl	8003384 <HAL_PCD_Start>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 f944 	bl	800d09c <USBD_Get_USB_Status>
 800ce14:	4603      	mov	r3, r0
 800ce16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	4608      	mov	r0, r1
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	70fb      	strb	r3, [r7, #3]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70bb      	strb	r3, [r7, #2]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ce4a:	78bb      	ldrb	r3, [r7, #2]
 800ce4c:	883a      	ldrh	r2, [r7, #0]
 800ce4e:	78f9      	ldrb	r1, [r7, #3]
 800ce50:	f7f6 fbda 	bl	8003608 <HAL_PCD_EP_Open>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 f91e 	bl	800d09c <USBD_Get_USB_Status>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ce88:	78fa      	ldrb	r2, [r7, #3]
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f6 fc21 	bl	80036d4 <HAL_PCD_EP_Close>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 f8ff 	bl	800d09c <USBD_Get_USB_Status>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	4611      	mov	r1, r2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f6 fce1 	bl	8003892 <HAL_PCD_EP_SetStall>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f8e0 	bl	800d09c <USBD_Get_USB_Status>
 800cedc:	4603      	mov	r3, r0
 800cede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f6 fd14 	bl	8003936 <HAL_PCD_EP_ClrStall>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f8c1 	bl	800d09c <USBD_Get_USB_Status>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	da0c      	bge.n	800cf5e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4a:	68f9      	ldr	r1, [r7, #12]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	440b      	add	r3, r1
 800cf58:	3302      	adds	r3, #2
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	e00b      	b.n	800cf76 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf5e:	78fb      	ldrb	r3, [r7, #3]
 800cf60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf64:	68f9      	ldr	r1, [r7, #12]
 800cf66:	4613      	mov	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	440b      	add	r3, r1
 800cf70:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cf74:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bc80      	pop	{r7}
 800cf7e:	4770      	bx	lr

0800cf80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cf9a:	78fa      	ldrb	r2, [r7, #3]
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7f6 fb0d 	bl	80035be <HAL_PCD_SetAddress>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 f876 	bl	800d09c <USBD_Get_USB_Status>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b086      	sub	sp, #24
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	60f8      	str	r0, [r7, #12]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	460b      	mov	r3, r1
 800cfcc:	72fb      	strb	r3, [r7, #11]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cfe0:	893b      	ldrh	r3, [r7, #8]
 800cfe2:	7af9      	ldrb	r1, [r7, #11]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	f7f6 fc11 	bl	800380c <HAL_PCD_EP_Transmit>
 800cfea:	4603      	mov	r3, r0
 800cfec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfee:	7dfb      	ldrb	r3, [r7, #23]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 f853 	bl	800d09c <USBD_Get_USB_Status>
 800cff6:	4603      	mov	r3, r0
 800cff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cffa:	7dbb      	ldrb	r3, [r7, #22]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	607a      	str	r2, [r7, #4]
 800d00e:	461a      	mov	r2, r3
 800d010:	460b      	mov	r3, r1
 800d012:	72fb      	strb	r3, [r7, #11]
 800d014:	4613      	mov	r3, r2
 800d016:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d026:	893b      	ldrh	r3, [r7, #8]
 800d028:	7af9      	ldrb	r1, [r7, #11]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	f7f6 fb9a 	bl	8003764 <HAL_PCD_EP_Receive>
 800d030:	4603      	mov	r3, r0
 800d032:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	4618      	mov	r0, r3
 800d038:	f000 f830 	bl	800d09c <USBD_Get_USB_Status>
 800d03c:	4603      	mov	r3, r0
 800d03e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d040:	7dbb      	ldrb	r3, [r7, #22]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3718      	adds	r7, #24
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b082      	sub	sp, #8
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d05c:	78fa      	ldrb	r2, [r7, #3]
 800d05e:	4611      	mov	r1, r2
 800d060:	4618      	mov	r0, r3
 800d062:	f7f6 fbbc 	bl	80037de <HAL_PCD_EP_GetRxCount>
 800d066:	4603      	mov	r3, r0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <USBD_static_malloc+0x14>)
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	bc80      	pop	{r7}
 800d082:	4770      	bx	lr
 800d084:	20001e2c 	.word	0x20001e2c

0800d088 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]

}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	bc80      	pop	{r7}
 800d098:	4770      	bx	lr
	...

0800d09c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	2b03      	cmp	r3, #3
 800d0ae:	d817      	bhi.n	800d0e0 <USBD_Get_USB_Status+0x44>
 800d0b0:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <USBD_Get_USB_Status+0x1c>)
 800d0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b6:	bf00      	nop
 800d0b8:	0800d0c9 	.word	0x0800d0c9
 800d0bc:	0800d0cf 	.word	0x0800d0cf
 800d0c0:	0800d0d5 	.word	0x0800d0d5
 800d0c4:	0800d0db 	.word	0x0800d0db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d0cc:	e00b      	b.n	800d0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0d2:	e008      	b.n	800d0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0d8:	e005      	b.n	800d0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0da:	2302      	movs	r3, #2
 800d0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d0de:	e002      	b.n	800d0e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e4:	bf00      	nop
  }
  return usb_status;
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bc80      	pop	{r7}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <_ZdlPv>:
 800d0f4:	f000 b9ee 	b.w	800d4d4 <free>

0800d0f8 <_ZdlPvj>:
 800d0f8:	f7ff bffc 	b.w	800d0f4 <_ZdlPv>

0800d0fc <_Znwj>:
 800d0fc:	2801      	cmp	r0, #1
 800d0fe:	bf38      	it	cc
 800d100:	2001      	movcc	r0, #1
 800d102:	b510      	push	{r4, lr}
 800d104:	4604      	mov	r4, r0
 800d106:	4620      	mov	r0, r4
 800d108:	f000 f9dc 	bl	800d4c4 <malloc>
 800d10c:	b930      	cbnz	r0, 800d11c <_Znwj+0x20>
 800d10e:	f000 f997 	bl	800d440 <_ZSt15get_new_handlerv>
 800d112:	b908      	cbnz	r0, 800d118 <_Znwj+0x1c>
 800d114:	f000 f99c 	bl	800d450 <abort>
 800d118:	4780      	blx	r0
 800d11a:	e7f4      	b.n	800d106 <_Znwj+0xa>
 800d11c:	bd10      	pop	{r4, pc}

0800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800d11e:	68c3      	ldr	r3, [r0, #12]
 800d120:	b510      	push	{r4, lr}
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	60c2      	str	r2, [r0, #12]
 800d126:	b102      	cbz	r2, 800d12a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800d128:	6050      	str	r0, [r2, #4]
 800d12a:	6842      	ldr	r2, [r0, #4]
 800d12c:	605a      	str	r2, [r3, #4]
 800d12e:	680c      	ldr	r4, [r1, #0]
 800d130:	4284      	cmp	r4, r0
 800d132:	d103      	bne.n	800d13c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800d134:	600b      	str	r3, [r1, #0]
 800d136:	6098      	str	r0, [r3, #8]
 800d138:	6043      	str	r3, [r0, #4]
 800d13a:	bd10      	pop	{r4, pc}
 800d13c:	6891      	ldr	r1, [r2, #8]
 800d13e:	4281      	cmp	r1, r0
 800d140:	bf0c      	ite	eq
 800d142:	6093      	streq	r3, [r2, #8]
 800d144:	60d3      	strne	r3, [r2, #12]
 800d146:	e7f6      	b.n	800d136 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800d148:	6883      	ldr	r3, [r0, #8]
 800d14a:	b510      	push	{r4, lr}
 800d14c:	68da      	ldr	r2, [r3, #12]
 800d14e:	6082      	str	r2, [r0, #8]
 800d150:	b102      	cbz	r2, 800d154 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800d152:	6050      	str	r0, [r2, #4]
 800d154:	6842      	ldr	r2, [r0, #4]
 800d156:	605a      	str	r2, [r3, #4]
 800d158:	680c      	ldr	r4, [r1, #0]
 800d15a:	4284      	cmp	r4, r0
 800d15c:	d103      	bne.n	800d166 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800d15e:	600b      	str	r3, [r1, #0]
 800d160:	60d8      	str	r0, [r3, #12]
 800d162:	6043      	str	r3, [r0, #4]
 800d164:	bd10      	pop	{r4, pc}
 800d166:	68d1      	ldr	r1, [r2, #12]
 800d168:	4281      	cmp	r1, r0
 800d16a:	bf0c      	ite	eq
 800d16c:	60d3      	streq	r3, [r2, #12]
 800d16e:	6093      	strne	r3, [r2, #8]
 800d170:	e7f6      	b.n	800d160 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800d172 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800d172:	7802      	ldrb	r2, [r0, #0]
 800d174:	4603      	mov	r3, r0
 800d176:	b92a      	cbnz	r2, 800d184 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800d178:	6842      	ldr	r2, [r0, #4]
 800d17a:	6852      	ldr	r2, [r2, #4]
 800d17c:	4282      	cmp	r2, r0
 800d17e:	d101      	bne.n	800d184 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800d180:	68d0      	ldr	r0, [r2, #12]
 800d182:	4770      	bx	lr
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	b122      	cbz	r2, 800d192 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800d188:	4610      	mov	r0, r2
 800d18a:	68d2      	ldr	r2, [r2, #12]
 800d18c:	2a00      	cmp	r2, #0
 800d18e:	d1fb      	bne.n	800d188 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800d190:	4770      	bx	lr
 800d192:	6858      	ldr	r0, [r3, #4]
 800d194:	6882      	ldr	r2, [r0, #8]
 800d196:	429a      	cmp	r2, r3
 800d198:	d102      	bne.n	800d1a0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 800d19a:	4603      	mov	r3, r0
 800d19c:	6840      	ldr	r0, [r0, #4]
 800d19e:	e7f9      	b.n	800d194 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 800d1a0:	4770      	bx	lr

0800d1a2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800d1a2:	68c3      	ldr	r3, [r0, #12]
 800d1a4:	b123      	cbz	r3, 800d1b0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1fb      	bne.n	800d1a6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800d1ae:	4770      	bx	lr
 800d1b0:	6843      	ldr	r3, [r0, #4]
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	4282      	cmp	r2, r0
 800d1b6:	d102      	bne.n	800d1be <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	e7f9      	b.n	800d1b2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800d1be:	68c2      	ldr	r2, [r0, #12]
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	bf18      	it	ne
 800d1c4:	4618      	movne	r0, r3
 800d1c6:	4770      	bx	lr

0800d1c8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800d1c8:	f7ff bfd3 	b.w	800d172 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800d1cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	461e      	mov	r6, r3
 800d1d2:	f103 0804 	add.w	r8, r3, #4
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800d1de:	604a      	str	r2, [r1, #4]
 800d1e0:	700b      	strb	r3, [r1, #0]
 800d1e2:	b300      	cbz	r0, 800d226 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 800d1e4:	4296      	cmp	r6, r2
 800d1e6:	6091      	str	r1, [r2, #8]
 800d1e8:	d118      	bne.n	800d21c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800d1ea:	6071      	str	r1, [r6, #4]
 800d1ec:	60f4      	str	r4, [r6, #12]
 800d1ee:	2701      	movs	r7, #1
 800d1f0:	f04f 0900 	mov.w	r9, #0
 800d1f4:	6873      	ldr	r3, [r6, #4]
 800d1f6:	42a3      	cmp	r3, r4
 800d1f8:	d03f      	beq.n	800d27a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800d1fa:	6860      	ldr	r0, [r4, #4]
 800d1fc:	7802      	ldrb	r2, [r0, #0]
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	d13c      	bne.n	800d27c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 800d202:	6845      	ldr	r5, [r0, #4]
 800d204:	68ab      	ldr	r3, [r5, #8]
 800d206:	4298      	cmp	r0, r3
 800d208:	d123      	bne.n	800d252 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800d20a:	68eb      	ldr	r3, [r5, #12]
 800d20c:	b183      	cbz	r3, 800d230 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800d20e:	781a      	ldrb	r2, [r3, #0]
 800d210:	b972      	cbnz	r2, 800d230 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800d212:	7007      	strb	r7, [r0, #0]
 800d214:	701f      	strb	r7, [r3, #0]
 800d216:	702a      	strb	r2, [r5, #0]
 800d218:	462c      	mov	r4, r5
 800d21a:	e7eb      	b.n	800d1f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800d21c:	68b3      	ldr	r3, [r6, #8]
 800d21e:	4293      	cmp	r3, r2
 800d220:	d1e5      	bne.n	800d1ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d222:	60b1      	str	r1, [r6, #8]
 800d224:	e7e3      	b.n	800d1ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d226:	60d1      	str	r1, [r2, #12]
 800d228:	68f3      	ldr	r3, [r6, #12]
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d1df      	bne.n	800d1ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d22e:	e7dd      	b.n	800d1ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800d230:	68c3      	ldr	r3, [r0, #12]
 800d232:	42a3      	cmp	r3, r4
 800d234:	d103      	bne.n	800d23e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800d236:	4641      	mov	r1, r8
 800d238:	f7ff ff71 	bl	800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d23c:	4604      	mov	r4, r0
 800d23e:	6863      	ldr	r3, [r4, #4]
 800d240:	4641      	mov	r1, r8
 800d242:	701f      	strb	r7, [r3, #0]
 800d244:	4628      	mov	r0, r5
 800d246:	f885 9000 	strb.w	r9, [r5]
 800d24a:	f7ff ff7d 	bl	800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d24e:	4625      	mov	r5, r4
 800d250:	e7e2      	b.n	800d218 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 800d252:	b113      	cbz	r3, 800d25a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 800d254:	781a      	ldrb	r2, [r3, #0]
 800d256:	2a00      	cmp	r2, #0
 800d258:	d0db      	beq.n	800d212 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800d25a:	6883      	ldr	r3, [r0, #8]
 800d25c:	42a3      	cmp	r3, r4
 800d25e:	d103      	bne.n	800d268 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800d260:	4641      	mov	r1, r8
 800d262:	f7ff ff71 	bl	800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d266:	4604      	mov	r4, r0
 800d268:	6863      	ldr	r3, [r4, #4]
 800d26a:	4641      	mov	r1, r8
 800d26c:	701f      	strb	r7, [r3, #0]
 800d26e:	4628      	mov	r0, r5
 800d270:	f885 9000 	strb.w	r9, [r5]
 800d274:	f7ff ff53 	bl	800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d278:	e7e9      	b.n	800d24e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800d27a:	4623      	mov	r3, r4
 800d27c:	2201      	movs	r2, #1
 800d27e:	701a      	strb	r2, [r3, #0]
 800d280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d284 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 800d284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d288:	460f      	mov	r7, r1
 800d28a:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 800d28e:	4604      	mov	r4, r0
 800d290:	2e00      	cmp	r6, #0
 800d292:	d03e      	beq.n	800d312 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 800d294:	2900      	cmp	r1, #0
 800d296:	d03d      	beq.n	800d314 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800d298:	460a      	mov	r2, r1
 800d29a:	4613      	mov	r3, r2
 800d29c:	6892      	ldr	r2, [r2, #8]
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d1fb      	bne.n	800d29a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 800d2a2:	42a3      	cmp	r3, r4
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	d04b      	beq.n	800d340 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	6073      	str	r3, [r6, #4]
 800d2ac:	609e      	str	r6, [r3, #8]
 800d2ae:	d027      	beq.n	800d300 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 800d2b0:	685d      	ldr	r5, [r3, #4]
 800d2b2:	b102      	cbz	r2, 800d2b6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 800d2b4:	6055      	str	r5, [r2, #4]
 800d2b6:	6858      	ldr	r0, [r3, #4]
 800d2b8:	6082      	str	r2, [r0, #8]
 800d2ba:	60d9      	str	r1, [r3, #12]
 800d2bc:	68e1      	ldr	r1, [r4, #12]
 800d2be:	604b      	str	r3, [r1, #4]
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	42a1      	cmp	r1, r4
 800d2c4:	d11e      	bne.n	800d304 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 800d2c6:	607b      	str	r3, [r7, #4]
 800d2c8:	4616      	mov	r6, r2
 800d2ca:	6861      	ldr	r1, [r4, #4]
 800d2cc:	7820      	ldrb	r0, [r4, #0]
 800d2ce:	6059      	str	r1, [r3, #4]
 800d2d0:	7819      	ldrb	r1, [r3, #0]
 800d2d2:	7018      	strb	r0, [r3, #0]
 800d2d4:	7021      	strb	r1, [r4, #0]
 800d2d6:	7823      	ldrb	r3, [r4, #0]
 800d2d8:	b17b      	cbz	r3, 800d2fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800d2da:	f04f 0800 	mov.w	r8, #0
 800d2de:	f04f 0901 	mov.w	r9, #1
 800d2e2:	f107 0a04 	add.w	sl, r7, #4
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	42b3      	cmp	r3, r6
 800d2ea:	d075      	beq.n	800d3d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>
 800d2ec:	2e00      	cmp	r6, #0
 800d2ee:	d03e      	beq.n	800d36e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800d2f0:	7833      	ldrb	r3, [r6, #0]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d03b      	beq.n	800d36e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	7033      	strb	r3, [r6, #0]
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d300:	461d      	mov	r5, r3
 800d302:	e7dd      	b.n	800d2c0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 800d304:	6861      	ldr	r1, [r4, #4]
 800d306:	6888      	ldr	r0, [r1, #8]
 800d308:	42a0      	cmp	r0, r4
 800d30a:	bf0c      	ite	eq
 800d30c:	608b      	streq	r3, [r1, #8]
 800d30e:	60cb      	strne	r3, [r1, #12]
 800d310:	e7da      	b.n	800d2c8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 800d312:	460e      	mov	r6, r1
 800d314:	6865      	ldr	r5, [r4, #4]
 800d316:	b106      	cbz	r6, 800d31a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 800d318:	6075      	str	r5, [r6, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	d111      	bne.n	800d344 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 800d320:	607e      	str	r6, [r7, #4]
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	42a3      	cmp	r3, r4
 800d326:	d103      	bne.n	800d330 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800d328:	68e3      	ldr	r3, [r4, #12]
 800d32a:	b993      	cbnz	r3, 800d352 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	60bb      	str	r3, [r7, #8]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	42a3      	cmp	r3, r4
 800d334:	d1cf      	bne.n	800d2d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d336:	68a3      	ldr	r3, [r4, #8]
 800d338:	b993      	cbnz	r3, 800d360 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 800d33a:	6863      	ldr	r3, [r4, #4]
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	e7ca      	b.n	800d2d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d340:	4616      	mov	r6, r2
 800d342:	e7e7      	b.n	800d314 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	42a2      	cmp	r2, r4
 800d34a:	bf0c      	ite	eq
 800d34c:	609e      	streq	r6, [r3, #8]
 800d34e:	60de      	strne	r6, [r3, #12]
 800d350:	e7e7      	b.n	800d322 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 800d352:	4633      	mov	r3, r6
 800d354:	461a      	mov	r2, r3
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1fb      	bne.n	800d354 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 800d35c:	60ba      	str	r2, [r7, #8]
 800d35e:	e7e7      	b.n	800d330 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800d360:	4633      	mov	r3, r6
 800d362:	461a      	mov	r2, r3
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1fb      	bne.n	800d362 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 800d36a:	60fa      	str	r2, [r7, #12]
 800d36c:	e7b3      	b.n	800d2d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d36e:	68a8      	ldr	r0, [r5, #8]
 800d370:	42b0      	cmp	r0, r6
 800d372:	d134      	bne.n	800d3de <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15a>
 800d374:	68e8      	ldr	r0, [r5, #12]
 800d376:	7803      	ldrb	r3, [r0, #0]
 800d378:	b93b      	cbnz	r3, 800d38a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x106>
 800d37a:	f880 9000 	strb.w	r9, [r0]
 800d37e:	4651      	mov	r1, sl
 800d380:	4628      	mov	r0, r5
 800d382:	702b      	strb	r3, [r5, #0]
 800d384:	f7ff fecb 	bl	800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d388:	68e8      	ldr	r0, [r5, #12]
 800d38a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d38e:	b112      	cbz	r2, 800d396 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x112>
 800d390:	7811      	ldrb	r1, [r2, #0]
 800d392:	2901      	cmp	r1, #1
 800d394:	d109      	bne.n	800d3aa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800d396:	b113      	cbz	r3, 800d39e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800d398:	7819      	ldrb	r1, [r3, #0]
 800d39a:	2901      	cmp	r1, #1
 800d39c:	d105      	bne.n	800d3aa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x126>
 800d39e:	686b      	ldr	r3, [r5, #4]
 800d3a0:	462e      	mov	r6, r5
 800d3a2:	f880 8000 	strb.w	r8, [r0]
 800d3a6:	461d      	mov	r5, r3
 800d3a8:	e79d      	b.n	800d2e6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x62>
 800d3aa:	b113      	cbz	r3, 800d3b2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12e>
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d107      	bne.n	800d3c2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13e>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	7013      	strb	r3, [r2, #0]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	4651      	mov	r1, sl
 800d3ba:	7003      	strb	r3, [r0, #0]
 800d3bc:	f7ff fec4 	bl	800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d3c0:	68e8      	ldr	r0, [r5, #12]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	782b      	ldrb	r3, [r5, #0]
 800d3c6:	7003      	strb	r3, [r0, #0]
 800d3c8:	68c3      	ldr	r3, [r0, #12]
 800d3ca:	702a      	strb	r2, [r5, #0]
 800d3cc:	b103      	cbz	r3, 800d3d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14c>
 800d3ce:	701a      	strb	r2, [r3, #0]
 800d3d0:	4651      	mov	r1, sl
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f7ff fea3 	bl	800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d3d8:	2e00      	cmp	r6, #0
 800d3da:	d18c      	bne.n	800d2f6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x72>
 800d3dc:	e78d      	b.n	800d2fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
 800d3de:	7803      	ldrb	r3, [r0, #0]
 800d3e0:	b93b      	cbnz	r3, 800d3f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16e>
 800d3e2:	f880 9000 	strb.w	r9, [r0]
 800d3e6:	4651      	mov	r1, sl
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	702b      	strb	r3, [r5, #0]
 800d3ec:	f7ff feac 	bl	800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d3f0:	68a8      	ldr	r0, [r5, #8]
 800d3f2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d3f6:	b112      	cbz	r2, 800d3fe <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 800d3f8:	7811      	ldrb	r1, [r2, #0]
 800d3fa:	2901      	cmp	r1, #1
 800d3fc:	d104      	bne.n	800d408 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x184>
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0cd      	beq.n	800d39e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800d402:	7819      	ldrb	r1, [r3, #0]
 800d404:	2901      	cmp	r1, #1
 800d406:	d0ca      	beq.n	800d39e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x11a>
 800d408:	b113      	cbz	r3, 800d410 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18c>
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d107      	bne.n	800d420 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19c>
 800d410:	2301      	movs	r3, #1
 800d412:	7013      	strb	r3, [r2, #0]
 800d414:	2300      	movs	r3, #0
 800d416:	4651      	mov	r1, sl
 800d418:	7003      	strb	r3, [r0, #0]
 800d41a:	f7ff fe80 	bl	800d11e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d41e:	68a8      	ldr	r0, [r5, #8]
 800d420:	2201      	movs	r2, #1
 800d422:	782b      	ldrb	r3, [r5, #0]
 800d424:	7003      	strb	r3, [r0, #0]
 800d426:	6883      	ldr	r3, [r0, #8]
 800d428:	702a      	strb	r2, [r5, #0]
 800d42a:	b103      	cbz	r3, 800d42e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	4651      	mov	r1, sl
 800d430:	4628      	mov	r0, r5
 800d432:	f7ff fe89 	bl	800d148 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d436:	e7cf      	b.n	800d3d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x154>

0800d438 <_ZSt17__throw_bad_allocv>:
 800d438:	b508      	push	{r3, lr}
 800d43a:	f000 f809 	bl	800d450 <abort>
	...

0800d440 <_ZSt15get_new_handlerv>:
 800d440:	4b02      	ldr	r3, [pc, #8]	; (800d44c <_ZSt15get_new_handlerv+0xc>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	f3bf 8f5b 	dmb	ish
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	2000204c 	.word	0x2000204c

0800d450 <abort>:
 800d450:	2006      	movs	r0, #6
 800d452:	b508      	push	{r3, lr}
 800d454:	f000 f9cc 	bl	800d7f0 <raise>
 800d458:	2001      	movs	r0, #1
 800d45a:	f7f4 feae 	bl	80021ba <_exit>
	...

0800d460 <calloc>:
 800d460:	4b02      	ldr	r3, [pc, #8]	; (800d46c <calloc+0xc>)
 800d462:	460a      	mov	r2, r1
 800d464:	4601      	mov	r1, r0
 800d466:	6818      	ldr	r0, [r3, #0]
 800d468:	f000 b86c 	b.w	800d544 <_calloc_r>
 800d46c:	20000198 	.word	0x20000198

0800d470 <__errno>:
 800d470:	4b01      	ldr	r3, [pc, #4]	; (800d478 <__errno+0x8>)
 800d472:	6818      	ldr	r0, [r3, #0]
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	20000198 	.word	0x20000198

0800d47c <__libc_init_array>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	2600      	movs	r6, #0
 800d480:	4d0c      	ldr	r5, [pc, #48]	; (800d4b4 <__libc_init_array+0x38>)
 800d482:	4c0d      	ldr	r4, [pc, #52]	; (800d4b8 <__libc_init_array+0x3c>)
 800d484:	1b64      	subs	r4, r4, r5
 800d486:	10a4      	asrs	r4, r4, #2
 800d488:	42a6      	cmp	r6, r4
 800d48a:	d109      	bne.n	800d4a0 <__libc_init_array+0x24>
 800d48c:	f000 f9d8 	bl	800d840 <_init>
 800d490:	2600      	movs	r6, #0
 800d492:	4d0a      	ldr	r5, [pc, #40]	; (800d4bc <__libc_init_array+0x40>)
 800d494:	4c0a      	ldr	r4, [pc, #40]	; (800d4c0 <__libc_init_array+0x44>)
 800d496:	1b64      	subs	r4, r4, r5
 800d498:	10a4      	asrs	r4, r4, #2
 800d49a:	42a6      	cmp	r6, r4
 800d49c:	d105      	bne.n	800d4aa <__libc_init_array+0x2e>
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a4:	4798      	blx	r3
 800d4a6:	3601      	adds	r6, #1
 800d4a8:	e7ee      	b.n	800d488 <__libc_init_array+0xc>
 800d4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4ae:	4798      	blx	r3
 800d4b0:	3601      	adds	r6, #1
 800d4b2:	e7f2      	b.n	800d49a <__libc_init_array+0x1e>
 800d4b4:	0800d9b4 	.word	0x0800d9b4
 800d4b8:	0800d9b4 	.word	0x0800d9b4
 800d4bc:	0800d9b4 	.word	0x0800d9b4
 800d4c0:	0800d9c0 	.word	0x0800d9c0

0800d4c4 <malloc>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <malloc+0xc>)
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	f000 b895 	b.w	800d5f8 <_malloc_r>
 800d4ce:	bf00      	nop
 800d4d0:	20000198 	.word	0x20000198

0800d4d4 <free>:
 800d4d4:	4b02      	ldr	r3, [pc, #8]	; (800d4e0 <free+0xc>)
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	6818      	ldr	r0, [r3, #0]
 800d4da:	f000 b841 	b.w	800d560 <_free_r>
 800d4de:	bf00      	nop
 800d4e0:	20000198 	.word	0x20000198

0800d4e4 <memcpy>:
 800d4e4:	440a      	add	r2, r1
 800d4e6:	4291      	cmp	r1, r2
 800d4e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d4ec:	d100      	bne.n	800d4f0 <memcpy+0xc>
 800d4ee:	4770      	bx	lr
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4f6:	4291      	cmp	r1, r2
 800d4f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4fc:	d1f9      	bne.n	800d4f2 <memcpy+0xe>
 800d4fe:	bd10      	pop	{r4, pc}

0800d500 <memmove>:
 800d500:	4288      	cmp	r0, r1
 800d502:	b510      	push	{r4, lr}
 800d504:	eb01 0402 	add.w	r4, r1, r2
 800d508:	d902      	bls.n	800d510 <memmove+0x10>
 800d50a:	4284      	cmp	r4, r0
 800d50c:	4623      	mov	r3, r4
 800d50e:	d807      	bhi.n	800d520 <memmove+0x20>
 800d510:	1e43      	subs	r3, r0, #1
 800d512:	42a1      	cmp	r1, r4
 800d514:	d008      	beq.n	800d528 <memmove+0x28>
 800d516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d51e:	e7f8      	b.n	800d512 <memmove+0x12>
 800d520:	4601      	mov	r1, r0
 800d522:	4402      	add	r2, r0
 800d524:	428a      	cmp	r2, r1
 800d526:	d100      	bne.n	800d52a <memmove+0x2a>
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d532:	e7f7      	b.n	800d524 <memmove+0x24>

0800d534 <memset>:
 800d534:	4603      	mov	r3, r0
 800d536:	4402      	add	r2, r0
 800d538:	4293      	cmp	r3, r2
 800d53a:	d100      	bne.n	800d53e <memset+0xa>
 800d53c:	4770      	bx	lr
 800d53e:	f803 1b01 	strb.w	r1, [r3], #1
 800d542:	e7f9      	b.n	800d538 <memset+0x4>

0800d544 <_calloc_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	fb02 f501 	mul.w	r5, r2, r1
 800d54a:	4629      	mov	r1, r5
 800d54c:	f000 f854 	bl	800d5f8 <_malloc_r>
 800d550:	4604      	mov	r4, r0
 800d552:	b118      	cbz	r0, 800d55c <_calloc_r+0x18>
 800d554:	462a      	mov	r2, r5
 800d556:	2100      	movs	r1, #0
 800d558:	f7ff ffec 	bl	800d534 <memset>
 800d55c:	4620      	mov	r0, r4
 800d55e:	bd38      	pop	{r3, r4, r5, pc}

0800d560 <_free_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4605      	mov	r5, r0
 800d564:	2900      	cmp	r1, #0
 800d566:	d043      	beq.n	800d5f0 <_free_r+0x90>
 800d568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56c:	1f0c      	subs	r4, r1, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfb8      	it	lt
 800d572:	18e4      	addlt	r4, r4, r3
 800d574:	f000 f958 	bl	800d828 <__malloc_lock>
 800d578:	4a1e      	ldr	r2, [pc, #120]	; (800d5f4 <_free_r+0x94>)
 800d57a:	6813      	ldr	r3, [r2, #0]
 800d57c:	4610      	mov	r0, r2
 800d57e:	b933      	cbnz	r3, 800d58e <_free_r+0x2e>
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	6014      	str	r4, [r2, #0]
 800d584:	4628      	mov	r0, r5
 800d586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d58a:	f000 b953 	b.w	800d834 <__malloc_unlock>
 800d58e:	42a3      	cmp	r3, r4
 800d590:	d90a      	bls.n	800d5a8 <_free_r+0x48>
 800d592:	6821      	ldr	r1, [r4, #0]
 800d594:	1862      	adds	r2, r4, r1
 800d596:	4293      	cmp	r3, r2
 800d598:	bf01      	itttt	eq
 800d59a:	681a      	ldreq	r2, [r3, #0]
 800d59c:	685b      	ldreq	r3, [r3, #4]
 800d59e:	1852      	addeq	r2, r2, r1
 800d5a0:	6022      	streq	r2, [r4, #0]
 800d5a2:	6063      	str	r3, [r4, #4]
 800d5a4:	6004      	str	r4, [r0, #0]
 800d5a6:	e7ed      	b.n	800d584 <_free_r+0x24>
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	b10b      	cbz	r3, 800d5b2 <_free_r+0x52>
 800d5ae:	42a3      	cmp	r3, r4
 800d5b0:	d9fa      	bls.n	800d5a8 <_free_r+0x48>
 800d5b2:	6811      	ldr	r1, [r2, #0]
 800d5b4:	1850      	adds	r0, r2, r1
 800d5b6:	42a0      	cmp	r0, r4
 800d5b8:	d10b      	bne.n	800d5d2 <_free_r+0x72>
 800d5ba:	6820      	ldr	r0, [r4, #0]
 800d5bc:	4401      	add	r1, r0
 800d5be:	1850      	adds	r0, r2, r1
 800d5c0:	4283      	cmp	r3, r0
 800d5c2:	6011      	str	r1, [r2, #0]
 800d5c4:	d1de      	bne.n	800d584 <_free_r+0x24>
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	4401      	add	r1, r0
 800d5cc:	6011      	str	r1, [r2, #0]
 800d5ce:	6053      	str	r3, [r2, #4]
 800d5d0:	e7d8      	b.n	800d584 <_free_r+0x24>
 800d5d2:	d902      	bls.n	800d5da <_free_r+0x7a>
 800d5d4:	230c      	movs	r3, #12
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	e7d4      	b.n	800d584 <_free_r+0x24>
 800d5da:	6820      	ldr	r0, [r4, #0]
 800d5dc:	1821      	adds	r1, r4, r0
 800d5de:	428b      	cmp	r3, r1
 800d5e0:	bf01      	itttt	eq
 800d5e2:	6819      	ldreq	r1, [r3, #0]
 800d5e4:	685b      	ldreq	r3, [r3, #4]
 800d5e6:	1809      	addeq	r1, r1, r0
 800d5e8:	6021      	streq	r1, [r4, #0]
 800d5ea:	6063      	str	r3, [r4, #4]
 800d5ec:	6054      	str	r4, [r2, #4]
 800d5ee:	e7c9      	b.n	800d584 <_free_r+0x24>
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20002050 	.word	0x20002050

0800d5f8 <_malloc_r>:
 800d5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fa:	1ccd      	adds	r5, r1, #3
 800d5fc:	f025 0503 	bic.w	r5, r5, #3
 800d600:	3508      	adds	r5, #8
 800d602:	2d0c      	cmp	r5, #12
 800d604:	bf38      	it	cc
 800d606:	250c      	movcc	r5, #12
 800d608:	2d00      	cmp	r5, #0
 800d60a:	4606      	mov	r6, r0
 800d60c:	db01      	blt.n	800d612 <_malloc_r+0x1a>
 800d60e:	42a9      	cmp	r1, r5
 800d610:	d903      	bls.n	800d61a <_malloc_r+0x22>
 800d612:	230c      	movs	r3, #12
 800d614:	6033      	str	r3, [r6, #0]
 800d616:	2000      	movs	r0, #0
 800d618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d61a:	f000 f905 	bl	800d828 <__malloc_lock>
 800d61e:	4921      	ldr	r1, [pc, #132]	; (800d6a4 <_malloc_r+0xac>)
 800d620:	680a      	ldr	r2, [r1, #0]
 800d622:	4614      	mov	r4, r2
 800d624:	b99c      	cbnz	r4, 800d64e <_malloc_r+0x56>
 800d626:	4f20      	ldr	r7, [pc, #128]	; (800d6a8 <_malloc_r+0xb0>)
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	b923      	cbnz	r3, 800d636 <_malloc_r+0x3e>
 800d62c:	4621      	mov	r1, r4
 800d62e:	4630      	mov	r0, r6
 800d630:	f000 f8a6 	bl	800d780 <_sbrk_r>
 800d634:	6038      	str	r0, [r7, #0]
 800d636:	4629      	mov	r1, r5
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 f8a1 	bl	800d780 <_sbrk_r>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d123      	bne.n	800d68a <_malloc_r+0x92>
 800d642:	230c      	movs	r3, #12
 800d644:	4630      	mov	r0, r6
 800d646:	6033      	str	r3, [r6, #0]
 800d648:	f000 f8f4 	bl	800d834 <__malloc_unlock>
 800d64c:	e7e3      	b.n	800d616 <_malloc_r+0x1e>
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	1b5b      	subs	r3, r3, r5
 800d652:	d417      	bmi.n	800d684 <_malloc_r+0x8c>
 800d654:	2b0b      	cmp	r3, #11
 800d656:	d903      	bls.n	800d660 <_malloc_r+0x68>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	441c      	add	r4, r3
 800d65c:	6025      	str	r5, [r4, #0]
 800d65e:	e004      	b.n	800d66a <_malloc_r+0x72>
 800d660:	6863      	ldr	r3, [r4, #4]
 800d662:	42a2      	cmp	r2, r4
 800d664:	bf0c      	ite	eq
 800d666:	600b      	streq	r3, [r1, #0]
 800d668:	6053      	strne	r3, [r2, #4]
 800d66a:	4630      	mov	r0, r6
 800d66c:	f000 f8e2 	bl	800d834 <__malloc_unlock>
 800d670:	f104 000b 	add.w	r0, r4, #11
 800d674:	1d23      	adds	r3, r4, #4
 800d676:	f020 0007 	bic.w	r0, r0, #7
 800d67a:	1ac2      	subs	r2, r0, r3
 800d67c:	d0cc      	beq.n	800d618 <_malloc_r+0x20>
 800d67e:	1a1b      	subs	r3, r3, r0
 800d680:	50a3      	str	r3, [r4, r2]
 800d682:	e7c9      	b.n	800d618 <_malloc_r+0x20>
 800d684:	4622      	mov	r2, r4
 800d686:	6864      	ldr	r4, [r4, #4]
 800d688:	e7cc      	b.n	800d624 <_malloc_r+0x2c>
 800d68a:	1cc4      	adds	r4, r0, #3
 800d68c:	f024 0403 	bic.w	r4, r4, #3
 800d690:	42a0      	cmp	r0, r4
 800d692:	d0e3      	beq.n	800d65c <_malloc_r+0x64>
 800d694:	1a21      	subs	r1, r4, r0
 800d696:	4630      	mov	r0, r6
 800d698:	f000 f872 	bl	800d780 <_sbrk_r>
 800d69c:	3001      	adds	r0, #1
 800d69e:	d1dd      	bne.n	800d65c <_malloc_r+0x64>
 800d6a0:	e7cf      	b.n	800d642 <_malloc_r+0x4a>
 800d6a2:	bf00      	nop
 800d6a4:	20002050 	.word	0x20002050
 800d6a8:	20002054 	.word	0x20002054

0800d6ac <cleanup_glue>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	6809      	ldr	r1, [r1, #0]
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	b109      	cbz	r1, 800d6ba <cleanup_glue+0xe>
 800d6b6:	f7ff fff9 	bl	800d6ac <cleanup_glue>
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4628      	mov	r0, r5
 800d6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c2:	f7ff bf4d 	b.w	800d560 <_free_r>
	...

0800d6c8 <_reclaim_reent>:
 800d6c8:	4b2c      	ldr	r3, [pc, #176]	; (800d77c <_reclaim_reent+0xb4>)
 800d6ca:	b570      	push	{r4, r5, r6, lr}
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4283      	cmp	r3, r0
 800d6d2:	d051      	beq.n	800d778 <_reclaim_reent+0xb0>
 800d6d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6d6:	b143      	cbz	r3, 800d6ea <_reclaim_reent+0x22>
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d14a      	bne.n	800d774 <_reclaim_reent+0xac>
 800d6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6e0:	6819      	ldr	r1, [r3, #0]
 800d6e2:	b111      	cbz	r1, 800d6ea <_reclaim_reent+0x22>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f7ff ff3b 	bl	800d560 <_free_r>
 800d6ea:	6961      	ldr	r1, [r4, #20]
 800d6ec:	b111      	cbz	r1, 800d6f4 <_reclaim_reent+0x2c>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7ff ff36 	bl	800d560 <_free_r>
 800d6f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6f6:	b111      	cbz	r1, 800d6fe <_reclaim_reent+0x36>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7ff ff31 	bl	800d560 <_free_r>
 800d6fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d700:	b111      	cbz	r1, 800d708 <_reclaim_reent+0x40>
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff ff2c 	bl	800d560 <_free_r>
 800d708:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d70a:	b111      	cbz	r1, 800d712 <_reclaim_reent+0x4a>
 800d70c:	4620      	mov	r0, r4
 800d70e:	f7ff ff27 	bl	800d560 <_free_r>
 800d712:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d714:	b111      	cbz	r1, 800d71c <_reclaim_reent+0x54>
 800d716:	4620      	mov	r0, r4
 800d718:	f7ff ff22 	bl	800d560 <_free_r>
 800d71c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d71e:	b111      	cbz	r1, 800d726 <_reclaim_reent+0x5e>
 800d720:	4620      	mov	r0, r4
 800d722:	f7ff ff1d 	bl	800d560 <_free_r>
 800d726:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d728:	b111      	cbz	r1, 800d730 <_reclaim_reent+0x68>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f7ff ff18 	bl	800d560 <_free_r>
 800d730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d732:	b111      	cbz	r1, 800d73a <_reclaim_reent+0x72>
 800d734:	4620      	mov	r0, r4
 800d736:	f7ff ff13 	bl	800d560 <_free_r>
 800d73a:	69a3      	ldr	r3, [r4, #24]
 800d73c:	b1e3      	cbz	r3, 800d778 <_reclaim_reent+0xb0>
 800d73e:	4620      	mov	r0, r4
 800d740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d742:	4798      	blx	r3
 800d744:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d746:	b1b9      	cbz	r1, 800d778 <_reclaim_reent+0xb0>
 800d748:	4620      	mov	r0, r4
 800d74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d74e:	f7ff bfad 	b.w	800d6ac <cleanup_glue>
 800d752:	5949      	ldr	r1, [r1, r5]
 800d754:	b941      	cbnz	r1, 800d768 <_reclaim_reent+0xa0>
 800d756:	3504      	adds	r5, #4
 800d758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d75a:	2d80      	cmp	r5, #128	; 0x80
 800d75c:	68d9      	ldr	r1, [r3, #12]
 800d75e:	d1f8      	bne.n	800d752 <_reclaim_reent+0x8a>
 800d760:	4620      	mov	r0, r4
 800d762:	f7ff fefd 	bl	800d560 <_free_r>
 800d766:	e7ba      	b.n	800d6de <_reclaim_reent+0x16>
 800d768:	680e      	ldr	r6, [r1, #0]
 800d76a:	4620      	mov	r0, r4
 800d76c:	f7ff fef8 	bl	800d560 <_free_r>
 800d770:	4631      	mov	r1, r6
 800d772:	e7ef      	b.n	800d754 <_reclaim_reent+0x8c>
 800d774:	2500      	movs	r5, #0
 800d776:	e7ef      	b.n	800d758 <_reclaim_reent+0x90>
 800d778:	bd70      	pop	{r4, r5, r6, pc}
 800d77a:	bf00      	nop
 800d77c:	20000198 	.word	0x20000198

0800d780 <_sbrk_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	2300      	movs	r3, #0
 800d784:	4d05      	ldr	r5, [pc, #20]	; (800d79c <_sbrk_r+0x1c>)
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f4 fd20 	bl	80021d0 <_sbrk>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_sbrk_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_sbrk_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	200034e0 	.word	0x200034e0

0800d7a0 <_raise_r>:
 800d7a0:	291f      	cmp	r1, #31
 800d7a2:	b538      	push	{r3, r4, r5, lr}
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	460d      	mov	r5, r1
 800d7a8:	d904      	bls.n	800d7b4 <_raise_r+0x14>
 800d7aa:	2316      	movs	r3, #22
 800d7ac:	6003      	str	r3, [r0, #0]
 800d7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7b6:	b112      	cbz	r2, 800d7be <_raise_r+0x1e>
 800d7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7bc:	b94b      	cbnz	r3, 800d7d2 <_raise_r+0x32>
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f000 f830 	bl	800d824 <_getpid_r>
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ce:	f000 b817 	b.w	800d800 <_kill_r>
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d00a      	beq.n	800d7ec <_raise_r+0x4c>
 800d7d6:	1c59      	adds	r1, r3, #1
 800d7d8:	d103      	bne.n	800d7e2 <_raise_r+0x42>
 800d7da:	2316      	movs	r3, #22
 800d7dc:	6003      	str	r3, [r0, #0]
 800d7de:	2001      	movs	r0, #1
 800d7e0:	e7e7      	b.n	800d7b2 <_raise_r+0x12>
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7ea:	4798      	blx	r3
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e7e0      	b.n	800d7b2 <_raise_r+0x12>

0800d7f0 <raise>:
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <raise+0xc>)
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	6818      	ldr	r0, [r3, #0]
 800d7f6:	f7ff bfd3 	b.w	800d7a0 <_raise_r>
 800d7fa:	bf00      	nop
 800d7fc:	20000198 	.word	0x20000198

0800d800 <_kill_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	2300      	movs	r3, #0
 800d804:	4d06      	ldr	r5, [pc, #24]	; (800d820 <_kill_r+0x20>)
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	602b      	str	r3, [r5, #0]
 800d80e:	f7f4 fcc4 	bl	800219a <_kill>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d102      	bne.n	800d81c <_kill_r+0x1c>
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	b103      	cbz	r3, 800d81c <_kill_r+0x1c>
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	bf00      	nop
 800d820:	200034e0 	.word	0x200034e0

0800d824 <_getpid_r>:
 800d824:	f7f4 bcb2 	b.w	800218c <_getpid>

0800d828 <__malloc_lock>:
 800d828:	4801      	ldr	r0, [pc, #4]	; (800d830 <__malloc_lock+0x8>)
 800d82a:	f7f4 bd8c 	b.w	8002346 <__retarget_lock_acquire_recursive>
 800d82e:	bf00      	nop
 800d830:	20000444 	.word	0x20000444

0800d834 <__malloc_unlock>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__malloc_unlock+0x8>)
 800d836:	f7f4 bd9a 	b.w	800236e <__retarget_lock_release_recursive>
 800d83a:	bf00      	nop
 800d83c:	20000444 	.word	0x20000444

0800d840 <_init>:
 800d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d842:	bf00      	nop
 800d844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d846:	bc08      	pop	{r3}
 800d848:	469e      	mov	lr, r3
 800d84a:	4770      	bx	lr

0800d84c <_fini>:
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84e:	bf00      	nop
 800d850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d852:	bc08      	pop	{r3}
 800d854:	469e      	mov	lr, r3
 800d856:	4770      	bx	lr
