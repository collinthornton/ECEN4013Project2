/*
 * UART.cpp
 *
 *  Created on: Nov 4, 2021
 *      Author: cthornton
 */

#include "UART.h"
#include "stm32f7xx_hal.h"
#include "cmsis_os.h"

std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART(UART_HandleTypeDef *handle) {
	this->handle = handle;
	//uartBuff = NULL;
}

UART::~UART() {
	//if (uartBuff != NULL) free(uartBuff);

	HAL_UART_AbortReceive_IT(handle);

	std::map<USART_TypeDef*, UART*>::iterator it;
	it = objectMap.find(handle->Instance);
	if (it != objectMap.end())
		objectMap.erase(it);
}

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;

	//uartBuff = (uint8_t*)calloc(this->packetSize_Bytes+1, sizeof(uint8_t));

	handle->Instance = port;
	handle->Init.BaudRate = baud;
	handle->Init.WordLength = UART_WORDLENGTH_8B;
	handle->Init.StopBits = UART_STOPBITS_1;
	handle->Init.Parity = UART_PARITY_NONE;
	handle->Init.Mode = UART_MODE_TX_RX;
	handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
	handle->Init.OverSampling = UART_OVERSAMPLING_16;
	handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(handle) != HAL_OK)
	{
		return -1;
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle->Instance, this));
	HAL_UART_Receive_IT(handle, uartBuff, this->packetSize_Bytes);
	return 0;
}

bool UART::hasData() {
	HAL_UART_AbortReceive_IT(handle);
	bool tmp = dataReady;
	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return tmp;
}

uint8_t* UART::getData(uint8_t *buff) {
	HAL_UART_AbortReceive_IT(handle);

	std::copy(msgBuff.begin(), msgBuff.end(), buff);
	msgBuff.clear();
	dataReady = false;

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
	return buff;
}

short UART::sendData(uint8_t *data, int timeout) {
	HAL_UART_Transmit(handle, data, packetSize_Bytes, timeout);

	return 0;
}

void UART::memberIRQ() {
	dataReady = true;

	//for (int i=0; i<packetSize_Bytes; ++i) {
	//	msgBuff.push_back(uartBuff[i]);
	//}

	HAL_UART_Receive_IT(handle, uartBuff, packetSize_Bytes);
}




