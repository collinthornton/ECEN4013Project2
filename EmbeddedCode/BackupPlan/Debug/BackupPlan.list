
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d64c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800d81c  0800d81c  0001d81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d964  0800d964  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d96c  0800d96c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d96c  0800d96c  0001d96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800d984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006aec  2000020c  0800db90  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006cf8  0800db90  00026cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004692a  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c86  00000000  00000000  00066b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026b0  00000000  00000000  0006e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002428  00000000  00000000  00070ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003186f  00000000  00000000  000732c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc7f  00000000  00000000  000a4b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    001053d3  00000000  00000000  000b8d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001be109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009200  00000000  00000000  001be15c  2**2
=======
 18 .debug_str    00116045  00000000  00000000  000d27b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e87fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aaf8  00000000  00000000  001e8850  2**2
>>>>>>> parent of 2d4b392 (prep for i2c gyro testing)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d804 	.word	0x0800d804

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800d804 	.word	0x0800d804

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f00b fe82 	bl	800c21c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00b fd10 	bl	800bf3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004f24 	.word	0x20004f24

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004f24 	.word	0x20004f24

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800077e:	f7ff fee5 	bl	800054c <HAL_GetTick>
 8000782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b02      	cmp	r3, #2
 800078e:	d008      	beq.n	80007a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e052      	b.n	8000848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0216 	bic.w	r2, r2, #22
 80007b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <HAL_DMA_Abort+0x62>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0208 	bic.w	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f022 0201 	bic.w	r2, r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007f2:	e013      	b.n	800081c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007f4:	f7ff feaa 	bl	800054c <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d90c      	bls.n	800081c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2220      	movs	r2, #32
 8000806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2203      	movs	r2, #3
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000818:	2303      	movs	r3, #3
 800081a:	e015      	b.n	8000848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1e4      	bne.n	80007f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800082e:	223f      	movs	r2, #63	; 0x3f
 8000830:	409a      	lsls	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2201      	movs	r2, #1
 8000842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b02      	cmp	r3, #2
 8000862:	d004      	beq.n	800086e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00c      	b.n	8000888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2205      	movs	r2, #5
 8000872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 0201 	bic.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	e175      	b.n	8000ba0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f040 8164 	bne.w	8000b9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d00b      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d007      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e6:	2b11      	cmp	r3, #17
 80008e8:	d003      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b12      	cmp	r3, #18
 80008f0:	d130      	bne.n	8000954 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4013      	ands	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000928:	2201      	movs	r2, #1
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	f003 0201 	and.w	r2, r3, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d003      	beq.n	8000994 <HAL_GPIO_Init+0x100>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b12      	cmp	r3, #18
 8000992:	d123      	bne.n	80009dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	69b9      	ldr	r1, [r7, #24]
 80009d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0203 	and.w	r2, r3, #3
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80be 	beq.w	8000b9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b66      	ldr	r3, [pc, #408]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a65      	ldr	r2, [pc, #404]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a36:	4a61      	ldr	r2, [pc, #388]	; (8000bbc <HAL_GPIO_Init+0x328>)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a58      	ldr	r2, [pc, #352]	; (8000bc0 <HAL_GPIO_Init+0x32c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d037      	beq.n	8000ad2 <HAL_GPIO_Init+0x23e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d031      	beq.n	8000ace <HAL_GPIO_Init+0x23a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a56      	ldr	r2, [pc, #344]	; (8000bc8 <HAL_GPIO_Init+0x334>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d02b      	beq.n	8000aca <HAL_GPIO_Init+0x236>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a55      	ldr	r2, [pc, #340]	; (8000bcc <HAL_GPIO_Init+0x338>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d025      	beq.n	8000ac6 <HAL_GPIO_Init+0x232>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x33c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d01f      	beq.n	8000ac2 <HAL_GPIO_Init+0x22e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <HAL_GPIO_Init+0x340>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x22a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x344>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x226>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_GPIO_Init+0x348>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x222>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_GPIO_Init+0x34c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x21e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x350>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x21a>
 8000aaa:	2309      	movs	r3, #9
 8000aac:	e012      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aae:	230a      	movs	r3, #10
 8000ab0:	e010      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	e00e      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	e00c      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aba:	2306      	movs	r3, #6
 8000abc:	e00a      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e008      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	f002 0203 	and.w	r2, r2, #3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4093      	lsls	r3, r2
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ae4:	4935      	ldr	r1, [pc, #212]	; (8000bbc <HAL_GPIO_Init+0x328>)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b16:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	f67f ae86 	bls.w	80008b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021400 	.word	0x40021400
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40021c00 	.word	0x40021c00
 8000be0:	40022000 	.word	0x40022000
 8000be4:	40022400 	.word	0x40022400
 8000be8:	40013c00 	.word	0x40013c00

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4013      	ands	r3, r2
 8000c36:	041a      	lsls	r2, r3, #16
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	400b      	ands	r3, r1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	619a      	str	r2, [r3, #24]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e07f      	b.n	8000d66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d106      	bne.n	8000c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f00b f986 	bl	800bf8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0201 	bic.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d107      	bne.n	8000cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	e006      	b.n	8000cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d104      	bne.n	8000cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6859      	ldr	r1, [r3, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_I2C_Init+0x11c>)
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	ea42 0103 	orr.w	r1, r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	021a      	lsls	r2, r3, #8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69d9      	ldr	r1, [r3, #28]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1a      	ldr	r2, [r3, #32]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0201 	orr.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2220      	movs	r2, #32
 8000d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	02008000 	.word	0x02008000

08000d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	d138      	bne.n	8000dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e032      	b.n	8000dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2224      	movs	r2, #36	; 0x24
 8000da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e000      	b.n	8000dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000dfc:	2302      	movs	r3, #2
  }
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b20      	cmp	r3, #32
 8000e1e:	d139      	bne.n	8000e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e033      	b.n	8000e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2224      	movs	r2, #36	; 0x24
 8000e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e000      	b.n	8000e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e94:	2302      	movs	r3, #2
  }
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea4:	b08f      	sub	sp, #60	; 0x3c
 8000ea6:	af0a      	add	r7, sp, #40	; 0x28
 8000ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e116      	b.n	80010e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f00b fb74 	bl	800c5bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 f847 	bl	8004f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	687e      	ldr	r6, [r7, #4]
 8000f00:	466d      	mov	r5, sp
 8000f02:	f106 0410 	add.w	r4, r6, #16
 8000f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f16:	1d33      	adds	r3, r6, #4
 8000f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f003 ff28 	bl	8004d70 <USB_CoreInit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0d7      	b.n	80010e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 f835 	bl	8004fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e04a      	b.n	8000fda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	333d      	adds	r3, #61	; 0x3d
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	333c      	adds	r3, #60	; 0x3c
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	b298      	uxth	r0, r3
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3342      	adds	r3, #66	; 0x42
 8000f80:	4602      	mov	r2, r0
 8000f82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	333f      	adds	r3, #63	; 0x3f
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3344      	adds	r3, #68	; 0x44
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3348      	adds	r3, #72	; 0x48
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3350      	adds	r3, #80	; 0x50
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3af      	bcc.n	8000f44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e044      	b.n	8001074 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3b5      	bcc.n	8000fea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	687e      	ldr	r6, [r7, #4]
 8001086:	466d      	mov	r5, sp
 8001088:	f106 0410 	add.w	r4, r6, #16
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001098:	e885 0003 	stmia.w	r5, {r0, r1}
 800109c:	1d33      	adds	r3, r6, #4
 800109e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f003 ffab 	bl	8004ffc <USB_DevInit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e014      	b.n	80010e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 f881 	bl	80021d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 f803 	bl	80060e6 <USB_DevDisconnect>

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_PCD_Start+0x16>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e012      	b.n	8001126 <HAL_PCD_Start+0x3c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f003 ff29 	bl	8004f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f004 ffc4 	bl	80060a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800112e:	b590      	push	{r4, r7, lr}
 8001130:	b08d      	sub	sp, #52	; 0x34
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f005 f882 	bl	800624e <USB_GetMode>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 83ca 	bne.w	80018e6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f004 ffe6 	bl	8006128 <USB_ReadInterrupts>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 83c0 	beq.w	80018e4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f004 ffdd 	bl	8006128 <USB_ReadInterrupts>
 800116e:	4603      	mov	r3, r0
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d107      	bne.n	8001188 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f002 0202 	and.w	r2, r2, #2
 8001186:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f004 ffcb 	bl	8006128 <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b10      	cmp	r3, #16
 800119a:	d161      	bne.n	8001260 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0210 	bic.w	r2, r2, #16
 80011aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 020f 	and.w	r2, r3, #15
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	3304      	adds	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	0c5b      	lsrs	r3, r3, #17
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d124      	bne.n	8001222 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d035      	beq.n	8001250 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	6a38      	ldr	r0, [r7, #32]
 80011f8:	f004 fe31 	bl	8005e5e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001208:	441a      	add	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121a:	441a      	add	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	e016      	b.n	8001250 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	0c5b      	lsrs	r3, r3, #17
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	2b06      	cmp	r3, #6
 800122c:	d110      	bne.n	8001250 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	6a38      	ldr	r0, [r7, #32]
 800123a:	f004 fe10 	bl	8005e5e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124a:	441a      	add	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f004 ff5f 	bl	8006128 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001274:	d16e      	bne.n	8001354 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f004 ff65 	bl	800614e <USB_ReadDevAllOutEpInterrupt>
 8001284:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001286:	e062      	b.n	800134e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d057      	beq.n	8001342 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f004 ff8a 	bl	80061b6 <USB_ReadDevOutEPInterrupt>
 80012a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00c      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ba:	461a      	mov	r2, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fdde 	bl	8001e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00c      	beq.n	80012ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	015a      	lsls	r2, r3, #5
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4413      	add	r3, r2
 80012da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012de:	461a      	mov	r2, r3
 80012e0:	2308      	movs	r3, #8
 80012e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fed8 	bl	800209c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001302:	461a      	mov	r2, r3
 8001304:	2310      	movs	r3, #16
 8001306:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	4413      	add	r3, r2
 800131a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131e:	461a      	mov	r2, r3
 8001320:	2320      	movs	r3, #32
 8001322:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133a:	461a      	mov	r2, r3
 800133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001340:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	2b00      	cmp	r3, #0
 8001352:	d199      	bne.n	8001288 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fee5 	bl	8006128 <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001364:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001368:	f040 80c0 	bne.w	80014ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f004 ff06 	bl	8006182 <USB_ReadDevAllInEpInterrupt>
 8001376:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800137c:	e0b2      	b.n	80014e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a7 	beq.w	80014d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f004 ff2c 	bl	80061f2 <USB_ReadDevInEPInterrupt>
 800139a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d057      	beq.n	8001456 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	2201      	movs	r2, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69f9      	ldr	r1, [r7, #28]
 80013c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013c6:	4013      	ands	r3, r2
 80013c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d6:	461a      	mov	r2, r3
 80013d8:	2301      	movs	r3, #1
 80013da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d132      	bne.n	800144a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3348      	adds	r3, #72	; 0x48
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4403      	add	r3, r0
 8001404:	3344      	adds	r3, #68	; 0x44
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4419      	add	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4403      	add	r3, r0
 8001418:	3348      	adds	r3, #72	; 0x48
 800141a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	d113      	bne.n	800144a <HAL_PCD_IRQHandler+0x31c>
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3350      	adds	r3, #80	; 0x50
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001442:	461a      	mov	r2, r3
 8001444:	2101      	movs	r1, #1
 8001446:	f004 ff35 	bl	80062b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f00b f944 	bl	800c6de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146c:	461a      	mov	r2, r3
 800146e:	2308      	movs	r3, #8
 8001470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001488:	461a      	mov	r2, r3
 800148a:	2310      	movs	r3, #16
 800148c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4413      	add	r3, r2
 80014a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a4:	461a      	mov	r2, r3
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c0:	461a      	mov	r2, r3
 80014c2:	2302      	movs	r3, #2
 80014c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fc48 	bl	8001d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3301      	adds	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f47f af49 	bne.w	800137e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 fe19 	bl	8006128 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001500:	d122      	bne.n	8001548 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001528:	2100      	movs	r1, #0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f00b fb26 	bl	800cb7c <HAL_PCDEx_LPM_Callback>
 8001530:	e002      	b.n	8001538 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f00b f94a 	bl	800c7cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fdeb 	bl	8006128 <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800155c:	d112      	bne.n	8001584 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d102      	bne.n	8001574 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f00b f906 	bl	800c780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001582:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fdcd 	bl	8006128 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001598:	d121      	bne.n	80015de <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80015a8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	f003 020f 	and.w	r2, r3, #15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f00b fad3 	bl	800cb7c <HAL_PCDEx_LPM_Callback>
 80015d6:	e002      	b.n	80015de <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f00b f8d1 	bl	800c780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fda0 	bl	8006128 <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f2:	f040 80c7 	bne.w	8001784 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2110      	movs	r1, #16
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fe61 	bl	80052d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161a:	e056      	b.n	80016ca <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001628:	461a      	mov	r2, r3
 800162a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800162e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001640:	0151      	lsls	r1, r2, #5
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	440a      	add	r2, r1
 8001646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800164a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800164e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001660:	0151      	lsls	r1, r2, #5
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	440a      	add	r2, r1
 8001666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800166a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800166e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167c:	461a      	mov	r2, r3
 800167e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001682:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001694:	0151      	lsls	r1, r2, #5
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	440a      	add	r2, r1
 800169a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800169e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b4:	0151      	lsls	r1, r2, #5
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	440a      	add	r2, r1
 80016ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	3301      	adds	r3, #1
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d3a3      	bcc.n	800161c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d016      	beq.n	800171e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001700:	f043 030b 	orr.w	r3, r3, #11
 8001704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001716:	f043 030b 	orr.w	r3, r3, #11
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	e015      	b.n	800174a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172c:	4619      	mov	r1, r3
 800172e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001732:	4313      	orrs	r3, r2
 8001734:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001744:	f043 030b 	orr.w	r3, r3, #11
 8001748:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001758:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800175c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800176e:	461a      	mov	r2, r3
 8001770:	f004 fda0 	bl	80062b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fccd 	bl	8006128 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001798:	d124      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fd64 	bl	800626c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fdf6 	bl	800539a <USB_GetDevSpeed>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681c      	ldr	r4, [r3, #0]
 80017ba:	f001 f9b3 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 80017be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4620      	mov	r0, r4
 80017ca:	f003 fb29 	bl	8004e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f00a ffad 	bl	800c72e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fc9d 	bl	8006128 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d10a      	bne.n	800180e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f00a ff8a 	bl	800c712 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 0208 	and.w	r2, r2, #8
 800180c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fc88 	bl	8006128 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001822:	d10f      	bne.n	8001844 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f00a ffec 	bl	800c80c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fc6d 	bl	8006128 <USB_ReadInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001858:	d10f      	bne.n	800187a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f00a ffbf 	bl	800c7e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fc52 	bl	8006128 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800188a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188e:	d10a      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f00a ffcd 	bl	800c830 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 fc3c 	bl	8006128 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d115      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f00a ffbd 	bl	800c84c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e000      	b.n	80018e6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80018e4:	bf00      	nop
    }
  }
}
 80018e6:	3734      	adds	r7, #52	; 0x34
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_PCD_SetAddress+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e013      	b.n	800192e <HAL_PCD_SetAddress+0x42>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fb9a 	bl	8006058 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	4608      	mov	r0, r1
 8001940:	4611      	mov	r1, r2
 8001942:	461a      	mov	r2, r3
 8001944:	4603      	mov	r3, r0
 8001946:	70fb      	strb	r3, [r7, #3]
 8001948:	460b      	mov	r3, r1
 800194a:	803b      	strh	r3, [r7, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0f      	bge.n	800197c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	3338      	adds	r3, #56	; 0x38
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	705a      	strb	r2, [r3, #1]
 800197a:	e00f      	b.n	800199c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 020f 	and.w	r2, r3, #15
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019a8:	883a      	ldrh	r2, [r7, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	78ba      	ldrb	r2, [r7, #2]
 80019b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d102      	bne.n	80019d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_EP_Open+0xaa>
 80019dc:	2302      	movs	r3, #2
 80019de:	e00e      	b.n	80019fe <HAL_PCD_EP_Open+0xc8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fcf8 	bl	80053e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019fc:	7afb      	ldrb	r3, [r7, #11]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da0f      	bge.n	8001a3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	f003 020f 	and.w	r2, r3, #15
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3338      	adds	r3, #56	; 0x38
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3304      	adds	r3, #4
 8001a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	705a      	strb	r2, [r3, #1]
 8001a38:	e00f      	b.n	8001a5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 020f 	and.w	r2, r3, #15
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_PCD_EP_Close+0x6e>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e00e      	b.n	8001a92 <HAL_PCD_EP_Close+0x8c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fd36 	bl	80054f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f003 020f 	and.w	r2, r3, #15
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	f004 f819 	bl	8005b44 <USB_EP0StartXfer>
 8001b12:	e008      	b.n	8001b26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	f003 fdc3 	bl	80056ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	3338      	adds	r3, #56	; 0x38
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	f003 ffb7 	bl	8005b44 <USB_EP0StartXfer>
 8001bd6:	e008      	b.n	8001bea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	f003 fd61 	bl	80056ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d901      	bls.n	8001c12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e050      	b.n	8001cb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da0f      	bge.n	8001c3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	3338      	adds	r3, #56	; 0x38
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	705a      	strb	r2, [r3, #1]
 8001c38:	e00d      	b.n	8001c56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_PCD_EP_SetStall+0x82>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e01e      	b.n	8001cb4 <HAL_PCD_EP_SetStall+0xc0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 f913 	bl	8005eb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	b2d9      	uxtb	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f004 fb05 	bl	80062b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d901      	bls.n	8001cda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e042      	b.n	8001d60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da0f      	bge.n	8001d02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 020f 	and.w	r2, r3, #15
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3338      	adds	r3, #56	; 0x38
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00f      	b.n	8001d22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_PCD_EP_ClrStall+0x86>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e00e      	b.n	8001d60 <HAL_PCD_EP_ClrStall+0xa4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f91b 	bl	8005f8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d901      	bls.n	8001da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06c      	b.n	8001e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d902      	bls.n	8001dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dc4:	e02b      	b.n	8001e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d902      	bls.n	8001de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3303      	adds	r3, #3
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f003 fff7 	bl	8005df4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	441a      	add	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d809      	bhi.n	8001e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d203      	bcs.n	8001e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1be      	bne.n	8001dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d811      	bhi.n	8001e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	6939      	ldr	r1, [r7, #16]
 8001e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e74:	4013      	ands	r3, r2
 8001e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	333c      	adds	r3, #60	; 0x3c
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80a0 	bne.w	8001ffc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a72      	ldr	r2, [pc, #456]	; (8002094 <PCD_EP_OutXfrComplete_int+0x210>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f240 80dd 	bls.w	800208a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80d7 	beq.w	800208a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eee:	6093      	str	r3, [r2, #8]
 8001ef0:	e0cb      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	6093      	str	r3, [r2, #8]
 8001f0e:	e0bc      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80b7 	bne.w	800208a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d90f      	bls.n	8001f44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f40:	6093      	str	r3, [r2, #8]
 8001f42:	e0a2      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	0159      	lsls	r1, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4403      	add	r3, r0
 8001f7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4403      	add	r3, r0
 8001fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4419      	add	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4403      	add	r3, r0
 8001fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d114      	bne.n	8001fee <PCD_EP_OutXfrComplete_int+0x16a>
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d108      	bne.n	8001fee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f004 f963 	bl	80062b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f00a fb57 	bl	800c6a8 <HAL_PCD_DataOutStageCallback>
 8001ffa:	e046      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a26      	ldr	r2, [pc, #152]	; (8002098 <PCD_EP_OutXfrComplete_int+0x214>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d124      	bne.n	800204e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002020:	6093      	str	r3, [r2, #8]
 8002022:	e032      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f00a fb2e 	bl	800c6a8 <HAL_PCD_DataOutStageCallback>
 800204c:	e01d      	b.n	800208a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d114      	bne.n	800207e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002076:	461a      	mov	r2, r3
 8002078:	2100      	movs	r1, #0
 800207a:	f004 f91b 	bl	80062b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f00a fb0f 	bl	800c6a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	4f54300a 	.word	0x4f54300a
 8002098:	4f54310a 	.word	0x4f54310a

0800209c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	333c      	adds	r3, #60	; 0x3c
 80020b4:	3304      	adds	r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <PCD_EP_OutSetupPacket_int+0x88>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d90e      	bls.n	80020f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	461a      	mov	r2, r3
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f00a fac7 	bl	800c684 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <PCD_EP_OutSetupPacket_int+0x88>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d90c      	bls.n	8002118 <PCD_EP_OutSetupPacket_int+0x7c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002110:	461a      	mov	r2, r3
 8002112:	2101      	movs	r1, #1
 8002114:	f004 f8ce 	bl	80062b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	4f54300a 	.word	0x4f54300a

08002128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
 8002134:	4613      	mov	r3, r2
 8002136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	0419      	lsls	r1, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	430a      	orrs	r2, r1
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
 8002154:	e028      	b.n	80021a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e00d      	b.n	8002186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3340      	adds	r3, #64	; 0x40
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	3301      	adds	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	3b01      	subs	r3, #1
 800218c:	429a      	cmp	r2, r3
 800218e:	d3ec      	bcc.n	800216a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002190:	883b      	ldrh	r3, [r7, #0]
 8002192:	0418      	lsls	r0, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	3b01      	subs	r3, #1
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4302      	orrs	r2, r0
 80021a0:	3340      	adds	r3, #64	; 0x40
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_PCDEx_ActivateLPM+0x44>)
 8002208:	4313      	orrs	r3, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	10000003 	.word	0x10000003

08002220 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e291      	b.n	800277a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8087 	beq.w	8002372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b96      	ldr	r3, [pc, #600]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00c      	beq.n	800228a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002270:	4b93      	ldr	r3, [pc, #588]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d112      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
 800227c:	4b90      	ldr	r3, [pc, #576]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002288:	d10b      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228a:	4b8d      	ldr	r3, [pc, #564]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06c      	beq.n	8002370 <HAL_RCC_OscConfig+0x130>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d168      	bne.n	8002370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e26b      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x7a>
 80022ac:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a83      	ldr	r2, [pc, #524]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x9c>
 80022c2:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7b      	ldr	r2, [pc, #492]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xc0>
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a72      	ldr	r2, [pc, #456]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6e      	ldr	r2, [pc, #440]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6b      	ldr	r2, [pc, #428]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe f914 	bl	800054c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe f910 	bl	800054c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e21f      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe f900 	bl	800054c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe f8fc 	bl	800054c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e20b      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x110>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d069      	beq.n	8002452 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237e:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x190>
 8002396:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x17a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1df      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	493d      	ldr	r1, [pc, #244]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e040      	b.n	8002452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe f8b2 	bl	800054c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ec:	f7fe f8ae 	bl	800054c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1bd      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4929      	ldr	r1, [pc, #164]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
 800241e:	e018      	b.n	8002452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe f88e 	bl	800054c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7fe f88a 	bl	800054c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e199      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d038      	beq.n	80024d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe f86b 	bl	800054c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe f867 	bl	800054c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e176      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800248e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x23a>
 8002498:	e01a      	b.n	80024d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe f851 	bl	800054c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7fe f84d 	bl	800054c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d903      	bls.n	80024c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e15c      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
 80024c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b91      	ldr	r3, [pc, #580]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a4 	beq.w	8002626 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a87      	ldr	r2, [pc, #540]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002506:	4b82      	ldr	r3, [pc, #520]	; (8002710 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002512:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7e      	ldr	r2, [pc, #504]	; (8002710 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7fe f815 	bl	800054c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7fe f811 	bl	800054c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e120      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002538:	4b75      	ldr	r3, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x31a>
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a6e      	ldr	r2, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	e02d      	b.n	80025b6 <HAL_RCC_OscConfig+0x376>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x33c>
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	4a66      	ldr	r2, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6713      	str	r3, [r2, #112]	; 0x70
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x376>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x35e>
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a5d      	ldr	r2, [pc, #372]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x376>
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fd ffc5 	bl	800054c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fd ffc1 	bl	800054c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ce      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x386>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7fd ffaf 	bl	800054c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fd ffab 	bl	800054c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0b8      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a3b      	ldr	r2, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a4 	beq.w	8002778 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d06b      	beq.n	8002714 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d149      	bne.n	80026d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800264a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fd ff7c 	bl	800054c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fd ff78 	bl	800054c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e087      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	4313      	orrs	r3, r2
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 800269e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fd ff4c 	bl	800054c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fd ff48 	bl	800054c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e057      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x478>
 80026d6:	e04f      	b.n	8002778 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fd ff32 	bl	800054c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fd ff2e 	bl	800054c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e03d      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_OscConfig+0x4cc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x4ac>
 800270a:	e035      	b.n	8002778 <HAL_RCC_OscConfig+0x538>
 800270c:	40023800 	.word	0x40023800
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x544>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d028      	beq.n	8002774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d121      	bne.n	8002774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d0      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 020f 	bic.w	r2, r3, #15
 80027b6:	4965      	ldr	r1, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d040      	beq.n	80028ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e073      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4936      	ldr	r1, [pc, #216]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287c:	f7fd fe66 	bl	800054c <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fd fe62 	bl	800054c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e053      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d210      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	4922      	ldr	r1, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1cc>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1d0>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1d4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f009 fc6e 	bl	800c21c <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	0800d8ec 	.word	0x0800d8ec
 8002958:	2000011c 	.word	0x2000011c
 800295c:	20000000 	.word	0x20000000

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002978:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002984:	2b08      	cmp	r3, #8
 8002986:	f200 80bd 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3a>
 8002992:	e0b7      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002996:	60bb      	str	r3, [r7, #8]
      break;
 8002998:	e0b7      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800299c:	60bb      	str	r3, [r7, #8]
      break;
 800299e:	e0b4      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04d      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	461a      	mov	r2, r3
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	ea02 0800 	and.w	r8, r2, r0
 80029ce:	ea03 0901 	and.w	r9, r3, r1
 80029d2:	4640      	mov	r0, r8
 80029d4:	4649      	mov	r1, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	014b      	lsls	r3, r1, #5
 80029e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029e4:	0142      	lsls	r2, r0, #5
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	ebb0 0008 	subs.w	r0, r0, r8
 80029ee:	eb61 0109 	sbc.w	r1, r1, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a00:	0182      	lsls	r2, r0, #6
 8002a02:	1a12      	subs	r2, r2, r0
 8002a04:	eb63 0301 	sbc.w	r3, r3, r1
 8002a08:	f04f 0000 	mov.w	r0, #0
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	00d9      	lsls	r1, r3, #3
 8002a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a16:	00d0      	lsls	r0, r2, #3
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	eb12 0208 	adds.w	r2, r2, r8
 8002a20:	eb43 0309 	adc.w	r3, r3, r9
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	0259      	lsls	r1, r3, #9
 8002a2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a32:	0250      	lsls	r0, r2, #9
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f7fd fbe4 	bl	8000210 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e04a      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	ea02 0400 	and.w	r4, r2, r0
 8002a6a:	ea03 0501 	and.w	r5, r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	014b      	lsls	r3, r1, #5
 8002a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a80:	0142      	lsls	r2, r0, #5
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	1b00      	subs	r0, r0, r4
 8002a88:	eb61 0105 	sbc.w	r1, r1, r5
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	018b      	lsls	r3, r1, #6
 8002a96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9a:	0182      	lsls	r2, r0, #6
 8002a9c:	1a12      	subs	r2, r2, r0
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	00d9      	lsls	r1, r3, #3
 8002aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab0:	00d0      	lsls	r0, r2, #3
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	1912      	adds	r2, r2, r4
 8002ab8:	eb45 0303 	adc.w	r3, r5, r3
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0299      	lsls	r1, r3, #10
 8002ac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aca:	0290      	lsls	r0, r2, #10
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f7fd fb98 	bl	8000210 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000011c 	.word	0x2000011c

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	0800d8fc 	.word	0x0800d8fc

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	0800d8fc 	.word	0x0800d8fc

08002b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_RCC_GetClockConfig+0x60>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40023c00 	.word	0x40023c00

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c18:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c22:	6093      	str	r3, [r2, #8]
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4964      	ldr	r1, [pc, #400]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	4959      	ldr	r1, [pc, #356]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	494a      	ldr	r1, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 808b 	beq.w	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fd fc28 	bl	800054c <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fd fc24 	bl	800054c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e357      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d035      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d02e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d114      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fd fbec 	bl	800054c <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fd fbe8 	bl	800054c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e319      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da6:	d111      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	4901      	ldr	r1, [pc, #4]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	0ffffcff 	.word	0x0ffffcff
 8002dcc:	4bb1      	ldr	r3, [pc, #708]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4ab0      	ldr	r2, [pc, #704]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	4bae      	ldr	r3, [pc, #696]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	49ab      	ldr	r1, [pc, #684]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002df6:	4ba7      	ldr	r3, [pc, #668]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfc:	4aa5      	ldr	r2, [pc, #660]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e06:	4ba3      	ldr	r3, [pc, #652]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	49a0      	ldr	r1, [pc, #640]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e24:	4b9b      	ldr	r3, [pc, #620]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e32:	4998      	ldr	r1, [pc, #608]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e46:	4b93      	ldr	r3, [pc, #588]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	498f      	ldr	r1, [pc, #572]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e68:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	4987      	ldr	r1, [pc, #540]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e8a:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	497e      	ldr	r1, [pc, #504]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4976      	ldr	r1, [pc, #472]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ece:	4b71      	ldr	r3, [pc, #452]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 020c 	bic.w	r2, r3, #12
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	496d      	ldr	r1, [pc, #436]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4965      	ldr	r1, [pc, #404]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	495c      	ldr	r1, [pc, #368]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	4954      	ldr	r1, [pc, #336]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f56:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	494b      	ldr	r1, [pc, #300]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	4943      	ldr	r1, [pc, #268]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	493a      	ldr	r1, [pc, #232]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fca:	4932      	ldr	r1, [pc, #200]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d011      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	4929      	ldr	r1, [pc, #164]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffc:	d101      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	4919      	ldr	r1, [pc, #100]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003050:	4910      	ldr	r1, [pc, #64]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d006      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80d9 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a08      	ldr	r2, [pc, #32]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fd fa68 	bl	800054c <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307e:	e00b      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003080:	f7fd fa64 	bl	800054c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d904      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e197      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ed      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d021      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030b8:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	0e1b      	lsrs	r3, r3, #24
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	019a      	lsls	r2, r3, #6
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	071b      	lsls	r3, r3, #28
 80030ec:	4957      	ldr	r1, [pc, #348]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02e      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311e:	d129      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003120:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003134:	0f1b      	lsrs	r3, r3, #28
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	019a      	lsls	r2, r3, #6
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	431a      	orrs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	071b      	lsls	r3, r3, #28
 8003154:	493d      	ldr	r1, [pc, #244]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003162:	f023 021f 	bic.w	r2, r3, #31
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	3b01      	subs	r3, #1
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01d      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	0e1b      	lsrs	r3, r3, #24
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	0f1b      	lsrs	r3, r3, #28
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	019a      	lsls	r2, r3, #6
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	071b      	lsls	r3, r3, #28
 80031b4:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d011      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	019a      	lsls	r2, r3, #6
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	071b      	lsls	r3, r3, #28
 80031e4:	4919      	ldr	r1, [pc, #100]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fd f9a8 	bl	800054c <HAL_GetTick>
 80031fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003200:	f7fd f9a4 	bl	800054c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0d7      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 80cd 	bne.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fd f98b 	bl	800054c <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800323a:	f7fd f987 	bl	800054c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d903      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0ba      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800324c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325c:	d0ed      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d12a      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003294:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	0f1b      	lsrs	r3, r3, #28
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	019a      	lsls	r2, r3, #6
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	4944      	ldr	r1, [pc, #272]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032c2:	4b42      	ldr	r3, [pc, #264]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	493d      	ldr	r1, [pc, #244]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d11d      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4929      	ldr	r1, [pc, #164]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d028      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	0e1b      	lsrs	r3, r3, #24
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003348:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	019a      	lsls	r2, r3, #6
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	4917      	ldr	r1, [pc, #92]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4911      	ldr	r1, [pc, #68]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fd f8d8 	bl	800054c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033a0:	f7fd f8d4 	bl	800054c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e007      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033be:	d1ef      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09d      	b.n	800351e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f2:	d009      	beq.n	8003408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	e005      	b.n	8003408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f008 fdf6 	bl	800c014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003448:	d902      	bls.n	8003450 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e002      	b.n	8003456 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003454:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800345e:	d007      	beq.n	8003470 <HAL_SPI_Init+0xa0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003468:	d002      	beq.n	8003470 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	ea42 0103 	orr.w	r1, r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	f003 0204 	and.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034ec:	ea42 0103 	orr.w	r1, r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e049      	b.n	80035cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f841 	bl	80035d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f000 f9ff 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e054      	b.n	80036aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d01d      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <HAL_TIM_Base_Start_IT+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d115      	bne.n	8003694 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b06      	cmp	r3, #6
 8003678:	d015      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0xbe>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d011      	beq.n	80036a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e008      	b.n	80036a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800
 80036d4:	00010007 	.word	0x00010007

080036d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0202 	mvn.w	r2, #2
 8003704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f905 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8f7 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f908 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0204 	mvn.w	r2, #4
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8db 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8cd 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8de 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0208 	mvn.w	r2, #8
 80037ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2204      	movs	r2, #4
 80037b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8b1 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8a3 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8b4 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0210 	mvn.w	r2, #16
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2208      	movs	r2, #8
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f887 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f879 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f88a 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0201 	mvn.w	r2, #1
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f008 fb10 	bl	800be7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f91a 	bl	8003abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f90d 	bl	8003ad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d10e      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d107      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f838 	bl	8003952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d10e      	bne.n	800390e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0220 	mvn.w	r2, #32
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8cd 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d027      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d023      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0xf8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e040      	b.n	8003b78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f008 fae6 	bl	800c0d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fb92 	bl	800424c <UART_SetConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e022      	b.n	8003b78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fde8 	bl	8004710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fe6f 	bl	8004854 <UART_CheckIdleState>
 8003b76:	4603      	mov	r3, r0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	f040 8081 	bne.w	8003c9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_UART_Transmit+0x26>
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e079      	b.n	8003c9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_UART_Transmit+0x38>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e072      	b.n	8003c9e <HAL_UART_Transmit+0x11e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2221      	movs	r2, #33	; 0x21
 8003bcc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fc fcbd 	bl	800054c <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d108      	bne.n	8003c00 <HAL_UART_Transmit+0x80>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e003      	b.n	8003c08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c10:	e02c      	b.n	8003c6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fe4c 	bl	80048ba <UART_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e038      	b.n	8003c9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3302      	adds	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e007      	b.n	8003c5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3301      	adds	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1cc      	bne.n	8003c12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2140      	movs	r1, #64	; 0x40
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fe19 	bl	80048ba <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e005      	b.n	8003c9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d12c      	bne.n	8003d16 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_UART_Receive_IT+0x22>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e025      	b.n	8003d18 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Receive_IT+0x34>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e01e      	b.n	8003d18 <HAL_UART_Receive_IT+0x72>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d04:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fe51 	bl	80049b4 <UART_Start_Receive_IT>
 8003d12:	4603      	mov	r3, r0
 8003d14:	e000      	b.n	8003d18 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0210 	bic.w	r2, r2, #16
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d13c      	bne.n	8003de8 <HAL_UART_AbortReceive_IT+0xc8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <HAL_UART_AbortReceive_IT+0xfc>)
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fd5c 	bl	8000850 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d038      	beq.n	8003e10 <HAL_UART_AbortReceive_IT+0xf0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
 8003dac:	e030      	b.n	8003e10 <HAL_UART_AbortReceive_IT+0xf0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa1d 	bl	8004220 <HAL_UART_AbortReceiveCpltCallback>
 8003de6:	e013      	b.n	8003e10 <HAL_UART_AbortReceive_IT+0xf0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa08 	bl	8004220 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004b4f 	.word	0x08004b4f

08003e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d113      	bne.n	8003e78 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00e      	beq.n	8003e78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 81b9 	beq.w	80041e0 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
      }
      return;
 8003e76:	e1b3      	b.n	80041e0 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80e3 	beq.w	8004046 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4ba5      	ldr	r3, [pc, #660]	; (8004124 <HAL_UART_IRQHandler+0x304>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80d8 	beq.w	8004046 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xa2>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_UART_IRQHandler+0xce>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_UART_IRQHandler+0xfa>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2204      	movs	r2, #4
 8003f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	f043 0208 	orr.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d011      	beq.n	8003f7e <HAL_UART_IRQHandler+0x15e>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 812d 	beq.w	80041e4 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00c      	beq.n	8003fae <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d004      	beq.n	8003fce <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d031      	beq.n	8004032 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fd78 	bl	8004ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d123      	bne.n	800402a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_UART_IRQHandler+0x308>)
 8004000:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fc22 	bl	8000850 <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	e00f      	b.n	8004042 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8f2 	bl	800420c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00b      	b.n	8004042 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8ee 	bl	800420c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e007      	b.n	8004042 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8ea 	bl	800420c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004040:	e0d0      	b.n	80041e4 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004042:	bf00      	nop
    return;
 8004044:	e0ce      	b.n	80041e4 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	2b01      	cmp	r3, #1
 800404c:	f040 80a7 	bne.w	800419e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a1 	beq.w	800419e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 809b 	beq.w	800419e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d156      	bne.n	800412c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80ac 	beq.w	80041e8 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004096:	893a      	ldrh	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	f080 80a5 	bcs.w	80041e8 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	893a      	ldrh	r2, [r7, #8]
 80040a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d02a      	beq.n	8004108 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0210 	bic.w	r2, r2, #16
 80040fc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fb34 	bl	8000770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004114:	b29b      	uxth	r3, r3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	b29b      	uxth	r3, r3
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f889 	bl	8004234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004122:	e061      	b.n	80041e8 <HAL_UART_IRQHandler+0x3c8>
 8004124:	04000120 	.word	0x04000120
 8004128:	08004b23 	.word	0x08004b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004138:	b29b      	uxth	r3, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d050      	beq.n	80041ec <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d04d      	beq.n	80041ec <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800415e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f84c 	bl	8004234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800419c:	e026      	b.n	80041ec <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00d      	beq.n	80041c4 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01a      	beq.n	80041f0 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
    }
    return;
 80041c2:	e015      	b.n	80041f0 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fcdc 	bl	8004b96 <UART_EndTransmit_IT>
    return;
 80041de:	e008      	b.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80041e0:	bf00      	nop
 80041e2:	e006      	b.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
    return;
 80041e4:	bf00      	nop
 80041e6:	e004      	b.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80041e8:	bf00      	nop
 80041ea:	e002      	b.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80041ec:	bf00      	nop
 80041ee:	e000      	b.n	80041f2 <HAL_UART_IRQHandler+0x3d2>
    return;
 80041f0:	bf00      	nop
  }

}
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4ba7      	ldr	r3, [pc, #668]	; (8004514 <UART_SetConfig+0x2c8>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	430b      	orrs	r3, r1
 8004282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a95      	ldr	r2, [pc, #596]	; (8004518 <UART_SetConfig+0x2cc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0xbe>
 80042c8:	4b94      	ldr	r3, [pc, #592]	; (800451c <UART_SetConfig+0x2d0>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d816      	bhi.n	8004304 <UART_SetConfig+0xb8>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x90>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	080042f3 	.word	0x080042f3
 80042e8:	080042ff 	.word	0x080042ff
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e14f      	b.n	8004592 <UART_SetConfig+0x346>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e14c      	b.n	8004592 <UART_SetConfig+0x346>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e149      	b.n	8004592 <UART_SetConfig+0x346>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e146      	b.n	8004592 <UART_SetConfig+0x346>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e143      	b.n	8004592 <UART_SetConfig+0x346>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a84      	ldr	r2, [pc, #528]	; (8004520 <UART_SetConfig+0x2d4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d132      	bne.n	800437a <UART_SetConfig+0x12e>
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <UART_SetConfig+0x2d0>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d828      	bhi.n	8004374 <UART_SetConfig+0x128>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0xdc>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800435d 	.word	0x0800435d
 800432c:	08004375 	.word	0x08004375
 8004330:	08004375 	.word	0x08004375
 8004334:	08004375 	.word	0x08004375
 8004338:	08004369 	.word	0x08004369
 800433c:	08004375 	.word	0x08004375
 8004340:	08004375 	.word	0x08004375
 8004344:	08004375 	.word	0x08004375
 8004348:	08004363 	.word	0x08004363
 800434c:	08004375 	.word	0x08004375
 8004350:	08004375 	.word	0x08004375
 8004354:	08004375 	.word	0x08004375
 8004358:	0800436f 	.word	0x0800436f
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e117      	b.n	8004592 <UART_SetConfig+0x346>
 8004362:	2302      	movs	r3, #2
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e114      	b.n	8004592 <UART_SetConfig+0x346>
 8004368:	2304      	movs	r3, #4
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e111      	b.n	8004592 <UART_SetConfig+0x346>
 800436e:	2308      	movs	r3, #8
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e10e      	b.n	8004592 <UART_SetConfig+0x346>
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e10b      	b.n	8004592 <UART_SetConfig+0x346>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a69      	ldr	r2, [pc, #420]	; (8004524 <UART_SetConfig+0x2d8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0x17a>
 8004384:	4b65      	ldr	r3, [pc, #404]	; (800451c <UART_SetConfig+0x2d0>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800438e:	2b30      	cmp	r3, #48	; 0x30
 8004390:	d013      	beq.n	80043ba <UART_SetConfig+0x16e>
 8004392:	2b30      	cmp	r3, #48	; 0x30
 8004394:	d814      	bhi.n	80043c0 <UART_SetConfig+0x174>
 8004396:	2b20      	cmp	r3, #32
 8004398:	d009      	beq.n	80043ae <UART_SetConfig+0x162>
 800439a:	2b20      	cmp	r3, #32
 800439c:	d810      	bhi.n	80043c0 <UART_SetConfig+0x174>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <UART_SetConfig+0x15c>
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d006      	beq.n	80043b4 <UART_SetConfig+0x168>
 80043a6:	e00b      	b.n	80043c0 <UART_SetConfig+0x174>
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0f1      	b.n	8004592 <UART_SetConfig+0x346>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e0ee      	b.n	8004592 <UART_SetConfig+0x346>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e0eb      	b.n	8004592 <UART_SetConfig+0x346>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e0e8      	b.n	8004592 <UART_SetConfig+0x346>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0e5      	b.n	8004592 <UART_SetConfig+0x346>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a57      	ldr	r2, [pc, #348]	; (8004528 <UART_SetConfig+0x2dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d120      	bne.n	8004412 <UART_SetConfig+0x1c6>
 80043d0:	4b52      	ldr	r3, [pc, #328]	; (800451c <UART_SetConfig+0x2d0>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043da:	2bc0      	cmp	r3, #192	; 0xc0
 80043dc:	d013      	beq.n	8004406 <UART_SetConfig+0x1ba>
 80043de:	2bc0      	cmp	r3, #192	; 0xc0
 80043e0:	d814      	bhi.n	800440c <UART_SetConfig+0x1c0>
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d009      	beq.n	80043fa <UART_SetConfig+0x1ae>
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d810      	bhi.n	800440c <UART_SetConfig+0x1c0>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <UART_SetConfig+0x1a8>
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d006      	beq.n	8004400 <UART_SetConfig+0x1b4>
 80043f2:	e00b      	b.n	800440c <UART_SetConfig+0x1c0>
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e0cb      	b.n	8004592 <UART_SetConfig+0x346>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e0c8      	b.n	8004592 <UART_SetConfig+0x346>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e0c5      	b.n	8004592 <UART_SetConfig+0x346>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0c2      	b.n	8004592 <UART_SetConfig+0x346>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e0bf      	b.n	8004592 <UART_SetConfig+0x346>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a45      	ldr	r2, [pc, #276]	; (800452c <UART_SetConfig+0x2e0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d125      	bne.n	8004468 <UART_SetConfig+0x21c>
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <UART_SetConfig+0x2d0>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442a:	d017      	beq.n	800445c <UART_SetConfig+0x210>
 800442c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004430:	d817      	bhi.n	8004462 <UART_SetConfig+0x216>
 8004432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004436:	d00b      	beq.n	8004450 <UART_SetConfig+0x204>
 8004438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443c:	d811      	bhi.n	8004462 <UART_SetConfig+0x216>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <UART_SetConfig+0x1fe>
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d006      	beq.n	8004456 <UART_SetConfig+0x20a>
 8004448:	e00b      	b.n	8004462 <UART_SetConfig+0x216>
 800444a:	2300      	movs	r3, #0
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e0a0      	b.n	8004592 <UART_SetConfig+0x346>
 8004450:	2302      	movs	r3, #2
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e09d      	b.n	8004592 <UART_SetConfig+0x346>
 8004456:	2304      	movs	r3, #4
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e09a      	b.n	8004592 <UART_SetConfig+0x346>
 800445c:	2308      	movs	r3, #8
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e097      	b.n	8004592 <UART_SetConfig+0x346>
 8004462:	2310      	movs	r3, #16
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e094      	b.n	8004592 <UART_SetConfig+0x346>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <UART_SetConfig+0x2e4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d125      	bne.n	80044be <UART_SetConfig+0x272>
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <UART_SetConfig+0x2d0>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800447c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004480:	d017      	beq.n	80044b2 <UART_SetConfig+0x266>
 8004482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004486:	d817      	bhi.n	80044b8 <UART_SetConfig+0x26c>
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d00b      	beq.n	80044a6 <UART_SetConfig+0x25a>
 800448e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004492:	d811      	bhi.n	80044b8 <UART_SetConfig+0x26c>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <UART_SetConfig+0x254>
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d006      	beq.n	80044ac <UART_SetConfig+0x260>
 800449e:	e00b      	b.n	80044b8 <UART_SetConfig+0x26c>
 80044a0:	2301      	movs	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e075      	b.n	8004592 <UART_SetConfig+0x346>
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e072      	b.n	8004592 <UART_SetConfig+0x346>
 80044ac:	2304      	movs	r3, #4
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e06f      	b.n	8004592 <UART_SetConfig+0x346>
 80044b2:	2308      	movs	r3, #8
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e06c      	b.n	8004592 <UART_SetConfig+0x346>
 80044b8:	2310      	movs	r3, #16
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e069      	b.n	8004592 <UART_SetConfig+0x346>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <UART_SetConfig+0x2e8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d137      	bne.n	8004538 <UART_SetConfig+0x2ec>
 80044c8:	4b14      	ldr	r3, [pc, #80]	; (800451c <UART_SetConfig+0x2d0>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044d6:	d017      	beq.n	8004508 <UART_SetConfig+0x2bc>
 80044d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044dc:	d817      	bhi.n	800450e <UART_SetConfig+0x2c2>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	d00b      	beq.n	80044fc <UART_SetConfig+0x2b0>
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d811      	bhi.n	800450e <UART_SetConfig+0x2c2>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <UART_SetConfig+0x2aa>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d006      	beq.n	8004502 <UART_SetConfig+0x2b6>
 80044f4:	e00b      	b.n	800450e <UART_SetConfig+0x2c2>
 80044f6:	2300      	movs	r3, #0
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e04a      	b.n	8004592 <UART_SetConfig+0x346>
 80044fc:	2302      	movs	r3, #2
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e047      	b.n	8004592 <UART_SetConfig+0x346>
 8004502:	2304      	movs	r3, #4
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e044      	b.n	8004592 <UART_SetConfig+0x346>
 8004508:	2308      	movs	r3, #8
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e041      	b.n	8004592 <UART_SetConfig+0x346>
 800450e:	2310      	movs	r3, #16
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e03e      	b.n	8004592 <UART_SetConfig+0x346>
 8004514:	efff69f3 	.word	0xefff69f3
 8004518:	40011000 	.word	0x40011000
 800451c:	40023800 	.word	0x40023800
 8004520:	40004400 	.word	0x40004400
 8004524:	40004800 	.word	0x40004800
 8004528:	40004c00 	.word	0x40004c00
 800452c:	40005000 	.word	0x40005000
 8004530:	40011400 	.word	0x40011400
 8004534:	40007800 	.word	0x40007800
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a71      	ldr	r2, [pc, #452]	; (8004704 <UART_SetConfig+0x4b8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d125      	bne.n	800458e <UART_SetConfig+0x342>
 8004542:	4b71      	ldr	r3, [pc, #452]	; (8004708 <UART_SetConfig+0x4bc>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800454c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004550:	d017      	beq.n	8004582 <UART_SetConfig+0x336>
 8004552:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004556:	d817      	bhi.n	8004588 <UART_SetConfig+0x33c>
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d00b      	beq.n	8004576 <UART_SetConfig+0x32a>
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004562:	d811      	bhi.n	8004588 <UART_SetConfig+0x33c>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <UART_SetConfig+0x324>
 8004568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800456c:	d006      	beq.n	800457c <UART_SetConfig+0x330>
 800456e:	e00b      	b.n	8004588 <UART_SetConfig+0x33c>
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e00d      	b.n	8004592 <UART_SetConfig+0x346>
 8004576:	2302      	movs	r3, #2
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e00a      	b.n	8004592 <UART_SetConfig+0x346>
 800457c:	2304      	movs	r3, #4
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e007      	b.n	8004592 <UART_SetConfig+0x346>
 8004582:	2308      	movs	r3, #8
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e004      	b.n	8004592 <UART_SetConfig+0x346>
 8004588:	2310      	movs	r3, #16
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e001      	b.n	8004592 <UART_SetConfig+0x346>
 800458e:	2310      	movs	r3, #16
 8004590:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459a:	d15b      	bne.n	8004654 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800459c:	7ffb      	ldrb	r3, [r7, #31]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d827      	bhi.n	80045f2 <UART_SetConfig+0x3a6>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x35c>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	080045f3 	.word	0x080045f3
 80045b8:	080045e3 	.word	0x080045e3
 80045bc:	080045f3 	.word	0x080045f3
 80045c0:	080045f3 	.word	0x080045f3
 80045c4:	080045f3 	.word	0x080045f3
 80045c8:	080045eb 	.word	0x080045eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe fab6 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 80045d0:	61b8      	str	r0, [r7, #24]
        break;
 80045d2:	e013      	b.n	80045fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d4:	f7fe fac6 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 80045d8:	61b8      	str	r0, [r7, #24]
        break;
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <UART_SetConfig+0x4c0>)
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e00c      	b.n	80045fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e2:	f7fe f9bd 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 80045e6:	61b8      	str	r0, [r7, #24]
        break;
 80045e8:	e008      	b.n	80045fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ee:	61bb      	str	r3, [r7, #24]
        break;
 80045f0:	e004      	b.n	80045fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	77bb      	strb	r3, [r7, #30]
        break;
 80045fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d074      	beq.n	80046ec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	005a      	lsls	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b0f      	cmp	r3, #15
 800461e:	d916      	bls.n	800464e <UART_SetConfig+0x402>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004626:	d212      	bcs.n	800464e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f023 030f 	bic.w	r3, r3, #15
 8004630:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	b29b      	uxth	r3, r3
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	b29a      	uxth	r2, r3
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	4313      	orrs	r3, r2
 8004642:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	89fa      	ldrh	r2, [r7, #14]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e04e      	b.n	80046ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	77bb      	strb	r3, [r7, #30]
 8004652:	e04b      	b.n	80046ec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004654:	7ffb      	ldrb	r3, [r7, #31]
 8004656:	2b08      	cmp	r3, #8
 8004658:	d827      	bhi.n	80046aa <UART_SetConfig+0x45e>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0x414>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004685 	.word	0x08004685
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004695 	.word	0x08004695
 800466c:	080046ab 	.word	0x080046ab
 8004670:	0800469b 	.word	0x0800469b
 8004674:	080046ab 	.word	0x080046ab
 8004678:	080046ab 	.word	0x080046ab
 800467c:	080046ab 	.word	0x080046ab
 8004680:	080046a3 	.word	0x080046a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004684:	f7fe fa5a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8004688:	61b8      	str	r0, [r7, #24]
        break;
 800468a:	e013      	b.n	80046b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe fa6a 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <UART_SetConfig+0x4c0>)
 8004696:	61bb      	str	r3, [r7, #24]
        break;
 8004698:	e00c      	b.n	80046b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469a:	f7fe f961 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800469e:	61b8      	str	r0, [r7, #24]
        break;
 80046a0:	e008      	b.n	80046b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a6:	61bb      	str	r3, [r7, #24]
        break;
 80046a8:	e004      	b.n	80046b4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	77bb      	strb	r3, [r7, #30]
        break;
 80046b2:	bf00      	nop
    }

    if (pclk != 0U)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	085a      	lsrs	r2, r3, #1
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d908      	bls.n	80046e8 <UART_SetConfig+0x49c>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d204      	bcs.n	80046e8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e001      	b.n	80046ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40007c00 	.word	0x40007c00
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400

08004710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01a      	beq.n	8004826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480e:	d10a      	bne.n	8004826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004864:	f7fb fe72 	bl	800054c <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d10e      	bne.n	8004896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f817 	bl	80048ba <UART_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e00d      	b.n	80048b2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ca:	e05e      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d2:	d05a      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d4:	f7fb fe3a 	bl	800054c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <UART_WaitOnFlagUntilTimeout+0x30>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11b      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e043      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02c      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d124      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004948:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004958:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d091      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d10e      	bne.n	8004a06 <UART_Start_Receive_IT+0x52>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <UART_Start_Receive_IT+0x48>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049fa:	e02d      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a04:	e028      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <UART_Start_Receive_IT+0x76>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <UART_Start_Receive_IT+0x6c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a1e:	e01b      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a28:	e016      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a32:	d10d      	bne.n	8004a50 <UART_Start_Receive_IT+0x9c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <UART_Start_Receive_IT+0x92>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a44:	e008      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	223f      	movs	r2, #63	; 0x3f
 8004a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a4e:	e003      	b.n	8004a58 <UART_Start_Receive_IT+0xa4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2222      	movs	r2, #34	; 0x22
 8004a64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7e:	d107      	bne.n	8004a90 <UART_Start_Receive_IT+0xdc>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <UART_Start_Receive_IT+0x108>)
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
 8004a8e:	e002      	b.n	8004a96 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <UART_Start_Receive_IT+0x10c>)
 8004a94:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004aac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	08004c9d 	.word	0x08004c9d
 8004ac0:	08004bc9 	.word	0x08004bc9

08004ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ada:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0210 	bic.w	r2, r2, #16
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fb63 	bl	800420c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	220f      	movs	r2, #15
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0208 	orr.w	r2, r2, #8
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fb49 	bl	8004220 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fb1c 	bl	80041f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bd6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bdc:	2b22      	cmp	r3, #34	; 0x22
 8004bde:	d151      	bne.n	8004c84 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004be8:	89bb      	ldrh	r3, [r7, #12]
 8004bea:	b2d9      	uxtb	r1, r3
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d138      	bne.n	8004c94 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c30:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10f      	bne.n	8004c76 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0210 	bic.w	r2, r2, #16
 8004c64:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fae0 	bl	8004234 <HAL_UARTEx_RxEventCallback>
 8004c74:	e002      	b.n	8004c7c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f006 ffa4 	bl	800bbc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c82:	e007      	b.n	8004c94 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	619a      	str	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004caa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb0:	2b22      	cmp	r3, #34	; 0x22
 8004cb2:	d151      	bne.n	8004d58 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cc2:	89ba      	ldrh	r2, [r7, #12]
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	1c9a      	adds	r2, r3, #2
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d138      	bne.n	8004d68 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d04:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10f      	bne.n	8004d4a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0210 	bic.w	r2, r2, #16
 8004d38:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fa76 	bl	8004234 <HAL_UARTEx_RxEventCallback>
 8004d48:	e002      	b.n	8004d50 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f006 ff3a 	bl	800bbc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d56:	e007      	b.n	8004d68 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	619a      	str	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d70:	b084      	sub	sp, #16
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	f107 001c 	add.w	r0, r7, #28
 8004d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d120      	bne.n	8004dca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <USB_CoreInit+0xac>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d105      	bne.n	8004dbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fad6 	bl	8006370 <USB_CoreReset>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e010      	b.n	8004dec <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 faca 	bl	8006370 <USB_CoreReset>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10b      	bne.n	8004e0a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f043 0206 	orr.w	r2, r3, #6
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e16:	b004      	add	sp, #16
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	ffbdffbf 	.word	0xffbdffbf

08004e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d165      	bne.n	8004f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a41      	ldr	r2, [pc, #260]	; (8004f3c <USB_SetTurnaroundTime+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d906      	bls.n	8004e4a <USB_SetTurnaroundTime+0x2a>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e44:	230f      	movs	r3, #15
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e062      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d306      	bcc.n	8004e60 <USB_SetTurnaroundTime+0x40>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d202      	bcs.n	8004e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e057      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d306      	bcc.n	8004e76 <USB_SetTurnaroundTime+0x56>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a37      	ldr	r2, [pc, #220]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d202      	bcs.n	8004e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e70:	230d      	movs	r3, #13
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e04c      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a33      	ldr	r2, [pc, #204]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d306      	bcc.n	8004e8c <USB_SetTurnaroundTime+0x6c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e86:	230c      	movs	r3, #12
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e041      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0x82>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d802      	bhi.n	8004ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e9c:	230b      	movs	r3, #11
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e036      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d906      	bls.n	8004eb8 <USB_SetTurnaroundTime+0x98>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <USB_SetTurnaroundTime+0x134>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e02b      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <USB_SetTurnaroundTime+0x134>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0xae>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <USB_SetTurnaroundTime+0x138>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec8:	2309      	movs	r3, #9
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e020      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <USB_SetTurnaroundTime+0x138>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d306      	bcc.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <USB_SetTurnaroundTime+0x13c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d802      	bhi.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e015      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <USB_SetTurnaroundTime+0x13c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d906      	bls.n	8004efa <USB_SetTurnaroundTime+0xda>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <USB_SetTurnaroundTime+0x140>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d202      	bcs.n	8004efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef4:	2307      	movs	r3, #7
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e00a      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004efa:	2306      	movs	r3, #6
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e007      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f06:	2309      	movs	r3, #9
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e001      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f0c:	2309      	movs	r3, #9
 8004f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	00d8acbf 	.word	0x00d8acbf
 8004f40:	00e4e1c0 	.word	0x00e4e1c0
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	01067380 	.word	0x01067380
 8004f4c:	011a499f 	.word	0x011a499f
 8004f50:	01312cff 	.word	0x01312cff
 8004f54:	014ca43f 	.word	0x014ca43f
 8004f58:	016e3600 	.word	0x016e3600
 8004f5c:	01a6ab1f 	.word	0x01a6ab1f
 8004f60:	01e84800 	.word	0x01e84800

08004f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d106      	bne.n	8004fd4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	e00b      	b.n	8004fec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e003      	b.n	8004ff4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fec:	2032      	movs	r0, #50	; 0x32
 8004fee:	f7fb fab9 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800500a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e009      	b.n	8005030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3340      	adds	r3, #64	; 0x40
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b0e      	cmp	r3, #14
 8005034:	d9f2      	bls.n	800501c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11c      	bne.n	8005076 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800504a:	f043 0302 	orr.w	r3, r3, #2
 800504e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e005      	b.n	8005082 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005088:	461a      	mov	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	4619      	mov	r1, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	461a      	mov	r2, r3
 800509e:	680b      	ldr	r3, [r1, #0]
 80050a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ae:	2100      	movs	r1, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f959 	bl	8005368 <USB_SetDevSpeed>
 80050b6:	e018      	b.n	80050ea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050b8:	2101      	movs	r1, #1
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f954 	bl	8005368 <USB_SetDevSpeed>
 80050c0:	e013      	b.n	80050ea <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d10c      	bne.n	80050e2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ce:	2100      	movs	r1, #0
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f949 	bl	8005368 <USB_SetDevSpeed>
 80050d6:	e008      	b.n	80050ea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050d8:	2101      	movs	r1, #1
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f944 	bl	8005368 <USB_SetDevSpeed>
 80050e0:	e003      	b.n	80050ea <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050e2:	2103      	movs	r1, #3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f93f 	bl	8005368 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ea:	2110      	movs	r1, #16
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8f3 	bl	80052d8 <USB_FlushTxFifo>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f911 	bl	8005324 <USB_FlushRxFifo>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e043      	b.n	80051be <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514c:	d118      	bne.n	8005180 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e013      	b.n	8005192 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e008      	b.n	8005192 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	2300      	movs	r3, #0
 8005190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	461a      	mov	r2, r3
 80051b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	3301      	adds	r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d3b7      	bcc.n	8005136 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e043      	b.n	8005254 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e2:	d118      	bne.n	8005216 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e013      	b.n	8005228 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e008      	b.n	8005228 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800524c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3301      	adds	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d3b7      	bcc.n	80051cc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800527c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 0210 	orr.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <USB_DevInit+0x2d4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f043 0208 	orr.w	r2, r3, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <USB_DevInit+0x2d8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052cc:	b004      	add	sp, #16
 80052ce:	4770      	bx	lr
 80052d0:	803c3800 	.word	0x803c3800
 80052d4:	40000004 	.word	0x40000004

080052d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	f043 0220 	orr.w	r2, r3, #32
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <USB_FlushTxFifo+0x48>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b20      	cmp	r3, #32
 800530e:	d0f0      	beq.n	80052f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	00030d40 	.word	0x00030d40

08005324 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2210      	movs	r2, #16
 8005334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <USB_FlushRxFifo+0x40>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d0f0      	beq.n	8005336 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	00030d40 	.word	0x00030d40

08005368 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0306 	and.w	r3, r3, #6
 80053b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
 80053be:	e00a      	b.n	80053d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d002      	beq.n	80053cc <USB_GetDevSpeed+0x32>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d102      	bne.n	80053d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053cc:	2302      	movs	r3, #2
 80053ce:	75fb      	strb	r3, [r7, #23]
 80053d0:	e001      	b.n	80053d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053d2:	230f      	movs	r3, #15
 80053d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d139      	bne.n	8005474 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541e:	4313      	orrs	r3, r2
 8005420:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d153      	bne.n	80054e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005454:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800545c:	431a      	orrs	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	0159      	lsls	r1, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	440b      	add	r3, r1
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	4619      	mov	r1, r3
 800546c:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <USB_ActivateEndpoint+0x10c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]
 8005472:	e035      	b.n	80054e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005492:	4313      	orrs	r3, r2
 8005494:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d119      	bne.n	80054e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054c8:	430b      	orrs	r3, r1
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	0159      	lsls	r1, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	440b      	add	r3, r1
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	4619      	mov	r1, r3
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <USB_ActivateEndpoint+0x10c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	10008000 	.word	0x10008000

080054f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d161      	bne.n	80055d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005526:	d11f      	bne.n	8005568 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005546:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ac:	4013      	ands	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	0159      	lsls	r1, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	4619      	mov	r1, r3
 80055cc:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <USB_DeactivateEndpoint+0x1b0>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
 80055d2:	e060      	b.n	8005696 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ea:	d11f      	bne.n	800562c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800560a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	43db      	mvns	r3, r3
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4013      	ands	r3, r2
 800564e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	2101      	movs	r1, #1
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	43db      	mvns	r3, r3
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005670:	4013      	ands	r3, r2
 8005672:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	0159      	lsls	r1, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	440b      	add	r3, r1
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	4619      	mov	r1, r3
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <USB_DeactivateEndpoint+0x1b4>)
 8005692:	4013      	ands	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	ec337800 	.word	0xec337800
 80056a8:	eff37800 	.word	0xeff37800

080056ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 8163 	bne.w	8005994 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d132      	bne.n	800573c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	440b      	add	r3, r1
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	4619      	mov	r1, r3
 80056f2:	4ba5      	ldr	r3, [pc, #660]	; (8005988 <USB_EPStartXfer+0x2dc>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	0159      	lsls	r1, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	440b      	add	r3, r1
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	4619      	mov	r1, r3
 8005734:	4b95      	ldr	r3, [pc, #596]	; (800598c <USB_EPStartXfer+0x2e0>)
 8005736:	4013      	ands	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
 800573a:	e074      	b.n	8005826 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	0159      	lsls	r1, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	440b      	add	r3, r1
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	4619      	mov	r1, r3
 8005758:	4b8c      	ldr	r3, [pc, #560]	; (800598c <USB_EPStartXfer+0x2e0>)
 800575a:	4013      	ands	r3, r2
 800575c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	0159      	lsls	r1, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	440b      	add	r3, r1
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	4619      	mov	r1, r3
 800577a:	4b83      	ldr	r3, [pc, #524]	; (8005988 <USB_EPStartXfer+0x2dc>)
 800577c:	4013      	ands	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	440b      	add	r3, r1
 8005798:	1e59      	subs	r1, r3, #1
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a2:	04d9      	lsls	r1, r3, #19
 80057a4:	4b7a      	ldr	r3, [pc, #488]	; (8005990 <USB_EPStartXfer+0x2e4>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	0148      	lsls	r0, r1, #5
 80057ac:	69f9      	ldr	r1, [r7, #28]
 80057ae:	4401      	add	r1, r0
 80057b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057b4:	4313      	orrs	r3, r2
 80057b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ce:	69b9      	ldr	r1, [r7, #24]
 80057d0:	0148      	lsls	r0, r1, #5
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	4401      	add	r1, r0
 80057d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	78db      	ldrb	r3, [r3, #3]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d11f      	bne.n	8005826 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005804:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005824:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d14b      	bne.n	80058c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d128      	bne.n	80058a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e00f      	b.n	80058a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e133      	b.n	8005b2c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d015      	beq.n	8005918 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 811b 	beq.w	8005b2c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005912:	4313      	orrs	r3, r2
 8005914:	634b      	str	r3, [r1, #52]	; 0x34
 8005916:	e109      	b.n	8005b2c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e00f      	b.n	800596a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68d9      	ldr	r1, [r3, #12]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	b298      	uxth	r0, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4603      	mov	r3, r0
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fa38 	bl	8005df4 <USB_WritePacket>
 8005984:	e0d2      	b.n	8005b2c <USB_EPStartXfer+0x480>
 8005986:	bf00      	nop
 8005988:	e007ffff 	.word	0xe007ffff
 800598c:	fff80000 	.word	0xfff80000
 8005990:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	4619      	mov	r1, r3
 80059b0:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <USB_EPStartXfer+0x48c>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	0159      	lsls	r1, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	440b      	add	r3, r1
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	4619      	mov	r1, r3
 80059d2:	4b5a      	ldr	r3, [pc, #360]	; (8005b3c <USB_EPStartXfer+0x490>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d123      	bne.n	8005a28 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f6:	69b9      	ldr	r1, [r7, #24]
 80059f8:	0148      	lsls	r0, r1, #5
 80059fa:	69f9      	ldr	r1, [r7, #28]
 80059fc:	4401      	add	r1, r0
 80059fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e033      	b.n	8005a90 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <USB_EPStartXfer+0x494>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	0148      	lsls	r0, r1, #5
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	8af9      	ldrh	r1, [r7, #22]
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	0148      	lsls	r0, r1, #5
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	4401      	add	r1, r0
 8005a88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10d      	bne.n	8005ab2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	460a      	mov	r2, r1
 8005ab0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d128      	bne.n	8005b0c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d110      	bne.n	8005aec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e00f      	b.n	8005b0c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	fff80000 	.word	0xfff80000
 8005b3c:	e007ffff 	.word	0xe007ffff
 8005b40:	1ff80000 	.word	0x1ff80000

08005b44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 80cd 	bne.w	8005d00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d132      	bne.n	8005bd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	440b      	add	r3, r1
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4b98      	ldr	r3, [pc, #608]	; (8005dec <USB_EP0StartXfer+0x2a8>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	0159      	lsls	r1, r3, #5
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	440b      	add	r3, r1
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4b88      	ldr	r3, [pc, #544]	; (8005df0 <USB_EP0StartXfer+0x2ac>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]
 8005bd2:	e04e      	b.n	8005c72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	0159      	lsls	r1, r3, #5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4b7f      	ldr	r3, [pc, #508]	; (8005df0 <USB_EP0StartXfer+0x2ac>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	0159      	lsls	r1, r3, #5
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	4619      	mov	r1, r3
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <USB_EP0StartXfer+0x2a8>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c62:	6939      	ldr	r1, [r7, #16]
 8005c64:	0148      	lsls	r0, r1, #5
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	4401      	add	r1, r0
 8005c6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d11e      	bne.n	8005cb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e092      	b.n	8005ddc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d07e      	beq.n	8005ddc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	634b      	str	r3, [r1, #52]	; 0x34
 8005cfe:	e06d      	b.n	8005ddc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	0159      	lsls	r1, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	440b      	add	r3, r1
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <USB_EP0StartXfer+0x2ac>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	0159      	lsls	r1, r3, #5
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <USB_EP0StartXfer+0x2a8>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8a:	6939      	ldr	r1, [r7, #16]
 8005d8c:	0148      	lsls	r0, r1, #5
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	4401      	add	r1, r0
 8005d92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10d      	bne.n	8005dbc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	460a      	mov	r2, r1
 8005dba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	e007ffff 	.word	0xe007ffff
 8005df0:	fff80000 	.word	0xfff80000

08005df4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	460b      	mov	r3, r1
 8005e04:	71fb      	strb	r3, [r7, #7]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d11a      	bne.n	8005e50 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e1a:	88bb      	ldrh	r3, [r7, #4]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e00f      	b.n	8005e48 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	031a      	lsls	r2, r3, #12
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e34:	461a      	mov	r2, r3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d3eb      	bcc.n	8005e28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b089      	sub	sp, #36	; 0x24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	3303      	adds	r3, #3
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e00b      	b.n	8005e9a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3304      	adds	r3, #4
 8005e92:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3ef      	bcc.n	8005e82 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3724      	adds	r7, #36	; 0x24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d12c      	bne.n	8005f26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db12      	blt.n	8005f04 <USB_EPSetStall+0x54>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00f      	beq.n	8005f04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e02b      	b.n	8005f7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db12      	blt.n	8005f5e <USB_EPSetStall+0xae>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00f      	beq.n	8005f5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d128      	bne.n	8005ffa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	78db      	ldrb	r3, [r3, #3]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d003      	beq.n	8005fd8 <USB_EPClearStall+0x4c>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	78db      	ldrb	r3, [r3, #3]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d138      	bne.n	800604a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e027      	b.n	800604a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006014:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006018:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d003      	beq.n	800602a <USB_EPClearStall+0x9e>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	78db      	ldrb	r3, [r3, #3]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d10f      	bne.n	800604a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006076:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800607a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800608c:	68f9      	ldr	r1, [r7, #12]
 800608e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006092:	4313      	orrs	r3, r2
 8006094:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d2:	f023 0302 	bic.w	r3, r3, #2
 80060d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	0c1b      	lsrs	r3, r3, #16
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	4013      	ands	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	b29b      	uxth	r3, r3
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4013      	ands	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061e4:	68bb      	ldr	r3, [r7, #8]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	01db      	lsls	r3, r3, #7
 8006224:	b2db      	uxtb	r3, r3
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4013      	ands	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006240:	68bb      	ldr	r3, [r7, #8]
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0301 	and.w	r3, r3, #1
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	4619      	mov	r1, r3
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <USB_ActivateSetup+0x44>)
 800628a:	4013      	ands	r3, r2
 800628c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	fffff800 	.word	0xfffff800

080062b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	460b      	mov	r3, r1
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	333c      	adds	r3, #60	; 0x3c
 80062ca:	3304      	adds	r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4a26      	ldr	r2, [pc, #152]	; (800636c <USB_EP0_OutStart+0xb8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d90a      	bls.n	80062ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e8:	d101      	bne.n	80062ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e037      	b.n	800635e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800630c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631c:	f043 0318 	orr.w	r3, r3, #24
 8006320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006334:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10f      	bne.n	800635c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006356:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800635a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	4f54300a 	.word	0x4f54300a

08006370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <USB_CoreReset+0x64>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e01b      	b.n	80063c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	daf2      	bge.n	800637c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f043 0201 	orr.w	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <USB_CoreReset+0x64>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d0f0      	beq.n	80063a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	00030d40 	.word	0x00030d40

080063d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063e8:	f007 f862 	bl	800d4b0 <malloc>
 80063ec:	4603      	mov	r3, r0
 80063ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d105      	bne.n	8006402 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063fe:	2302      	movs	r3, #2
 8006400:	e066      	b.n	80064d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7c1b      	ldrb	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	2202      	movs	r2, #2
 8006418:	2181      	movs	r1, #129	; 0x81
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f006 fa8b 	bl	800c936 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642a:	2202      	movs	r2, #2
 800642c:	2101      	movs	r1, #1
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f006 fa81 	bl	800c936 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2210      	movs	r2, #16
 8006440:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006444:	e016      	b.n	8006474 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006446:	2340      	movs	r3, #64	; 0x40
 8006448:	2202      	movs	r2, #2
 800644a:	2181      	movs	r1, #129	; 0x81
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f006 fa72 	bl	800c936 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	2202      	movs	r2, #2
 800645c:	2101      	movs	r1, #1
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f006 fa69 	bl	800c936 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2210      	movs	r2, #16
 8006470:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006474:	2308      	movs	r3, #8
 8006476:	2203      	movs	r2, #3
 8006478:	2182      	movs	r1, #130	; 0x82
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f006 fa5b 	bl	800c936 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c1b      	ldrb	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b4:	2101      	movs	r1, #1
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f006 fb2c 	bl	800cb14 <USBD_LL_PrepareReceive>
 80064bc:	e007      	b.n	80064ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064c4:	2340      	movs	r3, #64	; 0x40
 80064c6:	2101      	movs	r1, #1
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f006 fb23 	bl	800cb14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064e8:	2181      	movs	r1, #129	; 0x81
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f006 fa49 	bl	800c982 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f006 fa42 	bl	800c982 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006506:	2182      	movs	r1, #130	; 0x82
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f006 fa3a 	bl	800c982 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006538:	4618      	mov	r0, r3
 800653a:	f006 ffc1 	bl	800d4c0 <free>
    pdev->pClassData = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006560:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006576:	2b00      	cmp	r3, #0
 8006578:	d03a      	beq.n	80065f0 <USBD_CDC_Setup+0xa0>
 800657a:	2b20      	cmp	r3, #32
 800657c:	f040 8097 	bne.w	80066ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	88db      	ldrh	r3, [r3, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d029      	beq.n	80065dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b25b      	sxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	da11      	bge.n	80065b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800659e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	88d2      	ldrh	r2, [r2, #6]
 80065a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	88db      	ldrh	r3, [r3, #6]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 faa6 	bl	8007b00 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80065b4:	e082      	b.n	80066bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785a      	ldrb	r2, [r3, #1]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	88db      	ldrh	r3, [r3, #6]
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80065cc:	6939      	ldr	r1, [r7, #16]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fabf 	bl	8007b58 <USBD_CtlPrepareRx>
    break;
 80065da:	e06f      	b.n	80066bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	7850      	ldrb	r0, [r2, #1]
 80065e8:	2200      	movs	r2, #0
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	4798      	blx	r3
    break;
 80065ee:	e065      	b.n	80066bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b0b      	cmp	r3, #11
 80065f6:	d84f      	bhi.n	8006698 <USBD_CDC_Setup+0x148>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <USBD_CDC_Setup+0xb0>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006631 	.word	0x08006631
 8006604:	080066a7 	.word	0x080066a7
 8006608:	08006699 	.word	0x08006699
 800660c:	08006699 	.word	0x08006699
 8006610:	08006699 	.word	0x08006699
 8006614:	08006699 	.word	0x08006699
 8006618:	08006699 	.word	0x08006699
 800661c:	08006699 	.word	0x08006699
 8006620:	08006699 	.word	0x08006699
 8006624:	08006699 	.word	0x08006699
 8006628:	08006659 	.word	0x08006659
 800662c:	08006681 	.word	0x08006681
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006636:	2b03      	cmp	r3, #3
 8006638:	d107      	bne.n	800664a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	2202      	movs	r2, #2
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fa5c 	bl	8007b00 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006648:	e030      	b.n	80066ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f9e6 	bl	8007a1e <USBD_CtlError>
        ret = USBD_FAIL;
 8006652:	2303      	movs	r3, #3
 8006654:	75fb      	strb	r3, [r7, #23]
      break;
 8006656:	e029      	b.n	80066ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665e:	2b03      	cmp	r3, #3
 8006660:	d107      	bne.n	8006672 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006662:	f107 030f 	add.w	r3, r7, #15
 8006666:	2201      	movs	r2, #1
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fa48 	bl	8007b00 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006670:	e01c      	b.n	80066ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f9d2 	bl	8007a1e <USBD_CtlError>
        ret = USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	75fb      	strb	r3, [r7, #23]
      break;
 800667e:	e015      	b.n	80066ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006686:	2b03      	cmp	r3, #3
 8006688:	d00f      	beq.n	80066aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f9c6 	bl	8007a1e <USBD_CtlError>
        ret = USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006696:	e008      	b.n	80066aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 f9bf 	bl	8007a1e <USBD_CtlError>
      ret = USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	75fb      	strb	r3, [r7, #23]
      break;
 80066a4:	e002      	b.n	80066ac <USBD_CDC_Setup+0x15c>
      break;
 80066a6:	bf00      	nop
 80066a8:	e008      	b.n	80066bc <USBD_CDC_Setup+0x16c>
      break;
 80066aa:	bf00      	nop
    }
    break;
 80066ac:	e006      	b.n	80066bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f9b4 	bl	8007a1e <USBD_CtlError>
    ret = USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	75fb      	strb	r3, [r7, #23]
    break;
 80066ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e049      	b.n	800677e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066f2:	78fa      	ldrb	r2, [r7, #3]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3318      	adds	r3, #24
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d029      	beq.n	800675c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	3318      	adds	r3, #24
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	78f9      	ldrb	r1, [r7, #3]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	460b      	mov	r3, r1
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	1a5b      	subs	r3, r3, r1
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	3344      	adds	r3, #68	; 0x44
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006730:	fb03 f301 	mul.w	r3, r3, r1
 8006734:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006736:	2b00      	cmp	r3, #0
 8006738:	d110      	bne.n	800675c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3318      	adds	r3, #24
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800674e:	78f9      	ldrb	r1, [r7, #3]
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f006 f9bc 	bl	800cad2 <USBD_LL_Transmit>
 800675a:	e00f      	b.n	800677c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006798:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e015      	b.n	80067d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f006 f9d2 	bl	800cb56 <USBD_LL_GetRxDataSize>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067ce:	4611      	mov	r1, r2
 80067d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d015      	beq.n	8006822 <USBD_CDC_EP0_RxReady+0x46>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067fc:	2bff      	cmp	r3, #255	; 0xff
 80067fe:	d010      	beq.n	8006822 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800680e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006816:	b292      	uxth	r2, r2
 8006818:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	22ff      	movs	r2, #255	; 0xff
 800681e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2243      	movs	r2, #67	; 0x43
 8006838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800683a:	4b03      	ldr	r3, [pc, #12]	; (8006848 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	20000090 	.word	0x20000090

0800684c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2243      	movs	r2, #67	; 0x43
 8006858:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	2000004c 	.word	0x2000004c

0800686c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2243      	movs	r2, #67	; 0x43
 8006878:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800687a:	4b03      	ldr	r3, [pc, #12]	; (8006888 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	200000d4 	.word	0x200000d4

0800688c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	220a      	movs	r2, #10
 8006898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	20000008 	.word	0x20000008

080068ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	e004      	b.n	80068ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006918:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800694a:	2303      	movs	r3, #3
 800694c:	e016      	b.n	800697c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7c1b      	ldrb	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800695c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006960:	2101      	movs	r1, #1
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f006 f8d6 	bl	800cb14 <USBD_LL_PrepareReceive>
 8006968:	e007      	b.n	800697a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006970:	2340      	movs	r3, #64	; 0x40
 8006972:	2101      	movs	r1, #1
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f006 f8cd 	bl	800cb14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e025      	b.n	80069e8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	79fa      	ldrb	r2, [r7, #7]
 80069da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f005 ff43 	bl	800c868 <USBD_LL_Init>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e010      	b.n	8006a2a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	f107 020e 	add.w	r2, r7, #14
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f005 ff60 	bl	800c900 <USBD_LL_Start>
 8006a40:	4603      	mov	r3, r0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	4611      	mov	r1, r2
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
  }

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 ff65 	bl	80079aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d01a      	beq.n	8006b3a <USBD_LL_SetupStage+0x72>
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d822      	bhi.n	8006b4e <USBD_LL_SetupStage+0x86>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <USBD_LL_SetupStage+0x4a>
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d00a      	beq.n	8006b26 <USBD_LL_SetupStage+0x5e>
 8006b10:	e01d      	b.n	8006b4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa18 	bl	8006f50 <USBD_StdDevReq>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	e020      	b.n	8006b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa7c 	bl	800702c <USBD_StdItfReq>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e016      	b.n	8006b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 faba 	bl	80070bc <USBD_StdEPReq>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4c:	e00c      	b.n	8006b68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f005 ff2f 	bl	800c9c0 <USBD_LL_StallEP>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
      break;
 8006b66:	bf00      	nop
  }

  return ret;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d137      	bne.n	8006bf6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d14a      	bne.n	8006c2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d913      	bls.n	8006bcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	bf28      	it	cs
 8006bbe:	4613      	movcs	r3, r2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 ffe4 	bl	8007b92 <USBD_CtlContinueRx>
 8006bca:	e030      	b.n	8006c2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d105      	bne.n	8006bee <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 ffe0 	bl	8007bb4 <USBD_CtlSendStatus>
 8006bf4:	e01b      	b.n	8006c2e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d013      	beq.n	8006c2a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d10e      	bne.n	8006c2a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	7afa      	ldrb	r2, [r7, #11]
 8006c16:	4611      	mov	r1, r2
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	4798      	blx	r3
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	e002      	b.n	8006c30 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e000      	b.n	8006c30 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	460b      	mov	r3, r1
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d16a      	bne.n	8006d22 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d155      	bne.n	8006d08 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d914      	bls.n	8006c92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	1ad2      	subs	r2, r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 ff59 	bl	8007b36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c84:	2300      	movs	r3, #0
 8006c86:	2200      	movs	r2, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f005 ff42 	bl	800cb14 <USBD_LL_PrepareReceive>
 8006c90:	e03a      	b.n	8006d08 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d11c      	bne.n	8006cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d316      	bcc.n	8006cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d20f      	bcs.n	8006cd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 ff3a 	bl	8007b36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f005 ff1f 	bl	800cb14 <USBD_LL_PrepareReceive>
 8006cd6:	e017      	b.n	8006d08 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d105      	bne.n	8006cfa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f005 fe5f 	bl	800c9c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 ff69 	bl	8007bda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d123      	bne.n	8006d5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fe99 	bl	8006a4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d20:	e01b      	b.n	8006d5a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d10e      	bne.n	8006d56 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	7afa      	ldrb	r2, [r7, #11]
 8006d42:	4611      	mov	r1, r2
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	4798      	blx	r3
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	e002      	b.n	8006d5c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e000      	b.n	8006d5c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6852      	ldr	r2, [r2, #4]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	4611      	mov	r1, r2
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f005 fdc1 	bl	800c936 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2240      	movs	r2, #64	; 0x40
 8006dc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f005 fdb3 	bl	800c936 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2240      	movs	r2, #64	; 0x40
 8006dda:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d105      	bne.n	8006e4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d10b      	bne.n	8006e86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	4611      	mov	r1, r2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
  }

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b087      	sub	sp, #28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f30:	8a3b      	ldrh	r3, [r7, #16]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	b21a      	sxth	r2, r3
 8006f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f40:	89fb      	ldrh	r3, [r7, #14]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d005      	beq.n	8006f76 <USBD_StdDevReq+0x26>
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d853      	bhi.n	8007016 <USBD_StdDevReq+0xc6>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <USBD_StdDevReq+0x3a>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d14f      	bne.n	8007016 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
    break;
 8006f88:	e04a      	b.n	8007020 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d83b      	bhi.n	800700a <USBD_StdDevReq+0xba>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <USBD_StdDevReq+0x48>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08007001 	.word	0x08007001
 8006fa0:	0800700b 	.word	0x0800700b
 8006fa4:	08006ff7 	.word	0x08006ff7
 8006fa8:	0800700b 	.word	0x0800700b
 8006fac:	08006fcb 	.word	0x08006fcb
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	0800700b 	.word	0x0800700b
 8006fb8:	08006fe3 	.word	0x08006fe3
 8006fbc:	08006fd5 	.word	0x08006fd5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9d8 	bl	8007378 <USBD_GetDescriptor>
      break;
 8006fc8:	e024      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fb67 	bl	80076a0 <USBD_SetAddress>
      break;
 8006fd2:	e01f      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fba6 	bl	8007728 <USBD_SetConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	e018      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc43 	bl	8007870 <USBD_GetConfig>
      break;
 8006fea:	e013      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc73 	bl	80078da <USBD_GetStatus>
      break;
 8006ff4:	e00e      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fca1 	bl	8007940 <USBD_SetFeature>
      break;
 8006ffe:	e009      	b.n	8007014 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fcb0 	bl	8007968 <USBD_ClrFeature>
      break;
 8007008:	e004      	b.n	8007014 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd06 	bl	8007a1e <USBD_CtlError>
      break;
 8007012:	bf00      	nop
    }
    break;
 8007014:	e004      	b.n	8007020 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fd00 	bl	8007a1e <USBD_CtlError>
    break;
 800701e:	bf00      	nop
  }

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop

0800702c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d005      	beq.n	8007052 <USBD_StdItfReq+0x26>
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d82e      	bhi.n	80070a8 <USBD_StdItfReq+0x7c>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <USBD_StdItfReq+0x26>
 800704e:	2b20      	cmp	r3, #32
 8007050:	d12a      	bne.n	80070a8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	3b01      	subs	r3, #1
 800705a:	2b02      	cmp	r3, #2
 800705c:	d81d      	bhi.n	800709a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d813      	bhi.n	8007090 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d110      	bne.n	80070a4 <USBD_StdItfReq+0x78>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10d      	bne.n	80070a4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fd93 	bl	8007bb4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800708e:	e009      	b.n	80070a4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fcc3 	bl	8007a1e <USBD_CtlError>
      break;
 8007098:	e004      	b.n	80070a4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fcbe 	bl	8007a1e <USBD_CtlError>
      break;
 80070a2:	e000      	b.n	80070a6 <USBD_StdItfReq+0x7a>
      break;
 80070a4:	bf00      	nop
    }
    break;
 80070a6:	e004      	b.n	80070b2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fcb7 	bl	8007a1e <USBD_CtlError>
    break;
 80070b0:	bf00      	nop
  }

  return ret;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d007      	beq.n	80070ec <USBD_StdEPReq+0x30>
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	f200 8140 	bhi.w	8007362 <USBD_StdEPReq+0x2a6>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <USBD_StdEPReq+0x44>
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	f040 813b 	bne.w	8007362 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
    break;
 80070fe:	e135      	b.n	800736c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d007      	beq.n	8007118 <USBD_StdEPReq+0x5c>
 8007108:	2b03      	cmp	r3, #3
 800710a:	f300 8124 	bgt.w	8007356 <USBD_StdEPReq+0x29a>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d07b      	beq.n	800720a <USBD_StdEPReq+0x14e>
 8007112:	2b01      	cmp	r3, #1
 8007114:	d03b      	beq.n	800718e <USBD_StdEPReq+0xd2>
 8007116:	e11e      	b.n	8007356 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711e:	2b02      	cmp	r3, #2
 8007120:	d002      	beq.n	8007128 <USBD_StdEPReq+0x6c>
 8007122:	2b03      	cmp	r3, #3
 8007124:	d016      	beq.n	8007154 <USBD_StdEPReq+0x98>
 8007126:	e02c      	b.n	8007182 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <USBD_StdEPReq+0x8e>
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d00a      	beq.n	800714a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f005 fc41 	bl	800c9c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f005 fc3d 	bl	800c9c0 <USBD_LL_StallEP>
 8007146:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007148:	e020      	b.n	800718c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fc66 	bl	8007a1e <USBD_CtlError>
        break;
 8007152:	e01b      	b.n	800718c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	885b      	ldrh	r3, [r3, #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10e      	bne.n	800717a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <USBD_StdEPReq+0xbe>
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b80      	cmp	r3, #128	; 0x80
 8007166:	d008      	beq.n	800717a <USBD_StdEPReq+0xbe>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	88db      	ldrh	r3, [r3, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f005 fc23 	bl	800c9c0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd1a 	bl	8007bb4 <USBD_CtlSendStatus>

        break;
 8007180:	e004      	b.n	800718c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc4a 	bl	8007a1e <USBD_CtlError>
        break;
 800718a:	bf00      	nop
      }
      break;
 800718c:	e0e8      	b.n	8007360 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007194:	2b02      	cmp	r3, #2
 8007196:	d002      	beq.n	800719e <USBD_StdEPReq+0xe2>
 8007198:	2b03      	cmp	r3, #3
 800719a:	d016      	beq.n	80071ca <USBD_StdEPReq+0x10e>
 800719c:	e02e      	b.n	80071fc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <USBD_StdEPReq+0x104>
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b80      	cmp	r3, #128	; 0x80
 80071a8:	d00a      	beq.n	80071c0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f005 fc06 	bl	800c9c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f005 fc02 	bl	800c9c0 <USBD_LL_StallEP>
 80071bc:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80071be:	e023      	b.n	8007208 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc2b 	bl	8007a1e <USBD_CtlError>
        break;
 80071c8:	e01e      	b.n	8007208 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	885b      	ldrh	r3, [r3, #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d119      	bne.n	8007206 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f005 fc0c 	bl	800c9fe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fce4 	bl	8007bb4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
        }
        break;
 80071fa:	e004      	b.n	8007206 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc0d 	bl	8007a1e <USBD_CtlError>
        break;
 8007204:	e000      	b.n	8007208 <USBD_StdEPReq+0x14c>
        break;
 8007206:	bf00      	nop
      }
      break;
 8007208:	e0aa      	b.n	8007360 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	2b02      	cmp	r3, #2
 8007212:	d002      	beq.n	800721a <USBD_StdEPReq+0x15e>
 8007214:	2b03      	cmp	r3, #3
 8007216:	d032      	beq.n	800727e <USBD_StdEPReq+0x1c2>
 8007218:	e097      	b.n	800734a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <USBD_StdEPReq+0x174>
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d004      	beq.n	8007230 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fbf8 	bl	8007a1e <USBD_CtlError>
          break;
 800722e:	e091      	b.n	8007354 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	da0b      	bge.n	8007250 <USBD_StdEPReq+0x194>
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	3310      	adds	r3, #16
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	3304      	adds	r3, #4
 800724e:	e00b      	b.n	8007268 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	3304      	adds	r3, #4
 8007268:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2202      	movs	r2, #2
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc42 	bl	8007b00 <USBD_CtlSendData>
        break;
 800727c:	e06a      	b.n	8007354 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800727e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	da11      	bge.n	80072aa <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3324      	adds	r3, #36	; 0x24
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d117      	bne.n	80072d0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fbbb 	bl	8007a1e <USBD_CtlError>
            break;
 80072a8:	e054      	b.n	8007354 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fba8 	bl	8007a1e <USBD_CtlError>
            break;
 80072ce:	e041      	b.n	8007354 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da0b      	bge.n	80072f0 <USBD_StdEPReq+0x234>
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	3310      	adds	r3, #16
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	e00b      	b.n	8007308 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <USBD_StdEPReq+0x25a>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d103      	bne.n	800731e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e00e      	b.n	800733c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f005 fb8a 	bl	800ca3c <USBD_LL_IsStallEP>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e002      	b.n	800733c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2202      	movs	r2, #2
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbdc 	bl	8007b00 <USBD_CtlSendData>
          break;
 8007348:	e004      	b.n	8007354 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb66 	bl	8007a1e <USBD_CtlError>
        break;
 8007352:	bf00      	nop
      }
      break;
 8007354:	e004      	b.n	8007360 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fb60 	bl	8007a1e <USBD_CtlError>
      break;
 800735e:	bf00      	nop
    }
    break;
 8007360:	e004      	b.n	800736c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fb5a 	bl	8007a1e <USBD_CtlError>
    break;
 800736a:	bf00      	nop
  }

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	2b0e      	cmp	r3, #14
 800739a:	f200 8152 	bhi.w	8007642 <USBD_GetDescriptor+0x2ca>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <USBD_GetDescriptor+0x2c>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	08007415 	.word	0x08007415
 80073a8:	0800742d 	.word	0x0800742d
 80073ac:	0800746d 	.word	0x0800746d
 80073b0:	08007643 	.word	0x08007643
 80073b4:	08007643 	.word	0x08007643
 80073b8:	080075e3 	.word	0x080075e3
 80073bc:	0800760f 	.word	0x0800760f
 80073c0:	08007643 	.word	0x08007643
 80073c4:	08007643 	.word	0x08007643
 80073c8:	08007643 	.word	0x08007643
 80073cc:	08007643 	.word	0x08007643
 80073d0:	08007643 	.word	0x08007643
 80073d4:	08007643 	.word	0x08007643
 80073d8:	08007643 	.word	0x08007643
 80073dc:	080073e1 	.word	0x080073e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	7c12      	ldrb	r2, [r2, #16]
 80073f8:	f107 0108 	add.w	r1, r7, #8
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007402:	e126      	b.n	8007652 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb09 	bl	8007a1e <USBD_CtlError>
      err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
    break;
 8007412:	e11e      	b.n	8007652 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	7c12      	ldrb	r2, [r2, #16]
 8007420:	f107 0108 	add.w	r1, r7, #8
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
 8007428:	60f8      	str	r0, [r7, #12]
    break;
 800742a:	e112      	b.n	8007652 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7c1b      	ldrb	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10d      	bne.n	8007450 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	f107 0208 	add.w	r2, r7, #8
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	2202      	movs	r2, #2
 800744c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800744e:	e100      	b.n	8007652 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
 8007460:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	2202      	movs	r2, #2
 8007468:	701a      	strb	r2, [r3, #0]
    break;
 800746a:	e0f2      	b.n	8007652 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	885b      	ldrh	r3, [r3, #2]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b05      	cmp	r3, #5
 8007474:	f200 80ac 	bhi.w	80075d0 <USBD_GetDescriptor+0x258>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_GetDescriptor+0x108>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	08007499 	.word	0x08007499
 8007484:	080074cd 	.word	0x080074cd
 8007488:	08007501 	.word	0x08007501
 800748c:	08007535 	.word	0x08007535
 8007490:	08007569 	.word	0x08007569
 8007494:	0800759d 	.word	0x0800759d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074ba:	e091      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faad 	bl	8007a1e <USBD_CtlError>
        err++;
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	3301      	adds	r3, #1
 80074c8:	72fb      	strb	r3, [r7, #11]
      break;
 80074ca:	e089      	b.n	80075e0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074ee:	e077      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa93 	bl	8007a1e <USBD_CtlError>
        err++;
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	3301      	adds	r3, #1
 80074fc:	72fb      	strb	r3, [r7, #11]
      break;
 80074fe:	e06f      	b.n	80075e0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007522:	e05d      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa79 	bl	8007a1e <USBD_CtlError>
        err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
      break;
 8007532:	e055      	b.n	80075e0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007556:	e043      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa5f 	bl	8007a1e <USBD_CtlError>
        err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
      break;
 8007566:	e03b      	b.n	80075e0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800758a:	e029      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa45 	bl	8007a1e <USBD_CtlError>
        err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
      break;
 800759a:	e021      	b.n	80075e0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075be:	e00f      	b.n	80075e0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa2b 	bl	8007a1e <USBD_CtlError>
        err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
      break;
 80075ce:	e007      	b.n	80075e0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa23 	bl	8007a1e <USBD_CtlError>
      err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80075de:	bf00      	nop
    }
    break;
 80075e0:	e037      	b.n	8007652 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7c1b      	ldrb	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	f107 0208 	add.w	r2, r7, #8
 80075f6:	4610      	mov	r0, r2
 80075f8:	4798      	blx	r3
 80075fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075fc:	e029      	b.n	8007652 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa0c 	bl	8007a1e <USBD_CtlError>
      err++;
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	3301      	adds	r3, #1
 800760a:	72fb      	strb	r3, [r7, #11]
    break;
 800760c:	e021      	b.n	8007652 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7c1b      	ldrb	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	f107 0208 	add.w	r2, r7, #8
 8007622:	4610      	mov	r0, r2
 8007624:	4798      	blx	r3
 8007626:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	2207      	movs	r2, #7
 800762e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007630:	e00f      	b.n	8007652 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f9f2 	bl	8007a1e <USBD_CtlError>
      err++;
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	3301      	adds	r3, #1
 800763e:	72fb      	strb	r3, [r7, #11]
    break;
 8007640:	e007      	b.n	8007652 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9ea 	bl	8007a1e <USBD_CtlError>
    err++;
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	3301      	adds	r3, #1
 800764e:	72fb      	strb	r3, [r7, #11]
    break;
 8007650:	bf00      	nop
  }

  if (err != 0U)
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11e      	bne.n	8007696 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	88db      	ldrh	r3, [r3, #6]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d016      	beq.n	800768e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007660:	893b      	ldrh	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	88da      	ldrh	r2, [r3, #6]
 800766a:	893b      	ldrh	r3, [r7, #8]
 800766c:	4293      	cmp	r3, r2
 800766e:	bf28      	it	cs
 8007670:	4613      	movcs	r3, r2
 8007672:	b29b      	uxth	r3, r3
 8007674:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007676:	893b      	ldrh	r3, [r7, #8]
 8007678:	461a      	mov	r2, r3
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa3f 	bl	8007b00 <USBD_CtlSendData>
 8007682:	e009      	b.n	8007698 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f9c9 	bl	8007a1e <USBD_CtlError>
 800768c:	e004      	b.n	8007698 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa90 	bl	8007bb4 <USBD_CtlSendStatus>
 8007694:	e000      	b.n	8007698 <USBD_GetDescriptor+0x320>
    return;
 8007696:	bf00      	nop
    }
  }
}
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	889b      	ldrh	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d130      	bne.n	8007714 <USBD_SetAddress+0x74>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d12c      	bne.n	8007714 <USBD_SetAddress+0x74>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	2b7f      	cmp	r3, #127	; 0x7f
 80076c0:	d828      	bhi.n	8007714 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	885b      	ldrh	r3, [r3, #2]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d104      	bne.n	80076e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f99f 	bl	8007a1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e0:	e01d      	b.n	800771e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7bfa      	ldrb	r2, [r7, #15]
 80076e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f005 f9d0 	bl	800ca94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa5d 	bl	8007bb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007708:	e009      	b.n	800771e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	e004      	b.n	800771e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f981 	bl	8007a1e <USBD_CtlError>
  }
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	4b4b      	ldr	r3, [pc, #300]	; (800786c <USBD_SetConfig+0x144>)
 800773e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007740:	4b4a      	ldr	r3, [pc, #296]	; (800786c <USBD_SetConfig+0x144>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d905      	bls.n	8007754 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f967 	bl	8007a1e <USBD_CtlError>
    return USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e087      	b.n	8007864 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775a:	2b02      	cmp	r3, #2
 800775c:	d002      	beq.n	8007764 <USBD_SetConfig+0x3c>
 800775e:	2b03      	cmp	r3, #3
 8007760:	d025      	beq.n	80077ae <USBD_SetConfig+0x86>
 8007762:	e071      	b.n	8007848 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007764:	4b41      	ldr	r3, [pc, #260]	; (800786c <USBD_SetConfig+0x144>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01c      	beq.n	80077a6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800776c:	4b3f      	ldr	r3, [pc, #252]	; (800786c <USBD_SetConfig+0x144>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007776:	4b3d      	ldr	r3, [pc, #244]	; (800786c <USBD_SetConfig+0x144>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff f96f 	bl	8006a60 <USBD_SetClassConfig>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f945 	bl	8007a1e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007794:	e065      	b.n	8007862 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa0c 	bl	8007bb4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2203      	movs	r2, #3
 80077a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80077a4:	e05d      	b.n	8007862 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa04 	bl	8007bb4 <USBD_CtlSendStatus>
    break;
 80077ac:	e059      	b.n	8007862 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80077ae:	4b2f      	ldr	r3, [pc, #188]	; (800786c <USBD_SetConfig+0x144>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d112      	bne.n	80077dc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80077be:	4b2b      	ldr	r3, [pc, #172]	; (800786c <USBD_SetConfig+0x144>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077c8:	4b28      	ldr	r3, [pc, #160]	; (800786c <USBD_SetConfig+0x144>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff f962 	bl	8006a98 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9ed 	bl	8007bb4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80077da:	e042      	b.n	8007862 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80077dc:	4b23      	ldr	r3, [pc, #140]	; (800786c <USBD_SetConfig+0x144>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d02a      	beq.n	8007840 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff f950 	bl	8006a98 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80077f8:	4b1c      	ldr	r3, [pc, #112]	; (800786c <USBD_SetConfig+0x144>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <USBD_SetConfig+0x144>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff f929 	bl	8006a60 <USBD_SetClassConfig>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f8ff 	bl	8007a1e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff f935 	bl	8006a98 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007836:	e014      	b.n	8007862 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9bb 	bl	8007bb4 <USBD_CtlSendStatus>
    break;
 800783e:	e010      	b.n	8007862 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9b7 	bl	8007bb4 <USBD_CtlSendStatus>
    break;
 8007846:	e00c      	b.n	8007862 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f8e7 	bl	8007a1e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <USBD_SetConfig+0x144>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f91e 	bl	8006a98 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	73fb      	strb	r3, [r7, #15]
    break;
 8007860:	bf00      	nop
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000228 	.word	0x20000228

08007870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d004      	beq.n	800788c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f8ca 	bl	8007a1e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800788a:	e022      	b.n	80078d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007892:	2b02      	cmp	r3, #2
 8007894:	dc02      	bgt.n	800789c <USBD_GetConfig+0x2c>
 8007896:	2b00      	cmp	r3, #0
 8007898:	dc03      	bgt.n	80078a2 <USBD_GetConfig+0x32>
 800789a:	e015      	b.n	80078c8 <USBD_GetConfig+0x58>
 800789c:	2b03      	cmp	r3, #3
 800789e:	d00b      	beq.n	80078b8 <USBD_GetConfig+0x48>
 80078a0:	e012      	b.n	80078c8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3308      	adds	r3, #8
 80078ac:	2201      	movs	r2, #1
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f925 	bl	8007b00 <USBD_CtlSendData>
      break;
 80078b6:	e00c      	b.n	80078d2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	2201      	movs	r2, #1
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f91d 	bl	8007b00 <USBD_CtlSendData>
      break;
 80078c6:	e004      	b.n	80078d2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8a7 	bl	8007a1e <USBD_CtlError>
      break;
 80078d0:	bf00      	nop
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	3b01      	subs	r3, #1
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d81e      	bhi.n	800792e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	88db      	ldrh	r3, [r3, #6]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d004      	beq.n	8007902 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f88f 	bl	8007a1e <USBD_CtlError>
      break;
 8007900:	e01a      	b.n	8007938 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f043 0202 	orr.w	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	330c      	adds	r3, #12
 8007922:	2202      	movs	r2, #2
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8ea 	bl	8007b00 <USBD_CtlSendData>
    break;
 800792c:	e004      	b.n	8007938 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f874 	bl	8007a1e <USBD_CtlError>
    break;
 8007936:	bf00      	nop
  }
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d106      	bne.n	8007960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f92a 	bl	8007bb4 <USBD_CtlSendStatus>
  }
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	3b01      	subs	r3, #1
 800797a:	2b02      	cmp	r3, #2
 800797c:	d80b      	bhi.n	8007996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d10c      	bne.n	80079a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f910 	bl	8007bb4 <USBD_CtlSendStatus>
      }
      break;
 8007994:	e004      	b.n	80079a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f840 	bl	8007a1e <USBD_CtlError>
      break;
 800799e:	e000      	b.n	80079a2 <USBD_ClrFeature+0x3a>
      break;
 80079a0:	bf00      	nop
  }
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff fa9c 	bl	8006f12 <SWAPBYTE>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3301      	adds	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fa8f 	bl	8006f12 <SWAPBYTE>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff fa82 	bl	8006f12 <SWAPBYTE>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	80da      	strh	r2, [r3, #6]
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f004 ffc8 	bl	800c9c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f004 ffc4 	bl	800c9c0 <USBD_LL_StallEP>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d036      	beq.n	8007ac4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a5a:	6938      	ldr	r0, [r7, #16]
 8007a5c:	f000 f836 	bl	8007acc <USBD_GetLen>
 8007a60:	4603      	mov	r3, r0
 8007a62:	3301      	adds	r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	4413      	add	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	7812      	ldrb	r2, [r2, #0]
 8007a78:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	2203      	movs	r2, #3
 8007a88:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a90:	e013      	b.n	8007aba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	4413      	add	r3, r2
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	7812      	ldrb	r2, [r2, #0]
 8007a9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	613b      	str	r3, [r7, #16]
    idx++;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	4413      	add	r3, r2
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e7      	bne.n	8007a92 <USBD_GetString+0x52>
 8007ac2:	e000      	b.n	8007ac6 <USBD_GetString+0x86>
    return;
 8007ac4:	bf00      	nop
  }
}
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007adc:	e005      	b.n	8007aea <USBD_GetLen+0x1e>
  {
    len++;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f5      	bne.n	8007ade <USBD_GetLen+0x12>
  }

  return len;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	2100      	movs	r1, #0
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f004 ffd3 	bl	800cad2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	2100      	movs	r1, #0
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f004 ffc2 	bl	800cad2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2203      	movs	r2, #3
 8007b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	2100      	movs	r1, #0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f004 ffc6 	bl	800cb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f004 ffb5 	bl	800cb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f004 ff81 	bl	800cad2 <USBD_LL_Transmit>

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2205      	movs	r2, #5
 8007be6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f004 ff8f 	bl	800cb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007c16:	4b1f      	ldr	r3, [pc, #124]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c18:	7a5b      	ldrb	r3, [r3, #9]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d131      	bne.n	8007c84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c20:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c22:	7a5b      	ldrb	r3, [r3, #9]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c2e:	4b19      	ldr	r3, [pc, #100]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c30:	7a5b      	ldrb	r3, [r3, #9]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007c3e:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c40:	7a5b      	ldrb	r3, [r3, #9]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c48:	4413      	add	r3, r2
 8007c4a:	79fa      	ldrb	r2, [r7, #7]
 8007c4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c50:	7a5b      	ldrb	r3, [r3, #9]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	b2d1      	uxtb	r1, r2
 8007c58:	4a0e      	ldr	r2, [pc, #56]	; (8007c94 <FATFS_LinkDriverEx+0x94>)
 8007c5a:	7251      	strb	r1, [r2, #9]
 8007c5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c5e:	7dbb      	ldrb	r3, [r7, #22]
 8007c60:	3330      	adds	r3, #48	; 0x30
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	223a      	movs	r2, #58	; 0x3a
 8007c6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	3302      	adds	r3, #2
 8007c74:	222f      	movs	r2, #47	; 0x2f
 8007c76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	3303      	adds	r3, #3
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	2000022c 	.word	0x2000022c

08007c98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ffaa 	bl	8007c00 <FATFS_LinkDriverEx>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cb6:	b480      	push	{r7}
 8007cb8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cca:	f3ef 8305 	mrs	r3, IPSR
 8007cce:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10f      	bne.n	8007cf6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cda:	607b      	str	r3, [r7, #4]
  return(result);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8007ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <osKernelInitialize+0x3a>
 8007cee:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <osKernelInitialize+0x64>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d103      	bne.n	8007cfe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007cf6:	f06f 0305 	mvn.w	r3, #5
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e00c      	b.n	8007d18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <osKernelInitialize+0x64>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d06:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <osKernelInitialize+0x64>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e002      	b.n	8007d18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000238 	.word	0x20000238

08007d2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d32:	f3ef 8305 	mrs	r3, IPSR
 8007d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10f      	bne.n	8007d5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d42:	607b      	str	r3, [r7, #4]
  return(result);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <osKernelStart+0x3a>
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <osKernelStart+0x68>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d103      	bne.n	8007d66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d5e:	f06f 0305 	mvn.w	r3, #5
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e010      	b.n	8007d88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <osKernelStart+0x68>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d109      	bne.n	8007d82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d6e:	f7ff ffa2 	bl	8007cb6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <osKernelStart+0x68>)
 8007d74:	2202      	movs	r2, #2
 8007d76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d78:	f001 f8ca 	bl	8008f10 <vTaskStartScheduler>
      stat = osOK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e002      	b.n	8007d88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000238 	.word	0x20000238

08007d98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b090      	sub	sp, #64	; 0x40
 8007d9c:	af04      	add	r7, sp, #16
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da8:	f3ef 8305 	mrs	r3, IPSR
 8007dac:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 808f 	bne.w	8007ed4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <osThreadNew+0x3e>
 8007dce:	4b44      	ldr	r3, [pc, #272]	; (8007ee0 <osThreadNew+0x148>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d07e      	beq.n	8007ed4 <osThreadNew+0x13c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d07b      	beq.n	8007ed4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007ddc:	2380      	movs	r3, #128	; 0x80
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007de0:	2318      	movs	r3, #24
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d045      	beq.n	8007e80 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <osThreadNew+0x6a>
        name = attr->name;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d008      	beq.n	8007e28 <osThreadNew+0x90>
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	2b38      	cmp	r3, #56	; 0x38
 8007e1a:	d805      	bhi.n	8007e28 <osThreadNew+0x90>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <osThreadNew+0x94>
        return (NULL);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e054      	b.n	8007ed6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	089b      	lsrs	r3, r3, #2
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <osThreadNew+0xca>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2bbb      	cmp	r3, #187	; 0xbb
 8007e4a:	d90a      	bls.n	8007e62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d006      	beq.n	8007e62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <osThreadNew+0xca>
        mem = 1;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	623b      	str	r3, [r7, #32]
 8007e60:	e010      	b.n	8007e84 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10c      	bne.n	8007e84 <osThreadNew+0xec>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d108      	bne.n	8007e84 <osThreadNew+0xec>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <osThreadNew+0xec>
          mem = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	623b      	str	r3, [r7, #32]
 8007e7e:	e001      	b.n	8007e84 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d110      	bne.n	8007eac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e92:	9202      	str	r2, [sp, #8]
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fe3f 	bl	8008b24 <xTaskCreateStatic>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	613b      	str	r3, [r7, #16]
 8007eaa:	e013      	b.n	8007ed4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d110      	bne.n	8007ed4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fe90 	bl	8008bea <xTaskCreate>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d001      	beq.n	8007ed4 <osThreadNew+0x13c>
          hTask = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ed4:	693b      	ldr	r3, [r7, #16]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3730      	adds	r7, #48	; 0x30
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000238 	.word	0x20000238

08007ee4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eec:	f3ef 8305 	mrs	r3, IPSR
 8007ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ef2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10f      	bne.n	8007f18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8007efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f04:	f3ef 8311 	mrs	r3, BASEPRI
 8007f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <osDelay+0x3c>
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <osDelay+0x58>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d103      	bne.n	8007f20 <osDelay+0x3c>
    stat = osErrorISR;
 8007f18:	f06f 0305 	mvn.w	r3, #5
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e007      	b.n	8007f30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 ffba 	bl	8008ea4 <vTaskDelay>
    }
  }

  return (stat);
 8007f30:	697b      	ldr	r3, [r7, #20]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000238 	.word	0x20000238

08007f40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4a07      	ldr	r2, [pc, #28]	; (8007f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8007f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4a06      	ldr	r2, [pc, #24]	; (8007f70 <vApplicationGetIdleTaskMemory+0x30>)
 8007f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	601a      	str	r2, [r3, #0]
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	2000023c 	.word	0x2000023c
 8007f70:	200002f8 	.word	0x200002f8

08007f74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a07      	ldr	r2, [pc, #28]	; (8007fa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4a06      	ldr	r2, [pc, #24]	; (8007fa4 <vApplicationGetTimerTaskMemory+0x30>)
 8007f8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f92:	601a      	str	r2, [r3, #0]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	200004f8 	.word	0x200004f8
 8007fa4:	200005b4 	.word	0x200005b4

08007fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f103 0208 	add.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f103 0208 	add.w	r2, r3, #8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0208 	add.w	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008060:	d103      	bne.n	800806a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e00c      	b.n	8008084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3308      	adds	r3, #8
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e002      	b.n	8008078 <vListInsert+0x2e>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d2f6      	bcs.n	8008072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6892      	ldr	r2, [r2, #8]
 80080d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6852      	ldr	r2, [r2, #4]
 80080dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d103      	bne.n	80080f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10c      	bne.n	800813e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
 8008138:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800813e:	f002 f8a5 	bl	800a28c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	441a      	add	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	3b01      	subs	r3, #1
 8008170:	68f9      	ldr	r1, [r7, #12]
 8008172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008174:	fb01 f303 	mul.w	r3, r1, r3
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	22ff      	movs	r2, #255	; 0xff
 8008182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d114      	bne.n	80081be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01a      	beq.n	80081d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 f95d 	bl	8009460 <xTaskRemoveFromEventList>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d012      	beq.n	80081d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <xQueueGenericReset+0xd0>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	e009      	b.n	80081d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3310      	adds	r3, #16
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fef0 	bl	8007fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3324      	adds	r3, #36	; 0x24
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff feeb 	bl	8007fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081d2:	f002 f88f 	bl	800a2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081d6:	2301      	movs	r3, #1
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08e      	sub	sp, #56	; 0x38
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10c      	bne.n	8008212 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	b672      	cpsid	i
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	b662      	cpsie	i
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10c      	bne.n	8008232 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	b672      	cpsid	i
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	b662      	cpsie	i
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <xQueueGenericCreateStatic+0x5a>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <xQueueGenericCreateStatic+0x5e>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueGenericCreateStatic+0x60>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	b672      	cpsid	i
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	b662      	cpsie	i
 800825c:	623b      	str	r3, [r7, #32]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <xQueueGenericCreateStatic+0x8a>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <xQueueGenericCreateStatic+0x8e>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xQueueGenericCreateStatic+0x90>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10c      	bne.n	8008292 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	b672      	cpsid	i
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	b662      	cpsie	i
 800828c:	61fb      	str	r3, [r7, #28]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008292:	2350      	movs	r3, #80	; 0x50
 8008294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b50      	cmp	r3, #80	; 0x50
 800829a:	d00c      	beq.n	80082b6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	b672      	cpsid	i
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	b662      	cpsie	i
 80082b0:	61bb      	str	r3, [r7, #24]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00d      	beq.n	80082de <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	4613      	mov	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f805 	bl	80082e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3730      	adds	r7, #48	; 0x30
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e002      	b.n	800830a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008316:	2101      	movs	r1, #1
 8008318:	69b8      	ldr	r0, [r7, #24]
 800831a:	f7ff fef9 	bl	8008110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08e      	sub	sp, #56	; 0x38
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <xQueueGenericSend+0x36>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	b672      	cpsid	i
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	b662      	cpsie	i
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d103      	bne.n	8008374 <xQueueGenericSend+0x44>
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <xQueueGenericSend+0x48>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <xQueueGenericSend+0x4a>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <xQueueGenericSend+0x68>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	b672      	cpsid	i
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	b662      	cpsie	i
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d103      	bne.n	80083a6 <xQueueGenericSend+0x76>
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <xQueueGenericSend+0x7a>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <xQueueGenericSend+0x7c>
 80083aa:	2300      	movs	r3, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <xQueueGenericSend+0x9a>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	b672      	cpsid	i
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	b662      	cpsie	i
 80083c4:	623b      	str	r3, [r7, #32]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083ca:	f001 fa13 	bl	80097f4 <xTaskGetSchedulerState>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <xQueueGenericSend+0xaa>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <xQueueGenericSend+0xae>
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <xQueueGenericSend+0xb0>
 80083de:	2300      	movs	r3, #0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10c      	bne.n	80083fe <xQueueGenericSend+0xce>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	b672      	cpsid	i
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	b662      	cpsie	i
 80083f8:	61fb      	str	r3, [r7, #28]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083fe:	f001 ff45 	bl	800a28c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <xQueueGenericSend+0xe4>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d129      	bne.n	8008468 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 fa15 	bl	8008848 <prvCopyDataToQueue>
 800841e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d010      	beq.n	800844a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	3324      	adds	r3, #36	; 0x24
 800842c:	4618      	mov	r0, r3
 800842e:	f001 f817 	bl	8009460 <xTaskRemoveFromEventList>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008438:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <xQueueGenericSend+0x208>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	e00a      	b.n	8008460 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008450:	4b39      	ldr	r3, [pc, #228]	; (8008538 <xQueueGenericSend+0x208>)
 8008452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008460:	f001 ff48 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 8008464:	2301      	movs	r3, #1
 8008466:	e063      	b.n	8008530 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800846e:	f001 ff41 	bl	800a2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008472:	2300      	movs	r3, #0
 8008474:	e05c      	b.n	8008530 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d106      	bne.n	800848a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800847c:	f107 0314 	add.w	r3, r7, #20
 8008480:	4618      	mov	r0, r3
 8008482:	f001 f853 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008486:	2301      	movs	r3, #1
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800848a:	f001 ff33 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800848e:	f000 fdb3 	bl	8008ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008492:	f001 fefb 	bl	800a28c <vPortEnterCritical>
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800849c:	b25b      	sxtb	r3, r3
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a2:	d103      	bne.n	80084ac <xQueueGenericSend+0x17c>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b8:	d103      	bne.n	80084c2 <xQueueGenericSend+0x192>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c2:	f001 ff17 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c6:	1d3a      	adds	r2, r7, #4
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 f842 	bl	8009558 <xTaskCheckForTimeOut>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d124      	bne.n	8008524 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084dc:	f000 faac 	bl	8008a38 <prvIsQueueFull>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	3310      	adds	r3, #16
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 ff62 	bl	80093b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f6:	f000 fa37 	bl	8008968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084fa:	f000 fd8b 	bl	8009014 <xTaskResumeAll>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f af7c 	bne.w	80083fe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <xQueueGenericSend+0x208>)
 8008508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	e772      	b.n	80083fe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800851a:	f000 fa25 	bl	8008968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800851e:	f000 fd79 	bl	8009014 <xTaskResumeAll>
 8008522:	e76c      	b.n	80083fe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008526:	f000 fa1f 	bl	8008968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800852a:	f000 fd73 	bl	8009014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800852e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008530:	4618      	mov	r0, r3
 8008532:	3738      	adds	r7, #56	; 0x38
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08e      	sub	sp, #56	; 0x38
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <xQueueGenericSendFromISR+0x40>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <xQueueGenericSendFromISR+0x44>
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <xQueueGenericSendFromISR+0x46>
 8008580:	2300      	movs	r3, #0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10c      	bne.n	80085a0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	623b      	str	r3, [r7, #32]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d103      	bne.n	80085ae <xQueueGenericSendFromISR+0x72>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <xQueueGenericSendFromISR+0x76>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <xQueueGenericSendFromISR+0x78>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	b672      	cpsid	i
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	b662      	cpsie	i
 80085cc:	61fb      	str	r3, [r7, #28]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085d2:	f001 ff43 	bl	800a45c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085d6:	f3ef 8211 	mrs	r2, BASEPRI
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	b672      	cpsid	i
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	b662      	cpsie	i
 80085ee:	61ba      	str	r2, [r7, #24]
 80085f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <xQueueGenericSendFromISR+0xcc>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d12c      	bne.n	8008662 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008618:	f000 f916 	bl	8008848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800861c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008624:	d112      	bne.n	800864c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d016      	beq.n	800865c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	3324      	adds	r3, #36	; 0x24
 8008632:	4618      	mov	r0, r3
 8008634:	f000 ff14 	bl	8009460 <xTaskRemoveFromEventList>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00e      	beq.n	800865c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e007      	b.n	800865c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800864c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008650:	3301      	adds	r3, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	b25a      	sxtb	r2, r3
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800865c:	2301      	movs	r3, #1
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008660:	e001      	b.n	8008666 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008662:	2300      	movs	r3, #0
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008674:	4618      	mov	r0, r3
 8008676:	3738      	adds	r7, #56	; 0x38
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	; 0x30
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10c      	bne.n	80086b0 <xQueueReceive+0x34>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	623b      	str	r3, [r7, #32]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <xQueueReceive+0x42>
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <xQueueReceive+0x46>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueReceive+0x48>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10c      	bne.n	80086e2 <xQueueReceive+0x66>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	b672      	cpsid	i
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	b662      	cpsie	i
 80086dc:	61fb      	str	r3, [r7, #28]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086e2:	f001 f887 	bl	80097f4 <xTaskGetSchedulerState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <xQueueReceive+0x76>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <xQueueReceive+0x7a>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <xQueueReceive+0x7c>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10c      	bne.n	8008716 <xQueueReceive+0x9a>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	b672      	cpsid	i
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	b662      	cpsie	i
 8008710:	61bb      	str	r3, [r7, #24]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008716:	f001 fdb9 	bl	800a28c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01f      	beq.n	8008766 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872a:	f000 f8f7 	bl	800891c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	3310      	adds	r3, #16
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fe8c 	bl	8009460 <xTaskRemoveFromEventList>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800874e:	4b3d      	ldr	r3, [pc, #244]	; (8008844 <xQueueReceive+0x1c8>)
 8008750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800875e:	f001 fdc9 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 8008762:	2301      	movs	r3, #1
 8008764:	e069      	b.n	800883a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d103      	bne.n	8008774 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800876c:	f001 fdc2 	bl	800a2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008770:	2300      	movs	r3, #0
 8008772:	e062      	b.n	800883a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fed4 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008784:	2301      	movs	r3, #1
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008788:	f001 fdb4 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800878c:	f000 fc34 	bl	8008ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008790:	f001 fd7c 	bl	800a28c <vPortEnterCritical>
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800879a:	b25b      	sxtb	r3, r3
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087a0:	d103      	bne.n	80087aa <xQueueReceive+0x12e>
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b0:	b25b      	sxtb	r3, r3
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b6:	d103      	bne.n	80087c0 <xQueueReceive+0x144>
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c0:	f001 fd98 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c4:	1d3a      	adds	r2, r7, #4
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fec3 	bl	8009558 <xTaskCheckForTimeOut>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d123      	bne.n	8008820 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 f917 	bl	8008a0c <prvIsQueueEmpty>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d017      	beq.n	8008814 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fde3 	bl	80093b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f4:	f000 f8b8 	bl	8008968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087f8:	f000 fc0c 	bl	8009014 <xTaskResumeAll>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d189      	bne.n	8008716 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <xQueueReceive+0x1c8>)
 8008804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	e780      	b.n	8008716 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008816:	f000 f8a7 	bl	8008968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800881a:	f000 fbfb 	bl	8009014 <xTaskResumeAll>
 800881e:	e77a      	b.n	8008716 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008822:	f000 f8a1 	bl	8008968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008826:	f000 fbf5 	bl	8009014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800882a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800882c:	f000 f8ee 	bl	8008a0c <prvIsQueueEmpty>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f43f af6f 	beq.w	8008716 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800883a:	4618      	mov	r0, r3
 800883c:	3730      	adds	r7, #48	; 0x30
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d14d      	bne.n	800890a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 ffdc 	bl	8009830 <xTaskPriorityDisinherit>
 8008878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	e043      	b.n	800890a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d119      	bne.n	80088bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6858      	ldr	r0, [r3, #4]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	461a      	mov	r2, r3
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	f004 fe1c 	bl	800d4d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d32b      	bcc.n	800890a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	e026      	b.n	800890a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68d8      	ldr	r0, [r3, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	461a      	mov	r2, r3
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	f004 fe02 	bl	800d4d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	425b      	negs	r3, r3
 80088d6:	441a      	add	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d207      	bcs.n	80088f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	425b      	negs	r3, r3
 80088f2:	441a      	add	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d105      	bne.n	800890a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	3b01      	subs	r3, #1
 8008908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008912:	697b      	ldr	r3, [r7, #20]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d018      	beq.n	8008960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	441a      	add	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	429a      	cmp	r2, r3
 8008946:	d303      	bcc.n	8008950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68d9      	ldr	r1, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	461a      	mov	r2, r3
 800895a:	6838      	ldr	r0, [r7, #0]
 800895c:	f004 fdb8 	bl	800d4d0 <memcpy>
	}
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008970:	f001 fc8c 	bl	800a28c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897c:	e011      	b.n	80089a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d012      	beq.n	80089ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fd68 	bl	8009460 <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008996:	f000 fe45 	bl	8009624 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	3b01      	subs	r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dce9      	bgt.n	800897e <prvUnlockQueue+0x16>
 80089aa:	e000      	b.n	80089ae <prvUnlockQueue+0x46>
					break;
 80089ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089b6:	f001 fc9d 	bl	800a2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089ba:	f001 fc67 	bl	800a28c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c6:	e011      	b.n	80089ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d012      	beq.n	80089f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3310      	adds	r3, #16
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fd43 	bl	8009460 <xTaskRemoveFromEventList>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089e0:	f000 fe20 	bl	8009624 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dce9      	bgt.n	80089c8 <prvUnlockQueue+0x60>
 80089f4:	e000      	b.n	80089f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	22ff      	movs	r2, #255	; 0xff
 80089fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a00:	f001 fc78 	bl	800a2f4 <vPortExitCritical>
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a14:	f001 fc3a 	bl	800a28c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e001      	b.n	8008a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a2a:	f001 fc63 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a40:	f001 fc24 	bl	800a28c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d102      	bne.n	8008a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e001      	b.n	8008a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a5a:	f001 fc4b 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e014      	b.n	8008aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a78:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a84:	490c      	ldr	r1, [pc, #48]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a9a:	e006      	b.n	8008aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b07      	cmp	r3, #7
 8008aa6:	d9e7      	bls.n	8008a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20004f28 	.word	0x20004f28

08008abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008acc:	f001 fbde 	bl	800a28c <vPortEnterCritical>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008adc:	d103      	bne.n	8008ae6 <vQueueWaitForMessageRestricted+0x2a>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af2:	d103      	bne.n	8008afc <vQueueWaitForMessageRestricted+0x40>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008afc:	f001 fbfa 	bl	800a2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fc77 	bl	8009404 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff ff26 	bl	8008968 <prvUnlockQueue>
	}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08e      	sub	sp, #56	; 0x38
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10c      	bne.n	8008b52 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	b672      	cpsid	i
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	b662      	cpsie	i
 8008b4c:	623b      	str	r3, [r7, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10c      	bne.n	8008b72 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	b672      	cpsid	i
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	b662      	cpsie	i
 8008b6c:	61fb      	str	r3, [r7, #28]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b72:	23bc      	movs	r3, #188	; 0xbc
 8008b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2bbc      	cmp	r3, #188	; 0xbc
 8008b7a:	d00c      	beq.n	8008b96 <xTaskCreateStatic+0x72>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	b672      	cpsid	i
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	b662      	cpsie	i
 8008b90:	61bb      	str	r3, [r7, #24]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01e      	beq.n	8008bdc <xTaskCreateStatic+0xb8>
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01b      	beq.n	8008bdc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	9302      	str	r3, [sp, #8]
 8008bbe:	f107 0314 	add.w	r3, r7, #20
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f850 	bl	8008c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd6:	f000 f8f5 	bl	8008dc4 <prvAddNewTaskToReadyList>
 8008bda:	e001      	b.n	8008be0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008be0:	697b      	ldr	r3, [r7, #20]
	}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3728      	adds	r7, #40	; 0x28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b08c      	sub	sp, #48	; 0x30
 8008bee:	af04      	add	r7, sp, #16
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	603b      	str	r3, [r7, #0]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fc70 	bl	800a4e4 <pvPortMalloc>
 8008c04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00e      	beq.n	8008c2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c0c:	20bc      	movs	r0, #188	; 0xbc
 8008c0e:	f001 fc69 	bl	800a4e4 <pvPortMalloc>
 8008c12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c20:	e005      	b.n	8008c2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c22:	6978      	ldr	r0, [r7, #20]
 8008c24:	f001 fd28 	bl	800a678 <vPortFree>
 8008c28:	e001      	b.n	8008c2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d017      	beq.n	8008c64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f80e 	bl	8008c74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c58:	69f8      	ldr	r0, [r7, #28]
 8008c5a:	f000 f8b3 	bl	8008dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	e002      	b.n	8008c6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	21a5      	movs	r1, #165	; 0xa5
 8008c8e:	f004 fc2d 	bl	800d4ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c9c:	440b      	add	r3, r1
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f023 0307 	bic.w	r3, r3, #7
 8008caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00c      	beq.n	8008cd0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	b672      	cpsid	i
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	b662      	cpsie	i
 8008cca:	617b      	str	r3, [r7, #20]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01f      	beq.n	8008d16 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	e012      	b.n	8008d02 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	7819      	ldrb	r1, [r3, #0]
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3334      	adds	r3, #52	; 0x34
 8008cec:	460a      	mov	r2, r1
 8008cee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d006      	beq.n	8008d0a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b0f      	cmp	r3, #15
 8008d06:	d9e9      	bls.n	8008cdc <prvInitialiseNewTask+0x68>
 8008d08:	e000      	b.n	8008d0c <prvInitialiseNewTask+0x98>
			{
				break;
 8008d0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d14:	e003      	b.n	8008d1e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	2b37      	cmp	r3, #55	; 0x37
 8008d22:	d901      	bls.n	8008d28 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d24:	2337      	movs	r3, #55	; 0x37
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	2200      	movs	r2, #0
 8008d38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff f952 	bl	8007fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	3318      	adds	r3, #24
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff f94d 	bl	8007fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	3354      	adds	r3, #84	; 0x54
 8008d78:	2260      	movs	r2, #96	; 0x60
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f004 fbb5 	bl	800d4ec <memset>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	4a0c      	ldr	r2, [pc, #48]	; (8008db8 <prvInitialiseNewTask+0x144>)
 8008d86:	659a      	str	r2, [r3, #88]	; 0x58
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	4a0c      	ldr	r2, [pc, #48]	; (8008dbc <prvInitialiseNewTask+0x148>)
 8008d8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	4a0b      	ldr	r2, [pc, #44]	; (8008dc0 <prvInitialiseNewTask+0x14c>)
 8008d92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	69b8      	ldr	r0, [r7, #24]
 8008d9a:	f001 f96b 	bl	800a074 <pxPortInitialiseStack>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db0:	bf00      	nop
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	0800d924 	.word	0x0800d924
 8008dbc:	0800d944 	.word	0x0800d944
 8008dc0:	0800d904 	.word	0x0800d904

08008dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dcc:	f001 fa5e 	bl	800a28c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dd0:	4b2d      	ldr	r3, [pc, #180]	; (8008e88 <prvAddNewTaskToReadyList+0xc4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	4a2c      	ldr	r2, [pc, #176]	; (8008e88 <prvAddNewTaskToReadyList+0xc4>)
 8008dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dda:	4b2c      	ldr	r3, [pc, #176]	; (8008e8c <prvAddNewTaskToReadyList+0xc8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008de2:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <prvAddNewTaskToReadyList+0xc8>)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008de8:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <prvAddNewTaskToReadyList+0xc4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d110      	bne.n	8008e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008df0:	f000 fc3c 	bl	800966c <prvInitialiseTaskLists>
 8008df4:	e00d      	b.n	8008e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <prvAddNewTaskToReadyList+0xcc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d109      	bne.n	8008e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dfe:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <prvAddNewTaskToReadyList+0xc8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d802      	bhi.n	8008e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e0c:	4a1f      	ldr	r2, [pc, #124]	; (8008e8c <prvAddNewTaskToReadyList+0xc8>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e12:	4b20      	ldr	r3, [pc, #128]	; (8008e94 <prvAddNewTaskToReadyList+0xd0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <prvAddNewTaskToReadyList+0xd0>)
 8008e1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <prvAddNewTaskToReadyList+0xd0>)
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e28:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <prvAddNewTaskToReadyList+0xd4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d903      	bls.n	8008e38 <prvAddNewTaskToReadyList+0x74>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <prvAddNewTaskToReadyList+0xd4>)
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4a15      	ldr	r2, [pc, #84]	; (8008e9c <prvAddNewTaskToReadyList+0xd8>)
 8008e46:	441a      	add	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7ff f8d7 	bl	8008002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e54:	f001 fa4e 	bl	800a2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e58:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <prvAddNewTaskToReadyList+0xcc>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00e      	beq.n	8008e7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <prvAddNewTaskToReadyList+0xc8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d207      	bcs.n	8008e7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <prvAddNewTaskToReadyList+0xdc>)
 8008e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20000e88 	.word	0x20000e88
 8008e8c:	200009b4 	.word	0x200009b4
 8008e90:	20000e94 	.word	0x20000e94
 8008e94:	20000ea4 	.word	0x20000ea4
 8008e98:	20000e90 	.word	0x20000e90
 8008e9c:	200009b8 	.word	0x200009b8
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d019      	beq.n	8008eea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <vTaskDelay+0x64>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <vTaskDelay+0x34>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	b672      	cpsid	i
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	b662      	cpsie	i
 8008ed2:	60bb      	str	r3, [r7, #8]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008ed8:	f000 f88e 	bl	8008ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008edc:	2100      	movs	r1, #0
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fd18 	bl	8009914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ee4:	f000 f896 	bl	8009014 <xTaskResumeAll>
 8008ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d107      	bne.n	8008f00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <vTaskDelay+0x68>)
 8008ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000eb0 	.word	0x20000eb0
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	; 0x28
 8008f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f1e:	463a      	mov	r2, r7
 8008f20:	1d39      	adds	r1, r7, #4
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff f80a 	bl	8007f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	9202      	str	r2, [sp, #8]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	460a      	mov	r2, r1
 8008f3e:	4926      	ldr	r1, [pc, #152]	; (8008fd8 <vTaskStartScheduler+0xc8>)
 8008f40:	4826      	ldr	r0, [pc, #152]	; (8008fdc <vTaskStartScheduler+0xcc>)
 8008f42:	f7ff fdef 	bl	8008b24 <xTaskCreateStatic>
 8008f46:	4603      	mov	r3, r0
 8008f48:	4a25      	ldr	r2, [pc, #148]	; (8008fe0 <vTaskStartScheduler+0xd0>)
 8008f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f4c:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <vTaskStartScheduler+0xd0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f54:	2301      	movs	r3, #1
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	e001      	b.n	8008f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d102      	bne.n	8008f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f64:	f000 fd2a 	bl	80099bc <xTimerCreateTimerTask>
 8008f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d11d      	bne.n	8008fac <vTaskStartScheduler+0x9c>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	b672      	cpsid	i
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	b662      	cpsie	i
 8008f84:	613b      	str	r3, [r7, #16]
}
 8008f86:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f88:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <vTaskStartScheduler+0xd4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3354      	adds	r3, #84	; 0x54
 8008f8e:	4a16      	ldr	r2, [pc, #88]	; (8008fe8 <vTaskStartScheduler+0xd8>)
 8008f90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f92:	4b16      	ldr	r3, [pc, #88]	; (8008fec <vTaskStartScheduler+0xdc>)
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <vTaskStartScheduler+0xe0>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fa0:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <vTaskStartScheduler+0xe4>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fa6:	f001 f8f3 	bl	800a190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008faa:	e010      	b.n	8008fce <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb2:	d10c      	bne.n	8008fce <vTaskStartScheduler+0xbe>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	b672      	cpsid	i
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	b662      	cpsie	i
 8008fc8:	60fb      	str	r3, [r7, #12]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <vTaskStartScheduler+0xbc>
}
 8008fce:	bf00      	nop
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	0800d81c 	.word	0x0800d81c
 8008fdc:	0800963d 	.word	0x0800963d
 8008fe0:	20000eac 	.word	0x20000eac
 8008fe4:	200009b4 	.word	0x200009b4
 8008fe8:	200001a8 	.word	0x200001a8
 8008fec:	20000ea8 	.word	0x20000ea8
 8008ff0:	20000e94 	.word	0x20000e94
 8008ff4:	20000e8c 	.word	0x20000e8c

08008ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <vTaskSuspendAll+0x18>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3301      	adds	r3, #1
 8009002:	4a03      	ldr	r2, [pc, #12]	; (8009010 <vTaskSuspendAll+0x18>)
 8009004:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009006:	bf00      	nop
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20000eb0 	.word	0x20000eb0

08009014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009022:	4b43      	ldr	r3, [pc, #268]	; (8009130 <xTaskResumeAll+0x11c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10c      	bne.n	8009044 <xTaskResumeAll+0x30>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	b672      	cpsid	i
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	b662      	cpsie	i
 800903e:	603b      	str	r3, [r7, #0]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009044:	f001 f922 	bl	800a28c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009048:	4b39      	ldr	r3, [pc, #228]	; (8009130 <xTaskResumeAll+0x11c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	4a38      	ldr	r2, [pc, #224]	; (8009130 <xTaskResumeAll+0x11c>)
 8009050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009052:	4b37      	ldr	r3, [pc, #220]	; (8009130 <xTaskResumeAll+0x11c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d162      	bne.n	8009120 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800905a:	4b36      	ldr	r3, [pc, #216]	; (8009134 <xTaskResumeAll+0x120>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d05e      	beq.n	8009120 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009062:	e02f      	b.n	80090c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009064:	4b34      	ldr	r3, [pc, #208]	; (8009138 <xTaskResumeAll+0x124>)
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3318      	adds	r3, #24
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff f823 	bl	80080bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff f81e 	bl	80080bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009084:	4b2d      	ldr	r3, [pc, #180]	; (800913c <xTaskResumeAll+0x128>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d903      	bls.n	8009094 <xTaskResumeAll+0x80>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	4a2a      	ldr	r2, [pc, #168]	; (800913c <xTaskResumeAll+0x128>)
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4a27      	ldr	r2, [pc, #156]	; (8009140 <xTaskResumeAll+0x12c>)
 80090a2:	441a      	add	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fe ffa9 	bl	8008002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4b23      	ldr	r3, [pc, #140]	; (8009144 <xTaskResumeAll+0x130>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d302      	bcc.n	80090c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80090be:	4b22      	ldr	r3, [pc, #136]	; (8009148 <xTaskResumeAll+0x134>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c4:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <xTaskResumeAll+0x124>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1cb      	bne.n	8009064 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090d2:	f000 fb6f 	bl	80097b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090d6:	4b1d      	ldr	r3, [pc, #116]	; (800914c <xTaskResumeAll+0x138>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090e2:	f000 f847 	bl	8009174 <xTaskIncrementTick>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80090ec:	4b16      	ldr	r3, [pc, #88]	; (8009148 <xTaskResumeAll+0x134>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f1      	bne.n	80090e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <xTaskResumeAll+0x138>)
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <xTaskResumeAll+0x134>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d009      	beq.n	8009120 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <xTaskResumeAll+0x13c>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009120:	f001 f8e8 	bl	800a2f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009124:	68bb      	ldr	r3, [r7, #8]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000eb0 	.word	0x20000eb0
 8009134:	20000e88 	.word	0x20000e88
 8009138:	20000e48 	.word	0x20000e48
 800913c:	20000e90 	.word	0x20000e90
 8009140:	200009b8 	.word	0x200009b8
 8009144:	200009b4 	.word	0x200009b4
 8009148:	20000e9c 	.word	0x20000e9c
 800914c:	20000e98 	.word	0x20000e98
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <xTaskGetTickCount+0x1c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009160:	687b      	ldr	r3, [r7, #4]
}
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000e8c 	.word	0x20000e8c

08009174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800917e:	4b50      	ldr	r3, [pc, #320]	; (80092c0 <xTaskIncrementTick+0x14c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 808b 	bne.w	800929e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009188:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <xTaskIncrementTick+0x150>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009190:	4a4c      	ldr	r2, [pc, #304]	; (80092c4 <xTaskIncrementTick+0x150>)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d122      	bne.n	80091e2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800919c:	4b4a      	ldr	r3, [pc, #296]	; (80092c8 <xTaskIncrementTick+0x154>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00c      	beq.n	80091c0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	b672      	cpsid	i
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	b662      	cpsie	i
 80091ba:	603b      	str	r3, [r7, #0]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <xTaskIncrementTick+0x4a>
 80091c0:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	4b41      	ldr	r3, [pc, #260]	; (80092cc <xTaskIncrementTick+0x158>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a3f      	ldr	r2, [pc, #252]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4a3f      	ldr	r2, [pc, #252]	; (80092cc <xTaskIncrementTick+0x158>)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <xTaskIncrementTick+0x15c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	4a3d      	ldr	r2, [pc, #244]	; (80092d0 <xTaskIncrementTick+0x15c>)
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	f000 fae9 	bl	80097b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091e2:	4b3c      	ldr	r3, [pc, #240]	; (80092d4 <xTaskIncrementTick+0x160>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d349      	bcc.n	8009280 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ec:	4b36      	ldr	r3, [pc, #216]	; (80092c8 <xTaskIncrementTick+0x154>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f6:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <xTaskIncrementTick+0x160>)
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091fc:	601a      	str	r2, [r3, #0]
					break;
 80091fe:	e03f      	b.n	8009280 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009200:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <xTaskIncrementTick+0x154>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d203      	bcs.n	8009220 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009218:	4a2e      	ldr	r2, [pc, #184]	; (80092d4 <xTaskIncrementTick+0x160>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800921e:	e02f      	b.n	8009280 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3304      	adds	r3, #4
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe ff49 	bl	80080bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d004      	beq.n	800923c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3318      	adds	r3, #24
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe ff40 	bl	80080bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <xTaskIncrementTick+0x164>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d903      	bls.n	8009250 <xTaskIncrementTick+0xdc>
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	4a22      	ldr	r2, [pc, #136]	; (80092d8 <xTaskIncrementTick+0x164>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <xTaskIncrementTick+0x168>)
 800925e:	441a      	add	r2, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fecb 	bl	8008002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <xTaskIncrementTick+0x16c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	429a      	cmp	r2, r3
 8009278:	d3b8      	bcc.n	80091ec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800927e:	e7b5      	b.n	80091ec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009280:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <xTaskIncrementTick+0x16c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	4915      	ldr	r1, [pc, #84]	; (80092dc <xTaskIncrementTick+0x168>)
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d907      	bls.n	80092a8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e004      	b.n	80092a8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800929e:	4b11      	ldr	r3, [pc, #68]	; (80092e4 <xTaskIncrementTick+0x170>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	4a0f      	ldr	r2, [pc, #60]	; (80092e4 <xTaskIncrementTick+0x170>)
 80092a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <xTaskIncrementTick+0x174>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80092b0:	2301      	movs	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092b4:	697b      	ldr	r3, [r7, #20]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000eb0 	.word	0x20000eb0
 80092c4:	20000e8c 	.word	0x20000e8c
 80092c8:	20000e40 	.word	0x20000e40
 80092cc:	20000e44 	.word	0x20000e44
 80092d0:	20000ea0 	.word	0x20000ea0
 80092d4:	20000ea8 	.word	0x20000ea8
 80092d8:	20000e90 	.word	0x20000e90
 80092dc:	200009b8 	.word	0x200009b8
 80092e0:	200009b4 	.word	0x200009b4
 80092e4:	20000e98 	.word	0x20000e98
 80092e8:	20000e9c 	.word	0x20000e9c

080092ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092f2:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <vTaskSwitchContext+0xb4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092fa:	4b2a      	ldr	r3, [pc, #168]	; (80093a4 <vTaskSwitchContext+0xb8>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009300:	e048      	b.n	8009394 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009302:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <vTaskSwitchContext+0xb8>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009308:	4b27      	ldr	r3, [pc, #156]	; (80093a8 <vTaskSwitchContext+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e012      	b.n	8009336 <vTaskSwitchContext+0x4a>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <vTaskSwitchContext+0x44>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	607b      	str	r3, [r7, #4]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <vTaskSwitchContext+0x42>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3b01      	subs	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	491d      	ldr	r1, [pc, #116]	; (80093ac <vTaskSwitchContext+0xc0>)
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0e2      	beq.n	8009310 <vTaskSwitchContext+0x24>
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <vTaskSwitchContext+0xc0>)
 8009356:	4413      	add	r3, r2
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	605a      	str	r2, [r3, #4]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	3308      	adds	r3, #8
 800936c:	429a      	cmp	r2, r3
 800936e:	d104      	bne.n	800937a <vTaskSwitchContext+0x8e>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	605a      	str	r2, [r3, #4]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	4a0b      	ldr	r2, [pc, #44]	; (80093b0 <vTaskSwitchContext+0xc4>)
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	4a08      	ldr	r2, [pc, #32]	; (80093a8 <vTaskSwitchContext+0xbc>)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <vTaskSwitchContext+0xc4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3354      	adds	r3, #84	; 0x54
 8009390:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <vTaskSwitchContext+0xc8>)
 8009392:	6013      	str	r3, [r2, #0]
}
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	20000eb0 	.word	0x20000eb0
 80093a4:	20000e9c 	.word	0x20000e9c
 80093a8:	20000e90 	.word	0x20000e90
 80093ac:	200009b8 	.word	0x200009b8
 80093b0:	200009b4 	.word	0x200009b4
 80093b4:	200001a8 	.word	0x200001a8

080093b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10c      	bne.n	80093e2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	b672      	cpsid	i
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	b662      	cpsie	i
 80093dc:	60fb      	str	r3, [r7, #12]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <vTaskPlaceOnEventList+0x48>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3318      	adds	r3, #24
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fe fe2d 	bl	800804a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f0:	2101      	movs	r1, #1
 80093f2:	6838      	ldr	r0, [r7, #0]
 80093f4:	f000 fa8e 	bl	8009914 <prvAddCurrentTaskToDelayedList>
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	200009b4 	.word	0x200009b4

08009404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	b672      	cpsid	i
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	b662      	cpsie	i
 800942a:	617b      	str	r3, [r7, #20]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <vTaskPlaceOnEventListRestricted+0x58>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3318      	adds	r3, #24
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7fe fde2 	bl	8008002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009448:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68b8      	ldr	r0, [r7, #8]
 800944e:	f000 fa61 	bl	8009914 <prvAddCurrentTaskToDelayedList>
	}
 8009452:	bf00      	nop
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200009b4 	.word	0x200009b4

08009460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10c      	bne.n	8009490 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	b672      	cpsid	i
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	b662      	cpsie	i
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3318      	adds	r3, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fe11 	bl	80080bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <xTaskRemoveFromEventList+0xb4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11d      	bne.n	80094de <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fe08 	bl	80080bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4b19      	ldr	r3, [pc, #100]	; (8009518 <xTaskRemoveFromEventList+0xb8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d903      	bls.n	80094c0 <xTaskRemoveFromEventList+0x60>
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <xTaskRemoveFromEventList+0xb8>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a13      	ldr	r2, [pc, #76]	; (800951c <xTaskRemoveFromEventList+0xbc>)
 80094ce:	441a      	add	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fd93 	bl	8008002 <vListInsertEnd>
 80094dc:	e005      	b.n	80094ea <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3318      	adds	r3, #24
 80094e2:	4619      	mov	r1, r3
 80094e4:	480e      	ldr	r0, [pc, #56]	; (8009520 <xTaskRemoveFromEventList+0xc0>)
 80094e6:	f7fe fd8c 	bl	8008002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <xTaskRemoveFromEventList+0xc4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d905      	bls.n	8009504 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <xTaskRemoveFromEventList+0xc8>)
 80094fe:	2201      	movs	r2, #1
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e001      	b.n	8009508 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009504:	2300      	movs	r3, #0
 8009506:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009508:	697b      	ldr	r3, [r7, #20]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000eb0 	.word	0x20000eb0
 8009518:	20000e90 	.word	0x20000e90
 800951c:	200009b8 	.word	0x200009b8
 8009520:	20000e48 	.word	0x20000e48
 8009524:	200009b4 	.word	0x200009b4
 8009528:	20000e9c 	.word	0x20000e9c

0800952c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <vTaskInternalSetTimeOutState+0x24>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <vTaskInternalSetTimeOutState+0x28>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20000ea0 	.word	0x20000ea0
 8009554:	20000e8c 	.word	0x20000e8c

08009558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10c      	bne.n	8009582 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	b672      	cpsid	i
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	b662      	cpsie	i
 800957c:	613b      	str	r3, [r7, #16]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10c      	bne.n	80095a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	b672      	cpsid	i
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	b662      	cpsie	i
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80095a2:	f000 fe73 	bl	800a28c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095a6:	4b1d      	ldr	r3, [pc, #116]	; (800961c <xTaskCheckForTimeOut+0xc4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095be:	d102      	bne.n	80095c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	e023      	b.n	800960e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	4b15      	ldr	r3, [pc, #84]	; (8009620 <xTaskCheckForTimeOut+0xc8>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d007      	beq.n	80095e2 <xTaskCheckForTimeOut+0x8a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d302      	bcc.n	80095e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e015      	b.n	800960e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d20b      	bcs.n	8009604 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	1ad2      	subs	r2, r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff ff97 	bl	800952c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095fe:	2300      	movs	r3, #0
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	e004      	b.n	800960e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800960a:	2301      	movs	r3, #1
 800960c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800960e:	f000 fe71 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8009612:	69fb      	ldr	r3, [r7, #28]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20000e8c 	.word	0x20000e8c
 8009620:	20000ea0 	.word	0x20000ea0

08009624 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009628:	4b03      	ldr	r3, [pc, #12]	; (8009638 <vTaskMissedYield+0x14>)
 800962a:	2201      	movs	r2, #1
 800962c:	601a      	str	r2, [r3, #0]
}
 800962e:	bf00      	nop
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	20000e9c 	.word	0x20000e9c

0800963c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009644:	f000 f852 	bl	80096ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <prvIdleTask+0x28>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d9f9      	bls.n	8009644 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <prvIdleTask+0x2c>)
 8009652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009660:	e7f0      	b.n	8009644 <prvIdleTask+0x8>
 8009662:	bf00      	nop
 8009664:	200009b8 	.word	0x200009b8
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009672:	2300      	movs	r3, #0
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	e00c      	b.n	8009692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4a12      	ldr	r2, [pc, #72]	; (80096cc <prvInitialiseTaskLists+0x60>)
 8009684:	4413      	add	r3, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fc8e 	bl	8007fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3301      	adds	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b37      	cmp	r3, #55	; 0x37
 8009696:	d9ef      	bls.n	8009678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009698:	480d      	ldr	r0, [pc, #52]	; (80096d0 <prvInitialiseTaskLists+0x64>)
 800969a:	f7fe fc85 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800969e:	480d      	ldr	r0, [pc, #52]	; (80096d4 <prvInitialiseTaskLists+0x68>)
 80096a0:	f7fe fc82 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096a4:	480c      	ldr	r0, [pc, #48]	; (80096d8 <prvInitialiseTaskLists+0x6c>)
 80096a6:	f7fe fc7f 	bl	8007fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096aa:	480c      	ldr	r0, [pc, #48]	; (80096dc <prvInitialiseTaskLists+0x70>)
 80096ac:	f7fe fc7c 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096b0:	480b      	ldr	r0, [pc, #44]	; (80096e0 <prvInitialiseTaskLists+0x74>)
 80096b2:	f7fe fc79 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <prvInitialiseTaskLists+0x78>)
 80096b8:	4a05      	ldr	r2, [pc, #20]	; (80096d0 <prvInitialiseTaskLists+0x64>)
 80096ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <prvInitialiseTaskLists+0x7c>)
 80096be:	4a05      	ldr	r2, [pc, #20]	; (80096d4 <prvInitialiseTaskLists+0x68>)
 80096c0:	601a      	str	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200009b8 	.word	0x200009b8
 80096d0:	20000e18 	.word	0x20000e18
 80096d4:	20000e2c 	.word	0x20000e2c
 80096d8:	20000e48 	.word	0x20000e48
 80096dc:	20000e5c 	.word	0x20000e5c
 80096e0:	20000e74 	.word	0x20000e74
 80096e4:	20000e40 	.word	0x20000e40
 80096e8:	20000e44 	.word	0x20000e44

080096ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f2:	e019      	b.n	8009728 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096f4:	f000 fdca 	bl	800a28c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f8:	4b10      	ldr	r3, [pc, #64]	; (800973c <prvCheckTasksWaitingTermination+0x50>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fcd9 	bl	80080bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800970a:	4b0d      	ldr	r3, [pc, #52]	; (8009740 <prvCheckTasksWaitingTermination+0x54>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3b01      	subs	r3, #1
 8009710:	4a0b      	ldr	r2, [pc, #44]	; (8009740 <prvCheckTasksWaitingTermination+0x54>)
 8009712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009714:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <prvCheckTasksWaitingTermination+0x58>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3b01      	subs	r3, #1
 800971a:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <prvCheckTasksWaitingTermination+0x58>)
 800971c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800971e:	f000 fde9 	bl	800a2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f810 	bl	8009748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <prvCheckTasksWaitingTermination+0x58>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e1      	bne.n	80096f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000e5c 	.word	0x20000e5c
 8009740:	20000e88 	.word	0x20000e88
 8009744:	20000e70 	.word	0x20000e70

08009748 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3354      	adds	r3, #84	; 0x54
 8009754:	4618      	mov	r0, r3
 8009756:	f003 ff99 	bl	800d68c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009768:	4618      	mov	r0, r3
 800976a:	f000 ff85 	bl	800a678 <vPortFree>
				vPortFree( pxTCB );
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 ff82 	bl	800a678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009774:	e01a      	b.n	80097ac <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800977c:	2b01      	cmp	r3, #1
 800977e:	d103      	bne.n	8009788 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 ff79 	bl	800a678 <vPortFree>
	}
 8009786:	e011      	b.n	80097ac <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800978e:	2b02      	cmp	r3, #2
 8009790:	d00c      	beq.n	80097ac <prvDeleteTCB+0x64>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	b672      	cpsid	i
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	b662      	cpsie	i
 80097a6:	60fb      	str	r3, [r7, #12]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <prvDeleteTCB+0x62>
	}
 80097ac:	bf00      	nop
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ba:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <prvResetNextTaskUnblockTime+0x38>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <prvResetNextTaskUnblockTime+0x3c>)
 80097c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097cc:	e008      	b.n	80097e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <prvResetNextTaskUnblockTime+0x38>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4a04      	ldr	r2, [pc, #16]	; (80097f0 <prvResetNextTaskUnblockTime+0x3c>)
 80097de:	6013      	str	r3, [r2, #0]
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	20000e40 	.word	0x20000e40
 80097f0:	20000ea8 	.word	0x20000ea8

080097f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <xTaskGetSchedulerState+0x34>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009802:	2301      	movs	r3, #1
 8009804:	607b      	str	r3, [r7, #4]
 8009806:	e008      	b.n	800981a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009808:	4b08      	ldr	r3, [pc, #32]	; (800982c <xTaskGetSchedulerState+0x38>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009810:	2302      	movs	r3, #2
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e001      	b.n	800981a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009816:	2300      	movs	r3, #0
 8009818:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800981a:	687b      	ldr	r3, [r7, #4]
	}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	20000e94 	.word	0x20000e94
 800982c:	20000eb0 	.word	0x20000eb0

08009830 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d05a      	beq.n	80098fc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009846:	4b30      	ldr	r3, [pc, #192]	; (8009908 <xTaskPriorityDisinherit+0xd8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	429a      	cmp	r2, r3
 800984e:	d00c      	beq.n	800986a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	b672      	cpsid	i
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	b662      	cpsie	i
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10c      	bne.n	800988c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	b672      	cpsid	i
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	b662      	cpsie	i
 8009886:	60bb      	str	r3, [r7, #8]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d02c      	beq.n	80098fc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d128      	bne.n	80098fc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3304      	adds	r3, #4
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fc04 	bl	80080bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098cc:	4b0f      	ldr	r3, [pc, #60]	; (800990c <xTaskPriorityDisinherit+0xdc>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d903      	bls.n	80098dc <xTaskPriorityDisinherit+0xac>
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	4a0c      	ldr	r2, [pc, #48]	; (800990c <xTaskPriorityDisinherit+0xdc>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4a09      	ldr	r2, [pc, #36]	; (8009910 <xTaskPriorityDisinherit+0xe0>)
 80098ea:	441a      	add	r2, r3
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	3304      	adds	r3, #4
 80098f0:	4619      	mov	r1, r3
 80098f2:	4610      	mov	r0, r2
 80098f4:	f7fe fb85 	bl	8008002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098f8:	2301      	movs	r3, #1
 80098fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098fc:	697b      	ldr	r3, [r7, #20]
	}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200009b4 	.word	0x200009b4
 800990c:	20000e90 	.word	0x20000e90
 8009910:	200009b8 	.word	0x200009b8

08009914 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800991e:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009924:	4b20      	ldr	r3, [pc, #128]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fbc6 	bl	80080bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009936:	d10a      	bne.n	800994e <prvAddCurrentTaskToDelayedList+0x3a>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3304      	adds	r3, #4
 8009944:	4619      	mov	r1, r3
 8009946:	4819      	ldr	r0, [pc, #100]	; (80099ac <prvAddCurrentTaskToDelayedList+0x98>)
 8009948:	f7fe fb5b 	bl	8008002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800994c:	e026      	b.n	800999c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4413      	add	r3, r2
 8009954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	429a      	cmp	r2, r3
 8009964:	d209      	bcs.n	800997a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009966:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3304      	adds	r3, #4
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	f7fe fb69 	bl	800804a <vListInsert>
}
 8009978:	e010      	b.n	800999c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997a:	4b0e      	ldr	r3, [pc, #56]	; (80099b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fe fb5f 	bl	800804a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	429a      	cmp	r2, r3
 8009994:	d202      	bcs.n	800999c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009996:	4a08      	ldr	r2, [pc, #32]	; (80099b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6013      	str	r3, [r2, #0]
}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000e8c 	.word	0x20000e8c
 80099a8:	200009b4 	.word	0x200009b4
 80099ac:	20000e74 	.word	0x20000e74
 80099b0:	20000e44 	.word	0x20000e44
 80099b4:	20000e40 	.word	0x20000e40
 80099b8:	20000ea8 	.word	0x20000ea8

080099bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099c6:	f000 fb15 	bl	8009ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ca:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <xTimerCreateTimerTask+0x84>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d021      	beq.n	8009a16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099da:	1d3a      	adds	r2, r7, #4
 80099dc:	f107 0108 	add.w	r1, r7, #8
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fac5 	bl	8007f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	2302      	movs	r3, #2
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	2300      	movs	r3, #0
 80099fa:	460a      	mov	r2, r1
 80099fc:	4911      	ldr	r1, [pc, #68]	; (8009a44 <xTimerCreateTimerTask+0x88>)
 80099fe:	4812      	ldr	r0, [pc, #72]	; (8009a48 <xTimerCreateTimerTask+0x8c>)
 8009a00:	f7ff f890 	bl	8008b24 <xTaskCreateStatic>
 8009a04:	4603      	mov	r3, r0
 8009a06:	4a11      	ldr	r2, [pc, #68]	; (8009a4c <xTimerCreateTimerTask+0x90>)
 8009a08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a0a:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <xTimerCreateTimerTask+0x90>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a12:	2301      	movs	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10c      	bne.n	8009a36 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	b672      	cpsid	i
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	b662      	cpsie	i
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000ee4 	.word	0x20000ee4
 8009a44:	0800d824 	.word	0x0800d824
 8009a48:	08009b8d 	.word	0x08009b8d
 8009a4c:	20000ee8 	.word	0x20000ee8

08009a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10c      	bne.n	8009a82 <xTimerGenericCommand+0x32>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	b672      	cpsid	i
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	b662      	cpsie	i
 8009a7c:	623b      	str	r3, [r7, #32]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a82:	4b1a      	ldr	r3, [pc, #104]	; (8009aec <xTimerGenericCommand+0x9c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d02a      	beq.n	8009ae0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	dc18      	bgt.n	8009ace <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a9c:	f7ff feaa 	bl	80097f4 <xTaskGetSchedulerState>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d109      	bne.n	8009aba <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009aa6:	4b11      	ldr	r3, [pc, #68]	; (8009aec <xTimerGenericCommand+0x9c>)
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f107 0110 	add.w	r1, r7, #16
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	f7fe fc3d 	bl	8008330 <xQueueGenericSend>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ab8:	e012      	b.n	8009ae0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009aba:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <xTimerGenericCommand+0x9c>)
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	f107 0110 	add.w	r1, r7, #16
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f7fe fc33 	bl	8008330 <xQueueGenericSend>
 8009aca:	6278      	str	r0, [r7, #36]	; 0x24
 8009acc:	e008      	b.n	8009ae0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <xTimerGenericCommand+0x9c>)
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	f107 0110 	add.w	r1, r7, #16
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	f7fe fd2f 	bl	800853c <xQueueGenericSendFromISR>
 8009ade:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3728      	adds	r7, #40	; 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000ee4 	.word	0x20000ee4

08009af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <prvProcessExpiredTimer+0x98>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fad7 	bl	80080bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d024      	beq.n	8009b66 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	699a      	ldr	r2, [r3, #24]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	18d1      	adds	r1, r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	6978      	ldr	r0, [r7, #20]
 8009b2a:	f000 f8d3 	bl	8009cd4 <prvInsertTimerInActiveList>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d021      	beq.n	8009b78 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b34:	2300      	movs	r3, #0
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6978      	ldr	r0, [r7, #20]
 8009b40:	f7ff ff86 	bl	8009a50 <xTimerGenericCommand>
 8009b44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d115      	bne.n	8009b78 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	b672      	cpsid	i
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	b662      	cpsie	i
 8009b60:	60fb      	str	r3, [r7, #12]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b6c:	f023 0301 	bic.w	r3, r3, #1
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	6978      	ldr	r0, [r7, #20]
 8009b7e:	4798      	blx	r3
}
 8009b80:	bf00      	nop
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000edc 	.word	0x20000edc

08009b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f857 	bl	8009c4c <prvGetNextExpireTime>
 8009b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f803 	bl	8009bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009baa:	f000 f8d5 	bl	8009d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bae:	e7f1      	b.n	8009b94 <prvTimerTask+0x8>

08009bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bba:	f7ff fa1d 	bl	8008ff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f866 	bl	8009c94 <prvSampleTimeNow>
 8009bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d130      	bne.n	8009c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <prvProcessTimerOrBlockTask+0x3c>
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d806      	bhi.n	8009bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bde:	f7ff fa19 	bl	8009014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff83 	bl	8009af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bea:	e024      	b.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bf2:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <prvProcessTimerOrBlockTask+0x90>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <prvProcessTimerOrBlockTask+0x50>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <prvProcessTimerOrBlockTask+0x52>
 8009c00:	2300      	movs	r3, #0
 8009c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c04:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <prvProcessTimerOrBlockTask+0x94>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4619      	mov	r1, r3
 8009c12:	f7fe ff53 	bl	8008abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c16:	f7ff f9fd 	bl	8009014 <xTaskResumeAll>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <prvProcessTimerOrBlockTask+0x98>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
}
 8009c30:	e001      	b.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c32:	f7ff f9ef 	bl	8009014 <xTaskResumeAll>
}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000ee0 	.word	0x20000ee0
 8009c44:	20000ee4 	.word	0x20000ee4
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <prvGetNextExpireTime+0x44>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <prvGetNextExpireTime+0x16>
 8009c5e:	2201      	movs	r2, #1
 8009c60:	e000      	b.n	8009c64 <prvGetNextExpireTime+0x18>
 8009c62:	2200      	movs	r2, #0
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d105      	bne.n	8009c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <prvGetNextExpireTime+0x44>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	e001      	b.n	8009c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c80:	68fb      	ldr	r3, [r7, #12]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000edc 	.word	0x20000edc

08009c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c9c:	f7ff fa5a 	bl	8009154 <xTaskGetTickCount>
 8009ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <prvSampleTimeNow+0x3c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d205      	bcs.n	8009cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cac:	f000 f93c 	bl	8009f28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cbe:	4a04      	ldr	r2, [pc, #16]	; (8009cd0 <prvSampleTimeNow+0x3c>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000eec 	.word	0x20000eec

08009cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d812      	bhi.n	8009d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e01b      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d0e:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <prvInsertTimerInActiveList+0x7c>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7fe f996 	bl	800804a <vListInsert>
 8009d1e:	e012      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d206      	bcs.n	8009d36 <prvInsertTimerInActiveList+0x62>
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e007      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <prvInsertTimerInActiveList+0x80>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7fe f982 	bl	800804a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d46:	697b      	ldr	r3, [r7, #20]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000ee0 	.word	0x20000ee0
 8009d54:	20000edc 	.word	0x20000edc

08009d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d5e:	e0d0      	b.n	8009f02 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da1a      	bge.n	8009d9c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d66:	1d3b      	adds	r3, r7, #4
 8009d68:	3304      	adds	r3, #4
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10c      	bne.n	8009d8c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	b672      	cpsid	i
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	b662      	cpsie	i
 8009d86:	61fb      	str	r3, [r7, #28]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d92:	6850      	ldr	r0, [r2, #4]
 8009d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d96:	6892      	ldr	r2, [r2, #8]
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f2c0 80ae 	blt.w	8009f00 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe f981 	bl	80080bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dba:	463b      	mov	r3, r7
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff ff69 	bl	8009c94 <prvSampleTimeNow>
 8009dc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	f200 809b 	bhi.w	8009f02 <prvProcessReceivedCommands+0x1aa>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <prvProcessReceivedCommands+0x7c>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009dfd 	.word	0x08009dfd
 8009dd8:	08009dfd 	.word	0x08009dfd
 8009ddc:	08009dfd 	.word	0x08009dfd
 8009de0:	08009e75 	.word	0x08009e75
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009ed7 	.word	0x08009ed7
 8009dec:	08009dfd 	.word	0x08009dfd
 8009df0:	08009dfd 	.word	0x08009dfd
 8009df4:	08009e75 	.word	0x08009e75
 8009df8:	08009e89 	.word	0x08009e89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	18d1      	adds	r1, r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e1c:	f7ff ff5a 	bl	8009cd4 <prvInsertTimerInActiveList>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d06d      	beq.n	8009f02 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d062      	beq.n	8009f02 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	441a      	add	r2, r3
 8009e44:	2300      	movs	r3, #0
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e4e:	f7ff fdff 	bl	8009a50 <xTimerGenericCommand>
 8009e52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d153      	bne.n	8009f02 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	b672      	cpsid	i
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	b662      	cpsie	i
 8009e6e:	61bb      	str	r3, [r7, #24]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e86:	e03c      	b.n	8009f02 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8e:	f043 0301 	orr.w	r3, r3, #1
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10c      	bne.n	8009ec2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	617b      	str	r3, [r7, #20]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	18d1      	adds	r1, r2, r3
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed0:	f7ff ff00 	bl	8009cd4 <prvInsertTimerInActiveList>
					break;
 8009ed4:	e015      	b.n	8009f02 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee6:	f000 fbc7 	bl	800a678 <vPortFree>
 8009eea:	e00a      	b.n	8009f02 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009efe:	e000      	b.n	8009f02 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f02:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <prvProcessReceivedCommands+0x1cc>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1d39      	adds	r1, r7, #4
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fbb6 	bl	800867c <xQueueReceive>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f47f af24 	bne.w	8009d60 <prvProcessReceivedCommands+0x8>
	}
}
 8009f18:	bf00      	nop
 8009f1a:	bf00      	nop
 8009f1c:	3730      	adds	r7, #48	; 0x30
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000ee4 	.word	0x20000ee4

08009f28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f2e:	e04a      	b.n	8009fc6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f30:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3a:	4b2c      	ldr	r3, [pc, #176]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe f8b7 	bl	80080bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d030      	beq.n	8009fc6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d90e      	bls.n	8009f94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f82:	4b1a      	ldr	r3, [pc, #104]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe f85c 	bl	800804a <vListInsert>
 8009f92:	e018      	b.n	8009fc6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f94:	2300      	movs	r3, #0
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7ff fd56 	bl	8009a50 <xTimerGenericCommand>
 8009fa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10c      	bne.n	8009fc6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	b672      	cpsid	i
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	b662      	cpsie	i
 8009fc0:	603b      	str	r3, [r7, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fc6:	4b09      	ldr	r3, [pc, #36]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1af      	bne.n	8009f30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fd0:	4b06      	ldr	r3, [pc, #24]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fd6:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <prvSwitchTimerLists+0xc8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a04      	ldr	r2, [pc, #16]	; (8009fec <prvSwitchTimerLists+0xc4>)
 8009fdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fde:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <prvSwitchTimerLists+0xc8>)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	6013      	str	r3, [r2, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000edc 	.word	0x20000edc
 8009ff0:	20000ee0 	.word	0x20000ee0

08009ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ffa:	f000 f947 	bl	800a28c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ffe:	4b15      	ldr	r3, [pc, #84]	; (800a054 <prvCheckForValidListAndQueue+0x60>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d120      	bne.n	800a048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a006:	4814      	ldr	r0, [pc, #80]	; (800a058 <prvCheckForValidListAndQueue+0x64>)
 800a008:	f7fd ffce 	bl	8007fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a00c:	4813      	ldr	r0, [pc, #76]	; (800a05c <prvCheckForValidListAndQueue+0x68>)
 800a00e:	f7fd ffcb 	bl	8007fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a012:	4b13      	ldr	r3, [pc, #76]	; (800a060 <prvCheckForValidListAndQueue+0x6c>)
 800a014:	4a10      	ldr	r2, [pc, #64]	; (800a058 <prvCheckForValidListAndQueue+0x64>)
 800a016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <prvCheckForValidListAndQueue+0x70>)
 800a01a:	4a10      	ldr	r2, [pc, #64]	; (800a05c <prvCheckForValidListAndQueue+0x68>)
 800a01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a01e:	2300      	movs	r3, #0
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	4b11      	ldr	r3, [pc, #68]	; (800a068 <prvCheckForValidListAndQueue+0x74>)
 800a024:	4a11      	ldr	r2, [pc, #68]	; (800a06c <prvCheckForValidListAndQueue+0x78>)
 800a026:	2110      	movs	r1, #16
 800a028:	200a      	movs	r0, #10
 800a02a:	f7fe f8db 	bl	80081e4 <xQueueGenericCreateStatic>
 800a02e:	4603      	mov	r3, r0
 800a030:	4a08      	ldr	r2, [pc, #32]	; (800a054 <prvCheckForValidListAndQueue+0x60>)
 800a032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a034:	4b07      	ldr	r3, [pc, #28]	; (800a054 <prvCheckForValidListAndQueue+0x60>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d005      	beq.n	800a048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <prvCheckForValidListAndQueue+0x60>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	490b      	ldr	r1, [pc, #44]	; (800a070 <prvCheckForValidListAndQueue+0x7c>)
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fd10 	bl	8008a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a048:	f000 f954 	bl	800a2f4 <vPortExitCritical>
}
 800a04c:	bf00      	nop
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000ee4 	.word	0x20000ee4
 800a058:	20000eb4 	.word	0x20000eb4
 800a05c:	20000ec8 	.word	0x20000ec8
 800a060:	20000edc 	.word	0x20000edc
 800a064:	20000ee0 	.word	0x20000ee0
 800a068:	20000f90 	.word	0x20000f90
 800a06c:	20000ef0 	.word	0x20000ef0
 800a070:	0800d82c 	.word	0x0800d82c

0800a074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3b04      	subs	r3, #4
 800a084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3b04      	subs	r3, #4
 800a092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f023 0201 	bic.w	r2, r3, #1
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3b04      	subs	r3, #4
 800a0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0a4:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <pxPortInitialiseStack+0x64>)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3b14      	subs	r3, #20
 800a0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f06f 0202 	mvn.w	r2, #2
 800a0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3b20      	subs	r3, #32
 800a0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	0800a0dd 	.word	0x0800a0dd

0800a0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <prvTaskExitError+0x5c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ee:	d00c      	beq.n	800a10a <prvTaskExitError+0x2e>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	b672      	cpsid	i
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	b662      	cpsie	i
 800a104:	60fb      	str	r3, [r7, #12]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <prvTaskExitError+0x2c>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	b672      	cpsid	i
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	b662      	cpsie	i
 800a11e:	60bb      	str	r3, [r7, #8]
}
 800a120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a122:	bf00      	nop
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0fc      	beq.n	800a124 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	20000118 	.word	0x20000118
 800a13c:	00000000 	.word	0x00000000

0800a140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <pxCurrentTCBConst2>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f380 8809 	msr	PSP, r0
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	4770      	bx	lr
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst2>:
 800a160:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a168:	4808      	ldr	r0, [pc, #32]	; (800a18c <prvPortStartFirstTask+0x24>)
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f380 8808 	msr	MSP, r0
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8814 	msr	CONTROL, r0
 800a17a:	b662      	cpsie	i
 800a17c:	b661      	cpsie	f
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	df00      	svc	0
 800a188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a18a:	bf00      	nop
 800a18c:	e000ed08 	.word	0xe000ed08

0800a190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a196:	4b37      	ldr	r3, [pc, #220]	; (800a274 <xPortStartScheduler+0xe4>)
 800a198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	22ff      	movs	r2, #255	; 0xff
 800a1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <xPortStartScheduler+0xe8>)
 800a1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1be:	4b2f      	ldr	r3, [pc, #188]	; (800a27c <xPortStartScheduler+0xec>)
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1c4:	e009      	b.n	800a1da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1c6:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <xPortStartScheduler+0xec>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	4a2b      	ldr	r2, [pc, #172]	; (800a27c <xPortStartScheduler+0xec>)
 800a1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b80      	cmp	r3, #128	; 0x80
 800a1e4:	d0ef      	beq.n	800a1c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1e6:	4b25      	ldr	r3, [pc, #148]	; (800a27c <xPortStartScheduler+0xec>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f1c3 0307 	rsb	r3, r3, #7
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d00c      	beq.n	800a20c <xPortStartScheduler+0x7c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	b672      	cpsid	i
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	b662      	cpsie	i
 800a206:	60bb      	str	r3, [r7, #8]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a20c:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <xPortStartScheduler+0xec>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	4a1a      	ldr	r2, [pc, #104]	; (800a27c <xPortStartScheduler+0xec>)
 800a214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a216:	4b19      	ldr	r3, [pc, #100]	; (800a27c <xPortStartScheduler+0xec>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a21e:	4a17      	ldr	r2, [pc, #92]	; (800a27c <xPortStartScheduler+0xec>)
 800a220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	b2da      	uxtb	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a22a:	4b15      	ldr	r3, [pc, #84]	; (800a280 <xPortStartScheduler+0xf0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a14      	ldr	r2, [pc, #80]	; (800a280 <xPortStartScheduler+0xf0>)
 800a230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <xPortStartScheduler+0xf0>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a11      	ldr	r2, [pc, #68]	; (800a280 <xPortStartScheduler+0xf0>)
 800a23c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a242:	f000 f8dd 	bl	800a400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <xPortStartScheduler+0xf4>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a24c:	f000 f8fc 	bl	800a448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <xPortStartScheduler+0xf8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <xPortStartScheduler+0xf8>)
 800a256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a25a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a25c:	f7ff ff84 	bl	800a168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a260:	f7ff f844 	bl	80092ec <vTaskSwitchContext>
	prvTaskExitError();
 800a264:	f7ff ff3a 	bl	800a0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	e000e400 	.word	0xe000e400
 800a278:	20000fe0 	.word	0x20000fe0
 800a27c:	20000fe4 	.word	0x20000fe4
 800a280:	e000ed20 	.word	0xe000ed20
 800a284:	20000118 	.word	0x20000118
 800a288:	e000ef34 	.word	0xe000ef34

0800a28c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	b672      	cpsid	i
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	b662      	cpsie	i
 800a2a6:	607b      	str	r3, [r7, #4]
}
 800a2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2aa:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d111      	bne.n	800a2e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <vPortEnterCritical+0x64>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00c      	beq.n	800a2e0 <vPortEnterCritical+0x54>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	b672      	cpsid	i
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	b662      	cpsie	i
 800a2da:	603b      	str	r3, [r7, #0]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <vPortEnterCritical+0x52>
	}
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000118 	.word	0x20000118
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <vPortExitCritical+0x54>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10c      	bne.n	800a31c <vPortExitCritical+0x28>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	b672      	cpsid	i
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	b662      	cpsie	i
 800a316:	607b      	str	r3, [r7, #4]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <vPortExitCritical+0x54>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3b01      	subs	r3, #1
 800a322:	4a09      	ldr	r2, [pc, #36]	; (800a348 <vPortExitCritical+0x54>)
 800a324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a326:	4b08      	ldr	r3, [pc, #32]	; (800a348 <vPortExitCritical+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <vPortExitCritical+0x46>
 800a32e:	2300      	movs	r3, #0
 800a330:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f383 8811 	msr	BASEPRI, r3
}
 800a338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000118 	.word	0x20000118
 800a34c:	00000000 	.word	0x00000000

0800a350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f01e 0f10 	tst.w	lr, #16
 800a360:	bf08      	it	eq
 800a362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a374:	b672      	cpsid	i
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	b662      	cpsie	i
 800a384:	f7fe ffb2 	bl	80092ec <vTaskSwitchContext>
 800a388:	f04f 0000 	mov.w	r0, #0
 800a38c:	f380 8811 	msr	BASEPRI, r0
 800a390:	bc09      	pop	{r0, r3}
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f01e 0f10 	tst.w	lr, #16
 800a39e:	bf08      	it	eq
 800a3a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3a4:	f380 8809 	msr	PSP, r0
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop

0800a3b0 <pxCurrentTCBConst>:
 800a3b0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	b672      	cpsid	i
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	b662      	cpsie	i
 800a3d2:	607b      	str	r3, [r7, #4]
}
 800a3d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3d6:	f7fe fecd 	bl	8009174 <xTaskIncrementTick>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3e0:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <SysTick_Handler+0x44>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	f383 8811 	msr	BASEPRI, r3
}
 800a3f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	e000ed04 	.word	0xe000ed04

0800a400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <vPortSetupTimerInterrupt+0x34>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <vPortSetupTimerInterrupt+0x38>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <vPortSetupTimerInterrupt+0x3c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a0a      	ldr	r2, [pc, #40]	; (800a440 <vPortSetupTimerInterrupt+0x40>)
 800a416:	fba2 2303 	umull	r2, r3, r2, r3
 800a41a:	099b      	lsrs	r3, r3, #6
 800a41c:	4a09      	ldr	r2, [pc, #36]	; (800a444 <vPortSetupTimerInterrupt+0x44>)
 800a41e:	3b01      	subs	r3, #1
 800a420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a422:	4b04      	ldr	r3, [pc, #16]	; (800a434 <vPortSetupTimerInterrupt+0x34>)
 800a424:	2207      	movs	r2, #7
 800a426:	601a      	str	r2, [r3, #0]
}
 800a428:	bf00      	nop
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	e000e010 	.word	0xe000e010
 800a438:	e000e018 	.word	0xe000e018
 800a43c:	2000011c 	.word	0x2000011c
 800a440:	10624dd3 	.word	0x10624dd3
 800a444:	e000e014 	.word	0xe000e014

0800a448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a458 <vPortEnableVFP+0x10>
 800a44c:	6801      	ldr	r1, [r0, #0]
 800a44e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a452:	6001      	str	r1, [r0, #0]
 800a454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a456:	bf00      	nop
 800a458:	e000ed88 	.word	0xe000ed88

0800a45c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a462:	f3ef 8305 	mrs	r3, IPSR
 800a466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	d916      	bls.n	800a49c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a46e:	4a19      	ldr	r2, [pc, #100]	; (800a4d4 <vPortValidateInterruptPriority+0x78>)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4413      	add	r3, r2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a478:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <vPortValidateInterruptPriority+0x7c>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	7afa      	ldrb	r2, [r7, #11]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d20c      	bcs.n	800a49c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	b672      	cpsid	i
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	b662      	cpsie	i
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <vPortValidateInterruptPriority+0x80>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <vPortValidateInterruptPriority+0x84>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d90c      	bls.n	800a4c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	b672      	cpsid	i
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	b662      	cpsie	i
 800a4c0:	603b      	str	r3, [r7, #0]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <vPortValidateInterruptPriority+0x68>
	}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	e000e3f0 	.word	0xe000e3f0
 800a4d8:	20000fe0 	.word	0x20000fe0
 800a4dc:	e000ed0c 	.word	0xe000ed0c
 800a4e0:	20000fe4 	.word	0x20000fe4

0800a4e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4f0:	f7fe fd82 	bl	8008ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4f4:	4b5b      	ldr	r3, [pc, #364]	; (800a664 <pvPortMalloc+0x180>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4fc:	f000 f91a 	bl	800a734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a500:	4b59      	ldr	r3, [pc, #356]	; (800a668 <pvPortMalloc+0x184>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4013      	ands	r3, r2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f040 8092 	bne.w	800a632 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01f      	beq.n	800a554 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a514:	2208      	movs	r2, #8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b00      	cmp	r3, #0
 800a524:	d016      	beq.n	800a554 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f023 0307 	bic.w	r3, r3, #7
 800a52c:	3308      	adds	r3, #8
 800a52e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <pvPortMalloc+0x70>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	b672      	cpsid	i
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	b662      	cpsie	i
 800a54e:	617b      	str	r3, [r7, #20]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d06b      	beq.n	800a632 <pvPortMalloc+0x14e>
 800a55a:	4b44      	ldr	r3, [pc, #272]	; (800a66c <pvPortMalloc+0x188>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d866      	bhi.n	800a632 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a564:	4b42      	ldr	r3, [pc, #264]	; (800a670 <pvPortMalloc+0x18c>)
 800a566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a568:	4b41      	ldr	r3, [pc, #260]	; (800a670 <pvPortMalloc+0x18c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a56e:	e004      	b.n	800a57a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <pvPortMalloc+0xa8>
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1f1      	bne.n	800a570 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a58c:	4b35      	ldr	r3, [pc, #212]	; (800a664 <pvPortMalloc+0x180>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	429a      	cmp	r2, r3
 800a594:	d04d      	beq.n	800a632 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2208      	movs	r2, #8
 800a59c:	4413      	add	r3, r2
 800a59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d921      	bls.n	800a5fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <pvPortMalloc+0x100>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	b672      	cpsid	i
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	b662      	cpsie	i
 800a5de:	613b      	str	r3, [r7, #16]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1ad2      	subs	r2, r2, r3
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5f6:	69b8      	ldr	r0, [r7, #24]
 800a5f8:	f000 f8fe 	bl	800a7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5fc:	4b1b      	ldr	r3, [pc, #108]	; (800a66c <pvPortMalloc+0x188>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	4a19      	ldr	r2, [pc, #100]	; (800a66c <pvPortMalloc+0x188>)
 800a608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a60a:	4b18      	ldr	r3, [pc, #96]	; (800a66c <pvPortMalloc+0x188>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b19      	ldr	r3, [pc, #100]	; (800a674 <pvPortMalloc+0x190>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d203      	bcs.n	800a61e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a616:	4b15      	ldr	r3, [pc, #84]	; (800a66c <pvPortMalloc+0x188>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a16      	ldr	r2, [pc, #88]	; (800a674 <pvPortMalloc+0x190>)
 800a61c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <pvPortMalloc+0x184>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	431a      	orrs	r2, r3
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a632:	f7fe fcef 	bl	8009014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00c      	beq.n	800a65a <pvPortMalloc+0x176>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	b672      	cpsid	i
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	b662      	cpsie	i
 800a654:	60fb      	str	r3, [r7, #12]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <pvPortMalloc+0x174>
	return pvReturn;
 800a65a:	69fb      	ldr	r3, [r7, #28]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3728      	adds	r7, #40	; 0x28
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20004bf0 	.word	0x20004bf0
 800a668:	20004bfc 	.word	0x20004bfc
 800a66c:	20004bf4 	.word	0x20004bf4
 800a670:	20004be8 	.word	0x20004be8
 800a674:	20004bf8 	.word	0x20004bf8

0800a678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d04c      	beq.n	800a724 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a68a:	2308      	movs	r3, #8
 800a68c:	425b      	negs	r3, r3
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4413      	add	r3, r2
 800a692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	4b23      	ldr	r3, [pc, #140]	; (800a72c <vPortFree+0xb4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10c      	bne.n	800a6c0 <vPortFree+0x48>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	b672      	cpsid	i
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	b662      	cpsie	i
 800a6ba:	60fb      	str	r3, [r7, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00c      	beq.n	800a6e2 <vPortFree+0x6a>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	b672      	cpsid	i
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	b662      	cpsie	i
 800a6dc:	60bb      	str	r3, [r7, #8]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4b11      	ldr	r3, [pc, #68]	; (800a72c <vPortFree+0xb4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d019      	beq.n	800a724 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	; (800a72c <vPortFree+0xb4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	43db      	mvns	r3, r3
 800a702:	401a      	ands	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a708:	f7fe fc76 	bl	8008ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <vPortFree+0xb8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4413      	add	r3, r2
 800a716:	4a06      	ldr	r2, [pc, #24]	; (800a730 <vPortFree+0xb8>)
 800a718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f86c 	bl	800a7f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a720:	f7fe fc78 	bl	8009014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20004bfc 	.word	0x20004bfc
 800a730:	20004bf4 	.word	0x20004bf4

0800a734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a73a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a740:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <prvHeapInit+0xac>)
 800a742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3307      	adds	r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <prvHeapInit+0xac>)
 800a764:	4413      	add	r3, r2
 800a766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a76c:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <prvHeapInit+0xb0>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a772:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <prvHeapInit+0xb0>)
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a780:	2208      	movs	r2, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <prvHeapInit+0xb4>)
 800a794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <prvHeapInit+0xb4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a79e:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <prvHeapInit+0xb8>)
 800a7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <prvHeapInit+0xbc>)
 800a7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7cc:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <prvHeapInit+0xc0>)
 800a7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7d2:	601a      	str	r2, [r3, #0]
}
 800a7d4:	bf00      	nop
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000fe8 	.word	0x20000fe8
 800a7e4:	20004be8 	.word	0x20004be8
 800a7e8:	20004bf0 	.word	0x20004bf0
 800a7ec:	20004bf8 	.word	0x20004bf8
 800a7f0:	20004bf4 	.word	0x20004bf4
 800a7f4:	20004bfc 	.word	0x20004bfc

0800a7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <prvInsertBlockIntoFreeList+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <prvInsertBlockIntoFreeList+0x14>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d8f7      	bhi.n	800a806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d108      	bne.n	800a83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d118      	bne.n	800a880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d00d      	beq.n	800a876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	441a      	add	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	e008      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a876:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e003      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d002      	beq.n	800a896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	20004be8 	.word	0x20004be8
 800a8a8:	20004bf0 	.word	0x20004bf0

0800a8ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f805 	bl	800a8e2 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]
    }
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9ca 	bl	800acb0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	f000 f9a8 	bl	800ac86 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff ffeb 	bl	800a926 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4618      	mov	r0, r3
 800a966:	f000 f9af 	bl	800acc8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <_ZN4UARTC1Ev>:
#include "cmsis_os.h"

std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();


UART::UART() {
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <_ZN4UARTC1Ev+0x2c>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	601a      	str	r2, [r3, #0]
	buff = NULL;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	safeBuff = NULL;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	0800d89c 	.word	0x0800d89c

0800a9a4 <_ZN4UARTD1Ev>:

UART::~UART() {
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	4a21      	ldr	r2, [pc, #132]	; (800aa34 <_ZN4UARTD1Ev+0x90>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	601a      	str	r2, [r3, #0]
	if (buff != NULL) free(buff);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <_ZN4UARTD1Ev+0x24>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f002 fd7c 	bl	800d4c0 <free>
	if (safeBuff != NULL) free(buff);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d005      	beq.n	800a9de <_ZN4UARTD1Ev+0x3a>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f002 fd71 	bl	800d4c0 <free>

	HAL_UART_AbortReceive_IT(&handle);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f9 f99c 	bl	8003d20 <HAL_UART_AbortReceive_IT>

	std::map<USART_TypeDef*, UART*>::iterator it;
 800a9e8:	f107 0308 	add.w	r3, r7, #8
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f980 	bl	800acf2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = objectMap.find(handle.Instance);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	480f      	ldr	r0, [pc, #60]	; (800aa38 <_ZN4UARTD1Ev+0x94>)
 800a9fa:	f000 f988 	bl	800ad0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	60bb      	str	r3, [r7, #8]
	if (it != objectMap.end())
 800aa02:	480d      	ldr	r0, [pc, #52]	; (800aa38 <_ZN4UARTD1Ev+0x94>)
 800aa04:	f000 f992 	bl	800ad2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	f107 020c 	add.w	r2, r7, #12
 800aa10:	f107 0308 	add.w	r3, r7, #8
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f995 	bl	800ad46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <_ZN4UARTD1Ev+0x86>
		objectMap.erase(it);
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	4804      	ldr	r0, [pc, #16]	; (800aa38 <_ZN4UARTD1Ev+0x94>)
 800aa26:	f000 f9a2 	bl	800ad6e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>
}
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	0800d89c 	.word	0x0800d89c
 800aa38:	20004c00 	.word	0x20004c00

0800aa3c <_ZN4UARTD0Ev>:
UART::~UART() {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
}
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ffad 	bl	800a9a4 <_ZN4UARTD1Ev>
 800aa4a:	2198      	movs	r1, #152	; 0x98
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f002 fb40 	bl	800d0d2 <_ZdlPvj>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <_ZN4UART4initEP13USART_TypeDefii>:

int UART::init(USART_TypeDef *port, int baud, int packetSize_Bytes) {
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08a      	sub	sp, #40	; 0x28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	this->packetSize_Bytes = packetSize_Bytes;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	buff = (uint8_t*)calloc(this->packetSize_Bytes, sizeof(uint8_t));
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f002 fce6 	bl	800d44c <calloc>
 800aa80:	4603      	mov	r3, r0
 800aa82:	461a      	mov	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	safeBuff = (uint8_t*)calloc(this->packetSize_Bytes, sizeof(uint8_t));
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa90:	2101      	movs	r1, #1
 800aa92:	4618      	mov	r0, r3
 800aa94:	f002 fcda 	bl	800d44c <calloc>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	handle.Instance = port;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
	handle.Init.BaudRate = baud;
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	609a      	str	r2, [r3, #8]
	handle.Init.WordLength = UART_WORDLENGTH_8B;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	60da      	str	r2, [r3, #12]
	handle.Init.StopBits = UART_STOPBITS_1;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	611a      	str	r2, [r3, #16]
	handle.Init.Parity = UART_PARITY_NONE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	615a      	str	r2, [r3, #20]
	handle.Init.Mode = UART_MODE_TX_RX;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	220c      	movs	r2, #12
 800aac4:	619a      	str	r2, [r3, #24]
	handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	61da      	str	r2, [r3, #28]
	handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	621a      	str	r2, [r3, #32]
	handle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	625a      	str	r2, [r3, #36]	; 0x24
	handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&handle) != HAL_OK)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f8 fffe 	bl	8003ae4 <HAL_UART_Init>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	bf14      	ite	ne
 800aaee:	2301      	movne	r3, #1
 800aaf0:	2300      	moveq	r3, #0
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <_ZN4UART4initEP13USART_TypeDefii+0xa2>
	{
		return -1;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aafc:	e03a      	b.n	800ab74 <_ZN4UART4initEP13USART_TypeDefii+0x118>
	}


	if (handle.Instance == USART2) {
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	4a1e      	ldr	r2, [pc, #120]	; (800ab7c <_ZN4UART4initEP13USART_TypeDefii+0x120>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d108      	bne.n	800ab1a <_ZN4UART4initEP13USART_TypeDefii+0xbe>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2026      	movs	r0, #38	; 0x26
 800ab0e:	f7f5 fe05 	bl	800071c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ab12:	2026      	movs	r0, #38	; 0x26
 800ab14:	f7f5 fe1e 	bl	8000754 <HAL_NVIC_EnableIRQ>
 800ab18:	e00c      	b.n	800ab34 <_ZN4UART4initEP13USART_TypeDefii+0xd8>
	}
	else if(handle.Instance == USART3) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4a18      	ldr	r2, [pc, #96]	; (800ab80 <_ZN4UART4initEP13USART_TypeDefii+0x124>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d107      	bne.n	800ab34 <_ZN4UART4initEP13USART_TypeDefii+0xd8>
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	2027      	movs	r0, #39	; 0x27
 800ab2a:	f7f5 fdf7 	bl	800071c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ab2e:	2027      	movs	r0, #39	; 0x27
 800ab30:	f7f5 fe10 	bl	8000754 <HAL_NVIC_EnableIRQ>
	}


	objectMap.insert(std::pair<USART_TypeDef*, UART*>(handle.Instance, this));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1d19      	adds	r1, r3, #4
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab40:	f107 031c 	add.w	r3, r7, #28
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 f921 	bl	800ad8c <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>
 800ab4a:	f107 0314 	add.w	r3, r7, #20
 800ab4e:	f107 021c 	add.w	r2, r7, #28
 800ab52:	490c      	ldr	r1, [pc, #48]	; (800ab84 <_ZN4UART4initEP13USART_TypeDefii+0x128>)
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f932 	bl	800adbe <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>
	HAL_UART_Receive_IT(&handle, buff, this->packetSize_Bytes);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1d18      	adds	r0, r3, #4
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	f7f9 f89a 	bl	8003ca6 <HAL_UART_Receive_IT>
	return 0;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3728      	adds	r7, #40	; 0x28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	40004400 	.word	0x40004400
 800ab80:	40004800 	.word	0x40004800
 800ab84:	20004c00 	.word	0x20004c00

0800ab88 <_ZN4UART7hasDataEv>:

bool UART::hasData() {
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(&handle);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3304      	adds	r3, #4
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7f9 f8c3 	bl	8003d20 <HAL_UART_AbortReceive_IT>
	bool tmp = dataReady;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800aba0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive_IT(&handle, buff, packetSize_Bytes);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	1d18      	adds	r0, r3, #4
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	461a      	mov	r2, r3
 800abb6:	f7f9 f876 	bl	8003ca6 <HAL_UART_Receive_IT>
	return tmp;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <_ZN4UART7getDataEv>:

uint8_t* UART::getData() {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(&handle);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3304      	adds	r3, #4
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f9 f8a5 	bl	8003d20 <HAL_UART_AbortReceive_IT>
	std::memcpy(safeBuff, buff, (packetSize_Bytes)*sizeof(uint8_t));
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe8:	461a      	mov	r2, r3
 800abea:	f002 fc71 	bl	800d4d0 <memcpy>
	dataReady = false;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	HAL_UART_Receive_IT(&handle, buff, packetSize_Bytes);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	1d18      	adds	r0, r3, #4
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f7f9 f84c 	bl	8003ca6 <HAL_UART_Receive_IT>
	return safeBuff;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <_ZN4UART8sendDataEPhi>:

short UART::sendData(uint8_t *data, int timeout) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&this->handle, data, packetSize_Bytes, timeout);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	1d18      	adds	r0, r3, #4
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	f7f8 ffa2 	bl	8003b80 <HAL_UART_Transmit>

	return 0;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <_ZN4UART9memberIRQEv>:

void UART::memberIRQ() {
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
	//dataReady = true;
	//std::memset(buff, 0, sizeof(buff));
	HAL_UART_Transmit(&handle, buff, packetSize_Bytes, 100);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	1d18      	adds	r0, r3, #4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	2364      	movs	r3, #100	; 0x64
 800ac62:	f7f8 ff8d 	bl	8003b80 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&handle, buff, packetSize_Bytes);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1d18      	adds	r0, r3, #4
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f7f9 f814 	bl	8003ca6 <HAL_UART_Receive_IT>
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f8a9 	bl	800ade6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f8b1 	bl	800adfe <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fe0f 	bl	800a8c4 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8ab 	bl	800ae14 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f8c9 	bl	800ae68 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800acd6:	4603      	mov	r3, r0
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f8a5 	bl	800ae2a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff fe13 	bl	800a90e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f8af 	bl	800ae80 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f8e1 	bl	800aefe <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	bf14      	ite	ne
 800ad5c:	2301      	movne	r3, #1
 800ad5e:	2300      	moveq	r3, #0
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS8_E>:
      erase(iterator __position)
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__position); }
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 f8cf 	bl	800af20 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>
 800ad82:	4603      	mov	r3, r0
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <_ZNSt4pairIP13USART_TypeDefP4UARTEC1IRS1_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ad98:	68b8      	ldr	r0, [r7, #8]
 800ad9a:	f000 f8dd 	bl	800af58 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f8e1 	bl	800af6e <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 800adac:	4603      	mov	r3, r0
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	605a      	str	r2, [r3, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE6insertIS6_IS1_S3_EEENSt9enable_ifIXsrSt16is_constructibleIS8_JT_EE5valueES6_ISt17_Rb_tree_iteratorIS8_EbEE4typeEOSF_>:
	insert(_Pair&& __x)
 800adbe:	b590      	push	{r4, r7, lr}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 800adca:	68bc      	ldr	r4, [r7, #8]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f8d9 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800add2:	4602      	mov	r2, r0
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4621      	mov	r1, r4
 800add8:	4618      	mov	r0, r3
 800adda:	f000 f8de 	bl	800af9a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd90      	pop	{r4, r7, pc}

0800ade6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f91d 	bl	800b02e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <_ZNSt20_Rb_tree_key_compareISt4lessIP13USART_TypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
      { }
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d012      	beq.n	800ae60 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800ae3a:	6838      	ldr	r0, [r7, #0]
 800ae3c:	f000 f902 	bl	800b044 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800ae40:	4603      	mov	r3, r0
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff fff0 	bl	800ae2a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f000 f906 	bl	800b05c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800ae50:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f90d 	bl	800b074 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800ae5e:	e7e9      	b.n	800ae34 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
	}
    }
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ae80:	b5b0      	push	{r4, r5, r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff ffec 	bl	800ae68 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800ae90:	4604      	mov	r4, r0
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f8ff 	bl	800b096 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f905 	bl	800b0ae <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800aea4:	4603      	mov	r3, r0
 800aea6:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f828 	bl	800aefe <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	f107 020c 	add.w	r2, r7, #12
 800aeb6:	f107 0308 	add.w	r3, r7, #8
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f929 	bl	800b114 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800aec2:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d110      	bne.n	800aeea <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 800aec8:	687c      	ldr	r4, [r7, #4]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f933 	bl	800b13c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800aed6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	4629      	mov	r1, r5
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 f938 	bl	800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f807 	bl	800aefe <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800aef0:	4603      	mov	r3, r0
 800aef2:	e000      	b.n	800aef6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 800aef4:	68bb      	ldr	r3, [r7, #8]
    }
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bdb0      	pop	{r4, r5, r7, pc}

0800aefe <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	f107 030c 	add.w	r3, r7, #12
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f000 f932 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS6_E>:
      erase(iterator __position)
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
	iterator __result = __position;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	60bb      	str	r3, [r7, #8]
	++__result;
 800af2e:	f107 0308 	add.w	r3, r7, #8
 800af32:	4618      	mov	r0, r3
 800af34:	f000 f930 	bl	800b198 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>
	_M_erase_aux(__position);
 800af38:	463a      	mov	r2, r7
 800af3a:	f107 030c 	add.w	r3, r7, #12
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f000 f93a 	bl	800b1ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f946 	bl	800b1da <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>
	return __result;
 800af4e:	68bb      	ldr	r3, [r7, #8]
      }
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZSt7forwardIRP13USART_TypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b08c      	sub	sp, #48	; 0x30
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff ffec 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800afac:	4603      	mov	r3, r0
 800afae:	4619      	mov	r1, r3
 800afb0:	68b8      	ldr	r0, [r7, #8]
 800afb2:	f000 f92c 	bl	800b20e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800afb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 800afb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afba:	f000 f9c9 	bl	800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800afbe:	4602      	mov	r2, r0
 800afc0:	f107 0314 	add.w	r3, r7, #20
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f938 	bl	800b23c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	    if (__res.second)
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d013      	beq.n	800affa <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 800afd2:	6979      	ldr	r1, [r7, #20]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	68b8      	ldr	r0, [r7, #8]
 800afda:	f000 f9cc 	bl	800b376 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 800afde:	4603      	mov	r3, r0
 800afe0:	61fb      	str	r3, [r7, #28]
 800afe2:	2301      	movs	r3, #1
 800afe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afe8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800afec:	f107 031c 	add.w	r3, r7, #28
 800aff0:	4619      	mov	r1, r3
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 f9fe 	bl	800b3f4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
 800aff8:	e015      	b.n	800b026 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJS2_IS1_S5_EEEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 800affa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800affc:	68b8      	ldr	r0, [r7, #8]
 800affe:	f000 f839 	bl	800b074 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return _Res(iterator(__res.first), false);
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 f8b5 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800b010:	2300      	movs	r3, #0
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b016:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800b01a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b01e:	4619      	mov	r1, r3
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 f9e7 	bl	800b3f4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	3730      	adds	r7, #48	; 0x30
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f9d0 	bl	800b426 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f9e1 	bl	800b450 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b0ae:	b590      	push	{r4, r7, lr}
 800b0b0:	b087      	sub	sp, #28
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d01d      	beq.n	800b0fe <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800b0c2:	68fc      	ldr	r4, [r7, #12]
 800b0c4:	68b8      	ldr	r0, [r7, #8]
 800b0c6:	f000 f943 	bl	800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	6819      	ldr	r1, [r3, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 f83d 	bl	800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f083 0301 	eor.w	r3, r3, #1
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d006      	beq.n	800b0f4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	607b      	str	r3, [r7, #4]
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f7ff ffb6 	bl	800b05c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b0f0:	60b8      	str	r0, [r7, #8]
 800b0f2:	e7e3      	b.n	800b0bc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800b0f4:	68b8      	ldr	r0, [r7, #8]
 800b0f6:	f7ff ffa5 	bl	800b044 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b0fa:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800b0fc:	e7de      	b.n	800b0bc <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800b0fe:	f107 0314 	add.w	r3, r7, #20
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	f000 f838 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800b10a:	697b      	ldr	r3, [r7, #20]
    }
 800b10c:	4618      	mov	r0, r3
 800b10e:	371c      	adds	r7, #28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd90      	pop	{r4, r7, pc}

0800b114 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	bf0c      	ite	eq
 800b12a:	2301      	moveq	r3, #1
 800b12c:	2300      	movne	r3, #0
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f903 	bl	800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800b14a:	4603      	mov	r3, r0
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	bf34      	ite	cc
 800b168:	2301      	movcc	r3, #1
 800b16a:	2300      	movcs	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
      }
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 ffe8 	bl	800d17a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
	return *this;
 800b1b0:	687b      	ldr	r3, [r7, #4]
      }
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 800b1e4:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f002 f835 	bl	800d25c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 800b1f2:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 800b1f4:	68f9      	ldr	r1, [r7, #12]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff ff3c 	bl	800b074 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
      --_M_impl._M_node_count;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	615a      	str	r2, [r3, #20]
    }
 800b206:	bf00      	nop
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJS2_IS1_S5_EEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f92b 	bl	800b474 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800b21e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800b220:	6838      	ldr	r0, [r7, #0]
 800b222:	f7ff feaf 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b226:	4603      	mov	r3, r0
 800b228:	461a      	mov	r2, r3
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f932 	bl	800b496 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800b232:	68fb      	ldr	r3, [r7, #12]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b23c:	b5b0      	push	{r4, r5, r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b248:	68b8      	ldr	r0, [r7, #8]
 800b24a:	f7ff fe0d 	bl	800ae68 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800b24e:	4603      	mov	r3, r0
 800b250:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b252:	68b8      	ldr	r0, [r7, #8]
 800b254:	f7ff ff1f 	bl	800b096 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800b258:	4603      	mov	r3, r0
 800b25a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d023      	beq.n	800b2b0 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b26c:	68bc      	ldr	r4, [r7, #8]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681d      	ldr	r5, [r3, #0]
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	4618      	mov	r0, r3
 800b276:	f000 f86b 	bl	800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800b27a:	4603      	mov	r3, r0
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	4629      	mov	r1, r5
 800b282:	4620      	mov	r0, r4
 800b284:	f7ff ff66 	bl	800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b28e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff fedf 	bl	800b05c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	e004      	b.n	800b2ac <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fecd 	bl	800b044 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b2ae:	e7d8      	b.n	800b262 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	f107 0310 	add.w	r3, r7, #16
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7ff ff5e 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b2be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01d      	beq.n	800b302 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800b2c6:	68b8      	ldr	r0, [r7, #8]
 800b2c8:	f000 f905 	bl	800b4d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	f107 021c 	add.w	r2, r7, #28
 800b2d4:	f107 0310 	add.w	r3, r7, #16
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff ff1a 	bl	800b114 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d008      	beq.n	800b2f8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800b2e6:	f107 0214 	add.w	r2, r7, #20
 800b2ea:	f107 0318 	add.w	r3, r7, #24
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 f901 	bl	800b4f8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 800b2f6:	e027      	b.n	800b348 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800b2f8:	f107 0310 	add.w	r3, r7, #16
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f914 	bl	800b52a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b302:	68bc      	ldr	r4, [r7, #8]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff ff18 	bl	800b13c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b30c:	4603      	mov	r3, r0
 800b30e:	6819      	ldr	r1, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff ff1c 	bl	800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d008      	beq.n	800b334 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800b322:	f107 0214 	add.w	r2, r7, #20
 800b326:	f107 0318 	add.w	r3, r7, #24
 800b32a:	4619      	mov	r1, r3
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f8e3 	bl	800b4f8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>
 800b332:	e009      	b.n	800b348 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800b334:	2300      	movs	r3, #0
 800b336:	623b      	str	r3, [r7, #32]
 800b338:	f107 0220 	add.w	r2, r7, #32
 800b33c:	f107 0310 	add.w	r3, r7, #16
 800b340:	4619      	mov	r1, r3
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 f902 	bl	800b54c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	3728      	adds	r7, #40	; 0x28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bdb0      	pop	{r4, r5, r7, pc}

0800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f90d 	bl	800b578 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800b35e:	4602      	mov	r2, r0
 800b360:	f107 030c 	add.w	r3, r7, #12
 800b364:	4611      	mov	r1, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f914 	bl	800b594 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>
 800b36c:	4603      	mov	r3, r0
      }
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b376:	b5b0      	push	{r4, r5, r7, lr}
 800b378:	b086      	sub	sp, #24
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d119      	bne.n	800b3be <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff fe83 	bl	800b096 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800b390:	4602      	mov	r2, r0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4293      	cmp	r3, r2
 800b396:	d012      	beq.n	800b3be <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800b398:	68fc      	ldr	r4, [r7, #12]
 800b39a:	6838      	ldr	r0, [r7, #0]
 800b39c:	f7ff ffd8 	bl	800b350 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff fec9 	bl	800b13c <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b3aa:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f7ff fece 	bl	800b154 <_ZNKSt4lessIP13USART_TypeDefEclES1_S1_>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800b3c2:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800b3c4:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800b3ca:	7df8      	ldrb	r0, [r7, #23]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	f001 fee8 	bl	800d1a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff fec8 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800b3ea:	693b      	ldr	r3, [r7, #16]
    }
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b3f4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP13USART_TypeDefP4UARTEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b400:	68b8      	ldr	r0, [r7, #8]
 800b402:	f000 f8d3 	bl	800b5ac <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800b406:	4602      	mov	r2, r0
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6812      	ldr	r2, [r2, #0]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f8d7 	bl	800b5c2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800b414:	4603      	mov	r3, r0
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	711a      	strb	r2, [r3, #4]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b426:	b590      	push	{r4, r7, lr}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f8d1 	bl	800b5d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800b436:	4604      	mov	r4, r0
 800b438:	6838      	ldr	r0, [r7, #0]
 800b43a:	f000 f8d8 	bl	800b5ee <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800b43e:	4603      	mov	r3, r0
 800b440:	4619      	mov	r1, r3
 800b442:	4620      	mov	r0, r4
 800b444:	f000 f8e1 	bl	800b60a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>
      }
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}

0800b450 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f8bc 	bl	800b5d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800b460:	4603      	mov	r3, r0
 800b462:	2201      	movs	r2, #1
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f8dc 	bl	800b624 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f8ab 	bl	800b5d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800b482:	4603      	mov	r3, r0
 800b484:	2101      	movs	r1, #1
 800b486:	4618      	mov	r0, r3
 800b488:	f000 f8db 	bl	800b642 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>
 800b48c:	4603      	mov	r3, r0
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJS2_IS1_S5_EEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800b496:	b5b0      	push	{r4, r5, r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	2018      	movs	r0, #24
 800b4a8:	f7ff fa00 	bl	800a8ac <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 f893 	bl	800b5d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	68b8      	ldr	r0, [r7, #8]
 800b4b6:	f000 f89a 	bl	800b5ee <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff fd61 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 f8c9 	bl	800b660 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>
	}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bdb0      	pop	{r4, r5, r7, pc}

0800b4d6 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68da      	ldr	r2, [r3, #12]
 800b4e2:	f107 030c 	add.w	r3, r7, #12
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff fe46 	bl	800b17a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1EPSt18_Rb_tree_node_base>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP13USART_TypeDefP4UARTEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b504:	68b8      	ldr	r0, [r7, #8]
 800b506:	f000 f8be 	bl	800b686 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>
 800b50a:	4603      	mov	r3, r0
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f8c2 	bl	800b69c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800b518:	4603      	mov	r3, r0
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	605a      	str	r2, [r3, #4]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4618      	mov	r0, r3
 800b538:	f001 fe32 	bl	800d1a0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b53c:	4602      	mov	r2, r0
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
	return *this;
 800b542:	687b      	ldr	r3, [r7, #4]
      }
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b558:	68b8      	ldr	r0, [r7, #8]
 800b55a:	f000 f89f 	bl	800b69c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800b55e:	4603      	mov	r3, r0
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	605a      	str	r2, [r3, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <_ZNKSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr() const
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3310      	adds	r3, #16
 800b584:	4618      	mov	r0, r3
 800b586:	f000 f894 	bl	800b6b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 800b58a:	4603      	mov	r3, r0
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <_ZNKSt10_Select1stISt4pairIKP13USART_TypeDefP4UARTEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <_ZNSt8_Rb_treeIP13USART_TypeDefSt4pairIKS1_P4UARTESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>:
      _M_valptr()
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3310      	adds	r3, #16
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f865 	bl	800b6ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>
 800b600:	4603      	mov	r3, r0
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE7destroyIS7_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f863 	bl	800b6e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f85f 	bl	800b6f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b64c:	2200      	movs	r2, #0
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f85e 	bl	800b712 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>
 800b656:	4603      	mov	r3, r0
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEE9constructIS7_JS1_IS3_S6_EEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fc89 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b672:	4603      	mov	r3, r0
 800b674:	461a      	mov	r2, r3
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f86b 	bl	800b754 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>
 800b67e:	bf00      	nop
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f862 	bl	800b784 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f861 	bl	800b79a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE7destroyIS8_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b704:	68b8      	ldr	r0, [r7, #8]
 800b706:	f001 fce2 	bl	800d0ce <_ZdlPv>
      }
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b712:	b580      	push	{r7, lr}
 800b714:	b084      	sub	sp, #16
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f846 	bl	800b7b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>
 800b724:	4602      	mov	r2, r0
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4293      	cmp	r3, r2
 800b72a:	bf8c      	ite	hi
 800b72c:	2301      	movhi	r3, #1
 800b72e:	2300      	movls	r3, #0
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b736:	f001 fe75 	bl	800d424 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4613      	mov	r3, r2
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	4413      	add	r3, r2
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	4618      	mov	r0, r3
 800b746:	f001 fcc6 	bl	800d0d6 <_Znwj>
 800b74a:	4603      	mov	r3, r0
      }
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE9constructIS8_JS2_IS4_S7_EEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b754:	b590      	push	{r4, r7, lr}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff fc0f 	bl	800af84 <_ZSt7forwardISt4pairIP13USART_TypeDefP4UARTEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b766:	4604      	mov	r4, r0
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4619      	mov	r1, r3
 800b76c:	2008      	movs	r0, #8
 800b76e:	f7ff f89d 	bl	800a8ac <_ZnwjPv>
 800b772:	4603      	mov	r3, r0
 800b774:	4621      	mov	r1, r4
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f828 	bl	800b7cc <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>
 800b77c:	bf00      	nop
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	bd90      	pop	{r4, r7, pc}

0800b784 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() const noexcept
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4618      	mov	r0, r3
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP13USART_TypeDefP4UARTEE7_M_addrEv>:
      _M_addr() noexcept
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b7b8:	4b03      	ldr	r3, [pc, #12]	; (800b7c8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEEE8max_sizeEv+0x18>)
      }
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	05555555 	.word	0x05555555

0800b7cc <_ZNSt4pairIKP13USART_TypeDefP4UARTEC1IS1_S4_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 f812 	bl	800b802 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800b7de:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fbbf 	bl	800af6e <_ZSt7forwardIP4UARTEOT_RNSt16remove_referenceIS2_E4typeE>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	605a      	str	r2, [r3, #4]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <_ZSt7forwardIP13USART_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <_Z41__static_initialization_and_destruction_0ii>:
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d110      	bne.n	800b84a <_Z41__static_initialization_and_destruction_0ii+0x32>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b82e:	4293      	cmp	r3, r2
 800b830:	d10b      	bne.n	800b84a <_Z41__static_initialization_and_destruction_0ii+0x32>
std::map<USART_TypeDef*, UART*> UART::objectMap = std::map<USART_TypeDef*, UART*>();
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b834:	461a      	mov	r2, r3
 800b836:	2300      	movs	r3, #0
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	6053      	str	r3, [r2, #4]
 800b83c:	6093      	str	r3, [r2, #8]
 800b83e:	60d3      	str	r3, [r2, #12]
 800b840:	6113      	str	r3, [r2, #16]
 800b842:	6153      	str	r3, [r2, #20]
 800b844:	4808      	ldr	r0, [pc, #32]	; (800b868 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b846:	f7ff f87b 	bl	800a940 <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d107      	bne.n	800b860 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b856:	4293      	cmp	r3, r2
 800b858:	d102      	bne.n	800b860 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800b85a:	4803      	ldr	r0, [pc, #12]	; (800b868 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b85c:	f7ff f87d 	bl	800a95a <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20004c00 	.word	0x20004c00

0800b86c <_GLOBAL__sub_I__ZN4UART9objectMapE>:
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
 800b870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b874:	2001      	movs	r0, #1
 800b876:	f7ff ffcf 	bl	800b818 <_Z41__static_initialization_and_destruction_0ii>
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <_GLOBAL__sub_D__ZN4UART9objectMapE>:
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
 800b880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b884:	2000      	movs	r0, #0
 800b886:	f7ff ffc7 	bl	800b818 <_Z41__static_initialization_and_destruction_0ii>
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b890:	4904      	ldr	r1, [pc, #16]	; (800b8a4 <MX_FATFS_Init+0x18>)
 800b892:	4805      	ldr	r0, [pc, #20]	; (800b8a8 <MX_FATFS_Init+0x1c>)
 800b894:	f7fc fa00 	bl	8007c98 <FATFS_LinkDriver>
 800b898:	4603      	mov	r3, r0
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <MX_FATFS_Init+0x20>)
 800b89e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b8a0:	bf00      	nop
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20004f68 	.word	0x20004f68
 800b8a8:	20000194 	.word	0x20000194
 800b8ac:	20004f6c 	.word	0x20004f6c

0800b8b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b8b4:	f7f4 fe28 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b8b8:	f000 f854 	bl	800b964 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b8bc:	f000 f9b2 	bl	800bc24 <_ZL12MX_GPIO_Initv>
  //MX_USART3_UART_Init();
  //MX_USART2_UART_Init();
  MX_FATFS_Init();
 800b8c0:	f7ff ffe4 	bl	800b88c <MX_FATFS_Init>
  MX_SPI1_Init();
 800b8c4:	f000 f93c 	bl	800bb40 <_ZL12MX_SPI1_Initv>
  MX_I2C1_Init();
 800b8c8:	f000 f8ec 	bl	800baa4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */


  usb.init(USART3, 115200, 10);
 800b8cc:	230a      	movs	r3, #10
 800b8ce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b8d2:	4918      	ldr	r1, [pc, #96]	; (800b934 <main+0x84>)
 800b8d4:	4818      	ldr	r0, [pc, #96]	; (800b938 <main+0x88>)
 800b8d6:	f7ff f8c1 	bl	800aa5c <_ZN4UART4initEP13USART_TypeDefii>
  ble.init(USART2, 9600, 10);
 800b8da:	230a      	movs	r3, #10
 800b8dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b8e0:	4916      	ldr	r1, [pc, #88]	; (800b93c <main+0x8c>)
 800b8e2:	4817      	ldr	r0, [pc, #92]	; (800b940 <main+0x90>)
 800b8e4:	f7ff f8ba 	bl	800aa5c <_ZN4UART4initEP13USART_TypeDefii>
  huart3 = usb.handle;
 800b8e8:	4a16      	ldr	r2, [pc, #88]	; (800b944 <main+0x94>)
 800b8ea:	4b13      	ldr	r3, [pc, #76]	; (800b938 <main+0x88>)
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	2284      	movs	r2, #132	; 0x84
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f001 fdec 	bl	800d4d0 <memcpy>
  huart2 = ble.handle;
 800b8f8:	4a13      	ldr	r2, [pc, #76]	; (800b948 <main+0x98>)
 800b8fa:	4b11      	ldr	r3, [pc, #68]	; (800b940 <main+0x90>)
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	3304      	adds	r3, #4
 800b900:	2284      	movs	r2, #132	; 0x84
 800b902:	4619      	mov	r1, r3
 800b904:	f001 fde4 	bl	800d4d0 <memcpy>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800b908:	f7fc f9dc 	bl	8007cc4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED01 */
  blinkLED01Handle = osThreadNew(StartDefaultTask, NULL, &blinkLED01_attributes);
 800b90c:	4a0f      	ldr	r2, [pc, #60]	; (800b94c <main+0x9c>)
 800b90e:	2100      	movs	r1, #0
 800b910:	480f      	ldr	r0, [pc, #60]	; (800b950 <main+0xa0>)
 800b912:	f7fc fa41 	bl	8007d98 <osThreadNew>
 800b916:	4603      	mov	r3, r0
 800b918:	4a0e      	ldr	r2, [pc, #56]	; (800b954 <main+0xa4>)
 800b91a:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED02 */
  blinkLED02Handle = osThreadNew(StartTask02, NULL, &blinkLED02_attributes);
 800b91c:	4a0e      	ldr	r2, [pc, #56]	; (800b958 <main+0xa8>)
 800b91e:	2100      	movs	r1, #0
 800b920:	480e      	ldr	r0, [pc, #56]	; (800b95c <main+0xac>)
 800b922:	f7fc fa39 	bl	8007d98 <osThreadNew>
 800b926:	4603      	mov	r3, r0
 800b928:	4a0d      	ldr	r2, [pc, #52]	; (800b960 <main+0xb0>)
 800b92a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800b92c:	f7fc f9fe 	bl	8007d2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b930:	e7fe      	b.n	800b930 <main+0x80>
 800b932:	bf00      	nop
 800b934:	40004800 	.word	0x40004800
 800b938:	20004cc8 	.word	0x20004cc8
 800b93c:	40004400 	.word	0x40004400
 800b940:	20004d60 	.word	0x20004d60
 800b944:	20004df8 	.word	0x20004df8
 800b948:	20004e7c 	.word	0x20004e7c
 800b94c:	0800d8a4 	.word	0x0800d8a4
 800b950:	0800be19 	.word	0x0800be19
 800b954:	20004f00 	.word	0x20004f00
 800b958:	0800d8c8 	.word	0x0800d8c8
 800b95c:	0800be3d 	.word	0x0800be3d
 800b960:	20004f04 	.word	0x20004f04

0800b964 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b0b4      	sub	sp, #208	; 0xd0
 800b968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b96a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b96e:	2230      	movs	r2, #48	; 0x30
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f001 fdba 	bl	800d4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b978:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	605a      	str	r2, [r3, #4]
 800b982:	609a      	str	r2, [r3, #8]
 800b984:	60da      	str	r2, [r3, #12]
 800b986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	2284      	movs	r2, #132	; 0x84
 800b98e:	2100      	movs	r1, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f001 fdab 	bl	800d4ec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800b996:	f7f6 fc43 	bl	8002220 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b99a:	4b3f      	ldr	r3, [pc, #252]	; (800ba98 <_Z18SystemClock_Configv+0x134>)
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	4a3e      	ldr	r2, [pc, #248]	; (800ba98 <_Z18SystemClock_Configv+0x134>)
 800b9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9a6:	4b3c      	ldr	r3, [pc, #240]	; (800ba98 <_Z18SystemClock_Configv+0x134>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b9b2:	4b3a      	ldr	r3, [pc, #232]	; (800ba9c <_Z18SystemClock_Configv+0x138>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b9ba:	4a38      	ldr	r2, [pc, #224]	; (800ba9c <_Z18SystemClock_Configv+0x138>)
 800b9bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	4b36      	ldr	r3, [pc, #216]	; (800ba9c <_Z18SystemClock_Configv+0x138>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b9d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800b9d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b9e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800b9f0:	2348      	movs	r3, #72	; 0x48
 800b9f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7f6 fc1a 	bl	8002240 <HAL_RCC_OscConfig>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bf14      	ite	ne
 800ba12:	2301      	movne	r3, #1
 800ba14:	2300      	moveq	r3, #0
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800ba1c:	f000 fa40 	bl	800bea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ba20:	230f      	movs	r3, #15
 800ba22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ba26:	2302      	movs	r3, #2
 800ba28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ba32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ba40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ba44:	2102      	movs	r1, #2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f6 fe9e 	bl	8002788 <HAL_RCC_ClockConfig>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bf14      	ite	ne
 800ba52:	2301      	movne	r3, #1
 800ba54:	2300      	moveq	r3, #0
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 800ba5c:	f000 fa20 	bl	800bea0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800ba60:	4b0f      	ldr	r3, [pc, #60]	; (800baa0 <_Z18SystemClock_Configv+0x13c>)
 800ba62:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ba64:	2300      	movs	r3, #0
 800ba66:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba72:	f107 0308 	add.w	r3, r7, #8
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7f7 f8ba 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bf14      	ite	ne
 800ba82:	2301      	movne	r3, #1
 800ba84:	2300      	moveq	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <_Z18SystemClock_Configv+0x12c>
  {
    Error_Handler();
 800ba8c:	f000 fa08 	bl	800bea0 <Error_Handler>
  }
}
 800ba90:	bf00      	nop
 800ba92:	37d0      	adds	r7, #208	; 0xd0
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	40023800 	.word	0x40023800
 800ba9c:	40007000 	.word	0x40007000
 800baa0:	00204100 	.word	0x00204100

0800baa4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800baa8:	4b22      	ldr	r3, [pc, #136]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800baaa:	4a23      	ldr	r2, [pc, #140]	; (800bb38 <_ZL12MX_I2C1_Initv+0x94>)
 800baac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bab0:	4a22      	ldr	r2, [pc, #136]	; (800bb3c <_ZL12MX_I2C1_Initv+0x98>)
 800bab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800baba:	4b1e      	ldr	r3, [pc, #120]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800babc:	2201      	movs	r2, #1
 800babe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bac0:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bac8:	2200      	movs	r2, #0
 800baca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bacc:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bace:	2200      	movs	r2, #0
 800bad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bad8:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bada:	2200      	movs	r2, #0
 800badc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bade:	4815      	ldr	r0, [pc, #84]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bae0:	f7f5 f8b8 	bl	8000c54 <HAL_I2C_Init>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bf14      	ite	ne
 800baea:	2301      	movne	r3, #1
 800baec:	2300      	moveq	r3, #0
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800baf4:	f000 f9d4 	bl	800bea0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800baf8:	2100      	movs	r1, #0
 800bafa:	480e      	ldr	r0, [pc, #56]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bafc:	f7f5 f93a 	bl	8000d74 <HAL_I2CEx_ConfigAnalogFilter>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800bb10:	f000 f9c6 	bl	800bea0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bb14:	2100      	movs	r1, #0
 800bb16:	4807      	ldr	r0, [pc, #28]	; (800bb34 <_ZL12MX_I2C1_Initv+0x90>)
 800bb18:	f7f5 f977 	bl	8000e0a <HAL_I2CEx_ConfigDigitalFilter>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bf14      	ite	ne
 800bb22:	2301      	movne	r3, #1
 800bb24:	2300      	moveq	r3, #0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800bb2c:	f000 f9b8 	bl	800bea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bb30:	bf00      	nop
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20004c18 	.word	0x20004c18
 800bb38:	40005400 	.word	0x40005400
 800bb3c:	00808cd2 	.word	0x00808cd2

0800bb40 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800bb44:	4b1d      	ldr	r3, [pc, #116]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb46:	4a1e      	ldr	r2, [pc, #120]	; (800bbc0 <_ZL12MX_SPI1_Initv+0x80>)
 800bb48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bb4a:	4b1c      	ldr	r3, [pc, #112]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bb50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800bb52:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bb58:	4b18      	ldr	r3, [pc, #96]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800bb5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb60:	4b16      	ldr	r3, [pc, #88]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bb66:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bb6c:	4b13      	ldr	r3, [pc, #76]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bb74:	4b11      	ldr	r3, [pc, #68]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb76:	2228      	movs	r2, #40	; 0x28
 800bb78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bb7a:	4b10      	ldr	r3, [pc, #64]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bb80:	4b0e      	ldr	r3, [pc, #56]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800bb8c:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb8e:	2207      	movs	r2, #7
 800bb90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bb92:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800bb98:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800bb9e:	4807      	ldr	r0, [pc, #28]	; (800bbbc <_ZL12MX_SPI1_Initv+0x7c>)
 800bba0:	f7f7 fc16 	bl	80033d0 <HAL_SPI_Init>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bf14      	ite	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	2300      	moveq	r3, #0
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800bbb4:	f000 f974 	bl	800bea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800bbb8:	bf00      	nop
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20004c64 	.word	0x20004c64
 800bbc0:	40013000 	.word	0x40013000

0800bbc4 <HAL_UART_RxCpltCallback>:
}




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	std::map<USART_TypeDef*, UART*>::iterator it;
 800bbcc:	f107 0308 	add.w	r3, r7, #8
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff f88e 	bl	800acf2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEC1Ev>
	it = UART::objectMap.find(huart->Instance);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4811      	ldr	r0, [pc, #68]	; (800bc20 <HAL_UART_RxCpltCallback+0x5c>)
 800bbdc:	f7ff f897 	bl	800ad0e <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	60bb      	str	r3, [r7, #8]
	if(it != UART::objectMap.end())
 800bbe4:	480e      	ldr	r0, [pc, #56]	; (800bc20 <HAL_UART_RxCpltCallback+0x5c>)
 800bbe6:	f7ff f8a1 	bl	800ad2c <_ZNSt3mapIP13USART_TypeDefP4UARTSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800bbea:	4603      	mov	r3, r0
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	f107 020c 	add.w	r2, r7, #12
 800bbf2:	f107 0308 	add.w	r3, r7, #8
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff f8a4 	bl	800ad46 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEES9_>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d009      	beq.n	800bc18 <HAL_UART_RxCpltCallback+0x54>
		it->second->memberIRQ();
 800bc04:	f107 0308 	add.w	r3, r7, #8
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 f94e 	bl	800beaa <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff f817 	bl	800ac46 <_ZN4UART9memberIRQEv>
}
 800bc18:	bf00      	nop
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20004c00 	.word	0x20004c00

0800bc24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08c      	sub	sp, #48	; 0x30
 800bc28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc2a:	f107 031c 	add.w	r3, r7, #28
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	605a      	str	r2, [r3, #4]
 800bc34:	609a      	str	r2, [r3, #8]
 800bc36:	60da      	str	r2, [r3, #12]
 800bc38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc3a:	4b71      	ldr	r3, [pc, #452]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc3e:	4a70      	ldr	r2, [pc, #448]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc40:	f043 0304 	orr.w	r3, r3, #4
 800bc44:	6313      	str	r3, [r2, #48]	; 0x30
 800bc46:	4b6e      	ldr	r3, [pc, #440]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4a:	f003 0304 	and.w	r3, r3, #4
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bc52:	4b6b      	ldr	r3, [pc, #428]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	4a6a      	ldr	r2, [pc, #424]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc5e:	4b68      	ldr	r3, [pc, #416]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc6a:	4b65      	ldr	r3, [pc, #404]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6e:	4a64      	ldr	r2, [pc, #400]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc70:	f043 0301 	orr.w	r3, r3, #1
 800bc74:	6313      	str	r3, [r2, #48]	; 0x30
 800bc76:	4b62      	ldr	r3, [pc, #392]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc82:	4b5f      	ldr	r3, [pc, #380]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc86:	4a5e      	ldr	r2, [pc, #376]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc88:	f043 0302 	orr.w	r3, r3, #2
 800bc8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc8e:	4b5c      	ldr	r3, [pc, #368]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc92:	f003 0302 	and.w	r3, r3, #2
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bc9a:	4b59      	ldr	r3, [pc, #356]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9e:	4a58      	ldr	r2, [pc, #352]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bca0:	f043 0308 	orr.w	r3, r3, #8
 800bca4:	6313      	str	r3, [r2, #48]	; 0x30
 800bca6:	4b56      	ldr	r3, [pc, #344]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcaa:	f003 0308 	and.w	r3, r3, #8
 800bcae:	60bb      	str	r3, [r7, #8]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bcb2:	4b53      	ldr	r3, [pc, #332]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb6:	4a52      	ldr	r2, [pc, #328]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbc:	6313      	str	r3, [r2, #48]	; 0x30
 800bcbe:	4b50      	ldr	r3, [pc, #320]	; (800be00 <_ZL12MX_GPIO_Initv+0x1dc>)
 800bcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	607b      	str	r3, [r7, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800bcca:	2200      	movs	r2, #0
 800bccc:	2110      	movs	r1, #16
 800bcce:	484d      	ldr	r0, [pc, #308]	; (800be04 <_ZL12MX_GPIO_Initv+0x1e0>)
 800bcd0:	f7f4 ff8c 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f244 0181 	movw	r1, #16513	; 0x4081
 800bcda:	484b      	ldr	r0, [pc, #300]	; (800be08 <_ZL12MX_GPIO_Initv+0x1e4>)
 800bcdc:	f7f4 ff86 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800bce0:	2200      	movs	r2, #0
 800bce2:	2140      	movs	r1, #64	; 0x40
 800bce4:	4849      	ldr	r0, [pc, #292]	; (800be0c <_ZL12MX_GPIO_Initv+0x1e8>)
 800bce6:	f7f4 ff81 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800bcea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bcf0:	4b47      	ldr	r3, [pc, #284]	; (800be10 <_ZL12MX_GPIO_Initv+0x1ec>)
 800bcf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800bcf8:	f107 031c 	add.w	r3, r7, #28
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4845      	ldr	r0, [pc, #276]	; (800be14 <_ZL12MX_GPIO_Initv+0x1f0>)
 800bd00:	f7f4 fdc8 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bd04:	2332      	movs	r3, #50	; 0x32
 800bd06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd10:	2303      	movs	r3, #3
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd14:	230b      	movs	r3, #11
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd18:	f107 031c 	add.w	r3, r7, #28
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	483d      	ldr	r0, [pc, #244]	; (800be14 <_ZL12MX_GPIO_Initv+0x1f0>)
 800bd20:	f7f4 fdb8 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bd24:	2386      	movs	r3, #134	; 0x86
 800bd26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd30:	2303      	movs	r3, #3
 800bd32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd34:	230b      	movs	r3, #11
 800bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd38:	f107 031c 	add.w	r3, r7, #28
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4831      	ldr	r0, [pc, #196]	; (800be04 <_ZL12MX_GPIO_Initv+0x1e0>)
 800bd40:	f7f4 fda8 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800bd44:	2310      	movs	r3, #16
 800bd46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd50:	2300      	movs	r3, #0
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800bd54:	f107 031c 	add.w	r3, r7, #28
 800bd58:	4619      	mov	r1, r3
 800bd5a:	482a      	ldr	r0, [pc, #168]	; (800be04 <_ZL12MX_GPIO_Initv+0x1e0>)
 800bd5c:	f7f4 fd9a 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800bd60:	f244 0381 	movw	r3, #16513	; 0x4081
 800bd64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd66:	2301      	movs	r3, #1
 800bd68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd72:	f107 031c 	add.w	r3, r7, #28
 800bd76:	4619      	mov	r1, r3
 800bd78:	4823      	ldr	r0, [pc, #140]	; (800be08 <_ZL12MX_GPIO_Initv+0x1e4>)
 800bd7a:	f7f4 fd8b 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bd7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd84:	2302      	movs	r3, #2
 800bd86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd90:	230b      	movs	r3, #11
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bd94:	f107 031c 	add.w	r3, r7, #28
 800bd98:	4619      	mov	r1, r3
 800bd9a:	481b      	ldr	r0, [pc, #108]	; (800be08 <_ZL12MX_GPIO_Initv+0x1e4>)
 800bd9c:	f7f4 fd7a 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800bda0:	2340      	movs	r3, #64	; 0x40
 800bda2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bda4:	2301      	movs	r3, #1
 800bda6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdac:	2300      	movs	r3, #0
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bdb0:	f107 031c 	add.w	r3, r7, #28
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4815      	ldr	r0, [pc, #84]	; (800be0c <_ZL12MX_GPIO_Initv+0x1e8>)
 800bdb8:	f7f4 fd6c 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800bdbc:	2380      	movs	r3, #128	; 0x80
 800bdbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bdc8:	f107 031c 	add.w	r3, r7, #28
 800bdcc:	4619      	mov	r1, r3
 800bdce:	480f      	ldr	r0, [pc, #60]	; (800be0c <_ZL12MX_GPIO_Initv+0x1e8>)
 800bdd0:	f7f4 fd60 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bdd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bdd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdda:	2302      	movs	r3, #2
 800bddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bde2:	2303      	movs	r3, #3
 800bde4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bde6:	230b      	movs	r3, #11
 800bde8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdea:	f107 031c 	add.w	r3, r7, #28
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4806      	ldr	r0, [pc, #24]	; (800be0c <_ZL12MX_GPIO_Initv+0x1e8>)
 800bdf2:	f7f4 fd4f 	bl	8000894 <HAL_GPIO_Init>

}
 800bdf6:	bf00      	nop
 800bdf8:	3730      	adds	r7, #48	; 0x30
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	40023800 	.word	0x40023800
 800be04:	40020000 	.word	0x40020000
 800be08:	40020400 	.word	0x40020400
 800be0c:	40021800 	.word	0x40021800
 800be10:	10110000 	.word	0x10110000
 800be14:	40020800 	.word	0x40020800

0800be18 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800be20:	f000 fafc 	bl	800c41c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800be24:	2101      	movs	r1, #1
 800be26:	4804      	ldr	r0, [pc, #16]	; (800be38 <_Z16StartDefaultTaskPv+0x20>)
 800be28:	f7f4 fef9 	bl	8000c1e <HAL_GPIO_TogglePin>
	  osDelay(500);
 800be2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be30:	f7fc f858 	bl	8007ee4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800be34:	e7f6      	b.n	800be24 <_Z16StartDefaultTaskPv+0xc>
 800be36:	bf00      	nop
 800be38:	40020400 	.word	0x40020400

0800be3c <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	for(;;)
	{
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800be44:	2180      	movs	r1, #128	; 0x80
 800be46:	480b      	ldr	r0, [pc, #44]	; (800be74 <_Z11StartTask02Pv+0x38>)
 800be48:	f7f4 fee9 	bl	8000c1e <HAL_GPIO_TogglePin>
	  //HAL usbStat = HAL_UART_Receive(&huart3, buff, 1024, 100e3);


	  if(usb.hasData()) {
 800be4c:	480a      	ldr	r0, [pc, #40]	; (800be78 <_Z11StartTask02Pv+0x3c>)
 800be4e:	f7fe fe9b 	bl	800ab88 <_ZN4UART7hasDataEv>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d008      	beq.n	800be6a <_Z11StartTask02Pv+0x2e>
		usb.sendData(usb.getData(), 10);
 800be58:	4807      	ldr	r0, [pc, #28]	; (800be78 <_Z11StartTask02Pv+0x3c>)
 800be5a:	f7fe feb3 	bl	800abc4 <_ZN4UART7getDataEv>
 800be5e:	4603      	mov	r3, r0
 800be60:	220a      	movs	r2, #10
 800be62:	4619      	mov	r1, r3
 800be64:	4804      	ldr	r0, [pc, #16]	; (800be78 <_Z11StartTask02Pv+0x3c>)
 800be66:	f7fe fed9 	bl	800ac1c <_ZN4UART8sendDataEPhi>
	  }
	  //uint8_t msg[10] = "hello\r\n";
	  //usb.sendData(msg, 10);
	  //HAL_UART_Transmit(&huart3, msg, 10, 1);
	  //HAL_UART_Transmit(&huart2, msg, 10, 1);
	  osDelay(50);
 800be6a:	2032      	movs	r0, #50	; 0x32
 800be6c:	f7fc f83a 	bl	8007ee4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800be70:	e7e8      	b.n	800be44 <_Z11StartTask02Pv+0x8>
 800be72:	bf00      	nop
 800be74:	40020400 	.word	0x40020400
 800be78:	20004cc8 	.word	0x20004cc8

0800be7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a04      	ldr	r2, [pc, #16]	; (800be9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d101      	bne.n	800be92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800be8e:	f7f4 fb49 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	40002000 	.word	0x40002000

0800bea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bea4:	b672      	cpsid	i
}
 800bea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bea8:	e7fe      	b.n	800bea8 <Error_Handler+0x8>

0800beaa <_ZNKSt17_Rb_tree_iteratorISt4pairIKP13USART_TypeDefP4UARTEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff fb99 	bl	800b5ee <_ZNSt13_Rb_tree_nodeISt4pairIKP13USART_TypeDefP4UARTEE9_M_valptrEv>
 800bebc:	4603      	mov	r3, r0
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d10a      	bne.n	800beee <_Z41__static_initialization_and_destruction_0ii+0x26>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bede:	4293      	cmp	r3, r2
 800bee0:	d105      	bne.n	800beee <_Z41__static_initialization_and_destruction_0ii+0x26>
UART usb, ble;
 800bee2:	480c      	ldr	r0, [pc, #48]	; (800bf14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800bee4:	f7fe fd46 	bl	800a974 <_ZN4UARTC1Ev>
 800bee8:	480b      	ldr	r0, [pc, #44]	; (800bf18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800beea:	f7fe fd43 	bl	800a974 <_ZN4UARTC1Ev>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800befa:	4293      	cmp	r3, r2
 800befc:	d105      	bne.n	800bf0a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800befe:	4806      	ldr	r0, [pc, #24]	; (800bf18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800bf00:	f7fe fd50 	bl	800a9a4 <_ZN4UARTD1Ev>
 800bf04:	4803      	ldr	r0, [pc, #12]	; (800bf14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800bf06:	f7fe fd4d 	bl	800a9a4 <_ZN4UARTD1Ev>
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20004cc8 	.word	0x20004cc8
 800bf18:	20004d60 	.word	0x20004d60

0800bf1c <_GLOBAL__sub_I_hi2c1>:
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf24:	2001      	movs	r0, #1
 800bf26:	f7ff ffcf 	bl	800bec8 <_Z41__static_initialization_and_destruction_0ii>
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <_GLOBAL__sub_D_hi2c1>:
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf34:	2000      	movs	r0, #0
 800bf36:	f7ff ffc7 	bl	800bec8 <_Z41__static_initialization_and_destruction_0ii>
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf42:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf46:	4a10      	ldr	r2, [pc, #64]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	6413      	str	r3, [r2, #64]	; 0x40
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf5a:	4b0b      	ldr	r3, [pc, #44]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5e:	4a0a      	ldr	r2, [pc, #40]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf64:	6453      	str	r3, [r2, #68]	; 0x44
 800bf66:	4b08      	ldr	r3, [pc, #32]	; (800bf88 <HAL_MspInit+0x4c>)
 800bf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bf72:	2200      	movs	r2, #0
 800bf74:	210f      	movs	r1, #15
 800bf76:	f06f 0001 	mvn.w	r0, #1
 800bf7a:	f7f4 fbcf 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	40023800 	.word	0x40023800

0800bf8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	; 0x28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf94:	f107 0314 	add.w	r3, r7, #20
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
 800bf9e:	609a      	str	r2, [r3, #8]
 800bfa0:	60da      	str	r2, [r3, #12]
 800bfa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a17      	ldr	r2, [pc, #92]	; (800c008 <HAL_I2C_MspInit+0x7c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d128      	bne.n	800c000 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfae:	4b17      	ldr	r3, [pc, #92]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb2:	4a16      	ldr	r2, [pc, #88]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfba:	4b14      	ldr	r3, [pc, #80]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800bfc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 800bfca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bfcc:	2312      	movs	r3, #18
 800bfce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800bfd8:	2304      	movs	r3, #4
 800bfda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfdc:	f107 0314 	add.w	r3, r7, #20
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	480b      	ldr	r0, [pc, #44]	; (800c010 <HAL_I2C_MspInit+0x84>)
 800bfe4:	f7f4 fc56 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bfe8:	4b08      	ldr	r3, [pc, #32]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	4a07      	ldr	r2, [pc, #28]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bfee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bff2:	6413      	str	r3, [r2, #64]	; 0x40
 800bff4:	4b05      	ldr	r3, [pc, #20]	; (800c00c <HAL_I2C_MspInit+0x80>)
 800bff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800c000:	bf00      	nop
 800c002:	3728      	adds	r7, #40	; 0x28
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	40005400 	.word	0x40005400
 800c00c:	40023800 	.word	0x40023800
 800c010:	40020400 	.word	0x40020400

0800c014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08a      	sub	sp, #40	; 0x28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c01c:	f107 0314 	add.w	r3, r7, #20
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	605a      	str	r2, [r3, #4]
 800c026:	609a      	str	r2, [r3, #8]
 800c028:	60da      	str	r2, [r3, #12]
 800c02a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a25      	ldr	r2, [pc, #148]	; (800c0c8 <HAL_SPI_MspInit+0xb4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d143      	bne.n	800c0be <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c036:	4b25      	ldr	r3, [pc, #148]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c03a:	4a24      	ldr	r2, [pc, #144]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c03c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c040:	6453      	str	r3, [r2, #68]	; 0x44
 800c042:	4b22      	ldr	r3, [pc, #136]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c04e:	4b1f      	ldr	r3, [pc, #124]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c054:	f043 0301 	orr.w	r3, r3, #1
 800c058:	6313      	str	r3, [r2, #48]	; 0x30
 800c05a:	4b1c      	ldr	r3, [pc, #112]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c066:	4b19      	ldr	r3, [pc, #100]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	4a18      	ldr	r2, [pc, #96]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c06c:	f043 0302 	orr.w	r3, r3, #2
 800c070:	6313      	str	r3, [r2, #48]	; 0x30
 800c072:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <HAL_SPI_MspInit+0xb8>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	f003 0302 	and.w	r3, r3, #2
 800c07a:	60bb      	str	r3, [r7, #8]
 800c07c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800c07e:	2360      	movs	r3, #96	; 0x60
 800c080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c082:	2302      	movs	r3, #2
 800c084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c086:	2300      	movs	r3, #0
 800c088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c08a:	2303      	movs	r3, #3
 800c08c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c08e:	2305      	movs	r3, #5
 800c090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	4619      	mov	r1, r3
 800c098:	480d      	ldr	r0, [pc, #52]	; (800c0d0 <HAL_SPI_MspInit+0xbc>)
 800c09a:	f7f4 fbfb 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c09e:	2320      	movs	r3, #32
 800c0a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c0ae:	2305      	movs	r3, #5
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0b2:	f107 0314 	add.w	r3, r7, #20
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4806      	ldr	r0, [pc, #24]	; (800c0d4 <HAL_SPI_MspInit+0xc0>)
 800c0ba:	f7f4 fbeb 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800c0be:	bf00      	nop
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	40013000 	.word	0x40013000
 800c0cc:	40023800 	.word	0x40023800
 800c0d0:	40020000 	.word	0x40020000
 800c0d4:	40020400 	.word	0x40020400

0800c0d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08c      	sub	sp, #48	; 0x30
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0e0:	f107 031c 	add.w	r3, r7, #28
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	605a      	str	r2, [r3, #4]
 800c0ea:	609a      	str	r2, [r3, #8]
 800c0ec:	60da      	str	r2, [r3, #12]
 800c0ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a44      	ldr	r2, [pc, #272]	; (800c208 <HAL_UART_MspInit+0x130>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d14c      	bne.n	800c194 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c0fa:	4b44      	ldr	r3, [pc, #272]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fe:	4a43      	ldr	r2, [pc, #268]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c104:	6413      	str	r3, [r2, #64]	; 0x40
 800c106:	4b41      	ldr	r3, [pc, #260]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c112:	4b3e      	ldr	r3, [pc, #248]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	4a3d      	ldr	r2, [pc, #244]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c118:	f043 0301 	orr.w	r3, r3, #1
 800c11c:	6313      	str	r3, [r2, #48]	; 0x30
 800c11e:	4b3b      	ldr	r3, [pc, #236]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c12a:	4b38      	ldr	r3, [pc, #224]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	4a37      	ldr	r2, [pc, #220]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c130:	f043 0308 	orr.w	r3, r3, #8
 800c134:	6313      	str	r3, [r2, #48]	; 0x30
 800c136:	4b35      	ldr	r3, [pc, #212]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13a:	f003 0308 	and.w	r3, r3, #8
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c142:	2308      	movs	r3, #8
 800c144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c146:	2302      	movs	r3, #2
 800c148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c14a:	2300      	movs	r3, #0
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c14e:	2303      	movs	r3, #3
 800c150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c152:	2307      	movs	r3, #7
 800c154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c156:	f107 031c 	add.w	r3, r7, #28
 800c15a:	4619      	mov	r1, r3
 800c15c:	482c      	ldr	r0, [pc, #176]	; (800c210 <HAL_UART_MspInit+0x138>)
 800c15e:	f7f4 fb99 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c162:	2320      	movs	r3, #32
 800c164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c166:	2302      	movs	r3, #2
 800c168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c16e:	2303      	movs	r3, #3
 800c170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c172:	2307      	movs	r3, #7
 800c174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c176:	f107 031c 	add.w	r3, r7, #28
 800c17a:	4619      	mov	r1, r3
 800c17c:	4825      	ldr	r0, [pc, #148]	; (800c214 <HAL_UART_MspInit+0x13c>)
 800c17e:	f7f4 fb89 	bl	8000894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800c182:	2200      	movs	r2, #0
 800c184:	2105      	movs	r1, #5
 800c186:	2026      	movs	r0, #38	; 0x26
 800c188:	f7f4 fac8 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c18c:	2026      	movs	r0, #38	; 0x26
 800c18e:	f7f4 fae1 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c192:	e035      	b.n	800c200 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a1f      	ldr	r2, [pc, #124]	; (800c218 <HAL_UART_MspInit+0x140>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d130      	bne.n	800c200 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 800c19e:	4b1b      	ldr	r3, [pc, #108]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	4a1a      	ldr	r2, [pc, #104]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1a8:	6413      	str	r3, [r2, #64]	; 0x40
 800c1aa:	4b18      	ldr	r3, [pc, #96]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1b6:	4b15      	ldr	r3, [pc, #84]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	4a14      	ldr	r2, [pc, #80]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1bc:	f043 0308 	orr.w	r3, r3, #8
 800c1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <HAL_UART_MspInit+0x134>)
 800c1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c6:	f003 0308 	and.w	r3, r3, #8
 800c1ca:	60bb      	str	r3, [r7, #8]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800c1ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c1e0:	2307      	movs	r3, #7
 800c1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c1e4:	f107 031c 	add.w	r3, r7, #28
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	480a      	ldr	r0, [pc, #40]	; (800c214 <HAL_UART_MspInit+0x13c>)
 800c1ec:	f7f4 fb52 	bl	8000894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2105      	movs	r1, #5
 800c1f4:	2027      	movs	r0, #39	; 0x27
 800c1f6:	f7f4 fa91 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800c1fa:	2027      	movs	r0, #39	; 0x27
 800c1fc:	f7f4 faaa 	bl	8000754 <HAL_NVIC_EnableIRQ>
}
 800c200:	bf00      	nop
 800c202:	3730      	adds	r7, #48	; 0x30
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	40004400 	.word	0x40004400
 800c20c:	40023800 	.word	0x40023800
 800c210:	40020000 	.word	0x40020000
 800c214:	40020c00 	.word	0x40020c00
 800c218:	40004800 	.word	0x40004800

0800c21c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08c      	sub	sp, #48	; 0x30
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800c22c:	2200      	movs	r2, #0
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	202d      	movs	r0, #45	; 0x2d
 800c232:	f7f4 fa73 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c236:	202d      	movs	r0, #45	; 0x2d
 800c238:	f7f4 fa8c 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800c23c:	4b1f      	ldr	r3, [pc, #124]	; (800c2bc <HAL_InitTick+0xa0>)
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	4a1e      	ldr	r2, [pc, #120]	; (800c2bc <HAL_InitTick+0xa0>)
 800c242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c246:	6413      	str	r3, [r2, #64]	; 0x40
 800c248:	4b1c      	ldr	r3, [pc, #112]	; (800c2bc <HAL_InitTick+0xa0>)
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c254:	f107 0210 	add.w	r2, r7, #16
 800c258:	f107 0314 	add.w	r3, r7, #20
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f6 fc94 	bl	8002b8c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c264:	f7f6 fc6a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800c268:	4603      	mov	r3, r0
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	4a13      	ldr	r2, [pc, #76]	; (800c2c0 <HAL_InitTick+0xa4>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	0c9b      	lsrs	r3, r3, #18
 800c278:	3b01      	subs	r3, #1
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800c27c:	4b11      	ldr	r3, [pc, #68]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c27e:	4a12      	ldr	r2, [pc, #72]	; (800c2c8 <HAL_InitTick+0xac>)
 800c280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800c282:	4b10      	ldr	r3, [pc, #64]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c284:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c288:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800c28a:	4a0e      	ldr	r2, [pc, #56]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800c290:	4b0c      	ldr	r3, [pc, #48]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c292:	2200      	movs	r2, #0
 800c294:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c298:	2200      	movs	r2, #0
 800c29a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800c29c:	4809      	ldr	r0, [pc, #36]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c29e:	f7f7 f942 	bl	8003526 <HAL_TIM_Base_Init>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d104      	bne.n	800c2b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800c2a8:	4806      	ldr	r0, [pc, #24]	; (800c2c4 <HAL_InitTick+0xa8>)
 800c2aa:	f7f7 f99d 	bl	80035e8 <HAL_TIM_Base_Start_IT>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	e000      	b.n	800c2b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3730      	adds	r7, #48	; 0x30
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	40023800 	.word	0x40023800
 800c2c0:	431bde83 	.word	0x431bde83
 800c2c4:	200053d4 	.word	0x200053d4
 800c2c8:	40002000 	.word	0x40002000

0800c2cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c2d0:	e7fe      	b.n	800c2d0 <NMI_Handler+0x4>

0800c2d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c2d6:	e7fe      	b.n	800c2d6 <HardFault_Handler+0x4>

0800c2d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c2dc:	e7fe      	b.n	800c2dc <MemManage_Handler+0x4>

0800c2de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c2e2:	e7fe      	b.n	800c2e2 <BusFault_Handler+0x4>

0800c2e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c2e8:	e7fe      	b.n	800c2e8 <UsageFault_Handler+0x4>

0800c2ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c2ee:	bf00      	nop
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c2fc:	4802      	ldr	r0, [pc, #8]	; (800c308 <USART2_IRQHandler+0x10>)
 800c2fe:	f7f7 fd8f 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800c302:	bf00      	nop
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20004e7c 	.word	0x20004e7c

0800c30c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c310:	4802      	ldr	r0, [pc, #8]	; (800c31c <USART3_IRQHandler+0x10>)
 800c312:	f7f7 fd85 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800c316:	bf00      	nop
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20004df8 	.word	0x20004df8

0800c320 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800c324:	4802      	ldr	r0, [pc, #8]	; (800c330 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800c326:	f7f7 f9d7 	bl	80036d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800c32a:	bf00      	nop
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	200053d4 	.word	0x200053d4

0800c334 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800c338:	4802      	ldr	r0, [pc, #8]	; (800c344 <OTG_FS_IRQHandler+0x10>)
 800c33a:	f7f4 fef8 	bl	800112e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	200066f0 	.word	0x200066f0

0800c348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c348:	b480      	push	{r7}
 800c34a:	af00      	add	r7, sp, #0
	return 1;
 800c34c:	2301      	movs	r3, #1
}
 800c34e:	4618      	mov	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <_kill>:

int _kill(int pid, int sig)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c362:	f001 f87b 	bl	800d45c <__errno>
 800c366:	4603      	mov	r3, r0
 800c368:	2216      	movs	r2, #22
 800c36a:	601a      	str	r2, [r3, #0]
	return -1;
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <_exit>:

void _exit (int status)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff ffe7 	bl	800c358 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c38a:	e7fe      	b.n	800c38a <_exit+0x12>

0800c38c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c394:	4a14      	ldr	r2, [pc, #80]	; (800c3e8 <_sbrk+0x5c>)
 800c396:	4b15      	ldr	r3, [pc, #84]	; (800c3ec <_sbrk+0x60>)
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c3a0:	4b13      	ldr	r3, [pc, #76]	; (800c3f0 <_sbrk+0x64>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c3a8:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <_sbrk+0x64>)
 800c3aa:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <_sbrk+0x68>)
 800c3ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <_sbrk+0x64>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d207      	bcs.n	800c3cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c3bc:	f001 f84e 	bl	800d45c <__errno>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	220c      	movs	r2, #12
 800c3c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3ca:	e009      	b.n	800c3e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <_sbrk+0x64>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c3d2:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <_sbrk+0x64>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4413      	add	r3, r2
 800c3da:	4a05      	ldr	r2, [pc, #20]	; (800c3f0 <_sbrk+0x64>)
 800c3dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c3de:	68fb      	ldr	r3, [r7, #12]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20050000 	.word	0x20050000
 800c3ec:	00000400 	.word	0x00000400
 800c3f0:	20004f08 	.word	0x20004f08
 800c3f4:	20006cf8 	.word	0x20006cf8

0800c3f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c3fc:	4b06      	ldr	r3, [pc, #24]	; (800c418 <SystemInit+0x20>)
 800c3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c402:	4a05      	ldr	r2, [pc, #20]	; (800c418 <SystemInit+0x20>)
 800c404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c40c:	bf00      	nop
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	e000ed00 	.word	0xe000ed00

0800c41c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c420:	2200      	movs	r2, #0
 800c422:	4912      	ldr	r1, [pc, #72]	; (800c46c <MX_USB_DEVICE_Init+0x50>)
 800c424:	4812      	ldr	r0, [pc, #72]	; (800c470 <MX_USB_DEVICE_Init+0x54>)
 800c426:	f7fa faad 	bl	8006984 <USBD_Init>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c430:	f7ff fd36 	bl	800bea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c434:	490f      	ldr	r1, [pc, #60]	; (800c474 <MX_USB_DEVICE_Init+0x58>)
 800c436:	480e      	ldr	r0, [pc, #56]	; (800c470 <MX_USB_DEVICE_Init+0x54>)
 800c438:	f7fa fada 	bl	80069f0 <USBD_RegisterClass>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c442:	f7ff fd2d 	bl	800bea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c446:	490c      	ldr	r1, [pc, #48]	; (800c478 <MX_USB_DEVICE_Init+0x5c>)
 800c448:	4809      	ldr	r0, [pc, #36]	; (800c470 <MX_USB_DEVICE_Init+0x54>)
 800c44a:	f7fa fa2f 	bl	80068ac <USBD_CDC_RegisterInterface>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c454:	f7ff fd24 	bl	800bea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c458:	4805      	ldr	r0, [pc, #20]	; (800c470 <MX_USB_DEVICE_Init+0x54>)
 800c45a:	f7fa faea 	bl	8006a32 <USBD_Start>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c464:	f7ff fd1c 	bl	800bea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c468:	bf00      	nop
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20000134 	.word	0x20000134
 800c470:	20005420 	.word	0x20005420
 800c474:	20000014 	.word	0x20000014
 800c478:	20000120 	.word	0x20000120

0800c47c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c480:	2200      	movs	r2, #0
 800c482:	4905      	ldr	r1, [pc, #20]	; (800c498 <CDC_Init_FS+0x1c>)
 800c484:	4805      	ldr	r0, [pc, #20]	; (800c49c <CDC_Init_FS+0x20>)
 800c486:	f7fa fa26 	bl	80068d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c48a:	4905      	ldr	r1, [pc, #20]	; (800c4a0 <CDC_Init_FS+0x24>)
 800c48c:	4803      	ldr	r0, [pc, #12]	; (800c49c <CDC_Init_FS+0x20>)
 800c48e:	f7fa fa3b 	bl	8006908 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c492:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c494:	4618      	mov	r0, r3
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20005ef0 	.word	0x20005ef0
 800c49c:	20005420 	.word	0x20005420
 800c4a0:	200056f0 	.word	0x200056f0

0800c4a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	6039      	str	r1, [r7, #0]
 800c4be:	71fb      	strb	r3, [r7, #7]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	2b23      	cmp	r3, #35	; 0x23
 800c4c8:	d84a      	bhi.n	800c560 <CDC_Control_FS+0xac>
 800c4ca:	a201      	add	r2, pc, #4	; (adr r2, 800c4d0 <CDC_Control_FS+0x1c>)
 800c4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d0:	0800c561 	.word	0x0800c561
 800c4d4:	0800c561 	.word	0x0800c561
 800c4d8:	0800c561 	.word	0x0800c561
 800c4dc:	0800c561 	.word	0x0800c561
 800c4e0:	0800c561 	.word	0x0800c561
 800c4e4:	0800c561 	.word	0x0800c561
 800c4e8:	0800c561 	.word	0x0800c561
 800c4ec:	0800c561 	.word	0x0800c561
 800c4f0:	0800c561 	.word	0x0800c561
 800c4f4:	0800c561 	.word	0x0800c561
 800c4f8:	0800c561 	.word	0x0800c561
 800c4fc:	0800c561 	.word	0x0800c561
 800c500:	0800c561 	.word	0x0800c561
 800c504:	0800c561 	.word	0x0800c561
 800c508:	0800c561 	.word	0x0800c561
 800c50c:	0800c561 	.word	0x0800c561
 800c510:	0800c561 	.word	0x0800c561
 800c514:	0800c561 	.word	0x0800c561
 800c518:	0800c561 	.word	0x0800c561
 800c51c:	0800c561 	.word	0x0800c561
 800c520:	0800c561 	.word	0x0800c561
 800c524:	0800c561 	.word	0x0800c561
 800c528:	0800c561 	.word	0x0800c561
 800c52c:	0800c561 	.word	0x0800c561
 800c530:	0800c561 	.word	0x0800c561
 800c534:	0800c561 	.word	0x0800c561
 800c538:	0800c561 	.word	0x0800c561
 800c53c:	0800c561 	.word	0x0800c561
 800c540:	0800c561 	.word	0x0800c561
 800c544:	0800c561 	.word	0x0800c561
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c561 	.word	0x0800c561
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c561 	.word	0x0800c561
 800c558:	0800c561 	.word	0x0800c561
 800c55c:	0800c561 	.word	0x0800c561
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c560:	bf00      	nop
  }

  return (USBD_OK);
 800c562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	4805      	ldr	r0, [pc, #20]	; (800c594 <CDC_Receive_FS+0x24>)
 800c57e:	f7fa f9c3 	bl	8006908 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c582:	4804      	ldr	r0, [pc, #16]	; (800c594 <CDC_Receive_FS+0x24>)
 800c584:	f7fa f9d4 	bl	8006930 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c588:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20005420 	.word	0x20005420

0800c598 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c598:	b480      	push	{r7}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	371c      	adds	r7, #28
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
	...

0800c5bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	; 0x28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5c4:	f107 0314 	add.w	r3, r7, #20
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	605a      	str	r2, [r3, #4]
 800c5ce:	609a      	str	r2, [r3, #8]
 800c5d0:	60da      	str	r2, [r3, #12]
 800c5d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5dc:	d149      	bne.n	800c672 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5de:	4b27      	ldr	r3, [pc, #156]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e2:	4a26      	ldr	r2, [pc, #152]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c5e4:	f043 0301 	orr.w	r3, r3, #1
 800c5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ea:	4b24      	ldr	r3, [pc, #144]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ee:	f003 0301 	and.w	r3, r3, #1
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c5f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c5fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c600:	2300      	movs	r3, #0
 800c602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c604:	2303      	movs	r3, #3
 800c606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c608:	230a      	movs	r3, #10
 800c60a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c60c:	f107 0314 	add.w	r3, r7, #20
 800c610:	4619      	mov	r1, r3
 800c612:	481b      	ldr	r0, [pc, #108]	; (800c680 <HAL_PCD_MspInit+0xc4>)
 800c614:	f7f4 f93e 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c61c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c61e:	2300      	movs	r3, #0
 800c620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c622:	2300      	movs	r3, #0
 800c624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c626:	f107 0314 	add.w	r3, r7, #20
 800c62a:	4619      	mov	r1, r3
 800c62c:	4814      	ldr	r0, [pc, #80]	; (800c680 <HAL_PCD_MspInit+0xc4>)
 800c62e:	f7f4 f931 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c632:	4b12      	ldr	r3, [pc, #72]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c636:	4a11      	ldr	r2, [pc, #68]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63c:	6353      	str	r3, [r2, #52]	; 0x34
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c64e:	4a0b      	ldr	r2, [pc, #44]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c654:	6453      	str	r3, [r2, #68]	; 0x44
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <HAL_PCD_MspInit+0xc0>)
 800c658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c65a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c65e:	60bb      	str	r3, [r7, #8]
 800c660:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c662:	2200      	movs	r2, #0
 800c664:	2105      	movs	r1, #5
 800c666:	2043      	movs	r0, #67	; 0x43
 800c668:	f7f4 f858 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c66c:	2043      	movs	r0, #67	; 0x43
 800c66e:	f7f4 f871 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c672:	bf00      	nop
 800c674:	3728      	adds	r7, #40	; 0x28
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	40023800 	.word	0x40023800
 800c680:	40020000 	.word	0x40020000

0800c684 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c698:	4619      	mov	r1, r3
 800c69a:	4610      	mov	r0, r2
 800c69c:	f7fa fa14 	bl	8006ac8 <USBD_LL_SetupStage>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	440b      	add	r3, r1
 800c6c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7fa fa4e 	bl	8006b72 <USBD_LL_DataOutStage>
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c6f0:	78fa      	ldrb	r2, [r7, #3]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	1a9b      	subs	r3, r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	3348      	adds	r3, #72	; 0x48
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	78fb      	ldrb	r3, [r7, #3]
 800c704:	4619      	mov	r1, r3
 800c706:	f7fa fa97 	bl	8006c38 <USBD_LL_DataInStage>
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c720:	4618      	mov	r0, r3
 800c722:	f7fa fb9b 	bl	8006e5c <USBD_LL_SOF>
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c736:	2301      	movs	r3, #1
 800c738:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]
 800c746:	e008      	b.n	800c75a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d102      	bne.n	800c756 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c750:	2301      	movs	r3, #1
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	e001      	b.n	800c75a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c756:	f7ff fba3 	bl	800bea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c760:	7bfa      	ldrb	r2, [r7, #15]
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f7fa fb3e 	bl	8006de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c770:	4618      	mov	r0, r3
 800c772:	f7fa faf7 	bl	8006d64 <USBD_LL_Reset>
}
 800c776:	bf00      	nop
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fa fb39 	bl	8006e06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	6812      	ldr	r2, [r2, #0]
 800c7a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c7a6:	f043 0301 	orr.w	r3, r3, #1
 800c7aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d005      	beq.n	800c7c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <HAL_PCD_SuspendCallback+0x48>)
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	4a03      	ldr	r2, [pc, #12]	; (800c7c8 <HAL_PCD_SuspendCallback+0x48>)
 800c7ba:	f043 0306 	orr.w	r3, r3, #6
 800c7be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	e000ed00 	.word	0xe000ed00

0800c7cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fa fb28 	bl	8006e30 <USBD_LL_Resume>
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c7fa:	78fa      	ldrb	r2, [r7, #3]
 800c7fc:	4611      	mov	r1, r2
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fa fb53 	bl	8006eaa <USBD_LL_IsoOUTIncomplete>
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c81e:	78fa      	ldrb	r2, [r7, #3]
 800c820:	4611      	mov	r1, r2
 800c822:	4618      	mov	r0, r3
 800c824:	f7fa fb34 	bl	8006e90 <USBD_LL_IsoINIncomplete>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fa fb40 	bl	8006ec4 <USBD_LL_DevConnected>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fa fb3d 	bl	8006eda <USBD_LL_DevDisconnected>
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d13c      	bne.n	800c8f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c878:	4a20      	ldr	r2, [pc, #128]	; (800c8fc <USBD_LL_Init+0x94>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a1e      	ldr	r2, [pc, #120]	; (800c8fc <USBD_LL_Init+0x94>)
 800c884:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c888:	4b1c      	ldr	r3, [pc, #112]	; (800c8fc <USBD_LL_Init+0x94>)
 800c88a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c88e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c890:	4b1a      	ldr	r3, [pc, #104]	; (800c8fc <USBD_LL_Init+0x94>)
 800c892:	2206      	movs	r2, #6
 800c894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c896:	4b19      	ldr	r3, [pc, #100]	; (800c8fc <USBD_LL_Init+0x94>)
 800c898:	2202      	movs	r2, #2
 800c89a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c89c:	4b17      	ldr	r3, [pc, #92]	; (800c8fc <USBD_LL_Init+0x94>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c8a2:	4b16      	ldr	r3, [pc, #88]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c8a8:	4b14      	ldr	r3, [pc, #80]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c8b4:	4b11      	ldr	r3, [pc, #68]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c8ba:	4b10      	ldr	r3, [pc, #64]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c8c0:	4b0e      	ldr	r3, [pc, #56]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c8c6:	480d      	ldr	r0, [pc, #52]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8c8:	f7f4 faeb 	bl	8000ea2 <HAL_PCD_Init>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c8d2:	f7ff fae5 	bl	800bea0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	4808      	ldr	r0, [pc, #32]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8da:	f7f5 fc6c 	bl	80021b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c8de:	2240      	movs	r2, #64	; 0x40
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4806      	ldr	r0, [pc, #24]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8e4:	f7f5 fc20 	bl	8002128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8e8:	2280      	movs	r2, #128	; 0x80
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	4803      	ldr	r0, [pc, #12]	; (800c8fc <USBD_LL_Init+0x94>)
 800c8ee:	f7f5 fc1b 	bl	8002128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	200066f0 	.word	0x200066f0

0800c900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c916:	4618      	mov	r0, r3
 800c918:	f7f4 fbe7 	bl	80010ea <HAL_PCD_Start>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 f980 	bl	800cc28 <USBD_Get_USB_Status>
 800c928:	4603      	mov	r3, r0
 800c92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	4608      	mov	r0, r1
 800c940:	4611      	mov	r1, r2
 800c942:	461a      	mov	r2, r3
 800c944:	4603      	mov	r3, r0
 800c946:	70fb      	strb	r3, [r7, #3]
 800c948:	460b      	mov	r3, r1
 800c94a:	70bb      	strb	r3, [r7, #2]
 800c94c:	4613      	mov	r3, r2
 800c94e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c95e:	78bb      	ldrb	r3, [r7, #2]
 800c960:	883a      	ldrh	r2, [r7, #0]
 800c962:	78f9      	ldrb	r1, [r7, #3]
 800c964:	f7f4 ffe7 	bl	8001936 <HAL_PCD_EP_Open>
 800c968:	4603      	mov	r3, r0
 800c96a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f95a 	bl	800cc28 <USBD_Get_USB_Status>
 800c974:	4603      	mov	r3, r0
 800c976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c978:	7bbb      	ldrb	r3, [r7, #14]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	460b      	mov	r3, r1
 800c98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7f5 f830 	bl	8001a06 <HAL_PCD_EP_Close>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f93b 	bl	800cc28 <USBD_Get_USB_Status>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9da:	78fa      	ldrb	r2, [r7, #3]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f5 f908 	bl	8001bf4 <HAL_PCD_EP_SetStall>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f91c 	bl	800cc28 <USBD_Get_USB_Status>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	460b      	mov	r3, r1
 800ca08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca18:	78fa      	ldrb	r2, [r7, #3]
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f5 f94d 	bl	8001cbc <HAL_PCD_EP_ClrStall>
 800ca22:	4603      	mov	r3, r0
 800ca24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 f8fd 	bl	800cc28 <USBD_Get_USB_Status>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da0b      	bge.n	800ca70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca58:	78fb      	ldrb	r3, [r7, #3]
 800ca5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca5e:	68f9      	ldr	r1, [r7, #12]
 800ca60:	4613      	mov	r3, r2
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	1a9b      	subs	r3, r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	440b      	add	r3, r1
 800ca6a:	333e      	adds	r3, #62	; 0x3e
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	e00b      	b.n	800ca88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	1a9b      	subs	r3, r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	440b      	add	r3, r1
 800ca82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caa4:	2300      	movs	r3, #0
 800caa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	4611      	mov	r1, r2
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f4 ff1a 	bl	80018ec <HAL_PCD_SetAddress>
 800cab8:	4603      	mov	r3, r0
 800caba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f8b2 	bl	800cc28 <USBD_Get_USB_Status>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b086      	sub	sp, #24
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
 800cade:	460b      	mov	r3, r1
 800cae0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800caf0:	7af9      	ldrb	r1, [r7, #11]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	f7f5 f833 	bl	8001b60 <HAL_PCD_EP_Transmit>
 800cafa:	4603      	mov	r3, r0
 800cafc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f000 f891 	bl	800cc28 <USBD_Get_USB_Status>
 800cb06:	4603      	mov	r3, r0
 800cb08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	603b      	str	r3, [r7, #0]
 800cb20:	460b      	mov	r3, r1
 800cb22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb32:	7af9      	ldrb	r1, [r7, #11]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	f7f4 ffaf 	bl	8001a9a <HAL_PCD_EP_Receive>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 f870 	bl	800cc28 <USBD_Get_USB_Status>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb68:	78fa      	ldrb	r2, [r7, #3]
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7f4 ffdf 	bl	8001b30 <HAL_PCD_EP_GetRxCount>
 800cb72:	4603      	mov	r3, r0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <HAL_PCDEx_LPM_Callback+0x18>
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d01f      	beq.n	800cbd2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cb92:	e03b      	b.n	800cc0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cb9c:	f000 f83c 	bl	800cc18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cba0:	4b1c      	ldr	r3, [pc, #112]	; (800cc14 <HAL_PCDEx_LPM_Callback+0x98>)
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	4a1b      	ldr	r2, [pc, #108]	; (800cc14 <HAL_PCDEx_LPM_Callback+0x98>)
 800cba6:	f023 0306 	bic.w	r3, r3, #6
 800cbaa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	6812      	ldr	r2, [r2, #0]
 800cbba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbbe:	f023 0301 	bic.w	r3, r3, #1
 800cbc2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fa f930 	bl	8006e30 <USBD_LL_Resume>
    break;
 800cbd0:	e01c      	b.n	800cc0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbe4:	f043 0301 	orr.w	r3, r3, #1
 800cbe8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fa f908 	bl	8006e06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbfe:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <HAL_PCDEx_LPM_Callback+0x98>)
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	4a04      	ldr	r2, [pc, #16]	; (800cc14 <HAL_PCDEx_LPM_Callback+0x98>)
 800cc04:	f043 0306 	orr.w	r3, r3, #6
 800cc08:	6113      	str	r3, [r2, #16]
    break;
 800cc0a:	bf00      	nop
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	e000ed00 	.word	0xe000ed00

0800cc18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800cc1c:	bf00      	nop
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
	...

0800cc28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d817      	bhi.n	800cc6c <USBD_Get_USB_Status+0x44>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <USBD_Get_USB_Status+0x1c>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cc55 	.word	0x0800cc55
 800cc48:	0800cc5b 	.word	0x0800cc5b
 800cc4c:	0800cc61 	.word	0x0800cc61
 800cc50:	0800cc67 	.word	0x0800cc67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
    break;
 800cc58:	e00b      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5e:	e008      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc60:	2301      	movs	r3, #1
 800cc62:	73fb      	strb	r3, [r7, #15]
    break;
 800cc64:	e005      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc66:	2303      	movs	r3, #3
 800cc68:	73fb      	strb	r3, [r7, #15]
    break;
 800cc6a:	e002      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc70:	bf00      	nop
  }
  return usb_status;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2212      	movs	r2, #18
 800cc90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc92:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	20000154 	.word	0x20000154

0800cca4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2204      	movs	r2, #4
 800ccb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccb6:	4b03      	ldr	r3, [pc, #12]	; (800ccc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	20000174 	.word	0x20000174

0800ccc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6039      	str	r1, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	4907      	ldr	r1, [pc, #28]	; (800ccfc <USBD_FS_ProductStrDescriptor+0x34>)
 800ccde:	4808      	ldr	r0, [pc, #32]	; (800cd00 <USBD_FS_ProductStrDescriptor+0x38>)
 800cce0:	f7fa feae 	bl	8007a40 <USBD_GetString>
 800cce4:	e004      	b.n	800ccf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	4904      	ldr	r1, [pc, #16]	; (800ccfc <USBD_FS_ProductStrDescriptor+0x34>)
 800ccea:	4805      	ldr	r0, [pc, #20]	; (800cd00 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccec:	f7fa fea8 	bl	8007a40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccf0:	4b02      	ldr	r3, [pc, #8]	; (800ccfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20006af4 	.word	0x20006af4
 800cd00:	0800d84c 	.word	0x0800d84c

0800cd04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	6039      	str	r1, [r7, #0]
 800cd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	4904      	ldr	r1, [pc, #16]	; (800cd24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd14:	4804      	ldr	r0, [pc, #16]	; (800cd28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd16:	f7fa fe93 	bl	8007a40 <USBD_GetString>
  return USBD_StrDesc;
 800cd1a:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20006af4 	.word	0x20006af4
 800cd28:	0800d864 	.word	0x0800d864

0800cd2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	221a      	movs	r2, #26
 800cd3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd3e:	f000 f855 	bl	800cdec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd42:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000178 	.word	0x20000178

0800cd50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	6039      	str	r1, [r7, #0]
 800cd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d105      	bne.n	800cd6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	4907      	ldr	r1, [pc, #28]	; (800cd84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd66:	4808      	ldr	r0, [pc, #32]	; (800cd88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd68:	f7fa fe6a 	bl	8007a40 <USBD_GetString>
 800cd6c:	e004      	b.n	800cd78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	4904      	ldr	r1, [pc, #16]	; (800cd84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd72:	4805      	ldr	r0, [pc, #20]	; (800cd88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd74:	f7fa fe64 	bl	8007a40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20006af4 	.word	0x20006af4
 800cd88:	0800d878 	.word	0x0800d878

0800cd8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd98:	79fb      	ldrb	r3, [r7, #7]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d105      	bne.n	800cdaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	4907      	ldr	r1, [pc, #28]	; (800cdc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cda2:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cda4:	f7fa fe4c 	bl	8007a40 <USBD_GetString>
 800cda8:	e004      	b.n	800cdb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	4904      	ldr	r1, [pc, #16]	; (800cdc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdae:	4805      	ldr	r0, [pc, #20]	; (800cdc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdb0:	f7fa fe46 	bl	8007a40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdb4:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20006af4 	.word	0x20006af4
 800cdc4:	0800d884 	.word	0x0800d884

0800cdc8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	6039      	str	r1, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	220c      	movs	r2, #12
 800cdd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cdda:	4b03      	ldr	r3, [pc, #12]	; (800cde8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	20000168 	.word	0x20000168

0800cdec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdf2:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <Get_SerialNum+0x44>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdf8:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <Get_SerialNum+0x48>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdfe:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <Get_SerialNum+0x4c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4413      	add	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d009      	beq.n	800ce26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce12:	2208      	movs	r2, #8
 800ce14:	4909      	ldr	r1, [pc, #36]	; (800ce3c <Get_SerialNum+0x50>)
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 f814 	bl	800ce44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce1c:	2204      	movs	r2, #4
 800ce1e:	4908      	ldr	r1, [pc, #32]	; (800ce40 <Get_SerialNum+0x54>)
 800ce20:	68b8      	ldr	r0, [r7, #8]
 800ce22:	f000 f80f 	bl	800ce44 <IntToUnicode>
  }
}
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	1ff0f420 	.word	0x1ff0f420
 800ce34:	1ff0f424 	.word	0x1ff0f424
 800ce38:	1ff0f428 	.word	0x1ff0f428
 800ce3c:	2000017a 	.word	0x2000017a
 800ce40:	2000018a 	.word	0x2000018a

0800ce44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b087      	sub	sp, #28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce56:	2300      	movs	r3, #0
 800ce58:	75fb      	strb	r3, [r7, #23]
 800ce5a:	e027      	b.n	800ceac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	0f1b      	lsrs	r3, r3, #28
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d80b      	bhi.n	800ce7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	0f1b      	lsrs	r3, r3, #28
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4619      	mov	r1, r3
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	440b      	add	r3, r1
 800ce74:	3230      	adds	r2, #48	; 0x30
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	e00a      	b.n	800ce92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	0f1b      	lsrs	r3, r3, #28
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4619      	mov	r1, r3
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3237      	adds	r2, #55	; 0x37
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	4413      	add	r3, r2
 800cea2:	2200      	movs	r2, #0
 800cea4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]
 800ceac:	7dfa      	ldrb	r2, [r7, #23]
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d3d3      	bcc.n	800ce5c <IntToUnicode+0x18>
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
	...

0800cec4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	4603      	mov	r3, r0
 800cecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800cece:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <USER_initialize+0x24>)
 800ced0:	2201      	movs	r2, #1
 800ced2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ced4:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <USER_initialize+0x24>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	20000192 	.word	0x20000192

0800ceec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800cef6:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <USER_status+0x24>)
 800cef8:	2201      	movs	r2, #1
 800cefa:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cefc:	4b04      	ldr	r3, [pc, #16]	; (800cf10 <USER_status+0x24>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20000192 	.word	0x20000192

0800cf14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
 800cf1e:	603b      	str	r3, [r7, #0]
 800cf20:	4603      	mov	r3, r0
 800cf22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800cf24:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cf32:	b480      	push	{r7}
 800cf34:	b085      	sub	sp, #20
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800cf42:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	603a      	str	r2, [r7, #0]
 800cf5a:	71fb      	strb	r3, [r7, #7]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	73fb      	strb	r3, [r7, #15]
    return res;
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
	...

0800cf74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cf74:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cfac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cf78:	480d      	ldr	r0, [pc, #52]	; (800cfb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800cf7a:	490e      	ldr	r1, [pc, #56]	; (800cfb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800cf7c:	4a0e      	ldr	r2, [pc, #56]	; (800cfb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800cf7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cf80:	e002      	b.n	800cf88 <LoopCopyDataInit>

0800cf82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cf82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cf84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cf86:	3304      	adds	r3, #4

0800cf88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cf88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cf8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cf8c:	d3f9      	bcc.n	800cf82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cf8e:	4a0b      	ldr	r2, [pc, #44]	; (800cfbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800cf90:	4c0b      	ldr	r4, [pc, #44]	; (800cfc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800cf92:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cf94:	e001      	b.n	800cf9a <LoopFillZerobss>

0800cf96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cf96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cf98:	3204      	adds	r2, #4

0800cf9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cf9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cf9c:	d3fb      	bcc.n	800cf96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800cf9e:	f7ff fa2b 	bl	800c3f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cfa2:	f000 fa61 	bl	800d468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cfa6:	f7fe fc83 	bl	800b8b0 <main>
  bx  lr    
 800cfaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cfac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800cfb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cfb4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800cfb8:	0800d984 	.word	0x0800d984
  ldr r2, =_sbss
 800cfbc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800cfc0:	20006cf8 	.word	0x20006cf8

0800cfc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cfc4:	e7fe      	b.n	800cfc4 <ADC_IRQHandler>

0800cfc6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d104      	bne.n	800cfde <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800cfd4:	b672      	cpsid	i
}
 800cfd6:	bf00      	nop
 800cfd8:	f7fe ff62 	bl	800bea0 <Error_Handler>
 800cfdc:	e7fe      	b.n	800cfdc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7a1b      	ldrb	r3, [r3, #8]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d904      	bls.n	800cff0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800cfe6:	b672      	cpsid	i
}
 800cfe8:	bf00      	nop
 800cfea:	f7fe ff59 	bl	800bea0 <Error_Handler>
 800cfee:	e7fe      	b.n	800cfee <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	7a1b      	ldrb	r3, [r3, #8]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	b2d1      	uxtb	r1, r2
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	7211      	strb	r1, [r2, #8]
 800cffc:	4619      	mov	r1, r3
	__asm volatile
 800cffe:	f3ef 8211 	mrs	r2, BASEPRI
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	b672      	cpsid	i
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	b662      	cpsie	i
 800d016:	60fa      	str	r2, [r7, #12]
 800d018:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d104      	bne.n	800d042 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800d038:	b672      	cpsid	i
}
 800d03a:	bf00      	nop
 800d03c:	f7fe ff30 	bl	800bea0 <Error_Handler>
 800d040:	e7fe      	b.n	800d040 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	7a1b      	ldrb	r3, [r3, #8]
 800d046:	3b01      	subs	r3, #1
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	7a1b      	ldrb	r3, [r3, #8]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d904      	bls.n	800d060 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800d056:	b672      	cpsid	i
}
 800d058:	bf00      	nop
 800d05a:	f7fe ff21 	bl	800bea0 <Error_Handler>
 800d05e:	e7fe      	b.n	800d05e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7a1b      	ldrb	r3, [r3, #8]
 800d064:	461a      	mov	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f383 8811 	msr	BASEPRI, r3
}
 800d074:	bf00      	nop
}
 800d076:	bf00      	nop
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d104      	bne.n	800d096 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800d08c:	b672      	cpsid	i
}
 800d08e:	bf00      	nop
 800d090:	f7fe ff06 	bl	800bea0 <Error_Handler>
 800d094:	e7fe      	b.n	800d094 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4618      	mov	r0, r3
 800d09a:	f7ff ff94 	bl	800cfc6 <stm32_lock_acquire>
}
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d104      	bne.n	800d0be <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b4:	b672      	cpsid	i
}
 800d0b6:	bf00      	nop
 800d0b8:	f7fe fef2 	bl	800bea0 <Error_Handler>
 800d0bc:	e7fe      	b.n	800d0bc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff ffb2 	bl	800d02a <stm32_lock_release>
}
 800d0c6:	bf00      	nop
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <_ZdlPv>:
 800d0ce:	f000 b9f7 	b.w	800d4c0 <free>

0800d0d2 <_ZdlPvj>:
 800d0d2:	f7ff bffc 	b.w	800d0ce <_ZdlPv>

0800d0d6 <_Znwj>:
 800d0d6:	2801      	cmp	r0, #1
 800d0d8:	bf38      	it	cc
 800d0da:	2001      	movcc	r0, #1
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 f9e5 	bl	800d4b0 <malloc>
 800d0e6:	b930      	cbnz	r0, 800d0f6 <_Znwj+0x20>
 800d0e8:	f000 f9a0 	bl	800d42c <_ZSt15get_new_handlerv>
 800d0ec:	b908      	cbnz	r0, 800d0f2 <_Znwj+0x1c>
 800d0ee:	f000 f9a5 	bl	800d43c <abort>
 800d0f2:	4780      	blx	r0
 800d0f4:	e7f4      	b.n	800d0e0 <_Znwj+0xa>
 800d0f6:	bd10      	pop	{r4, pc}

0800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800d0f8:	68c3      	ldr	r3, [r0, #12]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	60c2      	str	r2, [r0, #12]
 800d0fe:	b510      	push	{r4, lr}
 800d100:	b102      	cbz	r2, 800d104 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800d102:	6050      	str	r0, [r2, #4]
 800d104:	6842      	ldr	r2, [r0, #4]
 800d106:	605a      	str	r2, [r3, #4]
 800d108:	680c      	ldr	r4, [r1, #0]
 800d10a:	4284      	cmp	r4, r0
 800d10c:	d103      	bne.n	800d116 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800d10e:	600b      	str	r3, [r1, #0]
 800d110:	6098      	str	r0, [r3, #8]
 800d112:	6043      	str	r3, [r0, #4]
 800d114:	bd10      	pop	{r4, pc}
 800d116:	6891      	ldr	r1, [r2, #8]
 800d118:	4281      	cmp	r1, r0
 800d11a:	bf0c      	ite	eq
 800d11c:	6093      	streq	r3, [r2, #8]
 800d11e:	60d3      	strne	r3, [r2, #12]
 800d120:	e7f6      	b.n	800d110 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800d122:	6883      	ldr	r3, [r0, #8]
 800d124:	68da      	ldr	r2, [r3, #12]
 800d126:	6082      	str	r2, [r0, #8]
 800d128:	b510      	push	{r4, lr}
 800d12a:	b102      	cbz	r2, 800d12e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800d12c:	6050      	str	r0, [r2, #4]
 800d12e:	6842      	ldr	r2, [r0, #4]
 800d130:	605a      	str	r2, [r3, #4]
 800d132:	680c      	ldr	r4, [r1, #0]
 800d134:	4284      	cmp	r4, r0
 800d136:	d103      	bne.n	800d140 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800d138:	600b      	str	r3, [r1, #0]
 800d13a:	60d8      	str	r0, [r3, #12]
 800d13c:	6043      	str	r3, [r0, #4]
 800d13e:	bd10      	pop	{r4, pc}
 800d140:	68d1      	ldr	r1, [r2, #12]
 800d142:	4281      	cmp	r1, r0
 800d144:	bf0c      	ite	eq
 800d146:	60d3      	streq	r3, [r2, #12]
 800d148:	6093      	strne	r3, [r2, #8]
 800d14a:	e7f6      	b.n	800d13a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800d14c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800d14c:	7803      	ldrb	r3, [r0, #0]
 800d14e:	b933      	cbnz	r3, 800d15e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800d150:	6843      	ldr	r3, [r0, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	4283      	cmp	r3, r0
 800d156:	d102      	bne.n	800d15e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	4618      	mov	r0, r3
 800d15c:	4770      	bx	lr
 800d15e:	6882      	ldr	r2, [r0, #8]
 800d160:	b122      	cbz	r2, 800d16c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800d162:	4613      	mov	r3, r2
 800d164:	68d2      	ldr	r2, [r2, #12]
 800d166:	2a00      	cmp	r2, #0
 800d168:	d1fb      	bne.n	800d162 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800d16a:	e7f6      	b.n	800d15a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800d16c:	6843      	ldr	r3, [r0, #4]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	4282      	cmp	r2, r0
 800d172:	d1f2      	bne.n	800d15a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800d174:	4618      	mov	r0, r3
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	e7f9      	b.n	800d16e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0800d17a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800d17a:	68c3      	ldr	r3, [r0, #12]
 800d17c:	b123      	cbz	r3, 800d188 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800d17e:	4618      	mov	r0, r3
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1fb      	bne.n	800d17e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800d186:	4770      	bx	lr
 800d188:	6843      	ldr	r3, [r0, #4]
 800d18a:	68da      	ldr	r2, [r3, #12]
 800d18c:	4282      	cmp	r2, r0
 800d18e:	d102      	bne.n	800d196 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800d190:	4618      	mov	r0, r3
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	e7f9      	b.n	800d18a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800d196:	68c2      	ldr	r2, [r0, #12]
 800d198:	4293      	cmp	r3, r2
 800d19a:	bf18      	it	ne
 800d19c:	4618      	movne	r0, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800d1a0:	f7ff bfd4 	b.w	800d14c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800d1a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800d1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a8:	461e      	mov	r6, r3
 800d1aa:	f103 0804 	add.w	r8, r3, #4
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	604a      	str	r2, [r1, #4]
 800d1b8:	700b      	strb	r3, [r1, #0]
 800d1ba:	b300      	cbz	r0, 800d1fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 800d1bc:	4296      	cmp	r6, r2
 800d1be:	6091      	str	r1, [r2, #8]
 800d1c0:	d118      	bne.n	800d1f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800d1c2:	6071      	str	r1, [r6, #4]
 800d1c4:	60f4      	str	r4, [r6, #12]
 800d1c6:	2701      	movs	r7, #1
 800d1c8:	f04f 0900 	mov.w	r9, #0
 800d1cc:	6873      	ldr	r3, [r6, #4]
 800d1ce:	42a3      	cmp	r3, r4
 800d1d0:	d03f      	beq.n	800d252 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800d1d2:	6860      	ldr	r0, [r4, #4]
 800d1d4:	7802      	ldrb	r2, [r0, #0]
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	d13c      	bne.n	800d254 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 800d1da:	6845      	ldr	r5, [r0, #4]
 800d1dc:	68ab      	ldr	r3, [r5, #8]
 800d1de:	4298      	cmp	r0, r3
 800d1e0:	d123      	bne.n	800d22a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800d1e2:	68eb      	ldr	r3, [r5, #12]
 800d1e4:	b183      	cbz	r3, 800d208 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	b972      	cbnz	r2, 800d208 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800d1ea:	7007      	strb	r7, [r0, #0]
 800d1ec:	701f      	strb	r7, [r3, #0]
 800d1ee:	702a      	strb	r2, [r5, #0]
 800d1f0:	462c      	mov	r4, r5
 800d1f2:	e7eb      	b.n	800d1cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800d1f4:	68b3      	ldr	r3, [r6, #8]
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d1e5      	bne.n	800d1c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d1fa:	60b1      	str	r1, [r6, #8]
 800d1fc:	e7e3      	b.n	800d1c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d1fe:	60d1      	str	r1, [r2, #12]
 800d200:	68f3      	ldr	r3, [r6, #12]
 800d202:	4293      	cmp	r3, r2
 800d204:	d1df      	bne.n	800d1c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800d206:	e7dd      	b.n	800d1c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800d208:	68c3      	ldr	r3, [r0, #12]
 800d20a:	42a3      	cmp	r3, r4
 800d20c:	d103      	bne.n	800d216 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800d20e:	4641      	mov	r1, r8
 800d210:	f7ff ff72 	bl	800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d214:	4604      	mov	r4, r0
 800d216:	6863      	ldr	r3, [r4, #4]
 800d218:	4641      	mov	r1, r8
 800d21a:	701f      	strb	r7, [r3, #0]
 800d21c:	4628      	mov	r0, r5
 800d21e:	f885 9000 	strb.w	r9, [r5]
 800d222:	f7ff ff7e 	bl	800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d226:	4625      	mov	r5, r4
 800d228:	e7e2      	b.n	800d1f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 800d22a:	b113      	cbz	r3, 800d232 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	2a00      	cmp	r2, #0
 800d230:	d0db      	beq.n	800d1ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800d232:	6883      	ldr	r3, [r0, #8]
 800d234:	42a3      	cmp	r3, r4
 800d236:	d103      	bne.n	800d240 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800d238:	4641      	mov	r1, r8
 800d23a:	f7ff ff72 	bl	800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d23e:	4604      	mov	r4, r0
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	4641      	mov	r1, r8
 800d244:	701f      	strb	r7, [r3, #0]
 800d246:	4628      	mov	r0, r5
 800d248:	f885 9000 	strb.w	r9, [r5]
 800d24c:	f7ff ff54 	bl	800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d250:	e7e9      	b.n	800d226 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800d252:	4623      	mov	r3, r4
 800d254:	2201      	movs	r2, #1
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d25c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 800d25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d260:	460f      	mov	r7, r1
 800d262:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 800d266:	4604      	mov	r4, r0
 800d268:	2e00      	cmp	r6, #0
 800d26a:	d03e      	beq.n	800d2ea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d03d      	beq.n	800d2ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800d270:	460a      	mov	r2, r1
 800d272:	4613      	mov	r3, r2
 800d274:	6892      	ldr	r2, [r2, #8]
 800d276:	2a00      	cmp	r2, #0
 800d278:	d1fb      	bne.n	800d272 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	d04b      	beq.n	800d318 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 800d280:	4299      	cmp	r1, r3
 800d282:	6073      	str	r3, [r6, #4]
 800d284:	609e      	str	r6, [r3, #8]
 800d286:	d027      	beq.n	800d2d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 800d288:	685d      	ldr	r5, [r3, #4]
 800d28a:	b102      	cbz	r2, 800d28e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 800d28c:	6055      	str	r5, [r2, #4]
 800d28e:	6858      	ldr	r0, [r3, #4]
 800d290:	6082      	str	r2, [r0, #8]
 800d292:	60d9      	str	r1, [r3, #12]
 800d294:	68e1      	ldr	r1, [r4, #12]
 800d296:	604b      	str	r3, [r1, #4]
 800d298:	6879      	ldr	r1, [r7, #4]
 800d29a:	42a1      	cmp	r1, r4
 800d29c:	d11e      	bne.n	800d2dc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 800d29e:	607b      	str	r3, [r7, #4]
 800d2a0:	6861      	ldr	r1, [r4, #4]
 800d2a2:	7820      	ldrb	r0, [r4, #0]
 800d2a4:	6059      	str	r1, [r3, #4]
 800d2a6:	7819      	ldrb	r1, [r3, #0]
 800d2a8:	7018      	strb	r0, [r3, #0]
 800d2aa:	4616      	mov	r6, r2
 800d2ac:	7021      	strb	r1, [r4, #0]
 800d2ae:	7823      	ldrb	r3, [r4, #0]
 800d2b0:	b173      	cbz	r3, 800d2d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 800d2b2:	1d39      	adds	r1, r7, #4
 800d2b4:	f04f 0800 	mov.w	r8, #0
 800d2b8:	f04f 0901 	mov.w	r9, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	42b3      	cmp	r3, r6
 800d2c0:	d07b      	beq.n	800d3ba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
 800d2c2:	2e00      	cmp	r6, #0
 800d2c4:	d03f      	beq.n	800d346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800d2c6:	7833      	ldrb	r3, [r6, #0]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d03c      	beq.n	800d346 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	7033      	strb	r3, [r6, #0]
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	b003      	add	sp, #12
 800d2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	461d      	mov	r5, r3
 800d2da:	e7dd      	b.n	800d298 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 800d2dc:	6861      	ldr	r1, [r4, #4]
 800d2de:	6888      	ldr	r0, [r1, #8]
 800d2e0:	42a0      	cmp	r0, r4
 800d2e2:	bf0c      	ite	eq
 800d2e4:	608b      	streq	r3, [r1, #8]
 800d2e6:	60cb      	strne	r3, [r1, #12]
 800d2e8:	e7da      	b.n	800d2a0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 800d2ea:	460e      	mov	r6, r1
 800d2ec:	6865      	ldr	r5, [r4, #4]
 800d2ee:	b106      	cbz	r6, 800d2f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 800d2f0:	6075      	str	r5, [r6, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	42a3      	cmp	r3, r4
 800d2f6:	d111      	bne.n	800d31c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 800d2f8:	607e      	str	r6, [r7, #4]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	d103      	bne.n	800d308 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800d300:	68e3      	ldr	r3, [r4, #12]
 800d302:	b993      	cbnz	r3, 800d32a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 800d304:	6863      	ldr	r3, [r4, #4]
 800d306:	60bb      	str	r3, [r7, #8]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	d1cf      	bne.n	800d2ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d30e:	68a3      	ldr	r3, [r4, #8]
 800d310:	b993      	cbnz	r3, 800d338 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	e7ca      	b.n	800d2ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d318:	4616      	mov	r6, r2
 800d31a:	e7e7      	b.n	800d2ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 800d31c:	6863      	ldr	r3, [r4, #4]
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	42a2      	cmp	r2, r4
 800d322:	bf0c      	ite	eq
 800d324:	609e      	streq	r6, [r3, #8]
 800d326:	60de      	strne	r6, [r3, #12]
 800d328:	e7e7      	b.n	800d2fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 800d32a:	4633      	mov	r3, r6
 800d32c:	461a      	mov	r2, r3
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1fb      	bne.n	800d32c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 800d334:	60ba      	str	r2, [r7, #8]
 800d336:	e7e7      	b.n	800d308 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 800d338:	4633      	mov	r3, r6
 800d33a:	461a      	mov	r2, r3
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1fb      	bne.n	800d33a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 800d342:	60fa      	str	r2, [r7, #12]
 800d344:	e7b3      	b.n	800d2ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800d346:	68a8      	ldr	r0, [r5, #8]
 800d348:	42b0      	cmp	r0, r6
 800d34a:	d139      	bne.n	800d3c0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
 800d34c:	68e8      	ldr	r0, [r5, #12]
 800d34e:	7803      	ldrb	r3, [r0, #0]
 800d350:	b943      	cbnz	r3, 800d364 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
 800d352:	f880 9000 	strb.w	r9, [r0]
 800d356:	4628      	mov	r0, r5
 800d358:	702b      	strb	r3, [r5, #0]
 800d35a:	9101      	str	r1, [sp, #4]
 800d35c:	f7ff fecc 	bl	800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d360:	68e8      	ldr	r0, [r5, #12]
 800d362:	9901      	ldr	r1, [sp, #4]
 800d364:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d368:	b122      	cbz	r2, 800d374 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
 800d36a:	f892 c000 	ldrb.w	ip, [r2]
 800d36e:	f1bc 0f01 	cmp.w	ip, #1
 800d372:	d10b      	bne.n	800d38c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 800d374:	b123      	cbz	r3, 800d380 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 800d376:	f893 c000 	ldrb.w	ip, [r3]
 800d37a:	f1bc 0f01 	cmp.w	ip, #1
 800d37e:	d105      	bne.n	800d38c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 800d380:	686b      	ldr	r3, [r5, #4]
 800d382:	f880 8000 	strb.w	r8, [r0]
 800d386:	462e      	mov	r6, r5
 800d388:	461d      	mov	r5, r3
 800d38a:	e797      	b.n	800d2bc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
 800d38c:	b113      	cbz	r3, 800d394 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d108      	bne.n	800d3a6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
 800d394:	2301      	movs	r3, #1
 800d396:	7013      	strb	r3, [r2, #0]
 800d398:	2300      	movs	r3, #0
 800d39a:	7003      	strb	r3, [r0, #0]
 800d39c:	9101      	str	r1, [sp, #4]
 800d39e:	f7ff fec0 	bl	800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d3a2:	68e8      	ldr	r0, [r5, #12]
 800d3a4:	9901      	ldr	r1, [sp, #4]
 800d3a6:	782b      	ldrb	r3, [r5, #0]
 800d3a8:	7003      	strb	r3, [r0, #0]
 800d3aa:	68c3      	ldr	r3, [r0, #12]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	702a      	strb	r2, [r5, #0]
 800d3b0:	b103      	cbz	r3, 800d3b4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7ff fe9f 	bl	800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	d186      	bne.n	800d2cc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
 800d3be:	e787      	b.n	800d2d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 800d3c0:	7803      	ldrb	r3, [r0, #0]
 800d3c2:	b943      	cbnz	r3, 800d3d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 800d3c4:	f880 9000 	strb.w	r9, [r0]
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	702b      	strb	r3, [r5, #0]
 800d3cc:	9101      	str	r1, [sp, #4]
 800d3ce:	f7ff fea8 	bl	800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d3d2:	68a8      	ldr	r0, [r5, #8]
 800d3d4:	9901      	ldr	r1, [sp, #4]
 800d3d6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d3da:	b122      	cbz	r2, 800d3e6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
 800d3dc:	f892 c000 	ldrb.w	ip, [r2]
 800d3e0:	f1bc 0f01 	cmp.w	ip, #1
 800d3e4:	d106      	bne.n	800d3f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d0ca      	beq.n	800d380 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 800d3ea:	f893 c000 	ldrb.w	ip, [r3]
 800d3ee:	f1bc 0f01 	cmp.w	ip, #1
 800d3f2:	d0c5      	beq.n	800d380 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 800d3f4:	b113      	cbz	r3, 800d3fc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d108      	bne.n	800d40e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	7013      	strb	r3, [r2, #0]
 800d400:	2300      	movs	r3, #0
 800d402:	7003      	strb	r3, [r0, #0]
 800d404:	9101      	str	r1, [sp, #4]
 800d406:	f7ff fe77 	bl	800d0f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800d40a:	68a8      	ldr	r0, [r5, #8]
 800d40c:	9901      	ldr	r1, [sp, #4]
 800d40e:	782b      	ldrb	r3, [r5, #0]
 800d410:	7003      	strb	r3, [r0, #0]
 800d412:	6883      	ldr	r3, [r0, #8]
 800d414:	2201      	movs	r2, #1
 800d416:	702a      	strb	r2, [r5, #0]
 800d418:	b103      	cbz	r3, 800d41c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
 800d41a:	701a      	strb	r2, [r3, #0]
 800d41c:	4628      	mov	r0, r5
 800d41e:	f7ff fe80 	bl	800d122 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800d422:	e7ca      	b.n	800d3ba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

0800d424 <_ZSt17__throw_bad_allocv>:
 800d424:	b508      	push	{r3, lr}
 800d426:	f000 f809 	bl	800d43c <abort>
	...

0800d42c <_ZSt15get_new_handlerv>:
 800d42c:	4b02      	ldr	r3, [pc, #8]	; (800d438 <_ZSt15get_new_handlerv+0xc>)
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	f3bf 8f5b 	dmb	ish
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	20004f18 	.word	0x20004f18

0800d43c <abort>:
 800d43c:	b508      	push	{r3, lr}
 800d43e:	2006      	movs	r0, #6
 800d440:	f000 f9b8 	bl	800d7b4 <raise>
 800d444:	2001      	movs	r0, #1
 800d446:	f7fe ff97 	bl	800c378 <_exit>
	...

0800d44c <calloc>:
 800d44c:	4b02      	ldr	r3, [pc, #8]	; (800d458 <calloc+0xc>)
 800d44e:	460a      	mov	r2, r1
 800d450:	4601      	mov	r1, r0
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	f000 b852 	b.w	800d4fc <_calloc_r>
 800d458:	200001a8 	.word	0x200001a8

0800d45c <__errno>:
 800d45c:	4b01      	ldr	r3, [pc, #4]	; (800d464 <__errno+0x8>)
 800d45e:	6818      	ldr	r0, [r3, #0]
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	200001a8 	.word	0x200001a8

0800d468 <__libc_init_array>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	4d0d      	ldr	r5, [pc, #52]	; (800d4a0 <__libc_init_array+0x38>)
 800d46c:	4c0d      	ldr	r4, [pc, #52]	; (800d4a4 <__libc_init_array+0x3c>)
 800d46e:	1b64      	subs	r4, r4, r5
 800d470:	10a4      	asrs	r4, r4, #2
 800d472:	2600      	movs	r6, #0
 800d474:	42a6      	cmp	r6, r4
 800d476:	d109      	bne.n	800d48c <__libc_init_array+0x24>
 800d478:	4d0b      	ldr	r5, [pc, #44]	; (800d4a8 <__libc_init_array+0x40>)
 800d47a:	4c0c      	ldr	r4, [pc, #48]	; (800d4ac <__libc_init_array+0x44>)
 800d47c:	f000 f9c2 	bl	800d804 <_init>
 800d480:	1b64      	subs	r4, r4, r5
 800d482:	10a4      	asrs	r4, r4, #2
 800d484:	2600      	movs	r6, #0
 800d486:	42a6      	cmp	r6, r4
 800d488:	d105      	bne.n	800d496 <__libc_init_array+0x2e>
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d490:	4798      	blx	r3
 800d492:	3601      	adds	r6, #1
 800d494:	e7ee      	b.n	800d474 <__libc_init_array+0xc>
 800d496:	f855 3b04 	ldr.w	r3, [r5], #4
 800d49a:	4798      	blx	r3
 800d49c:	3601      	adds	r6, #1
 800d49e:	e7f2      	b.n	800d486 <__libc_init_array+0x1e>
 800d4a0:	0800d96c 	.word	0x0800d96c
 800d4a4:	0800d96c 	.word	0x0800d96c
 800d4a8:	0800d96c 	.word	0x0800d96c
 800d4ac:	0800d978 	.word	0x0800d978

0800d4b0 <malloc>:
 800d4b0:	4b02      	ldr	r3, [pc, #8]	; (800d4bc <malloc+0xc>)
 800d4b2:	4601      	mov	r1, r0
 800d4b4:	6818      	ldr	r0, [r3, #0]
 800d4b6:	f000 b881 	b.w	800d5bc <_malloc_r>
 800d4ba:	bf00      	nop
 800d4bc:	200001a8 	.word	0x200001a8

0800d4c0 <free>:
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <free+0xc>)
 800d4c2:	4601      	mov	r1, r0
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	f000 b829 	b.w	800d51c <_free_r>
 800d4ca:	bf00      	nop
 800d4cc:	200001a8 	.word	0x200001a8

0800d4d0 <memcpy>:
 800d4d0:	440a      	add	r2, r1
 800d4d2:	4291      	cmp	r1, r2
 800d4d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d4d8:	d100      	bne.n	800d4dc <memcpy+0xc>
 800d4da:	4770      	bx	lr
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4e6:	4291      	cmp	r1, r2
 800d4e8:	d1f9      	bne.n	800d4de <memcpy+0xe>
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <memset>:
 800d4ec:	4402      	add	r2, r0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d100      	bne.n	800d4f6 <memset+0xa>
 800d4f4:	4770      	bx	lr
 800d4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d4fa:	e7f9      	b.n	800d4f0 <memset+0x4>

0800d4fc <_calloc_r>:
 800d4fc:	b513      	push	{r0, r1, r4, lr}
 800d4fe:	434a      	muls	r2, r1
 800d500:	4611      	mov	r1, r2
 800d502:	9201      	str	r2, [sp, #4]
 800d504:	f000 f85a 	bl	800d5bc <_malloc_r>
 800d508:	4604      	mov	r4, r0
 800d50a:	b118      	cbz	r0, 800d514 <_calloc_r+0x18>
 800d50c:	9a01      	ldr	r2, [sp, #4]
 800d50e:	2100      	movs	r1, #0
 800d510:	f7ff ffec 	bl	800d4ec <memset>
 800d514:	4620      	mov	r0, r4
 800d516:	b002      	add	sp, #8
 800d518:	bd10      	pop	{r4, pc}
	...

0800d51c <_free_r>:
 800d51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d51e:	2900      	cmp	r1, #0
 800d520:	d048      	beq.n	800d5b4 <_free_r+0x98>
 800d522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d526:	9001      	str	r0, [sp, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f1a1 0404 	sub.w	r4, r1, #4
 800d52e:	bfb8      	it	lt
 800d530:	18e4      	addlt	r4, r4, r3
 800d532:	f000 f95b 	bl	800d7ec <__malloc_lock>
 800d536:	4a20      	ldr	r2, [pc, #128]	; (800d5b8 <_free_r+0x9c>)
 800d538:	9801      	ldr	r0, [sp, #4]
 800d53a:	6813      	ldr	r3, [r2, #0]
 800d53c:	4615      	mov	r5, r2
 800d53e:	b933      	cbnz	r3, 800d54e <_free_r+0x32>
 800d540:	6063      	str	r3, [r4, #4]
 800d542:	6014      	str	r4, [r2, #0]
 800d544:	b003      	add	sp, #12
 800d546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d54a:	f000 b955 	b.w	800d7f8 <__malloc_unlock>
 800d54e:	42a3      	cmp	r3, r4
 800d550:	d90b      	bls.n	800d56a <_free_r+0x4e>
 800d552:	6821      	ldr	r1, [r4, #0]
 800d554:	1862      	adds	r2, r4, r1
 800d556:	4293      	cmp	r3, r2
 800d558:	bf04      	itt	eq
 800d55a:	681a      	ldreq	r2, [r3, #0]
 800d55c:	685b      	ldreq	r3, [r3, #4]
 800d55e:	6063      	str	r3, [r4, #4]
 800d560:	bf04      	itt	eq
 800d562:	1852      	addeq	r2, r2, r1
 800d564:	6022      	streq	r2, [r4, #0]
 800d566:	602c      	str	r4, [r5, #0]
 800d568:	e7ec      	b.n	800d544 <_free_r+0x28>
 800d56a:	461a      	mov	r2, r3
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	b10b      	cbz	r3, 800d574 <_free_r+0x58>
 800d570:	42a3      	cmp	r3, r4
 800d572:	d9fa      	bls.n	800d56a <_free_r+0x4e>
 800d574:	6811      	ldr	r1, [r2, #0]
 800d576:	1855      	adds	r5, r2, r1
 800d578:	42a5      	cmp	r5, r4
 800d57a:	d10b      	bne.n	800d594 <_free_r+0x78>
 800d57c:	6824      	ldr	r4, [r4, #0]
 800d57e:	4421      	add	r1, r4
 800d580:	1854      	adds	r4, r2, r1
 800d582:	42a3      	cmp	r3, r4
 800d584:	6011      	str	r1, [r2, #0]
 800d586:	d1dd      	bne.n	800d544 <_free_r+0x28>
 800d588:	681c      	ldr	r4, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	6053      	str	r3, [r2, #4]
 800d58e:	4421      	add	r1, r4
 800d590:	6011      	str	r1, [r2, #0]
 800d592:	e7d7      	b.n	800d544 <_free_r+0x28>
 800d594:	d902      	bls.n	800d59c <_free_r+0x80>
 800d596:	230c      	movs	r3, #12
 800d598:	6003      	str	r3, [r0, #0]
 800d59a:	e7d3      	b.n	800d544 <_free_r+0x28>
 800d59c:	6825      	ldr	r5, [r4, #0]
 800d59e:	1961      	adds	r1, r4, r5
 800d5a0:	428b      	cmp	r3, r1
 800d5a2:	bf04      	itt	eq
 800d5a4:	6819      	ldreq	r1, [r3, #0]
 800d5a6:	685b      	ldreq	r3, [r3, #4]
 800d5a8:	6063      	str	r3, [r4, #4]
 800d5aa:	bf04      	itt	eq
 800d5ac:	1949      	addeq	r1, r1, r5
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	6054      	str	r4, [r2, #4]
 800d5b2:	e7c7      	b.n	800d544 <_free_r+0x28>
 800d5b4:	b003      	add	sp, #12
 800d5b6:	bd30      	pop	{r4, r5, pc}
 800d5b8:	20004f1c 	.word	0x20004f1c

0800d5bc <_malloc_r>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	1ccd      	adds	r5, r1, #3
 800d5c0:	f025 0503 	bic.w	r5, r5, #3
 800d5c4:	3508      	adds	r5, #8
 800d5c6:	2d0c      	cmp	r5, #12
 800d5c8:	bf38      	it	cc
 800d5ca:	250c      	movcc	r5, #12
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	db01      	blt.n	800d5d6 <_malloc_r+0x1a>
 800d5d2:	42a9      	cmp	r1, r5
 800d5d4:	d903      	bls.n	800d5de <_malloc_r+0x22>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	6033      	str	r3, [r6, #0]
 800d5da:	2000      	movs	r0, #0
 800d5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5de:	f000 f905 	bl	800d7ec <__malloc_lock>
 800d5e2:	4921      	ldr	r1, [pc, #132]	; (800d668 <_malloc_r+0xac>)
 800d5e4:	680a      	ldr	r2, [r1, #0]
 800d5e6:	4614      	mov	r4, r2
 800d5e8:	b99c      	cbnz	r4, 800d612 <_malloc_r+0x56>
 800d5ea:	4f20      	ldr	r7, [pc, #128]	; (800d66c <_malloc_r+0xb0>)
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	b923      	cbnz	r3, 800d5fa <_malloc_r+0x3e>
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f000 f8a6 	bl	800d744 <_sbrk_r>
 800d5f8:	6038      	str	r0, [r7, #0]
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f000 f8a1 	bl	800d744 <_sbrk_r>
 800d602:	1c43      	adds	r3, r0, #1
 800d604:	d123      	bne.n	800d64e <_malloc_r+0x92>
 800d606:	230c      	movs	r3, #12
 800d608:	6033      	str	r3, [r6, #0]
 800d60a:	4630      	mov	r0, r6
 800d60c:	f000 f8f4 	bl	800d7f8 <__malloc_unlock>
 800d610:	e7e3      	b.n	800d5da <_malloc_r+0x1e>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	1b5b      	subs	r3, r3, r5
 800d616:	d417      	bmi.n	800d648 <_malloc_r+0x8c>
 800d618:	2b0b      	cmp	r3, #11
 800d61a:	d903      	bls.n	800d624 <_malloc_r+0x68>
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	441c      	add	r4, r3
 800d620:	6025      	str	r5, [r4, #0]
 800d622:	e004      	b.n	800d62e <_malloc_r+0x72>
 800d624:	6863      	ldr	r3, [r4, #4]
 800d626:	42a2      	cmp	r2, r4
 800d628:	bf0c      	ite	eq
 800d62a:	600b      	streq	r3, [r1, #0]
 800d62c:	6053      	strne	r3, [r2, #4]
 800d62e:	4630      	mov	r0, r6
 800d630:	f000 f8e2 	bl	800d7f8 <__malloc_unlock>
 800d634:	f104 000b 	add.w	r0, r4, #11
 800d638:	1d23      	adds	r3, r4, #4
 800d63a:	f020 0007 	bic.w	r0, r0, #7
 800d63e:	1ac2      	subs	r2, r0, r3
 800d640:	d0cc      	beq.n	800d5dc <_malloc_r+0x20>
 800d642:	1a1b      	subs	r3, r3, r0
 800d644:	50a3      	str	r3, [r4, r2]
 800d646:	e7c9      	b.n	800d5dc <_malloc_r+0x20>
 800d648:	4622      	mov	r2, r4
 800d64a:	6864      	ldr	r4, [r4, #4]
 800d64c:	e7cc      	b.n	800d5e8 <_malloc_r+0x2c>
 800d64e:	1cc4      	adds	r4, r0, #3
 800d650:	f024 0403 	bic.w	r4, r4, #3
 800d654:	42a0      	cmp	r0, r4
 800d656:	d0e3      	beq.n	800d620 <_malloc_r+0x64>
 800d658:	1a21      	subs	r1, r4, r0
 800d65a:	4630      	mov	r0, r6
 800d65c:	f000 f872 	bl	800d744 <_sbrk_r>
 800d660:	3001      	adds	r0, #1
 800d662:	d1dd      	bne.n	800d620 <_malloc_r+0x64>
 800d664:	e7cf      	b.n	800d606 <_malloc_r+0x4a>
 800d666:	bf00      	nop
 800d668:	20004f1c 	.word	0x20004f1c
 800d66c:	20004f20 	.word	0x20004f20

0800d670 <cleanup_glue>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	460c      	mov	r4, r1
 800d674:	6809      	ldr	r1, [r1, #0]
 800d676:	4605      	mov	r5, r0
 800d678:	b109      	cbz	r1, 800d67e <cleanup_glue+0xe>
 800d67a:	f7ff fff9 	bl	800d670 <cleanup_glue>
 800d67e:	4621      	mov	r1, r4
 800d680:	4628      	mov	r0, r5
 800d682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d686:	f7ff bf49 	b.w	800d51c <_free_r>
	...

0800d68c <_reclaim_reent>:
 800d68c:	4b2c      	ldr	r3, [pc, #176]	; (800d740 <_reclaim_reent+0xb4>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4283      	cmp	r3, r0
 800d692:	b570      	push	{r4, r5, r6, lr}
 800d694:	4604      	mov	r4, r0
 800d696:	d051      	beq.n	800d73c <_reclaim_reent+0xb0>
 800d698:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d69a:	b143      	cbz	r3, 800d6ae <_reclaim_reent+0x22>
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d14a      	bne.n	800d738 <_reclaim_reent+0xac>
 800d6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6a4:	6819      	ldr	r1, [r3, #0]
 800d6a6:	b111      	cbz	r1, 800d6ae <_reclaim_reent+0x22>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7ff ff37 	bl	800d51c <_free_r>
 800d6ae:	6961      	ldr	r1, [r4, #20]
 800d6b0:	b111      	cbz	r1, 800d6b8 <_reclaim_reent+0x2c>
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7ff ff32 	bl	800d51c <_free_r>
 800d6b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6ba:	b111      	cbz	r1, 800d6c2 <_reclaim_reent+0x36>
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f7ff ff2d 	bl	800d51c <_free_r>
 800d6c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d6c4:	b111      	cbz	r1, 800d6cc <_reclaim_reent+0x40>
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f7ff ff28 	bl	800d51c <_free_r>
 800d6cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d6ce:	b111      	cbz	r1, 800d6d6 <_reclaim_reent+0x4a>
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7ff ff23 	bl	800d51c <_free_r>
 800d6d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d6d8:	b111      	cbz	r1, 800d6e0 <_reclaim_reent+0x54>
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7ff ff1e 	bl	800d51c <_free_r>
 800d6e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d6e2:	b111      	cbz	r1, 800d6ea <_reclaim_reent+0x5e>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f7ff ff19 	bl	800d51c <_free_r>
 800d6ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d6ec:	b111      	cbz	r1, 800d6f4 <_reclaim_reent+0x68>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7ff ff14 	bl	800d51c <_free_r>
 800d6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6f6:	b111      	cbz	r1, 800d6fe <_reclaim_reent+0x72>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7ff ff0f 	bl	800d51c <_free_r>
 800d6fe:	69a3      	ldr	r3, [r4, #24]
 800d700:	b1e3      	cbz	r3, 800d73c <_reclaim_reent+0xb0>
 800d702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d704:	4620      	mov	r0, r4
 800d706:	4798      	blx	r3
 800d708:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d70a:	b1b9      	cbz	r1, 800d73c <_reclaim_reent+0xb0>
 800d70c:	4620      	mov	r0, r4
 800d70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d712:	f7ff bfad 	b.w	800d670 <cleanup_glue>
 800d716:	5949      	ldr	r1, [r1, r5]
 800d718:	b941      	cbnz	r1, 800d72c <_reclaim_reent+0xa0>
 800d71a:	3504      	adds	r5, #4
 800d71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d71e:	2d80      	cmp	r5, #128	; 0x80
 800d720:	68d9      	ldr	r1, [r3, #12]
 800d722:	d1f8      	bne.n	800d716 <_reclaim_reent+0x8a>
 800d724:	4620      	mov	r0, r4
 800d726:	f7ff fef9 	bl	800d51c <_free_r>
 800d72a:	e7ba      	b.n	800d6a2 <_reclaim_reent+0x16>
 800d72c:	680e      	ldr	r6, [r1, #0]
 800d72e:	4620      	mov	r0, r4
 800d730:	f7ff fef4 	bl	800d51c <_free_r>
 800d734:	4631      	mov	r1, r6
 800d736:	e7ef      	b.n	800d718 <_reclaim_reent+0x8c>
 800d738:	2500      	movs	r5, #0
 800d73a:	e7ef      	b.n	800d71c <_reclaim_reent+0x90>
 800d73c:	bd70      	pop	{r4, r5, r6, pc}
 800d73e:	bf00      	nop
 800d740:	200001a8 	.word	0x200001a8

0800d744 <_sbrk_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d06      	ldr	r5, [pc, #24]	; (800d760 <_sbrk_r+0x1c>)
 800d748:	2300      	movs	r3, #0
 800d74a:	4604      	mov	r4, r0
 800d74c:	4608      	mov	r0, r1
 800d74e:	602b      	str	r3, [r5, #0]
 800d750:	f7fe fe1c 	bl	800c38c <_sbrk>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d102      	bne.n	800d75e <_sbrk_r+0x1a>
 800d758:	682b      	ldr	r3, [r5, #0]
 800d75a:	b103      	cbz	r3, 800d75e <_sbrk_r+0x1a>
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	20006cf4 	.word	0x20006cf4

0800d764 <_raise_r>:
 800d764:	291f      	cmp	r1, #31
 800d766:	b538      	push	{r3, r4, r5, lr}
 800d768:	4604      	mov	r4, r0
 800d76a:	460d      	mov	r5, r1
 800d76c:	d904      	bls.n	800d778 <_raise_r+0x14>
 800d76e:	2316      	movs	r3, #22
 800d770:	6003      	str	r3, [r0, #0]
 800d772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d77a:	b112      	cbz	r2, 800d782 <_raise_r+0x1e>
 800d77c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d780:	b94b      	cbnz	r3, 800d796 <_raise_r+0x32>
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f830 	bl	800d7e8 <_getpid_r>
 800d788:	462a      	mov	r2, r5
 800d78a:	4601      	mov	r1, r0
 800d78c:	4620      	mov	r0, r4
 800d78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d792:	f000 b817 	b.w	800d7c4 <_kill_r>
 800d796:	2b01      	cmp	r3, #1
 800d798:	d00a      	beq.n	800d7b0 <_raise_r+0x4c>
 800d79a:	1c59      	adds	r1, r3, #1
 800d79c:	d103      	bne.n	800d7a6 <_raise_r+0x42>
 800d79e:	2316      	movs	r3, #22
 800d7a0:	6003      	str	r3, [r0, #0]
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	e7e7      	b.n	800d776 <_raise_r+0x12>
 800d7a6:	2400      	movs	r4, #0
 800d7a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	4798      	blx	r3
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e7e0      	b.n	800d776 <_raise_r+0x12>

0800d7b4 <raise>:
 800d7b4:	4b02      	ldr	r3, [pc, #8]	; (800d7c0 <raise+0xc>)
 800d7b6:	4601      	mov	r1, r0
 800d7b8:	6818      	ldr	r0, [r3, #0]
 800d7ba:	f7ff bfd3 	b.w	800d764 <_raise_r>
 800d7be:	bf00      	nop
 800d7c0:	200001a8 	.word	0x200001a8

0800d7c4 <_kill_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4d07      	ldr	r5, [pc, #28]	; (800d7e4 <_kill_r+0x20>)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	f7fe fdc1 	bl	800c358 <_kill>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	d102      	bne.n	800d7e0 <_kill_r+0x1c>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	b103      	cbz	r3, 800d7e0 <_kill_r+0x1c>
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20006cf4 	.word	0x20006cf4

0800d7e8 <_getpid_r>:
 800d7e8:	f7fe bdae 	b.w	800c348 <_getpid>

0800d7ec <__malloc_lock>:
 800d7ec:	4801      	ldr	r0, [pc, #4]	; (800d7f4 <__malloc_lock+0x8>)
 800d7ee:	f7ff bc46 	b.w	800d07e <__retarget_lock_acquire_recursive>
 800d7f2:	bf00      	nop
 800d7f4:	20004f0c 	.word	0x20004f0c

0800d7f8 <__malloc_unlock>:
 800d7f8:	4801      	ldr	r0, [pc, #4]	; (800d800 <__malloc_unlock+0x8>)
 800d7fa:	f7ff bc54 	b.w	800d0a6 <__retarget_lock_release_recursive>
 800d7fe:	bf00      	nop
 800d800:	20004f0c 	.word	0x20004f0c

0800d804 <_init>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	bf00      	nop
 800d808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80a:	bc08      	pop	{r3}
 800d80c:	469e      	mov	lr, r3
 800d80e:	4770      	bx	lr

0800d810 <_fini>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	bf00      	nop
 800d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d816:	bc08      	pop	{r3}
 800d818:	469e      	mov	lr, r3
 800d81a:	4770      	bx	lr
